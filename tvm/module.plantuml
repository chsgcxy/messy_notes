@startuml tvm-runtime-module

class "runtime::Module" {
    {field} -std::shared_ptr<ModuleNode> node_;
    {method} +explicit Module(std::shared_ptr<ModuleNode> n) : node_(n) {}
    {method} +inline PackedFunc GetFunction(const std::string& name,
        bool query_imports = false);
    {method} +inline const ModuleNode* operator->() const;
    {method} +TVM_DLL void Import(Module other);
}

class "runtime::ModuleNode" {
    {field} std::vector<Module> imports_;
    {method} +virtual PackedFunc GetFunction(const std::string& name,
        const std::shared_ptr<ModuleNode>& sptr_to_self) = 0;
    {method} +const std::vector<Module>& imports() const {return imports_;}
    {method} +TVM_DLL virtual void SaveToFile(const std::string& file_name,
        const std::string& format);
    {method} +TVM_DLL virtual void SaveToBinary(dmlc::Stream* stream);
}

class LLVMModuleNode {
    {method} +PackedFunc GetFunction(const std::string& name,
        const std::shared_ptr<ModuleNode>& sptr_to_self);
    {method} +void SaveToFile(const std::string& file_name,
        const std::string& format);
    {method} +void Init(const Array<LoweredFunc>& funcs,
        std::string target);
    {method} +void LoadIR(const std::string& file_name);
}

class CUDAModuleNode {
    {method} +PackedFunc GetFunction(const std::string& name,
        const std::shared_ptr<ModuleNode>& sptr_to_self);
    {method} +void SaveToFile(const std::string& file_name,
        const std::string& format);    
}

class RelayBuildModule {
    {field} std::unordered_map<std::string, runtime::NDArray> params_;
    {method}+PackedFunc GetFunction(const std::string& name, 
        const std::shared_ptr<ModuleNode>& sptr_to_self);
    {method}+void Build(Function func, const TargetsMap& targets,
        const tvm::Target& target_host);
    {method}-void BuildRelay(Function func, 
        const std::unordered_map<std::string, tvm::runtime::NDArray>& params);
    {method}-relay::Module Optimize(relay::Module relay_module, const TargetsMap& targets,
        const std::unordered_map<std::string, runtime::NDArray>& params)
}

class GraphRuntimeCodegenModule {
    {field} std::shared_ptr<GraphRuntimeCodegen> codegen_;
    {method}+PackedFunc GetFunction(const std::string& name, 
        const std::shared_ptr<ModuleNode>& sptr_to_self);
}

"runtime::Module" <-left-> "runtime::ModuleNode"
LLVMModuleNode -right-|> "runtime::ModuleNode"
CUDAModuleNode -up-|> "runtime::ModuleNode"
RelayBuildModule -down-|> "runtime::ModuleNode"
GraphRuntimeCodegenModule -down-|> "runtime::ModuleNode"
@enduml