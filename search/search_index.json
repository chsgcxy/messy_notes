{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome To Messy Notes \u00b6 \u8fd9\u662f\u6240\u6709\u7684\u611f\u609f\u7684\u6700\u539f\u59cb\u7684\u8bb0\u5f55\uff0c\u6280\u672f\u603b\u7ed3\uff0c\u751f\u6d3b\u611f\u609f\uff0c\u4e1a\u4f59\u7231\u597d\uff0c\u5e94\u6709\u5c3d\u6709\uff0c\u6240\u4ee5\u6211\u53eb\u5b83messy note github page\u7684\u7f3a\u70b9\u5728\u4e8e\u65e0\u6cd5\u548c\u5927\u5bb6\u4ea4\u6d41\uff0c\u4e3b\u8981\u662f\u65e0\u6cd5\u88ab\u641c\u7d22\u5f15\u64ce\u641c\u7d22\u5230\u3002 \u6211\u4e5f\u4e00\u76f4\u5728\u8ddf\u8e2a\u662f\u5426\u6709\u4e00\u4e9b\u65b9\u6cd5\u80fd\u591f\u5c06\u8fd9\u4e9b\u788e\u788e\u5ff5\u5f88\u8f7b\u677e\u7684\u540c\u6b65\u5230\u4e00\u4e9b\u535a\u5ba2\u5e73\u53f0\uff0c\u8fd9\u6837\u5c31\u6709\u4e86\u4ea4\u6d41\u7684\u673a\u4f1a\uff0c \u788e\u788e\u5ff5\u4e2d\u7684\u5f88\u591a\u9519\u8bef\u4f1a\u88ab\u6307\u6b63\uff0c\u5f88\u591a\u89c2\u70b9\u4f1a\u5f97\u5230\u8bc4\u5224\u3002 \u4f46\u5f88\u9057\u61be\uff0c\u76ee\u524d\u6211\u8fd8\u6ca1\u6709\u638c\u63e1\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u73b0\u5728\u4e5f\u4f1a\u4e0d\u5b9a\u671f\u7684\u624b\u52a8\u540c\u6b65\u4e00\u4e9b\u5230CSDN\u7b49\u535a\u5ba2\u5e73\u53f0\uff0c\u4f46\u8fd9\u786e\u5b9e\u8ba9\u6211 \u611f\u89c9\u5230\u9ebb\u70e6\uff0c\u5982\u679c\u6709\u65b9\u6cd5\u80fd\u591f\u50cfgithub event\u4e00\u6837\uff0c\u6bcf\u6b21\u6211\u5728github\u4e2d\u63d0\u4ea4\u5c31\u80fd\u81ea\u52a8\u90e8\u7f72\u5230\u67d0\u4e2a\u535a\u5ba2\u5e73\u53f0\uff0c\u90a3\u53ef \u5c31\u771f\u662f\u592a\u597d\u4e86\u3002 \u4e4b\u524d\u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u76ee\u5f55\u4ecb\u7ecd\uff0c\u4f46\u540e\u6765\u6211\u53d1\u73b0\u8fd9\u5f88\u96be\u8ddf\u7684\u4e0a\u6587\u6863\u76ee\u5f55\u7684\u66f4\u65b0\uff0c\u6240\u4ee5\u6211\u653e\u5f03\u4e86\u8fd9\u4e2a\u76ee\u5f55\u3002 \u6211\u60f3\u9759\u6001\u7f51\u9875\u81ea\u52a8\u751f\u6210\u7684\u76ee\u5f55\u5df2\u7ecf\u80fd\u591f\u6ee1\u8db3\u5206\u7c7b\u7684\u9700\u6c42\uff0c\u76ee\u5f55\u4e2d\u5305\u542b\u7684\u4e1c\u897f\u57fa\u672c\u4e0a\u80fd\u901a\u8fc7\u76ee\u5f55\u540d\u79f0\u6765\u89e3\u91ca\uff0c \u8fd9\u6216\u8bb8\u662f\u6211\u6700\u559c\u6b22\u7684\u65b9\u6cd5\u3002","title":"Welcome To Messy Notes"},{"location":"index.html#welcome-to-messy-notes","text":"\u8fd9\u662f\u6240\u6709\u7684\u611f\u609f\u7684\u6700\u539f\u59cb\u7684\u8bb0\u5f55\uff0c\u6280\u672f\u603b\u7ed3\uff0c\u751f\u6d3b\u611f\u609f\uff0c\u4e1a\u4f59\u7231\u597d\uff0c\u5e94\u6709\u5c3d\u6709\uff0c\u6240\u4ee5\u6211\u53eb\u5b83messy note github page\u7684\u7f3a\u70b9\u5728\u4e8e\u65e0\u6cd5\u548c\u5927\u5bb6\u4ea4\u6d41\uff0c\u4e3b\u8981\u662f\u65e0\u6cd5\u88ab\u641c\u7d22\u5f15\u64ce\u641c\u7d22\u5230\u3002 \u6211\u4e5f\u4e00\u76f4\u5728\u8ddf\u8e2a\u662f\u5426\u6709\u4e00\u4e9b\u65b9\u6cd5\u80fd\u591f\u5c06\u8fd9\u4e9b\u788e\u788e\u5ff5\u5f88\u8f7b\u677e\u7684\u540c\u6b65\u5230\u4e00\u4e9b\u535a\u5ba2\u5e73\u53f0\uff0c\u8fd9\u6837\u5c31\u6709\u4e86\u4ea4\u6d41\u7684\u673a\u4f1a\uff0c \u788e\u788e\u5ff5\u4e2d\u7684\u5f88\u591a\u9519\u8bef\u4f1a\u88ab\u6307\u6b63\uff0c\u5f88\u591a\u89c2\u70b9\u4f1a\u5f97\u5230\u8bc4\u5224\u3002 \u4f46\u5f88\u9057\u61be\uff0c\u76ee\u524d\u6211\u8fd8\u6ca1\u6709\u638c\u63e1\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u73b0\u5728\u4e5f\u4f1a\u4e0d\u5b9a\u671f\u7684\u624b\u52a8\u540c\u6b65\u4e00\u4e9b\u5230CSDN\u7b49\u535a\u5ba2\u5e73\u53f0\uff0c\u4f46\u8fd9\u786e\u5b9e\u8ba9\u6211 \u611f\u89c9\u5230\u9ebb\u70e6\uff0c\u5982\u679c\u6709\u65b9\u6cd5\u80fd\u591f\u50cfgithub event\u4e00\u6837\uff0c\u6bcf\u6b21\u6211\u5728github\u4e2d\u63d0\u4ea4\u5c31\u80fd\u81ea\u52a8\u90e8\u7f72\u5230\u67d0\u4e2a\u535a\u5ba2\u5e73\u53f0\uff0c\u90a3\u53ef \u5c31\u771f\u662f\u592a\u597d\u4e86\u3002 \u4e4b\u524d\u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u76ee\u5f55\u4ecb\u7ecd\uff0c\u4f46\u540e\u6765\u6211\u53d1\u73b0\u8fd9\u5f88\u96be\u8ddf\u7684\u4e0a\u6587\u6863\u76ee\u5f55\u7684\u66f4\u65b0\uff0c\u6240\u4ee5\u6211\u653e\u5f03\u4e86\u8fd9\u4e2a\u76ee\u5f55\u3002 \u6211\u60f3\u9759\u6001\u7f51\u9875\u81ea\u52a8\u751f\u6210\u7684\u76ee\u5f55\u5df2\u7ecf\u80fd\u591f\u6ee1\u8db3\u5206\u7c7b\u7684\u9700\u6c42\uff0c\u76ee\u5f55\u4e2d\u5305\u542b\u7684\u4e1c\u897f\u57fa\u672c\u4e0a\u80fd\u901a\u8fc7\u76ee\u5f55\u540d\u79f0\u6765\u89e3\u91ca\uff0c \u8fd9\u6216\u8bb8\u662f\u6211\u6700\u559c\u6b22\u7684\u65b9\u6cd5\u3002","title":"Welcome To Messy Notes"},{"location":"arch/arch_demo.html","text":"XS Arch simple \u00b6 xs-arch-simple.html","title":"XS Arch simple"},{"location":"arch/arch_demo.html#xs-arch-simple","text":"xs-arch-simple.html","title":"XS Arch simple"},{"location":"arch/arch_design.html","text":"\u82af\u7247\u67b6\u6784\u8bbe\u8ba1 \u00b6 \u65f6\u949f\u7ea7\u6a21\u62df\u5668\u5f80\u5f80\u80a9\u8d1f\u7740\u67b6\u6784\u63a2\u7d22\u7684\u4f7f\u547d\uff0c\u4e00\u65e6\u6d89\u53ca\u5230\u63a2\u7d22\uff0c\u4e00\u4e2a\u5b9a\u5f8b\u5c31\u51fa\u73b0\u4e86\uff1a\u96be\u7684\u4e0d\u662f\u600e\u4e48\u505a\uff0c\u800c\u662f\u505a\u4e00\u4e2a\u4ec0\u4e48\u6837\u7684\u3002\u6709\u4e86\u773c\u754c\u624d\u6709\u4e86\u601d\u8def\uff0c\u624d\u80fd\u53ef\u80fd\u628a\u601d\u8def\u843d\u5730\u3002 \u300a\u8ba1\u7b97\u673a\u4f53\u7cfb\u67b6\u6784\uff1a\u91cf\u5316\u5206\u6790\u65b9\u6cd5\u300b\u8fd9\u672c\u4e66\u4f3c\u4e4e\u500d\u53d7\u5927\u5bb6\u63a8\u5d07\uff0c\u51c6\u5907\u641e\u4e00\u672c\u62dc\u8bfb\u4e00\u4e0b \u5728\u77e5\u4e4e\u6587\u7ae0[ https://www.zhihu.com/question/23089746/answer/412954049]\u548c[https://zhuanlan.zhihu.com/p/53476489]\u4e2d\u90fd\u63d0\u5230\u4e86Tensilica\u548c\u5b83\u7684ASIP \u3002\u6211\u89c9\u5f97\u5b83\u7684\u601d\u8def\u662f\u672c\u8eab\u4e0d\u5947\u7279\uff0cSISC\u786e\u5b9e\u8981\u6bd4RISC\u6027\u80fd\u597d\uff0c\u8fd9\u662f\u4e8b\u5b9e\uff0c\u4e0d\u7531\u5f97\u72e1\u8fa9\u3002AI\u4e0d\u5c31\u662f\u9488\u5bf9\u795e\u7ecf\u7f51\u7edc\u7684SISC\u561b\u3002\u4f46\u5b83\u80fd\u628a\u8fd9\u4e2a\u8fc7\u7a0b\u505a\u51fa\u4e00\u5957\u5de5\u5177\uff0c\u81ea\u52a8\u4ea7\u751f\uff0c\u5b9e\u5c5e\u4f1f\u5927\u3002\u5f53\u7136\u8fd9\u53ea\u662f\u6280\u672f\u4e0a\u7684\u4f1f\u5927\uff0c\u5546\u4e1a\u4e0a\u4e0d\u88ab\u4e70\u5e10\uff0c\u88abcandence\u6536\u8d2d\u3002\u4f46\u5982\u679c\u6309\u7167\u73b0\u5728\u82af\u7247\u884c\u4e1a\u7684\u53d1\u5c55\u6001\u52bf\uff0c\u672a\u6765\u6216\u8bb8\u5b83\u4f1a\u6709\u5e02\u573a\u3002","title":"\u82af\u7247\u67b6\u6784\u8bbe\u8ba1"},{"location":"arch/arch_design.html#_1","text":"\u65f6\u949f\u7ea7\u6a21\u62df\u5668\u5f80\u5f80\u80a9\u8d1f\u7740\u67b6\u6784\u63a2\u7d22\u7684\u4f7f\u547d\uff0c\u4e00\u65e6\u6d89\u53ca\u5230\u63a2\u7d22\uff0c\u4e00\u4e2a\u5b9a\u5f8b\u5c31\u51fa\u73b0\u4e86\uff1a\u96be\u7684\u4e0d\u662f\u600e\u4e48\u505a\uff0c\u800c\u662f\u505a\u4e00\u4e2a\u4ec0\u4e48\u6837\u7684\u3002\u6709\u4e86\u773c\u754c\u624d\u6709\u4e86\u601d\u8def\uff0c\u624d\u80fd\u53ef\u80fd\u628a\u601d\u8def\u843d\u5730\u3002 \u300a\u8ba1\u7b97\u673a\u4f53\u7cfb\u67b6\u6784\uff1a\u91cf\u5316\u5206\u6790\u65b9\u6cd5\u300b\u8fd9\u672c\u4e66\u4f3c\u4e4e\u500d\u53d7\u5927\u5bb6\u63a8\u5d07\uff0c\u51c6\u5907\u641e\u4e00\u672c\u62dc\u8bfb\u4e00\u4e0b \u5728\u77e5\u4e4e\u6587\u7ae0[ https://www.zhihu.com/question/23089746/answer/412954049]\u548c[https://zhuanlan.zhihu.com/p/53476489]\u4e2d\u90fd\u63d0\u5230\u4e86Tensilica\u548c\u5b83\u7684ASIP \u3002\u6211\u89c9\u5f97\u5b83\u7684\u601d\u8def\u662f\u672c\u8eab\u4e0d\u5947\u7279\uff0cSISC\u786e\u5b9e\u8981\u6bd4RISC\u6027\u80fd\u597d\uff0c\u8fd9\u662f\u4e8b\u5b9e\uff0c\u4e0d\u7531\u5f97\u72e1\u8fa9\u3002AI\u4e0d\u5c31\u662f\u9488\u5bf9\u795e\u7ecf\u7f51\u7edc\u7684SISC\u561b\u3002\u4f46\u5b83\u80fd\u628a\u8fd9\u4e2a\u8fc7\u7a0b\u505a\u51fa\u4e00\u5957\u5de5\u5177\uff0c\u81ea\u52a8\u4ea7\u751f\uff0c\u5b9e\u5c5e\u4f1f\u5927\u3002\u5f53\u7136\u8fd9\u53ea\u662f\u6280\u672f\u4e0a\u7684\u4f1f\u5927\uff0c\u5546\u4e1a\u4e0a\u4e0d\u88ab\u4e70\u5e10\uff0c\u88abcandence\u6536\u8d2d\u3002\u4f46\u5982\u679c\u6309\u7167\u73b0\u5728\u82af\u7247\u884c\u4e1a\u7684\u53d1\u5c55\u6001\u52bf\uff0c\u672a\u6765\u6216\u8bb8\u5b83\u4f1a\u6709\u5e02\u573a\u3002","title":"\u82af\u7247\u67b6\u6784\u8bbe\u8ba1"},{"location":"arch/arm_training_day1.html","text":"ARM Training Day1 \u00b6 Security \u00b6 Branch protection \u00b6 \u9632\u6b62\u7a0b\u5e8f\u7be1\u6539\u5206\u652f\u76ee\u7684\u5730\u5740 \u00b6 BTI \u53ea\u6709\u6709BTI\u6307\u4ee4\u7684\u5206\u652f\u624d\u80fd\u8df3\u8f6c \u9875\u8868\u4e2d\u6709\u6807\u8bc6\u9700\u8981\u914d\u7f6e \u9632\u6b62\u7a0b\u5e8f\u7be1\u6539\u8fd4\u56de\u5730\u5740 \u00b6 PACIASP X30\u7684\u9ad8\u4f4d\u63d0\u4f9bPAC code (\u4e00\u79cd\u52a0\u5bc6\u7801) AUTIASP \u5224\u65adX30\u9ad8\u4f4d\u6709\u6ca1\u6709\u88ab\u7be1\u6539\u8fc7 \u9700\u8981\u8f6f\u4ef6\u4ea7\u751f\u4e00\u4e2akey memory tagging \u00b6 \u53d1\u73b0\u4ee3\u7801\u672c\u8eab\u7684\u6f0f\u6d1e\uff0c\u51cf\u5c0f\u80fd\u591f\u88ab\u653b\u51fb\u7684\u53ef\u80fd \u901a\u8fc7tag\u662f\u5426\u5339\u914d\u6765\u5224\u65ad\u662f\u5426\u5408\u6cd5,\u4e3b\u8981\u529f\u80fd\u5e2e\u5fd9\u68c0\u6d4b\u6f0f\u6d1e memory overflow or doublefree \u5206\u914d\u5185\u5b58\u7684\u65f6\u5019\u5c31\u9700\u8981\u4e00\u4e2atag\uff0c\u771f\u6b63\u7684\u8bbf\u95eealloc\u4e00\u4e2a\u903b\u8f91tag\uff0c\u8fdb\u884c\u5339\u914d \u5728\u54ea\u91cccheck\u53d6\u51b3\u4e8e\u5728\u54ea\u91cc\u7ed3\u675f\uff0c\u53ef\u4ee5\u5728cache\u548c\u603b\u7ebf \u4e0d\u80fd\u9632\u6b62\u653b\u51fb\uff0c\u56e0\u4e3atag\u662f\u900f\u660e\u7684 LDG x1, [x0] DynamIQ Shared Unit (DSU) \u00b6 \u7ed3\u6784\u7ec4\u6210\uff1a DynamIQ Cluster Debug Block SVE2 \u00b6 SVE2 \u662f\u5728neon\u4e0a\u7684\u6269\u5c55 \u8f6f\u4ef6\u5728\u5199\u7684\u65f6\u5019\u4e0d\u9700\u8981SVE2\u7684vlen_max MPAM(memory partitioning and monitoring) \u00b6 L3 cache \u53ef\u4ee5\u5206\u6210\u591a\u4e2apartition L3 miss \u65f6\uff0c\u5206\u914dMPAM\u4e2d\u914d\u7f6e\u7684partition slice id bandwidth partitioning \u67b6\u6784\u6587\u6863\u4e2d\u8bf4\u660e\u4e86bandwidth partitioning \u9ed8\u8ba4\u8f6e\u6d41\u4f7f\u7528\uff0c\u53ef\u4ee5\u914d\u7f6e\u6bd4\u4f8b\u6743\u91cd\uff0c\u5982\u679c\u5b9e\u9645\u4e2d\u786e\u5b9e\u8bf7\u6c42\u8f83\u591a\uff0c\u90a3\u4e48\u4f1a\u4f18\u5148\u7ed9\u6bd4\u4f8b\u9ad8\u7684core, \u4ef2\u88c1\u903b\u8f91\u57fa\u4e8eslice Realm \u00b6 \u901a\u8fc7\u5728SCR_EL3\u4e2d\u6dfb\u52a0\u4e86NSE bit, \u914d\u5408NS bit\u6765\u6307\u793a\u662f\u54ea\u4e2a\u72b6\u6001 Power \u00b6 Activity per clock \u53ef\u4ee5\u901a\u8fc7DVFS\u6765\u8c03\u6574 CPU \u5185\u90e8\u6709 Activity Monitor, MPMM \u6709\u4e09\u4e2aGear\u80fd\u591f\u63a7\u5236Activity DSU cluster level \u652f\u6301MPMM Cluster \u5982\u4f55\u8c03\u6574Activity, \u901a\u8fc7\u63a7\u5236L3\u7684bandwidth, \u4ee5slice\u4e3a\u5355\u4f4d PDP (performance Define power) Trace \u00b6 ETE | ETM Trace \u4e24\u79cd\u65b9\u5f0f(\u4e0d\u80fd\u540c\u65f6)\uff1a - \u901a\u8fc7ATB\u603b\u7ebf\u53d1\u9001\u51fa\u53bb - TRBE\u53ef\u4ee5\u5c06Trace\u5bfc\u5165DDR,\u53d7MMU\u7ba1\u7406 Complex \u00b6 Dual-Core Complex, share L2 Cache and VPU Single-Core Complex, similar with signle core hunter not support complex L3 Cache \u00b6 32MB Max 1,2,4,8 slices \u901a\u8fc7\u4e24\u4e2aring\u7684topo, \u8ddd\u79bb\u6bcf\u4e2anode\u5f88\u8fd1\uff0c\u63d0\u9ad8bandwidth, \u51cf\u5c11lat, \u964d\u4f4elayout\u96be\u5ea6 slice\u8d8a\u591a\uff0ccontroler \u8d8a\u591a\uff0c\u989d\u5916\u9762\u79ef\u8d8a\u591a\uff0c\u529f\u8017\u8d8a\u5927 one slice: Data RAM Tag RAM Snoop Filter LTDB (long time data buffer) L3 \u5411\u5916\u8fd8\u6ca1\u6709result\u7684transaction \u53ef\u914d\u7f6e\u53c2\u6570 L3_CACHE_SIZE NUM_L3_SLICES \u652f\u6301 CHI.E \u4e0d\u652f\u6301 CHI.F \u53ef\u4ee5\u901a\u8fc7\u5bc4\u5b58\u5668\u914d\u7f6eAXI\u8fd8\u662fCHI master port(DSU\u5bf9\u5916\u63a5\u53e3)\u7684\u4e2a\u6570 1,2,3,4 \u8981\u7ed3\u5408DDR\u7684\u7aef\u53e3\u548c\u6838\u6570 peripheral port, \u652f\u6301256-bit | 64-bit 64-bits\u652f\u6301\u56de\u73af\u5230ACP\u6ca1\u6709deadlock MCN(memory controller node) outstanding transaction: - master port num - LTDB size(16, 32, 48, 64) NUM_LTDBS <= (128 * NUM_MASTER / NUM_L3_SLICES) DSU total outstanding = L(LTDB) * S(slices) interrupt \u00b6 GIC400 \u6700\u591a\u652f\u63018core GIC(generic interrupt controller) ACP \u00b6 snoop atomic support \u00b6 LDADD persistent \u00b6 \u4fdd\u8bc1\u7cfb\u7edf\u4e0b\u7535\u518d\u4e0a\u7535\u4e4b\u540e\u80fd\u591f\u770b\u5230\u5e0c\u671b\u4fdd\u7559\u7684\u4fe1\u606f DCCVAP \u5e26persistent\u7684\u5237cache DCCVA PBHA \u00b6 system counter \u00b6 \u8fdb\u7a0b\u8f6c\u6362(programmable incrementing Counter) hunter \u00b6 \u63d0\u9ad8\u6027\u80fd\u7684\u540c\u65f6\uff0c\u517c\u987e\u80fd\u6548\u6bd4 first generation of Armv9.2 PMU \u00b6 \u5305\u542b\u4e86cycle counter \u548c event counter, \u652f\u6301\u5feb\u7167\uff0c\u6700\u591a\u652f\u630120\u4e2a\u6e90 \u6ca1\u529e\u6cd5\u7cbe\u786e\u5230\u6307\u4ee4 AMU \u00b6 activity monitor \u505amaxpower\u63a7\u5236\u7528\u7684 \u53ef\u4ee5\u901a\u8fc7\u6307\u4ee4\u7684\u65b9\u5f0f\u53bb\u63a7\u5236 \u652f\u63017\u4e2aevent,\u5176\u4e2d\u4e09\u4e2a\u53ef\u4ee5\u5b9a\u5236 SPE(statistical profiling extension) \u00b6 \u66f4\u5fae\u89c2 micro-op, \u76d1\u6d4b\u6267\u884c\u72b6\u6001\uff0c \u751f\u621064-bit\u91c7\u6837\uff0c\u7ed3\u679c\u76f4\u63a5\u653e\u5230memory\u4e2d \u5fae\u67b6\u6784 \u00b6 2-taken with cond branches(\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ea\u80fd\u505a\u4e00\u6761\u5206\u652f\u9884\u6d4b) 8 instruction fetch 32/64KB instruction cache 5-wide decode, dispatch 184 preg 192 insts windows 32/64KB data cache 2-load/store + 1-load per cycle by default dcache 32bank support data prefetcher 4-ALU 2-branch 2-vector execute pipelines register cache 9-cycle L2 cache(128/256/512KB), exclusive L1D, support ECC","title":"ARM Training Day1"},{"location":"arch/arm_training_day1.html#arm-training-day1","text":"","title":"ARM Training Day1"},{"location":"arch/arm_training_day1.html#security","text":"","title":"Security"},{"location":"arch/arm_training_day1.html#branch-protection","text":"","title":"Branch protection"},{"location":"arch/arm_training_day1.html#_1","text":"BTI \u53ea\u6709\u6709BTI\u6307\u4ee4\u7684\u5206\u652f\u624d\u80fd\u8df3\u8f6c \u9875\u8868\u4e2d\u6709\u6807\u8bc6\u9700\u8981\u914d\u7f6e","title":"\u9632\u6b62\u7a0b\u5e8f\u7be1\u6539\u5206\u652f\u76ee\u7684\u5730\u5740"},{"location":"arch/arm_training_day1.html#_2","text":"PACIASP X30\u7684\u9ad8\u4f4d\u63d0\u4f9bPAC code (\u4e00\u79cd\u52a0\u5bc6\u7801) AUTIASP \u5224\u65adX30\u9ad8\u4f4d\u6709\u6ca1\u6709\u88ab\u7be1\u6539\u8fc7 \u9700\u8981\u8f6f\u4ef6\u4ea7\u751f\u4e00\u4e2akey","title":"\u9632\u6b62\u7a0b\u5e8f\u7be1\u6539\u8fd4\u56de\u5730\u5740"},{"location":"arch/arm_training_day1.html#memory-tagging","text":"\u53d1\u73b0\u4ee3\u7801\u672c\u8eab\u7684\u6f0f\u6d1e\uff0c\u51cf\u5c0f\u80fd\u591f\u88ab\u653b\u51fb\u7684\u53ef\u80fd \u901a\u8fc7tag\u662f\u5426\u5339\u914d\u6765\u5224\u65ad\u662f\u5426\u5408\u6cd5,\u4e3b\u8981\u529f\u80fd\u5e2e\u5fd9\u68c0\u6d4b\u6f0f\u6d1e memory overflow or doublefree \u5206\u914d\u5185\u5b58\u7684\u65f6\u5019\u5c31\u9700\u8981\u4e00\u4e2atag\uff0c\u771f\u6b63\u7684\u8bbf\u95eealloc\u4e00\u4e2a\u903b\u8f91tag\uff0c\u8fdb\u884c\u5339\u914d \u5728\u54ea\u91cccheck\u53d6\u51b3\u4e8e\u5728\u54ea\u91cc\u7ed3\u675f\uff0c\u53ef\u4ee5\u5728cache\u548c\u603b\u7ebf \u4e0d\u80fd\u9632\u6b62\u653b\u51fb\uff0c\u56e0\u4e3atag\u662f\u900f\u660e\u7684 LDG x1, [x0]","title":"memory tagging"},{"location":"arch/arm_training_day1.html#dynamiq-shared-unit-dsu","text":"\u7ed3\u6784\u7ec4\u6210\uff1a DynamIQ Cluster Debug Block","title":"DynamIQ Shared Unit (DSU)"},{"location":"arch/arm_training_day1.html#sve2","text":"SVE2 \u662f\u5728neon\u4e0a\u7684\u6269\u5c55 \u8f6f\u4ef6\u5728\u5199\u7684\u65f6\u5019\u4e0d\u9700\u8981SVE2\u7684vlen_max","title":"SVE2"},{"location":"arch/arm_training_day1.html#mpammemory-partitioning-and-monitoring","text":"L3 cache \u53ef\u4ee5\u5206\u6210\u591a\u4e2apartition L3 miss \u65f6\uff0c\u5206\u914dMPAM\u4e2d\u914d\u7f6e\u7684partition slice id bandwidth partitioning \u67b6\u6784\u6587\u6863\u4e2d\u8bf4\u660e\u4e86bandwidth partitioning \u9ed8\u8ba4\u8f6e\u6d41\u4f7f\u7528\uff0c\u53ef\u4ee5\u914d\u7f6e\u6bd4\u4f8b\u6743\u91cd\uff0c\u5982\u679c\u5b9e\u9645\u4e2d\u786e\u5b9e\u8bf7\u6c42\u8f83\u591a\uff0c\u90a3\u4e48\u4f1a\u4f18\u5148\u7ed9\u6bd4\u4f8b\u9ad8\u7684core, \u4ef2\u88c1\u903b\u8f91\u57fa\u4e8eslice","title":"MPAM(memory partitioning and monitoring)"},{"location":"arch/arm_training_day1.html#realm","text":"\u901a\u8fc7\u5728SCR_EL3\u4e2d\u6dfb\u52a0\u4e86NSE bit, \u914d\u5408NS bit\u6765\u6307\u793a\u662f\u54ea\u4e2a\u72b6\u6001","title":"Realm"},{"location":"arch/arm_training_day1.html#power","text":"Activity per clock \u53ef\u4ee5\u901a\u8fc7DVFS\u6765\u8c03\u6574 CPU \u5185\u90e8\u6709 Activity Monitor, MPMM \u6709\u4e09\u4e2aGear\u80fd\u591f\u63a7\u5236Activity DSU cluster level \u652f\u6301MPMM Cluster \u5982\u4f55\u8c03\u6574Activity, \u901a\u8fc7\u63a7\u5236L3\u7684bandwidth, \u4ee5slice\u4e3a\u5355\u4f4d PDP (performance Define power)","title":"Power"},{"location":"arch/arm_training_day1.html#trace","text":"ETE | ETM Trace \u4e24\u79cd\u65b9\u5f0f(\u4e0d\u80fd\u540c\u65f6)\uff1a - \u901a\u8fc7ATB\u603b\u7ebf\u53d1\u9001\u51fa\u53bb - TRBE\u53ef\u4ee5\u5c06Trace\u5bfc\u5165DDR,\u53d7MMU\u7ba1\u7406","title":"Trace"},{"location":"arch/arm_training_day1.html#complex","text":"Dual-Core Complex, share L2 Cache and VPU Single-Core Complex, similar with signle core hunter not support complex","title":"Complex"},{"location":"arch/arm_training_day1.html#l3-cache","text":"32MB Max 1,2,4,8 slices \u901a\u8fc7\u4e24\u4e2aring\u7684topo, \u8ddd\u79bb\u6bcf\u4e2anode\u5f88\u8fd1\uff0c\u63d0\u9ad8bandwidth, \u51cf\u5c11lat, \u964d\u4f4elayout\u96be\u5ea6 slice\u8d8a\u591a\uff0ccontroler \u8d8a\u591a\uff0c\u989d\u5916\u9762\u79ef\u8d8a\u591a\uff0c\u529f\u8017\u8d8a\u5927 one slice: Data RAM Tag RAM Snoop Filter LTDB (long time data buffer) L3 \u5411\u5916\u8fd8\u6ca1\u6709result\u7684transaction \u53ef\u914d\u7f6e\u53c2\u6570 L3_CACHE_SIZE NUM_L3_SLICES \u652f\u6301 CHI.E \u4e0d\u652f\u6301 CHI.F \u53ef\u4ee5\u901a\u8fc7\u5bc4\u5b58\u5668\u914d\u7f6eAXI\u8fd8\u662fCHI master port(DSU\u5bf9\u5916\u63a5\u53e3)\u7684\u4e2a\u6570 1,2,3,4 \u8981\u7ed3\u5408DDR\u7684\u7aef\u53e3\u548c\u6838\u6570 peripheral port, \u652f\u6301256-bit | 64-bit 64-bits\u652f\u6301\u56de\u73af\u5230ACP\u6ca1\u6709deadlock MCN(memory controller node) outstanding transaction: - master port num - LTDB size(16, 32, 48, 64) NUM_LTDBS <= (128 * NUM_MASTER / NUM_L3_SLICES) DSU total outstanding = L(LTDB) * S(slices)","title":"L3 Cache"},{"location":"arch/arm_training_day1.html#interrupt","text":"GIC400 \u6700\u591a\u652f\u63018core GIC(generic interrupt controller)","title":"interrupt"},{"location":"arch/arm_training_day1.html#acp","text":"snoop","title":"ACP"},{"location":"arch/arm_training_day1.html#atomic-support","text":"LDADD","title":"atomic support"},{"location":"arch/arm_training_day1.html#persistent","text":"\u4fdd\u8bc1\u7cfb\u7edf\u4e0b\u7535\u518d\u4e0a\u7535\u4e4b\u540e\u80fd\u591f\u770b\u5230\u5e0c\u671b\u4fdd\u7559\u7684\u4fe1\u606f DCCVAP \u5e26persistent\u7684\u5237cache DCCVA","title":"persistent"},{"location":"arch/arm_training_day1.html#pbha","text":"","title":"PBHA"},{"location":"arch/arm_training_day1.html#system-counter","text":"\u8fdb\u7a0b\u8f6c\u6362(programmable incrementing Counter)","title":"system counter"},{"location":"arch/arm_training_day1.html#hunter","text":"\u63d0\u9ad8\u6027\u80fd\u7684\u540c\u65f6\uff0c\u517c\u987e\u80fd\u6548\u6bd4 first generation of Armv9.2","title":"hunter"},{"location":"arch/arm_training_day1.html#pmu","text":"\u5305\u542b\u4e86cycle counter \u548c event counter, \u652f\u6301\u5feb\u7167\uff0c\u6700\u591a\u652f\u630120\u4e2a\u6e90 \u6ca1\u529e\u6cd5\u7cbe\u786e\u5230\u6307\u4ee4","title":"PMU"},{"location":"arch/arm_training_day1.html#amu","text":"activity monitor \u505amaxpower\u63a7\u5236\u7528\u7684 \u53ef\u4ee5\u901a\u8fc7\u6307\u4ee4\u7684\u65b9\u5f0f\u53bb\u63a7\u5236 \u652f\u63017\u4e2aevent,\u5176\u4e2d\u4e09\u4e2a\u53ef\u4ee5\u5b9a\u5236","title":"AMU"},{"location":"arch/arm_training_day1.html#spestatistical-profiling-extension","text":"\u66f4\u5fae\u89c2 micro-op, \u76d1\u6d4b\u6267\u884c\u72b6\u6001\uff0c \u751f\u621064-bit\u91c7\u6837\uff0c\u7ed3\u679c\u76f4\u63a5\u653e\u5230memory\u4e2d","title":"SPE(statistical profiling extension)"},{"location":"arch/arm_training_day1.html#_3","text":"2-taken with cond branches(\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ea\u80fd\u505a\u4e00\u6761\u5206\u652f\u9884\u6d4b) 8 instruction fetch 32/64KB instruction cache 5-wide decode, dispatch 184 preg 192 insts windows 32/64KB data cache 2-load/store + 1-load per cycle by default dcache 32bank support data prefetcher 4-ALU 2-branch 2-vector execute pipelines register cache 9-cycle L2 cache(128/256/512KB), exclusive L1D, support ECC","title":"\u5fae\u67b6\u6784"},{"location":"arch/arm_training_day2.html","text":"ARM Training Day2 \u00b6 hayes \u00b6 \u987a\u5e8f\u53cc\u53d1\u5c04 load/store x 1 load x 1 ALU x 2 SCP (system control processor) \u00b6 WFE \u00b6 \u6bd4\u5982\u62a2\u9501\uff0c\u62a2\u4e0d\u5230\u7684\u4f1a\u8fdb\u5165WFE","title":"ARM Training Day2"},{"location":"arch/arm_training_day2.html#arm-training-day2","text":"","title":"ARM Training Day2"},{"location":"arch/arm_training_day2.html#hayes","text":"\u987a\u5e8f\u53cc\u53d1\u5c04 load/store x 1 load x 1 ALU x 2","title":"hayes"},{"location":"arch/arm_training_day2.html#scp-system-control-processor","text":"","title":"SCP (system control processor)"},{"location":"arch/arm_training_day2.html#wfe","text":"\u6bd4\u5982\u62a2\u9501\uff0c\u62a2\u4e0d\u5230\u7684\u4f1a\u8fdb\u5165WFE","title":"WFE"},{"location":"arch/atomic.html","text":"RISCV\u539f\u5b50\u64cd\u4f5c \u00b6 \u5728\u5b9d\u534e\u7684\u300aatomic\u5b9e\u73b0\u539f\u7406\u300b\u4e00\u6587\u4e2d\u63d0\u53ca\u4e86atomic(\u539f\u5b50\u64cd\u4f5c)\u7684\u5b9e\u73b0\u65b9\u5f0f(\u5176\u5b9e\u4ed6\u8fd8\u662f\u60f3\u8bf4cache\u76f8\u5173\u7684\u4e1c\u897f), \u4f46\u6587\u4e2d\u63d0\u5230\u4e86\u51e0\u79cd\u901a\u5e38\u7684atomic\u5b9e\u73b0\u65b9\u5f0f \u4e00\u79cd\u662fbus lock\uff0c\u9501\u4f4f\u603b\u7ebf\uff0c\u4e0d\u8ba9\u5176\u4ed6CPU\u8fdb\u884c\u5185\u5b58\u64cd\u4f5c\uff0c\u4f46\u8fd9\u79cd\u65b9\u5f0f\u7834\u574f\u6027\u6bd4\u8f83\u5927 \u4e00\u79cd\u662fCacheline Lock\uff0c\u501f\u52a9\u591a\u6838cache\u4e00\u81f4\u6027MESI\u534f\u8bae \u5728\u770b\u6587\u7ae0\u7684\u65f6\u5019\uff0c\u6211\u60f3\u5230\u4e86riscv\u7684\u6307\u4ee4\u96c6\u6269\u5c55\u4e2d\uff0c\u6709atomic\u6269\u5c55\uff0c\u5373\u539f\u5b50\u64cd\u4f5c\u6307\u4ee4\u6269\u5c55\u3002\u90a3\u4e48\u5c31\u6709\u4e86\u5982\u4e0b\u7591\u95ee RISCV\u6307\u4ee4\u96c6\u7684A\u6269\u5c55\u662f\u4ec0\u4e48\uff1f\u76ee\u7684\u662f\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898\uff1f\u76ee\u524d\u5904\u4e8e\u4ec0\u4e48\u5f00\u53d1\u72b6\u6001\uff1f linux\u5185\u6838\u4e2d\u5bf9\u4e8eRISCV\u7684\u539f\u5b50\u64cd\u4f5c\u652f\u6301\u76ee\u524d\u662f\u4ec0\u4e48\u6837\u7684\uff1f\u6d89\u53ca\u5230A\u6269\u5c55\u5417? RISCV\u7684A\u6269\u5c55 \u00b6 The standard atomic-instruction extension, named \u201cA\u201d, contains instructions that atomically read-modify-write memory to support synchronization between multiple RISC-V harts running in the same memory space. \u5f88\u663e\u7136\uff0cRISCV\u7684A\u6269\u5c55\u6b63\u662f\u4e3a\u4e86\u5b9e\u73b0\u539f\u5b50\u64cd\u4f5c\u800c\u8bbe\u8ba1\u7684 The two forms of atomic instruction provided are load-reserved/store-conditional instructions and atomic fetch-and-op memory instructions. A\u6269\u5c55\u63d0\u4f9b\u4e86\u4e24\u79cd\u5f62\u5f0f\u7684\u539f\u5b50\u64cd\u4f5c\u6307\u4ee4\uff0c\u4e00\u79cdload-reserved/store-conditional\uff0c \u53e6\u4e00\u79cdfetch-and-op memory instructions load-reserved/store-conditional(\u52a0\u8f7d\u4fdd\u7559/\u6761\u4ef6\u5b58\u50a8) \u00b6 \u63d0\u4f9b\u4e86LR.W/D \u548c SC.W/D\u4e24\u7ec4\u6307\u4ee4,LR\u6307\u4ee4\u4ece\u5b58\u50a8\u5668\u8bfb\u4e00\u4e2a\u6570\u503c,\u540c\u65f6\u5904\u7406\u5668\u4f1a\u76d1\u89c6\u8fd9\u4e2a\u5b58\u50a8\u5668\u5730\u5740,\u770b\u5b83\u662f\u5426\u4f1a\u88ab\u5176\u4ed6\u5904\u7406\u5668\u4fee\u6539; SC\u6307\u4ee4\u53d1\u73b0\u5728\u6b64\u671f\u95f4\u6ca1\u6709\u5176\u4ed6\u5904\u7406\u5668\u4fee\u6539\u8fd9\u4e2a\u503c,\u5219\u5c06\u65b0\u503c\u5199\u5165\u8be5\u5730\u5740\u3002\u56e0\u6b64\u4e00\u4e2a\u539f\u5b50\u7684LR/SC\u6307\u4ee4\u5bf9,\u5c31\u662fLR\u8bfb\u53d6\u503c,\u8fdb\u884c\u4e00\u4e9b\u8ba1\u7b97, \u7136\u540e\u8bd5\u56fe\u4fdd\u5b58\u65b0\u503c\u3002\u5982\u679c\u4fdd\u5b58\u5931\u8d25,\u90a3\u4e48\u9700\u8981\u91cd\u65b0\u5f00\u59cb\u6574\u4e2a\u5e8f\u5217\u3002\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u6bcf\u4e00\u4e2a\u5904\u7406\u5668\u90fd\u80fd\u51c6\u786e\u7684\u6267\u884c\u5b8c\u8bfb\u6539\u5199\u6d41\u7a0b # a0 holds address of memory location # a1 holds expected value # a2 holds desired value # a0 holds return value, 0 if successful, !0 otherwise cas: lr.w t0 , ( a0 ) # Load original value. bne t0 , a1 , fail # Doesn\u2019t match, so fail. sc.w t0 , a2 , ( a0 ) # Try to update. bnez t0 , cas # Retry if store-conditional failed. li a0 , 0 # Set return to success. jr ra # Return. fail: li a0 , 1 # Set return to failure. jr ra # Return. \u901a\u8fc7sc.w\u7684\u8fd4\u56de\u503c\u53ef\u4ee5\u5224\u5b9a\u662f\u5426\u5b8c\u6210\u4e86\u539f\u5b50\u64cd\u4f5c\uff0c\u5982\u679c\u5931\u8d25\u4e86\uff0c\u8981\u4ecelr.w\u5f00\u59cb\u91cd\u65b0\u8fdb\u884c\uff0c\u5728LR\u6307\u4ee4\u548cSC\u6307\u4ee4\u4e4b\u95f4\u6267\u884c\u7684\u52a8\u6001\u4ee3\u7801,\u53ea\u80fd \u6765\u81ea\u4e8e\u57fa\u672c\u201cI\u201d\u7684\u5b50\u96c6,\u4e0d\u80fd\u5305\u62ecload\u6307\u4ee4\u3001store\u6307\u4ee4\u3001\u5411\u540e\u8df3\u8f6c\u6307\u4ee4\u6216\u8005\u5411\u540e\u7684\u5206\u652f\u6307\u4ee4\u3001FENCE\u6307\u4ee4\u3001SYSTEM\u6307\u4ee4\uff0c\u4e14\u5fc5\u987b\u7531\u4e0d\u8d85 \u8fc716\u6761\u6574\u6570\u6307\u4ee4\u7684\u4ee3\u7801\u987a\u5e8f\u5b58\u653e\u5728\u5b58\u50a8\u5668\u4e2d\u6784\u6210 \u901a\u8fc7spike\u7684\u4ee3\u7801\u80fd\u591f\u8fdb\u4e00\u6b65\u7406\u89e3spec\u4e2d\u6240\u8c13\u7684 An SC instruction can never be observed by another RISC-V hart before the LR instruction that established the reservation. // lr.w require_extension ( 'A' ); auto res = MMU . load_int32 ( RS1 , true ); MMU . acquire_load_reservation ( RS1 ); WRITE_RD ( res ); // sc.w require_extension ( 'A' ); bool have_reservation = MMU . check_load_reservation ( RS1 , 4 ); if ( have_reservation ) MMU . store_uint32 ( RS1 , RS2 ); MMU . yield_load_reservation (); WRITE_RD ( ! have_reservation ); \u53ef\u4ee5\u770b\u51fa\uff0clr.w\u4f1a\u5c06\u5f53\u524d\u8981\u5b58\u50a8\u7684\u5730\u5740\u8bb0\u5f55\u5728reservation\u4e2d\uff0c\u5728\u6267\u884csc.w\u65f6\uff0c\u4f1a\u68c0\u67e5\u4e4b\u524d\u7684lr\u6307\u4ee4\u6807\u8bb0\u7684reservation\u5730\u5740\u662f\u5426\u662fsc\u6307\u4ee4\u8981\u5b58\u50a8\u5730\u5740\uff0c\u5982\u679c\u662f\uff0c\u90a3\u4e48\u6267\u884c\u5b58\u50a8\u64cd\u4f5c\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u90a3\u4e48\u8df3\u8fc7\u5b58\u50a8\u64cd\u4f5c\uff0c\u590d\u4f4d\u8be5reservation\u5730\u5740\uff0c\u5e76\u8fd4\u56de\u5931\u8d25\u3002\u5f53\u7136\uff0cspike\u53ea\u662f\u4e00\u4e2a\u529f\u80fd\u6a21\u62df\u5668\uff0c \u5b83\u5728\u540c\u4e00\u65f6\u95f4\u5176\u5b9e\u53ea\u6709\u4e00\u4e2aCPU\u5728\u6267\u884c\u6307\u4ee4\uff0c\u6240\u4ee5\u5b83\u5728step\u51fd\u6570\u4e2d\u5728\u5207\u6362CPU\u65f6\u5904\u7406reservation\u6807\u8bb0\u5373\u53ef\u3002 void sim_t::step ( size_t n ) { for ( size_t i = 0 , steps = 0 ; i < n ; i += steps ) { steps = std :: min ( n - i , INTERLEAVE - current_step ); procs [ current_proc ] -> step ( steps ); current_step += steps ; if ( current_step == INTERLEAVE ) { current_step = 0 ; procs [ current_proc ] -> get_mmu () -> yield_load_reservation (); } } } } \u4f46\u5176\u5b9e\u5df2\u7ecf\u80fd\u591f\u770b\u51fa\uff0cLR/SC\u4e0d\u4f1a\u9501\u4f4f\u603b\u7ebf\uff0c\u80fd\u591f\u66f4\u9ad8\u6548\u7684\u5904\u7406\u5e76\u53d1\u8bbf\u95ee\u3002 Atomic Memory Operations(AMO) \u00b6 AMOSWAP.W/D AMOADD.W/D AMOAND.W/D AMOOR.W/D AMOXOR.W/D AMOMAX[U].W/D AMOMIN[U].W/D \u76ee\u524d\u652f\u6301\u4e0a\u8ff0\u539f\u5b50\u5185\u5b58\u64cd\u4f5c\u6307\u4ee4\uff0c\u6765\u770b\u4e00\u4e0bspec\u4e2d\u7ed9\u51fa\u7684\u7528\u6cd5\uff0c\u5176\u4e2da0\u4e3a\u9501\u6240\u5728\u5730\u5740 li t0 , 1 # Initialize swap value. again: lw t1 , ( a0 ) # Check if lock is held. bnez t1 , again # Retry if held. amoswap.w.aq t1 , t0 , ( a0 ) # Attempt to acquire lock. bnez t1 , again # Retry if held. # ... # Critical section. # ... amoswap.w.rl x0 , x0 , ( a0 ) # Release lock by storing 0. \u5b9e\u73b0\u5206\u6790 \u00b6 \u4e3e\u4f8bamoadd.w\u6765\u5206\u6790\u8bbe\u8ba1\u4e0e\u5b9e\u73b0 spike\u5b9e\u73b0 #define amo_func(type) \\ template<typename op> \\ type##_t amo_##type(reg_t addr, op f) { \\ try { \\ auto lhs = load_##type(addr, true); \\ store_##type(addr, f(lhs)); \\ return lhs; \\ } catch (trap_load_address_misaligned& t) { \\ /* AMO faults should be reported as store faults */ \\ throw trap_store_address_misaligned(t.get_tval(), t.get_tval2(), t.get_tinst()); \\ } catch (trap_load_page_fault& t) { \\ /* AMO faults should be reported as store faults */ \\ throw trap_store_page_fault(t.get_tval(), t.get_tval2(), t.get_tinst()); \\ } catch (trap_load_access_fault& t) { \\ /* AMO faults should be reported as store faults */ \\ throw trap_store_access_fault(t.get_tval(), t.get_tval2(), t.get_tinst()); \\ } \\ } amo_func ( uint32 ) // amoadd.w\u5b9e\u73b0 require_extension ( 'A' ); WRITE_RD ( sext32 ( MMU . amo_uint32 ( RS1 , [ & ]( uint32_t lhs ) { return lhs + RS2 ; }))); \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5728spike\u4e2d\uff0c\u76f4\u63a5\u5c06load\u548cstore\u7ec4\u5408\u8d77\u6765\u5b9e\u73b0\u4e86\u539f\u5b50\u64cd\u4f5c\uff0c\u8fd9\u91ccspec\u7684\u8bbe\u8ba1\u6709\u4e9b\u96be\u4ee5\u7406\u89e3\uff0c amoadd.w\u8fd4\u56de\u7684rd\u662f\u52a0\u6cd5\u8fd0\u7b97\u4e4b\u524d\u7684\u5185\u5b58\u4e2d\u7684\u503c\uff0c\u800c\u4e0d\u662f\u52a0\u6cd5\u4e4b\u540e\u7684\u7ed3\u679c\uff0c\u6216\u8bb8\u540e\u7eed\u6211\u80fd\u7406\u89e3\u8fd9\u6837\u8bbe\u8ba1\u7684\u76ee\u7684\u5427\uff0c \u73b0\u5728\u603b\u611f\u89c9\u662f\u5199\u9519\u4e86\u3002 riscv-test\u4e2d\u7684\u6d4b\u8bd5case\u5b9e\u73b0 li a0 , 0xffffffff80000000 ; li a1 , 0xfffffffffffff800 ; la a3 , amo_operand ; sd a0 , 0 ( a3 ) ; amoadd.d a4 , a1 , 0 ( a3 ) ; li x29 , MASK_XLEN ( 0xffffffff80000000 ) ; bne a4 , x29 , fail ; ld a5 , 0 ( a3 ) ; li x29 , MASK_XLEN ( 0xffffffff7ffff800 ) ; bne a5 , x29 , fail ; # try again after a cache miss amoadd.d a4 , a1 , 0 ( a3 ) ; li x29 , MASK_XLEN ( 0xffffffff7ffff800 ) ; bne a4 , x29 , fail ; ld a5 , 0 ( a3 ) ; li x29 , MASK_XLEN ( 0xffffffff7ffff000 ) ; bne a5 , x29 , fail ; .bss .align 3 amo_operand: .dword 0 \u4e5f\u662f\u8ba4\u4e3a\u8fd4\u56de\u503c\u4e3a\u7d2f\u52a0\u4e4b\u524d\u7684\u5185\u5b58\u503c linux\u5185\u6838\u5bf9\u4e8eRISCV\u539f\u5b50\u64cd\u4f5c\u7684\u652f\u6301 \u00b6 \u5728\u6700\u65b0\u7684linux5.11\u7248\u672c\u4e2d\uff0c\u5f88\u5bb9\u6613\u5728arch/riscv/include/asm/atomic.h\u4e2d\u627e\u5230\u5185\u5b58\u539f\u5b50\u64cd\u4f5c /* * First, the atomic ops that have no ordering constraints and therefor don't * have the AQ or RL bits set. These don't return anything, so there's only * one version to worry about. */ #define ATOMIC_OP(op, asm_op, I, asm_type, c_type, prefix) \\ static __always_inline \\ void atomic##prefix##_##op(c_type i, atomic##prefix##_t *v) \\ { \\ __asm__ __volatile__ ( \\ \" amo\" #asm_op \".\" #asm_type \" zero, %1, %0\" \\ : \"+A\" (v->counter) \\ : \"r\" (I) \\ : \"memory\"); \\ } \\ #ifdef CONFIG_GENERIC_ATOMIC64 #define ATOMIC_OPS(op, asm_op, I) \\ ATOMIC_OP (op, asm_op, I, w, int, ) #else #define ATOMIC_OPS(op, asm_op, I) \\ ATOMIC_OP (op, asm_op, I, w, int, ) \\ ATOMIC_OP (op, asm_op, I, d, s64, 64) #endif ATOMIC_OPS ( add , add , i ) ATOMIC_OPS ( sub , add , - i ) ATOMIC_OPS ( and , and , i ) ATOMIC_OPS ( or , or , i ) ATOMIC_OPS ( xor , xor , i )","title":"RISCV\u539f\u5b50\u64cd\u4f5c"},{"location":"arch/atomic.html#riscv","text":"\u5728\u5b9d\u534e\u7684\u300aatomic\u5b9e\u73b0\u539f\u7406\u300b\u4e00\u6587\u4e2d\u63d0\u53ca\u4e86atomic(\u539f\u5b50\u64cd\u4f5c)\u7684\u5b9e\u73b0\u65b9\u5f0f(\u5176\u5b9e\u4ed6\u8fd8\u662f\u60f3\u8bf4cache\u76f8\u5173\u7684\u4e1c\u897f), \u4f46\u6587\u4e2d\u63d0\u5230\u4e86\u51e0\u79cd\u901a\u5e38\u7684atomic\u5b9e\u73b0\u65b9\u5f0f \u4e00\u79cd\u662fbus lock\uff0c\u9501\u4f4f\u603b\u7ebf\uff0c\u4e0d\u8ba9\u5176\u4ed6CPU\u8fdb\u884c\u5185\u5b58\u64cd\u4f5c\uff0c\u4f46\u8fd9\u79cd\u65b9\u5f0f\u7834\u574f\u6027\u6bd4\u8f83\u5927 \u4e00\u79cd\u662fCacheline Lock\uff0c\u501f\u52a9\u591a\u6838cache\u4e00\u81f4\u6027MESI\u534f\u8bae \u5728\u770b\u6587\u7ae0\u7684\u65f6\u5019\uff0c\u6211\u60f3\u5230\u4e86riscv\u7684\u6307\u4ee4\u96c6\u6269\u5c55\u4e2d\uff0c\u6709atomic\u6269\u5c55\uff0c\u5373\u539f\u5b50\u64cd\u4f5c\u6307\u4ee4\u6269\u5c55\u3002\u90a3\u4e48\u5c31\u6709\u4e86\u5982\u4e0b\u7591\u95ee RISCV\u6307\u4ee4\u96c6\u7684A\u6269\u5c55\u662f\u4ec0\u4e48\uff1f\u76ee\u7684\u662f\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898\uff1f\u76ee\u524d\u5904\u4e8e\u4ec0\u4e48\u5f00\u53d1\u72b6\u6001\uff1f linux\u5185\u6838\u4e2d\u5bf9\u4e8eRISCV\u7684\u539f\u5b50\u64cd\u4f5c\u652f\u6301\u76ee\u524d\u662f\u4ec0\u4e48\u6837\u7684\uff1f\u6d89\u53ca\u5230A\u6269\u5c55\u5417?","title":"RISCV\u539f\u5b50\u64cd\u4f5c"},{"location":"arch/atomic.html#riscva","text":"The standard atomic-instruction extension, named \u201cA\u201d, contains instructions that atomically read-modify-write memory to support synchronization between multiple RISC-V harts running in the same memory space. \u5f88\u663e\u7136\uff0cRISCV\u7684A\u6269\u5c55\u6b63\u662f\u4e3a\u4e86\u5b9e\u73b0\u539f\u5b50\u64cd\u4f5c\u800c\u8bbe\u8ba1\u7684 The two forms of atomic instruction provided are load-reserved/store-conditional instructions and atomic fetch-and-op memory instructions. A\u6269\u5c55\u63d0\u4f9b\u4e86\u4e24\u79cd\u5f62\u5f0f\u7684\u539f\u5b50\u64cd\u4f5c\u6307\u4ee4\uff0c\u4e00\u79cdload-reserved/store-conditional\uff0c \u53e6\u4e00\u79cdfetch-and-op memory instructions","title":"RISCV\u7684A\u6269\u5c55"},{"location":"arch/atomic.html#load-reservedstore-conditional","text":"\u63d0\u4f9b\u4e86LR.W/D \u548c SC.W/D\u4e24\u7ec4\u6307\u4ee4,LR\u6307\u4ee4\u4ece\u5b58\u50a8\u5668\u8bfb\u4e00\u4e2a\u6570\u503c,\u540c\u65f6\u5904\u7406\u5668\u4f1a\u76d1\u89c6\u8fd9\u4e2a\u5b58\u50a8\u5668\u5730\u5740,\u770b\u5b83\u662f\u5426\u4f1a\u88ab\u5176\u4ed6\u5904\u7406\u5668\u4fee\u6539; SC\u6307\u4ee4\u53d1\u73b0\u5728\u6b64\u671f\u95f4\u6ca1\u6709\u5176\u4ed6\u5904\u7406\u5668\u4fee\u6539\u8fd9\u4e2a\u503c,\u5219\u5c06\u65b0\u503c\u5199\u5165\u8be5\u5730\u5740\u3002\u56e0\u6b64\u4e00\u4e2a\u539f\u5b50\u7684LR/SC\u6307\u4ee4\u5bf9,\u5c31\u662fLR\u8bfb\u53d6\u503c,\u8fdb\u884c\u4e00\u4e9b\u8ba1\u7b97, \u7136\u540e\u8bd5\u56fe\u4fdd\u5b58\u65b0\u503c\u3002\u5982\u679c\u4fdd\u5b58\u5931\u8d25,\u90a3\u4e48\u9700\u8981\u91cd\u65b0\u5f00\u59cb\u6574\u4e2a\u5e8f\u5217\u3002\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u6bcf\u4e00\u4e2a\u5904\u7406\u5668\u90fd\u80fd\u51c6\u786e\u7684\u6267\u884c\u5b8c\u8bfb\u6539\u5199\u6d41\u7a0b # a0 holds address of memory location # a1 holds expected value # a2 holds desired value # a0 holds return value, 0 if successful, !0 otherwise cas: lr.w t0 , ( a0 ) # Load original value. bne t0 , a1 , fail # Doesn\u2019t match, so fail. sc.w t0 , a2 , ( a0 ) # Try to update. bnez t0 , cas # Retry if store-conditional failed. li a0 , 0 # Set return to success. jr ra # Return. fail: li a0 , 1 # Set return to failure. jr ra # Return. \u901a\u8fc7sc.w\u7684\u8fd4\u56de\u503c\u53ef\u4ee5\u5224\u5b9a\u662f\u5426\u5b8c\u6210\u4e86\u539f\u5b50\u64cd\u4f5c\uff0c\u5982\u679c\u5931\u8d25\u4e86\uff0c\u8981\u4ecelr.w\u5f00\u59cb\u91cd\u65b0\u8fdb\u884c\uff0c\u5728LR\u6307\u4ee4\u548cSC\u6307\u4ee4\u4e4b\u95f4\u6267\u884c\u7684\u52a8\u6001\u4ee3\u7801,\u53ea\u80fd \u6765\u81ea\u4e8e\u57fa\u672c\u201cI\u201d\u7684\u5b50\u96c6,\u4e0d\u80fd\u5305\u62ecload\u6307\u4ee4\u3001store\u6307\u4ee4\u3001\u5411\u540e\u8df3\u8f6c\u6307\u4ee4\u6216\u8005\u5411\u540e\u7684\u5206\u652f\u6307\u4ee4\u3001FENCE\u6307\u4ee4\u3001SYSTEM\u6307\u4ee4\uff0c\u4e14\u5fc5\u987b\u7531\u4e0d\u8d85 \u8fc716\u6761\u6574\u6570\u6307\u4ee4\u7684\u4ee3\u7801\u987a\u5e8f\u5b58\u653e\u5728\u5b58\u50a8\u5668\u4e2d\u6784\u6210 \u901a\u8fc7spike\u7684\u4ee3\u7801\u80fd\u591f\u8fdb\u4e00\u6b65\u7406\u89e3spec\u4e2d\u6240\u8c13\u7684 An SC instruction can never be observed by another RISC-V hart before the LR instruction that established the reservation. // lr.w require_extension ( 'A' ); auto res = MMU . load_int32 ( RS1 , true ); MMU . acquire_load_reservation ( RS1 ); WRITE_RD ( res ); // sc.w require_extension ( 'A' ); bool have_reservation = MMU . check_load_reservation ( RS1 , 4 ); if ( have_reservation ) MMU . store_uint32 ( RS1 , RS2 ); MMU . yield_load_reservation (); WRITE_RD ( ! have_reservation ); \u53ef\u4ee5\u770b\u51fa\uff0clr.w\u4f1a\u5c06\u5f53\u524d\u8981\u5b58\u50a8\u7684\u5730\u5740\u8bb0\u5f55\u5728reservation\u4e2d\uff0c\u5728\u6267\u884csc.w\u65f6\uff0c\u4f1a\u68c0\u67e5\u4e4b\u524d\u7684lr\u6307\u4ee4\u6807\u8bb0\u7684reservation\u5730\u5740\u662f\u5426\u662fsc\u6307\u4ee4\u8981\u5b58\u50a8\u5730\u5740\uff0c\u5982\u679c\u662f\uff0c\u90a3\u4e48\u6267\u884c\u5b58\u50a8\u64cd\u4f5c\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u90a3\u4e48\u8df3\u8fc7\u5b58\u50a8\u64cd\u4f5c\uff0c\u590d\u4f4d\u8be5reservation\u5730\u5740\uff0c\u5e76\u8fd4\u56de\u5931\u8d25\u3002\u5f53\u7136\uff0cspike\u53ea\u662f\u4e00\u4e2a\u529f\u80fd\u6a21\u62df\u5668\uff0c \u5b83\u5728\u540c\u4e00\u65f6\u95f4\u5176\u5b9e\u53ea\u6709\u4e00\u4e2aCPU\u5728\u6267\u884c\u6307\u4ee4\uff0c\u6240\u4ee5\u5b83\u5728step\u51fd\u6570\u4e2d\u5728\u5207\u6362CPU\u65f6\u5904\u7406reservation\u6807\u8bb0\u5373\u53ef\u3002 void sim_t::step ( size_t n ) { for ( size_t i = 0 , steps = 0 ; i < n ; i += steps ) { steps = std :: min ( n - i , INTERLEAVE - current_step ); procs [ current_proc ] -> step ( steps ); current_step += steps ; if ( current_step == INTERLEAVE ) { current_step = 0 ; procs [ current_proc ] -> get_mmu () -> yield_load_reservation (); } } } } \u4f46\u5176\u5b9e\u5df2\u7ecf\u80fd\u591f\u770b\u51fa\uff0cLR/SC\u4e0d\u4f1a\u9501\u4f4f\u603b\u7ebf\uff0c\u80fd\u591f\u66f4\u9ad8\u6548\u7684\u5904\u7406\u5e76\u53d1\u8bbf\u95ee\u3002","title":"load-reserved/store-conditional(\u52a0\u8f7d\u4fdd\u7559/\u6761\u4ef6\u5b58\u50a8)"},{"location":"arch/atomic.html#atomic-memory-operationsamo","text":"AMOSWAP.W/D AMOADD.W/D AMOAND.W/D AMOOR.W/D AMOXOR.W/D AMOMAX[U].W/D AMOMIN[U].W/D \u76ee\u524d\u652f\u6301\u4e0a\u8ff0\u539f\u5b50\u5185\u5b58\u64cd\u4f5c\u6307\u4ee4\uff0c\u6765\u770b\u4e00\u4e0bspec\u4e2d\u7ed9\u51fa\u7684\u7528\u6cd5\uff0c\u5176\u4e2da0\u4e3a\u9501\u6240\u5728\u5730\u5740 li t0 , 1 # Initialize swap value. again: lw t1 , ( a0 ) # Check if lock is held. bnez t1 , again # Retry if held. amoswap.w.aq t1 , t0 , ( a0 ) # Attempt to acquire lock. bnez t1 , again # Retry if held. # ... # Critical section. # ... amoswap.w.rl x0 , x0 , ( a0 ) # Release lock by storing 0.","title":"Atomic Memory Operations(AMO)"},{"location":"arch/atomic.html#_1","text":"\u4e3e\u4f8bamoadd.w\u6765\u5206\u6790\u8bbe\u8ba1\u4e0e\u5b9e\u73b0 spike\u5b9e\u73b0 #define amo_func(type) \\ template<typename op> \\ type##_t amo_##type(reg_t addr, op f) { \\ try { \\ auto lhs = load_##type(addr, true); \\ store_##type(addr, f(lhs)); \\ return lhs; \\ } catch (trap_load_address_misaligned& t) { \\ /* AMO faults should be reported as store faults */ \\ throw trap_store_address_misaligned(t.get_tval(), t.get_tval2(), t.get_tinst()); \\ } catch (trap_load_page_fault& t) { \\ /* AMO faults should be reported as store faults */ \\ throw trap_store_page_fault(t.get_tval(), t.get_tval2(), t.get_tinst()); \\ } catch (trap_load_access_fault& t) { \\ /* AMO faults should be reported as store faults */ \\ throw trap_store_access_fault(t.get_tval(), t.get_tval2(), t.get_tinst()); \\ } \\ } amo_func ( uint32 ) // amoadd.w\u5b9e\u73b0 require_extension ( 'A' ); WRITE_RD ( sext32 ( MMU . amo_uint32 ( RS1 , [ & ]( uint32_t lhs ) { return lhs + RS2 ; }))); \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5728spike\u4e2d\uff0c\u76f4\u63a5\u5c06load\u548cstore\u7ec4\u5408\u8d77\u6765\u5b9e\u73b0\u4e86\u539f\u5b50\u64cd\u4f5c\uff0c\u8fd9\u91ccspec\u7684\u8bbe\u8ba1\u6709\u4e9b\u96be\u4ee5\u7406\u89e3\uff0c amoadd.w\u8fd4\u56de\u7684rd\u662f\u52a0\u6cd5\u8fd0\u7b97\u4e4b\u524d\u7684\u5185\u5b58\u4e2d\u7684\u503c\uff0c\u800c\u4e0d\u662f\u52a0\u6cd5\u4e4b\u540e\u7684\u7ed3\u679c\uff0c\u6216\u8bb8\u540e\u7eed\u6211\u80fd\u7406\u89e3\u8fd9\u6837\u8bbe\u8ba1\u7684\u76ee\u7684\u5427\uff0c \u73b0\u5728\u603b\u611f\u89c9\u662f\u5199\u9519\u4e86\u3002 riscv-test\u4e2d\u7684\u6d4b\u8bd5case\u5b9e\u73b0 li a0 , 0xffffffff80000000 ; li a1 , 0xfffffffffffff800 ; la a3 , amo_operand ; sd a0 , 0 ( a3 ) ; amoadd.d a4 , a1 , 0 ( a3 ) ; li x29 , MASK_XLEN ( 0xffffffff80000000 ) ; bne a4 , x29 , fail ; ld a5 , 0 ( a3 ) ; li x29 , MASK_XLEN ( 0xffffffff7ffff800 ) ; bne a5 , x29 , fail ; # try again after a cache miss amoadd.d a4 , a1 , 0 ( a3 ) ; li x29 , MASK_XLEN ( 0xffffffff7ffff800 ) ; bne a4 , x29 , fail ; ld a5 , 0 ( a3 ) ; li x29 , MASK_XLEN ( 0xffffffff7ffff000 ) ; bne a5 , x29 , fail ; .bss .align 3 amo_operand: .dword 0 \u4e5f\u662f\u8ba4\u4e3a\u8fd4\u56de\u503c\u4e3a\u7d2f\u52a0\u4e4b\u524d\u7684\u5185\u5b58\u503c","title":"\u5b9e\u73b0\u5206\u6790"},{"location":"arch/atomic.html#linuxriscv","text":"\u5728\u6700\u65b0\u7684linux5.11\u7248\u672c\u4e2d\uff0c\u5f88\u5bb9\u6613\u5728arch/riscv/include/asm/atomic.h\u4e2d\u627e\u5230\u5185\u5b58\u539f\u5b50\u64cd\u4f5c /* * First, the atomic ops that have no ordering constraints and therefor don't * have the AQ or RL bits set. These don't return anything, so there's only * one version to worry about. */ #define ATOMIC_OP(op, asm_op, I, asm_type, c_type, prefix) \\ static __always_inline \\ void atomic##prefix##_##op(c_type i, atomic##prefix##_t *v) \\ { \\ __asm__ __volatile__ ( \\ \" amo\" #asm_op \".\" #asm_type \" zero, %1, %0\" \\ : \"+A\" (v->counter) \\ : \"r\" (I) \\ : \"memory\"); \\ } \\ #ifdef CONFIG_GENERIC_ATOMIC64 #define ATOMIC_OPS(op, asm_op, I) \\ ATOMIC_OP (op, asm_op, I, w, int, ) #else #define ATOMIC_OPS(op, asm_op, I) \\ ATOMIC_OP (op, asm_op, I, w, int, ) \\ ATOMIC_OP (op, asm_op, I, d, s64, 64) #endif ATOMIC_OPS ( add , add , i ) ATOMIC_OPS ( sub , add , - i ) ATOMIC_OPS ( and , and , i ) ATOMIC_OPS ( or , or , i ) ATOMIC_OPS ( xor , xor , i )","title":"linux\u5185\u6838\u5bf9\u4e8eRISCV\u539f\u5b50\u64cd\u4f5c\u7684\u652f\u6301"},{"location":"arch/cache.html","text":"Cache\u4e4b\u6211\u89c1 \u00b6 \u5bf9\u4e8ecache,\u5927\u5bb6\u90fd\u5f88\u4e86\u89e3\uff0c\u4f46\u53c8\u4f3c\u4e4e\u4e0d\u5b8c\u5168\u4e86\u89e3\u3002\u5728\u4ece\u4e8b\u5fae\u67b6\u6784\u76f8\u5173\u7684\u5de5\u4f5c\u4e4b\u524d\uff0c\u6211\u5bf9cache\u7684\u4e86\u89e3\u5f88\u5c40\u9650\uff0c\u53ea\u80fd\u8bf4\u51fa\u4e00\u4e9b\u8868\u9762\u7684\u4e1c\u897f;\u5728\u63a5\u89e6\u5fae\u67b6\u6784\u4e4b\u540e\uff0c\u624d\u9010\u6e10\u7684\u5bf9cache\u6709\u66f4\u6df1\u7684\u7406\u89e3\u3002 \u672c\u6587\u4e3b\u8981\u76ee\u7684\u662f\u8bb0\u5f55\u81ea\u5df1\u5bf9cache\u7684\u7406\u89e3\uff0c\u56e0\u6b64\u4e0d\u4f1a\u518d\u7cfb\u7edf\u7684\u5bf9cache\u8fdb\u884c\u63cf\u8ff0\uff0c\u4f1a\u663e\u5f97\u5e72\u6da9\uff0c\u7f3a\u5c11\u56fe\u7247\uff0c\u5efa\u8bae\u7ed3\u5408\u5b9d\u534e\u7684cache\u7cfb\u5217\u8bb2\u89e3\u4e00\u540c\u89c2\u770b\u3002 cache\u7ed3\u6784 \u00b6 \u4ece\u7406\u8bba\u4e0a\u6765\u8bb2\uff0ccache\u53ef\u4ee5\u5206\u4e3a\u5982\u4e0b\u4e09\u79cd \u76f4\u63a5\u6620\u5c04\uff08\u5355\u8def\u7ec4\u76f8\u8fde\uff09cache \u591a\u8def\u7ec4\u76f8\u8fdecache \u5168\u76f8\u8fdecache \u4e0d\u540c\u7684cache\u7ed3\u6784\u4f1a\u6709\u4e0d\u540c\u7684\u5730\u5740\u5212\u5206\u65b9\u6848\u3002\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u7f16\u7801\u65b9\u6848\u3002(\u8fd9\u79cd\u601d\u60f3\u5728CPU\u67b6\u6784\u4e2d\u7ecf\u5e38\u4f7f\u7528\uff0c\u6bd4\u5982MMU\u67e5\u627e\u9875\u8868\u7684\u8fc7\u7a0b\u4e5f\u662f \u5bf9\u5730\u5740\u8fdb\u884c\u4e86\u5212\u5206\uff09\u4f46\u90fd\u5212\u5206\u4e3atag\uff0cindex\uff0coffset\u8fd9\u51e0\u4e2a\u533a\u57df \u76f4\u63a5\u6620\u5c04cache \u00b6 \u76f4\u63a5\u6620\u5c04cache\u662f\u6700\u7b80\u5355\u7684\uff0c\u5b83\u5e94\u8be5\u662fcache\u8bbe\u8ba1\u7684\u7b2c\u4e00\u4e2a\u7248\u672c\u3002\u6709\u5b83\u6ca1\u5b83\u80af\u5b9a\u533a\u522b\u6bd4\u8f83\u5927\u3002 \u90a3\u4e48\u5728\u67e5\u627ecache\u7684\u65f6\u5019\uff0c\u9996\u5148\u5339\u914dindex\uff0c\u627e\u5230\u5bf9\u5e94\u7684cacheline,\u7136\u540e\u5339\u914dtag\uff0c\u6821\u9a8c\u6807\u5fd7\u4f4d\uff0c\u786e\u8ba4\u662f\u5426\u547d\u4e2d\uff0c\u5982\u679c\u547d\u4e2d\uff0c\u5219\u6839\u636eoffset\u5728cacheline\u4e2d\u627e\u5230\u5177\u4f53\u7684\u6570\u636e\uff0c\u4e0d\u547d\u4e2d\u5c31\u9700\u8981\u53bb\u4e0b\u4e00\u7ea7\u5185\u5b58\u4e2d\u8fdb\u884c\u67e5\u627e\u4e86\u3002 \u5bf9\u4e8e\u76f4\u63a5\u6620\u5c04\u7f13\u5b58\uff0c\u4e00\u65e6\u4e0d\u547d\u4e2d\uff0c\u5f53\u524dindex\u5bf9\u5e94\u7684cacheline\u5c31\u4f1a\u88ab\u6362\u51fa\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u6709\u53ef\u80fd\u88ab\u6362\u51fa\u7684cacheline\u4e5f\u4f1a\u5728\u4e0d\u4e45\u4e4b\u540e\u5c31\u88ab\u7528\u5230\uff0c\u8fd9\u5c31\u53d1\u751f\u4e86cache\u98a0\u7c38\uff0c\u5927\u5927\u964d\u4f4e\u4e86\u6548\u7387\u3002\u6839\u672c\u539f\u56e0\u8fd8\u662f\u56e0\u4e3a\u64cd\u4f5c\u5730\u5740\u4e2d\u7684index\u4e0etag\u662f\u4e00\u5bf9\u4e00\u7684\u5173\u7cfb\uff0c\u76f8\u540c\u7684index\u7684\u4e0d\u540ctag\u7684\u5730\u5740\u4e5f\u6709\u53ef\u80fd\u4f1a\u6ee1\u8db3\u5c40\u90e8\u6027\uff0c\u4f46\u5bf9\u4e8e\u76f4\u63a5\u6620\u5c04cache\uff0c\u5b83\u53ea\u80fd\u5b58\u4e00\u4e2atag\u3002 \u591a\u8def\u7ec4\u76f8\u8fdecache \u00b6 \u4e3a\u4e86\u89e3\u51b3cache\u98a0\u7c38\u7684\u95ee\u9898\uff0c\u8fd9\u91cc\u5c31\u5f15\u5165\u4e86\u591a\u8def\u7ec4\u76f8\u8fde\u7684\u8bbe\u8ba1\u3002\u6838\u5fc3\u601d\u60f3\u662f\uff0cindex\u9501\u5b9a\u7684\u662fcacheline\u7ec4\uff0c\u6bcf\u4e00\u4e2a\u7ec4\u5458\u90fd\u6709\u5b83\u81ea\u5df1\u7684tag\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u56e0\u4e3aindex\u4e00\u81f4\u800c\u5fc5\u987b\u6362\u51fa\u67d0\u4e00\u4e2acacheline\u3002\u8fd9\u6837\u5728\u7406\u8bba\u4e0a\u8981\u6bd4\u76f4\u63a5\u6620\u5c04\u597d\uff0c\u591a\u8def\u7ec4\u76f8\u8fde\u7684\u6700\u574f\u60c5\u51b5\u4e5f\u4e0d\u8fc7\u662f\u8ddf\u76f4\u63a5\u6620\u5c04\u4e00\u6837\uff0c\u6bcf\u6b21\u90fd\u6362\u51fa\u3002 \u8fd9\u91cc\u5c31\u5f15\u5165\u4e86\u4e00\u4e2a\u7b56\u7565\u95ee\u9898\uff0c\u4e00\u65e6\u6574\u4e2a\u7ec4\u90fdmiss,\u5982\u4f55\u51b3\u5b9a\u6362\u54ea\u4e00\u4e2a\u7684\u95ee\u9898\u3002 \u5168\u76f8\u8fdecache \u00b6 \u5168\u76f8\u8fde\u662f\u4e00\u79cd\u6781\u7aef\u60c5\u51b5\uff0c\u53ea\u6709\u4e00\u4e2a\u7ec4\uff0c\u53ef\u4ee5\u6839\u636e\u7b56\u7565\u6765\u51b3\u5b9a\u5230\u5e95\u6362\u54ea\u4e00\u4e2a\u3002\u5f53\u7136\uff0c\u5728\u7269\u7406\u4e0a\u8fd9\u4e5f\u662f\u6700\u590d\u6742\u7684\u3002\u591a\u8def\u7ec4\u76f8\u8fde\u7684\u4e00\u79cd\u517c\u987e\u65b9\u6848\u3002 cache\u5de5\u4f5c\u6d41\u7a0b \u00b6 \u67e5\u627e\u8fc7\u7a0b \u00b6 \u66ff\u6362\u8fc7\u7a0b \u00b6 flush\u8fc7\u7a0b \u00b6 cache\u4e00\u81f4\u6027 \u00b6","title":"Cache\u4e4b\u6211\u89c1"},{"location":"arch/cache.html#cache","text":"\u5bf9\u4e8ecache,\u5927\u5bb6\u90fd\u5f88\u4e86\u89e3\uff0c\u4f46\u53c8\u4f3c\u4e4e\u4e0d\u5b8c\u5168\u4e86\u89e3\u3002\u5728\u4ece\u4e8b\u5fae\u67b6\u6784\u76f8\u5173\u7684\u5de5\u4f5c\u4e4b\u524d\uff0c\u6211\u5bf9cache\u7684\u4e86\u89e3\u5f88\u5c40\u9650\uff0c\u53ea\u80fd\u8bf4\u51fa\u4e00\u4e9b\u8868\u9762\u7684\u4e1c\u897f;\u5728\u63a5\u89e6\u5fae\u67b6\u6784\u4e4b\u540e\uff0c\u624d\u9010\u6e10\u7684\u5bf9cache\u6709\u66f4\u6df1\u7684\u7406\u89e3\u3002 \u672c\u6587\u4e3b\u8981\u76ee\u7684\u662f\u8bb0\u5f55\u81ea\u5df1\u5bf9cache\u7684\u7406\u89e3\uff0c\u56e0\u6b64\u4e0d\u4f1a\u518d\u7cfb\u7edf\u7684\u5bf9cache\u8fdb\u884c\u63cf\u8ff0\uff0c\u4f1a\u663e\u5f97\u5e72\u6da9\uff0c\u7f3a\u5c11\u56fe\u7247\uff0c\u5efa\u8bae\u7ed3\u5408\u5b9d\u534e\u7684cache\u7cfb\u5217\u8bb2\u89e3\u4e00\u540c\u89c2\u770b\u3002","title":"Cache\u4e4b\u6211\u89c1"},{"location":"arch/cache.html#cache_1","text":"\u4ece\u7406\u8bba\u4e0a\u6765\u8bb2\uff0ccache\u53ef\u4ee5\u5206\u4e3a\u5982\u4e0b\u4e09\u79cd \u76f4\u63a5\u6620\u5c04\uff08\u5355\u8def\u7ec4\u76f8\u8fde\uff09cache \u591a\u8def\u7ec4\u76f8\u8fdecache \u5168\u76f8\u8fdecache \u4e0d\u540c\u7684cache\u7ed3\u6784\u4f1a\u6709\u4e0d\u540c\u7684\u5730\u5740\u5212\u5206\u65b9\u6848\u3002\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u7f16\u7801\u65b9\u6848\u3002(\u8fd9\u79cd\u601d\u60f3\u5728CPU\u67b6\u6784\u4e2d\u7ecf\u5e38\u4f7f\u7528\uff0c\u6bd4\u5982MMU\u67e5\u627e\u9875\u8868\u7684\u8fc7\u7a0b\u4e5f\u662f \u5bf9\u5730\u5740\u8fdb\u884c\u4e86\u5212\u5206\uff09\u4f46\u90fd\u5212\u5206\u4e3atag\uff0cindex\uff0coffset\u8fd9\u51e0\u4e2a\u533a\u57df","title":"cache\u7ed3\u6784"},{"location":"arch/cache.html#cache_2","text":"\u76f4\u63a5\u6620\u5c04cache\u662f\u6700\u7b80\u5355\u7684\uff0c\u5b83\u5e94\u8be5\u662fcache\u8bbe\u8ba1\u7684\u7b2c\u4e00\u4e2a\u7248\u672c\u3002\u6709\u5b83\u6ca1\u5b83\u80af\u5b9a\u533a\u522b\u6bd4\u8f83\u5927\u3002 \u90a3\u4e48\u5728\u67e5\u627ecache\u7684\u65f6\u5019\uff0c\u9996\u5148\u5339\u914dindex\uff0c\u627e\u5230\u5bf9\u5e94\u7684cacheline,\u7136\u540e\u5339\u914dtag\uff0c\u6821\u9a8c\u6807\u5fd7\u4f4d\uff0c\u786e\u8ba4\u662f\u5426\u547d\u4e2d\uff0c\u5982\u679c\u547d\u4e2d\uff0c\u5219\u6839\u636eoffset\u5728cacheline\u4e2d\u627e\u5230\u5177\u4f53\u7684\u6570\u636e\uff0c\u4e0d\u547d\u4e2d\u5c31\u9700\u8981\u53bb\u4e0b\u4e00\u7ea7\u5185\u5b58\u4e2d\u8fdb\u884c\u67e5\u627e\u4e86\u3002 \u5bf9\u4e8e\u76f4\u63a5\u6620\u5c04\u7f13\u5b58\uff0c\u4e00\u65e6\u4e0d\u547d\u4e2d\uff0c\u5f53\u524dindex\u5bf9\u5e94\u7684cacheline\u5c31\u4f1a\u88ab\u6362\u51fa\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u6709\u53ef\u80fd\u88ab\u6362\u51fa\u7684cacheline\u4e5f\u4f1a\u5728\u4e0d\u4e45\u4e4b\u540e\u5c31\u88ab\u7528\u5230\uff0c\u8fd9\u5c31\u53d1\u751f\u4e86cache\u98a0\u7c38\uff0c\u5927\u5927\u964d\u4f4e\u4e86\u6548\u7387\u3002\u6839\u672c\u539f\u56e0\u8fd8\u662f\u56e0\u4e3a\u64cd\u4f5c\u5730\u5740\u4e2d\u7684index\u4e0etag\u662f\u4e00\u5bf9\u4e00\u7684\u5173\u7cfb\uff0c\u76f8\u540c\u7684index\u7684\u4e0d\u540ctag\u7684\u5730\u5740\u4e5f\u6709\u53ef\u80fd\u4f1a\u6ee1\u8db3\u5c40\u90e8\u6027\uff0c\u4f46\u5bf9\u4e8e\u76f4\u63a5\u6620\u5c04cache\uff0c\u5b83\u53ea\u80fd\u5b58\u4e00\u4e2atag\u3002","title":"\u76f4\u63a5\u6620\u5c04cache"},{"location":"arch/cache.html#cache_3","text":"\u4e3a\u4e86\u89e3\u51b3cache\u98a0\u7c38\u7684\u95ee\u9898\uff0c\u8fd9\u91cc\u5c31\u5f15\u5165\u4e86\u591a\u8def\u7ec4\u76f8\u8fde\u7684\u8bbe\u8ba1\u3002\u6838\u5fc3\u601d\u60f3\u662f\uff0cindex\u9501\u5b9a\u7684\u662fcacheline\u7ec4\uff0c\u6bcf\u4e00\u4e2a\u7ec4\u5458\u90fd\u6709\u5b83\u81ea\u5df1\u7684tag\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u56e0\u4e3aindex\u4e00\u81f4\u800c\u5fc5\u987b\u6362\u51fa\u67d0\u4e00\u4e2acacheline\u3002\u8fd9\u6837\u5728\u7406\u8bba\u4e0a\u8981\u6bd4\u76f4\u63a5\u6620\u5c04\u597d\uff0c\u591a\u8def\u7ec4\u76f8\u8fde\u7684\u6700\u574f\u60c5\u51b5\u4e5f\u4e0d\u8fc7\u662f\u8ddf\u76f4\u63a5\u6620\u5c04\u4e00\u6837\uff0c\u6bcf\u6b21\u90fd\u6362\u51fa\u3002 \u8fd9\u91cc\u5c31\u5f15\u5165\u4e86\u4e00\u4e2a\u7b56\u7565\u95ee\u9898\uff0c\u4e00\u65e6\u6574\u4e2a\u7ec4\u90fdmiss,\u5982\u4f55\u51b3\u5b9a\u6362\u54ea\u4e00\u4e2a\u7684\u95ee\u9898\u3002","title":"\u591a\u8def\u7ec4\u76f8\u8fdecache"},{"location":"arch/cache.html#cache_4","text":"\u5168\u76f8\u8fde\u662f\u4e00\u79cd\u6781\u7aef\u60c5\u51b5\uff0c\u53ea\u6709\u4e00\u4e2a\u7ec4\uff0c\u53ef\u4ee5\u6839\u636e\u7b56\u7565\u6765\u51b3\u5b9a\u5230\u5e95\u6362\u54ea\u4e00\u4e2a\u3002\u5f53\u7136\uff0c\u5728\u7269\u7406\u4e0a\u8fd9\u4e5f\u662f\u6700\u590d\u6742\u7684\u3002\u591a\u8def\u7ec4\u76f8\u8fde\u7684\u4e00\u79cd\u517c\u987e\u65b9\u6848\u3002","title":"\u5168\u76f8\u8fdecache"},{"location":"arch/cache.html#cache_5","text":"","title":"cache\u5de5\u4f5c\u6d41\u7a0b"},{"location":"arch/cache.html#_1","text":"","title":"\u67e5\u627e\u8fc7\u7a0b"},{"location":"arch/cache.html#_2","text":"","title":"\u66ff\u6362\u8fc7\u7a0b"},{"location":"arch/cache.html#flush","text":"","title":"flush\u8fc7\u7a0b"},{"location":"arch/cache.html#cache_6","text":"","title":"cache\u4e00\u81f4\u6027"},{"location":"arch/chiplet.html","text":"chiplet \u00b6","title":"chiplet"},{"location":"arch/chiplet.html#chiplet","text":"","title":"chiplet"},{"location":"arch/computer_arch.html","text":"\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u91cf\u5316\u7814\u7a76\u65b9\u6cd5 \u00b6 \u91cd\u70b9\u5173\u6ce8\u5e38\u89c1\u60c5\u5f62 \u00b6 \u6700\u91cd\u8981\uff0c\u6700\u666e\u904d\u7684\u8ba1\u7b97\u673a\u8bbe\u8ba1\u539f\u5219\u53ef\u80fd\u5c31\u662f\u91cd\u70b9\u5173\u6ce8\u5e38\u89c1\u60c5\u5f62\u3002\u5f3a\u8c03\u5e38\u89c1\u60c5\u5f62\u53ef\u80fd\u4f1a\u964d\u4f4e\u975e\u5e38\u89c1\u60c5\u5f62\u7684\u5904\u7406\u901f\u5ea6\uff0c\u4f46\u5982\u679c\u975e\u5e38\u89c1\u60c5\u5f62\u51fa\u73b0\u7684\u6982\u7387\u5f88\u4f4e\uff0c\u90a3\u4e48\u6574\u4f53\u6027\u80fd\u53ef\u4ee5\u901a\u8fc7\u4f18\u5316\u6b63\u5e38\u60c5\u5f62\u5f97\u4ee5\u63d0\u5347\u3002 amdahl\u5b9a\u5f8b \u00b6 \u901a\u8fc7\u5b9a\u5f8b\uff0c\u53ef\u4ee5\u7b97\u51fa\u901a\u8fc7\u6539\u8fdb\u8ba1\u7b97\u673a\u7684\u67d0\u4e00\u90e8\u5206\u800c\u83b7\u5f97\u7684\u6027\u80fd\u589e\u76ca \u603b\u52a0\u901f\u6bd4 = \u539f\u6267\u884c\u65f6\u95f4 / \u65b0\u6267\u884c\u65f6\u95f4 = 1 / ((1 - \u5347\u7ea7\u6bd4\u4f8b) + \u5347\u7ea7\u6bd4\u4f8b / \u5347\u7ea7\u52a0\u901f\u6bd4) \u5176\u4e2d\uff1a \u5347\u7ea7\u6bd4\u4f8b\uff1a\u539f\u8ba1\u7b97\u65f6\u95f4\u4e2d\u53ef\u5347\u7ea7\u90e8\u5206\u6240\u5360\u6bd4\u4f8b(\u65f6\u95f4\u6bd4\u4f8b) \u5347\u7ea7\u52a0\u901f\u6bd4\uff1a\u5347\u7ea7\u4e4b\u524d\u7684\u6267\u884c\u65f6\u95f4 / \u5347\u7ea7\u4e4b\u540e\u7684\u6267\u884c\u65f6\u95f4","title":"\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u91cf\u5316\u7814\u7a76\u65b9\u6cd5"},{"location":"arch/computer_arch.html#_1","text":"","title":"\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u91cf\u5316\u7814\u7a76\u65b9\u6cd5"},{"location":"arch/computer_arch.html#_2","text":"\u6700\u91cd\u8981\uff0c\u6700\u666e\u904d\u7684\u8ba1\u7b97\u673a\u8bbe\u8ba1\u539f\u5219\u53ef\u80fd\u5c31\u662f\u91cd\u70b9\u5173\u6ce8\u5e38\u89c1\u60c5\u5f62\u3002\u5f3a\u8c03\u5e38\u89c1\u60c5\u5f62\u53ef\u80fd\u4f1a\u964d\u4f4e\u975e\u5e38\u89c1\u60c5\u5f62\u7684\u5904\u7406\u901f\u5ea6\uff0c\u4f46\u5982\u679c\u975e\u5e38\u89c1\u60c5\u5f62\u51fa\u73b0\u7684\u6982\u7387\u5f88\u4f4e\uff0c\u90a3\u4e48\u6574\u4f53\u6027\u80fd\u53ef\u4ee5\u901a\u8fc7\u4f18\u5316\u6b63\u5e38\u60c5\u5f62\u5f97\u4ee5\u63d0\u5347\u3002","title":"\u91cd\u70b9\u5173\u6ce8\u5e38\u89c1\u60c5\u5f62"},{"location":"arch/computer_arch.html#amdahl","text":"\u901a\u8fc7\u5b9a\u5f8b\uff0c\u53ef\u4ee5\u7b97\u51fa\u901a\u8fc7\u6539\u8fdb\u8ba1\u7b97\u673a\u7684\u67d0\u4e00\u90e8\u5206\u800c\u83b7\u5f97\u7684\u6027\u80fd\u589e\u76ca \u603b\u52a0\u901f\u6bd4 = \u539f\u6267\u884c\u65f6\u95f4 / \u65b0\u6267\u884c\u65f6\u95f4 = 1 / ((1 - \u5347\u7ea7\u6bd4\u4f8b) + \u5347\u7ea7\u6bd4\u4f8b / \u5347\u7ea7\u52a0\u901f\u6bd4) \u5176\u4e2d\uff1a \u5347\u7ea7\u6bd4\u4f8b\uff1a\u539f\u8ba1\u7b97\u65f6\u95f4\u4e2d\u53ef\u5347\u7ea7\u90e8\u5206\u6240\u5360\u6bd4\u4f8b(\u65f6\u95f4\u6bd4\u4f8b) \u5347\u7ea7\u52a0\u901f\u6bd4\uff1a\u5347\u7ea7\u4e4b\u524d\u7684\u6267\u884c\u65f6\u95f4 / \u5347\u7ea7\u4e4b\u540e\u7684\u6267\u884c\u65f6\u95f4","title":"amdahl\u5b9a\u5f8b"},{"location":"arch/hotchip33.html","text":"hotchip33 \u00b6 \u7b2c33\u5c4ahotchip\u5927\u4f1a\u603b\u7ed3 samsung PIM \u00b6 \u4ecb\u7ecd\u4e86\u4e09\u661f\u7684\u5b58\u5185\u8ba1\u7b97\u67b6\u6784\u3002\u8981\u7406\u89e3\u5b83\u7684\u67b6\u6784\uff0c\u5c31\u9700\u8981\u5148\u4e86\u89e3\u5b58\u5185\u8ba1\u7b97 \u4ec0\u4e48\u662f\u5b58\u5185\u8ba1\u7b97 \u00b6 \u51af\u8bfa\u4f9d\u66fc\u7684\u67b6\u6784\u662f\u8ba1\u7b97\u64cd\u4f5c\u548c\u5185\u5b58\u64cd\u4f5c\u5206\u79bb\u7684\uff0c\u5c24\u5176\u662f\u73b0\u5728\u4e3b\u6d41\u7684RISC\u67b6\u6784\uff0c\u6709\u4e13\u95e8\u7684load/store\u6307\u4ee4\u8d1f\u8d23\u5185\u5b58\u64cd\u4f5c\uff0c\u5176\u4ed6\u6307\u4ee4\u8d1f\u8d23\u76f4\u63a5\u5bf9\u5bc4\u5b58\u5668\u8fdb\u884c\u8ba1\u7b97\u3002\u51af\u8bfa\u4f9d\u66fc\u67b6\u6784\u5728\u6784\u5efa\u4e4b\u521d\u662f\u5047\u8bbe\u5904\u7406\u5668\u548c\u5185\u5b58\u901f\u5ea6\u5f88\u63a5\u8fd1\uff0c\u4f46\u73b0\u5728\u8ba1\u7b97\u5355\u5143\u7684\u6027\u80fd\u968f\u7740\u6469\u5c14\u5b9a\u5f8b\u4e00\u8def\u98d9\u5347\uff0c\u800c\u5b58\u50a8\u5355\u5143\u76f8\u8f83\u800c\u8a00\u6027\u80fd\u63d0\u5347\u4e0d\u5927\uff0c\u56e0\u6b64\uff0cDRAM\u7684\u6027\u80fd\u5df2\u7ecf\u6210\u4e3a\u4e86\u6574\u4e2a\u7cfb\u7edf\u6027\u80fd\u7684\u91cd\u8981\u74f6\u9888\uff0c\u4e5f\u5c31\u662f\u6240\u8c13\u7684\u201c\u5185\u5b58\u5899\u201d\uff0c\u8fd9\u9650\u5236\u4e86\u5904\u7406\u5668\u7684\u8ba1\u7b97\u6027\u80fd\u548c\u80fd\u6548\u6bd4\u3002\u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u4e3aCPU\u4e0e\u5185\u5b58\u4e4b\u95f4\u7684\u8ddd\u79bb\u592a\u8fdc\u5bfc\u81f4\u4e86\u5185\u5b58\u5899\uff0c\u5c31\u50cf\u60c5\u4fa3\u5f02\u5730\u604b\u60c5\uff0c\u56e0\u4e3a\u4e3e\u4f8b\u9650\u5236\u4e86\u611f\u60c5\u7684\u53d1\u5c55\uff0c\u8981\u60f3\u611f\u60c5\u6709\u7a81\u7834\uff0c\u8981\u4e48\u7537\u7684\u53bb\u5973\u7684\u57ce\u5e02\uff0c\u8981\u4e48\u5973\u7684\u53bb\u7537\u7684\u57ce\u5e02\u3002\u5f88\u663e\u7136\uff0c\u5728AI\u8fd9\u79cd\u6570\u636e\u5bc6\u96c6\u7684\u573a\u666f\u4e2d\uff0c\u4f3c\u4e4e\u628a\u8ba1\u7b97\u642c\u5230\u79bb\u5b58\u50a8\u66f4\u8fd1\u7684\u5730\u65b9\u66f4\u80fd\u63d0\u9ad8\u6574\u4f53\u6027\u80fd\u548c\u80fd\u6548\u6bd4\u3002\u56e0\u6b64\u5c31\u6709\u4e86\u5b58\u5185\u8ba1\u7b97\u3002 \u5b58\u5185\u8ba1\u7b97(PIM processing-in-memory)\u53ef\u4ee5\u7a81\u7834\u5185\u5b58\u74f6\u9888\u3002\u5c3d\u7ba1\u6709\u5f88\u591a\u4e0d\u540c\u7684\u589e\u52a0\u5e26\u5bbd\u7684\u65b9\u6cd5\uff0c\u4f46\u7531\u4e8e\u53d7\u5230PCB\u5e03\u7ebf\uff0c\u529f\u8017\u53ca\u53d1\u70ed\u91cf\uff0cCPU\u63a5\u53e3\u6570\u91cf\u7b49\u7269\u7406\u4e0a\u7684\u9650\u5236\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5f88\u96be\u6709\u7a81\u7834\u6027\u7684\u63d0\u5347\u3002 PIM\u65e8\u5728\u63d0\u5347\u5e26\u5bbd\u5bc6\u96c6\u578bworkloads(\u76ee\u524d\u4e3b\u8981\u662fAI\u9886\u57df)\u7684\u6027\u80fd\uff0c\u901a\u8fc7\u51cf\u5c11\u5185\u5b58\u6570\u636e\u642c\u79fb\u6765\u63d0\u5347\u80fd\u91cf\u6548\u7387\u3002 \u5b58\u5185\u8ba1\u7b97\u7684\u672c\u8d28\u662f\u4f1a\u4f7f\u7528\u6a21\u62df\u8ba1\u7b97(\u5982\u679c\u4e0d\u662f\u4f7f\u7528\u6a21\u62df\u4fe1\u53f7,\u90a3\u4f3c\u4e4e\u548c\u51af\u8bfa\u4f9d\u66fc\u67b6\u6784\u4e5f\u6ca1\u4ec0\u4e48\u533a\u522b\u5427)\uff0c\u8fd9\u4e5f\u5c31\u610f\u5473\u7740\u5176\u76ee\u524d\u53ea\u80fd\u5e94\u7528\u5728AI\u5e02\u573a\u3002\u800c\u4e14\u5b58\u5185\u8ba1\u7b97\u6280\u672f\u60f3\u8981\u7a81\u7834\uff0c\u8981\u5728\u5b58\u50a8\u7ed3\u6784\u4e0a\u505a\u6539\u8fdb\uff0c\u4f7f\u5f97\u5b58\u50a8\u5355\u5143\u66f4\u9002\u5408\u505a\u8ba1\u7b97\u3002 \u5b58\u7b97\u4e00\u4f53\u76ee\u524d\u7cbe\u5ea6\u4e0d\u9ad8\uff0c\u5927\u6982\u57288bit, \u66f4\u9002\u5408\u7aef\u7684\u5d4c\u5165\u5f0fAI\u573a\u666f\u3002 \u4e09\u661f\u7684Aquabolt-XL\u67b6\u6784 \u00b6 \u4e00\u4e2a16\u8def\u7684FP16 SIMD\u6570\u7ec4\uff0c\u652f\u6301FP16\u4e58\u548c\u52a0 risc\u98ce\u683c\u768432bit\u6307\u4ee4\u96c6\uff0c\u4e00\u5171\u4e09\u79cd\u6307\u4ee4\u7c7b\u578b\u5171\u8ba19\u6761\u6307\u4ee4 \u6307\u4ee4\u53c2\u6570\u53ef\u4ee5\u662f GRF_A, GRF_B \u5411\u91cf\u5bc4\u5b58\u5668\uff0cSRF\u6807\u91cf\u5bc4\u5b58\u5668\u6216\u8005bank row buffer. \u4e09\u661f\u63d0\u4f9b\u4e86\u4e00\u6574\u5957\u7684software stack\u6765\u652f\u6301PIM. graphcore colossue Mk2 IPU \u00b6 \u4f17\u6838\u7684\u7fd8\u695a\uff0c\u76ee\u524dMk2 \u67091472\u4e2a\u6838\uff0c\u6bcf\u4e2a\u6838\u5e26\u6709624KiB\u7684sram, \u91c7\u7528TSMC\u76847nm\u5de5\u827a\uff0c\u8fbe\u5230\u4e86823mm 2 (\u8fd9\u4e48\u5927\u7684\u9762\u79ef\uff0cSRAM\u5360\u4e86\u4e00\u534a, \u903b\u8f91\u5355\u5143\u5360\u4e86\u00bc), \u4e3b\u98911.325GHz, \u7b97\u529b\u53ef\u8fbe250Tflop/s \u4ece\u4e0a\u56fe\u7684\u6027\u80fd\u7edf\u8ba1\u80fd\u591f\u770b\u51fa\uff0cgraphcore\u7684\u4f18\u52bf\u5728\u4e8efp32\u7684\u7b97\u529b\uff0c \u7531\u4e8eMk2\u5185\u90e8\u8fbe\u5230\u4e86897MiB\u7684SRAM, \u4f30\u8ba1\u529f\u8017\u8868\u73b0\u8981\u6bd4A100\u597d\u3002 \u6bcf\u4e2a\u6838\u88ab\u79f0\u4e3a\u4e00\u4e2aTile, \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e2aExchange.\u6587\u6863\u4e2d\u6ca1\u6709\u5bf9tile\u53caexchange\u505a\u8fc7\u591a\u7684\u4ecb\u7ecd\uff0c\u4e5f\u6ca1\u6cd5\u7b80\u5355\u7684\u901a\u8fc7\u6587\u6863\u83b7\u53d6\u4e00\u4e9b\u8bbe\u8ba1\u4fe1\u606f\u3002\u4f46\u6211\u4eec\u80fd\u591f\u770b\u51fatile\u4e0d\u662f\u4e00\u4e2a\u7b80\u5355\u768432bit\u7684\u5355\u53d1\u5c04\u6216\u53cc\u53d1\u5c04CPU\u3002 \u5b83\u67097\u4e2a\u7a0b\u5e8f\u4e0a\u4e0b\u6587\uff0c6\u4e2a\u8f6e\u8be2\u7684\u6d41\u6c34\u7ebfslot, \u6bcf\u4e2aslot\u6267\u884c\u2159\u4e2aclock. \u4e3b\u8981\u6709\u4e24\u4e2a\u5904\u7406\u5355\u5143\uff0c\u4e00\u4e2aMAIN, \u4e00\u4e2aAUX\uff0c main\u6709\u81ea\u5df1\u7684registerfile,\u540d\u4e3aMRF;AUX\u6709\u4e00\u4e2a\u540d\u4e3aARF\u7684registerfile\u3002\u6709\u4e00\u4e2a\u8d1f\u8d23\u8c03\u5ea6slot\u7684supervisor, supervisor\u901a\u8fc7\u6267\u884cRUN\u6307\u4ee4\u6765\u8c03\u5ea6\u8282\u70b9\uff0ccodelet\u6267\u884c\u5b8c\u6210\u540e\uff0c\u4ee5EXIT\u6307\u4ee4\u7ec8\u6b62\u3002\u8282\u70b9\u4ee5\u82af\u7247\u65f6\u949f\u7684\u2159\u6267\u884c\uff0c\u770b\u4e0d\u5230\u6d41\u6c34\u7ebf\u3002\u8bbf\u5b58\uff0c\u5206\u652f\uff0c\u6d6e\u70b9\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u6307\u4ee4\u90fd\u9700\u8981\u4e00\u4e2a\u5468\u671f\u6267\u884c\u5b8c\u6210\u3002\u8fd9\u6837\u7f16\u8bd1\u5668\u5c31\u80fd\u6bd4\u8f83\u8f7b\u677e\u7684\u9884\u6d4bcodelet\u6267\u884c\uff0c\u8fd9\u6837\u5c31\u80fd\u591f\u8f7b\u677e\u7684\u8bc4\u4f30\u8d1f\u8f7d\uff0c\u505a\u5230\u8d1f\u8f7d\u5747\u8861\u3002 \u5b83\u6709\u4e00\u4e2a\u5f3a\u5927\u7684\u6d6e\u70b9\u5355\u5143\uff0c \u5e76\u4e14\u652f\u6301\u4e00\u4e9b\u8d85\u8d8a\u51fd\u6570\u3002 \u4e0b\u9762\u662f\u5b83\u5728\u62c6\u5206kernel\u65f6\u7684\u7b56\u7565\uff0c \u53ef\u4ee5\u770b\u51fa\uff0c\u5b83\u8fd8\u662f\u62c6\u5206\u6210\u5f88\u5c0f\u7684\u77e9\u9635\u6765\u8fdb\u884c\u8fd0\u7b97\uff0c\u5e76\u4e14\u4e2d\u95f4\u7ed3\u679c\u91c7\u7528fp32\u8fdb\u884c\u7d2f\u52a0,\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u62c6\u5206\uff0c\u5355\u4ece\u4e0a\u9762\u7b80\u5355\u7684tile\u7ed3\u6784\u56fe\u4e0a\u8fd8\u5f88\u96be\u5206\u6790\u6e05\u695a\u3002 \u4e0b\u9762\u662f\u8fd0\u884cbert-l \u7f51\u7edc\u7684\u65f6\u5019\u7684\u6574\u4f53\u8fd0\u884c\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u6240\u6709tile\u90fd\u662f\u6309\u7167sync,exchange,compute\u8fd9\u4e09\u4e2a\u72b6\u6001\u8fdb\u884c\u5faa\u73af\uff0c\u800c\u4e14\u5de5\u5177\u94fe\u5bf9\u4e8e\u6574\u4e2a\u7f51\u7edc\u7684\u4f18\u5316\u505a\u7684\u5df2\u7ecf\u5f88\u597d\u4e86\uff0c\u8d1f\u8f7d\u6bd4\u8f83\u5747\u8861\u3002 graphcore\u7ed9\u51fa\u4e86\u4e0d\u7528HBM(\u5728\u5b58\u50a8\u5355\u5143\u4e0a\u548cDDR\u6ca1\u6709\u592a\u5927\u5dee\u5f02\uff0c\u4e3b\u8981\u662f\u5c06\u5185\u5b58\u548c\u4e3b\u82af\u7247\u5c01\u5728\u4e00\u4e2a\u82af\u7247\u91cc\u9762\uff0c\u8fd9\u6837\u5c31\u8de8\u8d8a\u4e86\u5c01\u88c5\u5bf9\u82af\u7247\u5f15\u811a\u6570\u76ee\u7684\u9650\u5236\uff0c\u5927\u5927\u7f29\u77ed\u4e86dram\u548c\u4e3b\u82af\u7247\u76f4\u63a5\u7684\u8ddd\u79bb\uff0c\u540c\u65f6\u91c7\u75283D\u5806\u53e0\u6280\u672f\uff0c\u76f4\u63a5\u901a\u8fc7TSV\u6253\u5b54\u7ad6\u76f4\u5806\u53e0\u5728\u4e00\u8d77\uff0c\u9ad8\u7aef\u7684DDR\u4e5f\u91c7\u53d6\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5f53\u7136\u8fd9\u79cd\u65b9\u5f0f\u5bf9\u6563\u70ed\u8981\u6c42\u66f4\u9ad8)\u7684\u7406\u7531 \u5185\u5b58\u5bb9\u91cf\u51b3\u5b9a\u4e86AI\u80fd\u505a\u54ea\u4e9b\u4e8b\u60c5\uff0c\u5e26\u5bbd\u53ea\u662f\u9650\u5236\u4e86\u6709\u591a\u5feb GPU\u548cTPU\u5c1d\u8bd5\u4f7f\u7528HBM\u540c\u65f6\u89e3\u51b3\u5e26\u5bbd\u548c\u5bb9\u91cf\u95ee\u9898 HBM\u975e\u5e38\u6602\u8d35\uff0c\u6709\u5bb9\u91cf\u9650\u5236\uff0c\u8981\u591a\u82b1100W\u7f8e\u5143\u4ee5\u4e0a IPU(graphcore\u79f0\u81ea\u5bb6\u4e3aIPU)\u4f7f\u7528SRAM\u6765\u89e3\u51b3\u5e26\u5bbd\u95ee\u9898\uff0c\u4f7f\u7528DDR\u6765\u89e3\u51b3\u5bb9\u91cf\u95ee\u9898 HBM\u7684\u4ef7\u683c\u5927\u6982\u662fDDR4\u768410\u500d($/GB), 40GB\u7684HBM\u4ef7\u683c\u5927\u6982\u662f\u4e00\u4e2areticle-sized\u5904\u7406\u5668\u5c01\u88c5\u76843\u500d\uff0cIPU\u8fd9\u79cd\u57fa\u4e8eDDR\u7684\u7cfb\u7edf\u53ef\u4ee5\u628a\u7701\u4e0b\u6765\u7684\u94b1\u7528\u4e8e\u751f\u4ea7\u66f4\u591a\u7684\u5904\u7406\u5668 \u5728DRAM\u4e2d\u7684\u6743\u91cd\u548cfeature\u6570\u636e\u5982\u4f55\u4e0eSRAM\u8fdb\u884c\u914d\u5408\uff0c\u9ad8\u6548\u7684\u8fdb\u884c\u8fd0\u7b97\u5462\uff1f \u731c\u60f3\u5bf9\u4e8e\u8f83\u5c0f\u7684\u6a21\u578b\uff0c\u5982\u679c\u6240\u6709\u6743\u91cd\u80fd\u591f\u5728sram\u4e2d\u653e\u4e0b\uff0c\u5e76\u4e14\u4fdd\u6301\u4e00\u5b9a\u7684\u8d1f\u8f7d\u5747\u8861\uff0c\u90a3\u4e48\u663e\u7136\u8fd9\u662f\u6700\u5feb\u7684\u65b9\u5f0f\u3002\u5bf9\u4e8e\u5927\u578b\u7684\u6a21\u578b\uff0c\u5e94\u8be5\u8fd8\u662f\u4f1a\u5b58\u5728DRAM\u4e0eSRAM\u4ea4\u4e92\u7684\u60c5\u51b5\u3002\u5f53\u7136\uff0c\u8fd9\u5bf9\u4e8e\u5de5\u5177\u94fe\u662f\u4e00\u4e2a\u6311\u6218\u3002 \u5982\u6b64\u5de8\u5927\u7684\u82af\u7247\uff0c\u4e00\u5b9a\u6709\u5f88\u591a\u65b9\u6cd5\u6765\u63a7\u5236\u5173\u95ed\u6389\u574f\u6389\u7684\u90e8\u5206\u3002 \u9664\u6b64\u4e4b\u5916\uff0c ARM neoverse \u00b6 \u4ecb\u7ecd\u4e86ARM\u7b2c\u4e8c\u4ee3\u9ad8\u6027\u80fd\u57fa\u7840\u67b6\u6784CPU\u548c\u7cfb\u7edfIP\u30022018\u5e74arm\u63a8\u51fa\u4e86Neoverse\u5904\u7406\u5668\u5e73\u53f0,\u65e8\u5728\u9488\u5bf9\u6570\u636e\u4e2d\u5fc3\u5904\u7406\u5668\u5e02\u573a\uff0c2019\u5e74\u641e\u5b9a\u4e86N1\u7248\u672c\uff0c20\u5e74\u53c8\u53d1\u5e03\u4e86N2\u7248\u672c\u3002 neoverse\u5206\u4e3a\u4e09\u5927\u7cfb\u5217: V-serise \u4e3b\u6253\u9ad8\u6027\u80fd\uff0c\u652f\u6301SVE 2x256b\uff0c 32-128 cores, 80-350W\uff0c ARMv9 N-serise \u6027\u80fd\uff0c\u529f\u8017\uff0c\u9762\u79ef\u5747\u8861\uff0c 12-36 cores, 30-80W, A72 E-serise \u5f3a\u8c03\u80fd\u6548\uff0c\u529f\u8017\u548c\u9762\u79ef, 4-16 cores, 20-35W, A53 Intel Alder Lake \u00b6 Alder Lake(\u7f8e\u56fd\u534e\u76db\u987f\u7684\u4e00\u4e2a\u540d\u4e3a\u5965\u5c14\u5fb7\u7684\u6e56, \u4e0d\u7981\u8ba9\u4eba\u60f3\u5230\u4e86\u4e2d\u79d1\u9662\u7684\u96c1\u6816\u6e56) \u662f Intel 21\u5e74\u6700\u65b0\u53d1\u5e03\u7684\u7b2c12\u4ee3CPU\u67b6\u6784,\u8fd9\u662f\u4e00\u4e2a\u5927\u5c0f\u6838\u6df7\u5408\u67b6\u6784\u3002\u5927\u5c0f\u6838\u5206\u522b\u88ab\u6210\u4e3aPcore\u548cEcore\u3002\u4ece\u540d\u5b57\u4e0a\u5c31\u80fd\u770b\u51fa\uff0c\u4e00\u4e2a\u8ffd\u6c42\u6027\u80fd\uff0c\u4e00\u4e2a\u8ffd\u6c42\u80fd\u6548\u6bd4\u3002\u731c\u6d4bIntel\u4f7f\u7528\u5927\u5c0f\u6838\u6df7\u5408\u7ed3\u6784\u662f\u4e3a\u4e86\u9002\u5e94\u66f4\u591a\u7684\u573a\u666f\uff0c\u4e0d\u4ec5\u4ec5\u662f\u684c\u9762\u5e02\u573a\uff0c\u5728\u79fb\u52a8\u5e02\u573a\uff0cIntel\u4e5f\u60f3\u6709\u66f4\u8fdb\u4e00\u6b65\u7684\u53d1\u5c55\u3002\u4e0d\u77e5\u9053\u4f7f\u7528\u4e86Alder Lake\u7684serface\u662f\u4e0d\u662f\u80fd\u591f\u9500\u91cf\u5927\u589e\u3002 \u65b0\u7684\u6df7\u5408\u67b6\u6784\u5728IO\u65b9\u9762\u8fd8\u652f\u6301PCIe Gen5\u548cDDR5 Performance core \u00b6 \u8ffd\u6c42\u901f\u5ea6\uff0c\u5f3a\u8c03\u4f4e\u5ef6\u8fdf\uff0c\u5355\u7ebf\u7a0b\u6027\u80fd\u3002\u96c6\u6210\u7684\u77e9\u9635\u5f15\u64ce\u80fd\u591f\u66f4\u597d\u7684\u5904\u7406AI\u573a\u666f\uff0csmart PM \u63a7\u5236\uff0c\u80fd\u591f\u66f4\u597d\u7684\u5bf9\u7535\u6e90\u8fdb\u884c\u63a7\u5236\u3002 \u5fae\u67b6\u6784\u540d\u4e3aGolden Cove Efficient core \u00b6 \u5f3a\u8c03\u541e\u5410\u91cf\uff0c\u5f3a\u8c03\u591a\u4efb\u52a1\u591a\u7ebf\u7a0b\u7684\u603b\u4f53\u6027\u80fd\u3002\u5fae\u67b6\u6784\u540d\u4e3aGracemont","title":"hotchip33"},{"location":"arch/hotchip33.html#hotchip33","text":"\u7b2c33\u5c4ahotchip\u5927\u4f1a\u603b\u7ed3","title":"hotchip33"},{"location":"arch/hotchip33.html#samsung-pim","text":"\u4ecb\u7ecd\u4e86\u4e09\u661f\u7684\u5b58\u5185\u8ba1\u7b97\u67b6\u6784\u3002\u8981\u7406\u89e3\u5b83\u7684\u67b6\u6784\uff0c\u5c31\u9700\u8981\u5148\u4e86\u89e3\u5b58\u5185\u8ba1\u7b97","title":"samsung PIM"},{"location":"arch/hotchip33.html#_1","text":"\u51af\u8bfa\u4f9d\u66fc\u7684\u67b6\u6784\u662f\u8ba1\u7b97\u64cd\u4f5c\u548c\u5185\u5b58\u64cd\u4f5c\u5206\u79bb\u7684\uff0c\u5c24\u5176\u662f\u73b0\u5728\u4e3b\u6d41\u7684RISC\u67b6\u6784\uff0c\u6709\u4e13\u95e8\u7684load/store\u6307\u4ee4\u8d1f\u8d23\u5185\u5b58\u64cd\u4f5c\uff0c\u5176\u4ed6\u6307\u4ee4\u8d1f\u8d23\u76f4\u63a5\u5bf9\u5bc4\u5b58\u5668\u8fdb\u884c\u8ba1\u7b97\u3002\u51af\u8bfa\u4f9d\u66fc\u67b6\u6784\u5728\u6784\u5efa\u4e4b\u521d\u662f\u5047\u8bbe\u5904\u7406\u5668\u548c\u5185\u5b58\u901f\u5ea6\u5f88\u63a5\u8fd1\uff0c\u4f46\u73b0\u5728\u8ba1\u7b97\u5355\u5143\u7684\u6027\u80fd\u968f\u7740\u6469\u5c14\u5b9a\u5f8b\u4e00\u8def\u98d9\u5347\uff0c\u800c\u5b58\u50a8\u5355\u5143\u76f8\u8f83\u800c\u8a00\u6027\u80fd\u63d0\u5347\u4e0d\u5927\uff0c\u56e0\u6b64\uff0cDRAM\u7684\u6027\u80fd\u5df2\u7ecf\u6210\u4e3a\u4e86\u6574\u4e2a\u7cfb\u7edf\u6027\u80fd\u7684\u91cd\u8981\u74f6\u9888\uff0c\u4e5f\u5c31\u662f\u6240\u8c13\u7684\u201c\u5185\u5b58\u5899\u201d\uff0c\u8fd9\u9650\u5236\u4e86\u5904\u7406\u5668\u7684\u8ba1\u7b97\u6027\u80fd\u548c\u80fd\u6548\u6bd4\u3002\u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u4e3aCPU\u4e0e\u5185\u5b58\u4e4b\u95f4\u7684\u8ddd\u79bb\u592a\u8fdc\u5bfc\u81f4\u4e86\u5185\u5b58\u5899\uff0c\u5c31\u50cf\u60c5\u4fa3\u5f02\u5730\u604b\u60c5\uff0c\u56e0\u4e3a\u4e3e\u4f8b\u9650\u5236\u4e86\u611f\u60c5\u7684\u53d1\u5c55\uff0c\u8981\u60f3\u611f\u60c5\u6709\u7a81\u7834\uff0c\u8981\u4e48\u7537\u7684\u53bb\u5973\u7684\u57ce\u5e02\uff0c\u8981\u4e48\u5973\u7684\u53bb\u7537\u7684\u57ce\u5e02\u3002\u5f88\u663e\u7136\uff0c\u5728AI\u8fd9\u79cd\u6570\u636e\u5bc6\u96c6\u7684\u573a\u666f\u4e2d\uff0c\u4f3c\u4e4e\u628a\u8ba1\u7b97\u642c\u5230\u79bb\u5b58\u50a8\u66f4\u8fd1\u7684\u5730\u65b9\u66f4\u80fd\u63d0\u9ad8\u6574\u4f53\u6027\u80fd\u548c\u80fd\u6548\u6bd4\u3002\u56e0\u6b64\u5c31\u6709\u4e86\u5b58\u5185\u8ba1\u7b97\u3002 \u5b58\u5185\u8ba1\u7b97(PIM processing-in-memory)\u53ef\u4ee5\u7a81\u7834\u5185\u5b58\u74f6\u9888\u3002\u5c3d\u7ba1\u6709\u5f88\u591a\u4e0d\u540c\u7684\u589e\u52a0\u5e26\u5bbd\u7684\u65b9\u6cd5\uff0c\u4f46\u7531\u4e8e\u53d7\u5230PCB\u5e03\u7ebf\uff0c\u529f\u8017\u53ca\u53d1\u70ed\u91cf\uff0cCPU\u63a5\u53e3\u6570\u91cf\u7b49\u7269\u7406\u4e0a\u7684\u9650\u5236\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5f88\u96be\u6709\u7a81\u7834\u6027\u7684\u63d0\u5347\u3002 PIM\u65e8\u5728\u63d0\u5347\u5e26\u5bbd\u5bc6\u96c6\u578bworkloads(\u76ee\u524d\u4e3b\u8981\u662fAI\u9886\u57df)\u7684\u6027\u80fd\uff0c\u901a\u8fc7\u51cf\u5c11\u5185\u5b58\u6570\u636e\u642c\u79fb\u6765\u63d0\u5347\u80fd\u91cf\u6548\u7387\u3002 \u5b58\u5185\u8ba1\u7b97\u7684\u672c\u8d28\u662f\u4f1a\u4f7f\u7528\u6a21\u62df\u8ba1\u7b97(\u5982\u679c\u4e0d\u662f\u4f7f\u7528\u6a21\u62df\u4fe1\u53f7,\u90a3\u4f3c\u4e4e\u548c\u51af\u8bfa\u4f9d\u66fc\u67b6\u6784\u4e5f\u6ca1\u4ec0\u4e48\u533a\u522b\u5427)\uff0c\u8fd9\u4e5f\u5c31\u610f\u5473\u7740\u5176\u76ee\u524d\u53ea\u80fd\u5e94\u7528\u5728AI\u5e02\u573a\u3002\u800c\u4e14\u5b58\u5185\u8ba1\u7b97\u6280\u672f\u60f3\u8981\u7a81\u7834\uff0c\u8981\u5728\u5b58\u50a8\u7ed3\u6784\u4e0a\u505a\u6539\u8fdb\uff0c\u4f7f\u5f97\u5b58\u50a8\u5355\u5143\u66f4\u9002\u5408\u505a\u8ba1\u7b97\u3002 \u5b58\u7b97\u4e00\u4f53\u76ee\u524d\u7cbe\u5ea6\u4e0d\u9ad8\uff0c\u5927\u6982\u57288bit, \u66f4\u9002\u5408\u7aef\u7684\u5d4c\u5165\u5f0fAI\u573a\u666f\u3002","title":"\u4ec0\u4e48\u662f\u5b58\u5185\u8ba1\u7b97"},{"location":"arch/hotchip33.html#aquabolt-xl","text":"\u4e00\u4e2a16\u8def\u7684FP16 SIMD\u6570\u7ec4\uff0c\u652f\u6301FP16\u4e58\u548c\u52a0 risc\u98ce\u683c\u768432bit\u6307\u4ee4\u96c6\uff0c\u4e00\u5171\u4e09\u79cd\u6307\u4ee4\u7c7b\u578b\u5171\u8ba19\u6761\u6307\u4ee4 \u6307\u4ee4\u53c2\u6570\u53ef\u4ee5\u662f GRF_A, GRF_B \u5411\u91cf\u5bc4\u5b58\u5668\uff0cSRF\u6807\u91cf\u5bc4\u5b58\u5668\u6216\u8005bank row buffer. \u4e09\u661f\u63d0\u4f9b\u4e86\u4e00\u6574\u5957\u7684software stack\u6765\u652f\u6301PIM.","title":"\u4e09\u661f\u7684Aquabolt-XL\u67b6\u6784"},{"location":"arch/hotchip33.html#graphcore-colossue-mk2-ipu","text":"\u4f17\u6838\u7684\u7fd8\u695a\uff0c\u76ee\u524dMk2 \u67091472\u4e2a\u6838\uff0c\u6bcf\u4e2a\u6838\u5e26\u6709624KiB\u7684sram, \u91c7\u7528TSMC\u76847nm\u5de5\u827a\uff0c\u8fbe\u5230\u4e86823mm 2 (\u8fd9\u4e48\u5927\u7684\u9762\u79ef\uff0cSRAM\u5360\u4e86\u4e00\u534a, \u903b\u8f91\u5355\u5143\u5360\u4e86\u00bc), \u4e3b\u98911.325GHz, \u7b97\u529b\u53ef\u8fbe250Tflop/s \u4ece\u4e0a\u56fe\u7684\u6027\u80fd\u7edf\u8ba1\u80fd\u591f\u770b\u51fa\uff0cgraphcore\u7684\u4f18\u52bf\u5728\u4e8efp32\u7684\u7b97\u529b\uff0c \u7531\u4e8eMk2\u5185\u90e8\u8fbe\u5230\u4e86897MiB\u7684SRAM, \u4f30\u8ba1\u529f\u8017\u8868\u73b0\u8981\u6bd4A100\u597d\u3002 \u6bcf\u4e2a\u6838\u88ab\u79f0\u4e3a\u4e00\u4e2aTile, \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e2aExchange.\u6587\u6863\u4e2d\u6ca1\u6709\u5bf9tile\u53caexchange\u505a\u8fc7\u591a\u7684\u4ecb\u7ecd\uff0c\u4e5f\u6ca1\u6cd5\u7b80\u5355\u7684\u901a\u8fc7\u6587\u6863\u83b7\u53d6\u4e00\u4e9b\u8bbe\u8ba1\u4fe1\u606f\u3002\u4f46\u6211\u4eec\u80fd\u591f\u770b\u51fatile\u4e0d\u662f\u4e00\u4e2a\u7b80\u5355\u768432bit\u7684\u5355\u53d1\u5c04\u6216\u53cc\u53d1\u5c04CPU\u3002 \u5b83\u67097\u4e2a\u7a0b\u5e8f\u4e0a\u4e0b\u6587\uff0c6\u4e2a\u8f6e\u8be2\u7684\u6d41\u6c34\u7ebfslot, \u6bcf\u4e2aslot\u6267\u884c\u2159\u4e2aclock. \u4e3b\u8981\u6709\u4e24\u4e2a\u5904\u7406\u5355\u5143\uff0c\u4e00\u4e2aMAIN, \u4e00\u4e2aAUX\uff0c main\u6709\u81ea\u5df1\u7684registerfile,\u540d\u4e3aMRF;AUX\u6709\u4e00\u4e2a\u540d\u4e3aARF\u7684registerfile\u3002\u6709\u4e00\u4e2a\u8d1f\u8d23\u8c03\u5ea6slot\u7684supervisor, supervisor\u901a\u8fc7\u6267\u884cRUN\u6307\u4ee4\u6765\u8c03\u5ea6\u8282\u70b9\uff0ccodelet\u6267\u884c\u5b8c\u6210\u540e\uff0c\u4ee5EXIT\u6307\u4ee4\u7ec8\u6b62\u3002\u8282\u70b9\u4ee5\u82af\u7247\u65f6\u949f\u7684\u2159\u6267\u884c\uff0c\u770b\u4e0d\u5230\u6d41\u6c34\u7ebf\u3002\u8bbf\u5b58\uff0c\u5206\u652f\uff0c\u6d6e\u70b9\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u6307\u4ee4\u90fd\u9700\u8981\u4e00\u4e2a\u5468\u671f\u6267\u884c\u5b8c\u6210\u3002\u8fd9\u6837\u7f16\u8bd1\u5668\u5c31\u80fd\u6bd4\u8f83\u8f7b\u677e\u7684\u9884\u6d4bcodelet\u6267\u884c\uff0c\u8fd9\u6837\u5c31\u80fd\u591f\u8f7b\u677e\u7684\u8bc4\u4f30\u8d1f\u8f7d\uff0c\u505a\u5230\u8d1f\u8f7d\u5747\u8861\u3002 \u5b83\u6709\u4e00\u4e2a\u5f3a\u5927\u7684\u6d6e\u70b9\u5355\u5143\uff0c \u5e76\u4e14\u652f\u6301\u4e00\u4e9b\u8d85\u8d8a\u51fd\u6570\u3002 \u4e0b\u9762\u662f\u5b83\u5728\u62c6\u5206kernel\u65f6\u7684\u7b56\u7565\uff0c \u53ef\u4ee5\u770b\u51fa\uff0c\u5b83\u8fd8\u662f\u62c6\u5206\u6210\u5f88\u5c0f\u7684\u77e9\u9635\u6765\u8fdb\u884c\u8fd0\u7b97\uff0c\u5e76\u4e14\u4e2d\u95f4\u7ed3\u679c\u91c7\u7528fp32\u8fdb\u884c\u7d2f\u52a0,\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u62c6\u5206\uff0c\u5355\u4ece\u4e0a\u9762\u7b80\u5355\u7684tile\u7ed3\u6784\u56fe\u4e0a\u8fd8\u5f88\u96be\u5206\u6790\u6e05\u695a\u3002 \u4e0b\u9762\u662f\u8fd0\u884cbert-l \u7f51\u7edc\u7684\u65f6\u5019\u7684\u6574\u4f53\u8fd0\u884c\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u6240\u6709tile\u90fd\u662f\u6309\u7167sync,exchange,compute\u8fd9\u4e09\u4e2a\u72b6\u6001\u8fdb\u884c\u5faa\u73af\uff0c\u800c\u4e14\u5de5\u5177\u94fe\u5bf9\u4e8e\u6574\u4e2a\u7f51\u7edc\u7684\u4f18\u5316\u505a\u7684\u5df2\u7ecf\u5f88\u597d\u4e86\uff0c\u8d1f\u8f7d\u6bd4\u8f83\u5747\u8861\u3002 graphcore\u7ed9\u51fa\u4e86\u4e0d\u7528HBM(\u5728\u5b58\u50a8\u5355\u5143\u4e0a\u548cDDR\u6ca1\u6709\u592a\u5927\u5dee\u5f02\uff0c\u4e3b\u8981\u662f\u5c06\u5185\u5b58\u548c\u4e3b\u82af\u7247\u5c01\u5728\u4e00\u4e2a\u82af\u7247\u91cc\u9762\uff0c\u8fd9\u6837\u5c31\u8de8\u8d8a\u4e86\u5c01\u88c5\u5bf9\u82af\u7247\u5f15\u811a\u6570\u76ee\u7684\u9650\u5236\uff0c\u5927\u5927\u7f29\u77ed\u4e86dram\u548c\u4e3b\u82af\u7247\u76f4\u63a5\u7684\u8ddd\u79bb\uff0c\u540c\u65f6\u91c7\u75283D\u5806\u53e0\u6280\u672f\uff0c\u76f4\u63a5\u901a\u8fc7TSV\u6253\u5b54\u7ad6\u76f4\u5806\u53e0\u5728\u4e00\u8d77\uff0c\u9ad8\u7aef\u7684DDR\u4e5f\u91c7\u53d6\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5f53\u7136\u8fd9\u79cd\u65b9\u5f0f\u5bf9\u6563\u70ed\u8981\u6c42\u66f4\u9ad8)\u7684\u7406\u7531 \u5185\u5b58\u5bb9\u91cf\u51b3\u5b9a\u4e86AI\u80fd\u505a\u54ea\u4e9b\u4e8b\u60c5\uff0c\u5e26\u5bbd\u53ea\u662f\u9650\u5236\u4e86\u6709\u591a\u5feb GPU\u548cTPU\u5c1d\u8bd5\u4f7f\u7528HBM\u540c\u65f6\u89e3\u51b3\u5e26\u5bbd\u548c\u5bb9\u91cf\u95ee\u9898 HBM\u975e\u5e38\u6602\u8d35\uff0c\u6709\u5bb9\u91cf\u9650\u5236\uff0c\u8981\u591a\u82b1100W\u7f8e\u5143\u4ee5\u4e0a IPU(graphcore\u79f0\u81ea\u5bb6\u4e3aIPU)\u4f7f\u7528SRAM\u6765\u89e3\u51b3\u5e26\u5bbd\u95ee\u9898\uff0c\u4f7f\u7528DDR\u6765\u89e3\u51b3\u5bb9\u91cf\u95ee\u9898 HBM\u7684\u4ef7\u683c\u5927\u6982\u662fDDR4\u768410\u500d($/GB), 40GB\u7684HBM\u4ef7\u683c\u5927\u6982\u662f\u4e00\u4e2areticle-sized\u5904\u7406\u5668\u5c01\u88c5\u76843\u500d\uff0cIPU\u8fd9\u79cd\u57fa\u4e8eDDR\u7684\u7cfb\u7edf\u53ef\u4ee5\u628a\u7701\u4e0b\u6765\u7684\u94b1\u7528\u4e8e\u751f\u4ea7\u66f4\u591a\u7684\u5904\u7406\u5668 \u5728DRAM\u4e2d\u7684\u6743\u91cd\u548cfeature\u6570\u636e\u5982\u4f55\u4e0eSRAM\u8fdb\u884c\u914d\u5408\uff0c\u9ad8\u6548\u7684\u8fdb\u884c\u8fd0\u7b97\u5462\uff1f \u731c\u60f3\u5bf9\u4e8e\u8f83\u5c0f\u7684\u6a21\u578b\uff0c\u5982\u679c\u6240\u6709\u6743\u91cd\u80fd\u591f\u5728sram\u4e2d\u653e\u4e0b\uff0c\u5e76\u4e14\u4fdd\u6301\u4e00\u5b9a\u7684\u8d1f\u8f7d\u5747\u8861\uff0c\u90a3\u4e48\u663e\u7136\u8fd9\u662f\u6700\u5feb\u7684\u65b9\u5f0f\u3002\u5bf9\u4e8e\u5927\u578b\u7684\u6a21\u578b\uff0c\u5e94\u8be5\u8fd8\u662f\u4f1a\u5b58\u5728DRAM\u4e0eSRAM\u4ea4\u4e92\u7684\u60c5\u51b5\u3002\u5f53\u7136\uff0c\u8fd9\u5bf9\u4e8e\u5de5\u5177\u94fe\u662f\u4e00\u4e2a\u6311\u6218\u3002 \u5982\u6b64\u5de8\u5927\u7684\u82af\u7247\uff0c\u4e00\u5b9a\u6709\u5f88\u591a\u65b9\u6cd5\u6765\u63a7\u5236\u5173\u95ed\u6389\u574f\u6389\u7684\u90e8\u5206\u3002 \u9664\u6b64\u4e4b\u5916\uff0c","title":"graphcore colossue Mk2 IPU"},{"location":"arch/hotchip33.html#arm-neoverse","text":"\u4ecb\u7ecd\u4e86ARM\u7b2c\u4e8c\u4ee3\u9ad8\u6027\u80fd\u57fa\u7840\u67b6\u6784CPU\u548c\u7cfb\u7edfIP\u30022018\u5e74arm\u63a8\u51fa\u4e86Neoverse\u5904\u7406\u5668\u5e73\u53f0,\u65e8\u5728\u9488\u5bf9\u6570\u636e\u4e2d\u5fc3\u5904\u7406\u5668\u5e02\u573a\uff0c2019\u5e74\u641e\u5b9a\u4e86N1\u7248\u672c\uff0c20\u5e74\u53c8\u53d1\u5e03\u4e86N2\u7248\u672c\u3002 neoverse\u5206\u4e3a\u4e09\u5927\u7cfb\u5217: V-serise \u4e3b\u6253\u9ad8\u6027\u80fd\uff0c\u652f\u6301SVE 2x256b\uff0c 32-128 cores, 80-350W\uff0c ARMv9 N-serise \u6027\u80fd\uff0c\u529f\u8017\uff0c\u9762\u79ef\u5747\u8861\uff0c 12-36 cores, 30-80W, A72 E-serise \u5f3a\u8c03\u80fd\u6548\uff0c\u529f\u8017\u548c\u9762\u79ef, 4-16 cores, 20-35W, A53","title":"ARM neoverse"},{"location":"arch/hotchip33.html#intel-alder-lake","text":"Alder Lake(\u7f8e\u56fd\u534e\u76db\u987f\u7684\u4e00\u4e2a\u540d\u4e3a\u5965\u5c14\u5fb7\u7684\u6e56, \u4e0d\u7981\u8ba9\u4eba\u60f3\u5230\u4e86\u4e2d\u79d1\u9662\u7684\u96c1\u6816\u6e56) \u662f Intel 21\u5e74\u6700\u65b0\u53d1\u5e03\u7684\u7b2c12\u4ee3CPU\u67b6\u6784,\u8fd9\u662f\u4e00\u4e2a\u5927\u5c0f\u6838\u6df7\u5408\u67b6\u6784\u3002\u5927\u5c0f\u6838\u5206\u522b\u88ab\u6210\u4e3aPcore\u548cEcore\u3002\u4ece\u540d\u5b57\u4e0a\u5c31\u80fd\u770b\u51fa\uff0c\u4e00\u4e2a\u8ffd\u6c42\u6027\u80fd\uff0c\u4e00\u4e2a\u8ffd\u6c42\u80fd\u6548\u6bd4\u3002\u731c\u6d4bIntel\u4f7f\u7528\u5927\u5c0f\u6838\u6df7\u5408\u7ed3\u6784\u662f\u4e3a\u4e86\u9002\u5e94\u66f4\u591a\u7684\u573a\u666f\uff0c\u4e0d\u4ec5\u4ec5\u662f\u684c\u9762\u5e02\u573a\uff0c\u5728\u79fb\u52a8\u5e02\u573a\uff0cIntel\u4e5f\u60f3\u6709\u66f4\u8fdb\u4e00\u6b65\u7684\u53d1\u5c55\u3002\u4e0d\u77e5\u9053\u4f7f\u7528\u4e86Alder Lake\u7684serface\u662f\u4e0d\u662f\u80fd\u591f\u9500\u91cf\u5927\u589e\u3002 \u65b0\u7684\u6df7\u5408\u67b6\u6784\u5728IO\u65b9\u9762\u8fd8\u652f\u6301PCIe Gen5\u548cDDR5","title":"Intel Alder Lake"},{"location":"arch/hotchip33.html#performance-core","text":"\u8ffd\u6c42\u901f\u5ea6\uff0c\u5f3a\u8c03\u4f4e\u5ef6\u8fdf\uff0c\u5355\u7ebf\u7a0b\u6027\u80fd\u3002\u96c6\u6210\u7684\u77e9\u9635\u5f15\u64ce\u80fd\u591f\u66f4\u597d\u7684\u5904\u7406AI\u573a\u666f\uff0csmart PM \u63a7\u5236\uff0c\u80fd\u591f\u66f4\u597d\u7684\u5bf9\u7535\u6e90\u8fdb\u884c\u63a7\u5236\u3002 \u5fae\u67b6\u6784\u540d\u4e3aGolden Cove","title":"Performance core"},{"location":"arch/hotchip33.html#efficient-core","text":"\u5f3a\u8c03\u541e\u5410\u91cf\uff0c\u5f3a\u8c03\u591a\u4efb\u52a1\u591a\u7ebf\u7a0b\u7684\u603b\u4f53\u6027\u80fd\u3002\u5fae\u67b6\u6784\u540d\u4e3aGracemont","title":"Efficient core"},{"location":"arch/numa.html","text":"numa\u67b6\u6784 \u00b6","title":"numa\u67b6\u6784"},{"location":"arch/numa.html#numa","text":"","title":"numa\u67b6\u6784"},{"location":"arch/register_rename.html","text":"\u4e71\u5e8fCPU\u7684\u5bc4\u5b58\u5668\u91cd\u547d\u540d(Register Renaming)\u673a\u5236 \u00b6 \u5728\u4e71\u5e8fCPU\u4e2d\uff0c\u5bc4\u5b58\u5668\u91cd\u547d\u540d\u662f\u975e\u5e38\u91cd\u8981\u7684\u4e00\u4e2a\u673a\u5236\uff0c\u5b83\u5728CPU\u4e71\u5e8f\u6267\u884c\u65f6\uff0c\u4e3b\u8981\u6709\u4e24\u4e2a\u4f5c\u7528 \u6d88\u9664\u6307\u4ee4\u4e4b\u95f4\u7684\u53cd\u5411\u4f9d\u8d56\u95ee\u9898\uff08\u8bfb\u540e\u5199\u4f9d\u8d56\uff08WAR\uff09\u548c\u5199\u540e\u5199\u4f9d\u8d56\uff08WAW\uff09\uff09 \u5f53\u6307\u4ee4\u6267\u884c\u53d1\u751f\u5f02\u5e38\u6216\u5206\u652f\u9884\u6d4b\u9519\u8bef\u800c\u53d6\u6d88\u540e\u9762\u7684\u6307\u4ee4\u65f6\u53ef\u4ee5\u4fdd\u8bc1\u73b0\u573a\u8fd8\u539f\u7684\u51c6\u786e \u5b9e\u73b0\u601d\u8def\u5c31\u662f\u6267\u884c\u6307\u4ee4\u65f6\u4e0d\u76f4\u63a5\u64cd\u4f5c\u67b6\u6784\u5bc4\u5b58\u5668\uff0c\u800c\u662f\u5148\u64cd\u4f5c\u4e00\u4e2a\u4e0e\u67b6\u6784\u5bc4\u5b58\u5668\u6709\u6620\u5c04\u5173\u7cfb\u7684\u4e2d\u95f4\u5bc4\u5b58\u5668\uff0c\u5f53\u8fd9\u6761\u6307\u4ee4\u63d0\u4ea4\u7684\u65f6\u5019\u518d\u5199\u5230\u67b6\u6784\u5bc4\u5b58\u5668\u4e2d\u3002 \u5f53\u7136\uff0c\u8fd9\u4e2a\u601d\u8def\u7684\u63cf\u8ff0\u4e0d\u4e00\u5b9a\u51c6\u786e\uff0c\u56e0\u4e3a\u968f\u7740\u4e71\u5e8fCPU\u7684\u53d1\u5c55\uff0cRegister Renaming\u7684\u5b9e\u73b0\u65b9\u5f0f\u4e5f\u5728\u53d1\u5c55\u3002 \u4e0d\u540c\u7684CPU\uff0c\u5176\u5185\u90e8\u7684Register Renaming\u5b9e\u73b0\u53ef\u80fd\u4f1a\u5b58\u5728\u5dee\u5f02\uff0c\u6709\u7684\u7269\u7406\u5bc4\u5b58\u5668\u548c\u6307\u4ee4\u96c6\u5bc4\u5b58\u5668\u662f\u72ec\u7acb\u7684\uff0c\u6709\u7684\u662f\u5408\u5e76\u6210\u4e00\u4e2a\u5bc4\u5b58\u5668\u5806\u3002\u8fd8\u6709\u4e00\u4e9b\u5206\u7c7b\u4e2d \u5206\u4e3a\u663e\u5f0f\u91cd\u547d\u540d\u673a\u5236\u548c\u9690\u5f0f\u91cd\u547d\u540d\u673a\u5236\u3002\u8fd9\u4e9b\u9700\u8981\u6211\u4eec\u5177\u4f53\u7684CPU\u67b6\u6784\u5177\u4f53\u5206\u6790\u3002 \u603b\u7ed3\u4e00\u4e0b\uff0c\u5c31\u662f\u5728\u4e0d\u589e\u52a0\u6307\u4ee4\u96c6\u5bc4\u5b58\u5668\u7684\u524d\u63d0\u4e0b\uff08\u53ef\u4ee5\u7406\u89e3\u4e3a\u8f6f\u4ef6\u65e0\u611f\uff09\uff0c\u7528\u66f4\u591a\u7684\u5bc4\u5b58\u5668\u6765\u89e3\u51b3\u4e71\u5e8f\u6267\u884c\u65f6\u7684\u5bc4\u5b58\u5668\u53cd\u5411\u4f9d\u8d56\u95ee\u9898\u3002 \u5de5\u4f5c\u539f\u7406 \u00b6 \u7269\u7406\u5bc4\u5b58\u5668\u4e0eISA\u5bc4\u5b58\u5668 \u00b6 \u8981\u533a\u5206\u7269\u7406\u5bc4\u5b58\u5668\u548c\u903b\u8f91\u5bc4\u5b58\u5668\uff0c\u903b\u8f91\u5bc4\u5b58\u5668\u53c8\u53ef\u4ee5\u79f0\u4e3aISA\u5bc4\u5b58\u5668\u3002ISA\u5bc4\u5b58\u5668\u662f\u5bf9\u7a0b\u5e8f\u5458\u53ef\u89c1\u7684\uff0c \u4f46\u7269\u7406\u5bc4\u5b58\u5668\u662f\u4e0d\u53ef\u89c1\u7684\uff0c\u5b83\u662f\u903b\u8f91\u5bc4\u5b58\u5668\u7684\u4e00\u79cd\u5177\u4f53\u5b9e\u73b0\u3002 \u53cd\u5411\u4f9d\u8d56 \u00b6 WAR\u53cd\u5411\u4f9d\u8d56 \u00b6 \u5047\u5982\u6211\u4eec\u6709\u5982\u4e0b\u4ee3\u7801 lw x2 , 0 ( x1 ) ; add x3 , x2 , x4 ; sub x2 , x4 , x5 ; \u5982\u679c\u4e71\u5e8fCPU\u6ca1\u6709\u5bc4\u5b58\u5668\u91cd\u547d\u540d\u673a\u5236\uff0c\u90a3\u4e48\u5f53lw\u53d1\u751fcache\u672a\u547d\u4e2d\u65f6\uff0cadd\u6307\u4ee4\u4f1a\u56e0\u4e3ax2\u5bc4\u5b58\u5668\u88ab\u9501\u4f4f\u800c\u65e0\u6cd5\u6267\u884c\uff0c\u6b64\u65f6\uff0csub\u6307\u4ee4\u56e0\u4e3ax4\u548cx5\u5df2\u7ecf\u51c6\u5907\u597d\uff0c\u6240\u4ee5\u53ef\u4ee5\u6267\u884c\uff0c\u4f46sub\u6307\u4ee4\u4e00\u65e6\u6267\u884c\u5b8c\u6210\u4e4b\u540e\uff0c\u5c31\u4f1a\u6539\u5199x2\u5bc4\u5b58\u5668\uff0c\u540e\u7eed\u518d\u6267\u884cadd\u6307\u4ee4\u65f6\uff0c\u5c31\u4f1a\u56e0\u4e3a\u4e71\u5e8f\u6267\u884c\u5bfc\u81f4\u7ed3\u679cx3\u9519\u8bef\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u8fd9\u5c31\u662f\u6240\u8c13\u7684WAR\u53cd\u76f8\u5173\u3002 WAW\u53cd\u5411\u4f9d\u8d56 \u00b6 lw x3 , 0 ( x1 ) ; add x2 , x3 , x4 ; mul x2 , x6 , x4 ; \u5982\u679c\u4e71\u5e8fCPU\u6ca1\u6709\u5bc4\u5b58\u5668\u91cd\u547d\u540d\u673a\u5236\uff0c\u90a3\u4e48\u5f53lw\u53d1\u751fcache\u672a\u547d\u4e2d\u65f6\uff0cadd\u6307\u4ee4\u4f1a\u56e0\u4e3ax3\u5bc4\u5b58\u5668\u88ab\u9501\u4f4f\u800c\u65e0\u6cd5\u6267\u884c\uff0c\u6b64\u65f6\uff0cmul\u6307\u4ee4\u56e0\u4e3ax6\u548cx4\u5df2\u7ecf\u51c6\u5907\u597d\uff0c\u6240\u4ee5\u53ef\u4ee5\u6267\u884c\uff0c\u4f46mul\u6307\u4ee4\u548cadd\u6307\u4ee4\u6267\u884c\u5b8c\u6210\u540e\u90fd\u4f1a\u6539\u5199x2\u5bc4\u5b58\u5668\uff0c\u5982\u679cmul\u5148\u6267\u884c\u5b8c\u6210\uff0cadd\u540e\u6267\u884c\u5b8c\u6210\uff0c\u90a3\u4e48x2\u5bc4\u5b58\u5668\u5c31\u4e0d\u518d\u65f6mul\u7684\u7ed3\u679c\uff0c\u800c\u662fadd\u7684\u7ed3\u679c\u3002\u7a0b\u5e8f\u5c31\u4f1a\u56e0\u6b64\u51fa\u9519\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684WAW\u53cd\u5411\u4f9d\u8d56\u3002 \u91cd\u547d\u540d\u8fc7\u7a0b \u00b6 \u8fd9\u91cc\u6309\u7167\u4e00\u4e2a\u5e38\u7528\u7684\u5904\u7406\u673a\u5236\u6765\u5206\u6790\uff0c\u5904\u7406\u903b\u8f91\u5982\u4e0b\uff1a \u5c06\u6bcf\u6761\u6307\u4ee4\u7684\u6e90ISA\u5bc4\u5b58\u5668\u6620\u5c04\u4e3a\u8be5ISA\u5bc4\u5b58\u5668\u6700\u8fd1\u6620\u5c04\u5230\u7684\u90a3\u4e2a\u7269\u7406\u5bc4\u5b58\u5668 \u5c06\u6bcf\u6761\u6307\u4ee4\u7684\u76ee\u7684ISA\u5bc4\u5b58\u5668\u6620\u5c04\u5230\u65b0\u7684\u7269\u7406\u5bc4\u5b58\u5668 \u800c\u4e14\u8981\u4fdd\u8bc1\u7b2c\u4e00\u6b65\u8981\u5148\u6267\u884c\uff0c\u4e0d\u7136\u5982\u679c\u9047\u5230\u6e90\u5bc4\u5b58\u5668\u548c\u76ee\u7684\u5bc4\u5b58\u5668\u662f\u540c\u4e00\u4e2a\u7684\u60c5\u51b5\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u9519\u8bef\u3002 \u6267\u884c\u5982\u4e0b\u6307\u4ee4\u6d41\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7ecf\u8fc7\u5bc4\u5b58\u5668\u91cd\u547d\u540d\uff0cadd\u6307\u4ee4\u548csub\u6307\u4ee4\u5df2\u7ecf\u4e0d\u5b58\u5728\u4f9d\u8d56\u5173\u7cfb\uff0c \u6d88\u9664\u4e86WAR\u53cd\u5411\u4f9d\u8d56\u3002 x2 ----> R2 x3 ----> R3 x4 ----> R4 x5 ----> R5 x6 ----> R6 |x1|x2|x3|x4|x5|x6| ------------------------------ \u91cd\u547d\u540d\u524d |R1|R2|R3|R4|R5|R6| \u91cd\u547d\u540d\u540e 1. lw x2, 0(x1) | |R7| | | | | lw R7, 0(R1) \u6570\u636e\u76f8\u5173 | | | | | | | \u6570\u636e\u76f8\u5173 2. add x3, x2, x4 | | |R8| | | | add R8, R7, R4 \u53cd\u5411\u4f9d\u8d56 | | | | | | | \u4e0d\u76f8\u5173 3. sub x2, x4, x5 | |R9| | | | | sub R9, R4, R5 \u6570\u636e\u76f8\u5173 | | | | | | | \u6570\u636e\u76f8\u5173 4. mul x6, x2, x4 | | | | | |R10| mul R10, R9, R4 \u56e0\u6b64sub\u6307\u4ee4\u53ef\u4ee5\u5728lw\u548cadd\u7b49\u5f85\u8d44\u6e90\u7684\u60c5\u51b5\u4e0b\u5148\u6267\u884c\u5b8c\u6210\u3002 \u95ee\u9898\u5728\u4e8e\u7269\u7406\u5bc4\u5b58\u5668\u7684\u91ca\u653e\u65f6\u673a\uff0c\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5728mul\u6307\u4ee4rename\u7684\u65f6\u5019\uff0cR7\u53ef\u7528\u5417\uff1f \u5bc4\u5b58\u5668\u7684\u91ca\u653e\u95ee\u9898 \u00b6 \u5982\u4e0a\u56fe\uff0c\u53ef\u4ee5\u7528\u4f5crename\u7684\u5bc4\u5b58\u5668\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2afreelist\u7d22\u5f15\u5230\uff0c rename\u7684\u65f6\u5019\uff0crename\u5173\u7cfb\u5b58\u653e\u5728Map table\u4e2d\uff0c \u6309\u7167\u4e0a\u9762\u63cf\u8ff0\u7684\u5bc4\u5b58\u5668\u91cd\u547d\u540d\u539f\u7406\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u80fd\u591f\u7406\u6e05\u4e0a\u9762\u56fe\u4e2d\u63cf\u8ff0\u7684\u8fc7\u7a0b\uff0c\u4f46\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u7269\u7406\u5bc4\u5b58\u5668\u4e0d\u662f\u65e0\u9650\u7684\uff0c\u52bf\u5fc5\u8981\u6709\u4e00\u4e2a\u56de\u6536\u7684\u673a\u5236\uff0c\u5fc5\u7136\u662f\u5728\u6307\u4ee4commit\u65f6\u624d\u6709\u53ef\u80fd\u56de\u6536\u8fd9\u4e9b\u7528\u8fc7\u7684\u5bc4\u5b58\u5668\uff0c\u90a3\u4e48\u5728\u56de\u6536\u7684\u65f6\u5019\uff0c\u5fc5\u987b\u8981\u4fdd\u8bc1\u6574\u4e2aCPU\u7684flow\u4e2d\u6ca1\u6709\u5bf9\u8fd9\u4e2a\u5bc4\u5b58\u5668\u7684\u5f15\u7528\u3002 \u5982\u4f55\u6765\u4fdd\u8bc1\u5462\uff1f\u5047\u8bbe\u5728\u4e00\u6761\u6307\u4ee4\u63d0\u4ea4\u4e4b\u540e\u5c31\u56de\u6536\u8be5\u5bc4\u5b58\u5668\uff0c\u90a3\u4e48\u663e\u7136\u53ef\u80fd\u4f1a\u5f15\u5165\u9519\u8bef\u7684WAR\u96be\u9053\u6211\u4eec\u8981\u53bb\u8bb0\u5f55\u8c01\u5f15\u7528\u4e86rename\u4e4b\u540e\u7684\u5bc4\u5b58\u5668\u5417\uff1f\u600e\u4e48\u624d\u80fd\u8bb0\u5f55\u5462\uff1f\u5b9e\u9645\u4e0a\uff0c\u8bbe\u8ba1\u8005\u91c7\u7528\u4e86\u4e00\u4e2a\u975e\u5e38\u5de7\u5999\u7684\u505a\u6cd5\uff0c\u4f7f\u7528\u5f88\u7b80\u5355\u7684\u65b9\u5f0f\u5c31\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002 \u6211\u4eec\u770b\u4e0b\u9762\u7684\u6d4b\u8bd5\u7a0b\u5e8f OP1 r1 , r1 , r3 OP2 r5 , r5 , r1 OP3 r2 , r1 , r2 OP4 r1 , r1 , r4 OP5 r6 , r1 , r3 OP6 r7 , r4 , r1 OP7 r1 , r8 , r9 \u6211\u4eec\u5c1d\u8bd5\u53bbrename\u8fd9\u6bb5\u4ee3\u7801\uff1a OP1 r16 , r1 , r3 # r1 -> r16 OP2 r17 , r5 , r16 # r5 -> r17 OP3 r18 , r16 , r2 # r2 -> r18 OP4 r19 , r16 , r4 # r1 -> r19 OP5 r20 , r19 , r3 # r6 -> r20 OP6 r21 , r4 , r19 # r7 -> r21 OP7 r ??? , r8 , r9 # r1 -> r??? \u6211\u4eec\u770br1\u7684rename\u94fe\uff0c r1 -> r16 -> r19 -> r???, \u5047\u5982\u73b0\u5728commit\u5230\u4e86OP4\u3002\u6700\u540e\u4e00\u6761\u6307\u4ee4OP7\u5728rename\u65f6\u80fd\u4e0d\u80fd\u4f7f\u7528r19?\u80fd\u4e0d\u80fd\u4f7f\u7528r16? \u5f88\u663e\u7136\uff0c\u5047\u5982\u4f7f\u7528r19, \u56e0\u4e3a\u4e71\u5e8f\u6267\u884c\uff0c\u90a3\u4e48\u6709\u53ef\u80fdOP7\u8981\u6bd4OP5\u548cOP6\u5148\u6267\u884c\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bfc\u81f4OP5\u548cOP6\u7684\u8ba1\u7b97\u7ed3\u679c\u51fa\u9519\u3002\u56e0\u6b64\u4e0d\u80fd\u4f7f\u7528r19\uff0c \u90a3\u4e48\u80fd\u4e0d\u80fd\u4f7f\u7528r16\u5462\uff1f\u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3aOP4\u7684\u63d0\u4ea4\uff0c\u610f\u5473\u7740\u6240\u6709\u5bf9r16\u7684\u5f15\u7528\u80af\u5b9a\u662f\u7ed3\u675f\u4e86(\u5c5e\u4e8e\u5145\u5206\u4e0d\u5fc5\u8981\u6761\u4ef6)\uff0c\u56e0\u4e3a\u540e\u9762\u90fd\u6539\u59d3r19\u4e86\u3002\u6240\u4ee5\u6309\u7167\u8fd9\u79cd\u65b9\u5f0f\u53bb\u91ca\u653e\u5bc4\u5b58\u5668\uff0c\u80af\u5b9a\u662f\u7b80\u5355(\u4e0d\u7528\u53bb\u8003\u8651\u54ea\u6761\u6307\u4ee4\u5f15\u7528\u4e86\u8fd9\u4e2a\u5bc4\u5b58\u5668\u7684\u95ee\u9898)\u53c8\u80fd\u4fdd\u8bc1\u6b63\u786e\uff0c\u8fd8\u4e0d\u81f3\u4e8e\u8fc7\u5ea6\u6d6a\u8d39\u3002 \u6211\u4eec\u770bgem5\u4e2dO3CPU\u7684\u5b9e\u73b0\uff0c\u8fd9\u4e5f\u662falpha21264CPU\u7684\u5b9e\u73b0\u3002\u5728rename\u7684\u65f6\u5019\uff0c\u4e0d\u5355\u8bb0\u5f55\u4e86\u5f53\u524darch\u5bc4\u5b58\u5668\u88abrename\u7684\u7269\u7406\u5bc4\u5b58\u5668\uff0c\u8fd8\u8bb0\u5f55\u4e86\u4e0a\u4e00\u6b21\u88abrename\u7684\u7269\u7406\u5bc4\u5b58\u5668\u3002\u5728\u6307\u4ee4\u63d0\u4ea4\u65f6\uff0c\u8c03\u7528removeFromHistory\u51fd\u6570\uff0c\u8fd9\u65f6\u5019\u91ca\u653e\u7684\u662f\u8bb0\u5f55\u7684\u4e0a\u4e00\u6b21rename\u7684\u7269\u7406\u5bc4\u5b58\u5668(prevPhysReg)\u3002 SimpleRenameMap :: RenameInfo SimpleRenameMap::rename ( const RegId & arch_reg ) { PhysRegIdPtr renamed_reg ; // Record the current physical register that is renamed to the // requested architected register. PhysRegIdPtr prev_reg = map [ arch_reg . flatIndex ()]; renamed_reg = freeList -> getReg (); map [ arch_reg . flatIndex ()] = renamed_reg ; return RenameInfo ( renamed_reg , prev_reg ); } template < class Impl > void DefaultRename < Impl >:: removeFromHistory ( InstSeqNum inst_seq_num , ThreadID tid ) { // Commit all the renames up until (and including) the committed sequence // number. Some or even all of the committed instructions may not have // rename histories if they did not have destination registers that were // renamed. while ( ! historyBuffer [ tid ]. empty () && hb_it != historyBuffer [ tid ]. end () && hb_it -> instSeqNum <= inst_seq_num ) { // Don't free special phys regs like misc and zero regs, which // can be recognized because the new mapping is the same as // the old one. if ( hb_it -> newPhysReg != hb_it -> prevPhysReg ) { freeList -> addReg ( hb_it -> prevPhysReg ); } } } gem5 O3 CPU\u7684\u91cd\u547d\u540d\u673a\u5236 \u00b6 \u53c2\u8003gem5\u7ae0\u8282","title":"\u4e71\u5e8fCPU\u7684\u5bc4\u5b58\u5668\u91cd\u547d\u540d(Register Renaming)\u673a\u5236"},{"location":"arch/register_rename.html#cpuregister-renaming","text":"\u5728\u4e71\u5e8fCPU\u4e2d\uff0c\u5bc4\u5b58\u5668\u91cd\u547d\u540d\u662f\u975e\u5e38\u91cd\u8981\u7684\u4e00\u4e2a\u673a\u5236\uff0c\u5b83\u5728CPU\u4e71\u5e8f\u6267\u884c\u65f6\uff0c\u4e3b\u8981\u6709\u4e24\u4e2a\u4f5c\u7528 \u6d88\u9664\u6307\u4ee4\u4e4b\u95f4\u7684\u53cd\u5411\u4f9d\u8d56\u95ee\u9898\uff08\u8bfb\u540e\u5199\u4f9d\u8d56\uff08WAR\uff09\u548c\u5199\u540e\u5199\u4f9d\u8d56\uff08WAW\uff09\uff09 \u5f53\u6307\u4ee4\u6267\u884c\u53d1\u751f\u5f02\u5e38\u6216\u5206\u652f\u9884\u6d4b\u9519\u8bef\u800c\u53d6\u6d88\u540e\u9762\u7684\u6307\u4ee4\u65f6\u53ef\u4ee5\u4fdd\u8bc1\u73b0\u573a\u8fd8\u539f\u7684\u51c6\u786e \u5b9e\u73b0\u601d\u8def\u5c31\u662f\u6267\u884c\u6307\u4ee4\u65f6\u4e0d\u76f4\u63a5\u64cd\u4f5c\u67b6\u6784\u5bc4\u5b58\u5668\uff0c\u800c\u662f\u5148\u64cd\u4f5c\u4e00\u4e2a\u4e0e\u67b6\u6784\u5bc4\u5b58\u5668\u6709\u6620\u5c04\u5173\u7cfb\u7684\u4e2d\u95f4\u5bc4\u5b58\u5668\uff0c\u5f53\u8fd9\u6761\u6307\u4ee4\u63d0\u4ea4\u7684\u65f6\u5019\u518d\u5199\u5230\u67b6\u6784\u5bc4\u5b58\u5668\u4e2d\u3002 \u5f53\u7136\uff0c\u8fd9\u4e2a\u601d\u8def\u7684\u63cf\u8ff0\u4e0d\u4e00\u5b9a\u51c6\u786e\uff0c\u56e0\u4e3a\u968f\u7740\u4e71\u5e8fCPU\u7684\u53d1\u5c55\uff0cRegister Renaming\u7684\u5b9e\u73b0\u65b9\u5f0f\u4e5f\u5728\u53d1\u5c55\u3002 \u4e0d\u540c\u7684CPU\uff0c\u5176\u5185\u90e8\u7684Register Renaming\u5b9e\u73b0\u53ef\u80fd\u4f1a\u5b58\u5728\u5dee\u5f02\uff0c\u6709\u7684\u7269\u7406\u5bc4\u5b58\u5668\u548c\u6307\u4ee4\u96c6\u5bc4\u5b58\u5668\u662f\u72ec\u7acb\u7684\uff0c\u6709\u7684\u662f\u5408\u5e76\u6210\u4e00\u4e2a\u5bc4\u5b58\u5668\u5806\u3002\u8fd8\u6709\u4e00\u4e9b\u5206\u7c7b\u4e2d \u5206\u4e3a\u663e\u5f0f\u91cd\u547d\u540d\u673a\u5236\u548c\u9690\u5f0f\u91cd\u547d\u540d\u673a\u5236\u3002\u8fd9\u4e9b\u9700\u8981\u6211\u4eec\u5177\u4f53\u7684CPU\u67b6\u6784\u5177\u4f53\u5206\u6790\u3002 \u603b\u7ed3\u4e00\u4e0b\uff0c\u5c31\u662f\u5728\u4e0d\u589e\u52a0\u6307\u4ee4\u96c6\u5bc4\u5b58\u5668\u7684\u524d\u63d0\u4e0b\uff08\u53ef\u4ee5\u7406\u89e3\u4e3a\u8f6f\u4ef6\u65e0\u611f\uff09\uff0c\u7528\u66f4\u591a\u7684\u5bc4\u5b58\u5668\u6765\u89e3\u51b3\u4e71\u5e8f\u6267\u884c\u65f6\u7684\u5bc4\u5b58\u5668\u53cd\u5411\u4f9d\u8d56\u95ee\u9898\u3002","title":"\u4e71\u5e8fCPU\u7684\u5bc4\u5b58\u5668\u91cd\u547d\u540d(Register Renaming)\u673a\u5236"},{"location":"arch/register_rename.html#_1","text":"","title":"\u5de5\u4f5c\u539f\u7406"},{"location":"arch/register_rename.html#isa","text":"\u8981\u533a\u5206\u7269\u7406\u5bc4\u5b58\u5668\u548c\u903b\u8f91\u5bc4\u5b58\u5668\uff0c\u903b\u8f91\u5bc4\u5b58\u5668\u53c8\u53ef\u4ee5\u79f0\u4e3aISA\u5bc4\u5b58\u5668\u3002ISA\u5bc4\u5b58\u5668\u662f\u5bf9\u7a0b\u5e8f\u5458\u53ef\u89c1\u7684\uff0c \u4f46\u7269\u7406\u5bc4\u5b58\u5668\u662f\u4e0d\u53ef\u89c1\u7684\uff0c\u5b83\u662f\u903b\u8f91\u5bc4\u5b58\u5668\u7684\u4e00\u79cd\u5177\u4f53\u5b9e\u73b0\u3002","title":"\u7269\u7406\u5bc4\u5b58\u5668\u4e0eISA\u5bc4\u5b58\u5668"},{"location":"arch/register_rename.html#_2","text":"","title":"\u53cd\u5411\u4f9d\u8d56"},{"location":"arch/register_rename.html#war","text":"\u5047\u5982\u6211\u4eec\u6709\u5982\u4e0b\u4ee3\u7801 lw x2 , 0 ( x1 ) ; add x3 , x2 , x4 ; sub x2 , x4 , x5 ; \u5982\u679c\u4e71\u5e8fCPU\u6ca1\u6709\u5bc4\u5b58\u5668\u91cd\u547d\u540d\u673a\u5236\uff0c\u90a3\u4e48\u5f53lw\u53d1\u751fcache\u672a\u547d\u4e2d\u65f6\uff0cadd\u6307\u4ee4\u4f1a\u56e0\u4e3ax2\u5bc4\u5b58\u5668\u88ab\u9501\u4f4f\u800c\u65e0\u6cd5\u6267\u884c\uff0c\u6b64\u65f6\uff0csub\u6307\u4ee4\u56e0\u4e3ax4\u548cx5\u5df2\u7ecf\u51c6\u5907\u597d\uff0c\u6240\u4ee5\u53ef\u4ee5\u6267\u884c\uff0c\u4f46sub\u6307\u4ee4\u4e00\u65e6\u6267\u884c\u5b8c\u6210\u4e4b\u540e\uff0c\u5c31\u4f1a\u6539\u5199x2\u5bc4\u5b58\u5668\uff0c\u540e\u7eed\u518d\u6267\u884cadd\u6307\u4ee4\u65f6\uff0c\u5c31\u4f1a\u56e0\u4e3a\u4e71\u5e8f\u6267\u884c\u5bfc\u81f4\u7ed3\u679cx3\u9519\u8bef\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u8fd9\u5c31\u662f\u6240\u8c13\u7684WAR\u53cd\u76f8\u5173\u3002","title":"WAR\u53cd\u5411\u4f9d\u8d56"},{"location":"arch/register_rename.html#waw","text":"lw x3 , 0 ( x1 ) ; add x2 , x3 , x4 ; mul x2 , x6 , x4 ; \u5982\u679c\u4e71\u5e8fCPU\u6ca1\u6709\u5bc4\u5b58\u5668\u91cd\u547d\u540d\u673a\u5236\uff0c\u90a3\u4e48\u5f53lw\u53d1\u751fcache\u672a\u547d\u4e2d\u65f6\uff0cadd\u6307\u4ee4\u4f1a\u56e0\u4e3ax3\u5bc4\u5b58\u5668\u88ab\u9501\u4f4f\u800c\u65e0\u6cd5\u6267\u884c\uff0c\u6b64\u65f6\uff0cmul\u6307\u4ee4\u56e0\u4e3ax6\u548cx4\u5df2\u7ecf\u51c6\u5907\u597d\uff0c\u6240\u4ee5\u53ef\u4ee5\u6267\u884c\uff0c\u4f46mul\u6307\u4ee4\u548cadd\u6307\u4ee4\u6267\u884c\u5b8c\u6210\u540e\u90fd\u4f1a\u6539\u5199x2\u5bc4\u5b58\u5668\uff0c\u5982\u679cmul\u5148\u6267\u884c\u5b8c\u6210\uff0cadd\u540e\u6267\u884c\u5b8c\u6210\uff0c\u90a3\u4e48x2\u5bc4\u5b58\u5668\u5c31\u4e0d\u518d\u65f6mul\u7684\u7ed3\u679c\uff0c\u800c\u662fadd\u7684\u7ed3\u679c\u3002\u7a0b\u5e8f\u5c31\u4f1a\u56e0\u6b64\u51fa\u9519\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684WAW\u53cd\u5411\u4f9d\u8d56\u3002","title":"WAW\u53cd\u5411\u4f9d\u8d56"},{"location":"arch/register_rename.html#_3","text":"\u8fd9\u91cc\u6309\u7167\u4e00\u4e2a\u5e38\u7528\u7684\u5904\u7406\u673a\u5236\u6765\u5206\u6790\uff0c\u5904\u7406\u903b\u8f91\u5982\u4e0b\uff1a \u5c06\u6bcf\u6761\u6307\u4ee4\u7684\u6e90ISA\u5bc4\u5b58\u5668\u6620\u5c04\u4e3a\u8be5ISA\u5bc4\u5b58\u5668\u6700\u8fd1\u6620\u5c04\u5230\u7684\u90a3\u4e2a\u7269\u7406\u5bc4\u5b58\u5668 \u5c06\u6bcf\u6761\u6307\u4ee4\u7684\u76ee\u7684ISA\u5bc4\u5b58\u5668\u6620\u5c04\u5230\u65b0\u7684\u7269\u7406\u5bc4\u5b58\u5668 \u800c\u4e14\u8981\u4fdd\u8bc1\u7b2c\u4e00\u6b65\u8981\u5148\u6267\u884c\uff0c\u4e0d\u7136\u5982\u679c\u9047\u5230\u6e90\u5bc4\u5b58\u5668\u548c\u76ee\u7684\u5bc4\u5b58\u5668\u662f\u540c\u4e00\u4e2a\u7684\u60c5\u51b5\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u9519\u8bef\u3002 \u6267\u884c\u5982\u4e0b\u6307\u4ee4\u6d41\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7ecf\u8fc7\u5bc4\u5b58\u5668\u91cd\u547d\u540d\uff0cadd\u6307\u4ee4\u548csub\u6307\u4ee4\u5df2\u7ecf\u4e0d\u5b58\u5728\u4f9d\u8d56\u5173\u7cfb\uff0c \u6d88\u9664\u4e86WAR\u53cd\u5411\u4f9d\u8d56\u3002 x2 ----> R2 x3 ----> R3 x4 ----> R4 x5 ----> R5 x6 ----> R6 |x1|x2|x3|x4|x5|x6| ------------------------------ \u91cd\u547d\u540d\u524d |R1|R2|R3|R4|R5|R6| \u91cd\u547d\u540d\u540e 1. lw x2, 0(x1) | |R7| | | | | lw R7, 0(R1) \u6570\u636e\u76f8\u5173 | | | | | | | \u6570\u636e\u76f8\u5173 2. add x3, x2, x4 | | |R8| | | | add R8, R7, R4 \u53cd\u5411\u4f9d\u8d56 | | | | | | | \u4e0d\u76f8\u5173 3. sub x2, x4, x5 | |R9| | | | | sub R9, R4, R5 \u6570\u636e\u76f8\u5173 | | | | | | | \u6570\u636e\u76f8\u5173 4. mul x6, x2, x4 | | | | | |R10| mul R10, R9, R4 \u56e0\u6b64sub\u6307\u4ee4\u53ef\u4ee5\u5728lw\u548cadd\u7b49\u5f85\u8d44\u6e90\u7684\u60c5\u51b5\u4e0b\u5148\u6267\u884c\u5b8c\u6210\u3002 \u95ee\u9898\u5728\u4e8e\u7269\u7406\u5bc4\u5b58\u5668\u7684\u91ca\u653e\u65f6\u673a\uff0c\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5728mul\u6307\u4ee4rename\u7684\u65f6\u5019\uff0cR7\u53ef\u7528\u5417\uff1f","title":"\u91cd\u547d\u540d\u8fc7\u7a0b"},{"location":"arch/register_rename.html#_4","text":"\u5982\u4e0a\u56fe\uff0c\u53ef\u4ee5\u7528\u4f5crename\u7684\u5bc4\u5b58\u5668\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2afreelist\u7d22\u5f15\u5230\uff0c rename\u7684\u65f6\u5019\uff0crename\u5173\u7cfb\u5b58\u653e\u5728Map table\u4e2d\uff0c \u6309\u7167\u4e0a\u9762\u63cf\u8ff0\u7684\u5bc4\u5b58\u5668\u91cd\u547d\u540d\u539f\u7406\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u80fd\u591f\u7406\u6e05\u4e0a\u9762\u56fe\u4e2d\u63cf\u8ff0\u7684\u8fc7\u7a0b\uff0c\u4f46\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u7269\u7406\u5bc4\u5b58\u5668\u4e0d\u662f\u65e0\u9650\u7684\uff0c\u52bf\u5fc5\u8981\u6709\u4e00\u4e2a\u56de\u6536\u7684\u673a\u5236\uff0c\u5fc5\u7136\u662f\u5728\u6307\u4ee4commit\u65f6\u624d\u6709\u53ef\u80fd\u56de\u6536\u8fd9\u4e9b\u7528\u8fc7\u7684\u5bc4\u5b58\u5668\uff0c\u90a3\u4e48\u5728\u56de\u6536\u7684\u65f6\u5019\uff0c\u5fc5\u987b\u8981\u4fdd\u8bc1\u6574\u4e2aCPU\u7684flow\u4e2d\u6ca1\u6709\u5bf9\u8fd9\u4e2a\u5bc4\u5b58\u5668\u7684\u5f15\u7528\u3002 \u5982\u4f55\u6765\u4fdd\u8bc1\u5462\uff1f\u5047\u8bbe\u5728\u4e00\u6761\u6307\u4ee4\u63d0\u4ea4\u4e4b\u540e\u5c31\u56de\u6536\u8be5\u5bc4\u5b58\u5668\uff0c\u90a3\u4e48\u663e\u7136\u53ef\u80fd\u4f1a\u5f15\u5165\u9519\u8bef\u7684WAR\u96be\u9053\u6211\u4eec\u8981\u53bb\u8bb0\u5f55\u8c01\u5f15\u7528\u4e86rename\u4e4b\u540e\u7684\u5bc4\u5b58\u5668\u5417\uff1f\u600e\u4e48\u624d\u80fd\u8bb0\u5f55\u5462\uff1f\u5b9e\u9645\u4e0a\uff0c\u8bbe\u8ba1\u8005\u91c7\u7528\u4e86\u4e00\u4e2a\u975e\u5e38\u5de7\u5999\u7684\u505a\u6cd5\uff0c\u4f7f\u7528\u5f88\u7b80\u5355\u7684\u65b9\u5f0f\u5c31\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002 \u6211\u4eec\u770b\u4e0b\u9762\u7684\u6d4b\u8bd5\u7a0b\u5e8f OP1 r1 , r1 , r3 OP2 r5 , r5 , r1 OP3 r2 , r1 , r2 OP4 r1 , r1 , r4 OP5 r6 , r1 , r3 OP6 r7 , r4 , r1 OP7 r1 , r8 , r9 \u6211\u4eec\u5c1d\u8bd5\u53bbrename\u8fd9\u6bb5\u4ee3\u7801\uff1a OP1 r16 , r1 , r3 # r1 -> r16 OP2 r17 , r5 , r16 # r5 -> r17 OP3 r18 , r16 , r2 # r2 -> r18 OP4 r19 , r16 , r4 # r1 -> r19 OP5 r20 , r19 , r3 # r6 -> r20 OP6 r21 , r4 , r19 # r7 -> r21 OP7 r ??? , r8 , r9 # r1 -> r??? \u6211\u4eec\u770br1\u7684rename\u94fe\uff0c r1 -> r16 -> r19 -> r???, \u5047\u5982\u73b0\u5728commit\u5230\u4e86OP4\u3002\u6700\u540e\u4e00\u6761\u6307\u4ee4OP7\u5728rename\u65f6\u80fd\u4e0d\u80fd\u4f7f\u7528r19?\u80fd\u4e0d\u80fd\u4f7f\u7528r16? \u5f88\u663e\u7136\uff0c\u5047\u5982\u4f7f\u7528r19, \u56e0\u4e3a\u4e71\u5e8f\u6267\u884c\uff0c\u90a3\u4e48\u6709\u53ef\u80fdOP7\u8981\u6bd4OP5\u548cOP6\u5148\u6267\u884c\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bfc\u81f4OP5\u548cOP6\u7684\u8ba1\u7b97\u7ed3\u679c\u51fa\u9519\u3002\u56e0\u6b64\u4e0d\u80fd\u4f7f\u7528r19\uff0c \u90a3\u4e48\u80fd\u4e0d\u80fd\u4f7f\u7528r16\u5462\uff1f\u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3aOP4\u7684\u63d0\u4ea4\uff0c\u610f\u5473\u7740\u6240\u6709\u5bf9r16\u7684\u5f15\u7528\u80af\u5b9a\u662f\u7ed3\u675f\u4e86(\u5c5e\u4e8e\u5145\u5206\u4e0d\u5fc5\u8981\u6761\u4ef6)\uff0c\u56e0\u4e3a\u540e\u9762\u90fd\u6539\u59d3r19\u4e86\u3002\u6240\u4ee5\u6309\u7167\u8fd9\u79cd\u65b9\u5f0f\u53bb\u91ca\u653e\u5bc4\u5b58\u5668\uff0c\u80af\u5b9a\u662f\u7b80\u5355(\u4e0d\u7528\u53bb\u8003\u8651\u54ea\u6761\u6307\u4ee4\u5f15\u7528\u4e86\u8fd9\u4e2a\u5bc4\u5b58\u5668\u7684\u95ee\u9898)\u53c8\u80fd\u4fdd\u8bc1\u6b63\u786e\uff0c\u8fd8\u4e0d\u81f3\u4e8e\u8fc7\u5ea6\u6d6a\u8d39\u3002 \u6211\u4eec\u770bgem5\u4e2dO3CPU\u7684\u5b9e\u73b0\uff0c\u8fd9\u4e5f\u662falpha21264CPU\u7684\u5b9e\u73b0\u3002\u5728rename\u7684\u65f6\u5019\uff0c\u4e0d\u5355\u8bb0\u5f55\u4e86\u5f53\u524darch\u5bc4\u5b58\u5668\u88abrename\u7684\u7269\u7406\u5bc4\u5b58\u5668\uff0c\u8fd8\u8bb0\u5f55\u4e86\u4e0a\u4e00\u6b21\u88abrename\u7684\u7269\u7406\u5bc4\u5b58\u5668\u3002\u5728\u6307\u4ee4\u63d0\u4ea4\u65f6\uff0c\u8c03\u7528removeFromHistory\u51fd\u6570\uff0c\u8fd9\u65f6\u5019\u91ca\u653e\u7684\u662f\u8bb0\u5f55\u7684\u4e0a\u4e00\u6b21rename\u7684\u7269\u7406\u5bc4\u5b58\u5668(prevPhysReg)\u3002 SimpleRenameMap :: RenameInfo SimpleRenameMap::rename ( const RegId & arch_reg ) { PhysRegIdPtr renamed_reg ; // Record the current physical register that is renamed to the // requested architected register. PhysRegIdPtr prev_reg = map [ arch_reg . flatIndex ()]; renamed_reg = freeList -> getReg (); map [ arch_reg . flatIndex ()] = renamed_reg ; return RenameInfo ( renamed_reg , prev_reg ); } template < class Impl > void DefaultRename < Impl >:: removeFromHistory ( InstSeqNum inst_seq_num , ThreadID tid ) { // Commit all the renames up until (and including) the committed sequence // number. Some or even all of the committed instructions may not have // rename histories if they did not have destination registers that were // renamed. while ( ! historyBuffer [ tid ]. empty () && hb_it != historyBuffer [ tid ]. end () && hb_it -> instSeqNum <= inst_seq_num ) { // Don't free special phys regs like misc and zero regs, which // can be recognized because the new mapping is the same as // the old one. if ( hb_it -> newPhysReg != hb_it -> prevPhysReg ) { freeList -> addReg ( hb_it -> prevPhysReg ); } } }","title":"\u5bc4\u5b58\u5668\u7684\u91ca\u653e\u95ee\u9898"},{"location":"arch/register_rename.html#gem5-o3-cpu","text":"\u53c2\u8003gem5\u7ae0\u8282","title":"gem5 O3 CPU\u7684\u91cd\u547d\u540d\u673a\u5236"},{"location":"arch/rob.html","text":"ROB\u6a21\u5757 \u00b6 ROB\u539f\u7406 \u00b6 \u76ee\u524d\u5e38\u89c1\u7684ROB\u5b9e\u73b0\u65b9\u5f0f \u00b6 \u4e00\u4e2a\u7b80\u5355\u7684ROB\u5b9e\u73b0 \u00b6 \u53c2\u8003gem5\u76f8\u5173\u7ae0\u8282\u4e2d\u7684 O3 CPU\u7684ROB\u6a21\u5757\u5206\u6790","title":"ROB\u6a21\u5757"},{"location":"arch/rob.html#rob","text":"","title":"ROB\u6a21\u5757"},{"location":"arch/rob.html#rob_1","text":"","title":"ROB\u539f\u7406"},{"location":"arch/rob.html#rob_2","text":"","title":"\u76ee\u524d\u5e38\u89c1\u7684ROB\u5b9e\u73b0\u65b9\u5f0f"},{"location":"arch/rob.html#rob_3","text":"\u53c2\u8003gem5\u76f8\u5173\u7ae0\u8282\u4e2d\u7684 O3 CPU\u7684ROB\u6a21\u5757\u5206\u6790","title":"\u4e00\u4e2a\u7b80\u5355\u7684ROB\u5b9e\u73b0"},{"location":"arch/superscalar.html","text":"\u8d85\u6807\u91cf\u5904\u7406\u5668\u8bbe\u8ba1 \u00b6 \u672c\u6587\u662f\u5bf9\u300a\u8d85\u6807\u91cf\u5904\u7406\u5668\u8bbe\u8ba1\u300b\u7684\u4e2a\u4eba\u603b\u7ed3 \u4ec0\u4e48\u662f\u8d85\u6807\u91cf\u5904\u7406\u5668 \u00b6 \u5982\u679c\u4e00\u4e2a\u5904\u7406\u5668\u5728\u6bcf\u4e2acycle\u53ef\u4ee5\u53d6\u51fa\u591a\u4e8e\u4e00\u6761\u6307\u4ee4\u9001\u5230\u6d41\u6c34\u7ebf\u4e2d\uff0c\u5e76\u4e14\u4f7f\u7528\u786c\u4ef6\u6765\u5bf9\u6307\u4ee4\u8fdb\u884c\u8c03\u5ea6\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5904\u7406\u5668\u5c31\u53ef\u4ee5\u88ab\u6210\u4e3a\u8d85\u6807\u91cf\u5904\u7406\u5668\u3002\u8d85\u6807\u91cf\u5904\u7406\u5668\u53ef\u4ee5\u662f\u987a\u5e8f\u6267\u884c\u7684\u4e5f\u53ef\u4ee5\u662f\u4e71\u5e8f\u6267\u884c\u7684\u3002 \u8fd9\u91cc\u91cd\u70b9\u8ba8\u8bba\u4e71\u5e8f(\u53d1\u5c04\u548c\u6267\u884c\u53ef\u4ee5\u4e71\u5e8f)\u6267\u884c\u7684\u8d85\u6807\u91cf\u5904\u7406\u5668\u3002\u9996\u5148\u5e94\u8be5\u660e\u767d\uff0c\u8d85\u6807\u91cf\u5904\u7406\u5668\u6ca1\u6709\u4e00\u5957\u56fa\u5b9a\u7684\u8bbe\u8ba1\u539f\u5219\uff0c\u66f4\u591a\u7684\u65f6\u5019\uff0c\u9700\u8981\u6839\u636e\u5b9e\u9645\u7684\u573a\u666f\uff0c\u7ed3\u5408\u5bf9\u6027\u80fd\uff0c\u529f\u8017\uff0c\u80fd\u6548\u6bd4\uff0c\u5355\u6838\u8fd8\u662f\u591a\u6838\uff0c\u6210\u672c\u7b49\u5404\u79cd\u56e0\u7d20\u8fdb\u884c\u6709\u9488\u5bf9\u6027\u7684\u8bbe\u8ba1\u3002 \u73b0\u4ee3\u7684\u8d85\u6807\u91cf\u5904\u7406\u5668\u4e00\u822c\u5305\u542b\u4e0b\u9762\u51e0\u4e2a\u6b65\u9aa4, \u540e\u7eed\u9488\u5bf9\u6bcf\u4e00\u4e2a\u6b65\u9aa4\u4f1a\u5c55\u5f00\u8ba8\u8bba ----------- | icache | ----------- | | V fetch | | V decode | | V register rename | | V dispatch | | V issue | | V register file read | | V execute | | V write back | | V commit cache \u00b6 \u6211\u89c9\u5f97\u968f\u7740\u786c\u4ef6\u6280\u672f\u7684\u8fdb\u6b65\uff0c\u6211\u4eec\u53ef\u80fd\u4e0d\u518d\u9700\u8981cache\uff0c DRAM\u7684\u6027\u80fd\u80fd\u591f\u63a5\u8fd1\u751a\u81f3\u8fbe\u5230cache\u6c34\u5e73\u3002\u4f46\u5728\u672a\u6765\u7684\u4e00\u6bb5\u65f6\u95f4\uff0ccache\u4ecd\u7136\u662f\u89e3\u51b3CPU\u4e0eDRAM\u4e4b\u95f4\u901f\u5ea6\u7684\u552f\u4e00\u624b\u6bb5\u3002 \u5f53\u7136\uff0c\u6700\u91cd\u8981\u7684\u8fd8\u662fcache\u7684\u601d\u7ef4\uff0c\u5728\u8ba1\u7b97\u673a\u9886\u57df\uff0c\u901a\u8fc7\u589e\u52a0\u4e00\u5c42\u6765\u89e3\u51b3\u95ee\u9898\u7684\u601d\u7ef4\u3002 \u8fd9\u91cc\u4e0d\u8ba8\u8bbaCache\u539f\u7406\uff0c\u91cd\u70b9\u8ba8\u8bbaCache\u7684\u5b9e\u73b0\u3002 ICache\u53ea\u6709\u8bfb\u64cd\u4f5c\uff0c\u76f8\u5bf9\u7b80\u5355\uff0c\u5bf9\u4e8eDCache, \u5b83\u9700\u8981\u6709\u591a\u7aef\u53e3\u8bbe\u8ba1\u3002\u8fd9\u5c31\u7275\u626f\u5230Cache\u7684\u591a\u7aef\u53e3\u8bbe\u8ba1\u4e0b\u7684\uff0c\u5bb9\u91cf\u548c\u9762\u79ef\u4ee5\u53ca\u901f\u5ea6\u7684\u5173\u7cfb\u3002 \u591a\u8def\u7ec4\u76f8\u8054\u7684Cache\u56e0\u4e3a\u8981\u6309\u7167\u4e00\u5b9a\u987a\u5e8f\u6bd4\u8f83\u591a\u4e2aTag, \u56e0\u6b64\u5ef6\u8fdf\u8981\u6bd4\u76f4\u63a5\u6620\u5c04Cache\u7684\u5ef6\u8fdf\u5927\u3002\u751a\u81f3\u4e3a\u4e86\u4fdd\u8bc1\u65f6\u5e8f\uff0c\u8fd8\u9700\u8981\u62c6\u89e3\u6210\u591a\u7ea7\u6d41\u6c34\u3002 cache\u7684tag\u4e0edata\u7684\u4e32\u884c\u8bbf\u95ee\u8fd8\u662f\u5e76\u884c\u8bbf\u95ee\u4e5f\u4f1a\u5bf9\u6027\u80fd\u548c\u529f\u8017\u6709\u5f71\u54cd\uff0c\u5e76\u884c\u8bbf\u95ee\u4f1a\u5bfc\u81f4\u4e3b\u9891\u4e0a\u4e0d\u53bb\uff0c\u529f\u8017\u5927\uff0c\u4f46\u8bbf\u95eecache\u7684\u5468\u671f\u80fd\u591f\u7f29\u77ed\u3002 \u5168\u76f8\u8054cache\u6ca1\u6709index\uff0c\u9700\u8981\u7528\u5230CAM(Content Address Memory), \u5728\u6574\u4e2aCache\u4e2d\u8fdb\u884cTag\u6bd4\u8f83\u3002\u8fd9\u79cd\u6709\u7740\u6700\u5927\u7684\u7075\u6d3b\u5ea6\uff0c\u4e0d\u5bb9\u6613\u51fa\u73b0miss, \u4f46\u5ef6\u8fdf\u4e5f\u662f\u6700\u5927\u7684\u3002 \u6ce8\u610f\u533a\u5206write back and write allocate \u4e0e write through and no-Write allocate. cache line\u7684\u66ff\u6362\u7b56\u7565 \u00b6 LRU(Least Recently Used)\u65b9\u6cd5, 2\u9009\u4e00\u5c31\u75281bit\u5bc4\u5b58\u5668\u6765\u6807\u8bc6\u3002\u4f2aLRU\u5c31\u4f7f\u7528\u5206\u7ea7\u7684\u591a\u7ea7\u4e8c\u9009\u4e00\u8fdb\u884c\u9009\u62e9\u3002 \u968f\u673a\u66ff\u6362(Random Replacement),\u5f53cache\u5bb9\u91cf\u8f83\u5927\u65f6\uff0cmiss\u7387\u548cLRU\u5dee\u4e0d\u591a\u3002\u4e00\u822c\u91c7\u7528\u65f6\u949f\u7b97\u6cd5\u6765\u5b9e\u73b0\u8fd1\u4f3c\u968f\u673a\uff0c\u672c\u8d28\u4e0a\u662f\u8ba1\u6570\u5668\uff0c\u5bbd\u5ea6\u7b49\u4e8ecahce\u7684way\u7684\u4e2a\u6570\uff0c\u786c\u4ef6\u590d\u6742\u5ea6\u4f4e\u3002 cache\u6027\u80fd\u4f18\u5316 \u00b6 Write buffer: \u88ab\u66ff\u6362\u7684 dirty cache line \u5148\u5199\u5165write buffer\uff0c \u62e9\u673a\u5199\u5165\u4e0b\u7ea7\u5b58\u50a8\u5668\u3002\u8fd9\u4f1a\u589e\u52a0cache\u7684\u590d\u6742\u5ea6\uff0c\u5f53\u53d1\u751fcache miss\u7684\u65f6\u5019\uff0c\u4e0d\u4ec5\u9700\u8981\u4ece\u4e0b\u7ea7\u5b58\u50a8\u5668\u67e5\u627e\u6570\u636e\uff0c\u8fd8\u9700\u8981\u4ecewrite buffer\u4e2d\u67e5\u627e\uff0c\u5e76\u4e14write buffer\u4e2d\u7684\u6570\u636e\u4f18\u5148\u3002 pipline: \u5f80\u5f80\u4e3a\u4e86\u4fdd\u8bc1\u8bbe\u8ba1\u4e3b\u9891\uff0c\u9700\u8981\u5bf9cache\u8bbf\u95ee\u8fdb\u884c\u6d41\u6c34\u5316\u3002\u5c24\u5176\u662f\u5728\u5199\u64cd\u4f5c\u65f6\uff0c\u5fc5\u987b\u4fdd\u8bc1\u5148\u6bd4\u8f83\u5b8ctag\u518d\u5199\u6570\u636e\u3002\u5e38\u89c1\u7684\u53ef\u4ee5\u5c06tag SRAM\u7684\u8bfb\u53d6\u548c\u6bd4\u8f83\u653e\u5728\u4e00\u4e2a\u5468\u671f\uff0c\u5199Data Sram\u653e\u5728\u4e0b\u4e00\u4e2a\u5468\u671f\u3002\u4e00\u65e6\u5206\u6d41\u6c34\uff0c\u90a3\u4e48\u5c31\u4f1a\u4ea7\u751f\u8bfb\u7684\u6570\u636e\u6b63\u597d\u5728\u5199\u6d41\u6c34\u7ebf\u4e2d\u7684\u60c5\u51b5\u3002\u8fd9\u5c31\u53c8\u9700\u8981\u5c06load\u6307\u4ee4\u643a\u5e26\u7684\u5730\u5740\u548cstore\u6307\u4ee4\u7684\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u8fdb\u884c\u6bd4\u8f83\u3002 \u591a\u7ea7\u7ed3\u6784\u3002\u8fd9\u91cc\u53c8\u5206\u4e86Inclusive\u548cExclusive\u3002\u5373L2 Cache\u662f\u5426\u5305\u542bL1 Cache\u4e2d\u7684\u5185\u5bb9\u3002\u867d\u7136Exclusive\u7c7b\u578b\u7684cache\u7b56\u7565\u53ef\u4ee5\u63d0\u9ad8\u5bb9\u91cf\u5229\u7528\uff0c\u4f46\u73b0\u4ee3\u5927\u591a\u6570\u5904\u7406\u5668\u90fd\u91c7\u7528Inclusive\u7684Cache. Victim Cache. \u4fdd\u5b58\u6700\u8fd1\u88ab\u8e22\u51fa\u7684cache\u6570\u636e\u3002 1 Filter Cache. \u5148\u8fc7\u6ee4\u6389\u5076\u7136\u8bbf\u95ee\u7684\u6570\u636e\uff0c\u907f\u514d\u8fd9\u7c7b\u6570\u636e\u8fdb\u5165cache\u5360\u8d44\u6e90 \u9884\u53d6\u3002\u53ef\u4ee5\u63d0\u524d\u53d6\u6570\u636e\u8fdb\u5165cache\uff0c\u4f46\u4e3a\u4e86\u907f\u514dcache\u6c61\u67d3\uff0c\u53ef\u4ee5\u5c06\u9884\u53d6\u7684\u653e\u5230\u4e00\u4e2a\u5355\u72ec\u7684\u7f13\u5b58\u4e2d\u3002\u5f53\u7136\u9884\u53d6\u5c31\u6709\u6210\u529f\u7387\uff0c\u5c31\u4f1a\u56e0\u4e3a\u5224\u65ad\u9519\u8bef\u800c\u6d6a\u8d39\u529f\u8017\u548c\u5e26\u5bbd\u3002 2 \u591a\u7aef\u53e3Cache. Data SRAM\u4e00\u822c\u91c7\u7528multi-banking\u7684\u7ec4\u7ec7\u65b9\u5f0f\u3002\u5f71\u54cd\u8fd9\u79cd\u65b9\u5f0f\u6027\u80fd\u7684\u5173\u952e\u56e0\u7d20\u5c31\u662fbank conflict\u3002\u53ef\u4ee5\u901a\u8fc7\u66f4\u591a\u7684bank\u6765\u964d\u4f4e\u51b2\u7a81\u6982\u7387\u3002 3 AMD Opteron \u53cc\u7aef\u53e3D-Cache\u8bbe\u8ba1\u5b9e\u4f8b MMU \u00b6 \u4f7f\u7528\u865a\u62df\u5730\u5740\u7684\u597d\u5904 \u89e3\u51b3\u4e86\u7a0b\u5e8f\u7a7a\u95f4\u6bd4\u5b9e\u9645\u5185\u5b58\u7a7a\u95f4\u5927\uff0c\u9700\u8981\u8ba4\u4e3a\u62c6\u89e3\u7684\u95ee\u9898 \u89e3\u51b3\u4e86\u8fd0\u884c\u591a\u4e2a\u7a0b\u5e8f\u7684\u95ee\u9898 \u63d0\u4f9b\u4e86\u5185\u5b58\u4fdd\u62a4\u548c\u5171\u4eab\u673a\u5236 \u9875\u5927\u5c0f\uff1a \u592a\u5c0f\u7684\u9875\uff0c\u9020\u6210\u4e86\u9875\u8868\u5360\u7528\u7a7a\u95f4\u5927\uff0cTLB\u9700\u8981\u5bb9\u91cf\u5927\u7684\u95ee\u9898\uff0c\u6548\u7387\u4f4e\u4e0b \u592a\u5927\u7684\u9875\uff0c\u9020\u6210\u4e86\u9875\u5229\u7528\u7387\u964d\u4f4e\uff0c\u9700\u8981swap\u7684\u6570\u636e\u66f4\u591a\uff0cPage Fault\u7684\u5904\u7406\u65f6\u95f4\u4e5f\u66f4\u957f \u4e3a\u4e86\u66f4\u52a0\u7075\u6d3b\uff0c\u73b0\u4ee3\u5904\u7406\u5668\u666e\u904d\u652f\u6301\u5927\u5c0f\u53ef\u53d8\u7684\u9875\u3002 TLB\u7684\u66ff\u6362\u7b97\u6cd5\uff1a \u968f\u673a\u66ff\u6362\u5c31\u6bd4\u8f83\u5408\u9002\uff0c\u53ef\u4ee5\u4f7f\u7528\u7b80\u5355\u7684\u65f6\u949f\u7b97\u6cd5\u6765\u5b9e\u73b0\u8fd1\u4f3c\u7684\u968f\u673a\u3002 \u64cd\u4f5c\u7cfb\u7edf\u9700\u8981\u5bf9TLB\u8fdb\u884c\u5e72\u9884\u7684\u539f\u56e0\uff1a \u5f53\u8fdb\u7a0b\u7ed3\u675f\u65f6\uff0c\u9700\u8981\u65e0\u6548\u6389\u5b83\u6240\u4f7f\u7528\u7684\u9875\u8868\uff0c\u6b64\u65f6\u5e94\u8be5\u4fdd\u8bc1\u5b58\u5728\u4e8eTLB\u4e2d\u7684\u76f8\u540c\u9875\u8868\u88ab\u65e0\u6548\u6389 \u5f53\u8fdb\u7a0b\u5360\u7528\u7269\u7406\u5185\u5b58\u8fc7\u5927\u65f6\uff0c\u4e5f\u9700\u8981\u5c06\u8fd9\u4e2a\u8fdb\u7a0b\u4e2d\u4e0d\u5e38\u7528\u7684\u9875\u8fdb\u884cswap MMU\u63d0\u4f9b\u7684TLB\u7ba1\u7406\u624b\u6bb5\uff1a \u80fd\u591fflush\u6574\u4e2aTLB \u80fd\u591fflush\u6389ASID\u5bf9\u5e94\u7684entry \u80fd\u591fflush\u6389\u67d0\u4e2aVPN\u5bf9\u5e94\u7684entry Cache \u00b6 \u7269\u7406cache\u4e0e\u865a\u62dfcache \u7269\u7406cache\u903b\u8f91\u7b80\u5355\uff0c\u4f46\u5206\u652f\u9884\u6d4b\u5931\u8d25\u6216\u8005\u5f02\u5e38\u8df3\u8f6c\u7684\u5904\u7f5a\u4e5f\u66f4\u5927\uff1b\u865a\u62dfcache\u7684\u6548\u7387\u9ad8\uff0c\u4f46\u4f1a\u5f15\u5165\u540c\u540d\u548c\u540c\u4e49\u7684\u95ee\u9898\u3002 \u540c\u4e49\u95ee\u9898\uff1a\u53ef\u4ee5\u4f7f\u7528\u591abank\u7684\u65b9\u6cd5\u6765\u89e3\u51b3cache\u7684\u540c\u4e49\u95ee\u9898\uff0c\u4f46\u968f\u7740cache\u5bb9\u91cf\u7684\u589e\u5927\uff0c\u786c\u4ef6\u590d\u6742\u5ea6\u548c\u529f\u8017\u90fd\u4f1a\u589e\u52a0\u5f88\u591a\u3002 \u540c\u540d\u95ee\u9898\uff1a\u901a\u8fc7ASID\u548cG\u6807\u8bc6\u6765\u89e3\u51b3\uff0c\u53ef\u4ee5\u589e\u52a0\u4e00\u7ea7\u8868\u6765\u89e3\u51b3\u5f15\u5165ASID\u5e26\u6765\u7684\u67e5\u627e\u95ee\u9898 \u5206\u652f\u9884\u6d4b \u00b6 \u5206\u652f\u9884\u6d4b\u8981\u89e3\u51b3\u4e24\u4e2a\u65b9\u9762\u7684\u9884\u6d4b\uff1a \u5206\u652f\u65b9\u5411 \u8df3\u8f6c\u5730\u5740 \u5206\u652f\u9884\u6d4b\u7684\u6700\u597d\u65f6\u673a\u5c31\u662f\u5728\u5f53\u524d\u5468\u671f\u5f97\u5230\u53d6\u6307\u4ee4\u5730\u5740\u7684\u65f6\u5019\uff0c\u518d\u53d6\u6307\u4ee4\u7684\u540c\u65f6\u8fdb\u884c\u5206\u652f\u9884\u6d4b\uff0c\u8fd9\u6837\u5728\u4e0b\u4e00\u4e2a\u5468\u671f\u5c31\u53ef\u4ee5\u6839\u636e\u9884\u6d4b\u7ed3\u679c\u7ee7\u7eed\u53d6\u6307\u3002 \u4e3b\u6d41\u5904\u7406\u5668\u66f4\u5e7f\u6cdb\u7684\u91c7\u7528\u57fa\u4e8e\u4e24\u4f4d\u9971\u548c\u8ba1\u6570\u5668\u7684\u5206\u652f\u9884\u6d4b\u5668\uff0c\u5e76\u4ee5\u6b64\u4e3a\u57fa\u7840\u8fdb\u884c\u5ef6\u7533\u3002\u4e24\u4f4d\u9971\u548c\u8ba1\u6570\u5668\u7684\u6838\u5fc3\u7406\u5ff5\u5c31\u662f\u5f53\u4e00\u6761\u5206\u652f\u6307\u4ee4\u8fde\u7eed\u4e24\u6b21\u6267\u884c\u65b9\u5411\u90fd\u4e00\u6837\u65f6\uff0c \u90a3\u4e48\u8be5\u5206\u652f\u6307\u4ee4\u5728\u7b2c\u4e09\u6b21\u6267\u884c\u65f6\u4e5f\u4f1a\u6709\u540c\u6837\u7684\u65b9\u5411\uff0c\u5982\u679c\u4e00\u6761\u5206\u652f\u6307\u4ee4\u53ea\u662f\u5076\u5c14\u53d1\u751f\u4e86\u65b9\u5411\u7684\u6539\u53d8\uff0c\u90a3\u4e48\u5206\u652f\u9884\u6d4b\u7ed3\u679c\u4e0d\u4f1a\u7acb\u9a6c\u8ddf\u7740\u6539\u53d8\uff0c\u4e5f\u5c31\u662f\u6ee4\u6ce2\u3002 PHT(Pattern History Table)\u7531\u4e8e\u5bb9\u91cf\u7684\u9650\u5236\uff0c\u53ea\u80fd\u5bf9\u5e94PC\u503c\u4e2d\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u4f1a\u4ea7\u751f\u522b\u540d\u7684\u95ee\u9898\u3002\u53ef\u4ee5\u901a\u8fc7hash\u6765\u964d\u4f4e\u522b\u540d\u53d1\u751f\u7684\u6982\u7387\u3002 \u5c40\u90e8\u5386\u53f2\u5206\u652f\u9884\u6d4b \u00b6 \u5c40\u90e8\u5386\u53f2\u5206\u652f\u9884\u6d4b\uff0c\u901a\u8fc7\u8bb0\u5f55\u8fc7\u53bb\u51e0\u6b21\u5206\u652f\u6267\u884c\u7684\u60c5\u51b5\uff0c\u6765\u9884\u6d4b\u672a\u6765\u5206\u652f\u6267\u884c\u7684\u60c5\u51b5\uff0c\u4ee5PC\u503c\u4e3a\u7d22\u5f15\uff0c\u901a\u8fc7\u5c06PC\u503c\u8fdb\u884chash\u6765\u964d\u4f4e\u522b\u540d\u95ee\u9898\uff0chash\u540e\u7684PC\u503c\u7528\u6765\u5bfb\u5740\u5206\u652f\u5386\u53f2\u8868(BHT),\u4e3a\u4e86\u964d\u4f4e\u56e0\u4e3aBHR\u4e2d\u7684\u503c\u76f8\u540c\u5f15\u8d77\u7684\u91cd\u540d\u95ee\u9898\uff0c\u5c06BHR\u7684\u503c\u548cPC\u503c\u7684\u4e00\u90e8\u5206\u8fdb\u884c\u64cd\u4f5c(\u6216\u64cd\u4f5c\uff0c\u7ec4\u5408\u64cd\u4f5c)\u540e\uff0c\u5bfb\u5740\u9971\u548c\u8ba1\u6570\u5668\u8868 \u5168\u5c40\u5386\u53f2\u5206\u652f\u9884\u6d4b \u00b6 \u901a\u8fc7\u5206\u652f\u4e4b\u95f4\u7684\u5173\u7cfb\u6765\u8fdb\u884c\u9884\u6d4b\uff0cGHR\u4e0d\u6309\u7167PC\u6765\u8fdb\u884c\uff0c\u6240\u6709\u7684\u5206\u652f\u90fd\u88ab\u8bb0\u5f55\u5230GHR,hash\u540e\u7684PC\u548cGHR\u4e2d\u7684\u503c\u8fdb\u884cXOR\u64cd\u4f5c\u540e\uff0c\u6765\u7d22\u5f15PHT\u3002 \u7ade\u4e89\u7684\u5206\u652f\u9884\u6d4b \u00b6 \u5c40\u90e8\u5386\u53f2\u548c\u5168\u5c40\u5386\u53f2\u90fd\u6709\u5c40\u9650\u6027\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u628a\u8fd9\u4e24\u4e2a\u90fd\u5305\u542b\u8fdb\u53bb\uff0c\u5728\u9002\u5f53\u7684\u65f6\u673a\u8fdb\u884c\u5207\u6362\uff0c\u5e94\u8be5\u4f1a\u5f97\u5230\u66f4\u597d\u7684\u6548\u679c\u3002\u901a\u8fc7Choice PHT\u6765\u8fdb\u884c\u9009\u62e9\uff0c\u5bfb\u5740Choise PHT\u65f6\uff0c\u4f7f\u7528\u4e86\u67e5\u627e\u5168\u5c40\u5206\u652f\u7684PHT\u7684index\u3002 \u5206\u652f\u9884\u6d4b\u5668\u7684\u66f4\u65b0 \u00b6 GHR\u5728\u53d6\u6307\u4ee4\u9636\u6bb5\u66f4\u65b0\u4f1a\u6bd4\u8f83\u597d\uff0c\u53ef\u4ee5\u4f7f\u540e\u7eed\u7684\u5206\u652f\u6307\u4ee4\u4f7f\u7528\u5230\u6700\u65b0\u7684GHR\u3002\u5728\u53d6\u6307\u4ee4\u9636\u6bb5\u66f4\u65b0GHR\u662f\u63a8\u6d4b\u7684\uff0c\u5728\u9884\u6d4b\u5931\u8d25\u7684\u65f6\u5019\u9700\u8981\u6709\u4e00\u79cd\u673a\u5236\u5bf9GHR\u8fdb\u884c\u4fee\u590d\uff0c\u4f7fGHR\u80fd\u591f\u6062\u590d\u5230\u6b63\u786e\u503c\u3002 \u53ef\u4ee5\u4f7f\u7528checkpoint\u65b9\u6cd5\u6765\u5c06GHR\u8fdb\u884c\u6062\u590d,\u5c06\u6bcf\u6b21\u8981\u4fee\u590d\u6210\u7684\u503c(\u53d6\u975e\u64cd\u4f5c)\u586b\u5165\u4e00\u4e2aGHR\u6808\u3002 \u5bf9\u4e8eBHR\u7684\u66f4\u65b0\uff0c\u53ef\u4ee5\u5728\u5206\u652f\u6307\u4ee4retire\u7684\u65f6\u5019\uff0c\u8fd9\u6837\u53ef\u4ee5\u7b80\u5316\u8bbe\u8ba1\uff0c\u4e5f\u4e0d\u4f1a\u5bf9\u6027\u80fd\u4ea7\u751f\u592a\u5927\u7684\u8d1f\u9762\u5f71\u54cd\u3002 \u5bf9\u4e8e\u9971\u548c\u8ba1\u6570\u5668\uff0c\u4e00\u822c\u90fd\u662f\u5728\u5206\u652f\u6307\u4ee4retire\u7684\u65f6\u5019\u5bf9PHT\u4e2d\u7684\u9971\u548c\u8ba1\u6570\u5668\u8fdb\u884c\u66f4\u65b0\u3002 \u76f4\u63a5\u8df3\u8f6c\u7684\u5730\u5740\u9884\u6d4b \u00b6 \u5bf9\u4e8e\u4e00\u6761\u7279\u5b9a\u7684\u76f4\u63a5\u8df3\u8f6c\u6307\u4ee4\u6765\u8bf4\uff0c\u5b83\u7684\u76ee\u6807\u5730\u5740\u662f\u56fa\u5b9a\u7684\uff0c\u6307\u4ee4\u53c8\u4e0ePC\u76f8\u5173\uff0c\u56e0\u6b64\u4f7f\u7528\u4e00\u4e2aPC\u5bfb\u5740\u7684cache\u6765\u7f13\u5b58\u8fd9\u4e9b\u6307\u4ee4\u7684\u8df3\u8f6c\u5730\u5740\uff0c\u5c31\u80fd\u8fdb\u884c\u5730\u5740\u9884\u6d4b\u4e86\uff0c\u8fd9\u5c31\u662fBTB\u3002\u4e00\u822c\u53ef\u4ee5\u91c7\u7528\u7ec4\u76f8\u8054cache\u6765\u5b9e\u73b0BTB\u3002 \u5982\u679cBTB\u53d1\u751fmiss,\u90a3\u4e48\u53ef\u4ee5\u963b\u585e\u6d41\u6c34\u7ebf\uff0c\u505c\u6b62\u6267\u884c\uff0c\u8fd9\u6837\u80fd\u591f\u8282\u7701\u529f\u8017\uff0c\u4f46\u6548\u7387\u53ef\u80fd\u4f1a\u4f4e\u4e00\u4e9b\u3002\u4e5f\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\uff0c\u4e00\u65e6\u53d1\u73b0\u6700\u7ec8\u8ba1\u7b97\u51fa\u6765\u7684\u8df3\u8f6c\u5730\u5740\u548cspeculative\u6267\u884c\u7684\u5730\u5740\u4e0d\u4e00\u6837\uff0c\u518d\u8fdb\u884cflush\uff0c\u8fd9\u6837\u6709\u53ef\u80fd\u4f1a\u8499\u5bf9\uff0c\u4f46\u529f\u8017\u76f8\u5bf9\u9ad8\u4e00\u4e9b\u3002 \u95f4\u63a5\u8df3\u8f6c\u7684\u5206\u652f\u9884\u6d4b \u00b6 \u5176\u5b9e\u5927\u591a\u6570\u95f4\u63a5\u8df3\u8f6c\u90fd\u662fCALL/Return\u6307\u4ee4\uff0cCALL\u6307\u4ee4\u7684\u5730\u5740\u4e5f\u662f\u56fa\u5b9a\u7684\uff0c\u56e0\u6b64BTB\u5c31\u80fd\u8fdb\u884c\u9884\u6d4b\u3002Return\u6307\u4ee4\u867d\u7136\u5730\u5740\u662f\u4e0d\u56fa\u5b9a\u7684\uff0c\u4f46CALL\u4e0eReturn\u4e00\u822c\u662f\u6210\u5bf9\u51fa\u73b0\uff0creturn\u7684\u5730\u5740\u603b\u662f\u7b49\u4e8e\u6700\u8fd1\u4e00\u6b21\u6267\u884c\u7684CALL\u6307\u4ee4\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\u3002\u4f7f\u7528RAS\u80fd\u591f\u5f88\u597d\u7684\u5bf9Return\u6307\u4ee4\u7684\u8df3\u8f6c\u5730\u5740\u8fdb\u884c\u9884\u6d4b\u3002 \u5bf9\u4e8e\u4e0d\u662fCALL/Return\u7684\u95f4\u63a5\u8df3\u8f6c\uff0c\u4e5f\u6709\u65b9\u6cd5\u80fd\u591f\u8fdb\u884c\u5730\u5740\u9884\u6d4b\u3002\u56e0\u4e3a\u5177\u6709\u6b63\u5e38\u529f\u80fd\u7684\u4ee3\u7801\uff0c\u5206\u652f\u8df3\u8f6c\u7684\u5730\u5740\u603b\u662f\u6709\u9650\u7684\uff0c\u6bd4\u5982switch\uff0ccase\u3002\u90a3\u4e48\u53ef\u4ee5\u501f\u9274\u5c40\u90e8\u5386\u53f2\u7684\u5206\u652f\u9884\u6d4b\uff0c\u5c06BHT\u66ff\u6362\u6210target-Cache\u5c31\u80fd\u6bd4\u8f83\u597d\u7684\u8fdb\u884c\u5206\u652f\u9884\u6d4b\u3002 \u4e00\u4e2a\u5b8c\u6574\u7684\u5206\u652f\u9884\u6d4b \u00b6 \u4e00\u4e2a\u5b8c\u6574\u7684\u5206\u652f\u9884\u6d4b\uff0c\u7ed3\u5408\u4e0a\u9762\u6240\u8ff0\u7684\u5404\u4e2a\u90e8\u5206 \u9884\u6d4b\u5931\u8d25\u7684\u6062\u590d \u00b6 \u53ef\u4ee5\u5728\u4e0b\u9762\u51e0\u4e2a\u65f6\u95f4\u70b9\u5bf9\u6307\u4ee4\u7684\u5206\u652f\u9884\u6d4b\u7ed3\u679c\u8fdb\u884c\u68c0\u67e5 \u89e3\u7801\u9636\u6bb5\u3002\u5bf9\u4e00\u90e8\u5206\u76f4\u63a5\u8df3\u8f6c\u6307\u4ee4\u8fdb\u884c\u5206\u652f\u9884\u6d4b\u68c0\u67e5\uff0c\u6bd4\u5982\u65e0\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\u3002 \u8bfb\u53d6\u5bc4\u5b58\u5668\u9636\u6bb5\u3002\u83b7\u53d6\u5230\u5bc4\u5b58\u5668\u503c\u5c31\u80fd\u77e5\u9053\u76ee\u6807\u5730\u5740\uff0c\u5bf9\u4e8e\u4e00\u90e8\u5206\u95f4\u63a5\u8df3\u8f6c\u5c31\u80fd\u8fdb\u884c\u9884\u6d4b\u68c0\u67e5 \u6267\u884c\u9636\u6bb5\u3002penalty\u6700\u5927\u3002\u53ef\u4ee5\u5229\u7528ROB\u6216\u8005checkpoint\u8fdb\u884c\u9884\u6d4b\u5931\u8d25\u6062\u590d\u3002\u5229\u7528ROB\u5b9e\u73b0\u8d77\u6765\u76f8\u5bf9\u7b80\u5355\uff0c\u4f7f\u7528checkpoint\u4f1a\u4f7f\u7528\u66f4\u591a\u7684\u786c\u4ef6\u8d44\u6e90\u3002 \u5bc4\u5b58\u5668\u91cd\u547d\u540d \u00b6 \u5728 \u5bc4\u5b58\u5668\u91cd\u547d\u540d \u4e2d\u5df2\u7ecf\u5206\u6790\u4e86\u5176\u5b9e\u73b0\u539f\u7406\uff0c\u4f46\u6ca1\u6709\u63d0\u53ca\u7684\u662f\uff0c\u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0WAW\u548cWAR\u5047\u76f8\u5173\u3002\u8fd9\u672c\u4e66\u7684\u597d\u5904\u5c31\u662f\u5f88\u591a\u5730\u65b9\u5b9e\u73b0\u4e86\u8f6f\u786c\u7ed3\u5408\uff0c\u5b83\u5c31\u7ed9\u51fa\u4e86\u7b54\u6848\uff1a \u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0\u5047\u76f8\u5173 \u00b6 \u6709\u9650\u4e2a\u6570\u7684\u5bc4\u5b58\u5668\uff0c\u5bfc\u81f4\u5bc4\u5b58\u5668\u91cd\u590d\u4f7f\u7528 \u7a0b\u5e8f\u4e2d\u7684\u5faa\u73af\u4f53\uff0c\u8fd9\u4f1a\u4ea7\u751f\u5927\u91cf\u7684WAW \u4ee3\u7801\u91cd\u7528\uff0c\u51fd\u6570\u8c03\u7528 \u867d\u7136\u53ef\u4ee5\u901a\u8fc7\u62c6\u89e3\u5faa\u73af\u4f53\u6765\u90e8\u5206\u89e3\u51b3\u95ee\u9898\uff0c\u4f46\u5360\u7528\u66f4\u591a\u7684\u5b58\u50a8\u7a7a\u95f4\u4e5f\u610f\u5473\u7740I-Cache\u7684miss\u7387\u4f1a\u4e0a\u5347\u3002\u82af\u7247\u8bbe\u8ba1\u9886\u57df\u8fd8\u771f\u662f\u5904\u5904\u90fd\u9700\u8981trade off\u3002 \u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u65e2\u7136\u6839\u672c\u539f\u56e0\u662f\u5bc4\u5b58\u5668\u4e2a\u6570\u6709\u9650\u5bfc\u81f4\u7684\uff0c\u90a3\u4e48\u5728\u5b9a\u4e49\u6307\u4ee4\u96c6\u4e4b\u521d\u4e3a\u4ec0\u4e48\u4e0d\u5b9a\u4e49\u5f88\u591a\u5bc4\u5b58\u5668\uff1f\u8981\u662f\u8bf4x64\uff0carm\u90fd\u662f\u5386\u53f2\u539f\u56e0\uff0c\u90a3\u4e48\u65b0\u664b\u7684riscv\u4e3a\u4ec0\u4e48\u4e5f\u4ec5\u4ec5\u662f32\u4e2a\u5bc4\u5b58\u5668\uff1f \u76f4\u63a5\u63d0\u4f9b128\u5bc4\u5b58\u5668\u4f1a\u6709\u4ec0\u4e48\u95ee\u9898\u5417\uff1f\u4f1a\u6709\u95ee\u9898 \u9762\u79ef\u548c\u529f\u8017\uff0c\u66f4\u591a\u7684\u5bc4\u5b58\u5668\u610f\u5473\u7740\u66f4\u591a\u7684\u9762\u79ef\u548c\u529f\u8017\uff0c\u8fd9\u4f7f\u5f97\u5728\u6307\u4ee4\u96c6\u5c42\u9762\u4e0a\u5c31\u9650\u5236\u4e86CPU\u7684\u5de5\u4f5c\u573a\u666f\uff0c\u8fd9\u79cd\u67b6\u6784\u7684CPU\u663e\u7136\u5929\u751f\u65e0\u6cd5\u5b9e\u73b0\u4f4e\u529f\u8017\u7684\u5c0f\u82af\u7247\u3002 \u4ecd\u7136\u5f88\u96be\u89e3\u51b3\u5bc4\u5b58\u5668\u4e0d\u8db3\u7684\u95ee\u9898\uff0c\u8f6f\u4ef6\u7684\u9759\u6001\u5bc4\u5b58\u5668\u5206\u914d\u6bd4\u4e0d\u4e0a\u786c\u4ef6\u7684\u52a8\u6001\u5bc4\u5b58\u5668\u5206\u914d\u3002 \u5bc4\u5b58\u5668\u91cd\u547d\u540d\u7684\u5b9e\u73b0\u65b9\u5f0f \u00b6 \u4f7f\u7528ROB\u8fdb\u884c\u5bc4\u5b58\u5668\u91cd\u547d\u540d \u00b6 ROB\u7684\u7f16\u53f7\u4e0e\u7269\u7406\u5bc4\u5b58\u5668\u7684\u7f16\u53f7\u4e00\u81f4\uff0c\u6307\u4ee4\u4eceROB retire\uff0cROB\u4e2d\u7684\u7269\u7406\u5bc4\u5b58\u5668\u503c\u8f6c\u5b58\u5230\u67b6\u6784\u5bc4\u5b58\u5668\u4e2d\u3002 \u4f18\u70b9\u662f\u5bb9\u6613\u5b9e\u73b0\uff0c\u8bbe\u8ba1\u590d\u6742\u5ea6\u4e0d\u9ad8\uff0c\u53ef\u4ee5\u83b7\u5f97\u4e0d\u9519\u7684\u6027\u80fd\u3002\u7f3a\u70b9\u662f\u5bf9\u4e8e\u4e0d\u9700\u8981\u5bc4\u5b58\u5668\u91cd\u547d\u540d\u7684\u6307\u4ee4\u4e5f\u4f1a\u5360\u7528\u7269\u7406\u5bc4\u5b58\u5668\uff0c\u6d6a\u8d39\u8d44\u6e90\u3002ARF\u548cROB\u90fd\u9700\u8981\u591a\u4e2a\u8bfb\u7aef\u53e3\u3002 \u5c06ARF\u6269\u5c55 \u00b6 \u5b83\u5b9e\u9645\u4e0a\u662f\u5bf9ROB\u6269\u5c55\u65b9\u5f0f\u7684\u4e00\u79cd\u4f18\u5316\uff0c\u89e3\u51b3\u4e86ROB\u65b9\u5f0f\u5bfc\u81f4\u7684\u90e8\u5206\u8868\u8c61\u6d6a\u8d39\u7684\u95ee\u9898\u3002 \u4f7f\u7528\u7edf\u4e00\u7684PRF \u00b6 \u5bc4\u5b58\u5668\u7684\u503c\u53ea\u9700\u8981\u88ab\u5199\u5165\u4e00\u6b21\uff0c\u4e0d\u9700\u8981\u7531FRF\u8f6c\u5230ARF \u4e00\u6761\u6307\u4ee4\u7684\u6e90\u5bc4\u5b58\u5668\u53ea\u4f1a\u5b58\u5728\u4e8ePRF,\u4e0d\u9700\u8981\u5224\u65ad\u53bb\u54ea\u91cc\u8bfb\u53d6 \u8d85\u6807\u91cf\u5904\u7406\u5668\u91cd\u547d\u540d\u7684\u8bbe\u8ba1 \u00b6 \u4e00\u4e2a\u56db\u8defrename\u7684\u8bbe\u8ba1 \u5bf9\u4e8eRAT\u6765\u8bb2\uff0c\u8981\u9762\u5bf9\u5206\u652f\u9884\u6d4b\u5931\u8d25\u6216\u8005\u5f02\u5e38\u7684\u6062\u590d\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u6709\u4e09\u79cd\u5178\u578b\u65b9\u6cd5\uff1a checkpoint \u65b9\u6cd5\uff0c\u4f1a\u6d88\u8017\u9762\u79ef\uff0c\u589e\u52a0\u529f\u8017\uff0c\u4f46\u6062\u590d\u6bd4\u8f83\u5feb\u3002\u5c24\u5176\u662f\u5bf9\u4e8ecRAT\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5f88\u6d88\u8017\u9762\u79ef\u548c\u529f\u8017\u3002 walk\u65b9\u6cd5\u3002ROB\u4e2d\u7684\u6bcf\u6761\u6307\u4ee4\u90fd\u5b58\u50a8\u4e86\u8fd9\u6761\u6307\u4ee4\u4e4b\u524d\u5bf9\u5e94\u7684\u7269\u7406\u5bc4\u5b58\u5668\uff0c\u901a\u8fc7\u8fd9\u4e9b\u4fe1\u606f\u80fd\u591f\u628aRAT\u9010\u6b65\u7684\u8fd8\u539f\u3002\u6062\u590d\u65f6\u95f4\u6bd4\u8f83\u6162\uff0c\u4f46\u662f\u6d88\u8017\u786c\u4ef6\u8d44\u6e90\u5c11\uff0c\u66f4\u9002\u5408\u53d1\u751f\u5f02\u5e38\u65f6\u7684\u6062\u590d\u3002 architecture state. \u5728\u6d41\u6c34\u7ebf\u7684\u63d0\u4ea4\u9636\u6bb5\u4e5f\u6709\u4e00\u4e2aaRAT,\u6307\u4ee4\u53ea\u6709\u63d0\u4ea4\u4e86\u624d\u8bb0\u5f55\u5230\u8fd9\u91cc\uff0c\u8fd9\u6837\u53ea\u8981\u7b49\u5230\u53d1\u751f\u5f02\u5e38\u6216\u5206\u652f\u9884\u6d4b\u9519\u8bef\u7684\u6307\u4ee4\u63d0\u4ea4\u65f6\uff0c\u5c31\u53ef\u4ee5\u7528aRAT\u5bf9RAT\u8fdb\u884c\u6062\u590d\u3002 \u7f3a\u70b9\u5728\u4e8e\u5206\u652f\u9884\u6d4b\u5931\u8d25\u7684\u60e9\u7f5a\u53ef\u80fd\u4f1a\u53d8\u5927\uff0c\u56e0\u4e3a\u8981\u7b49\u5230\u4e4b\u524d\u7684\u6307\u4ee4\u5168\u90e8retire. \u53d1\u5c04 \u00b6 \u53d1\u5c04\u8fc7\u7a0b\u76f8\u5bf9\u590d\u6742\uff0c\u5b83\u8981\u5b8c\u6210\u5c06\u6307\u4ee4\u5b58\u5165 Issue Queue\uff0c\u4eceissue Queue\u4e2d\u6311\u51faready\u7684\u6307\u4ee4\u9001\u5230FU\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u8fd8\u9700\u8981\u83b7\u53d6\u5bc4\u5b58\u5668\u4f9d\u8d56\u5173\u7cfb\u6765\u786e\u5b9a\u6307\u4ee4\u662f\u5426\u8d44\u6e90\u5747\u5df2ready\u3002\u540c\u65f6\u4e5f\u9700\u8981\u652f\u6301bypass\u3002 \u53d1\u5c04\u961f\u5217 \u00b6 \u6240\u6709\u6307\u4ee4\u5171\u7528\u4e00\u4e2a\u53d1\u5c04\u961f\u5217\uff0c\u79f0\u4e3a\u96c6\u4e2d\u5f0f\u53d1\u5c04\u961f\u5217(Centralized Issue Queue, CIQ); \u6bcf\u4e2aFU\u90fd\u6709\u5355\u72ec\u7684\u53d1\u5c04\u961f\u5217\uff0c\u5219\u79f0\u4e3a\u5206\u5e03\u5f0f\u7684\u53d1\u5c04\u961f\u5217(Distributed Issue Queue, DIQ)\u3002 \u82af\u7247\u8bbe\u8ba1\u9886\u57df\u603b\u662f\u6ca1\u6709\u975e\u9ed1\u5373\u767d\uff0c\u603b\u662f\u9700\u8981\u8fdb\u884ctrade off, \u6839\u636e\u9700\u6c42\u6765\u7efc\u5408\u8003\u8651\u3002\u5f80\u5f80\u6700\u7ec8\u662fCIQ\u548cDIQ\u7684\u6298\u4e2d\u65b9\u6848\u3002 CIQ\u7684\u5229\u5f0a\uff1a \u4f18\u70b9\uff1a \u80fd\u591f\u5145\u5206\u5229\u7528\u961f\u5217\u7684\u7a7a\u95f4 \u7f3a\u70b9\uff1a \u9009\u62e9\u7535\u8def\u548c\u5524\u9192\u7535\u8def\u90fd\u4f1a\u590d\u6742\uff0c\u9762\u79ef\u548c\u5ef6\u8fdf\u90fd\u4f1a\u5927 DIQ\u7684\u5229\u5f0a\uff1a \u4f18\u70b9\uff1a \u7b80\u5316\u4e86\u9009\u62e9\u7535\u8def\u7684\u8bbe\u8ba1 \u7f3a\u70b9\uff1a \u7a7a\u95f4\u5229\u7528\u7387\u76f8\u5bf9\u4f4e\uff0c\u53ef\u80fd\u4f1a\u56e0\u4e3a\u4e00\u4e2a\u961f\u5217\u6ca1\u6709\u7a7a\u95f4\u800c\u963b\u585e\u6240\u6709\u961f\u5217 \u5524\u9192\u64cd\u4f5c\u7684\u5e03\u7ebf\u590d\u6742\u5ea6\u4e5f\u4f1a\u4e0a\u5347 \u6570\u636e\u6355\u6349\u4e0e\u975e\u6570\u636e\u6355\u6349 \u00b6 \u6570\u636e\u6355\u6349\uff1a\u5728\u6d41\u6c34\u7ebf\u7684\u53d1\u5c04\u9636\u6bb5\u4e4b\u524d\u8bfb\u53d6\u5bc4\u5b58\u5668\uff0c\u6ca1\u6709ready\u7684\u5bc4\u5b58\u5668\u8bb0\u5f55\u5bc4\u5b58\u5668\u53f7\u3002\u9700\u8981\u5c06\u8fd9\u4e9b\u6570\u636e\u653e\u5230payload RAM\u3002 \u4f18\u70b9\uff1a \u6240\u9700\u5bc4\u5b58\u5668\u5806\u7684\u8bfb\u7aef\u53e3\u6570\u6bd4\u8f83\u5c11\uff0c\u9700\u8981\u7269\u7406\u5bbd\u5ea6 * 2\u7684\u8bfb\u7aef\u53e3\u6570 \u7f3a\u70b9\uff1a \u9700\u8981payload RAM\uff0c\u4f1a\u5360\u7528\u9762\u79ef \u5bc4\u5b58\u5668\u6570\u636e\u6709\u642c\u79fb\uff0c\u76f8\u5bf9\u529f\u8017\u4f1a\u66f4\u5927\u3002 \u901f\u5ea6\u76f8\u5bf9\u4f4e\u4e00\u4e9b \u975e\u6570\u636e\u6355\u6349\uff1a\u5728\u6d41\u6c34\u7ebf\u7684\u53d1\u5c04\u9636\u6bb5\u4e4b\u540e\u8bfb\u53d6\u7269\u7406\u5bc4\u5b58\u5668\u5806\u3002\u83b7\u53d6\u7684\u503c\u76f4\u63a5\u8fdb\u5165FU\u3002 \u4f18\u70b9\uff1a \u529f\u8017\u76f8\u5bf9\u4f4e \u901f\u5ea6\u76f8\u5bf9\u5feb \u9762\u79ef\u76f8\u5bf9\u5c0f \u7f3a\u70b9\uff1a \u9700\u8981\u5bc4\u5b58\u5668\u5806\u7684\u8bfb\u7aef\u53e3\u591a\uff0c\u9700\u8981\u53d1\u5c04\u5bbd\u5ea6 * 2\u7684\u7aef\u53e3 \u4f7f\u7528ROB\u8fdb\u884c\u5bc4\u5b58\u5668\u91cd\u547d\u540d\u65f6\uff0c\u4e00\u822c\u90fd\u4f1a\u642d\u914d\u4f7f\u7528\u6570\u636e\u6355\u6349\u7684\u53d1\u5c04\u65b9\u5f0f\uff0c\u56e0\u4e3a\u4f7f\u7528ROB\u8fdb\u884c\u5bc4\u5b58\u5668\u91cd\u547d\u540d\u65f6\uff0c\u771f\u6b63\u7684\u5bc4\u5b58\u5668\u7684\u503c\u53ef\u80fd\u5728ARF\u4e2d\u4e5f\u53ef\u80fd\u5728ROB\u4e2d\uff0c\u83b7\u53d6\u8fd9\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u4f1a\u5f88\u9ebb\u70e6\u3002\u6570\u636e\u6355\u6349\u56e0\u4e3a\u4f7f\u7528payload RAM\uff0c\u4e0d\u9700\u8981\u518d\u8bbf\u95ee\u5bc4\u5b58\u5668\u5806\uff0c\u4e5f\u5c31\u4e0d\u9700\u8981\u5173\u5fc3\u5bc4\u5b58\u5668\u503c\u53bb\u54ea\u91cc\u83b7\u53d6\u3002\u663e\u7136\uff0cCPU\u8bbe\u8ba1\u662f\u9700\u8981\u5168\u76d8\u8003\u8651\u7684\uff0c\u5fc5\u987b\u5177\u5907\u5168\u5c40\u89c6\u89d2\u3002 \u538b\u7f29\u4e0e\u975e\u538b\u7f29 \u00b6 \u538b\u7f29\u7684\u53d1\u5c04\u961f\u5217\u5c31\u50cf\u53e0\u7740\u7684\u4e66\u4e00\u6837\uff0c\u62bd\u6389\u4e00\u672c\uff0c\u5728\u5176\u4e0a\u9762\u7684\u90fd\u4f1a\u4e0b\u843d\u3002\u6bcf\u672c\u4e66\u90fd\u653e\u5728\u4e00\u4e2a\u683c\u5b50\u91cc\uff0c\u62bd\u6389\u540e\uff0c\u5176\u4ed6\u4e66\u90fd\u4e0d\u52a8\uff0c\u5c31\u662f\u975e\u538b\u7f29\u53d1\u5c04\u961f\u5217\u3002 \u538b\u7f29\u7684\u53d1\u5c04\u961f\u5217\uff1a \u4f18\u70b9\uff1a \u9700\u8981\u6bcf\u4e00\u4e2a\u8868\u9879\u524d\u90fd\u6709\u4e00\u4e2a\u591a\u8def\u9009\u62e9\u5668\uff0c\u9009\u62e9\u4ece\u4e0a\u9762\u7684\u8868\u9879\u8fd8\u662f\u81ea\u8eab\u8fdb\u884c\u66f4\u65b0\u3002 \u9009\u62e9\u7535\u8def\u7b80\u5355\uff0c\u53ea\u9700\u8981\u4f7f\u7528\u4f18\u5148\u7ea7\u7f16\u7801\u5668\u8fdb\u884c\u9009\u62e9\u5373\u53ef \u5206\u914d\u7535\u8def\u7b80\u5355\uff0c\u7a7a\u95f2\u7a7a\u95f4\u603b\u662f\u5904\u4e8e\u4e0a\u90e8 \u7f3a\u70b9\uff1a \u8017\u9762\u79ef\u3002\u9700\u8981\u5927\u91cf\u7684\u591a\u8def\u9009\u62e9\u5668\u652f\u6301\u538b\u7f29 \u529f\u8017\u5927\u3002\u4e00\u76f4\u5728\u79fb\u52a8 \u975e\u538b\u7f29\u7684\u53d1\u5c04\u961f\u5217\uff1a \u4f18\u70b9\uff1a \u529f\u8017\u548c\u9762\u79ef\u5c0f \u4e0d\u9700\u8981\u590d\u6742\u7684\u591a\u8def\u9009\u62e9\u5668 \u7f3a\u70b9\uff1a \u9009\u62e9\u7535\u8def\u548c\u5206\u914d\u7535\u8def\u90fd\u4f1a\u590d\u6742 \u53d1\u5c04\u8fc7\u7a0b\u7684\u6d41\u6c34\u7ebf \u00b6 \u60f3\u8981\u4f7f\u5b58\u5728\u5148\u5199\u540e\u8bfb\u76f8\u5173\u6027\u7684\u76f8\u90bb\u6307\u4ee4\u53ef\u4ee5\u80cc\u9760\u80cc\u6267\u884c\uff0c\u5fc5\u987b\u5c06\u4ef2\u88c1\u548c\u5524\u9192\u4e24\u4e2a\u64cd\u4f5c\u5728\u4e00\u4e2a\u5468\u671f\u5185\u5b8c\u6210 \u5c06\u6d41\u6c34\u7ebf\u7684\u4ef2\u88c1\u548c\u5524\u9192\u5206\u5f00\u5230\u4e24\u4e2a\u5468\u671f\uff0cIPC\u5927\u7ea6\u4f1a\u4e0b\u964d10%~15% \u4e3a\u4ec0\u4e48\u8981\u5b9e\u73b0oldest-first\u529f\u80fd \u00b6 \u8d8a\u65e7\u7684\u6307\u4ee4\uff0c\u548c\u5b83\u5b58\u5728\u76f8\u5173\u6027\u7684\u6307\u4ee4\u4e5f\u5c31\u8d8a\u591a\uff0c\u56e0\u6b64\u6700\u5148\u6267\u884coldest\u6307\u4ee4\uff0c\u6982\u7387\u4e0a\u5c31\u53ef\u4ee5\u5524\u9192\u66f4\u591a\u7684\u6307\u4ee4\uff0c\u80fd\u591f\u6709\u6548\u7684\u63d0\u9ad8\u5904\u7406\u5668\u6267\u884c\u6307\u4ee4\u7684\u5e76\u884c\u5ea6\uff0c\u800c\u4e14\u8fd8\u80fd\u53ca\u65f6\u91ca\u653e\u5360\u636e\u7684\u5176\u4ed6\u8d44\u6e90 \u83b7\u53d6\u6307\u4ee4\u5e74\u9f84\u4fe1\u606f \u00b6 \u53ef\u4ee5\u5229\u7528ROB\u6765\u83b7\u53d6\u5e74\u9f84\u4fe1\u606f\uff0c\u4f46ROB\u5b9e\u8d28\u4e0a\u662fFIFO,\u662f\u5faa\u73af\u4f7f\u7528\u7684\u3002\u56e0\u6b64\u65e0\u6cd5\u7b80\u5355\u7684\u901a\u8fc7ROB\u7684\u5730\u5740\u6765\u5224\u522b\u5e74\u9f84\uff0c\u5728\u5730\u5740\u524d\u9762\u589e\u52a0\u4e00\u4f4d\uff0c\u5f53\u7ffb\u8f6c\u65f6\uff0c\u4e5f\u540c\u65f6\u7ffb\u8f6c\u8fd9\u4e2a\u4f4d\uff0c\u8fd9\u6837\u5728FIFO\u4e2d\uff0c\u4e00\u4e2a\u5faa\u73af\u5185\u7684\u8868\u9879\u90fd\u4f1a\u6709\u540c\u6837\u7684\u5730\u5740\u6700\u9ad8\u4f4d\u3002\u56e0\u4e3aROB\u662f\u4ece\u5c0f\u5730\u5740\u5f00\u59cb\u5199\u5165\uff0c\u56e0\u6b64\u5982\u679c\u9ad8\u5730\u5740\u6709\u6700\u9ad8\u4f4d\u4e0d\u4e00\u6837\u7684\u8868\u9879\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u4e0a\u4e00\u6b21\u5faa\u73af\u4e2d\u6b8b\u7559\u7684\u8868\u9879\u3002\u56e0\u6b64\u6709\u5982\u4e0b\u7ed3\u8bba\uff1a \u4f4d\u7f6e\u503c\u76f8\u540c\u65f6\uff0cROB\u5730\u5740\u503c\u8d8a\u5c0f\uff0c\u5bf9\u5e94\u7684\u6307\u4ee4\u8d8a\u65e7 \u4f4d\u7f6e\u503c\u4e0d\u540c\u65f6\uff0cROB\u5730\u5740\u503c\u8d8a\u5927\uff0c\u5bf9\u5e94\u7684\u6307\u4ee4\u8d8a\u65e7 \u8fd9\u662f\u4e00\u79cd\u5907\u4efd\u601d\u60f3\uff0c\u867d\u7136\u7ed9\u6bcf\u4e2a\u4eba\u5206\u914d\u4e86\u665a\u9910\uff0c\u4f46\u4e5f\u4e0d\u60f3\u6bcf\u4e2a\u4eba\u90fd\u7ed9\u8db3\u591f\u7684\u98df\u7269\uff0c\u5c31\u591a\u5907\u4e86\u51e0\u4efd\uff0c\u7ed9\u90a3\u4e9b\u996d\u91cf\u5927\u7684\u4eba \u21a9 \u5982\u679cCPU\u80fd\u591f\u6709\u7c7b\u4f3cAI\u7684\u5b66\u4e60\u673a\u5236\uff0c\u6709\u6bd4\u8f83\u5927\u7684\u7a7a\u95f4\u80fd\u591f\u7528\u6765\u5b66\u4e60\u6570\u636e\u5730\u5740\u7684\u89c4\u5f8b\uff0c\u5728\u9884\u53d6\u65f6\u80fd\u591f\u4fdd\u8bc1\u6bd4\u8f83\u9ad8\u7684\u51c6\u786e\u7387\uff0c\u90a3\u4e48\u6548\u7387\u4e00\u5b9a\u80fd\u63d0\u9ad8\u4e0d\u5c11 \u21a9 \u60f3\u8c61\u4e00\u4e0b\u6781\u9650\u60c5\u51b5\uff0c\u5982\u679c\u6bcf\u4e2a\u6570\u636e\u90fd\u6709\u4e00\u4e2a\u7aef\u53e3\uff0c\u90a3\u4e48\u5fc5\u7136\u4e5f\u4e0d\u4f1a\u5b58\u5728\u7aef\u53e3\u51b2\u7a81\uff0c\u4f46\u662f\u4ee3\u4ef7\u4e5f\u662f\u5de8\u5927\u7684\uff0c\u9700\u8981\u65e0\u6570\u6839\u7ebf\u6765\u8fde\u63a5\u3002 \u21a9","title":"\u8d85\u6807\u91cf\u5904\u7406\u5668\u8bbe\u8ba1"},{"location":"arch/superscalar.html#_1","text":"\u672c\u6587\u662f\u5bf9\u300a\u8d85\u6807\u91cf\u5904\u7406\u5668\u8bbe\u8ba1\u300b\u7684\u4e2a\u4eba\u603b\u7ed3","title":"\u8d85\u6807\u91cf\u5904\u7406\u5668\u8bbe\u8ba1"},{"location":"arch/superscalar.html#_2","text":"\u5982\u679c\u4e00\u4e2a\u5904\u7406\u5668\u5728\u6bcf\u4e2acycle\u53ef\u4ee5\u53d6\u51fa\u591a\u4e8e\u4e00\u6761\u6307\u4ee4\u9001\u5230\u6d41\u6c34\u7ebf\u4e2d\uff0c\u5e76\u4e14\u4f7f\u7528\u786c\u4ef6\u6765\u5bf9\u6307\u4ee4\u8fdb\u884c\u8c03\u5ea6\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5904\u7406\u5668\u5c31\u53ef\u4ee5\u88ab\u6210\u4e3a\u8d85\u6807\u91cf\u5904\u7406\u5668\u3002\u8d85\u6807\u91cf\u5904\u7406\u5668\u53ef\u4ee5\u662f\u987a\u5e8f\u6267\u884c\u7684\u4e5f\u53ef\u4ee5\u662f\u4e71\u5e8f\u6267\u884c\u7684\u3002 \u8fd9\u91cc\u91cd\u70b9\u8ba8\u8bba\u4e71\u5e8f(\u53d1\u5c04\u548c\u6267\u884c\u53ef\u4ee5\u4e71\u5e8f)\u6267\u884c\u7684\u8d85\u6807\u91cf\u5904\u7406\u5668\u3002\u9996\u5148\u5e94\u8be5\u660e\u767d\uff0c\u8d85\u6807\u91cf\u5904\u7406\u5668\u6ca1\u6709\u4e00\u5957\u56fa\u5b9a\u7684\u8bbe\u8ba1\u539f\u5219\uff0c\u66f4\u591a\u7684\u65f6\u5019\uff0c\u9700\u8981\u6839\u636e\u5b9e\u9645\u7684\u573a\u666f\uff0c\u7ed3\u5408\u5bf9\u6027\u80fd\uff0c\u529f\u8017\uff0c\u80fd\u6548\u6bd4\uff0c\u5355\u6838\u8fd8\u662f\u591a\u6838\uff0c\u6210\u672c\u7b49\u5404\u79cd\u56e0\u7d20\u8fdb\u884c\u6709\u9488\u5bf9\u6027\u7684\u8bbe\u8ba1\u3002 \u73b0\u4ee3\u7684\u8d85\u6807\u91cf\u5904\u7406\u5668\u4e00\u822c\u5305\u542b\u4e0b\u9762\u51e0\u4e2a\u6b65\u9aa4, \u540e\u7eed\u9488\u5bf9\u6bcf\u4e00\u4e2a\u6b65\u9aa4\u4f1a\u5c55\u5f00\u8ba8\u8bba ----------- | icache | ----------- | | V fetch | | V decode | | V register rename | | V dispatch | | V issue | | V register file read | | V execute | | V write back | | V commit","title":"\u4ec0\u4e48\u662f\u8d85\u6807\u91cf\u5904\u7406\u5668"},{"location":"arch/superscalar.html#cache","text":"\u6211\u89c9\u5f97\u968f\u7740\u786c\u4ef6\u6280\u672f\u7684\u8fdb\u6b65\uff0c\u6211\u4eec\u53ef\u80fd\u4e0d\u518d\u9700\u8981cache\uff0c DRAM\u7684\u6027\u80fd\u80fd\u591f\u63a5\u8fd1\u751a\u81f3\u8fbe\u5230cache\u6c34\u5e73\u3002\u4f46\u5728\u672a\u6765\u7684\u4e00\u6bb5\u65f6\u95f4\uff0ccache\u4ecd\u7136\u662f\u89e3\u51b3CPU\u4e0eDRAM\u4e4b\u95f4\u901f\u5ea6\u7684\u552f\u4e00\u624b\u6bb5\u3002 \u5f53\u7136\uff0c\u6700\u91cd\u8981\u7684\u8fd8\u662fcache\u7684\u601d\u7ef4\uff0c\u5728\u8ba1\u7b97\u673a\u9886\u57df\uff0c\u901a\u8fc7\u589e\u52a0\u4e00\u5c42\u6765\u89e3\u51b3\u95ee\u9898\u7684\u601d\u7ef4\u3002 \u8fd9\u91cc\u4e0d\u8ba8\u8bbaCache\u539f\u7406\uff0c\u91cd\u70b9\u8ba8\u8bbaCache\u7684\u5b9e\u73b0\u3002 ICache\u53ea\u6709\u8bfb\u64cd\u4f5c\uff0c\u76f8\u5bf9\u7b80\u5355\uff0c\u5bf9\u4e8eDCache, \u5b83\u9700\u8981\u6709\u591a\u7aef\u53e3\u8bbe\u8ba1\u3002\u8fd9\u5c31\u7275\u626f\u5230Cache\u7684\u591a\u7aef\u53e3\u8bbe\u8ba1\u4e0b\u7684\uff0c\u5bb9\u91cf\u548c\u9762\u79ef\u4ee5\u53ca\u901f\u5ea6\u7684\u5173\u7cfb\u3002 \u591a\u8def\u7ec4\u76f8\u8054\u7684Cache\u56e0\u4e3a\u8981\u6309\u7167\u4e00\u5b9a\u987a\u5e8f\u6bd4\u8f83\u591a\u4e2aTag, \u56e0\u6b64\u5ef6\u8fdf\u8981\u6bd4\u76f4\u63a5\u6620\u5c04Cache\u7684\u5ef6\u8fdf\u5927\u3002\u751a\u81f3\u4e3a\u4e86\u4fdd\u8bc1\u65f6\u5e8f\uff0c\u8fd8\u9700\u8981\u62c6\u89e3\u6210\u591a\u7ea7\u6d41\u6c34\u3002 cache\u7684tag\u4e0edata\u7684\u4e32\u884c\u8bbf\u95ee\u8fd8\u662f\u5e76\u884c\u8bbf\u95ee\u4e5f\u4f1a\u5bf9\u6027\u80fd\u548c\u529f\u8017\u6709\u5f71\u54cd\uff0c\u5e76\u884c\u8bbf\u95ee\u4f1a\u5bfc\u81f4\u4e3b\u9891\u4e0a\u4e0d\u53bb\uff0c\u529f\u8017\u5927\uff0c\u4f46\u8bbf\u95eecache\u7684\u5468\u671f\u80fd\u591f\u7f29\u77ed\u3002 \u5168\u76f8\u8054cache\u6ca1\u6709index\uff0c\u9700\u8981\u7528\u5230CAM(Content Address Memory), \u5728\u6574\u4e2aCache\u4e2d\u8fdb\u884cTag\u6bd4\u8f83\u3002\u8fd9\u79cd\u6709\u7740\u6700\u5927\u7684\u7075\u6d3b\u5ea6\uff0c\u4e0d\u5bb9\u6613\u51fa\u73b0miss, \u4f46\u5ef6\u8fdf\u4e5f\u662f\u6700\u5927\u7684\u3002 \u6ce8\u610f\u533a\u5206write back and write allocate \u4e0e write through and no-Write allocate.","title":"cache"},{"location":"arch/superscalar.html#cache-line","text":"LRU(Least Recently Used)\u65b9\u6cd5, 2\u9009\u4e00\u5c31\u75281bit\u5bc4\u5b58\u5668\u6765\u6807\u8bc6\u3002\u4f2aLRU\u5c31\u4f7f\u7528\u5206\u7ea7\u7684\u591a\u7ea7\u4e8c\u9009\u4e00\u8fdb\u884c\u9009\u62e9\u3002 \u968f\u673a\u66ff\u6362(Random Replacement),\u5f53cache\u5bb9\u91cf\u8f83\u5927\u65f6\uff0cmiss\u7387\u548cLRU\u5dee\u4e0d\u591a\u3002\u4e00\u822c\u91c7\u7528\u65f6\u949f\u7b97\u6cd5\u6765\u5b9e\u73b0\u8fd1\u4f3c\u968f\u673a\uff0c\u672c\u8d28\u4e0a\u662f\u8ba1\u6570\u5668\uff0c\u5bbd\u5ea6\u7b49\u4e8ecahce\u7684way\u7684\u4e2a\u6570\uff0c\u786c\u4ef6\u590d\u6742\u5ea6\u4f4e\u3002","title":"cache line\u7684\u66ff\u6362\u7b56\u7565"},{"location":"arch/superscalar.html#cache_1","text":"Write buffer: \u88ab\u66ff\u6362\u7684 dirty cache line \u5148\u5199\u5165write buffer\uff0c \u62e9\u673a\u5199\u5165\u4e0b\u7ea7\u5b58\u50a8\u5668\u3002\u8fd9\u4f1a\u589e\u52a0cache\u7684\u590d\u6742\u5ea6\uff0c\u5f53\u53d1\u751fcache miss\u7684\u65f6\u5019\uff0c\u4e0d\u4ec5\u9700\u8981\u4ece\u4e0b\u7ea7\u5b58\u50a8\u5668\u67e5\u627e\u6570\u636e\uff0c\u8fd8\u9700\u8981\u4ecewrite buffer\u4e2d\u67e5\u627e\uff0c\u5e76\u4e14write buffer\u4e2d\u7684\u6570\u636e\u4f18\u5148\u3002 pipline: \u5f80\u5f80\u4e3a\u4e86\u4fdd\u8bc1\u8bbe\u8ba1\u4e3b\u9891\uff0c\u9700\u8981\u5bf9cache\u8bbf\u95ee\u8fdb\u884c\u6d41\u6c34\u5316\u3002\u5c24\u5176\u662f\u5728\u5199\u64cd\u4f5c\u65f6\uff0c\u5fc5\u987b\u4fdd\u8bc1\u5148\u6bd4\u8f83\u5b8ctag\u518d\u5199\u6570\u636e\u3002\u5e38\u89c1\u7684\u53ef\u4ee5\u5c06tag SRAM\u7684\u8bfb\u53d6\u548c\u6bd4\u8f83\u653e\u5728\u4e00\u4e2a\u5468\u671f\uff0c\u5199Data Sram\u653e\u5728\u4e0b\u4e00\u4e2a\u5468\u671f\u3002\u4e00\u65e6\u5206\u6d41\u6c34\uff0c\u90a3\u4e48\u5c31\u4f1a\u4ea7\u751f\u8bfb\u7684\u6570\u636e\u6b63\u597d\u5728\u5199\u6d41\u6c34\u7ebf\u4e2d\u7684\u60c5\u51b5\u3002\u8fd9\u5c31\u53c8\u9700\u8981\u5c06load\u6307\u4ee4\u643a\u5e26\u7684\u5730\u5740\u548cstore\u6307\u4ee4\u7684\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u8fdb\u884c\u6bd4\u8f83\u3002 \u591a\u7ea7\u7ed3\u6784\u3002\u8fd9\u91cc\u53c8\u5206\u4e86Inclusive\u548cExclusive\u3002\u5373L2 Cache\u662f\u5426\u5305\u542bL1 Cache\u4e2d\u7684\u5185\u5bb9\u3002\u867d\u7136Exclusive\u7c7b\u578b\u7684cache\u7b56\u7565\u53ef\u4ee5\u63d0\u9ad8\u5bb9\u91cf\u5229\u7528\uff0c\u4f46\u73b0\u4ee3\u5927\u591a\u6570\u5904\u7406\u5668\u90fd\u91c7\u7528Inclusive\u7684Cache. Victim Cache. \u4fdd\u5b58\u6700\u8fd1\u88ab\u8e22\u51fa\u7684cache\u6570\u636e\u3002 1 Filter Cache. \u5148\u8fc7\u6ee4\u6389\u5076\u7136\u8bbf\u95ee\u7684\u6570\u636e\uff0c\u907f\u514d\u8fd9\u7c7b\u6570\u636e\u8fdb\u5165cache\u5360\u8d44\u6e90 \u9884\u53d6\u3002\u53ef\u4ee5\u63d0\u524d\u53d6\u6570\u636e\u8fdb\u5165cache\uff0c\u4f46\u4e3a\u4e86\u907f\u514dcache\u6c61\u67d3\uff0c\u53ef\u4ee5\u5c06\u9884\u53d6\u7684\u653e\u5230\u4e00\u4e2a\u5355\u72ec\u7684\u7f13\u5b58\u4e2d\u3002\u5f53\u7136\u9884\u53d6\u5c31\u6709\u6210\u529f\u7387\uff0c\u5c31\u4f1a\u56e0\u4e3a\u5224\u65ad\u9519\u8bef\u800c\u6d6a\u8d39\u529f\u8017\u548c\u5e26\u5bbd\u3002 2 \u591a\u7aef\u53e3Cache. Data SRAM\u4e00\u822c\u91c7\u7528multi-banking\u7684\u7ec4\u7ec7\u65b9\u5f0f\u3002\u5f71\u54cd\u8fd9\u79cd\u65b9\u5f0f\u6027\u80fd\u7684\u5173\u952e\u56e0\u7d20\u5c31\u662fbank conflict\u3002\u53ef\u4ee5\u901a\u8fc7\u66f4\u591a\u7684bank\u6765\u964d\u4f4e\u51b2\u7a81\u6982\u7387\u3002 3 AMD Opteron \u53cc\u7aef\u53e3D-Cache\u8bbe\u8ba1\u5b9e\u4f8b","title":"cache\u6027\u80fd\u4f18\u5316"},{"location":"arch/superscalar.html#mmu","text":"\u4f7f\u7528\u865a\u62df\u5730\u5740\u7684\u597d\u5904 \u89e3\u51b3\u4e86\u7a0b\u5e8f\u7a7a\u95f4\u6bd4\u5b9e\u9645\u5185\u5b58\u7a7a\u95f4\u5927\uff0c\u9700\u8981\u8ba4\u4e3a\u62c6\u89e3\u7684\u95ee\u9898 \u89e3\u51b3\u4e86\u8fd0\u884c\u591a\u4e2a\u7a0b\u5e8f\u7684\u95ee\u9898 \u63d0\u4f9b\u4e86\u5185\u5b58\u4fdd\u62a4\u548c\u5171\u4eab\u673a\u5236 \u9875\u5927\u5c0f\uff1a \u592a\u5c0f\u7684\u9875\uff0c\u9020\u6210\u4e86\u9875\u8868\u5360\u7528\u7a7a\u95f4\u5927\uff0cTLB\u9700\u8981\u5bb9\u91cf\u5927\u7684\u95ee\u9898\uff0c\u6548\u7387\u4f4e\u4e0b \u592a\u5927\u7684\u9875\uff0c\u9020\u6210\u4e86\u9875\u5229\u7528\u7387\u964d\u4f4e\uff0c\u9700\u8981swap\u7684\u6570\u636e\u66f4\u591a\uff0cPage Fault\u7684\u5904\u7406\u65f6\u95f4\u4e5f\u66f4\u957f \u4e3a\u4e86\u66f4\u52a0\u7075\u6d3b\uff0c\u73b0\u4ee3\u5904\u7406\u5668\u666e\u904d\u652f\u6301\u5927\u5c0f\u53ef\u53d8\u7684\u9875\u3002 TLB\u7684\u66ff\u6362\u7b97\u6cd5\uff1a \u968f\u673a\u66ff\u6362\u5c31\u6bd4\u8f83\u5408\u9002\uff0c\u53ef\u4ee5\u4f7f\u7528\u7b80\u5355\u7684\u65f6\u949f\u7b97\u6cd5\u6765\u5b9e\u73b0\u8fd1\u4f3c\u7684\u968f\u673a\u3002 \u64cd\u4f5c\u7cfb\u7edf\u9700\u8981\u5bf9TLB\u8fdb\u884c\u5e72\u9884\u7684\u539f\u56e0\uff1a \u5f53\u8fdb\u7a0b\u7ed3\u675f\u65f6\uff0c\u9700\u8981\u65e0\u6548\u6389\u5b83\u6240\u4f7f\u7528\u7684\u9875\u8868\uff0c\u6b64\u65f6\u5e94\u8be5\u4fdd\u8bc1\u5b58\u5728\u4e8eTLB\u4e2d\u7684\u76f8\u540c\u9875\u8868\u88ab\u65e0\u6548\u6389 \u5f53\u8fdb\u7a0b\u5360\u7528\u7269\u7406\u5185\u5b58\u8fc7\u5927\u65f6\uff0c\u4e5f\u9700\u8981\u5c06\u8fd9\u4e2a\u8fdb\u7a0b\u4e2d\u4e0d\u5e38\u7528\u7684\u9875\u8fdb\u884cswap MMU\u63d0\u4f9b\u7684TLB\u7ba1\u7406\u624b\u6bb5\uff1a \u80fd\u591fflush\u6574\u4e2aTLB \u80fd\u591fflush\u6389ASID\u5bf9\u5e94\u7684entry \u80fd\u591fflush\u6389\u67d0\u4e2aVPN\u5bf9\u5e94\u7684entry","title":"MMU"},{"location":"arch/superscalar.html#cache_2","text":"\u7269\u7406cache\u4e0e\u865a\u62dfcache \u7269\u7406cache\u903b\u8f91\u7b80\u5355\uff0c\u4f46\u5206\u652f\u9884\u6d4b\u5931\u8d25\u6216\u8005\u5f02\u5e38\u8df3\u8f6c\u7684\u5904\u7f5a\u4e5f\u66f4\u5927\uff1b\u865a\u62dfcache\u7684\u6548\u7387\u9ad8\uff0c\u4f46\u4f1a\u5f15\u5165\u540c\u540d\u548c\u540c\u4e49\u7684\u95ee\u9898\u3002 \u540c\u4e49\u95ee\u9898\uff1a\u53ef\u4ee5\u4f7f\u7528\u591abank\u7684\u65b9\u6cd5\u6765\u89e3\u51b3cache\u7684\u540c\u4e49\u95ee\u9898\uff0c\u4f46\u968f\u7740cache\u5bb9\u91cf\u7684\u589e\u5927\uff0c\u786c\u4ef6\u590d\u6742\u5ea6\u548c\u529f\u8017\u90fd\u4f1a\u589e\u52a0\u5f88\u591a\u3002 \u540c\u540d\u95ee\u9898\uff1a\u901a\u8fc7ASID\u548cG\u6807\u8bc6\u6765\u89e3\u51b3\uff0c\u53ef\u4ee5\u589e\u52a0\u4e00\u7ea7\u8868\u6765\u89e3\u51b3\u5f15\u5165ASID\u5e26\u6765\u7684\u67e5\u627e\u95ee\u9898","title":"Cache"},{"location":"arch/superscalar.html#_3","text":"\u5206\u652f\u9884\u6d4b\u8981\u89e3\u51b3\u4e24\u4e2a\u65b9\u9762\u7684\u9884\u6d4b\uff1a \u5206\u652f\u65b9\u5411 \u8df3\u8f6c\u5730\u5740 \u5206\u652f\u9884\u6d4b\u7684\u6700\u597d\u65f6\u673a\u5c31\u662f\u5728\u5f53\u524d\u5468\u671f\u5f97\u5230\u53d6\u6307\u4ee4\u5730\u5740\u7684\u65f6\u5019\uff0c\u518d\u53d6\u6307\u4ee4\u7684\u540c\u65f6\u8fdb\u884c\u5206\u652f\u9884\u6d4b\uff0c\u8fd9\u6837\u5728\u4e0b\u4e00\u4e2a\u5468\u671f\u5c31\u53ef\u4ee5\u6839\u636e\u9884\u6d4b\u7ed3\u679c\u7ee7\u7eed\u53d6\u6307\u3002 \u4e3b\u6d41\u5904\u7406\u5668\u66f4\u5e7f\u6cdb\u7684\u91c7\u7528\u57fa\u4e8e\u4e24\u4f4d\u9971\u548c\u8ba1\u6570\u5668\u7684\u5206\u652f\u9884\u6d4b\u5668\uff0c\u5e76\u4ee5\u6b64\u4e3a\u57fa\u7840\u8fdb\u884c\u5ef6\u7533\u3002\u4e24\u4f4d\u9971\u548c\u8ba1\u6570\u5668\u7684\u6838\u5fc3\u7406\u5ff5\u5c31\u662f\u5f53\u4e00\u6761\u5206\u652f\u6307\u4ee4\u8fde\u7eed\u4e24\u6b21\u6267\u884c\u65b9\u5411\u90fd\u4e00\u6837\u65f6\uff0c \u90a3\u4e48\u8be5\u5206\u652f\u6307\u4ee4\u5728\u7b2c\u4e09\u6b21\u6267\u884c\u65f6\u4e5f\u4f1a\u6709\u540c\u6837\u7684\u65b9\u5411\uff0c\u5982\u679c\u4e00\u6761\u5206\u652f\u6307\u4ee4\u53ea\u662f\u5076\u5c14\u53d1\u751f\u4e86\u65b9\u5411\u7684\u6539\u53d8\uff0c\u90a3\u4e48\u5206\u652f\u9884\u6d4b\u7ed3\u679c\u4e0d\u4f1a\u7acb\u9a6c\u8ddf\u7740\u6539\u53d8\uff0c\u4e5f\u5c31\u662f\u6ee4\u6ce2\u3002 PHT(Pattern History Table)\u7531\u4e8e\u5bb9\u91cf\u7684\u9650\u5236\uff0c\u53ea\u80fd\u5bf9\u5e94PC\u503c\u4e2d\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u4f1a\u4ea7\u751f\u522b\u540d\u7684\u95ee\u9898\u3002\u53ef\u4ee5\u901a\u8fc7hash\u6765\u964d\u4f4e\u522b\u540d\u53d1\u751f\u7684\u6982\u7387\u3002","title":"\u5206\u652f\u9884\u6d4b"},{"location":"arch/superscalar.html#_4","text":"\u5c40\u90e8\u5386\u53f2\u5206\u652f\u9884\u6d4b\uff0c\u901a\u8fc7\u8bb0\u5f55\u8fc7\u53bb\u51e0\u6b21\u5206\u652f\u6267\u884c\u7684\u60c5\u51b5\uff0c\u6765\u9884\u6d4b\u672a\u6765\u5206\u652f\u6267\u884c\u7684\u60c5\u51b5\uff0c\u4ee5PC\u503c\u4e3a\u7d22\u5f15\uff0c\u901a\u8fc7\u5c06PC\u503c\u8fdb\u884chash\u6765\u964d\u4f4e\u522b\u540d\u95ee\u9898\uff0chash\u540e\u7684PC\u503c\u7528\u6765\u5bfb\u5740\u5206\u652f\u5386\u53f2\u8868(BHT),\u4e3a\u4e86\u964d\u4f4e\u56e0\u4e3aBHR\u4e2d\u7684\u503c\u76f8\u540c\u5f15\u8d77\u7684\u91cd\u540d\u95ee\u9898\uff0c\u5c06BHR\u7684\u503c\u548cPC\u503c\u7684\u4e00\u90e8\u5206\u8fdb\u884c\u64cd\u4f5c(\u6216\u64cd\u4f5c\uff0c\u7ec4\u5408\u64cd\u4f5c)\u540e\uff0c\u5bfb\u5740\u9971\u548c\u8ba1\u6570\u5668\u8868","title":"\u5c40\u90e8\u5386\u53f2\u5206\u652f\u9884\u6d4b"},{"location":"arch/superscalar.html#_5","text":"\u901a\u8fc7\u5206\u652f\u4e4b\u95f4\u7684\u5173\u7cfb\u6765\u8fdb\u884c\u9884\u6d4b\uff0cGHR\u4e0d\u6309\u7167PC\u6765\u8fdb\u884c\uff0c\u6240\u6709\u7684\u5206\u652f\u90fd\u88ab\u8bb0\u5f55\u5230GHR,hash\u540e\u7684PC\u548cGHR\u4e2d\u7684\u503c\u8fdb\u884cXOR\u64cd\u4f5c\u540e\uff0c\u6765\u7d22\u5f15PHT\u3002","title":"\u5168\u5c40\u5386\u53f2\u5206\u652f\u9884\u6d4b"},{"location":"arch/superscalar.html#_6","text":"\u5c40\u90e8\u5386\u53f2\u548c\u5168\u5c40\u5386\u53f2\u90fd\u6709\u5c40\u9650\u6027\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u628a\u8fd9\u4e24\u4e2a\u90fd\u5305\u542b\u8fdb\u53bb\uff0c\u5728\u9002\u5f53\u7684\u65f6\u673a\u8fdb\u884c\u5207\u6362\uff0c\u5e94\u8be5\u4f1a\u5f97\u5230\u66f4\u597d\u7684\u6548\u679c\u3002\u901a\u8fc7Choice PHT\u6765\u8fdb\u884c\u9009\u62e9\uff0c\u5bfb\u5740Choise PHT\u65f6\uff0c\u4f7f\u7528\u4e86\u67e5\u627e\u5168\u5c40\u5206\u652f\u7684PHT\u7684index\u3002","title":"\u7ade\u4e89\u7684\u5206\u652f\u9884\u6d4b"},{"location":"arch/superscalar.html#_7","text":"GHR\u5728\u53d6\u6307\u4ee4\u9636\u6bb5\u66f4\u65b0\u4f1a\u6bd4\u8f83\u597d\uff0c\u53ef\u4ee5\u4f7f\u540e\u7eed\u7684\u5206\u652f\u6307\u4ee4\u4f7f\u7528\u5230\u6700\u65b0\u7684GHR\u3002\u5728\u53d6\u6307\u4ee4\u9636\u6bb5\u66f4\u65b0GHR\u662f\u63a8\u6d4b\u7684\uff0c\u5728\u9884\u6d4b\u5931\u8d25\u7684\u65f6\u5019\u9700\u8981\u6709\u4e00\u79cd\u673a\u5236\u5bf9GHR\u8fdb\u884c\u4fee\u590d\uff0c\u4f7fGHR\u80fd\u591f\u6062\u590d\u5230\u6b63\u786e\u503c\u3002 \u53ef\u4ee5\u4f7f\u7528checkpoint\u65b9\u6cd5\u6765\u5c06GHR\u8fdb\u884c\u6062\u590d,\u5c06\u6bcf\u6b21\u8981\u4fee\u590d\u6210\u7684\u503c(\u53d6\u975e\u64cd\u4f5c)\u586b\u5165\u4e00\u4e2aGHR\u6808\u3002 \u5bf9\u4e8eBHR\u7684\u66f4\u65b0\uff0c\u53ef\u4ee5\u5728\u5206\u652f\u6307\u4ee4retire\u7684\u65f6\u5019\uff0c\u8fd9\u6837\u53ef\u4ee5\u7b80\u5316\u8bbe\u8ba1\uff0c\u4e5f\u4e0d\u4f1a\u5bf9\u6027\u80fd\u4ea7\u751f\u592a\u5927\u7684\u8d1f\u9762\u5f71\u54cd\u3002 \u5bf9\u4e8e\u9971\u548c\u8ba1\u6570\u5668\uff0c\u4e00\u822c\u90fd\u662f\u5728\u5206\u652f\u6307\u4ee4retire\u7684\u65f6\u5019\u5bf9PHT\u4e2d\u7684\u9971\u548c\u8ba1\u6570\u5668\u8fdb\u884c\u66f4\u65b0\u3002","title":"\u5206\u652f\u9884\u6d4b\u5668\u7684\u66f4\u65b0"},{"location":"arch/superscalar.html#_8","text":"\u5bf9\u4e8e\u4e00\u6761\u7279\u5b9a\u7684\u76f4\u63a5\u8df3\u8f6c\u6307\u4ee4\u6765\u8bf4\uff0c\u5b83\u7684\u76ee\u6807\u5730\u5740\u662f\u56fa\u5b9a\u7684\uff0c\u6307\u4ee4\u53c8\u4e0ePC\u76f8\u5173\uff0c\u56e0\u6b64\u4f7f\u7528\u4e00\u4e2aPC\u5bfb\u5740\u7684cache\u6765\u7f13\u5b58\u8fd9\u4e9b\u6307\u4ee4\u7684\u8df3\u8f6c\u5730\u5740\uff0c\u5c31\u80fd\u8fdb\u884c\u5730\u5740\u9884\u6d4b\u4e86\uff0c\u8fd9\u5c31\u662fBTB\u3002\u4e00\u822c\u53ef\u4ee5\u91c7\u7528\u7ec4\u76f8\u8054cache\u6765\u5b9e\u73b0BTB\u3002 \u5982\u679cBTB\u53d1\u751fmiss,\u90a3\u4e48\u53ef\u4ee5\u963b\u585e\u6d41\u6c34\u7ebf\uff0c\u505c\u6b62\u6267\u884c\uff0c\u8fd9\u6837\u80fd\u591f\u8282\u7701\u529f\u8017\uff0c\u4f46\u6548\u7387\u53ef\u80fd\u4f1a\u4f4e\u4e00\u4e9b\u3002\u4e5f\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\uff0c\u4e00\u65e6\u53d1\u73b0\u6700\u7ec8\u8ba1\u7b97\u51fa\u6765\u7684\u8df3\u8f6c\u5730\u5740\u548cspeculative\u6267\u884c\u7684\u5730\u5740\u4e0d\u4e00\u6837\uff0c\u518d\u8fdb\u884cflush\uff0c\u8fd9\u6837\u6709\u53ef\u80fd\u4f1a\u8499\u5bf9\uff0c\u4f46\u529f\u8017\u76f8\u5bf9\u9ad8\u4e00\u4e9b\u3002","title":"\u76f4\u63a5\u8df3\u8f6c\u7684\u5730\u5740\u9884\u6d4b"},{"location":"arch/superscalar.html#_9","text":"\u5176\u5b9e\u5927\u591a\u6570\u95f4\u63a5\u8df3\u8f6c\u90fd\u662fCALL/Return\u6307\u4ee4\uff0cCALL\u6307\u4ee4\u7684\u5730\u5740\u4e5f\u662f\u56fa\u5b9a\u7684\uff0c\u56e0\u6b64BTB\u5c31\u80fd\u8fdb\u884c\u9884\u6d4b\u3002Return\u6307\u4ee4\u867d\u7136\u5730\u5740\u662f\u4e0d\u56fa\u5b9a\u7684\uff0c\u4f46CALL\u4e0eReturn\u4e00\u822c\u662f\u6210\u5bf9\u51fa\u73b0\uff0creturn\u7684\u5730\u5740\u603b\u662f\u7b49\u4e8e\u6700\u8fd1\u4e00\u6b21\u6267\u884c\u7684CALL\u6307\u4ee4\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\u3002\u4f7f\u7528RAS\u80fd\u591f\u5f88\u597d\u7684\u5bf9Return\u6307\u4ee4\u7684\u8df3\u8f6c\u5730\u5740\u8fdb\u884c\u9884\u6d4b\u3002 \u5bf9\u4e8e\u4e0d\u662fCALL/Return\u7684\u95f4\u63a5\u8df3\u8f6c\uff0c\u4e5f\u6709\u65b9\u6cd5\u80fd\u591f\u8fdb\u884c\u5730\u5740\u9884\u6d4b\u3002\u56e0\u4e3a\u5177\u6709\u6b63\u5e38\u529f\u80fd\u7684\u4ee3\u7801\uff0c\u5206\u652f\u8df3\u8f6c\u7684\u5730\u5740\u603b\u662f\u6709\u9650\u7684\uff0c\u6bd4\u5982switch\uff0ccase\u3002\u90a3\u4e48\u53ef\u4ee5\u501f\u9274\u5c40\u90e8\u5386\u53f2\u7684\u5206\u652f\u9884\u6d4b\uff0c\u5c06BHT\u66ff\u6362\u6210target-Cache\u5c31\u80fd\u6bd4\u8f83\u597d\u7684\u8fdb\u884c\u5206\u652f\u9884\u6d4b\u3002","title":"\u95f4\u63a5\u8df3\u8f6c\u7684\u5206\u652f\u9884\u6d4b"},{"location":"arch/superscalar.html#_10","text":"\u4e00\u4e2a\u5b8c\u6574\u7684\u5206\u652f\u9884\u6d4b\uff0c\u7ed3\u5408\u4e0a\u9762\u6240\u8ff0\u7684\u5404\u4e2a\u90e8\u5206","title":"\u4e00\u4e2a\u5b8c\u6574\u7684\u5206\u652f\u9884\u6d4b"},{"location":"arch/superscalar.html#_11","text":"\u53ef\u4ee5\u5728\u4e0b\u9762\u51e0\u4e2a\u65f6\u95f4\u70b9\u5bf9\u6307\u4ee4\u7684\u5206\u652f\u9884\u6d4b\u7ed3\u679c\u8fdb\u884c\u68c0\u67e5 \u89e3\u7801\u9636\u6bb5\u3002\u5bf9\u4e00\u90e8\u5206\u76f4\u63a5\u8df3\u8f6c\u6307\u4ee4\u8fdb\u884c\u5206\u652f\u9884\u6d4b\u68c0\u67e5\uff0c\u6bd4\u5982\u65e0\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\u3002 \u8bfb\u53d6\u5bc4\u5b58\u5668\u9636\u6bb5\u3002\u83b7\u53d6\u5230\u5bc4\u5b58\u5668\u503c\u5c31\u80fd\u77e5\u9053\u76ee\u6807\u5730\u5740\uff0c\u5bf9\u4e8e\u4e00\u90e8\u5206\u95f4\u63a5\u8df3\u8f6c\u5c31\u80fd\u8fdb\u884c\u9884\u6d4b\u68c0\u67e5 \u6267\u884c\u9636\u6bb5\u3002penalty\u6700\u5927\u3002\u53ef\u4ee5\u5229\u7528ROB\u6216\u8005checkpoint\u8fdb\u884c\u9884\u6d4b\u5931\u8d25\u6062\u590d\u3002\u5229\u7528ROB\u5b9e\u73b0\u8d77\u6765\u76f8\u5bf9\u7b80\u5355\uff0c\u4f7f\u7528checkpoint\u4f1a\u4f7f\u7528\u66f4\u591a\u7684\u786c\u4ef6\u8d44\u6e90\u3002","title":"\u9884\u6d4b\u5931\u8d25\u7684\u6062\u590d"},{"location":"arch/superscalar.html#_12","text":"\u5728 \u5bc4\u5b58\u5668\u91cd\u547d\u540d \u4e2d\u5df2\u7ecf\u5206\u6790\u4e86\u5176\u5b9e\u73b0\u539f\u7406\uff0c\u4f46\u6ca1\u6709\u63d0\u53ca\u7684\u662f\uff0c\u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0WAW\u548cWAR\u5047\u76f8\u5173\u3002\u8fd9\u672c\u4e66\u7684\u597d\u5904\u5c31\u662f\u5f88\u591a\u5730\u65b9\u5b9e\u73b0\u4e86\u8f6f\u786c\u7ed3\u5408\uff0c\u5b83\u5c31\u7ed9\u51fa\u4e86\u7b54\u6848\uff1a","title":"\u5bc4\u5b58\u5668\u91cd\u547d\u540d"},{"location":"arch/superscalar.html#_13","text":"\u6709\u9650\u4e2a\u6570\u7684\u5bc4\u5b58\u5668\uff0c\u5bfc\u81f4\u5bc4\u5b58\u5668\u91cd\u590d\u4f7f\u7528 \u7a0b\u5e8f\u4e2d\u7684\u5faa\u73af\u4f53\uff0c\u8fd9\u4f1a\u4ea7\u751f\u5927\u91cf\u7684WAW \u4ee3\u7801\u91cd\u7528\uff0c\u51fd\u6570\u8c03\u7528 \u867d\u7136\u53ef\u4ee5\u901a\u8fc7\u62c6\u89e3\u5faa\u73af\u4f53\u6765\u90e8\u5206\u89e3\u51b3\u95ee\u9898\uff0c\u4f46\u5360\u7528\u66f4\u591a\u7684\u5b58\u50a8\u7a7a\u95f4\u4e5f\u610f\u5473\u7740I-Cache\u7684miss\u7387\u4f1a\u4e0a\u5347\u3002\u82af\u7247\u8bbe\u8ba1\u9886\u57df\u8fd8\u771f\u662f\u5904\u5904\u90fd\u9700\u8981trade off\u3002 \u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u65e2\u7136\u6839\u672c\u539f\u56e0\u662f\u5bc4\u5b58\u5668\u4e2a\u6570\u6709\u9650\u5bfc\u81f4\u7684\uff0c\u90a3\u4e48\u5728\u5b9a\u4e49\u6307\u4ee4\u96c6\u4e4b\u521d\u4e3a\u4ec0\u4e48\u4e0d\u5b9a\u4e49\u5f88\u591a\u5bc4\u5b58\u5668\uff1f\u8981\u662f\u8bf4x64\uff0carm\u90fd\u662f\u5386\u53f2\u539f\u56e0\uff0c\u90a3\u4e48\u65b0\u664b\u7684riscv\u4e3a\u4ec0\u4e48\u4e5f\u4ec5\u4ec5\u662f32\u4e2a\u5bc4\u5b58\u5668\uff1f \u76f4\u63a5\u63d0\u4f9b128\u5bc4\u5b58\u5668\u4f1a\u6709\u4ec0\u4e48\u95ee\u9898\u5417\uff1f\u4f1a\u6709\u95ee\u9898 \u9762\u79ef\u548c\u529f\u8017\uff0c\u66f4\u591a\u7684\u5bc4\u5b58\u5668\u610f\u5473\u7740\u66f4\u591a\u7684\u9762\u79ef\u548c\u529f\u8017\uff0c\u8fd9\u4f7f\u5f97\u5728\u6307\u4ee4\u96c6\u5c42\u9762\u4e0a\u5c31\u9650\u5236\u4e86CPU\u7684\u5de5\u4f5c\u573a\u666f\uff0c\u8fd9\u79cd\u67b6\u6784\u7684CPU\u663e\u7136\u5929\u751f\u65e0\u6cd5\u5b9e\u73b0\u4f4e\u529f\u8017\u7684\u5c0f\u82af\u7247\u3002 \u4ecd\u7136\u5f88\u96be\u89e3\u51b3\u5bc4\u5b58\u5668\u4e0d\u8db3\u7684\u95ee\u9898\uff0c\u8f6f\u4ef6\u7684\u9759\u6001\u5bc4\u5b58\u5668\u5206\u914d\u6bd4\u4e0d\u4e0a\u786c\u4ef6\u7684\u52a8\u6001\u5bc4\u5b58\u5668\u5206\u914d\u3002","title":"\u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0\u5047\u76f8\u5173"},{"location":"arch/superscalar.html#_14","text":"","title":"\u5bc4\u5b58\u5668\u91cd\u547d\u540d\u7684\u5b9e\u73b0\u65b9\u5f0f"},{"location":"arch/superscalar.html#rob","text":"ROB\u7684\u7f16\u53f7\u4e0e\u7269\u7406\u5bc4\u5b58\u5668\u7684\u7f16\u53f7\u4e00\u81f4\uff0c\u6307\u4ee4\u4eceROB retire\uff0cROB\u4e2d\u7684\u7269\u7406\u5bc4\u5b58\u5668\u503c\u8f6c\u5b58\u5230\u67b6\u6784\u5bc4\u5b58\u5668\u4e2d\u3002 \u4f18\u70b9\u662f\u5bb9\u6613\u5b9e\u73b0\uff0c\u8bbe\u8ba1\u590d\u6742\u5ea6\u4e0d\u9ad8\uff0c\u53ef\u4ee5\u83b7\u5f97\u4e0d\u9519\u7684\u6027\u80fd\u3002\u7f3a\u70b9\u662f\u5bf9\u4e8e\u4e0d\u9700\u8981\u5bc4\u5b58\u5668\u91cd\u547d\u540d\u7684\u6307\u4ee4\u4e5f\u4f1a\u5360\u7528\u7269\u7406\u5bc4\u5b58\u5668\uff0c\u6d6a\u8d39\u8d44\u6e90\u3002ARF\u548cROB\u90fd\u9700\u8981\u591a\u4e2a\u8bfb\u7aef\u53e3\u3002","title":"\u4f7f\u7528ROB\u8fdb\u884c\u5bc4\u5b58\u5668\u91cd\u547d\u540d"},{"location":"arch/superscalar.html#arf","text":"\u5b83\u5b9e\u9645\u4e0a\u662f\u5bf9ROB\u6269\u5c55\u65b9\u5f0f\u7684\u4e00\u79cd\u4f18\u5316\uff0c\u89e3\u51b3\u4e86ROB\u65b9\u5f0f\u5bfc\u81f4\u7684\u90e8\u5206\u8868\u8c61\u6d6a\u8d39\u7684\u95ee\u9898\u3002","title":"\u5c06ARF\u6269\u5c55"},{"location":"arch/superscalar.html#prf","text":"\u5bc4\u5b58\u5668\u7684\u503c\u53ea\u9700\u8981\u88ab\u5199\u5165\u4e00\u6b21\uff0c\u4e0d\u9700\u8981\u7531FRF\u8f6c\u5230ARF \u4e00\u6761\u6307\u4ee4\u7684\u6e90\u5bc4\u5b58\u5668\u53ea\u4f1a\u5b58\u5728\u4e8ePRF,\u4e0d\u9700\u8981\u5224\u65ad\u53bb\u54ea\u91cc\u8bfb\u53d6","title":"\u4f7f\u7528\u7edf\u4e00\u7684PRF"},{"location":"arch/superscalar.html#_15","text":"\u4e00\u4e2a\u56db\u8defrename\u7684\u8bbe\u8ba1 \u5bf9\u4e8eRAT\u6765\u8bb2\uff0c\u8981\u9762\u5bf9\u5206\u652f\u9884\u6d4b\u5931\u8d25\u6216\u8005\u5f02\u5e38\u7684\u6062\u590d\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u6709\u4e09\u79cd\u5178\u578b\u65b9\u6cd5\uff1a checkpoint \u65b9\u6cd5\uff0c\u4f1a\u6d88\u8017\u9762\u79ef\uff0c\u589e\u52a0\u529f\u8017\uff0c\u4f46\u6062\u590d\u6bd4\u8f83\u5feb\u3002\u5c24\u5176\u662f\u5bf9\u4e8ecRAT\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5f88\u6d88\u8017\u9762\u79ef\u548c\u529f\u8017\u3002 walk\u65b9\u6cd5\u3002ROB\u4e2d\u7684\u6bcf\u6761\u6307\u4ee4\u90fd\u5b58\u50a8\u4e86\u8fd9\u6761\u6307\u4ee4\u4e4b\u524d\u5bf9\u5e94\u7684\u7269\u7406\u5bc4\u5b58\u5668\uff0c\u901a\u8fc7\u8fd9\u4e9b\u4fe1\u606f\u80fd\u591f\u628aRAT\u9010\u6b65\u7684\u8fd8\u539f\u3002\u6062\u590d\u65f6\u95f4\u6bd4\u8f83\u6162\uff0c\u4f46\u662f\u6d88\u8017\u786c\u4ef6\u8d44\u6e90\u5c11\uff0c\u66f4\u9002\u5408\u53d1\u751f\u5f02\u5e38\u65f6\u7684\u6062\u590d\u3002 architecture state. \u5728\u6d41\u6c34\u7ebf\u7684\u63d0\u4ea4\u9636\u6bb5\u4e5f\u6709\u4e00\u4e2aaRAT,\u6307\u4ee4\u53ea\u6709\u63d0\u4ea4\u4e86\u624d\u8bb0\u5f55\u5230\u8fd9\u91cc\uff0c\u8fd9\u6837\u53ea\u8981\u7b49\u5230\u53d1\u751f\u5f02\u5e38\u6216\u5206\u652f\u9884\u6d4b\u9519\u8bef\u7684\u6307\u4ee4\u63d0\u4ea4\u65f6\uff0c\u5c31\u53ef\u4ee5\u7528aRAT\u5bf9RAT\u8fdb\u884c\u6062\u590d\u3002 \u7f3a\u70b9\u5728\u4e8e\u5206\u652f\u9884\u6d4b\u5931\u8d25\u7684\u60e9\u7f5a\u53ef\u80fd\u4f1a\u53d8\u5927\uff0c\u56e0\u4e3a\u8981\u7b49\u5230\u4e4b\u524d\u7684\u6307\u4ee4\u5168\u90e8retire.","title":"\u8d85\u6807\u91cf\u5904\u7406\u5668\u91cd\u547d\u540d\u7684\u8bbe\u8ba1"},{"location":"arch/superscalar.html#_16","text":"\u53d1\u5c04\u8fc7\u7a0b\u76f8\u5bf9\u590d\u6742\uff0c\u5b83\u8981\u5b8c\u6210\u5c06\u6307\u4ee4\u5b58\u5165 Issue Queue\uff0c\u4eceissue Queue\u4e2d\u6311\u51faready\u7684\u6307\u4ee4\u9001\u5230FU\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u8fd8\u9700\u8981\u83b7\u53d6\u5bc4\u5b58\u5668\u4f9d\u8d56\u5173\u7cfb\u6765\u786e\u5b9a\u6307\u4ee4\u662f\u5426\u8d44\u6e90\u5747\u5df2ready\u3002\u540c\u65f6\u4e5f\u9700\u8981\u652f\u6301bypass\u3002","title":"\u53d1\u5c04"},{"location":"arch/superscalar.html#_17","text":"\u6240\u6709\u6307\u4ee4\u5171\u7528\u4e00\u4e2a\u53d1\u5c04\u961f\u5217\uff0c\u79f0\u4e3a\u96c6\u4e2d\u5f0f\u53d1\u5c04\u961f\u5217(Centralized Issue Queue, CIQ); \u6bcf\u4e2aFU\u90fd\u6709\u5355\u72ec\u7684\u53d1\u5c04\u961f\u5217\uff0c\u5219\u79f0\u4e3a\u5206\u5e03\u5f0f\u7684\u53d1\u5c04\u961f\u5217(Distributed Issue Queue, DIQ)\u3002 \u82af\u7247\u8bbe\u8ba1\u9886\u57df\u603b\u662f\u6ca1\u6709\u975e\u9ed1\u5373\u767d\uff0c\u603b\u662f\u9700\u8981\u8fdb\u884ctrade off, \u6839\u636e\u9700\u6c42\u6765\u7efc\u5408\u8003\u8651\u3002\u5f80\u5f80\u6700\u7ec8\u662fCIQ\u548cDIQ\u7684\u6298\u4e2d\u65b9\u6848\u3002 CIQ\u7684\u5229\u5f0a\uff1a \u4f18\u70b9\uff1a \u80fd\u591f\u5145\u5206\u5229\u7528\u961f\u5217\u7684\u7a7a\u95f4 \u7f3a\u70b9\uff1a \u9009\u62e9\u7535\u8def\u548c\u5524\u9192\u7535\u8def\u90fd\u4f1a\u590d\u6742\uff0c\u9762\u79ef\u548c\u5ef6\u8fdf\u90fd\u4f1a\u5927 DIQ\u7684\u5229\u5f0a\uff1a \u4f18\u70b9\uff1a \u7b80\u5316\u4e86\u9009\u62e9\u7535\u8def\u7684\u8bbe\u8ba1 \u7f3a\u70b9\uff1a \u7a7a\u95f4\u5229\u7528\u7387\u76f8\u5bf9\u4f4e\uff0c\u53ef\u80fd\u4f1a\u56e0\u4e3a\u4e00\u4e2a\u961f\u5217\u6ca1\u6709\u7a7a\u95f4\u800c\u963b\u585e\u6240\u6709\u961f\u5217 \u5524\u9192\u64cd\u4f5c\u7684\u5e03\u7ebf\u590d\u6742\u5ea6\u4e5f\u4f1a\u4e0a\u5347","title":"\u53d1\u5c04\u961f\u5217"},{"location":"arch/superscalar.html#_18","text":"\u6570\u636e\u6355\u6349\uff1a\u5728\u6d41\u6c34\u7ebf\u7684\u53d1\u5c04\u9636\u6bb5\u4e4b\u524d\u8bfb\u53d6\u5bc4\u5b58\u5668\uff0c\u6ca1\u6709ready\u7684\u5bc4\u5b58\u5668\u8bb0\u5f55\u5bc4\u5b58\u5668\u53f7\u3002\u9700\u8981\u5c06\u8fd9\u4e9b\u6570\u636e\u653e\u5230payload RAM\u3002 \u4f18\u70b9\uff1a \u6240\u9700\u5bc4\u5b58\u5668\u5806\u7684\u8bfb\u7aef\u53e3\u6570\u6bd4\u8f83\u5c11\uff0c\u9700\u8981\u7269\u7406\u5bbd\u5ea6 * 2\u7684\u8bfb\u7aef\u53e3\u6570 \u7f3a\u70b9\uff1a \u9700\u8981payload RAM\uff0c\u4f1a\u5360\u7528\u9762\u79ef \u5bc4\u5b58\u5668\u6570\u636e\u6709\u642c\u79fb\uff0c\u76f8\u5bf9\u529f\u8017\u4f1a\u66f4\u5927\u3002 \u901f\u5ea6\u76f8\u5bf9\u4f4e\u4e00\u4e9b \u975e\u6570\u636e\u6355\u6349\uff1a\u5728\u6d41\u6c34\u7ebf\u7684\u53d1\u5c04\u9636\u6bb5\u4e4b\u540e\u8bfb\u53d6\u7269\u7406\u5bc4\u5b58\u5668\u5806\u3002\u83b7\u53d6\u7684\u503c\u76f4\u63a5\u8fdb\u5165FU\u3002 \u4f18\u70b9\uff1a \u529f\u8017\u76f8\u5bf9\u4f4e \u901f\u5ea6\u76f8\u5bf9\u5feb \u9762\u79ef\u76f8\u5bf9\u5c0f \u7f3a\u70b9\uff1a \u9700\u8981\u5bc4\u5b58\u5668\u5806\u7684\u8bfb\u7aef\u53e3\u591a\uff0c\u9700\u8981\u53d1\u5c04\u5bbd\u5ea6 * 2\u7684\u7aef\u53e3 \u4f7f\u7528ROB\u8fdb\u884c\u5bc4\u5b58\u5668\u91cd\u547d\u540d\u65f6\uff0c\u4e00\u822c\u90fd\u4f1a\u642d\u914d\u4f7f\u7528\u6570\u636e\u6355\u6349\u7684\u53d1\u5c04\u65b9\u5f0f\uff0c\u56e0\u4e3a\u4f7f\u7528ROB\u8fdb\u884c\u5bc4\u5b58\u5668\u91cd\u547d\u540d\u65f6\uff0c\u771f\u6b63\u7684\u5bc4\u5b58\u5668\u7684\u503c\u53ef\u80fd\u5728ARF\u4e2d\u4e5f\u53ef\u80fd\u5728ROB\u4e2d\uff0c\u83b7\u53d6\u8fd9\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u4f1a\u5f88\u9ebb\u70e6\u3002\u6570\u636e\u6355\u6349\u56e0\u4e3a\u4f7f\u7528payload RAM\uff0c\u4e0d\u9700\u8981\u518d\u8bbf\u95ee\u5bc4\u5b58\u5668\u5806\uff0c\u4e5f\u5c31\u4e0d\u9700\u8981\u5173\u5fc3\u5bc4\u5b58\u5668\u503c\u53bb\u54ea\u91cc\u83b7\u53d6\u3002\u663e\u7136\uff0cCPU\u8bbe\u8ba1\u662f\u9700\u8981\u5168\u76d8\u8003\u8651\u7684\uff0c\u5fc5\u987b\u5177\u5907\u5168\u5c40\u89c6\u89d2\u3002","title":"\u6570\u636e\u6355\u6349\u4e0e\u975e\u6570\u636e\u6355\u6349"},{"location":"arch/superscalar.html#_19","text":"\u538b\u7f29\u7684\u53d1\u5c04\u961f\u5217\u5c31\u50cf\u53e0\u7740\u7684\u4e66\u4e00\u6837\uff0c\u62bd\u6389\u4e00\u672c\uff0c\u5728\u5176\u4e0a\u9762\u7684\u90fd\u4f1a\u4e0b\u843d\u3002\u6bcf\u672c\u4e66\u90fd\u653e\u5728\u4e00\u4e2a\u683c\u5b50\u91cc\uff0c\u62bd\u6389\u540e\uff0c\u5176\u4ed6\u4e66\u90fd\u4e0d\u52a8\uff0c\u5c31\u662f\u975e\u538b\u7f29\u53d1\u5c04\u961f\u5217\u3002 \u538b\u7f29\u7684\u53d1\u5c04\u961f\u5217\uff1a \u4f18\u70b9\uff1a \u9700\u8981\u6bcf\u4e00\u4e2a\u8868\u9879\u524d\u90fd\u6709\u4e00\u4e2a\u591a\u8def\u9009\u62e9\u5668\uff0c\u9009\u62e9\u4ece\u4e0a\u9762\u7684\u8868\u9879\u8fd8\u662f\u81ea\u8eab\u8fdb\u884c\u66f4\u65b0\u3002 \u9009\u62e9\u7535\u8def\u7b80\u5355\uff0c\u53ea\u9700\u8981\u4f7f\u7528\u4f18\u5148\u7ea7\u7f16\u7801\u5668\u8fdb\u884c\u9009\u62e9\u5373\u53ef \u5206\u914d\u7535\u8def\u7b80\u5355\uff0c\u7a7a\u95f2\u7a7a\u95f4\u603b\u662f\u5904\u4e8e\u4e0a\u90e8 \u7f3a\u70b9\uff1a \u8017\u9762\u79ef\u3002\u9700\u8981\u5927\u91cf\u7684\u591a\u8def\u9009\u62e9\u5668\u652f\u6301\u538b\u7f29 \u529f\u8017\u5927\u3002\u4e00\u76f4\u5728\u79fb\u52a8 \u975e\u538b\u7f29\u7684\u53d1\u5c04\u961f\u5217\uff1a \u4f18\u70b9\uff1a \u529f\u8017\u548c\u9762\u79ef\u5c0f \u4e0d\u9700\u8981\u590d\u6742\u7684\u591a\u8def\u9009\u62e9\u5668 \u7f3a\u70b9\uff1a \u9009\u62e9\u7535\u8def\u548c\u5206\u914d\u7535\u8def\u90fd\u4f1a\u590d\u6742","title":"\u538b\u7f29\u4e0e\u975e\u538b\u7f29"},{"location":"arch/superscalar.html#_20","text":"\u60f3\u8981\u4f7f\u5b58\u5728\u5148\u5199\u540e\u8bfb\u76f8\u5173\u6027\u7684\u76f8\u90bb\u6307\u4ee4\u53ef\u4ee5\u80cc\u9760\u80cc\u6267\u884c\uff0c\u5fc5\u987b\u5c06\u4ef2\u88c1\u548c\u5524\u9192\u4e24\u4e2a\u64cd\u4f5c\u5728\u4e00\u4e2a\u5468\u671f\u5185\u5b8c\u6210 \u5c06\u6d41\u6c34\u7ebf\u7684\u4ef2\u88c1\u548c\u5524\u9192\u5206\u5f00\u5230\u4e24\u4e2a\u5468\u671f\uff0cIPC\u5927\u7ea6\u4f1a\u4e0b\u964d10%~15%","title":"\u53d1\u5c04\u8fc7\u7a0b\u7684\u6d41\u6c34\u7ebf"},{"location":"arch/superscalar.html#oldest-first","text":"\u8d8a\u65e7\u7684\u6307\u4ee4\uff0c\u548c\u5b83\u5b58\u5728\u76f8\u5173\u6027\u7684\u6307\u4ee4\u4e5f\u5c31\u8d8a\u591a\uff0c\u56e0\u6b64\u6700\u5148\u6267\u884coldest\u6307\u4ee4\uff0c\u6982\u7387\u4e0a\u5c31\u53ef\u4ee5\u5524\u9192\u66f4\u591a\u7684\u6307\u4ee4\uff0c\u80fd\u591f\u6709\u6548\u7684\u63d0\u9ad8\u5904\u7406\u5668\u6267\u884c\u6307\u4ee4\u7684\u5e76\u884c\u5ea6\uff0c\u800c\u4e14\u8fd8\u80fd\u53ca\u65f6\u91ca\u653e\u5360\u636e\u7684\u5176\u4ed6\u8d44\u6e90","title":"\u4e3a\u4ec0\u4e48\u8981\u5b9e\u73b0oldest-first\u529f\u80fd"},{"location":"arch/superscalar.html#_21","text":"\u53ef\u4ee5\u5229\u7528ROB\u6765\u83b7\u53d6\u5e74\u9f84\u4fe1\u606f\uff0c\u4f46ROB\u5b9e\u8d28\u4e0a\u662fFIFO,\u662f\u5faa\u73af\u4f7f\u7528\u7684\u3002\u56e0\u6b64\u65e0\u6cd5\u7b80\u5355\u7684\u901a\u8fc7ROB\u7684\u5730\u5740\u6765\u5224\u522b\u5e74\u9f84\uff0c\u5728\u5730\u5740\u524d\u9762\u589e\u52a0\u4e00\u4f4d\uff0c\u5f53\u7ffb\u8f6c\u65f6\uff0c\u4e5f\u540c\u65f6\u7ffb\u8f6c\u8fd9\u4e2a\u4f4d\uff0c\u8fd9\u6837\u5728FIFO\u4e2d\uff0c\u4e00\u4e2a\u5faa\u73af\u5185\u7684\u8868\u9879\u90fd\u4f1a\u6709\u540c\u6837\u7684\u5730\u5740\u6700\u9ad8\u4f4d\u3002\u56e0\u4e3aROB\u662f\u4ece\u5c0f\u5730\u5740\u5f00\u59cb\u5199\u5165\uff0c\u56e0\u6b64\u5982\u679c\u9ad8\u5730\u5740\u6709\u6700\u9ad8\u4f4d\u4e0d\u4e00\u6837\u7684\u8868\u9879\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u4e0a\u4e00\u6b21\u5faa\u73af\u4e2d\u6b8b\u7559\u7684\u8868\u9879\u3002\u56e0\u6b64\u6709\u5982\u4e0b\u7ed3\u8bba\uff1a \u4f4d\u7f6e\u503c\u76f8\u540c\u65f6\uff0cROB\u5730\u5740\u503c\u8d8a\u5c0f\uff0c\u5bf9\u5e94\u7684\u6307\u4ee4\u8d8a\u65e7 \u4f4d\u7f6e\u503c\u4e0d\u540c\u65f6\uff0cROB\u5730\u5740\u503c\u8d8a\u5927\uff0c\u5bf9\u5e94\u7684\u6307\u4ee4\u8d8a\u65e7 \u8fd9\u662f\u4e00\u79cd\u5907\u4efd\u601d\u60f3\uff0c\u867d\u7136\u7ed9\u6bcf\u4e2a\u4eba\u5206\u914d\u4e86\u665a\u9910\uff0c\u4f46\u4e5f\u4e0d\u60f3\u6bcf\u4e2a\u4eba\u90fd\u7ed9\u8db3\u591f\u7684\u98df\u7269\uff0c\u5c31\u591a\u5907\u4e86\u51e0\u4efd\uff0c\u7ed9\u90a3\u4e9b\u996d\u91cf\u5927\u7684\u4eba \u21a9 \u5982\u679cCPU\u80fd\u591f\u6709\u7c7b\u4f3cAI\u7684\u5b66\u4e60\u673a\u5236\uff0c\u6709\u6bd4\u8f83\u5927\u7684\u7a7a\u95f4\u80fd\u591f\u7528\u6765\u5b66\u4e60\u6570\u636e\u5730\u5740\u7684\u89c4\u5f8b\uff0c\u5728\u9884\u53d6\u65f6\u80fd\u591f\u4fdd\u8bc1\u6bd4\u8f83\u9ad8\u7684\u51c6\u786e\u7387\uff0c\u90a3\u4e48\u6548\u7387\u4e00\u5b9a\u80fd\u63d0\u9ad8\u4e0d\u5c11 \u21a9 \u60f3\u8c61\u4e00\u4e0b\u6781\u9650\u60c5\u51b5\uff0c\u5982\u679c\u6bcf\u4e2a\u6570\u636e\u90fd\u6709\u4e00\u4e2a\u7aef\u53e3\uff0c\u90a3\u4e48\u5fc5\u7136\u4e5f\u4e0d\u4f1a\u5b58\u5728\u7aef\u53e3\u51b2\u7a81\uff0c\u4f46\u662f\u4ee3\u4ef7\u4e5f\u662f\u5de8\u5927\u7684\uff0c\u9700\u8981\u65e0\u6570\u6839\u7ebf\u6765\u8fde\u63a5\u3002 \u21a9","title":"\u83b7\u53d6\u6307\u4ee4\u5e74\u9f84\u4fe1\u606f"},{"location":"arch/think1.html","text":"\u4e00\u4e2a\u5fae\u67b6\u6784\u8bbe\u8ba1\u5f15\u53d1\u7684\u601d\u8003 \u00b6 \u770b\u4e86\u4e00\u4e2a\u5bf9\u4e8ePMA\u7684\u5bc4\u5b58\u5668\u7684\u8bbe\u8ba1\uff0c\u7531\u6b64\u5f15\u53d1\u4e86\u4e00\u4e9b\u601d\u8003\u548c\u611f\u609f \u8bbe\u8ba1 \u00b6 \u7b80\u8981\u63cf\u8ff0\u4e00\u4e0b\u8fd9\u4e2a\u8bbe\u8ba1\uff0c\u91cd\u70b9\u5728\u5bc4\u5b58\u5668\u53f7\u90e8\u5206\uff0c\u5b83\u5c06PMA\u8fd9\u4e2a\u6a21\u5757\u8bbe\u8ba1\u6210\u4e86\u82e5\u5e72\u4e2a\u7ec4\uff0c\u6bcf\u4e2a\u7ec4\u5b9e\u73b0\u4e86\u4e09\u4e2a\u5bc4\u5b58\u5668\uff0c \u5c5e\u6027\u5bc4\u5b58\u5668\uff0c\u8d77\u59cb\u5730\u5740\u5bc4\u5b58\u5668\uff0c\u7ed3\u675f\u5730\u5740\u5bc4\u5b58\u5668\uff0c\u8fd8\u6709\u4e00\u4e2a\u4fdd\u7559\u5bc4\u5b58\u5668\uff0c\u5927\u6982\u7684\u5bc4\u5b58\u5668\u53f7\u5206\u914d\u5982\u4e0b \u7ec4 \u5c5e\u6027\u5bc4\u5b58\u5668\u53f7 \u8d77\u59cb\u5730\u5740\u5bc4\u5b58\u5668\u53f7 \u7ed3\u675f\u5730\u5740\u5bc4\u5b58\u5668\u53f7 \u4fdd\u7559\u5bc4\u5b58\u5668\u53f7 0 3C0 3C1 3C2 3C3 1 3C4 3C5 3C6 3C7 2 3C8 3C9 3CA 3CB \u76f8\u6bd4\u5927\u5bb6\u5e94\u8be5\u770b\u660e\u767d\u4e86\uff0c\u6bcf\u4e2a\u7ec4\u90fd\u662f\u4e00\u6837\u7684\uff0c\u5206\u4e86\u82e5\u5e72\u4e2a\u7ec4 \u601d\u8003 \u00b6 \u4e4d\u770b\u8d77\u6765\u8fd9\u6ca1\u5565\u95ee\u9898\uff0c\u4f3c\u4e4e\u5f88\u5408\u7406\u3002\u4f46\u53c8\u53bb\u770b\u4e86\u540c\u7c7b\u578b\u7684PMP\u7684\u5bc4\u5b58\u5668\u8bbe\u8ba1\uff0c\u4ee5\u53cahpm\u7684\u8bbe\u8ba1\uff0c\u53d1\u73b0\u540c\u7c7b\u578b\u7684\u5bc4\u5b58\u5668\u90fd\u662f\u987a\u5e8f\u6392\u5217\u7684\uff0c\u6ca1\u6709\u5206\u7ec4\u3002 \u90a3\u5982\u679c\u6211\u662f\u5fae\u67b6\u6784\u8bbe\u8ba1\u8005\uff0c\u6211\u4f1a\u600e\u4e48\u9009\u62e9\u5462\uff1f\u662f\u5728\u5bc4\u5b58\u5668\u4e0a\u660e\u786e\u7684\u5212\u5206\u7ec4\u8fd8\u662f\u50cfPMP\u4e00\u6837\uff0c\u540c\u7c7b\u578b\u7684\u987a\u5e8f\u6392\u5217\uff1f \u76ee\u524d\uff0c\u5728\u8fd9\u65b9\u9762\u6211\u8fd8\u89c1\u7684\u592a\u5c11\uff0c\u4e5f\u6ca1\u6709\u673a\u4f1a\u80fd\u591f\u8ddf\u8fd9\u65b9\u9762\u7684\u4e13\u5bb6\u8ba8\u8bba\uff0c\u5e0c\u671b\u540e\u7eed\uff0c\u968f\u7740\u5728\u8fd9\u4e2a\u9886\u57df\u7684\u5b66\u4e60\uff0c\u80fd\u591f\u6709\u81ea\u5df1\u7684\u89c1\u89e3\u3002 \u65e0\u8bba\u5982\u4f55\uff0c\u5728\u4e3a\u67b6\u6784\u8bbe\u8ba1\u65b9\u9762\uff0c\u4efb\u4f55\u4e00\u70b9\u513f\u8bbe\u8ba1\u90fd\u80fd\u4f53\u73b0\u51fa\u662f\u5426\u7ecf\u9a8c\u5145\u8db3\u3002","title":"\u4e00\u4e2a\u5fae\u67b6\u6784\u8bbe\u8ba1\u5f15\u53d1\u7684\u601d\u8003"},{"location":"arch/think1.html#_1","text":"\u770b\u4e86\u4e00\u4e2a\u5bf9\u4e8ePMA\u7684\u5bc4\u5b58\u5668\u7684\u8bbe\u8ba1\uff0c\u7531\u6b64\u5f15\u53d1\u4e86\u4e00\u4e9b\u601d\u8003\u548c\u611f\u609f","title":"\u4e00\u4e2a\u5fae\u67b6\u6784\u8bbe\u8ba1\u5f15\u53d1\u7684\u601d\u8003"},{"location":"arch/think1.html#_2","text":"\u7b80\u8981\u63cf\u8ff0\u4e00\u4e0b\u8fd9\u4e2a\u8bbe\u8ba1\uff0c\u91cd\u70b9\u5728\u5bc4\u5b58\u5668\u53f7\u90e8\u5206\uff0c\u5b83\u5c06PMA\u8fd9\u4e2a\u6a21\u5757\u8bbe\u8ba1\u6210\u4e86\u82e5\u5e72\u4e2a\u7ec4\uff0c\u6bcf\u4e2a\u7ec4\u5b9e\u73b0\u4e86\u4e09\u4e2a\u5bc4\u5b58\u5668\uff0c \u5c5e\u6027\u5bc4\u5b58\u5668\uff0c\u8d77\u59cb\u5730\u5740\u5bc4\u5b58\u5668\uff0c\u7ed3\u675f\u5730\u5740\u5bc4\u5b58\u5668\uff0c\u8fd8\u6709\u4e00\u4e2a\u4fdd\u7559\u5bc4\u5b58\u5668\uff0c\u5927\u6982\u7684\u5bc4\u5b58\u5668\u53f7\u5206\u914d\u5982\u4e0b \u7ec4 \u5c5e\u6027\u5bc4\u5b58\u5668\u53f7 \u8d77\u59cb\u5730\u5740\u5bc4\u5b58\u5668\u53f7 \u7ed3\u675f\u5730\u5740\u5bc4\u5b58\u5668\u53f7 \u4fdd\u7559\u5bc4\u5b58\u5668\u53f7 0 3C0 3C1 3C2 3C3 1 3C4 3C5 3C6 3C7 2 3C8 3C9 3CA 3CB \u76f8\u6bd4\u5927\u5bb6\u5e94\u8be5\u770b\u660e\u767d\u4e86\uff0c\u6bcf\u4e2a\u7ec4\u90fd\u662f\u4e00\u6837\u7684\uff0c\u5206\u4e86\u82e5\u5e72\u4e2a\u7ec4","title":"\u8bbe\u8ba1"},{"location":"arch/think1.html#_3","text":"\u4e4d\u770b\u8d77\u6765\u8fd9\u6ca1\u5565\u95ee\u9898\uff0c\u4f3c\u4e4e\u5f88\u5408\u7406\u3002\u4f46\u53c8\u53bb\u770b\u4e86\u540c\u7c7b\u578b\u7684PMP\u7684\u5bc4\u5b58\u5668\u8bbe\u8ba1\uff0c\u4ee5\u53cahpm\u7684\u8bbe\u8ba1\uff0c\u53d1\u73b0\u540c\u7c7b\u578b\u7684\u5bc4\u5b58\u5668\u90fd\u662f\u987a\u5e8f\u6392\u5217\u7684\uff0c\u6ca1\u6709\u5206\u7ec4\u3002 \u90a3\u5982\u679c\u6211\u662f\u5fae\u67b6\u6784\u8bbe\u8ba1\u8005\uff0c\u6211\u4f1a\u600e\u4e48\u9009\u62e9\u5462\uff1f\u662f\u5728\u5bc4\u5b58\u5668\u4e0a\u660e\u786e\u7684\u5212\u5206\u7ec4\u8fd8\u662f\u50cfPMP\u4e00\u6837\uff0c\u540c\u7c7b\u578b\u7684\u987a\u5e8f\u6392\u5217\uff1f \u76ee\u524d\uff0c\u5728\u8fd9\u65b9\u9762\u6211\u8fd8\u89c1\u7684\u592a\u5c11\uff0c\u4e5f\u6ca1\u6709\u673a\u4f1a\u80fd\u591f\u8ddf\u8fd9\u65b9\u9762\u7684\u4e13\u5bb6\u8ba8\u8bba\uff0c\u5e0c\u671b\u540e\u7eed\uff0c\u968f\u7740\u5728\u8fd9\u4e2a\u9886\u57df\u7684\u5b66\u4e60\uff0c\u80fd\u591f\u6709\u81ea\u5df1\u7684\u89c1\u89e3\u3002 \u65e0\u8bba\u5982\u4f55\uff0c\u5728\u4e3a\u67b6\u6784\u8bbe\u8ba1\u65b9\u9762\uff0c\u4efb\u4f55\u4e00\u70b9\u513f\u8bbe\u8ba1\u90fd\u80fd\u4f53\u73b0\u51fa\u662f\u5426\u7ecf\u9a8c\u5145\u8db3\u3002","title":"\u601d\u8003"},{"location":"arch/tlb.html","text":"TLB \u00b6 ASID\u4e0eTLB \u00b6","title":"TLB"},{"location":"arch/tlb.html#tlb","text":"","title":"TLB"},{"location":"arch/tlb.html#asidtlb","text":"","title":"ASID\u4e0eTLB"},{"location":"arch/vector.html","text":"\u5404\u5bb6\u5411\u91cf\u6307\u4ee4\u6269\u5c55 \u00b6 x86: AVX ARM: SVE RISCV: RVV \u5404\u5bb6\u90fd\u6709\u5411\u91cf\u6307\u4ee4\u96c6\u6269\u5c55\uff0c\u5728\u8fd9\u91cc\u5c31\u5206\u6790\u4e00\u4e0b\u5404\u5bb6\u7684\u5b9e\u73b0","title":"\u5404\u5bb6\u5411\u91cf\u6307\u4ee4\u6269\u5c55"},{"location":"arch/vector.html#_1","text":"x86: AVX ARM: SVE RISCV: RVV \u5404\u5bb6\u90fd\u6709\u5411\u91cf\u6307\u4ee4\u96c6\u6269\u5c55\uff0c\u5728\u8fd9\u91cc\u5c31\u5206\u6790\u4e00\u4e0b\u5404\u5bb6\u7684\u5b9e\u73b0","title":"\u5404\u5bb6\u5411\u91cf\u6307\u4ee4\u6269\u5c55"},{"location":"arch/hotchip33/hotchip33.html","text":"hotchip33 \u00b6 \u7b2c33\u5c4ahotchip\u5927\u4f1a\u603b\u7ed3 samsung PIM \u00b6 \u4ecb\u7ecd\u4e86\u4e09\u661f\u7684\u5b58\u5185\u8ba1\u7b97\u67b6\u6784\u3002\u8981\u7406\u89e3\u5b83\u7684\u67b6\u6784\uff0c\u5c31\u9700\u8981\u5148\u4e86\u89e3\u5b58\u5185\u8ba1\u7b97 \u4ec0\u4e48\u662f\u5b58\u5185\u8ba1\u7b97 \u00b6 \u51af\u8bfa\u4f9d\u66fc\u7684\u67b6\u6784\u662f\u8ba1\u7b97\u64cd\u4f5c\u548c\u5185\u5b58\u64cd\u4f5c\u5206\u79bb\u7684\uff0c\u5c24\u5176\u662f\u73b0\u5728\u4e3b\u6d41\u7684RISC\u67b6\u6784\uff0c\u6709\u4e13\u95e8\u7684load/store\u6307\u4ee4\u8d1f\u8d23\u5185\u5b58\u64cd\u4f5c\uff0c\u5176\u4ed6\u6307\u4ee4\u8d1f\u8d23\u76f4\u63a5\u5bf9\u5bc4\u5b58\u5668\u8fdb\u884c\u8ba1\u7b97\u3002\u51af\u8bfa\u4f9d\u66fc\u67b6\u6784\u5728\u6784\u5efa\u4e4b\u521d\u662f\u5047\u8bbe\u5904\u7406\u5668\u548c\u5185\u5b58\u901f\u5ea6\u5f88\u63a5\u8fd1\uff0c\u4f46\u73b0\u5728\u8ba1\u7b97\u5355\u5143\u7684\u6027\u80fd\u968f\u7740\u6469\u5c14\u5b9a\u5f8b\u4e00\u8def\u98d9\u5347\uff0c\u800c\u5b58\u50a8\u5355\u5143\u76f8\u8f83\u800c\u8a00\u6027\u80fd\u63d0\u5347\u4e0d\u5927\uff0c\u56e0\u6b64\uff0cDRAM\u7684\u6027\u80fd\u5df2\u7ecf\u6210\u4e3a\u4e86\u6574\u4e2a\u7cfb\u7edf\u6027\u80fd\u7684\u91cd\u8981\u74f6\u9888\uff0c\u4e5f\u5c31\u662f\u6240\u8c13\u7684\u201c\u5185\u5b58\u5899\u201d\uff0c\u8fd9\u9650\u5236\u4e86\u5904\u7406\u5668\u7684\u8ba1\u7b97\u6027\u80fd\u548c\u80fd\u6548\u6bd4\u3002\u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u4e3aCPU\u4e0e\u5185\u5b58\u4e4b\u95f4\u7684\u8ddd\u79bb\u592a\u8fdc\u5bfc\u81f4\u4e86\u5185\u5b58\u5899\uff0c\u5c31\u50cf\u60c5\u4fa3\u5f02\u5730\u604b\u60c5\uff0c\u56e0\u4e3a\u4e3e\u4f8b\u9650\u5236\u4e86\u611f\u60c5\u7684\u53d1\u5c55\uff0c\u8981\u60f3\u611f\u60c5\u6709\u7a81\u7834\uff0c\u8981\u4e48\u7537\u7684\u53bb\u5973\u7684\u57ce\u5e02\uff0c\u8981\u4e48\u5973\u7684\u53bb\u7537\u7684\u57ce\u5e02\u3002\u5f88\u663e\u7136\uff0c\u5728AI\u8fd9\u79cd\u6570\u636e\u5bc6\u96c6\u7684\u573a\u666f\u4e2d\uff0c\u4f3c\u4e4e\u628a\u8ba1\u7b97\u642c\u5230\u79bb\u5b58\u50a8\u66f4\u8fd1\u7684\u5730\u65b9\u66f4\u80fd\u63d0\u9ad8\u6574\u4f53\u6027\u80fd\u548c\u80fd\u6548\u6bd4\u3002\u56e0\u6b64\u5c31\u6709\u4e86\u5b58\u5185\u8ba1\u7b97\u3002 \u5b58\u5185\u8ba1\u7b97(PIM processing-in-memory)\u53ef\u4ee5\u7a81\u7834\u5185\u5b58\u74f6\u9888\u3002\u5c3d\u7ba1\u6709\u5f88\u591a\u4e0d\u540c\u7684\u589e\u52a0\u5e26\u5bbd\u7684\u65b9\u6cd5\uff0c\u4f46\u7531\u4e8e\u53d7\u5230PCB\u5e03\u7ebf\uff0c\u529f\u8017\u53ca\u53d1\u70ed\u91cf\uff0cCPU\u63a5\u53e3\u6570\u91cf\u7b49\u7269\u7406\u4e0a\u7684\u9650\u5236\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5f88\u96be\u6709\u7a81\u7834\u6027\u7684\u63d0\u5347\u3002 PIM\u65e8\u5728\u63d0\u5347\u5e26\u5bbd\u5bc6\u96c6\u578bworkloads(\u76ee\u524d\u4e3b\u8981\u662fAI\u9886\u57df)\u7684\u6027\u80fd\uff0c\u901a\u8fc7\u51cf\u5c11\u5185\u5b58\u6570\u636e\u642c\u79fb\u6765\u63d0\u5347\u80fd\u91cf\u6548\u7387\u3002 \u5b58\u5185\u8ba1\u7b97\u7684\u672c\u8d28\u662f\u4f1a\u4f7f\u7528\u6a21\u62df\u8ba1\u7b97(\u5982\u679c\u4e0d\u662f\u4f7f\u7528\u6a21\u62df\u4fe1\u53f7,\u90a3\u4f3c\u4e4e\u548c\u51af\u8bfa\u4f9d\u66fc\u67b6\u6784\u4e5f\u6ca1\u4ec0\u4e48\u533a\u522b\u5427)\uff0c\u8fd9\u4e5f\u5c31\u610f\u5473\u7740\u5176\u76ee\u524d\u53ea\u80fd\u5e94\u7528\u5728AI\u5e02\u573a\u3002\u800c\u4e14\u5b58\u5185\u8ba1\u7b97\u6280\u672f\u60f3\u8981\u7a81\u7834\uff0c\u8981\u5728\u5b58\u50a8\u7ed3\u6784\u4e0a\u505a\u6539\u8fdb\uff0c\u4f7f\u5f97\u5b58\u50a8\u5355\u5143\u66f4\u9002\u5408\u505a\u8ba1\u7b97\u3002 \u5b58\u7b97\u4e00\u4f53\u76ee\u524d\u7cbe\u5ea6\u4e0d\u9ad8\uff0c\u5927\u6982\u57288bit, \u66f4\u9002\u5408\u7aef\u7684\u5d4c\u5165\u5f0fAI\u573a\u666f\u3002 \u4e09\u661f\u7684Aquabolt-XL\u67b6\u6784 \u00b6 \u4e00\u4e2a16\u8def\u7684FP16 SIMD\u6570\u7ec4\uff0c\u652f\u6301FP16\u4e58\u548c\u52a0 risc\u98ce\u683c\u768432bit\u6307\u4ee4\u96c6\uff0c\u4e00\u5171\u4e09\u79cd\u6307\u4ee4\u7c7b\u578b\u5171\u8ba19\u6761\u6307\u4ee4 \u6307\u4ee4\u53c2\u6570\u53ef\u4ee5\u662f GRF_A, GRF_B \u5411\u91cf\u5bc4\u5b58\u5668\uff0cSRF\u6807\u91cf\u5bc4\u5b58\u5668\u6216\u8005bank row buffer. \u4e09\u661f\u63d0\u4f9b\u4e86\u4e00\u6574\u5957\u7684software stack\u6765\u652f\u6301PIM. graphcore colossue Mk2 IPU \u00b6 \u4f17\u6838\u7684\u7fd8\u695a\uff0c\u76ee\u524dMk2 \u67091472\u4e2a\u6838\uff0c\u6bcf\u4e2a\u6838\u5e26\u6709624KiB\u7684sram, \u91c7\u7528TSMC\u76847nm\u5de5\u827a\uff0c\u8fbe\u5230\u4e86823mm 2 (\u8fd9\u4e48\u5927\u7684\u9762\u79ef\uff0cSRAM\u5360\u4e86\u4e00\u534a, \u903b\u8f91\u5355\u5143\u5360\u4e86\u00bc), \u4e3b\u98911.325GHz, \u7b97\u529b\u53ef\u8fbe250Tflop/s \u4ece\u4e0a\u56fe\u7684\u6027\u80fd\u7edf\u8ba1\u80fd\u591f\u770b\u51fa\uff0cgraphcore\u7684\u4f18\u52bf\u5728\u4e8efp32\u7684\u7b97\u529b\uff0c \u7531\u4e8eMk2\u5185\u90e8\u8fbe\u5230\u4e86897MiB\u7684SRAM, \u4f30\u8ba1\u529f\u8017\u8868\u73b0\u8981\u6bd4A100\u597d\u3002 \u6bcf\u4e2a\u6838\u88ab\u79f0\u4e3a\u4e00\u4e2aTile, \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e2aExchange.\u6587\u6863\u4e2d\u6ca1\u6709\u5bf9tile\u53caexchange\u505a\u8fc7\u591a\u7684\u4ecb\u7ecd\uff0c\u4e5f\u6ca1\u6cd5\u7b80\u5355\u7684\u901a\u8fc7\u6587\u6863\u83b7\u53d6\u4e00\u4e9b\u8bbe\u8ba1\u4fe1\u606f\u3002\u4f46\u6211\u4eec\u80fd\u591f\u770b\u51fatile\u4e0d\u662f\u4e00\u4e2a\u7b80\u5355\u768432bit\u7684\u5355\u53d1\u5c04\u6216\u53cc\u53d1\u5c04CPU\u3002 \u5b83\u67097\u4e2a\u7a0b\u5e8f\u4e0a\u4e0b\u6587\uff0c6\u4e2a\u8f6e\u8be2\u7684\u6d41\u6c34\u7ebfslot, \u6bcf\u4e2aslot\u6267\u884c\u2159\u4e2aclock. \u5b83\u6709\u4e00\u4e2a\u5f3a\u5927\u7684\u6d6e\u70b9\u5355\u5143\uff0c \u5e76\u4e14\u652f\u6301\u4e00\u4e9b\u8d85\u8d8a\u51fd\u6570\u3002 \u4e0b\u9762\u662f\u5b83\u5728\u62c6\u5206kernel\u65f6\u7684\u7b56\u7565\uff0c \u53ef\u4ee5\u770b\u51fa\uff0c\u5b83\u8fd8\u662f\u62c6\u5206\u6210\u5f88\u5c0f\u7684\u77e9\u9635\u6765\u8fdb\u884c\u8fd0\u7b97\uff0c\u5e76\u4e14\u4e2d\u95f4\u7ed3\u679c\u91c7\u7528fp32\u8fdb\u884c\u7d2f\u52a0,\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u62c6\u5206\uff0c\u5355\u4ece\u4e0a\u9762\u7b80\u5355\u7684tile\u7ed3\u6784\u56fe\u4e0a\u8fd8\u5f88\u96be\u5206\u6790\u6e05\u695a\u3002 \u4e0b\u9762\u662f\u8fd0\u884cbert-l \u7f51\u7edc\u7684\u65f6\u5019\u7684\u6574\u4f53\u8fd0\u884c\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u6240\u6709tile\u90fd\u662f\u6309\u7167sync,exchange,compute\u8fd9\u4e09\u4e2a\u72b6\u6001\u8fdb\u884c\u5faa\u73af\uff0c\u800c\u4e14\u5de5\u5177\u94fe\u5bf9\u4e8e\u6574\u4e2a\u7f51\u7edc\u7684\u4f18\u5316\u505a\u7684\u5df2\u7ecf\u5f88\u597d\u4e86\uff0c\u8d1f\u8f7d\u6bd4\u8f83\u5747\u8861\u3002 graphcore\u7ed9\u51fa\u4e86\u4e0d\u7528HBM(\u5728\u5b58\u50a8\u5355\u5143\u4e0a\u548cDDR\u6ca1\u6709\u592a\u5927\u5dee\u5f02\uff0c\u4e3b\u8981\u662f\u5c06\u5185\u5b58\u548c\u4e3b\u82af\u7247\u5c01\u5728\u4e00\u4e2a\u82af\u7247\u91cc\u9762\uff0c\u8fd9\u6837\u5c31\u8de8\u8d8a\u4e86\u5c01\u88c5\u5bf9\u82af\u7247\u5f15\u811a\u6570\u76ee\u7684\u9650\u5236\uff0c\u5927\u5927\u7f29\u77ed\u4e86dram\u548c\u4e3b\u82af\u7247\u76f4\u63a5\u7684\u8ddd\u79bb\uff0c\u540c\u65f6\u91c7\u75283D\u5806\u53e0\u6280\u672f\uff0c\u76f4\u63a5\u901a\u8fc7TSV\u6253\u5b54\u7ad6\u76f4\u5806\u53e0\u5728\u4e00\u8d77\uff0c\u9ad8\u7aef\u7684DDR\u4e5f\u91c7\u53d6\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5f53\u7136\u8fd9\u79cd\u65b9\u5f0f\u5bf9\u6563\u70ed\u8981\u6c42\u66f4\u9ad8)\u7684\u7406\u7531 \u5185\u5b58\u5bb9\u91cf\u51b3\u5b9a\u4e86AI\u80fd\u505a\u54ea\u4e9b\u4e8b\u60c5\uff0c\u5e26\u5bbd\u53ea\u662f\u9650\u5236\u4e86\u6709\u591a\u5feb GPU\u548cTPU\u5c1d\u8bd5\u4f7f\u7528HBM\u540c\u65f6\u89e3\u51b3\u5e26\u5bbd\u548c\u5bb9\u91cf\u95ee\u9898 HBM\u975e\u5e38\u6602\u8d35\uff0c\u6709\u5bb9\u91cf\u9650\u5236\uff0c\u8981\u591a\u82b1100W\u7f8e\u5143\u4ee5\u4e0a IPU(graphcore\u79f0\u81ea\u5bb6\u4e3aIPU)\u4f7f\u7528SRAM\u6765\u89e3\u51b3\u5e26\u5bbd\u95ee\u9898\uff0c\u4f7f\u7528DDR\u6765\u89e3\u51b3\u5bb9\u91cf\u95ee\u9898 HBM\u7684\u4ef7\u683c\u5927\u6982\u662fDDR4\u768410\u500d($/GB), 40GB\u7684HBM\u4ef7\u683c\u5927\u6982\u662f\u4e00\u4e2areticle-sized\u5904\u7406\u5668\u5c01\u88c5\u76843\u500d\uff0cIPU\u8fd9\u79cd\u57fa\u4e8eDDR\u7684\u7cfb\u7edf\u53ef\u4ee5\u628a\u7701\u4e0b\u6765\u7684\u94b1\u7528\u4e8e\u751f\u4ea7\u66f4\u591a\u7684\u5904\u7406\u5668 \u5728DRAM\u4e2d\u7684\u6743\u91cd\u548cfeature\u6570\u636e\u5982\u4f55\u4e0eSRAM\u8fdb\u884c\u914d\u5408\uff0c\u9ad8\u6548\u7684\u8fdb\u884c\u8fd0\u7b97\u5462\uff1f ARM neoverse \u00b6 \u4ecb\u7ecd\u4e86ARM\u7b2c\u4e8c\u4ee3\u9ad8\u6027\u80fd\u57fa\u7840\u67b6\u6784CPU\u548c\u7cfb\u7edfIP\u30022018\u5e74arm\u63a8\u51fa\u4e86Neoverse\u5904\u7406\u5668\u5e73\u53f0,\u65e8\u5728\u9488\u5bf9\u6570\u636e\u4e2d\u5fc3\u5904\u7406\u5668\u5e02\u573a\uff0c2019\u5e74\u641e\u5b9a\u4e86N1\u7248\u672c\uff0c20\u5e74\u53c8\u53d1\u5e03\u4e86N2\u7248\u672c\u3002 neoverse\u5206\u4e3a\u4e09\u5927\u7cfb\u5217: V-serise \u4e3b\u6253\u9ad8\u6027\u80fd\uff0c\u652f\u6301SVE 2x256b\uff0c 32-128 cores, 80-350W N-serise \u6027\u80fd\uff0c\u529f\u8017\uff0c\u9762\u79ef\u5747\u8861\uff0c 12-36 cores, 30-80W E-serise \u5f3a\u8c03\u80fd\u6548\uff0c\u529f\u8017\u548c\u9762\u79ef, 4-16 cores, 20-35W","title":"hotchip33"},{"location":"arch/hotchip33/hotchip33.html#hotchip33","text":"\u7b2c33\u5c4ahotchip\u5927\u4f1a\u603b\u7ed3","title":"hotchip33"},{"location":"arch/hotchip33/hotchip33.html#samsung-pim","text":"\u4ecb\u7ecd\u4e86\u4e09\u661f\u7684\u5b58\u5185\u8ba1\u7b97\u67b6\u6784\u3002\u8981\u7406\u89e3\u5b83\u7684\u67b6\u6784\uff0c\u5c31\u9700\u8981\u5148\u4e86\u89e3\u5b58\u5185\u8ba1\u7b97","title":"samsung PIM"},{"location":"arch/hotchip33/hotchip33.html#_1","text":"\u51af\u8bfa\u4f9d\u66fc\u7684\u67b6\u6784\u662f\u8ba1\u7b97\u64cd\u4f5c\u548c\u5185\u5b58\u64cd\u4f5c\u5206\u79bb\u7684\uff0c\u5c24\u5176\u662f\u73b0\u5728\u4e3b\u6d41\u7684RISC\u67b6\u6784\uff0c\u6709\u4e13\u95e8\u7684load/store\u6307\u4ee4\u8d1f\u8d23\u5185\u5b58\u64cd\u4f5c\uff0c\u5176\u4ed6\u6307\u4ee4\u8d1f\u8d23\u76f4\u63a5\u5bf9\u5bc4\u5b58\u5668\u8fdb\u884c\u8ba1\u7b97\u3002\u51af\u8bfa\u4f9d\u66fc\u67b6\u6784\u5728\u6784\u5efa\u4e4b\u521d\u662f\u5047\u8bbe\u5904\u7406\u5668\u548c\u5185\u5b58\u901f\u5ea6\u5f88\u63a5\u8fd1\uff0c\u4f46\u73b0\u5728\u8ba1\u7b97\u5355\u5143\u7684\u6027\u80fd\u968f\u7740\u6469\u5c14\u5b9a\u5f8b\u4e00\u8def\u98d9\u5347\uff0c\u800c\u5b58\u50a8\u5355\u5143\u76f8\u8f83\u800c\u8a00\u6027\u80fd\u63d0\u5347\u4e0d\u5927\uff0c\u56e0\u6b64\uff0cDRAM\u7684\u6027\u80fd\u5df2\u7ecf\u6210\u4e3a\u4e86\u6574\u4e2a\u7cfb\u7edf\u6027\u80fd\u7684\u91cd\u8981\u74f6\u9888\uff0c\u4e5f\u5c31\u662f\u6240\u8c13\u7684\u201c\u5185\u5b58\u5899\u201d\uff0c\u8fd9\u9650\u5236\u4e86\u5904\u7406\u5668\u7684\u8ba1\u7b97\u6027\u80fd\u548c\u80fd\u6548\u6bd4\u3002\u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u4e3aCPU\u4e0e\u5185\u5b58\u4e4b\u95f4\u7684\u8ddd\u79bb\u592a\u8fdc\u5bfc\u81f4\u4e86\u5185\u5b58\u5899\uff0c\u5c31\u50cf\u60c5\u4fa3\u5f02\u5730\u604b\u60c5\uff0c\u56e0\u4e3a\u4e3e\u4f8b\u9650\u5236\u4e86\u611f\u60c5\u7684\u53d1\u5c55\uff0c\u8981\u60f3\u611f\u60c5\u6709\u7a81\u7834\uff0c\u8981\u4e48\u7537\u7684\u53bb\u5973\u7684\u57ce\u5e02\uff0c\u8981\u4e48\u5973\u7684\u53bb\u7537\u7684\u57ce\u5e02\u3002\u5f88\u663e\u7136\uff0c\u5728AI\u8fd9\u79cd\u6570\u636e\u5bc6\u96c6\u7684\u573a\u666f\u4e2d\uff0c\u4f3c\u4e4e\u628a\u8ba1\u7b97\u642c\u5230\u79bb\u5b58\u50a8\u66f4\u8fd1\u7684\u5730\u65b9\u66f4\u80fd\u63d0\u9ad8\u6574\u4f53\u6027\u80fd\u548c\u80fd\u6548\u6bd4\u3002\u56e0\u6b64\u5c31\u6709\u4e86\u5b58\u5185\u8ba1\u7b97\u3002 \u5b58\u5185\u8ba1\u7b97(PIM processing-in-memory)\u53ef\u4ee5\u7a81\u7834\u5185\u5b58\u74f6\u9888\u3002\u5c3d\u7ba1\u6709\u5f88\u591a\u4e0d\u540c\u7684\u589e\u52a0\u5e26\u5bbd\u7684\u65b9\u6cd5\uff0c\u4f46\u7531\u4e8e\u53d7\u5230PCB\u5e03\u7ebf\uff0c\u529f\u8017\u53ca\u53d1\u70ed\u91cf\uff0cCPU\u63a5\u53e3\u6570\u91cf\u7b49\u7269\u7406\u4e0a\u7684\u9650\u5236\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5f88\u96be\u6709\u7a81\u7834\u6027\u7684\u63d0\u5347\u3002 PIM\u65e8\u5728\u63d0\u5347\u5e26\u5bbd\u5bc6\u96c6\u578bworkloads(\u76ee\u524d\u4e3b\u8981\u662fAI\u9886\u57df)\u7684\u6027\u80fd\uff0c\u901a\u8fc7\u51cf\u5c11\u5185\u5b58\u6570\u636e\u642c\u79fb\u6765\u63d0\u5347\u80fd\u91cf\u6548\u7387\u3002 \u5b58\u5185\u8ba1\u7b97\u7684\u672c\u8d28\u662f\u4f1a\u4f7f\u7528\u6a21\u62df\u8ba1\u7b97(\u5982\u679c\u4e0d\u662f\u4f7f\u7528\u6a21\u62df\u4fe1\u53f7,\u90a3\u4f3c\u4e4e\u548c\u51af\u8bfa\u4f9d\u66fc\u67b6\u6784\u4e5f\u6ca1\u4ec0\u4e48\u533a\u522b\u5427)\uff0c\u8fd9\u4e5f\u5c31\u610f\u5473\u7740\u5176\u76ee\u524d\u53ea\u80fd\u5e94\u7528\u5728AI\u5e02\u573a\u3002\u800c\u4e14\u5b58\u5185\u8ba1\u7b97\u6280\u672f\u60f3\u8981\u7a81\u7834\uff0c\u8981\u5728\u5b58\u50a8\u7ed3\u6784\u4e0a\u505a\u6539\u8fdb\uff0c\u4f7f\u5f97\u5b58\u50a8\u5355\u5143\u66f4\u9002\u5408\u505a\u8ba1\u7b97\u3002 \u5b58\u7b97\u4e00\u4f53\u76ee\u524d\u7cbe\u5ea6\u4e0d\u9ad8\uff0c\u5927\u6982\u57288bit, \u66f4\u9002\u5408\u7aef\u7684\u5d4c\u5165\u5f0fAI\u573a\u666f\u3002","title":"\u4ec0\u4e48\u662f\u5b58\u5185\u8ba1\u7b97"},{"location":"arch/hotchip33/hotchip33.html#aquabolt-xl","text":"\u4e00\u4e2a16\u8def\u7684FP16 SIMD\u6570\u7ec4\uff0c\u652f\u6301FP16\u4e58\u548c\u52a0 risc\u98ce\u683c\u768432bit\u6307\u4ee4\u96c6\uff0c\u4e00\u5171\u4e09\u79cd\u6307\u4ee4\u7c7b\u578b\u5171\u8ba19\u6761\u6307\u4ee4 \u6307\u4ee4\u53c2\u6570\u53ef\u4ee5\u662f GRF_A, GRF_B \u5411\u91cf\u5bc4\u5b58\u5668\uff0cSRF\u6807\u91cf\u5bc4\u5b58\u5668\u6216\u8005bank row buffer. \u4e09\u661f\u63d0\u4f9b\u4e86\u4e00\u6574\u5957\u7684software stack\u6765\u652f\u6301PIM.","title":"\u4e09\u661f\u7684Aquabolt-XL\u67b6\u6784"},{"location":"arch/hotchip33/hotchip33.html#graphcore-colossue-mk2-ipu","text":"\u4f17\u6838\u7684\u7fd8\u695a\uff0c\u76ee\u524dMk2 \u67091472\u4e2a\u6838\uff0c\u6bcf\u4e2a\u6838\u5e26\u6709624KiB\u7684sram, \u91c7\u7528TSMC\u76847nm\u5de5\u827a\uff0c\u8fbe\u5230\u4e86823mm 2 (\u8fd9\u4e48\u5927\u7684\u9762\u79ef\uff0cSRAM\u5360\u4e86\u4e00\u534a, \u903b\u8f91\u5355\u5143\u5360\u4e86\u00bc), \u4e3b\u98911.325GHz, \u7b97\u529b\u53ef\u8fbe250Tflop/s \u4ece\u4e0a\u56fe\u7684\u6027\u80fd\u7edf\u8ba1\u80fd\u591f\u770b\u51fa\uff0cgraphcore\u7684\u4f18\u52bf\u5728\u4e8efp32\u7684\u7b97\u529b\uff0c \u7531\u4e8eMk2\u5185\u90e8\u8fbe\u5230\u4e86897MiB\u7684SRAM, \u4f30\u8ba1\u529f\u8017\u8868\u73b0\u8981\u6bd4A100\u597d\u3002 \u6bcf\u4e2a\u6838\u88ab\u79f0\u4e3a\u4e00\u4e2aTile, \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e2aExchange.\u6587\u6863\u4e2d\u6ca1\u6709\u5bf9tile\u53caexchange\u505a\u8fc7\u591a\u7684\u4ecb\u7ecd\uff0c\u4e5f\u6ca1\u6cd5\u7b80\u5355\u7684\u901a\u8fc7\u6587\u6863\u83b7\u53d6\u4e00\u4e9b\u8bbe\u8ba1\u4fe1\u606f\u3002\u4f46\u6211\u4eec\u80fd\u591f\u770b\u51fatile\u4e0d\u662f\u4e00\u4e2a\u7b80\u5355\u768432bit\u7684\u5355\u53d1\u5c04\u6216\u53cc\u53d1\u5c04CPU\u3002 \u5b83\u67097\u4e2a\u7a0b\u5e8f\u4e0a\u4e0b\u6587\uff0c6\u4e2a\u8f6e\u8be2\u7684\u6d41\u6c34\u7ebfslot, \u6bcf\u4e2aslot\u6267\u884c\u2159\u4e2aclock. \u5b83\u6709\u4e00\u4e2a\u5f3a\u5927\u7684\u6d6e\u70b9\u5355\u5143\uff0c \u5e76\u4e14\u652f\u6301\u4e00\u4e9b\u8d85\u8d8a\u51fd\u6570\u3002 \u4e0b\u9762\u662f\u5b83\u5728\u62c6\u5206kernel\u65f6\u7684\u7b56\u7565\uff0c \u53ef\u4ee5\u770b\u51fa\uff0c\u5b83\u8fd8\u662f\u62c6\u5206\u6210\u5f88\u5c0f\u7684\u77e9\u9635\u6765\u8fdb\u884c\u8fd0\u7b97\uff0c\u5e76\u4e14\u4e2d\u95f4\u7ed3\u679c\u91c7\u7528fp32\u8fdb\u884c\u7d2f\u52a0,\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u62c6\u5206\uff0c\u5355\u4ece\u4e0a\u9762\u7b80\u5355\u7684tile\u7ed3\u6784\u56fe\u4e0a\u8fd8\u5f88\u96be\u5206\u6790\u6e05\u695a\u3002 \u4e0b\u9762\u662f\u8fd0\u884cbert-l \u7f51\u7edc\u7684\u65f6\u5019\u7684\u6574\u4f53\u8fd0\u884c\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u6240\u6709tile\u90fd\u662f\u6309\u7167sync,exchange,compute\u8fd9\u4e09\u4e2a\u72b6\u6001\u8fdb\u884c\u5faa\u73af\uff0c\u800c\u4e14\u5de5\u5177\u94fe\u5bf9\u4e8e\u6574\u4e2a\u7f51\u7edc\u7684\u4f18\u5316\u505a\u7684\u5df2\u7ecf\u5f88\u597d\u4e86\uff0c\u8d1f\u8f7d\u6bd4\u8f83\u5747\u8861\u3002 graphcore\u7ed9\u51fa\u4e86\u4e0d\u7528HBM(\u5728\u5b58\u50a8\u5355\u5143\u4e0a\u548cDDR\u6ca1\u6709\u592a\u5927\u5dee\u5f02\uff0c\u4e3b\u8981\u662f\u5c06\u5185\u5b58\u548c\u4e3b\u82af\u7247\u5c01\u5728\u4e00\u4e2a\u82af\u7247\u91cc\u9762\uff0c\u8fd9\u6837\u5c31\u8de8\u8d8a\u4e86\u5c01\u88c5\u5bf9\u82af\u7247\u5f15\u811a\u6570\u76ee\u7684\u9650\u5236\uff0c\u5927\u5927\u7f29\u77ed\u4e86dram\u548c\u4e3b\u82af\u7247\u76f4\u63a5\u7684\u8ddd\u79bb\uff0c\u540c\u65f6\u91c7\u75283D\u5806\u53e0\u6280\u672f\uff0c\u76f4\u63a5\u901a\u8fc7TSV\u6253\u5b54\u7ad6\u76f4\u5806\u53e0\u5728\u4e00\u8d77\uff0c\u9ad8\u7aef\u7684DDR\u4e5f\u91c7\u53d6\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5f53\u7136\u8fd9\u79cd\u65b9\u5f0f\u5bf9\u6563\u70ed\u8981\u6c42\u66f4\u9ad8)\u7684\u7406\u7531 \u5185\u5b58\u5bb9\u91cf\u51b3\u5b9a\u4e86AI\u80fd\u505a\u54ea\u4e9b\u4e8b\u60c5\uff0c\u5e26\u5bbd\u53ea\u662f\u9650\u5236\u4e86\u6709\u591a\u5feb GPU\u548cTPU\u5c1d\u8bd5\u4f7f\u7528HBM\u540c\u65f6\u89e3\u51b3\u5e26\u5bbd\u548c\u5bb9\u91cf\u95ee\u9898 HBM\u975e\u5e38\u6602\u8d35\uff0c\u6709\u5bb9\u91cf\u9650\u5236\uff0c\u8981\u591a\u82b1100W\u7f8e\u5143\u4ee5\u4e0a IPU(graphcore\u79f0\u81ea\u5bb6\u4e3aIPU)\u4f7f\u7528SRAM\u6765\u89e3\u51b3\u5e26\u5bbd\u95ee\u9898\uff0c\u4f7f\u7528DDR\u6765\u89e3\u51b3\u5bb9\u91cf\u95ee\u9898 HBM\u7684\u4ef7\u683c\u5927\u6982\u662fDDR4\u768410\u500d($/GB), 40GB\u7684HBM\u4ef7\u683c\u5927\u6982\u662f\u4e00\u4e2areticle-sized\u5904\u7406\u5668\u5c01\u88c5\u76843\u500d\uff0cIPU\u8fd9\u79cd\u57fa\u4e8eDDR\u7684\u7cfb\u7edf\u53ef\u4ee5\u628a\u7701\u4e0b\u6765\u7684\u94b1\u7528\u4e8e\u751f\u4ea7\u66f4\u591a\u7684\u5904\u7406\u5668 \u5728DRAM\u4e2d\u7684\u6743\u91cd\u548cfeature\u6570\u636e\u5982\u4f55\u4e0eSRAM\u8fdb\u884c\u914d\u5408\uff0c\u9ad8\u6548\u7684\u8fdb\u884c\u8fd0\u7b97\u5462\uff1f","title":"graphcore colossue Mk2 IPU"},{"location":"arch/hotchip33/hotchip33.html#arm-neoverse","text":"\u4ecb\u7ecd\u4e86ARM\u7b2c\u4e8c\u4ee3\u9ad8\u6027\u80fd\u57fa\u7840\u67b6\u6784CPU\u548c\u7cfb\u7edfIP\u30022018\u5e74arm\u63a8\u51fa\u4e86Neoverse\u5904\u7406\u5668\u5e73\u53f0,\u65e8\u5728\u9488\u5bf9\u6570\u636e\u4e2d\u5fc3\u5904\u7406\u5668\u5e02\u573a\uff0c2019\u5e74\u641e\u5b9a\u4e86N1\u7248\u672c\uff0c20\u5e74\u53c8\u53d1\u5e03\u4e86N2\u7248\u672c\u3002 neoverse\u5206\u4e3a\u4e09\u5927\u7cfb\u5217: V-serise \u4e3b\u6253\u9ad8\u6027\u80fd\uff0c\u652f\u6301SVE 2x256b\uff0c 32-128 cores, 80-350W N-serise \u6027\u80fd\uff0c\u529f\u8017\uff0c\u9762\u79ef\u5747\u8861\uff0c 12-36 cores, 30-80W E-serise \u5f3a\u8c03\u80fd\u6548\uff0c\u529f\u8017\u548c\u9762\u79ef, 4-16 cores, 20-35W","title":"ARM neoverse"},{"location":"c/cast.html","text":"\u641e\u6e05\u695a\u5404\u79cdcast \u00b6 static_cast\u3001dynamic_cast\u3001reinterpret_cast \u548c const_cast\u5230\u5e95\u5e94\u8be5\u600e\u4e48\u9009\u62e9\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u6ca1\u600e\u4e48\u719f\u7ec3\u638c\u63e1c++\u7684\u4eba\uff0c\u6025\u9700\u5f04\u6e05\u695a\u3002 static_cast \u00b6 dynamic_cast \u00b6 dynamic_cast \u53ea\u80fd\u591f\u7528\u5728\u6307\u5411\u7c7b\u7684\u6307\u9488\u6216\u8005\u5f15\u7528\u4e0a(\u6216\u8005void*)","title":"\u641e\u6e05\u695a\u5404\u79cdcast"},{"location":"c/cast.html#cast","text":"static_cast\u3001dynamic_cast\u3001reinterpret_cast \u548c const_cast\u5230\u5e95\u5e94\u8be5\u600e\u4e48\u9009\u62e9\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u6ca1\u600e\u4e48\u719f\u7ec3\u638c\u63e1c++\u7684\u4eba\uff0c\u6025\u9700\u5f04\u6e05\u695a\u3002","title":"\u641e\u6e05\u695a\u5404\u79cdcast"},{"location":"c/cast.html#static_cast","text":"","title":"static_cast"},{"location":"c/cast.html#dynamic_cast","text":"dynamic_cast \u53ea\u80fd\u591f\u7528\u5728\u6307\u5411\u7c7b\u7684\u6307\u9488\u6216\u8005\u5f15\u7528\u4e0a(\u6216\u8005void*)","title":"dynamic_cast"},{"location":"c/complement.html","text":"\u8865\u7801\u7ecf\u5178\u6848\u4f8b \u00b6 \u8865\u7801\u7ecf\u5178\u6848\u4f8b \u6848\u4f8b \u8865\u7801\u76f8\u5173\u57fa\u7840\u603b\u7ed3 \u6848\u4f8b \u00b6 \u5728\u5ba1\u6838\u4e0b\u5c5e\u63d0\u4ea4\u7684\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u6709\u8fd9\u6837\u4e00\u6761\u4fee\u6539, \u4fee\u6539\u5185\u5bb9\u4e3a\u4e0b\u9762\u53c2\u8003\u4ee3\u7801\u7684\u5e26+\u53f7\u7684\u4e24\u884c\uff0c \u4ee3\u7801\u4ec5\u662f\u53c2\u8003\uff0c \u4ece\u6211\u4eec\u7684\u5de5\u7a0b\u4ee3\u7801\u4e2d\u622a\u53d6\u4e86\u90e8\u5206 static inline int LM75_TEMP_FROM_REG ( u16 reg ) { /* use integer division instead of equivalent right shift to guarantee arithmetic shift and preserve the sign */ return (( s16 ) reg / 128 ) * 500 ; } int tmp75_temp_get ( struct i2c_client * client ) { struct lm75_data * data = lm75_unpdate_device ( & client -> dev ); int temp = LM75_TEMP_FROM_REG ( data -> temp [ 0 ]) / 1000 ; + if ( temp | 0x80 ) + temp = - ( 256 - temp ); return temp ; } \u90a3\u4e48 data->temp[0] \u662f\u4ecetmp75 \u4e2d\u8bfb\u53d6\u768416\u4f4d\u5bc4\u5b58\u5668\u503c\uff0c \u5177\u4f53\u6e29\u5ea6\u4e0e\u503c\u7684\u5bf9\u5e94\u5173\u7cfb\u53c2\u8003\u4e0b\u8868 16bit\u5bc4\u5b58\u5668\u5b9a\u4e49\u53c2\u8003\u4e0b\u8868 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5185\u6838\u5728\u5904\u7406\u8fd9\u4e2a\u5bc4\u5b58\u5668\u503c\u5230\u6e29\u5ea6\u503c\u8f6c\u6362\u7684\u65f6\u5019\uff0c \u5904\u7406\u7684\u975e\u5e38\u7b80\u6d01\uff0cLM75_TEMP_FROM_REG \u6ca1\u6709\u4efb\u4f55\u5224\u5b9a\uff0c\u4ec5\u4ec5\u662f\u901a\u8fc7\u4e00\u4e2a\u5f3a\u5236\u8f6c\u6362\u5c31\u5b8c\u6210\u4e86\u7531\u5bc4\u5b58\u5668\u503c\u5230\u6e29\u5ea6\u7684\u8f6c\u6362\uff0c \u4e0d\u5f97\u4e0d\u4f69\u670d\u9ad8\u624b\u5c31\u662f\u9ad8\u624b \u90a3\u4e48\u518d\u770b\u6211\u4eec\u7684\u961f\u5458\uff0c \u6ca1\u6709\u7406\u89e3\u5185\u6838\u8fd9\u6837\u505a\u7684\u539f\u7406\uff0c \u8fd8\u89c9\u5f97\u4ec5\u4ec5\u4e00\u4e2aLM75_TEMP_FROM_REG \u6ca1\u80fd\u5b8c\u6210\u6e29\u5ea6\u8f6c\u6362\uff0c \u5728\u6e29\u5ea6\u8d1f\u503c\u7684\u65f6\u5019\u4f1a\u51fa\u95ee\u9898\uff0c \u7ed3\u679c\u52a0\u4e0a\u4e86\u4e24\u884c\u5224\u65ad\uff0c \u628a\u6b63\u786e\u7684\u6539\u9519\u4e86\u3002 \u8865\u7801\u76f8\u5173\u57fa\u7840\u603b\u7ed3 \u00b6 todo...","title":"\u8865\u7801\u7ecf\u5178\u6848\u4f8b"},{"location":"c/complement.html#_1","text":"\u8865\u7801\u7ecf\u5178\u6848\u4f8b \u6848\u4f8b \u8865\u7801\u76f8\u5173\u57fa\u7840\u603b\u7ed3","title":"\u8865\u7801\u7ecf\u5178\u6848\u4f8b"},{"location":"c/complement.html#_2","text":"\u5728\u5ba1\u6838\u4e0b\u5c5e\u63d0\u4ea4\u7684\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u6709\u8fd9\u6837\u4e00\u6761\u4fee\u6539, \u4fee\u6539\u5185\u5bb9\u4e3a\u4e0b\u9762\u53c2\u8003\u4ee3\u7801\u7684\u5e26+\u53f7\u7684\u4e24\u884c\uff0c \u4ee3\u7801\u4ec5\u662f\u53c2\u8003\uff0c \u4ece\u6211\u4eec\u7684\u5de5\u7a0b\u4ee3\u7801\u4e2d\u622a\u53d6\u4e86\u90e8\u5206 static inline int LM75_TEMP_FROM_REG ( u16 reg ) { /* use integer division instead of equivalent right shift to guarantee arithmetic shift and preserve the sign */ return (( s16 ) reg / 128 ) * 500 ; } int tmp75_temp_get ( struct i2c_client * client ) { struct lm75_data * data = lm75_unpdate_device ( & client -> dev ); int temp = LM75_TEMP_FROM_REG ( data -> temp [ 0 ]) / 1000 ; + if ( temp | 0x80 ) + temp = - ( 256 - temp ); return temp ; } \u90a3\u4e48 data->temp[0] \u662f\u4ecetmp75 \u4e2d\u8bfb\u53d6\u768416\u4f4d\u5bc4\u5b58\u5668\u503c\uff0c \u5177\u4f53\u6e29\u5ea6\u4e0e\u503c\u7684\u5bf9\u5e94\u5173\u7cfb\u53c2\u8003\u4e0b\u8868 16bit\u5bc4\u5b58\u5668\u5b9a\u4e49\u53c2\u8003\u4e0b\u8868 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5185\u6838\u5728\u5904\u7406\u8fd9\u4e2a\u5bc4\u5b58\u5668\u503c\u5230\u6e29\u5ea6\u503c\u8f6c\u6362\u7684\u65f6\u5019\uff0c \u5904\u7406\u7684\u975e\u5e38\u7b80\u6d01\uff0cLM75_TEMP_FROM_REG \u6ca1\u6709\u4efb\u4f55\u5224\u5b9a\uff0c\u4ec5\u4ec5\u662f\u901a\u8fc7\u4e00\u4e2a\u5f3a\u5236\u8f6c\u6362\u5c31\u5b8c\u6210\u4e86\u7531\u5bc4\u5b58\u5668\u503c\u5230\u6e29\u5ea6\u7684\u8f6c\u6362\uff0c \u4e0d\u5f97\u4e0d\u4f69\u670d\u9ad8\u624b\u5c31\u662f\u9ad8\u624b \u90a3\u4e48\u518d\u770b\u6211\u4eec\u7684\u961f\u5458\uff0c \u6ca1\u6709\u7406\u89e3\u5185\u6838\u8fd9\u6837\u505a\u7684\u539f\u7406\uff0c \u8fd8\u89c9\u5f97\u4ec5\u4ec5\u4e00\u4e2aLM75_TEMP_FROM_REG \u6ca1\u80fd\u5b8c\u6210\u6e29\u5ea6\u8f6c\u6362\uff0c \u5728\u6e29\u5ea6\u8d1f\u503c\u7684\u65f6\u5019\u4f1a\u51fa\u95ee\u9898\uff0c \u7ed3\u679c\u52a0\u4e0a\u4e86\u4e24\u884c\u5224\u65ad\uff0c \u628a\u6b63\u786e\u7684\u6539\u9519\u4e86\u3002","title":"\u6848\u4f8b"},{"location":"c/complement.html#_3","text":"todo...","title":"\u8865\u7801\u76f8\u5173\u57fa\u7840\u603b\u7ed3"},{"location":"c/cplus.html","text":"C++\u64cd\u4f5c\u7b26\u91cd\u8f7d \u00b6 C++\u64cd\u4f5c\u7b26\u91cd\u8f7d operator-reload operator-reload \u00b6 #include <iostream> class obj { public : void say_hello ( void ) const { std :: cout << \"hello world\" << std :: endl ; } }; class Test { public : obj * _obj ; Test ( obj * p ) : _obj ( p ) {}; inline const obj * operator -> () const { return _obj ; } inline bool operator <= ( const Test & a ) { std :: cout << \"op <=\" << std :: endl ; return 1 ; } }; int main ( void ) { obj o1 ; Test a ( & o1 ); a -> say_hello (); const obj * b = a . operator -> (); bool val = ( a <= a ); a . operator <= ( a ); b -> say_hello (); return 0 ; }","title":"C++\u64cd\u4f5c\u7b26\u91cd\u8f7d"},{"location":"c/cplus.html#c","text":"C++\u64cd\u4f5c\u7b26\u91cd\u8f7d operator-reload","title":"C++\u64cd\u4f5c\u7b26\u91cd\u8f7d"},{"location":"c/cplus.html#operator-reload","text":"#include <iostream> class obj { public : void say_hello ( void ) const { std :: cout << \"hello world\" << std :: endl ; } }; class Test { public : obj * _obj ; Test ( obj * p ) : _obj ( p ) {}; inline const obj * operator -> () const { return _obj ; } inline bool operator <= ( const Test & a ) { std :: cout << \"op <=\" << std :: endl ; return 1 ; } }; int main ( void ) { obj o1 ; Test a ( & o1 ); a -> say_hello (); const obj * b = a . operator -> (); bool val = ( a <= a ); a . operator <= ( a ); b -> say_hello (); return 0 ; }","title":"operator-reload"},{"location":"c/cpp-param-pack.html","text":"c++ parameter pack \u00b6 \u662f\u5426\u6211\u4eec\u5728\u4ee3\u7801\u4e2d\u89c1\u8fc7int..., \u662f\u5426\u6211\u4eec\u5728\u4ee3\u7801\u4e2d\u89c1\u8fc7sizeof...\uff0c\u662f\u5426\u6211\u4eec\u5728\u4ee3\u7801\u4e2d\u89c1\u8fc7args... \u8fd9\u4e9b\u90fd\u662fparameter pack, \u6b64\u5904\u5f15\u7528\u5b98\u65b9\u6587\u6863\u6765\u8bb0\u5f55parameter pack ...\u610f\u5473\u7740\u4efb\u610f\u957f\u7684\u4e00\u4e32\u53c2\u6570\u6253\u5305\u5728\u4e00\u8d77 https://en.cppreference.com/w/cpp/language/parameter_pack","title":"c++ parameter pack"},{"location":"c/cpp-param-pack.html#c-parameter-pack","text":"\u662f\u5426\u6211\u4eec\u5728\u4ee3\u7801\u4e2d\u89c1\u8fc7int..., \u662f\u5426\u6211\u4eec\u5728\u4ee3\u7801\u4e2d\u89c1\u8fc7sizeof...\uff0c\u662f\u5426\u6211\u4eec\u5728\u4ee3\u7801\u4e2d\u89c1\u8fc7args... \u8fd9\u4e9b\u90fd\u662fparameter pack, \u6b64\u5904\u5f15\u7528\u5b98\u65b9\u6587\u6863\u6765\u8bb0\u5f55parameter pack ...\u610f\u5473\u7740\u4efb\u610f\u957f\u7684\u4e00\u4e32\u53c2\u6570\u6253\u5305\u5728\u4e00\u8d77 https://en.cppreference.com/w/cpp/language/parameter_pack","title":"c++ parameter pack"},{"location":"c/gcc_tools.html","text":"GCC \u5de5\u5177\u53ca\u76f8\u5173\u4ecb\u7ecd \u00b6 GCC \u5de5\u5177\u53ca\u76f8\u5173\u4ecb\u7ecd gcc\u5e38\u7528\u547d\u4ee4 riscv-GAS\u6269\u5c55\u6c47\u7f16\u6307\u4ee4\u7684\u6b65\u9aa4 step1-\u4fee\u6539opcode\u5934\u6587\u4ef6 step2-\u4fee\u6539opcode\u6e90\u6587\u4ef6 step3-\u4fee\u6539\u53c2\u6570\u6821\u9a8c\u51fd\u6570 step4-\u6dfb\u52a0\u6307\u4ee4\u7ec4\u88c5\u5904\u7406 step5-\u6dfb\u52a0\u6307\u4ee4\u6253\u5370\u4fe1\u606f step6-\u540c\u6b65\u4fee\u6539gdb\u76f8\u5173\u6587\u4ef6 strip\u5de5\u5177 readelf\u5de5\u5177 objcopy\u5de5\u5177 objcopy\u5c06elf\u8f6c\u6362\u4e3abin objcopy\u4ec5\u8f93\u51fa\u67d0\u4e00\u4e2a\u8282\u533a \u6307\u5b9a\u7a7a\u767d\u533a\u586b\u5145\u503c gcc\u5e38\u7528\u547d\u4ee4 \u00b6 \u7f16\u8bd1\u76ee\u6807\u63a7\u5236 -E Preprocess only ; do not compile, assemble or link. -S Compile only ; do not assemble or link. -c Compile and assemble, but do not link. -o <file> Place the output into <file>. \u7f16\u8bd1\u5355\u4e2a\u6c47\u7f16\u6587\u4ef6 \u6c47\u7f16\u6e90\u7801test.S .section \".text.init\" .globl _start _start: la x1 , data1 add x2 , x1 , x3 sub x1 , x3 , x4 mul x5 , x1 , x3 .section \".data\" data1: .word 0x00000001 data2: .word 0x00000002 \u94fe\u63a5\u811a\u672clink.ld\u5982\u4e0b OUTPUT_ARCH( \"riscv\" ) ENTRY(_start) SECTIONS { . = 0x00000000; .text.init : { *(.text.init) } .text : { *(.text) } .data : { *(.data) } .bss : { *(.bss) } } \u7f16\u8bd1\u547d\u4ee4 riscv32-unknown-elf-gcc -march = rv32imafv -nostartfiles -T./link.ld test.S -o test \u7f16\u8bd1\u4f18\u5316 -O0 \u4e0d\u505a\u4efb\u4f55\u4f18\u5316 -O1 \u4e3b\u8981\u5bf9\u4ee3\u7801\u7684\u5206\u652f\uff0c\u8868\u8fbe\u5f0f\uff0c\u5e38\u91cf\u6765\u8fdb\u884c\u4f18\u5316 -O2 \u52a0\u5165\u4e86\u5bc4\u5b58\u5668\u7684\u4f7f\u7528\uff0cload\u548cstore\u7684\u9891\u7387\u4f1a\u964d\u4f4e -O3 \u989d\u5916\u7684\u542f\u7528\u4e86 -finline-functions \u7b49\u9ad8\u7b49\u7ea7\u4f18\u5316\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528 -Os \u5728O2\u57fa\u7840\u4e0a\u542f\u7528\u7a7a\u95f4\u4f18\u5316\uff0c\u4f18\u5316\u4ee3\u7801\u5c3a\u5bf8 \u7f16\u8bd1\u52a8\u6001\u94fe\u63a5\u5e93 #\u9700\u8981\u6ce8\u610f\u7684\u662f\u52a8\u6001\u94fe\u63a5\u5e93\u7684\u540d\u5b57libtest.so\u4e2d\u7684lib\u662f\u5fc5\u987b\u52a0\u7684 gcc test.c -shared -fPIC -o libtest.so \u7f16\u8bd1\u9759\u6001\u94fe\u63a5\u5e93 gcc -c test.c ar -crv libtest.a test.o \u8c03\u8bd5 -g \u4fdd\u7559\u8c03\u8bd5\u4fe1\u606f\uff0c\u4f1a\u4f7felf\u4e2d\u589e\u52a0\u82e5\u5e72\u4e2adebug\u6bb5 -W \u4f7f\u80fd\u7f16\u8bd1\u8b66\u544a\uff0c\u540e\u9762\u63a5\u5404\u79cd\u8b66\u544a\u7c7b\u578b\uff0c\u4f7f\u7528-Wall\u53ef\u4ee5\u5f00\u542f\u6240\u6709\u8b66\u544a -w \u5173\u95ed\u7f16\u8bd1\u8b66\u544a riscv-GAS\u6269\u5c55\u6c47\u7f16\u6307\u4ee4\u7684\u6b65\u9aa4 \u00b6 \u9996\u5148\u4e0d\u5f97\u4e0d\u8bf4gas\u91cc\u9762\u5404\u4e2a\u67b6\u6784\u4e0b\u9762\u7684\u4ee3\u7801\u90fd\u4e0d\u592a\u4e00\u6837\uff0c\u672c\u4ee5\u4e3a\u4f1a\u50cf\u5185\u6838\u7684\u8bbe\u5907\u9a71\u52a8\u4e00\u6837\uff0c\u80fd\u660e\u663e\u7684\u770b\u51fa\u6765\u5404\u4e2a\u7c7b\u4f3c\u9a71\u52a8\u662f\u5144\u5f1f\u5173\u7cfb\u3002\u4f46\u5b9e\u9645\u4e0agas\u4e0b\u9762\u7684\u5404\u4e2a\u67b6\u6784\u7684\u4ee3\u7801\u5dee\u5f02\u8fd8\u6bd4\u8f83\u5927\uff0c\u5373\u4fbf\u662f\u5b9a\u4e49\u6307\u4ee4\u7684\u7ed3\u6784\u4f53\u4e5f\u662f\u5404\u4e2a\u67b6\u6784\u81ea\u5df1\u5b9a\u4e49\u7684\uff0c\u5177\u4f53\u539f\u56e0\u4e0d\u592a\u6e05\u695a\uff0c\u53ea\u662f\u626b\u4e86\u4e00\u773c\uff0c\u6709\u65f6\u95f4\u5e94\u8be5\u518d\u7ec6\u81f4\u4e00\u4e9b\u770b\u770b\uff08\u5927\u6982\u7387\u662f\u4ee5\u540e\u4e0d\u4f1a\u518d\u770b\u4e86\uff09 \u4ee5\u4e0b\u6b65\u9aa4\u57fa\u4e8eriscv\u5b98\u65b9\u63d0\u4f9b\u7684\u5de5\u5177\u94fe\u6e90\u7801 https://github.com/riscv/riscv-gnu-toolchain step1-\u4fee\u6539opcode\u5934\u6587\u4ef6 \u00b6 //\u4fee\u6539riscv-binutils/include/opcode/riscv-opc.h\u6587\u4ef6,\u5728\u6587\u4ef6\u4e2d\u589e\u52a0\u5bf9\u65b0\u6307\u4ee4\u7684\u6ce8\u518c // MATCH\u5373\u6307\u4ee4\u7f16\u7801\u672c\u8eab // MASK\u5373\u5339\u914d\u6307\u4ee4\u65f6\u9700\u8981\u68c0\u67e5\u7684\u6bcf\u4e00\u4e2abit\uff0c\u9700\u8981\u68c0\u67e5\u7684\u7f6e1\uff08\u4e0d\u7ba1\u7f16\u7801\u672c\u8eab\u662f1\u8fd8\u662f0\uff0c\u9700\u8981\u68c0\u67e5\u5219\u7f6e1\uff09 // \u4e3e\u4f8b // name |31 26 |25 |24 20 |19 15 |14 |13 12 |11 7 |6 0 // xxxxx.xx |000001 |0 |rs2 |rs1 |0 |00 |rd |1111011 #define MATCH_XXXXX_XX 0x5e002057 #define MASK_XXXXX_XX 0xfe00707f DECLARE_INSN ( xxxxx_xx , MATCH_XXXXX_XX , MASK_XXXXX_XX ) step2-\u4fee\u6539opcode\u6e90\u6587\u4ef6 \u00b6 // \u4fee\u6539riscv-binutils/opcodes/riscv-opc.c // \u5728riscv_opcodes\u6570\u7ec4\u4e2d\u6dfb\u52a0\u65b0\u6307\u4ee4 { \"xxxxx.xx\" , 0 , { \"V\" , 0 }, \"Vd,Vt,Vs\" , MATCH_XXXXX_XX , MASK_XXXXX_XX , match_opcode , 0 } step3-\u4fee\u6539\u53c2\u6570\u6821\u9a8c\u51fd\u6570 \u00b6 // \u4fee\u6539gas/config/tc-riscv.c // \u5728validate_riscv_insn\u4e2d\u589e\u52a0\u76f8\u5173\u53c2\u6570\u7684\u6821\u9a8c // riscv \u5728validate_riscv_insn\u5b9e\u73b0\u4e86\u6307\u4ee4\u53c2\u6570\u7684\u6821\u9a8c // \u4f8b\u5982\u6307\u4ee4\uff1a vslideup.vi // \u6ce8\u518c\u53c2\u6570\u5217\u8868\u4e3a \"Vd,Vt,Vi,Vm\" // [31:26] |[25] |[24:20] |[19:15] |[14:12] |[11:7] |[6:0] // 001110 |vm |vs2 |imm |011 |vd |1010111 // \u51fd\u6570\u4e2d\u904d\u5386\u6307\u4ee4\u7684\u53c2\u6570\u5217\u8868\uff0c\u5176\u4e2d\u5b8f\u5b9a\u4e49\u5982\u4e0b // #define OP_MASK_RD 0x1f // #define OP_SH_RD 7 // #define OP_MASK_VM 0x1 // #define OP_SH_VM 25 // #define OP_MASK_RS2 0x1f // #define OP_SH_RS2 20 // #define OP_MASK_VI 0x1f // #define OP_SH_VI 15 // \u8fd9\u6837\u5faa\u73af\u5982\u4e0b\u4ee3\u7801\u4fbf\u80fd\u591f\u904d\u5386\u6240\u6709\u53c2\u6570\u662f\u5426\u8bbe\u7f6e\u5408\u6cd5 case 'V' : switch ( c = * p ++ ) { case 'd' : USE_BITS ( OP_MASK_RD , OP_SH_RD ); break ; case 'm' : USE_BITS ( OP_MASK_VM , OP_SH_VM ); break ; case 't' : USE_BITS ( OP_MASK_RS2 , OP_SH_RS2 ); break ; case 'i' : USE_BITS ( OP_MASK_VI , OP_SH_VI ); break ; } break ; step4-\u6dfb\u52a0\u6307\u4ee4\u7ec4\u88c5\u5904\u7406 \u00b6 // \u4fee\u6539gas/config/tc-riscv.c // \u5728riscv_ip\u51fd\u6570\u4e2d\u589e\u52a0\u6307\u4ee4\u7ec4\u88c5\u5904\u7406 case 'i' : if ( my_getSmallExpression ( imm_expr , imm_reloc , s , p ) || imm_expr -> X_op != O_constant || imm_expr -> X_add_number < 0 || imm_expr -> X_add_number >= 32 ) { as_bad ( _ ( \"bad value for uimm[19:15] field, \" \"value must be0...32\" )); break ; } INSERT_OPERAND ( VI , * ip , imm_expr -> X_add_number ); imm_expr -> X_op = O_absent ; s = expr_end ; continue ; step5-\u6dfb\u52a0\u6307\u4ee4\u6253\u5370\u4fe1\u606f \u00b6 // \u4fee\u6539opcodes/riscv-dis.c\u6587\u4ef6 // \u5728\u8be5\u6587\u4ef6\u7684print_insn_args\u51fd\u6570\u4e2d\u65b0\u589e\u6307\u4ee4\u6253\u5370\u4fe1\u606f case 'i' : print ( info -> stream , \"%d\" , EXTRACT_OPERAND ( VI , l )); break ; step6-\u540c\u6b65\u4fee\u6539gdb\u76f8\u5173\u6587\u4ef6 \u00b6 \u5c06riscv-opc.h\u548criscv-opc.c\u7684\u4fee\u6539\u540c\u6b65\u5230riscv-gdb\u76ee\u5f55\u7684\u5bf9\u5e94\u76ee\u5f55\u4e0b\u7684riscv-opc.h\u548criscv-opc.c\u6587\u4ef6\u4e2d strip\u5de5\u5177 \u00b6 strip\u5de5\u5177\u53ef\u4ee5\u9664\u53bb\u76ee\u6807elf\u6587\u4ef6\u4e2d\u7684\u884c\u53f7\u4fe1\u606f\u3001\u91cd\u5b9a\u4f4d\u4fe1\u606f\u3001\u8c03\u8bd5\u6bb5\u3001\u6ce8\u91ca\u6bb5\u3001\u6587\u4ef6\u5934\u4ee5\u53ca\u6240\u6709\u6216\u90e8\u5206\u7b26\u53f7\u8868\uff0c\u51cf\u5c11elf\u5bf9\u8c61\u6587\u4ef6\u7684\u5927\u5c0f \u4e5f\u6709\u4eba\u8bf4\u662f\u5904\u7406COFF\u6587\u4ef6\uff0c\u8fd9\u4e2aCOFF\u548celf\u5230\u5e95\u6709\u4ec0\u4e48\u533a\u522b\uff1f\u5177\u4f53\u8bf4\u4e0d\u597d\uff0c\u4f46\u662f\u611f\u89c9\u7ed3\u6784\u5f88\u76f8\u4f3c\uff0cstrip\u7684help\u4fe1\u606f\u4e2d\u63cf\u8ff0\u4e3aRemoves symbols and sections from files\uff0c\u4e5f\u6ca1\u6709\u5177\u4f53\u8bf4\u660e\uff0c\u8fd9\u91cc\u5148\u6682\u4e14\u7406\u89e3\u4e3a\u5904\u7406ELF\u6587\u4ef6 -R --remove-section = <name> Also remove section <name> from the output -g -S -d --strip-debug Remove all debugging symbols & sections readelf\u5de5\u5177 \u00b6 Display information about the contents of ELF format files \u5173\u4e8eelf\u6587\u4ef6\u683c\u5f0f\uff0c\u53ef\u4ee5\u53c2\u8003\u4e4b\u524d\u7684\u603b\u7ed3**arm-linux-kmodule-load.md**\u4e2d\u7684\u63cf\u8ff0 // \u67e5\u770b\u8282\u533a\u5934\u90e8\u8868 -S --section-headers Display the sections ' header // \u67e5\u770b\u6587\u4ef6\u5934 -h --file-header Display the ELF file header objcopy\u5de5\u5177 \u00b6 Usage: objcopy [option(s)] in-file [out-file] Copies a binary file, possibly transforming it in the process objcopy\u53ef\u4ee5copy\u6587\u4ef6\u5185\u5bb9\u5230\u53e6\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff0c\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u8fdb\u884c\u683c\u5f0f\u8f6c\u6362 objcopy\u5c06elf\u8f6c\u6362\u4e3abin \u00b6 # -O --output-target <bfdname> Create an output file in format <bfdname> # -R --remove-section <name> Remove section <name> from the output # -S --strip-all Remove all symbol and relocation information objcopy -O binary -R .comment -S test.elf test.bin objcopy\u4ec5\u8f93\u51fa\u67d0\u4e00\u4e2a\u8282\u533a \u00b6 -j --only-section <name> Only copy section <name> into the output objcopy -O binary -j .data test.elf test.bin \u6307\u5b9a\u7a7a\u767d\u533a\u586b\u5145\u503c \u00b6 # --gap-fill <val> Fill gaps between sections with <val> objcopy -O binary --gap-fill 0xff test.elf test.bin","title":"GCC \u5de5\u5177\u53ca\u76f8\u5173\u4ecb\u7ecd"},{"location":"c/gcc_tools.html#gcc","text":"GCC \u5de5\u5177\u53ca\u76f8\u5173\u4ecb\u7ecd gcc\u5e38\u7528\u547d\u4ee4 riscv-GAS\u6269\u5c55\u6c47\u7f16\u6307\u4ee4\u7684\u6b65\u9aa4 step1-\u4fee\u6539opcode\u5934\u6587\u4ef6 step2-\u4fee\u6539opcode\u6e90\u6587\u4ef6 step3-\u4fee\u6539\u53c2\u6570\u6821\u9a8c\u51fd\u6570 step4-\u6dfb\u52a0\u6307\u4ee4\u7ec4\u88c5\u5904\u7406 step5-\u6dfb\u52a0\u6307\u4ee4\u6253\u5370\u4fe1\u606f step6-\u540c\u6b65\u4fee\u6539gdb\u76f8\u5173\u6587\u4ef6 strip\u5de5\u5177 readelf\u5de5\u5177 objcopy\u5de5\u5177 objcopy\u5c06elf\u8f6c\u6362\u4e3abin objcopy\u4ec5\u8f93\u51fa\u67d0\u4e00\u4e2a\u8282\u533a \u6307\u5b9a\u7a7a\u767d\u533a\u586b\u5145\u503c","title":"GCC \u5de5\u5177\u53ca\u76f8\u5173\u4ecb\u7ecd"},{"location":"c/gcc_tools.html#gcc_1","text":"\u7f16\u8bd1\u76ee\u6807\u63a7\u5236 -E Preprocess only ; do not compile, assemble or link. -S Compile only ; do not assemble or link. -c Compile and assemble, but do not link. -o <file> Place the output into <file>. \u7f16\u8bd1\u5355\u4e2a\u6c47\u7f16\u6587\u4ef6 \u6c47\u7f16\u6e90\u7801test.S .section \".text.init\" .globl _start _start: la x1 , data1 add x2 , x1 , x3 sub x1 , x3 , x4 mul x5 , x1 , x3 .section \".data\" data1: .word 0x00000001 data2: .word 0x00000002 \u94fe\u63a5\u811a\u672clink.ld\u5982\u4e0b OUTPUT_ARCH( \"riscv\" ) ENTRY(_start) SECTIONS { . = 0x00000000; .text.init : { *(.text.init) } .text : { *(.text) } .data : { *(.data) } .bss : { *(.bss) } } \u7f16\u8bd1\u547d\u4ee4 riscv32-unknown-elf-gcc -march = rv32imafv -nostartfiles -T./link.ld test.S -o test \u7f16\u8bd1\u4f18\u5316 -O0 \u4e0d\u505a\u4efb\u4f55\u4f18\u5316 -O1 \u4e3b\u8981\u5bf9\u4ee3\u7801\u7684\u5206\u652f\uff0c\u8868\u8fbe\u5f0f\uff0c\u5e38\u91cf\u6765\u8fdb\u884c\u4f18\u5316 -O2 \u52a0\u5165\u4e86\u5bc4\u5b58\u5668\u7684\u4f7f\u7528\uff0cload\u548cstore\u7684\u9891\u7387\u4f1a\u964d\u4f4e -O3 \u989d\u5916\u7684\u542f\u7528\u4e86 -finline-functions \u7b49\u9ad8\u7b49\u7ea7\u4f18\u5316\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528 -Os \u5728O2\u57fa\u7840\u4e0a\u542f\u7528\u7a7a\u95f4\u4f18\u5316\uff0c\u4f18\u5316\u4ee3\u7801\u5c3a\u5bf8 \u7f16\u8bd1\u52a8\u6001\u94fe\u63a5\u5e93 #\u9700\u8981\u6ce8\u610f\u7684\u662f\u52a8\u6001\u94fe\u63a5\u5e93\u7684\u540d\u5b57libtest.so\u4e2d\u7684lib\u662f\u5fc5\u987b\u52a0\u7684 gcc test.c -shared -fPIC -o libtest.so \u7f16\u8bd1\u9759\u6001\u94fe\u63a5\u5e93 gcc -c test.c ar -crv libtest.a test.o \u8c03\u8bd5 -g \u4fdd\u7559\u8c03\u8bd5\u4fe1\u606f\uff0c\u4f1a\u4f7felf\u4e2d\u589e\u52a0\u82e5\u5e72\u4e2adebug\u6bb5 -W \u4f7f\u80fd\u7f16\u8bd1\u8b66\u544a\uff0c\u540e\u9762\u63a5\u5404\u79cd\u8b66\u544a\u7c7b\u578b\uff0c\u4f7f\u7528-Wall\u53ef\u4ee5\u5f00\u542f\u6240\u6709\u8b66\u544a -w \u5173\u95ed\u7f16\u8bd1\u8b66\u544a","title":"gcc\u5e38\u7528\u547d\u4ee4"},{"location":"c/gcc_tools.html#riscv-gas","text":"\u9996\u5148\u4e0d\u5f97\u4e0d\u8bf4gas\u91cc\u9762\u5404\u4e2a\u67b6\u6784\u4e0b\u9762\u7684\u4ee3\u7801\u90fd\u4e0d\u592a\u4e00\u6837\uff0c\u672c\u4ee5\u4e3a\u4f1a\u50cf\u5185\u6838\u7684\u8bbe\u5907\u9a71\u52a8\u4e00\u6837\uff0c\u80fd\u660e\u663e\u7684\u770b\u51fa\u6765\u5404\u4e2a\u7c7b\u4f3c\u9a71\u52a8\u662f\u5144\u5f1f\u5173\u7cfb\u3002\u4f46\u5b9e\u9645\u4e0agas\u4e0b\u9762\u7684\u5404\u4e2a\u67b6\u6784\u7684\u4ee3\u7801\u5dee\u5f02\u8fd8\u6bd4\u8f83\u5927\uff0c\u5373\u4fbf\u662f\u5b9a\u4e49\u6307\u4ee4\u7684\u7ed3\u6784\u4f53\u4e5f\u662f\u5404\u4e2a\u67b6\u6784\u81ea\u5df1\u5b9a\u4e49\u7684\uff0c\u5177\u4f53\u539f\u56e0\u4e0d\u592a\u6e05\u695a\uff0c\u53ea\u662f\u626b\u4e86\u4e00\u773c\uff0c\u6709\u65f6\u95f4\u5e94\u8be5\u518d\u7ec6\u81f4\u4e00\u4e9b\u770b\u770b\uff08\u5927\u6982\u7387\u662f\u4ee5\u540e\u4e0d\u4f1a\u518d\u770b\u4e86\uff09 \u4ee5\u4e0b\u6b65\u9aa4\u57fa\u4e8eriscv\u5b98\u65b9\u63d0\u4f9b\u7684\u5de5\u5177\u94fe\u6e90\u7801 https://github.com/riscv/riscv-gnu-toolchain","title":"riscv-GAS\u6269\u5c55\u6c47\u7f16\u6307\u4ee4\u7684\u6b65\u9aa4"},{"location":"c/gcc_tools.html#step1-opcode","text":"//\u4fee\u6539riscv-binutils/include/opcode/riscv-opc.h\u6587\u4ef6,\u5728\u6587\u4ef6\u4e2d\u589e\u52a0\u5bf9\u65b0\u6307\u4ee4\u7684\u6ce8\u518c // MATCH\u5373\u6307\u4ee4\u7f16\u7801\u672c\u8eab // MASK\u5373\u5339\u914d\u6307\u4ee4\u65f6\u9700\u8981\u68c0\u67e5\u7684\u6bcf\u4e00\u4e2abit\uff0c\u9700\u8981\u68c0\u67e5\u7684\u7f6e1\uff08\u4e0d\u7ba1\u7f16\u7801\u672c\u8eab\u662f1\u8fd8\u662f0\uff0c\u9700\u8981\u68c0\u67e5\u5219\u7f6e1\uff09 // \u4e3e\u4f8b // name |31 26 |25 |24 20 |19 15 |14 |13 12 |11 7 |6 0 // xxxxx.xx |000001 |0 |rs2 |rs1 |0 |00 |rd |1111011 #define MATCH_XXXXX_XX 0x5e002057 #define MASK_XXXXX_XX 0xfe00707f DECLARE_INSN ( xxxxx_xx , MATCH_XXXXX_XX , MASK_XXXXX_XX )","title":"step1-\u4fee\u6539opcode\u5934\u6587\u4ef6"},{"location":"c/gcc_tools.html#step2-opcode","text":"// \u4fee\u6539riscv-binutils/opcodes/riscv-opc.c // \u5728riscv_opcodes\u6570\u7ec4\u4e2d\u6dfb\u52a0\u65b0\u6307\u4ee4 { \"xxxxx.xx\" , 0 , { \"V\" , 0 }, \"Vd,Vt,Vs\" , MATCH_XXXXX_XX , MASK_XXXXX_XX , match_opcode , 0 }","title":"step2-\u4fee\u6539opcode\u6e90\u6587\u4ef6"},{"location":"c/gcc_tools.html#step3-","text":"// \u4fee\u6539gas/config/tc-riscv.c // \u5728validate_riscv_insn\u4e2d\u589e\u52a0\u76f8\u5173\u53c2\u6570\u7684\u6821\u9a8c // riscv \u5728validate_riscv_insn\u5b9e\u73b0\u4e86\u6307\u4ee4\u53c2\u6570\u7684\u6821\u9a8c // \u4f8b\u5982\u6307\u4ee4\uff1a vslideup.vi // \u6ce8\u518c\u53c2\u6570\u5217\u8868\u4e3a \"Vd,Vt,Vi,Vm\" // [31:26] |[25] |[24:20] |[19:15] |[14:12] |[11:7] |[6:0] // 001110 |vm |vs2 |imm |011 |vd |1010111 // \u51fd\u6570\u4e2d\u904d\u5386\u6307\u4ee4\u7684\u53c2\u6570\u5217\u8868\uff0c\u5176\u4e2d\u5b8f\u5b9a\u4e49\u5982\u4e0b // #define OP_MASK_RD 0x1f // #define OP_SH_RD 7 // #define OP_MASK_VM 0x1 // #define OP_SH_VM 25 // #define OP_MASK_RS2 0x1f // #define OP_SH_RS2 20 // #define OP_MASK_VI 0x1f // #define OP_SH_VI 15 // \u8fd9\u6837\u5faa\u73af\u5982\u4e0b\u4ee3\u7801\u4fbf\u80fd\u591f\u904d\u5386\u6240\u6709\u53c2\u6570\u662f\u5426\u8bbe\u7f6e\u5408\u6cd5 case 'V' : switch ( c = * p ++ ) { case 'd' : USE_BITS ( OP_MASK_RD , OP_SH_RD ); break ; case 'm' : USE_BITS ( OP_MASK_VM , OP_SH_VM ); break ; case 't' : USE_BITS ( OP_MASK_RS2 , OP_SH_RS2 ); break ; case 'i' : USE_BITS ( OP_MASK_VI , OP_SH_VI ); break ; } break ;","title":"step3-\u4fee\u6539\u53c2\u6570\u6821\u9a8c\u51fd\u6570"},{"location":"c/gcc_tools.html#step4-","text":"// \u4fee\u6539gas/config/tc-riscv.c // \u5728riscv_ip\u51fd\u6570\u4e2d\u589e\u52a0\u6307\u4ee4\u7ec4\u88c5\u5904\u7406 case 'i' : if ( my_getSmallExpression ( imm_expr , imm_reloc , s , p ) || imm_expr -> X_op != O_constant || imm_expr -> X_add_number < 0 || imm_expr -> X_add_number >= 32 ) { as_bad ( _ ( \"bad value for uimm[19:15] field, \" \"value must be0...32\" )); break ; } INSERT_OPERAND ( VI , * ip , imm_expr -> X_add_number ); imm_expr -> X_op = O_absent ; s = expr_end ; continue ;","title":"step4-\u6dfb\u52a0\u6307\u4ee4\u7ec4\u88c5\u5904\u7406"},{"location":"c/gcc_tools.html#step5-","text":"// \u4fee\u6539opcodes/riscv-dis.c\u6587\u4ef6 // \u5728\u8be5\u6587\u4ef6\u7684print_insn_args\u51fd\u6570\u4e2d\u65b0\u589e\u6307\u4ee4\u6253\u5370\u4fe1\u606f case 'i' : print ( info -> stream , \"%d\" , EXTRACT_OPERAND ( VI , l )); break ;","title":"step5-\u6dfb\u52a0\u6307\u4ee4\u6253\u5370\u4fe1\u606f"},{"location":"c/gcc_tools.html#step6-gdb","text":"\u5c06riscv-opc.h\u548criscv-opc.c\u7684\u4fee\u6539\u540c\u6b65\u5230riscv-gdb\u76ee\u5f55\u7684\u5bf9\u5e94\u76ee\u5f55\u4e0b\u7684riscv-opc.h\u548criscv-opc.c\u6587\u4ef6\u4e2d","title":"step6-\u540c\u6b65\u4fee\u6539gdb\u76f8\u5173\u6587\u4ef6"},{"location":"c/gcc_tools.html#strip","text":"strip\u5de5\u5177\u53ef\u4ee5\u9664\u53bb\u76ee\u6807elf\u6587\u4ef6\u4e2d\u7684\u884c\u53f7\u4fe1\u606f\u3001\u91cd\u5b9a\u4f4d\u4fe1\u606f\u3001\u8c03\u8bd5\u6bb5\u3001\u6ce8\u91ca\u6bb5\u3001\u6587\u4ef6\u5934\u4ee5\u53ca\u6240\u6709\u6216\u90e8\u5206\u7b26\u53f7\u8868\uff0c\u51cf\u5c11elf\u5bf9\u8c61\u6587\u4ef6\u7684\u5927\u5c0f \u4e5f\u6709\u4eba\u8bf4\u662f\u5904\u7406COFF\u6587\u4ef6\uff0c\u8fd9\u4e2aCOFF\u548celf\u5230\u5e95\u6709\u4ec0\u4e48\u533a\u522b\uff1f\u5177\u4f53\u8bf4\u4e0d\u597d\uff0c\u4f46\u662f\u611f\u89c9\u7ed3\u6784\u5f88\u76f8\u4f3c\uff0cstrip\u7684help\u4fe1\u606f\u4e2d\u63cf\u8ff0\u4e3aRemoves symbols and sections from files\uff0c\u4e5f\u6ca1\u6709\u5177\u4f53\u8bf4\u660e\uff0c\u8fd9\u91cc\u5148\u6682\u4e14\u7406\u89e3\u4e3a\u5904\u7406ELF\u6587\u4ef6 -R --remove-section = <name> Also remove section <name> from the output -g -S -d --strip-debug Remove all debugging symbols & sections","title":"strip\u5de5\u5177"},{"location":"c/gcc_tools.html#readelf","text":"Display information about the contents of ELF format files \u5173\u4e8eelf\u6587\u4ef6\u683c\u5f0f\uff0c\u53ef\u4ee5\u53c2\u8003\u4e4b\u524d\u7684\u603b\u7ed3**arm-linux-kmodule-load.md**\u4e2d\u7684\u63cf\u8ff0 // \u67e5\u770b\u8282\u533a\u5934\u90e8\u8868 -S --section-headers Display the sections ' header // \u67e5\u770b\u6587\u4ef6\u5934 -h --file-header Display the ELF file header","title":"readelf\u5de5\u5177"},{"location":"c/gcc_tools.html#objcopy","text":"Usage: objcopy [option(s)] in-file [out-file] Copies a binary file, possibly transforming it in the process objcopy\u53ef\u4ee5copy\u6587\u4ef6\u5185\u5bb9\u5230\u53e6\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff0c\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u8fdb\u884c\u683c\u5f0f\u8f6c\u6362","title":"objcopy\u5de5\u5177"},{"location":"c/gcc_tools.html#objcopyelfbin","text":"# -O --output-target <bfdname> Create an output file in format <bfdname> # -R --remove-section <name> Remove section <name> from the output # -S --strip-all Remove all symbol and relocation information objcopy -O binary -R .comment -S test.elf test.bin","title":"objcopy\u5c06elf\u8f6c\u6362\u4e3abin"},{"location":"c/gcc_tools.html#objcopy_1","text":"-j --only-section <name> Only copy section <name> into the output objcopy -O binary -j .data test.elf test.bin","title":"objcopy\u4ec5\u8f93\u51fa\u67d0\u4e00\u4e2a\u8282\u533a"},{"location":"c/gcc_tools.html#_1","text":"# --gap-fill <val> Fill gaps between sections with <val> objcopy -O binary --gap-fill 0xff test.elf test.bin","title":"\u6307\u5b9a\u7a7a\u767d\u533a\u586b\u5145\u503c"},{"location":"c/int_uint.html","text":"\u7b26\u53f7\u6269\u5c55 \u00b6 \u5728spike\u4e2d\uff0c\u6709\u4e00\u4e2a\u7b26\u53f7\u6269\u5c55\u548c\u975e\u7b26\u53f7\u6269\u5c55\u51fd\u6570\uff0c\u4ed4\u7ec6\u60f3\u4f1a\u633a\u6709\u610f\u601d\u3002\u6709\u4e00\u79cd\u4ee3\u7801\u5199\u591a\u4e86\uff0c\u53cd\u800c\u4e0d\u4f1a\u5199\u4e86\u7684\u611f\u89c9\u3002 typedef uint64_t insn_bits_t ; class insn_t { private : insn_bits_t b ; uint64_t x ( int lo , int len ) { return ( b >> lo ) & (( insn_bits_t ( 1 ) << len ) -1 ); } uint64_t xs ( int lo , int len ) { return int64_t ( b ) << ( 64 - lo - len ) >> ( 64 - len ); } }; x\u7528\u6765\u622a\u53d6\u65e0\u7b26\u53f7\u7acb\u5373\u6570\uff0cxs\u7528\u6765\u622a\u53d6\u6709\u7b26\u53f7\u7acb\u5373\u6570\uff0c &\u662f\u65e0\u6cd5\u5904\u7406\u6709\u7b26\u53f7\u6570\u7684\uff0c\u4f46\u4f4d\u79fb\u80fd\u591f\u8ba9\u7f16\u8bd1\u5668\u91c7\u53d6\u6709\u7b26\u53f7\u7684\u5904\u7406\u65b9\u5f0f\uff0c \u5f53\u7136\u8fd9\u91cc\u7684xs\u4e2d\u5982\u679c\u4e0d\u8fdb\u884cint64_t\u5f3a\u5236\u8f6c\u6362\uff0c\u90a3\u4e48\u5c31\u53d8\u6210\u5904\u7406\u65e0\u7b26\u53f7\u7acb\u5373\u6570\u4e86","title":"\u7b26\u53f7\u6269\u5c55"},{"location":"c/int_uint.html#_1","text":"\u5728spike\u4e2d\uff0c\u6709\u4e00\u4e2a\u7b26\u53f7\u6269\u5c55\u548c\u975e\u7b26\u53f7\u6269\u5c55\u51fd\u6570\uff0c\u4ed4\u7ec6\u60f3\u4f1a\u633a\u6709\u610f\u601d\u3002\u6709\u4e00\u79cd\u4ee3\u7801\u5199\u591a\u4e86\uff0c\u53cd\u800c\u4e0d\u4f1a\u5199\u4e86\u7684\u611f\u89c9\u3002 typedef uint64_t insn_bits_t ; class insn_t { private : insn_bits_t b ; uint64_t x ( int lo , int len ) { return ( b >> lo ) & (( insn_bits_t ( 1 ) << len ) -1 ); } uint64_t xs ( int lo , int len ) { return int64_t ( b ) << ( 64 - lo - len ) >> ( 64 - len ); } }; x\u7528\u6765\u622a\u53d6\u65e0\u7b26\u53f7\u7acb\u5373\u6570\uff0cxs\u7528\u6765\u622a\u53d6\u6709\u7b26\u53f7\u7acb\u5373\u6570\uff0c &\u662f\u65e0\u6cd5\u5904\u7406\u6709\u7b26\u53f7\u6570\u7684\uff0c\u4f46\u4f4d\u79fb\u80fd\u591f\u8ba9\u7f16\u8bd1\u5668\u91c7\u53d6\u6709\u7b26\u53f7\u7684\u5904\u7406\u65b9\u5f0f\uff0c \u5f53\u7136\u8fd9\u91cc\u7684xs\u4e2d\u5982\u679c\u4e0d\u8fdb\u884cint64_t\u5f3a\u5236\u8f6c\u6362\uff0c\u90a3\u4e48\u5c31\u53d8\u6210\u5904\u7406\u65e0\u7b26\u53f7\u7acb\u5373\u6570\u4e86","title":"\u7b26\u53f7\u6269\u5c55"},{"location":"c/lvalue_and_rvalue.html","text":"\u5f15\u7528\uff0c\u5de6\u503c\uff0c\u53f3\u503c \u00b6 \u5f15\u7528 \u00b6 \u5de6\u503c \u00b6 \u53f3\u503c \u00b6 \u5de6\u503c\u5f15\u7528 \u00b6 \u53f3\u503c\u5f15\u7528 \u00b6 std::back \u00b6 std::forward \u00b6","title":"\u5f15\u7528\uff0c\u5de6\u503c\uff0c\u53f3\u503c"},{"location":"c/lvalue_and_rvalue.html#_1","text":"","title":"\u5f15\u7528\uff0c\u5de6\u503c\uff0c\u53f3\u503c"},{"location":"c/lvalue_and_rvalue.html#_2","text":"","title":"\u5f15\u7528"},{"location":"c/lvalue_and_rvalue.html#_3","text":"","title":"\u5de6\u503c"},{"location":"c/lvalue_and_rvalue.html#_4","text":"","title":"\u53f3\u503c"},{"location":"c/lvalue_and_rvalue.html#_5","text":"","title":"\u5de6\u503c\u5f15\u7528"},{"location":"c/lvalue_and_rvalue.html#_6","text":"","title":"\u53f3\u503c\u5f15\u7528"},{"location":"c/lvalue_and_rvalue.html#stdback","text":"","title":"std::back"},{"location":"c/lvalue_and_rvalue.html#stdforward","text":"","title":"std::forward"},{"location":"c/makefile.html","text":"makefile\u8bed\u6cd5 \u00b6 \u57fa\u672c\u5199\u6cd5 \u00b6 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c \u6bcf\u4e00\u884ccommands\u5728\u4e00\u4e2a\u5355\u72ec\u7684shell\u8fdb\u7a0b\u4e2d\uff0c\u8fd9\u4e9bshell\u4e4b\u95f4\u6ca1\u6709\u4efb\u4f55\u7ee7\u627f\u5173\u7cfb <target> : < prerequisites > [tab] <commands> \u6bd4\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\u7684\u8fd0\u884c\u7ed3\u679c\u4e3a\uff1aMY_PATH=[] mytarget : export MY_PATH = aaabbbccc echo \"MY_PATH=[ $$ MY_PATH]\" \u4e0b\u9762\u7684\u4f8b\u5b50\u7684\u8fd0\u884c\u7ed3\u679c\u4e3a\uff1aMY_PATH=[aaabbbccc] mytarget : export MY_PATH = aaabbbccc ; \\ echo \"MY_PATH=[ $$ MY_PATH]\" \u601d\u8003\u4e00\u4e0b\uff0c \u4e3a\u4ec0\u4e48\u8981\u5199\u6210 MY_PATH, (MY_PATH) \u80fd\u6253\u5370\u51fa\u6765\u5417\uff1f\u8fd9\u91cc\u53ef\u4ee5\u53c2\u8003\u5982\u4e0b\u6587\u7ae0\u7684\u89e3\u91ca\uff0c\u5b9e\u8d28\u4e0amakefile\u4f1a\u5148\u53bb\u89e3\u91ca\u7b2c\u4e00\u4e2a (MY_PATH) \u80fd\u6253\u5370\u51fa\u6765\u5417\uff1f\u8fd9\u91cc\u53ef\u4ee5\u53c2\u8003\u5982\u4e0b\u6587\u7ae0\u7684\u89e3\u91ca\uff0c\u5b9e\u8d28\u4e0amakefile\u4f1a\u5148\u53bb\u89e3\u91ca\u7b2c\u4e00\u4e2a ,\u800cshell\u4f1a\u53bb\u89e3\u91ca\u7b2c\u4e8c\u4e2a,\u800cshell\u4f1a\u53bb\u89e3\u91ca\u7b2c\u4e8c\u4e2a MY_PATH, <span class=\"arithmatex\"><span class=\"MathJax_Preview\">(MY_PATH) \u80fd\u6253\u5370\u51fa\u6765\u5417\uff1f\u8fd9\u91cc\u53ef\u4ee5\u53c2\u8003\u5982\u4e0b\u6587\u7ae0\u7684\u89e3\u91ca\uff0c\u5b9e\u8d28\u4e0amakefile\u4f1a\u5148\u53bb\u89e3\u91ca\u7b2c\u4e00\u4e2a</span><script type=\"math/tex\">(MY_PATH) \u80fd\u6253\u5370\u51fa\u6765\u5417\uff1f\u8fd9\u91cc\u53ef\u4ee5\u53c2\u8003\u5982\u4e0b\u6587\u7ae0\u7684\u89e3\u91ca\uff0c\u5b9e\u8d28\u4e0amakefile\u4f1a\u5148\u53bb\u89e3\u91ca\u7b2c\u4e00\u4e2a ,\u800cshell\u4f1a\u53bb\u89e3\u91ca\u7b2c\u4e8c\u4e2a,\u800cshell\u4f1a\u53bb\u89e3\u91ca\u7b2c\u4e8c\u4e2a ,\u5982\u679c\u53ea\u6709\u4e00\u4e2a,\u5982\u679c\u53ea\u6709\u4e00\u4e2a <span class=\"arithmatex\"><span class=\"MathJax_Preview\">MY_PATH, <span class=\"arithmatex\"><span class=\"MathJax_Preview\">(MY_PATH) \u80fd\u6253\u5370\u51fa\u6765\u5417\uff1f\u8fd9\u91cc\u53ef\u4ee5\u53c2\u8003\u5982\u4e0b\u6587\u7ae0\u7684\u89e3\u91ca\uff0c\u5b9e\u8d28\u4e0amakefile\u4f1a\u5148\u53bb\u89e3\u91ca\u7b2c\u4e00\u4e2a</span><script type=\"math/tex\">(MY_PATH) \u80fd\u6253\u5370\u51fa\u6765\u5417\uff1f\u8fd9\u91cc\u53ef\u4ee5\u53c2\u8003\u5982\u4e0b\u6587\u7ae0\u7684\u89e3\u91ca\uff0c\u5b9e\u8d28\u4e0amakefile\u4f1a\u5148\u53bb\u89e3\u91ca\u7b2c\u4e00\u4e2a ,\u800cshell\u4f1a\u53bb\u89e3\u91ca\u7b2c\u4e8c\u4e2a,\u800cshell\u4f1a\u53bb\u89e3\u91ca\u7b2c\u4e8c\u4e2a MY_PATH, <span class=\"arithmatex\"><span class=\"MathJax_Preview\">(MY_PATH) \u80fd\u6253\u5370\u51fa\u6765\u5417\uff1f\u8fd9\u91cc\u53ef\u4ee5\u53c2\u8003\u5982\u4e0b\u6587\u7ae0\u7684\u89e3\u91ca\uff0c\u5b9e\u8d28\u4e0amakefile\u4f1a\u5148\u53bb\u89e3\u91ca\u7b2c\u4e00\u4e2a</span><script type=\"math/tex\">(MY_PATH) \u80fd\u6253\u5370\u51fa\u6765\u5417\uff1f\u8fd9\u91cc\u53ef\u4ee5\u53c2\u8003\u5982\u4e0b\u6587\u7ae0\u7684\u89e3\u91ca\uff0c\u5b9e\u8d28\u4e0amakefile\u4f1a\u5148\u53bb\u89e3\u91ca\u7b2c\u4e00\u4e2a ,\u800cshell\u4f1a\u53bb\u89e3\u91ca\u7b2c\u4e8c\u4e2a,\u800cshell\u4f1a\u53bb\u89e3\u91ca\u7b2c\u4e8c\u4e2a ,\u5982\u679c\u53ea\u6709\u4e00\u4e2a,\u5982\u679c\u53ea\u6709\u4e00\u4e2a , make \u4f1a\u56e0\u4e3a\u627e\u4e0d\u5230\u53d8\u91cfMY_PATH\u800c\u7ec8\u6b62\uff0c\u56e0\u4e3aMY_PATH\u662f\u5b9a\u4e49\u5728shell\u4e2d\u7684\u3002 https://blog.csdn.net/darennet/article/details/8185881 \u57fa\u672c\u8bed\u6cd5 \u00b6 \u76f4\u63a5\u5f0f\u53d8\u91cf\u8d4b\u503c\u4e0e\u9012\u5f52\u5f0f\u53d8\u91cf\u8d4b\u503c \u00b6 # \u9012\u5f52\u5f0f\u53d8\u91cf\u8d4b\u503c,make\u4f1a\u5c06\u6574\u4e2amakefile\u5c55\u5f00\u540e\uff0c\u518d\u51b3\u5b9a\u53d8\u91cf\u7684\u503c algo = gzip.o lzma.o # \u76f4\u63a5\u5f0f\u53d8\u91cf\u8d4b\u503c\uff0c\u53d8\u91cf\u7684\u503c\u51b3\u5b9a\u4e8e\u5b83\u5728makefile\u4e2d\u7684\u4f4d\u7f6e algo := gzip.o lzma.o \u4e3e\u4e2a\u4f8b\u5b50\u5c31\u80fd\u8bf4\u660e\u533a\u522b _algo = gzip algo := $( _algo ) _algo = lzma test : @echo \"algo= $( algo ) \" \u8f93\u51fa\u5e94\u8be5\u4e3agzip,\u4e5f\u5c31\u662f\u8bf4\u5728\u5b9a\u4e49\u7684\u65f6\u5019\u5c31\u5c55\u5f00\u4e86 _algo = gzip algo = $( _algo ) _algo = lzma test : @echo \"algo= $( algo ) \" \u8f93\u51fa\u5e94\u8be5\u4e3alzma,\u5c06\u6574\u4e2amakefile\u5c55\u5f00\u540e\u624d\u786e\u5b9a\u4e86_algo\u7684\u503c\uff0c\u8fdb\u800c\u786e\u5b9a\u4e86algo\u7684\u503c \u6253\u5370\u56de\u663e \u00b6 # \u6b63\u5e38\u60c5\u51b5\u4e0bmake \u4f1a\u6253\u5370\u6bcf\u4e00\u6761\u547d\u4ee4\u7136\u540e\u518d\u6267\u884c\uff0c\u4f7f\u7528@\u53ef\u4ee5\u963b\u6b62\u56de\u663e echo \"hello world!\" @echo \"hello world!\" \u5176\u4ed6\u8d4b\u503c \u00b6 \u53ea\u6709\u5728\u53d8\u91cf\u672a\u88ab\u8d4b\u503c\u65f6\u624d\u8d4b\u503c # \u6761\u4ef6\u8d4b\u503c algo ?= lzma # \u589e\u91cf\u5f0f\u8d4b\u503c algo += gzip \u4f7f\u7528\u51fd\u6570 \u00b6 return = $( functionname arg1, arg2, arg3... ) \u6269\u5c55\u901a\u914d\u7b26wildcard \u00b6 # * \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u6216\u591a\u4e2a\u5b57\u7b26 # ? \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26 # [...] [abc] \u8868\u793aabc\u4e2d\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u5339\u914d\uff0c [^abc]\u8868\u793a\u9664abc\u610f\u5916\u7684\u5b57\u7b26 # [0-9] \u8868\u793a0~9\u4efb\u610f\u4e00\u4e2a\u6570\u5b57 algo = $( wildcard *.c ) test : @echo \"algo= $( algo ) \" \u5047\u5982\u5728Makefile\u6240\u5728\u7684\u76ee\u5f55\u4e0b\u6709lzma.c, gzip.c, bzip2.c, xz.c, lzo.c \u90a3\u4e48algo\u4f1a\u6253\u5370\u51fa\u6240\u6709\u7684\u8fd9\u4e9b.c\u6587\u4ef6\u540d\u79f0 \u5339\u914d\u66ff\u4ee3\u901a\u914d\u7b26patsubst \u00b6 # % \u4e3a\u6a21\u5f0f\u5b57\u7b26 algo = $( patsubst %.c,%.o, $( wildcard *.c )) test : @echo \"algo = $( algo ) \" \u53bb\u9664\u8def\u5f84notdir \u00b6 OBJS = /usr/opt/bin/algo.c algo = $( notdir $( OBJS )) test : @echo \"algo = $( algo ) \" \u8fd0\u884c\u7ed3\u679c root@chlxy : # make algo = algo.c \u5b57\u7b26\u4e32\u66ff\u6362subst \u00b6 string_old = AAAAABBBBBCCCCC string_new = $( subst A,a, $( string_old )) test : @echo \"new string is $( string_new ) \" \u8fd0\u884c\u7ed3\u679c,\u5176\u4e2d\u9700\u8981\u6ce8\u610f\uff0c\u5982\u679c\u5728\u4e0a\u8ff0A,a,\u540e\u9762\u52a0\u7a7a\u683c\u518d\u52a0$(string_new)\u4f1a\u5bfc\u81f4\u8f93\u51fa\u4e2d\u5e26\u6709\u7a7a\u683c root@chlxy : # make new string is aaaaaBBBBBCCCCC \u8fc7\u6ee4\u51fd\u6570filter \u00b6 string_old = AAAAA.c BBBBB.o CCCCC.s string_new = $( filter %.o, $( string_old )) test : @echo \"new string is $( string_new ) \" \u8fd0\u884c\u7ed3\u679c root@chlxy:# make new string is BBBBB.o \u5faa\u73af\u51fd\u6570 foreach \u00b6 algos = lzma gzip lzo lz4 xz algofiles = $( foreach algo, $( algos ) , $( algo ) .c ) test : @echo \" $( algofiles ) \" \u8fd0\u884c\u7ed3\u679c root@chlxy:# make lzma.c gzip.c lzo.c lz4.c xz.c \u663e\u5f0f\u8fd0\u884cshell \u00b6 algos = $( shell ls ) test : @echo \" $( algos ) \" \u8fd0\u884c\u7ed3\u679c root@chlxy:# make bzip2.c gzip.c lz4.c lzma.c lzo.c Makefile xz.c \u8fd0\u884c\u63a7\u5236 error \u4e0e warning \u00b6 ifndef ARCH $( error should define ARCH... ) endif ifndef PLAT $( warning forget define PLAT ? ) endif test : @echo \"this is a test\" \u8fd0\u884c\u7ed3\u679c root@chlxy:# make Makefile:3: *** should define ARCH...\u3002 \u505c\u6b62\u3002 root@chlxy:# make ARCH = arm Makefile:7: forget define PLAT ? this is a test root@chlxy:# make ARCH = arm PLAT = yes this is a test \u5176\u4ed6\u51fd\u6570 \u00b6 # \u51fd\u6570\u592a\u591a\uff0c\u5177\u4f53\u4f7f\u7528\u65b9\u6cd5\u5c31\u4e0d\u518d\u4e00\u4e00\u4e3e\u4f8b\u4e86 # \u5c06\u5b57\u7b26\u4e32\u5347\u5e8f\u6392\u5217\uff0c\u5e76\u53bb\u6389\u91cd\u590d\u5355\u8bcd sort # \u53d6\u5355\u8bcd\u51fd\u6570 word # \u53d6\u5b57\u7b26\u4e32\u51fd\u6570 wordlist # \u7edf\u8ba1\u5b57\u7b26\u4e32\u4e2d\u5355\u8bcd\u6570\u76ee words # \u53d6\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5355\u8bcd\uff0clastword\u540c\u7406\u53d6\u6700\u540e\u4e00\u4e2a\u5355\u8bcd firstword # \u53d6\u76ee\u5f55\uff0c\u5305\u542b\u6307\u5b9a\u6587\u4ef6\u7684\u8def\u5f84\u76ee\u5f55 dir # \u53d6\u524d\u7f00\u51fd\u6570 basename # \u5b9e\u73b0\u7528\u6237\u81ea\u5b9a\u4e49\u51fd\u6570\u7684\u5f15\u7528\uff0c$(call function arg1,arg2,...) call \u6761\u4ef6\u5224\u65ad \u00b6 # ifeq ifneq ifdef ifndef ifeq ($(ARCH), arm) MY_ARCH = ARCH_ARM else ifeq ($(ARCH), arm64) MY_ARCH = ARCH_ARM_64 else MY_ARCH = unknown endif ifdef PLAT MY_PLAT = nxp else MY_PLAT = unknown endif test : @echo \"MY_ARCH = $( MY_ARCH ) MY_PLAT= $( MY_PLAT ) \" \u8fd0\u884c\u7ed3\u679c root@chlxy:# make ARCH = arm MY_ARCH = ARCH_ARM MY_PLAT = unknown root@chlxy:# make ARCH = arm PLAT = yes MY_ARCH = ARCH_ARM MY_PLAT = nxp root@chlxy:# make ARCH = arm64 MY_ARCH = ARCH_ARM_64 MY_PLAT = unknown","title":"makefile\u8bed\u6cd5"},{"location":"c/makefile.html#makefile","text":"","title":"makefile\u8bed\u6cd5"},{"location":"c/makefile.html#_1","text":"\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c \u6bcf\u4e00\u884ccommands\u5728\u4e00\u4e2a\u5355\u72ec\u7684shell\u8fdb\u7a0b\u4e2d\uff0c\u8fd9\u4e9bshell\u4e4b\u95f4\u6ca1\u6709\u4efb\u4f55\u7ee7\u627f\u5173\u7cfb <target> : < prerequisites > [tab] <commands> \u6bd4\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\u7684\u8fd0\u884c\u7ed3\u679c\u4e3a\uff1aMY_PATH=[] mytarget : export MY_PATH = aaabbbccc echo \"MY_PATH=[ $$ MY_PATH]\" \u4e0b\u9762\u7684\u4f8b\u5b50\u7684\u8fd0\u884c\u7ed3\u679c\u4e3a\uff1aMY_PATH=[aaabbbccc] mytarget : export MY_PATH = aaabbbccc ; \\ echo \"MY_PATH=[ $$ MY_PATH]\" \u601d\u8003\u4e00\u4e0b\uff0c \u4e3a\u4ec0\u4e48\u8981\u5199\u6210 MY_PATH, (MY_PATH) \u80fd\u6253\u5370\u51fa\u6765\u5417\uff1f\u8fd9\u91cc\u53ef\u4ee5\u53c2\u8003\u5982\u4e0b\u6587\u7ae0\u7684\u89e3\u91ca\uff0c\u5b9e\u8d28\u4e0amakefile\u4f1a\u5148\u53bb\u89e3\u91ca\u7b2c\u4e00\u4e2a (MY_PATH) \u80fd\u6253\u5370\u51fa\u6765\u5417\uff1f\u8fd9\u91cc\u53ef\u4ee5\u53c2\u8003\u5982\u4e0b\u6587\u7ae0\u7684\u89e3\u91ca\uff0c\u5b9e\u8d28\u4e0amakefile\u4f1a\u5148\u53bb\u89e3\u91ca\u7b2c\u4e00\u4e2a ,\u800cshell\u4f1a\u53bb\u89e3\u91ca\u7b2c\u4e8c\u4e2a,\u800cshell\u4f1a\u53bb\u89e3\u91ca\u7b2c\u4e8c\u4e2a MY_PATH, <span class=\"arithmatex\"><span class=\"MathJax_Preview\">(MY_PATH) \u80fd\u6253\u5370\u51fa\u6765\u5417\uff1f\u8fd9\u91cc\u53ef\u4ee5\u53c2\u8003\u5982\u4e0b\u6587\u7ae0\u7684\u89e3\u91ca\uff0c\u5b9e\u8d28\u4e0amakefile\u4f1a\u5148\u53bb\u89e3\u91ca\u7b2c\u4e00\u4e2a</span><script type=\"math/tex\">(MY_PATH) \u80fd\u6253\u5370\u51fa\u6765\u5417\uff1f\u8fd9\u91cc\u53ef\u4ee5\u53c2\u8003\u5982\u4e0b\u6587\u7ae0\u7684\u89e3\u91ca\uff0c\u5b9e\u8d28\u4e0amakefile\u4f1a\u5148\u53bb\u89e3\u91ca\u7b2c\u4e00\u4e2a ,\u800cshell\u4f1a\u53bb\u89e3\u91ca\u7b2c\u4e8c\u4e2a,\u800cshell\u4f1a\u53bb\u89e3\u91ca\u7b2c\u4e8c\u4e2a ,\u5982\u679c\u53ea\u6709\u4e00\u4e2a,\u5982\u679c\u53ea\u6709\u4e00\u4e2a <span class=\"arithmatex\"><span class=\"MathJax_Preview\">MY_PATH, <span class=\"arithmatex\"><span class=\"MathJax_Preview\">(MY_PATH) \u80fd\u6253\u5370\u51fa\u6765\u5417\uff1f\u8fd9\u91cc\u53ef\u4ee5\u53c2\u8003\u5982\u4e0b\u6587\u7ae0\u7684\u89e3\u91ca\uff0c\u5b9e\u8d28\u4e0amakefile\u4f1a\u5148\u53bb\u89e3\u91ca\u7b2c\u4e00\u4e2a</span><script type=\"math/tex\">(MY_PATH) \u80fd\u6253\u5370\u51fa\u6765\u5417\uff1f\u8fd9\u91cc\u53ef\u4ee5\u53c2\u8003\u5982\u4e0b\u6587\u7ae0\u7684\u89e3\u91ca\uff0c\u5b9e\u8d28\u4e0amakefile\u4f1a\u5148\u53bb\u89e3\u91ca\u7b2c\u4e00\u4e2a ,\u800cshell\u4f1a\u53bb\u89e3\u91ca\u7b2c\u4e8c\u4e2a,\u800cshell\u4f1a\u53bb\u89e3\u91ca\u7b2c\u4e8c\u4e2a MY_PATH, <span class=\"arithmatex\"><span class=\"MathJax_Preview\">(MY_PATH) \u80fd\u6253\u5370\u51fa\u6765\u5417\uff1f\u8fd9\u91cc\u53ef\u4ee5\u53c2\u8003\u5982\u4e0b\u6587\u7ae0\u7684\u89e3\u91ca\uff0c\u5b9e\u8d28\u4e0amakefile\u4f1a\u5148\u53bb\u89e3\u91ca\u7b2c\u4e00\u4e2a</span><script type=\"math/tex\">(MY_PATH) \u80fd\u6253\u5370\u51fa\u6765\u5417\uff1f\u8fd9\u91cc\u53ef\u4ee5\u53c2\u8003\u5982\u4e0b\u6587\u7ae0\u7684\u89e3\u91ca\uff0c\u5b9e\u8d28\u4e0amakefile\u4f1a\u5148\u53bb\u89e3\u91ca\u7b2c\u4e00\u4e2a ,\u800cshell\u4f1a\u53bb\u89e3\u91ca\u7b2c\u4e8c\u4e2a,\u800cshell\u4f1a\u53bb\u89e3\u91ca\u7b2c\u4e8c\u4e2a ,\u5982\u679c\u53ea\u6709\u4e00\u4e2a,\u5982\u679c\u53ea\u6709\u4e00\u4e2a , make \u4f1a\u56e0\u4e3a\u627e\u4e0d\u5230\u53d8\u91cfMY_PATH\u800c\u7ec8\u6b62\uff0c\u56e0\u4e3aMY_PATH\u662f\u5b9a\u4e49\u5728shell\u4e2d\u7684\u3002 https://blog.csdn.net/darennet/article/details/8185881","title":"\u57fa\u672c\u5199\u6cd5"},{"location":"c/makefile.html#_2","text":"","title":"\u57fa\u672c\u8bed\u6cd5"},{"location":"c/makefile.html#_3","text":"# \u9012\u5f52\u5f0f\u53d8\u91cf\u8d4b\u503c,make\u4f1a\u5c06\u6574\u4e2amakefile\u5c55\u5f00\u540e\uff0c\u518d\u51b3\u5b9a\u53d8\u91cf\u7684\u503c algo = gzip.o lzma.o # \u76f4\u63a5\u5f0f\u53d8\u91cf\u8d4b\u503c\uff0c\u53d8\u91cf\u7684\u503c\u51b3\u5b9a\u4e8e\u5b83\u5728makefile\u4e2d\u7684\u4f4d\u7f6e algo := gzip.o lzma.o \u4e3e\u4e2a\u4f8b\u5b50\u5c31\u80fd\u8bf4\u660e\u533a\u522b _algo = gzip algo := $( _algo ) _algo = lzma test : @echo \"algo= $( algo ) \" \u8f93\u51fa\u5e94\u8be5\u4e3agzip,\u4e5f\u5c31\u662f\u8bf4\u5728\u5b9a\u4e49\u7684\u65f6\u5019\u5c31\u5c55\u5f00\u4e86 _algo = gzip algo = $( _algo ) _algo = lzma test : @echo \"algo= $( algo ) \" \u8f93\u51fa\u5e94\u8be5\u4e3alzma,\u5c06\u6574\u4e2amakefile\u5c55\u5f00\u540e\u624d\u786e\u5b9a\u4e86_algo\u7684\u503c\uff0c\u8fdb\u800c\u786e\u5b9a\u4e86algo\u7684\u503c","title":"\u76f4\u63a5\u5f0f\u53d8\u91cf\u8d4b\u503c\u4e0e\u9012\u5f52\u5f0f\u53d8\u91cf\u8d4b\u503c"},{"location":"c/makefile.html#_4","text":"# \u6b63\u5e38\u60c5\u51b5\u4e0bmake \u4f1a\u6253\u5370\u6bcf\u4e00\u6761\u547d\u4ee4\u7136\u540e\u518d\u6267\u884c\uff0c\u4f7f\u7528@\u53ef\u4ee5\u963b\u6b62\u56de\u663e echo \"hello world!\" @echo \"hello world!\"","title":"\u6253\u5370\u56de\u663e"},{"location":"c/makefile.html#_5","text":"\u53ea\u6709\u5728\u53d8\u91cf\u672a\u88ab\u8d4b\u503c\u65f6\u624d\u8d4b\u503c # \u6761\u4ef6\u8d4b\u503c algo ?= lzma # \u589e\u91cf\u5f0f\u8d4b\u503c algo += gzip","title":"\u5176\u4ed6\u8d4b\u503c"},{"location":"c/makefile.html#_6","text":"return = $( functionname arg1, arg2, arg3... )","title":"\u4f7f\u7528\u51fd\u6570"},{"location":"c/makefile.html#wildcard","text":"# * \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u6216\u591a\u4e2a\u5b57\u7b26 # ? \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26 # [...] [abc] \u8868\u793aabc\u4e2d\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u5339\u914d\uff0c [^abc]\u8868\u793a\u9664abc\u610f\u5916\u7684\u5b57\u7b26 # [0-9] \u8868\u793a0~9\u4efb\u610f\u4e00\u4e2a\u6570\u5b57 algo = $( wildcard *.c ) test : @echo \"algo= $( algo ) \" \u5047\u5982\u5728Makefile\u6240\u5728\u7684\u76ee\u5f55\u4e0b\u6709lzma.c, gzip.c, bzip2.c, xz.c, lzo.c \u90a3\u4e48algo\u4f1a\u6253\u5370\u51fa\u6240\u6709\u7684\u8fd9\u4e9b.c\u6587\u4ef6\u540d\u79f0","title":"\u6269\u5c55\u901a\u914d\u7b26wildcard"},{"location":"c/makefile.html#patsubst","text":"# % \u4e3a\u6a21\u5f0f\u5b57\u7b26 algo = $( patsubst %.c,%.o, $( wildcard *.c )) test : @echo \"algo = $( algo ) \"","title":"\u5339\u914d\u66ff\u4ee3\u901a\u914d\u7b26patsubst"},{"location":"c/makefile.html#notdir","text":"OBJS = /usr/opt/bin/algo.c algo = $( notdir $( OBJS )) test : @echo \"algo = $( algo ) \" \u8fd0\u884c\u7ed3\u679c root@chlxy : # make algo = algo.c","title":"\u53bb\u9664\u8def\u5f84notdir"},{"location":"c/makefile.html#subst","text":"string_old = AAAAABBBBBCCCCC string_new = $( subst A,a, $( string_old )) test : @echo \"new string is $( string_new ) \" \u8fd0\u884c\u7ed3\u679c,\u5176\u4e2d\u9700\u8981\u6ce8\u610f\uff0c\u5982\u679c\u5728\u4e0a\u8ff0A,a,\u540e\u9762\u52a0\u7a7a\u683c\u518d\u52a0$(string_new)\u4f1a\u5bfc\u81f4\u8f93\u51fa\u4e2d\u5e26\u6709\u7a7a\u683c root@chlxy : # make new string is aaaaaBBBBBCCCCC","title":"\u5b57\u7b26\u4e32\u66ff\u6362subst"},{"location":"c/makefile.html#filter","text":"string_old = AAAAA.c BBBBB.o CCCCC.s string_new = $( filter %.o, $( string_old )) test : @echo \"new string is $( string_new ) \" \u8fd0\u884c\u7ed3\u679c root@chlxy:# make new string is BBBBB.o","title":"\u8fc7\u6ee4\u51fd\u6570filter"},{"location":"c/makefile.html#foreach","text":"algos = lzma gzip lzo lz4 xz algofiles = $( foreach algo, $( algos ) , $( algo ) .c ) test : @echo \" $( algofiles ) \" \u8fd0\u884c\u7ed3\u679c root@chlxy:# make lzma.c gzip.c lzo.c lz4.c xz.c","title":"\u5faa\u73af\u51fd\u6570 foreach"},{"location":"c/makefile.html#shell","text":"algos = $( shell ls ) test : @echo \" $( algos ) \" \u8fd0\u884c\u7ed3\u679c root@chlxy:# make bzip2.c gzip.c lz4.c lzma.c lzo.c Makefile xz.c","title":"\u663e\u5f0f\u8fd0\u884cshell"},{"location":"c/makefile.html#error-warning","text":"ifndef ARCH $( error should define ARCH... ) endif ifndef PLAT $( warning forget define PLAT ? ) endif test : @echo \"this is a test\" \u8fd0\u884c\u7ed3\u679c root@chlxy:# make Makefile:3: *** should define ARCH...\u3002 \u505c\u6b62\u3002 root@chlxy:# make ARCH = arm Makefile:7: forget define PLAT ? this is a test root@chlxy:# make ARCH = arm PLAT = yes this is a test","title":"\u8fd0\u884c\u63a7\u5236 error \u4e0e warning"},{"location":"c/makefile.html#_7","text":"# \u51fd\u6570\u592a\u591a\uff0c\u5177\u4f53\u4f7f\u7528\u65b9\u6cd5\u5c31\u4e0d\u518d\u4e00\u4e00\u4e3e\u4f8b\u4e86 # \u5c06\u5b57\u7b26\u4e32\u5347\u5e8f\u6392\u5217\uff0c\u5e76\u53bb\u6389\u91cd\u590d\u5355\u8bcd sort # \u53d6\u5355\u8bcd\u51fd\u6570 word # \u53d6\u5b57\u7b26\u4e32\u51fd\u6570 wordlist # \u7edf\u8ba1\u5b57\u7b26\u4e32\u4e2d\u5355\u8bcd\u6570\u76ee words # \u53d6\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5355\u8bcd\uff0clastword\u540c\u7406\u53d6\u6700\u540e\u4e00\u4e2a\u5355\u8bcd firstword # \u53d6\u76ee\u5f55\uff0c\u5305\u542b\u6307\u5b9a\u6587\u4ef6\u7684\u8def\u5f84\u76ee\u5f55 dir # \u53d6\u524d\u7f00\u51fd\u6570 basename # \u5b9e\u73b0\u7528\u6237\u81ea\u5b9a\u4e49\u51fd\u6570\u7684\u5f15\u7528\uff0c$(call function arg1,arg2,...) call","title":"\u5176\u4ed6\u51fd\u6570"},{"location":"c/makefile.html#_8","text":"# ifeq ifneq ifdef ifndef ifeq ($(ARCH), arm) MY_ARCH = ARCH_ARM else ifeq ($(ARCH), arm64) MY_ARCH = ARCH_ARM_64 else MY_ARCH = unknown endif ifdef PLAT MY_PLAT = nxp else MY_PLAT = unknown endif test : @echo \"MY_ARCH = $( MY_ARCH ) MY_PLAT= $( MY_PLAT ) \" \u8fd0\u884c\u7ed3\u679c root@chlxy:# make ARCH = arm MY_ARCH = ARCH_ARM MY_PLAT = unknown root@chlxy:# make ARCH = arm PLAT = yes MY_ARCH = ARCH_ARM MY_PLAT = nxp root@chlxy:# make ARCH = arm64 MY_ARCH = ARCH_ARM_64 MY_PLAT = unknown","title":"\u6761\u4ef6\u5224\u65ad"},{"location":"c/omp.html","text":"\u591a\u7ebf\u7a0b\u7f16\u7a0b \u00b6 \u4f7f\u7528std::thread\u5b9e\u73b0\u591a\u7ebf\u7a0b \u00b6 c++11\u65b0\u5f15\u5165\u7684\u5934\u6587\u4ef6\uff0c\u7528\u6765\u652f\u6301\u591a\u7ebf\u7a0b\u7f16\u7a0b\u3002\u6709atomic,thread,mutex,condition_variable thread \u4e0d\u80fd\u88abcopy\u6784\u9020 \u4ee3\u7801\u4e3e\u4f8b \u00b6 std :: function < void () > async_function = nullptr ; std :: mutex async_mutex ; std :: condition_variable async_cond ; bool async_running ; bool async_started = false ; std :: thread * async_thread = new std :: thread ([ this ] { while ( true ) { std :: unique_lock < std :: mutex > lock ( async_mutex ); async_cond . wait ( lock , [ this ] { return async_function || ! async_running ; }); if ( ! async_running && ! async_function ) break ; async_function (); async_function = nullptr ; } }); void run_async ( std :: function < void () > func ) { { std :: lock_guard < std :: mutex > lock ( async_mutex ); async_started = true ; async_function = func ; } async_cond . notify_all (); } bool async_done () { if ( async_started ) { if ( async_function == nullptr ) { async_started = false ; return true ; } } return false ; } \u4f7f\u7528openmp\u5b9e\u73b0\u591a\u7ebf\u7a0b \u00b6 OpenMP\u662f\u4e00\u79cd\u7528\u4e8e\u5171\u4eab\u5185\u5b58\u5e76\u884c\u7cfb\u7edf\u7684\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u8bbe\u8ba1\u65b9\u6848\uff0c\u7f16\u8bd1\u5668\u6839\u636e\u7a0b\u5e8f\u4e2d\u6dfb\u52a0\u7684pragma\u6307\u4ee4\uff0c\u81ea\u52a8\u5c06\u7a0b\u5e8f\u5e76\u884c\u5904\u7406 \u7f16\u8bd1\u5236\u5bfc\u6307\u4ee4\u4ee5#pragma omp \u5f00\u59cb\uff0c\u540e\u9762\u53ef\u4ee5\u8ddf\u5177\u4f53\u7684\u6307\u4ee4 \u5177\u4f53\u7684\u53ef\u4ee5\u53c2\u8003\u522b\u4eba\u7684\u535a\u5ba2 TBB \u00b6 todo...\u636e\u8bf4\u8fd9\u4e2a\u6d41\u884c\uff1f","title":"\u591a\u7ebf\u7a0b\u7f16\u7a0b"},{"location":"c/omp.html#_1","text":"","title":"\u591a\u7ebf\u7a0b\u7f16\u7a0b"},{"location":"c/omp.html#stdthread","text":"c++11\u65b0\u5f15\u5165\u7684\u5934\u6587\u4ef6\uff0c\u7528\u6765\u652f\u6301\u591a\u7ebf\u7a0b\u7f16\u7a0b\u3002\u6709atomic,thread,mutex,condition_variable thread \u4e0d\u80fd\u88abcopy\u6784\u9020","title":"\u4f7f\u7528std::thread\u5b9e\u73b0\u591a\u7ebf\u7a0b"},{"location":"c/omp.html#_2","text":"std :: function < void () > async_function = nullptr ; std :: mutex async_mutex ; std :: condition_variable async_cond ; bool async_running ; bool async_started = false ; std :: thread * async_thread = new std :: thread ([ this ] { while ( true ) { std :: unique_lock < std :: mutex > lock ( async_mutex ); async_cond . wait ( lock , [ this ] { return async_function || ! async_running ; }); if ( ! async_running && ! async_function ) break ; async_function (); async_function = nullptr ; } }); void run_async ( std :: function < void () > func ) { { std :: lock_guard < std :: mutex > lock ( async_mutex ); async_started = true ; async_function = func ; } async_cond . notify_all (); } bool async_done () { if ( async_started ) { if ( async_function == nullptr ) { async_started = false ; return true ; } } return false ; }","title":"\u4ee3\u7801\u4e3e\u4f8b"},{"location":"c/omp.html#openmp","text":"OpenMP\u662f\u4e00\u79cd\u7528\u4e8e\u5171\u4eab\u5185\u5b58\u5e76\u884c\u7cfb\u7edf\u7684\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u8bbe\u8ba1\u65b9\u6848\uff0c\u7f16\u8bd1\u5668\u6839\u636e\u7a0b\u5e8f\u4e2d\u6dfb\u52a0\u7684pragma\u6307\u4ee4\uff0c\u81ea\u52a8\u5c06\u7a0b\u5e8f\u5e76\u884c\u5904\u7406 \u7f16\u8bd1\u5236\u5bfc\u6307\u4ee4\u4ee5#pragma omp \u5f00\u59cb\uff0c\u540e\u9762\u53ef\u4ee5\u8ddf\u5177\u4f53\u7684\u6307\u4ee4 \u5177\u4f53\u7684\u53ef\u4ee5\u53c2\u8003\u522b\u4eba\u7684\u535a\u5ba2","title":"\u4f7f\u7528openmp\u5b9e\u73b0\u591a\u7ebf\u7a0b"},{"location":"c/omp.html#tbb","text":"todo...\u636e\u8bf4\u8fd9\u4e2a\u6d41\u884c\uff1f","title":"TBB"},{"location":"c/reverse.html","text":"\u5982\u4f55\u5199\u4e00\u4e2a\u53c8\u9ad8\u6548\u53c8\u7f8e\u89c2\u7684reverse \u00b6 \u5199\u4e00\u4e2a\u53c8\u9ad8\u6548\u53c8\u7f8e\u89c2\u7684byte reverse #include <iostream> template < int N > inline void reverse ( uint8_t * a , uint8_t * b ) { * a = * b ; reverse < N - 1 > ( a + 1 , b - 1 ); } template <> inline void reverse < 1 > ( uint8_t * a , uint8_t * b ) { * a = * b ; } int main () { uint64_t tmp = 0x1234567890abcdef ; uint64_t b ; reverse < 8 > (( uint8_t * ) & b , ( uint8_t * ) & tmp + 7 ); std :: cout << \"a = 0x\" << std :: hex << tmp << \" b = 0x\" << std :: hex << b << std :: endl ; return 0 ; }","title":"\u5982\u4f55\u5199\u4e00\u4e2a\u53c8\u9ad8\u6548\u53c8\u7f8e\u89c2\u7684reverse"},{"location":"c/reverse.html#reverse","text":"\u5199\u4e00\u4e2a\u53c8\u9ad8\u6548\u53c8\u7f8e\u89c2\u7684byte reverse #include <iostream> template < int N > inline void reverse ( uint8_t * a , uint8_t * b ) { * a = * b ; reverse < N - 1 > ( a + 1 , b - 1 ); } template <> inline void reverse < 1 > ( uint8_t * a , uint8_t * b ) { * a = * b ; } int main () { uint64_t tmp = 0x1234567890abcdef ; uint64_t b ; reverse < 8 > (( uint8_t * ) & b , ( uint8_t * ) & tmp + 7 ); std :: cout << \"a = 0x\" << std :: hex << tmp << \" b = 0x\" << std :: hex << b << std :: endl ; return 0 ; }","title":"\u5982\u4f55\u5199\u4e00\u4e2a\u53c8\u9ad8\u6548\u53c8\u7f8e\u89c2\u7684reverse"},{"location":"c/stl_containers.html","text":"C++ STL\u5bb9\u5668 \u00b6 \u672c\u7bc7\u6587\u7ae0\u5bf9C++\u7684STL\u5bb9\u5668\u505a\u4e00\u4e9b\u603b\u7ed3\uff0c\u5728\u6a21\u62df\u5668\u5f00\u53d1\u4e2d\uff0c\u7ecf\u5e38\u9700\u8981\u7528\u5230STL\u5bb9\u5668\uff0c\u901a\u8fc7\u5bf9\u5e38\u89c1\u5bb9\u5668\u7684\u5206\u6790\uff0c\u80fd\u591f\u8ba9\u6211\u4eec\u5728\u5f00\u53d1\u6a21\u62df\u5668\u7684\u8fc7\u7a0b\u4e2d\u9009\u62e9\u5408\u9002\u7684\u5bb9\u5668\u5b9e\u73b0\u6211\u4eec\u7684\u8bbe\u8ba1\u3002 STL\u5bb9\u5668 \u00b6 \u5bb9\u5668\u53ef\u4ee5\u5206\u4e3a\u4e24\u5927\u7c7b \u5e8f\u5217\u5f0f\u5bb9\u5668\u3002 \u5173\u8054\u5f0f\u5bb9\u5668\u3002\u90fd\u662f\u6709\u5e8f\u7684 \u5e8f\u5217\u5f0f\u5bb9\u5668(\u53ef\u4ee5\u5728\u521d\u59cb\u5316\u65f6\u6307\u5b9a\u5927\u5c0f) vector deque list \u5173\u8054\u5f0f\u5bb9\u5668(\u8fed\u4ee3\u5668\u4ec5\u652f\u6301++\u64cd\u4f5c) array queue map multimap pair unordered_set unordered_multiset unordered_map Vector \u00b6 \u7c7b\u4f3c\u4e8e\u6570\u7ec4\uff0c\u5f53\u6211\u4eec\u9700\u8981\u6570\u7ec4\u65f6\u53ef\u4ee5\u8003\u8651Vector vector\u4f1a\u591a\u7533\u8bf7\u4e00\u4e9b\u7a7a\u95f4\u6765\u63d0\u9ad8\u6548\u7387\uff0c\u4f46\u5f53\u6570\u7ec4\u7a7a\u95f4(capacity)\u4e0d\u8db3\u65f6\uff0c\u4f1a\u901a\u8fc7\uff1a\u5206\u914d\u65b0\u7a7a\u95f4->\u590d\u5236\u5143\u7d20->\u91ca\u653e\u539f\u7a7a\u95f4 \u7684\u64cd\u4f5c\u6765\u5b9e\u73b0\u6269\u5bb9\u3002 \u5220\u9664\u5143\u7d20\u65f6\uff0c\u4e0d\u4f1a\u91ca\u653e\u7a7a\u95f4(capacity) \u5220\u9664\u548c\u63d2\u5165\u7684\u6548\u7387\u4f4e\uff0c\u5728\u5c3e\u90e8\u64cd\u4f5c\u7684\u6548\u7387\u9ad8\u3002\u5220\u9664\u5143\u7d20\u4f1a\u5bfc\u81f4\u8fed\u4ee3\u5668\u5931\u6548\uff0c\u9700\u8981\u6ce8\u610f\u66f4\u65b0\u8fed\u4ee3\u5668 \u968f\u673a\u8bbf\u95ee\u6548\u7387\u9ad8 map \u00b6 deque \u00b6 \u53cc\u7aef\u961f\u5217\uff0c\u4e24\u7aef\u63d2\u5165\u5143\u7d20\u6548\u7387\u9ad8 list \u00b6 \u53cc\u5411\u94fe\u8868 set/multiset \u00b6 \u4e3a\u4e86\u5feb\u901f\u68c0\u7d22\u3001\u53bb\u91cd\u3001\u6392\u5e8f set\u5b58\u50a8\u4e00\u7ec4\u65e0\u91cd\u590d\u7684\u5143\u7d20\uff0cmultiset\u5141\u8bb8\u5b58\u50a8\u6709\u91cd\u590d\u7684\u5143\u7d20 \u5982\u679c\u8981\u4fee\u6539\u67d0\u4e00\u4e2a\u5143\u7d20\u503c\uff0c\u5fc5\u987b\u5220\u9664\u539f\u6709\u7684\u5143\u7d20\u518d\u63d2\u5165\u65b0\u5143\u7d20","title":"C++ STL\u5bb9\u5668"},{"location":"c/stl_containers.html#c-stl","text":"\u672c\u7bc7\u6587\u7ae0\u5bf9C++\u7684STL\u5bb9\u5668\u505a\u4e00\u4e9b\u603b\u7ed3\uff0c\u5728\u6a21\u62df\u5668\u5f00\u53d1\u4e2d\uff0c\u7ecf\u5e38\u9700\u8981\u7528\u5230STL\u5bb9\u5668\uff0c\u901a\u8fc7\u5bf9\u5e38\u89c1\u5bb9\u5668\u7684\u5206\u6790\uff0c\u80fd\u591f\u8ba9\u6211\u4eec\u5728\u5f00\u53d1\u6a21\u62df\u5668\u7684\u8fc7\u7a0b\u4e2d\u9009\u62e9\u5408\u9002\u7684\u5bb9\u5668\u5b9e\u73b0\u6211\u4eec\u7684\u8bbe\u8ba1\u3002","title":"C++ STL\u5bb9\u5668"},{"location":"c/stl_containers.html#stl","text":"\u5bb9\u5668\u53ef\u4ee5\u5206\u4e3a\u4e24\u5927\u7c7b \u5e8f\u5217\u5f0f\u5bb9\u5668\u3002 \u5173\u8054\u5f0f\u5bb9\u5668\u3002\u90fd\u662f\u6709\u5e8f\u7684 \u5e8f\u5217\u5f0f\u5bb9\u5668(\u53ef\u4ee5\u5728\u521d\u59cb\u5316\u65f6\u6307\u5b9a\u5927\u5c0f) vector deque list \u5173\u8054\u5f0f\u5bb9\u5668(\u8fed\u4ee3\u5668\u4ec5\u652f\u6301++\u64cd\u4f5c) array queue map multimap pair unordered_set unordered_multiset unordered_map","title":"STL\u5bb9\u5668"},{"location":"c/stl_containers.html#vector","text":"\u7c7b\u4f3c\u4e8e\u6570\u7ec4\uff0c\u5f53\u6211\u4eec\u9700\u8981\u6570\u7ec4\u65f6\u53ef\u4ee5\u8003\u8651Vector vector\u4f1a\u591a\u7533\u8bf7\u4e00\u4e9b\u7a7a\u95f4\u6765\u63d0\u9ad8\u6548\u7387\uff0c\u4f46\u5f53\u6570\u7ec4\u7a7a\u95f4(capacity)\u4e0d\u8db3\u65f6\uff0c\u4f1a\u901a\u8fc7\uff1a\u5206\u914d\u65b0\u7a7a\u95f4->\u590d\u5236\u5143\u7d20->\u91ca\u653e\u539f\u7a7a\u95f4 \u7684\u64cd\u4f5c\u6765\u5b9e\u73b0\u6269\u5bb9\u3002 \u5220\u9664\u5143\u7d20\u65f6\uff0c\u4e0d\u4f1a\u91ca\u653e\u7a7a\u95f4(capacity) \u5220\u9664\u548c\u63d2\u5165\u7684\u6548\u7387\u4f4e\uff0c\u5728\u5c3e\u90e8\u64cd\u4f5c\u7684\u6548\u7387\u9ad8\u3002\u5220\u9664\u5143\u7d20\u4f1a\u5bfc\u81f4\u8fed\u4ee3\u5668\u5931\u6548\uff0c\u9700\u8981\u6ce8\u610f\u66f4\u65b0\u8fed\u4ee3\u5668 \u968f\u673a\u8bbf\u95ee\u6548\u7387\u9ad8","title":"Vector"},{"location":"c/stl_containers.html#map","text":"","title":"map"},{"location":"c/stl_containers.html#deque","text":"\u53cc\u7aef\u961f\u5217\uff0c\u4e24\u7aef\u63d2\u5165\u5143\u7d20\u6548\u7387\u9ad8","title":"deque"},{"location":"c/stl_containers.html#list","text":"\u53cc\u5411\u94fe\u8868","title":"list"},{"location":"c/stl_containers.html#setmultiset","text":"\u4e3a\u4e86\u5feb\u901f\u68c0\u7d22\u3001\u53bb\u91cd\u3001\u6392\u5e8f set\u5b58\u50a8\u4e00\u7ec4\u65e0\u91cd\u590d\u7684\u5143\u7d20\uff0cmultiset\u5141\u8bb8\u5b58\u50a8\u6709\u91cd\u590d\u7684\u5143\u7d20 \u5982\u679c\u8981\u4fee\u6539\u67d0\u4e00\u4e2a\u5143\u7d20\u503c\uff0c\u5fc5\u987b\u5220\u9664\u539f\u6709\u7684\u5143\u7d20\u518d\u63d2\u5165\u65b0\u5143\u7d20","title":"set/multiset"},{"location":"chisel/chisel.html","text":"chisel \u00b6 Hardware compiler framework and hardware design language developed at UC Berkeley chisel \u73b0\u72b6 \u7279\u70b9 \u4e0everilog\u7684\u5bf9\u6bd4 \u524d\u666f \u5b66\u4e60\u8def\u7ebf \u73af\u5883\u642d\u5efa chisel\u8bed\u6cd5\u8981\u70b9 \u6570\u636e\u7c7b\u578b Bundles \u7ec4\u5408\u903b\u8f91\u548c\u65f6\u5e8f\u903b\u8f91 tester \u751f\u6210\u5668 \u73b0\u72b6 \u00b6 \u5b98\u65b9\u5b9e\u73b0\u4e86 Rocket Chip \u53ca BOOM \u4e24\u6b3e CPU SiFive \u7684\u82af\u7247\u4f7f\u7528Chisel\u7f16\u5199 \u4e2d\u79d1\u9662\u8ba1\u7b97\u6240\u7684 \u9999\u5c71\u5904\u7406\u5668 \u4f7f\u7528shisel\u7f16\u5199 \u7279\u70b9 \u00b6 Open-Source Highly parameterized Based on Scala Re-usable components and libraries FIRRTL (Flexible Intermediate Representation for RTL) The ability to create generators Design verification support iotesters(peek, poke, expect) and testers2(fork, join) Can in-line verilog \u4ecechisel\u5b98\u65b9\u7f51\u7ad9\u540d\u79f0\u662f\u4e0d\u662f\u80fd\u591f\u770b\u51fa\u6765\u5b83\u66f4\u50cf\u662f\u4e00\u4e2a\u786c\u4ef6\u7f16\u8bd1\u5668\u6846\u67b6\uff1f lang\u8ba9\u4eba\u8054\u60f3\u5230clang,\u8fdb\u800c\u60f3\u5230llvm\uff0cFIRRTL\u4ece\u8bbe\u8ba1\u4e0a\u548cLLVM\u5f88\u50cf\u3002 \u4e0everilog\u7684\u5bf9\u6bd4 \u00b6 \u5bf9\u6bd4\u9879 verilog chisel HDL \u662f HDL,\u975eHLS 1 \u4ee3\u7801\u7b80\u6d01\u6027 \u975e\u5e38\u5570\u55e6\uff0c\u53ef\u8bfb\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u90fd\u6bd4\u8f83\u5dee \u4ee3\u7801\u7b80\u6d01\uff0c\u7b26\u5408\u8f6f\u4ef6\u601d\u7ef4 \u7f16\u8bd1\u68c0\u67e5 \u4ece\u4e0d\u8fdb\u884c\u68c0\u67e5\uff0c\u7f16\u8bd1\u5668\u6ca1\u6709\u57fa\u672c\u7684\u903b\u8f91\u5224\u65ad\u80fd\u529b \u529f\u80fd\u5f3a\u5927\u7684\u9519\u8bef\u68c0\u67e5\u548c\u81ea\u52a8\u63a8\u65ad\u80fd\u529b \u662f\u5426\u53ef\u7efc\u5408 \u53ef\u7efc\u5408\uff0c\u5177\u6709\u552f\u4e00\u6027 \u53ef\u7efc\u5408,\u5177\u6709\u552f\u4e00\u6027 \u91cd\u7528\u6027 \u8f83\u5dee\u7684\u53ef\u91cd\u7528\u6027\uff0c\u5f88\u96be\u62ff\u6765\u76f4\u63a5\u603c \u9ad8\u5ea6\u7684\u53c2\u6570\u5316\u652f\u6301\uff0c\u5f88\u5bb9\u6613\u590d\u7528 \u6210\u719f\u5ea6 \u975e\u5e38\u6210\u719f \u4ecd\u9700\u8981\u8f83\u957f\u65f6\u95f4\u7684\u53d1\u5c55 \u6a21\u5757\u6d4b\u8bd5\u96be\u5ea6 \u6d4b\u8bd5\u4ee3\u7801\u53ef\u80fd\u8981\u6bd4\u8bbe\u8ba1\u4ee3\u7801\u8fd8\u8981\u590d\u6742 \u81ea\u5e26\u7684tester\u7f16\u5199\u65b9\u4fbf\uff0c\u8bed\u6cd5\u9ad8\u7ea7 \u524d\u666f \u00b6 Verilog,SystemVerilog,SystemC,Chisel,HLS \u8c01\u4eec\u624d\u662f\u672a\u6765\uff1f \u5b66\u4e60\u8def\u7ebf \u00b6 \u5b98\u65b9\u6559\u7a0b \u5b98\u65b9\u7f51\u7ad9 chisel\u5de5\u7a0b\u6a21\u677f API\u624b\u518c \u901f\u8bb0\u624b\u518c\u4e0b\u8f7d\u94fe\u63a5 \u6839\u636e\u5b98\u65b9\u8bad\u7ec3\u8425\uff0c\u4e00\u6b65\u6b65\u7684\u5b66\u4e60\uff0c\u81ea\u5df1\u52a8\u624b\u6572\u4e00\u6572\uff0c\u505a\u4e00\u4e9b\u7b80\u5355\u6d4b\u8bd5\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5728\u8bfbRocket Chip\u4ee3\u7801\u7684\u540c\u65f6\u4e0d\u65ad\u7684\u8fdb\u884c\u63d0\u9ad8 \u73af\u5883\u642d\u5efa \u00b6 chisel\u5b98\u65b9\u63d0\u4f9b\u4e86chisel-bootcamp, \u4e00\u4e2achisel\u6559\u7a0b\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u53c2\u8003\uff0c\u5b83\u4e3a\u4e86\u4e13\u6ce8\u4e8echisel\u672c\u8eab\uff0c\u628a\u73af\u5883\u642d\u5efa\u7ed9\u505a\u597d\u4e86\uff0c\u8fd9\u91cc\u5efa\u8bae\u91c7\u53d6\uff1a\u81ea\u5df1\u642d\u5efa\u73af\u5883 + bootcamp\u4f8b\u7a0b\u7684\u5b66\u4e60\u65b9\u6cd5 \u73af\u5883\u642d\u5efa\u8981\u70b9\uff1a chisel\u4f9d\u8d56\u4e8esbt\u548cscala,\u56e0\u6b64\uff0c\u63d0\u524d\u642d\u5efa\u597dscala\u8fd0\u884c\u73af\u5883 chisel\u4e0d\u9700\u8981\u5355\u72ec\u8fdb\u884c\u5b89\u88c5\uff0csbt\u80fd\u591f\u81ea\u52a8\u83b7\u53d6\u6258\u7ba1\u4f9d\u8d56 \u4e0b\u8f7d\u4e00\u4e2achisel\u7684repo\u6a21\u677f\u4f1a\u662f\u975e\u5e38\u7701\u4e8b\u7684\u73af\u5883\u642d\u5efa\u65b9\u6cd5 \u4e0b\u9762\u662fshisel-template\u7684\u7b80\u8981\u76ee\u5f55\u7ed3\u6784\uff0csbt\u8981\u6c42\u653e\u7f6e\u6587\u4ef6\u5fc5\u987b\u6309\u7167\u4e00\u5b9a\u7684\u76ee\u5f55\u7ed3\u6784\u653e\u7f6e\uff0c\u5f88\u591a\u73b0\u4ee3\u6784\u5efa\u5de5\u5177\u90fd\u6709\u8fd9\u6837\u7c7b\u4f3c\u7684\u8981\u6c42 \u5176\u4e2d\uff1a build.sbt :\u5b58\u653e\u4e86\u7edd\u5927\u591a\u6570\u6784\u5efa\u89c4\u5219(\u4e3b\u6d41\u7528\u6cd5)\uff0c\u4e3b\u8981\u662f\u6784\u5efa\u5bf9\u8c61\u4ee5\u53ca\u4f9d\u8d56\u7684\u5305\uff0cchisel\u5305\u5c31\u5728\u8fd9\u91cc\u9762\u8fdb\u884c\u8bf4\u660e build.sc :\u76ee\u524d\u8fd8\u672a\u5b8c\u5168\u5f04\u6e05 src : \u6839\u636esbt\u89c4\u5219\uff0c\u9ed8\u8ba4\u6784\u5efa\u5bf9\u8c61\u5b58\u653e\u7684\u76ee\u5f55\u5c31\u662fsrc,src\u76ee\u5f55\u4e0b\u5fc5\u987b\u6709\u4e00\u4e2amian/scala\u76ee\u5f55\uff0c\u6e90\u6587\u4ef6\u653e\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e0b src/test : test\u76ee\u5f55\uff0c\u6d4b\u8bd5\u4ee3\u7801\u5e94\u8be5\u653e\u5728\u8fd9\u4e2a\u76ee\u5f55\u7684scala\u5b50\u76ee\u5f55\u4e0b\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4f7f\u7528iotester\u548ctester2\u8fdb\u884c\u5355\u5143\u6d4b\u8bd5\u4e86 test_run_dir : \u8fd0\u884c\u65f6\u53ef\u80fd\u751f\u6210\u6b64\u76ee\u5f55\uff0c\u751f\u6210\u7684VCD\u6ce2\u5f62\u6587\u4ef6\u5c31\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e0b\uff0c\u8fd9\u662ftester\u7684\u529f\u80fd project : sbt \u4f7f\u7528 . \u251c\u2500\u2500 build.sbt \u251c\u2500\u2500 build.sc \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 project \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u2514\u2500\u2500 scala \u2502 \u2502 \u2514\u2500\u2500 demo.scala \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 scala \u2502 \u2514\u2500\u2500 BaseTest.scala \u251c\u2500\u2500 target \u2514\u2500\u2500 test_run_dir chisel\u8bed\u6cd5\u8981\u70b9 \u00b6 \u65f6\u523b\u6ce8\u610f\uff0cchisel\u662f\u5f3a\u7c7b\u578b\u8bed\u8a00\uff0c\u7c7b\u578b\u4e0d\u5339\u914d\u5728\u7f16\u8bd1\u65f6\u4f1a\u62a5\u9519\uff0c\u8981\u719f\u77e5\u4f7f\u7528\u7684\u5bf9\u8c61\u7684\u7c7b\u578b\u3002 \u4e0b\u9762\u7684\u8bed\u6cd5\u8981\u70b9\u662f\u5bf9\u5b98\u65b9\u6559\u7a0b\u8fdb\u884c\u4e86\u603b\u7ed3\uff0c\u4f46**\u719f\u6089chisel\u57fa\u7840\u8bed\u6cd5\u6700\u597d\u7684\u65b9\u5f0f\u662f\u6309\u7167\u5b98\u65b9\u6559\u7a0b\u8fdb\u884c\u5b66\u4e60** \u6570\u636e\u7c7b\u578b \u00b6 chisel\u6709\u7740\u4e25\u683c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5b83\u7528\u4e8e\u6784\u5efa\u903b\u8f91\u7535\u8def\u7684\u6570\u636e\u7c7b\u578b\u548cscala\u662f\u4e25\u683c\u533a\u5206\u7684\u3002\u540c\u65f6\uff0c\u56e0\u4e3a\u662f\u751f\u6210\u786c\u4ef6\u7535\u8def\uff0c\u56e0\u6b64\uff0c\u6240\u6709\u7684\u6570\u636e\u90fd\u5e94\u8be5\u662fval\u800c\u4e0d\u662fvar \u5982\u4e0b\u662f\u5e38\u7528\u6570\u636e\u7c7b\u578b\uff0c\u5176\u4e2d.U .S .B\u662f\u5e38\u89c1\u7684\u4e09\u79cd\u6570\u636e\u7c7b\u578b 1 . U // decimal 1-bit lit from Scala Int. \"ha\" . U // hexadecimal 4-bit lit from string. \"o12\" . U // octal 4-bit lit from string. \"b1010\" . U // binary 4-bit lit from string. 5 . S // signed decimal 4-bit lit from Scala Int. - 8 . S // negative decimal 4-bit lit from Scala Int. 5 . U // unsigned decimal 3-bit lit from Scala Int. 8 . U ( 4 . W ) // 4-bit unsigned decimal, value 8. - 152 . S ( 32 . W ) // 32-bit signed decimal, value -152. true . B // Bool lits from Scala lits. false . B \u4e0b\u5212\u7ebf\u53ef\u4ee5\u7528\u6765\u589e\u52a0\u53ef\u8bfb\u6027\uff0c\u5e76\u6ca1\u6709\u5b9e\u9645\u610f\u4e49 \"h_dead_beef\" . U // 32-bit lit of type UInt .W\u7528\u6765\u6307\u5b9a\u5bbd\u5ea6\u3002\u5982\u679c\u4e0d\u6307\u5b9a\uff0c\u90a3\u4e48\u81ea\u52a8\u7684\u4f1a\u7528\u6700\u5c11\u7684bits\u3002\u5982\u679c\u6307\u5b9a\u7684\u4f4d\u5bbd\u5927\u4e8e\u5b9e\u9645\u9700\u8981\u7684\u4f4d\u5bbd\uff0cUInt\u4f1a\u8fdb\u884c0\u6269\u5c55\uff0cSInt\u4f1a\u8fdb\u884c\u7b26\u53f7\u6269\u5c55\uff1b\u5982\u679c\u5c0f\u4e8e\uff0c\u7f16\u8bd1\u4f1a\u62a5\u9519\u3002 Vecs \u4e5f\u662f\u6570\u636e\u7c7b\u578b(\u8fd9\u6837\u5c31\u80fd\u7406\u89e3\u4e3a\u4ec0\u4e48\u5199\u505aReg(Vec(4, UInt(4.W)))) Analog \u5c31\u7b49\u4e8einout\uff0c\u53cc\u5411\u7ebf chisel\u4e2d\u6709\u5f88\u591aclass\u90fd\u53ef\u4ee5\u4e0d\u7528new\u6765\u5b9e\u4f8b\u5316\uff0c\u56e0\u4e3a\u6709\u4e9b\u4f7f\u7528\u4e86case class, \u6709\u4e00\u4e9b\u5df2\u7ecf\u5b9e\u73b0\u4e86object\u7684apply\u65b9\u6cd5 Bundles \u00b6 bundle\u662f\u4e00\u4e2a\u503c\u7684\u96c6\u5408\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u662fstruct Flipped()\u53ef\u4ee5\u7528\u6765\u7ffb\u8f6cBundle\uff0c\u8fd9\u6837\u5c31\u975e\u5e38\u65b9\u4fbf\u7684\u6784\u5efa\u53cc\u5411\u63a5\u53e3 class ABBundle extends Bundle { val a = Input ( Bool ()) val b = Output ( Bool ()) } class MyFlippedModule extends RawModule { // Normal instantiation of the bundle // 'a' is an Input and 'b' is an Output val normalBundle = IO ( new ABBundle ) normalBundle . b := normalBundle . a // Flipped recursively flips the direction of all Bundle fields // Now 'a' is an Output and 'b' is an Input val flippedBundle = IO ( Flipped ( new ABBundle )) flippedBundle . a := flippedBundle . b } rocket-chip\u4e2d\u7684flip\u7684\u4f7f\u7528\uff0c\u5176\u4e2dflip\u5c31\u662fFlipped(target),\u8fd9\u6837\u5c31\u80fd\u5b9a\u4e49\u63a5\u53e3\u5c31\u597d\u4e86\uff0c\u5bf9\u4e8e\u8f93\u51fa\u6a21\u5757\u548c\u8f93\u51fa\u6a21\u5757\uff0c\u4ed6\u4eec\u7684\u4fe1\u53f7\u5c31\u662f\u5b8c\u5168\u53ef\u4ee5Flip\u3002 \u5176\u4e2dValid\u662f\u5728\u4fe1\u53f7\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e86Valid\u4fe1\u53f7\u3002\u901a\u8fc7\u8fd9\u79cd\u673a\u5236\uff0cchisel\u7f16\u5199\u7684\u6a21\u5757\u53ef\u8bfb\u6027\u66f4\u597d\u3002 class BTB ( implicit p : Parameters ) extends BtbModule { val io = new Bundle { val req = Valid ( new BTBReq ). flip val resp = Valid ( new BTBResp ) val btb_update = Valid ( new BTBUpdate ). flip val bht_update = Valid ( new BHTUpdate ). flip val bht_advance = Valid ( new BTBResp ). flip val ras_update = Valid ( new RASUpdate ). flip val ras_head = Valid ( UInt ( width = vaddrBits )) val flush = Bool (). asInput } \u7ec4\u5408\u903b\u8f91\u548c\u65f6\u5e8f\u903b\u8f91 \u00b6 chisel\u63d0\u4f9b\u4e86Mux,Cat,Wire\u7b49\u57fa\u7840\u7c7b\u578b\u7528\u4e8e\u5b9e\u73b0\u7ec4\u5408\u903b\u8f91\uff0c\u63d0\u4f9b\u4e86Reg\uff0cwhen, elsewhen, otherwise\u7b49\u6765\u5b9e\u73b0\u65f6\u5e8f\u903b\u8f91\u3002 \u5fc5\u987b\u4f7f\u7528 := \u6765\u5bf9Wire\u548cReg\u8fdb\u884c\u8d4b\u503c, \u8fd9\u91cc\u4f7f\u7528\u4e00\u4e2a\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\u7684ALU\u5355\u5143\u6765\u4f53\u73b0chisel\u5982\u4f55\u5b9e\u73b0\u7ec4\u5408\u903b\u8f91\u548c\u65f6\u5e8f\u903b\u8f91 class MyAlu extends Module { val io = IO ( new Bundle { val in_src1 = Input ( UInt ( 32 . W )) val in_src2 = Input ( UInt ( 32 . W )) val in_imm2 = Input ( UInt ( 2 . W )) val output_add = Output ( UInt ( 32 . W )) val output_add_expand = Output ( UInt ( 64 . W )) val output_sub = Output ( UInt ( 32 . W )) val output_max = Output ( UInt ( 32 . W )) val output_ext = Output ( UInt ( 32 . W )) }) io . output_add := io . in_src1 + io . in_src2 io . output_sub := io . in_src1 - io . in_src2 io . output_add_expand := io . in_src1 +& io . in_src2 val to_max = Wire ( UInt ( 32 . W )) when ( io . in_src1 < io . in_src2 ) { to_max := io . in_src2 } . otherwise { to_max := io . in_src1 } io . output_max := to_max val ext_reg = RegInit ( UInt ( 32 . W ), 0 . U ) switch ( io . in_imm2 ) { is ( 0 . U ) { ext_reg := io . in_src1 } is ( 1 . U ) { ext_reg := Cat ( io . in_src1 ( 31 , 1 ), 0 . U ( 1 . W )) } is ( 2 . U ) { ext_reg := Cat ( io . in_src1 ( 31 , 2 ), 0 . U ( 2 . W )) } is ( 3 . U ) { ext_reg := Cat ( io . in_src1 ( 31 , 3 ), 0 . U ( 3 . W )) } } io . output_ext := ext_reg } \u751f\u6210\u7684verilog\u4ee3\u7801\u5982\u4e0b module MyAlu ( input clock , input reset , input [ 31 : 0 ] io_in_src1 , input [ 31 : 0 ] io_in_src2 , input [ 1 : 0 ] io_in_imm2 , output [ 31 : 0 ] io_output_add , output [ 63 : 0 ] io_output_add_expand , output [ 31 : 0 ] io_output_sub , output [ 31 : 0 ] io_output_max , output [ 31 : 0 ] io_output_ext ); wire [ 32 : 0 ] _io_output_add_T = io_in_src1 + io_in_src2 ; // @[demo.scala 17:31] reg [ 31 : 0 ] ext_reg ; // @[demo.scala 29:24] wire _T_1 = 2'h0 == io_in_imm2 ; // @[Conditional.scala 37:30] wire _T_2 = 2'h1 == io_in_imm2 ; // @[Conditional.scala 37:30] wire [ 30 : 0 ] ext_reg_hi = io_in_src1 [ 31 : 1 ]; // @[demo.scala 35:32] wire [ 31 : 0 ] _ext_reg_T = { ext_reg_hi , 1'h0 }; // @[Cat.scala 30:58] wire _T_3 = 2'h2 == io_in_imm2 ; // @[Conditional.scala 37:30] wire [ 29 : 0 ] ext_reg_hi_1 = io_in_src1 [ 31 : 2 ]; // @[demo.scala 38:32] wire [ 31 : 0 ] _ext_reg_T_1 = { ext_reg_hi_1 , 2'h0 }; // @[Cat.scala 30:58] wire _T_4 = 2'h3 == io_in_imm2 ; // @[Conditional.scala 37:30] wire [ 28 : 0 ] ext_reg_hi_2 = io_in_src1 [ 31 : 3 ]; // @[demo.scala 41:32] wire [ 31 : 0 ] _ext_reg_T_2 = { ext_reg_hi_2 , 3'h0 }; // @[Cat.scala 30:58] wire [ 31 : 0 ] _GEN_1 = _T_4 ? _ext_reg_T_2 : ext_reg ; // @[Conditional.scala 39:67 demo.scala 41:15 demo.scala 29:24] assign io_output_add = io_in_src1 + io_in_src2 ; // @[demo.scala 17:31] assign io_output_add_expand = {{ 31 'd0 }, _io_output_add_T }; // @[demo.scala 19:38] assign io_output_sub = io_in_src1 - io_in_src2 ; // @[demo.scala 18:31] assign io_output_max = io_in_src1 < io_in_src2 ? io_in_src2 : io_in_src1 ; // @[demo.scala 22:34 demo.scala 23:12 demo.scala 25:12] assign io_output_ext = ext_reg ; // @[demo.scala 44:17] always @( posedge clock ) begin if ( reset ) begin // @[demo.scala 29:24] ext_reg <= 32'h0 ; // @[demo.scala 29:24] end else if ( _T_1 ) begin // @[Conditional.scala 40:58] ext_reg <= io_in_src1 ; // @[demo.scala 32:15] end else if ( _T_2 ) begin // @[Conditional.scala 39:67] ext_reg <= _ext_reg_T ; // @[demo.scala 35:15] end else if ( _T_3 ) begin // @[Conditional.scala 39:67] ext_reg <= _ext_reg_T_1 ; // @[demo.scala 38:15] end else begin ext_reg <= _GEN_1 ; end end endmodule tester \u00b6 \u4e00\u4e2aFir\u6570\u5b57\u6ee4\u6ce2\u5668\u7684\u7b80\u5355\u6d4b\u8bd5\u65b9\u6cd5\uff0c\u5e76\u652f\u6301\u751f\u6210VCD\u6ce2\u5f62 import chisel3 . _ import chiseltest . _ import org . scalatest . _ import chiseltest . experimental . TestOptionBuilder . _ import chiseltest . internal . WriteVcdAnnotation class MySpec extends FlatSpec with ChiselScalatestTester with Matchers { it should \"get a fir\" in { test ( new My4ElementFir ( 0 , 0 , 0 , 0 )). withAnnotations ( Seq ( WriteVcdAnnotation )) { c => c . io . in . poke ( 0 . U ) c . io . out . expect ( 0 . U ) c . clock . step ( 1 ) c . io . in . poke ( 4 . U ) c . io . out . expect ( 0 . U ) c . clock . step ( 1 ) c . io . in . poke ( 5 . U ) c . io . out . expect ( 0 . U ) c . clock . step ( 1 ) c . io . in . poke ( 2 . U ) c . io . out . expect ( 0 . U ) } } } chisel \u652f\u6301scala\u7684tester\u6d4b\u8bd5\u6846\u67b6\uff0c\u540c\u65f6\u4e5f\u6b63\u5728\u6539\u8fdb\u6d4b\u8bd5\u6846\u67b6\uff0c\u540d\u4e3atesters2\u3002 \u6211\u4eec\u5728verilog\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u4e9b\u5355\u5143\u6d4b\u8bd5\u9700\u8981\u81ea\u5df1\u5199\u6fc0\u52b1\u6587\u4ef6\uff0c\u5f80\u5f80\u5bf9\u4e8e\u7a0d\u5fae\u590d\u6742\u7684\u6a21\u5757\uff0c\u6fc0\u52b1\u6587\u4ef6\u7684\u590d\u6742\u5ea6\u5f88\u9ad8\uff0c\u5f80\u5f80\u8fd9\u90e8\u5206\u5de5\u4f5c\u6709\u4e13\u95e8\u7684RTL\u9a8c\u8bc1\u4eba\u5458\u8d1f\u8d23\u3002chisel\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u9002\u7528\u4e8e\u5355\u5143\u6d4b\u8bd5\u548c\u7cfb\u7edf\u96c6\u6210\u6d4b\u8bd5\uff0c\u5e76\u5c3d\u53ef\u80fd\u4f7f\u5f97\u5355\u5143\u6d4b\u8bd5\u7b80\u5355\u65b9\u4fbf\u6709\u7528 \u8ba8\u8bba\uff1a \u81f3\u5c11\u5728\u5355\u5143\u81ea\u6d4b\u8bd5\u65b9\u9762\uff0cTesters\u63d0\u4f9b\u4e86\u4e00\u4e2a\u975e\u5e38\u65b9\u4fbf\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u7b80\u5355\u81ea\u9a8c\u8bc1\u3002Testers2\u5728\u4f7f\u7528chisel\u8fdb\u884cIC\u5f00\u53d1\u7684\u8fc7\u7a0b\u4e2d\u626e\u6f14\u7740\u600e\u6837\u7684\u89d2\u8272\uff1fTestes\u662f\u5426\u80fd\u591f\u66ff\u4ee3\u73b0\u6709\u7684\u6d4b\u8bd5\u624b\u6bb5\uff1f \u751f\u6210\u5668 \u00b6 \u6240\u8c13\u7684\u751f\u6210\u5668\u5c31\u662f\u6307\u6a21\u5757\u7684\u53c2\u6570\u5316\uff0c\u8fd9\u662fchisel\u771f\u6b63\u5f3a\u5927\u7684\u5730\u65b9\uff0c\u4e5f\u662f\u7cbe\u9ad3\u6240\u5728\u3002\u5355\u770b\u4e0a\u9762\u65f6\u5e8f\u903b\u8f91\u548c\u7ec4\u5408\u903b\u8f91\u7684\u4f8b\u5b50\uff0c\u4f60\u4e0d\u4f1a\u611f\u89c9\u5230chisel\u7684\u5f3a\u5927\uff0c\u53ea\u6709\u5728\u63a5\u89e6\u4e86\u751f\u6210\u5668\u4e4b\u540e\uff0c\u624d\u80fd\u771f\u6b63\u7684\u4f53\u4f1a\u5230\u7684\u5b83\u7684\u9ad8\u6548\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48chisel\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u8bb2\u7a76\u654f\u6377\u3002 \u8bed\u6cd5\u8981\u70b9\uff1a Option match,case Implicits\u9690\u542b\u53c2\u6570\uff0c\u9690\u5f0f\u8f6c\u6362(\u8fd9\u79cd\u65b9\u6cd5\u6bd4\u8f83\u96be\u8bfb\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528) \u5bb9\u5668 mutable.ArrayBuffer Vec(\u4ec5\u5728\u666e\u901aScala\u5bb9\u5668\u7528\u4e0d\u4e86\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528) \u4e3e\u4f8b\uff1a\u5982\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5bc4\u5b58\u5668\u6587\u4ef6\u5b9e\u73b0\uff0c\u53ef\u4ee5\u901a\u8fc7\u53c2\u6570\u6307\u5b9a\u8bfb\u7aef\u53e3\u7684\u6570\u91cf class RegisterFile ( readPorts : Int ) extends Module { require ( readPorts >= 0 ) val io = IO ( new Bundle { val wen = Input ( Bool ()) val waddr = Input ( UInt ( 5 . W )) val wdata = Input ( UInt ( 32 . W )) val raddr = Input ( Vec ( readPorts , UInt ( 5 . W ))) val rdata = Output ( Vec ( readPorts , UInt ( 32 . W ))) }) val reg = RegInit ( VecInit ( Seq . fill ( 32 )( 0 . U ( 32 . W )))) when ( io . wen ) { reg ( io . waddr ) := io . wdata } for ( i <- 0 until readPorts ) { when ( io . raddr ( i ) === 0 . U ) { io . rdata ( i ) := 0 . U } . otherwise { io . rdata ( i ) := reg ( io . raddr ( i )) } } } \u751f\u6210\u7684verilog\u5982\u4e0b\uff0c\u4f8b\u5316\u7684readPorts\u6570\u91cf\u4e3a3 module RegisterFile ( input clock , input reset , input io_wen , input [ 4 : 0 ] io_waddr , input [ 31 : 0 ] io_wdata , input [ 4 : 0 ] io_raddr_0 , input [ 4 : 0 ] io_raddr_1 , input [ 4 : 0 ] io_raddr_2 , output [ 31 : 0 ] io_rdata_0 , output [ 31 : 0 ] io_rdata_1 , output [ 31 : 0 ] io_rdata_2 ); reg [ 31 : 0 ] reg_0 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_1 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_2 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_3 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_4 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_5 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_6 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_7 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_8 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_9 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_10 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_11 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_12 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_13 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_14 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_15 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_16 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_17 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_18 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_19 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_20 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_21 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_22 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_23 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_24 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_25 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_26 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_27 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_28 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_29 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_30 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_31 ; // @[demo.scala 165:22] wire [ 31 : 0 ] _GEN_65 = 5'h1 == io_raddr_0 ? reg_1 : reg_0 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_66 = 5'h2 == io_raddr_0 ? reg_2 : _GEN_65 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_67 = 5'h3 == io_raddr_0 ? reg_3 : _GEN_66 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_68 = 5'h4 == io_raddr_0 ? reg_4 : _GEN_67 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_69 = 5'h5 == io_raddr_0 ? reg_5 : _GEN_68 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_70 = 5'h6 == io_raddr_0 ? reg_6 : _GEN_69 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_71 = 5'h7 == io_raddr_0 ? reg_7 : _GEN_70 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_72 = 5'h8 == io_raddr_0 ? reg_8 : _GEN_71 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_73 = 5'h9 == io_raddr_0 ? reg_9 : _GEN_72 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_74 = 5'ha == io_raddr_0 ? reg_10 : _GEN_73 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_75 = 5'hb == io_raddr_0 ? reg_11 : _GEN_74 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_76 = 5'hc == io_raddr_0 ? reg_12 : _GEN_75 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_77 = 5'hd == io_raddr_0 ? reg_13 : _GEN_76 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_78 = 5'he == io_raddr_0 ? reg_14 : _GEN_77 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_79 = 5'hf == io_raddr_0 ? reg_15 : _GEN_78 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_80 = 5'h10 == io_raddr_0 ? reg_16 : _GEN_79 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_81 = 5'h11 == io_raddr_0 ? reg_17 : _GEN_80 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_82 = 5'h12 == io_raddr_0 ? reg_18 : _GEN_81 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_83 = 5'h13 == io_raddr_0 ? reg_19 : _GEN_82 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_84 = 5'h14 == io_raddr_0 ? reg_20 : _GEN_83 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_85 = 5'h15 == io_raddr_0 ? reg_21 : _GEN_84 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_86 = 5'h16 == io_raddr_0 ? reg_22 : _GEN_85 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_87 = 5'h17 == io_raddr_0 ? reg_23 : _GEN_86 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_88 = 5'h18 == io_raddr_0 ? reg_24 : _GEN_87 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_89 = 5'h19 == io_raddr_0 ? reg_25 : _GEN_88 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_90 = 5'h1a == io_raddr_0 ? reg_26 : _GEN_89 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_91 = 5'h1b == io_raddr_0 ? reg_27 : _GEN_90 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_92 = 5'h1c == io_raddr_0 ? reg_28 : _GEN_91 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_93 = 5'h1d == io_raddr_0 ? reg_29 : _GEN_92 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_94 = 5'h1e == io_raddr_0 ? reg_30 : _GEN_93 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_95 = 5'h1f == io_raddr_0 ? reg_31 : _GEN_94 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_98 = 5'h1 == io_raddr_1 ? reg_1 : reg_0 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_99 = 5'h2 == io_raddr_1 ? reg_2 : _GEN_98 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_100 = 5'h3 == io_raddr_1 ? reg_3 : _GEN_99 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_101 = 5'h4 == io_raddr_1 ? reg_4 : _GEN_100 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_102 = 5'h5 == io_raddr_1 ? reg_5 : _GEN_101 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_103 = 5'h6 == io_raddr_1 ? reg_6 : _GEN_102 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_104 = 5'h7 == io_raddr_1 ? reg_7 : _GEN_103 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_105 = 5'h8 == io_raddr_1 ? reg_8 : _GEN_104 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_106 = 5'h9 == io_raddr_1 ? reg_9 : _GEN_105 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_107 = 5'ha == io_raddr_1 ? reg_10 : _GEN_106 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_108 = 5'hb == io_raddr_1 ? reg_11 : _GEN_107 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_109 = 5'hc == io_raddr_1 ? reg_12 : _GEN_108 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_110 = 5'hd == io_raddr_1 ? reg_13 : _GEN_109 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_111 = 5'he == io_raddr_1 ? reg_14 : _GEN_110 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_112 = 5'hf == io_raddr_1 ? reg_15 : _GEN_111 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_113 = 5'h10 == io_raddr_1 ? reg_16 : _GEN_112 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_114 = 5'h11 == io_raddr_1 ? reg_17 : _GEN_113 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_115 = 5'h12 == io_raddr_1 ? reg_18 : _GEN_114 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_116 = 5'h13 == io_raddr_1 ? reg_19 : _GEN_115 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_117 = 5'h14 == io_raddr_1 ? reg_20 : _GEN_116 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_118 = 5'h15 == io_raddr_1 ? reg_21 : _GEN_117 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_119 = 5'h16 == io_raddr_1 ? reg_22 : _GEN_118 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_120 = 5'h17 == io_raddr_1 ? reg_23 : _GEN_119 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_121 = 5'h18 == io_raddr_1 ? reg_24 : _GEN_120 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_122 = 5'h19 == io_raddr_1 ? reg_25 : _GEN_121 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_123 = 5'h1a == io_raddr_1 ? reg_26 : _GEN_122 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_124 = 5'h1b == io_raddr_1 ? reg_27 : _GEN_123 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_125 = 5'h1c == io_raddr_1 ? reg_28 : _GEN_124 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_126 = 5'h1d == io_raddr_1 ? reg_29 : _GEN_125 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_127 = 5'h1e == io_raddr_1 ? reg_30 : _GEN_126 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_128 = 5'h1f == io_raddr_1 ? reg_31 : _GEN_127 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_131 = 5'h1 == io_raddr_2 ? reg_1 : reg_0 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_132 = 5'h2 == io_raddr_2 ? reg_2 : _GEN_131 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_133 = 5'h3 == io_raddr_2 ? reg_3 : _GEN_132 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_134 = 5'h4 == io_raddr_2 ? reg_4 : _GEN_133 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_135 = 5'h5 == io_raddr_2 ? reg_5 : _GEN_134 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_136 = 5'h6 == io_raddr_2 ? reg_6 : _GEN_135 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_137 = 5'h7 == io_raddr_2 ? reg_7 : _GEN_136 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_138 = 5'h8 == io_raddr_2 ? reg_8 : _GEN_137 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_139 = 5'h9 == io_raddr_2 ? reg_9 : _GEN_138 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_140 = 5'ha == io_raddr_2 ? reg_10 : _GEN_139 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_141 = 5'hb == io_raddr_2 ? reg_11 : _GEN_140 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_142 = 5'hc == io_raddr_2 ? reg_12 : _GEN_141 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_143 = 5'hd == io_raddr_2 ? reg_13 : _GEN_142 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_144 = 5'he == io_raddr_2 ? reg_14 : _GEN_143 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_145 = 5'hf == io_raddr_2 ? reg_15 : _GEN_144 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_146 = 5'h10 == io_raddr_2 ? reg_16 : _GEN_145 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_147 = 5'h11 == io_raddr_2 ? reg_17 : _GEN_146 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_148 = 5'h12 == io_raddr_2 ? reg_18 : _GEN_147 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_149 = 5'h13 == io_raddr_2 ? reg_19 : _GEN_148 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_150 = 5'h14 == io_raddr_2 ? reg_20 : _GEN_149 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_151 = 5'h15 == io_raddr_2 ? reg_21 : _GEN_150 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_152 = 5'h16 == io_raddr_2 ? reg_22 : _GEN_151 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_153 = 5'h17 == io_raddr_2 ? reg_23 : _GEN_152 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_154 = 5'h18 == io_raddr_2 ? reg_24 : _GEN_153 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_155 = 5'h19 == io_raddr_2 ? reg_25 : _GEN_154 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_156 = 5'h1a == io_raddr_2 ? reg_26 : _GEN_155 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_157 = 5'h1b == io_raddr_2 ? reg_27 : _GEN_156 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_158 = 5'h1c == io_raddr_2 ? reg_28 : _GEN_157 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_159 = 5'h1d == io_raddr_2 ? reg_29 : _GEN_158 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_160 = 5'h1e == io_raddr_2 ? reg_30 : _GEN_159 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_161 = 5'h1f == io_raddr_2 ? reg_31 : _GEN_160 ; // @[demo.scala 175:25 demo.scala 175:25] assign io_rdata_0 = io_raddr_0 == 5'h0 ? 32'h0 : _GEN_95 ; // @[demo.scala 172:36 demo.scala 173:25 demo.scala 175:25] assign io_rdata_1 = io_raddr_1 == 5'h0 ? 32'h0 : _GEN_128 ; // @[demo.scala 172:36 demo.scala 173:25 demo.scala 175:25] assign io_rdata_2 = io_raddr_2 == 5'h0 ? 32'h0 : _GEN_161 ; // @[demo.scala 172:36 demo.scala 173:25 demo.scala 175:25] always @( posedge clock ) begin if ( reset ) begin // @[demo.scala 165:22] reg_0 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h0 == io_waddr ) begin // @[demo.scala 168:23] reg_0 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_1 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h1 == io_waddr ) begin // @[demo.scala 168:23] reg_1 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_2 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h2 == io_waddr ) begin // @[demo.scala 168:23] reg_2 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_3 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h3 == io_waddr ) begin // @[demo.scala 168:23] reg_3 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_4 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h4 == io_waddr ) begin // @[demo.scala 168:23] reg_4 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_5 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h5 == io_waddr ) begin // @[demo.scala 168:23] reg_5 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_6 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h6 == io_waddr ) begin // @[demo.scala 168:23] reg_6 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_7 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h7 == io_waddr ) begin // @[demo.scala 168:23] reg_7 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_8 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h8 == io_waddr ) begin // @[demo.scala 168:23] reg_8 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_9 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h9 == io_waddr ) begin // @[demo.scala 168:23] reg_9 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_10 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'ha == io_waddr ) begin // @[demo.scala 168:23] reg_10 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_11 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'hb == io_waddr ) begin // @[demo.scala 168:23] reg_11 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_12 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'hc == io_waddr ) begin // @[demo.scala 168:23] reg_12 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_13 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'hd == io_waddr ) begin // @[demo.scala 168:23] reg_13 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_14 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'he == io_waddr ) begin // @[demo.scala 168:23] reg_14 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_15 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'hf == io_waddr ) begin // @[demo.scala 168:23] reg_15 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_16 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h10 == io_waddr ) begin // @[demo.scala 168:23] reg_16 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_17 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h11 == io_waddr ) begin // @[demo.scala 168:23] reg_17 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_18 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h12 == io_waddr ) begin // @[demo.scala 168:23] reg_18 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_19 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h13 == io_waddr ) begin // @[demo.scala 168:23] reg_19 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_20 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h14 == io_waddr ) begin // @[demo.scala 168:23] reg_20 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_21 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h15 == io_waddr ) begin // @[demo.scala 168:23] reg_21 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_22 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h16 == io_waddr ) begin // @[demo.scala 168:23] reg_22 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_23 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h17 == io_waddr ) begin // @[demo.scala 168:23] reg_23 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_24 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h18 == io_waddr ) begin // @[demo.scala 168:23] reg_24 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_25 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h19 == io_waddr ) begin // @[demo.scala 168:23] reg_25 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_26 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h1a == io_waddr ) begin // @[demo.scala 168:23] reg_26 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_27 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h1b == io_waddr ) begin // @[demo.scala 168:23] reg_27 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_28 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h1c == io_waddr ) begin // @[demo.scala 168:23] reg_28 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_29 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h1d == io_waddr ) begin // @[demo.scala 168:23] reg_29 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_30 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h1e == io_waddr ) begin // @[demo.scala 168:23] reg_30 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_31 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h1f == io_waddr ) begin // @[demo.scala 168:23] reg_31 <= io_wdata ; // @[demo.scala 168:23] end end end endmodule HLS \u9ad8\u7ea7\u7efc\u5408(high-level synthesis) \u80fd\u81ea\u52a8\u628a C/C++ \u4e4b\u7c7b\u7684\u9ad8\u7ea7\u8bed\u8a00\u8f6c\u5316\u6210 Verilog/VHDL \u4e4b\u7c7b\u7684\u5e95\u5c42\u786c\u4ef6\u63cf\u8ff0\u8bed\u8a00(RTL), \u4f8b\u5982\uff1avivado HLS, Intel HLS compiler, Mentor Catapult HLS, Cadence Stratus HLS, Synopsys C\u3002\u636e\u8bf42003\u5e74\uff0c\u4e00\u4f4d\u535a\u58eb\u751f\u6311\u6218\u4e86\u5df2\u7ecf\u5361\u58f320\u5e74\u7684HLS\u9886\u57df\uff0c\u6210\u529f\u628a\u975e\u65f6\u5e8f\u7684\u4ee3\u7801\u65f6\u5e8f\u786c\u4ef6\u5316\u3002\u4ed6\u548c\u8001\u5e08\u4e00\u8d77\u521b\u529e\u4e86AutoESL\uff0c\u505aC\u81ea\u52a8\u8f6c\u6362RTL\u30022011\u5e74\u88abXilinx\u6536\u8d2d\uff0c\u8bde\u751f\u4e86Xilinx Vivado HLS \u21a9","title":"chisel"},{"location":"chisel/chisel.html#chisel","text":"Hardware compiler framework and hardware design language developed at UC Berkeley chisel \u73b0\u72b6 \u7279\u70b9 \u4e0everilog\u7684\u5bf9\u6bd4 \u524d\u666f \u5b66\u4e60\u8def\u7ebf \u73af\u5883\u642d\u5efa chisel\u8bed\u6cd5\u8981\u70b9 \u6570\u636e\u7c7b\u578b Bundles \u7ec4\u5408\u903b\u8f91\u548c\u65f6\u5e8f\u903b\u8f91 tester \u751f\u6210\u5668","title":"chisel"},{"location":"chisel/chisel.html#_1","text":"\u5b98\u65b9\u5b9e\u73b0\u4e86 Rocket Chip \u53ca BOOM \u4e24\u6b3e CPU SiFive \u7684\u82af\u7247\u4f7f\u7528Chisel\u7f16\u5199 \u4e2d\u79d1\u9662\u8ba1\u7b97\u6240\u7684 \u9999\u5c71\u5904\u7406\u5668 \u4f7f\u7528shisel\u7f16\u5199","title":"\u73b0\u72b6"},{"location":"chisel/chisel.html#_2","text":"Open-Source Highly parameterized Based on Scala Re-usable components and libraries FIRRTL (Flexible Intermediate Representation for RTL) The ability to create generators Design verification support iotesters(peek, poke, expect) and testers2(fork, join) Can in-line verilog \u4ecechisel\u5b98\u65b9\u7f51\u7ad9\u540d\u79f0\u662f\u4e0d\u662f\u80fd\u591f\u770b\u51fa\u6765\u5b83\u66f4\u50cf\u662f\u4e00\u4e2a\u786c\u4ef6\u7f16\u8bd1\u5668\u6846\u67b6\uff1f lang\u8ba9\u4eba\u8054\u60f3\u5230clang,\u8fdb\u800c\u60f3\u5230llvm\uff0cFIRRTL\u4ece\u8bbe\u8ba1\u4e0a\u548cLLVM\u5f88\u50cf\u3002","title":"\u7279\u70b9"},{"location":"chisel/chisel.html#verilog","text":"\u5bf9\u6bd4\u9879 verilog chisel HDL \u662f HDL,\u975eHLS 1 \u4ee3\u7801\u7b80\u6d01\u6027 \u975e\u5e38\u5570\u55e6\uff0c\u53ef\u8bfb\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u90fd\u6bd4\u8f83\u5dee \u4ee3\u7801\u7b80\u6d01\uff0c\u7b26\u5408\u8f6f\u4ef6\u601d\u7ef4 \u7f16\u8bd1\u68c0\u67e5 \u4ece\u4e0d\u8fdb\u884c\u68c0\u67e5\uff0c\u7f16\u8bd1\u5668\u6ca1\u6709\u57fa\u672c\u7684\u903b\u8f91\u5224\u65ad\u80fd\u529b \u529f\u80fd\u5f3a\u5927\u7684\u9519\u8bef\u68c0\u67e5\u548c\u81ea\u52a8\u63a8\u65ad\u80fd\u529b \u662f\u5426\u53ef\u7efc\u5408 \u53ef\u7efc\u5408\uff0c\u5177\u6709\u552f\u4e00\u6027 \u53ef\u7efc\u5408,\u5177\u6709\u552f\u4e00\u6027 \u91cd\u7528\u6027 \u8f83\u5dee\u7684\u53ef\u91cd\u7528\u6027\uff0c\u5f88\u96be\u62ff\u6765\u76f4\u63a5\u603c \u9ad8\u5ea6\u7684\u53c2\u6570\u5316\u652f\u6301\uff0c\u5f88\u5bb9\u6613\u590d\u7528 \u6210\u719f\u5ea6 \u975e\u5e38\u6210\u719f \u4ecd\u9700\u8981\u8f83\u957f\u65f6\u95f4\u7684\u53d1\u5c55 \u6a21\u5757\u6d4b\u8bd5\u96be\u5ea6 \u6d4b\u8bd5\u4ee3\u7801\u53ef\u80fd\u8981\u6bd4\u8bbe\u8ba1\u4ee3\u7801\u8fd8\u8981\u590d\u6742 \u81ea\u5e26\u7684tester\u7f16\u5199\u65b9\u4fbf\uff0c\u8bed\u6cd5\u9ad8\u7ea7","title":"\u4e0everilog\u7684\u5bf9\u6bd4"},{"location":"chisel/chisel.html#_3","text":"Verilog,SystemVerilog,SystemC,Chisel,HLS \u8c01\u4eec\u624d\u662f\u672a\u6765\uff1f","title":"\u524d\u666f"},{"location":"chisel/chisel.html#_4","text":"\u5b98\u65b9\u6559\u7a0b \u5b98\u65b9\u7f51\u7ad9 chisel\u5de5\u7a0b\u6a21\u677f API\u624b\u518c \u901f\u8bb0\u624b\u518c\u4e0b\u8f7d\u94fe\u63a5 \u6839\u636e\u5b98\u65b9\u8bad\u7ec3\u8425\uff0c\u4e00\u6b65\u6b65\u7684\u5b66\u4e60\uff0c\u81ea\u5df1\u52a8\u624b\u6572\u4e00\u6572\uff0c\u505a\u4e00\u4e9b\u7b80\u5355\u6d4b\u8bd5\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5728\u8bfbRocket Chip\u4ee3\u7801\u7684\u540c\u65f6\u4e0d\u65ad\u7684\u8fdb\u884c\u63d0\u9ad8","title":"\u5b66\u4e60\u8def\u7ebf"},{"location":"chisel/chisel.html#_5","text":"chisel\u5b98\u65b9\u63d0\u4f9b\u4e86chisel-bootcamp, \u4e00\u4e2achisel\u6559\u7a0b\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u53c2\u8003\uff0c\u5b83\u4e3a\u4e86\u4e13\u6ce8\u4e8echisel\u672c\u8eab\uff0c\u628a\u73af\u5883\u642d\u5efa\u7ed9\u505a\u597d\u4e86\uff0c\u8fd9\u91cc\u5efa\u8bae\u91c7\u53d6\uff1a\u81ea\u5df1\u642d\u5efa\u73af\u5883 + bootcamp\u4f8b\u7a0b\u7684\u5b66\u4e60\u65b9\u6cd5 \u73af\u5883\u642d\u5efa\u8981\u70b9\uff1a chisel\u4f9d\u8d56\u4e8esbt\u548cscala,\u56e0\u6b64\uff0c\u63d0\u524d\u642d\u5efa\u597dscala\u8fd0\u884c\u73af\u5883 chisel\u4e0d\u9700\u8981\u5355\u72ec\u8fdb\u884c\u5b89\u88c5\uff0csbt\u80fd\u591f\u81ea\u52a8\u83b7\u53d6\u6258\u7ba1\u4f9d\u8d56 \u4e0b\u8f7d\u4e00\u4e2achisel\u7684repo\u6a21\u677f\u4f1a\u662f\u975e\u5e38\u7701\u4e8b\u7684\u73af\u5883\u642d\u5efa\u65b9\u6cd5 \u4e0b\u9762\u662fshisel-template\u7684\u7b80\u8981\u76ee\u5f55\u7ed3\u6784\uff0csbt\u8981\u6c42\u653e\u7f6e\u6587\u4ef6\u5fc5\u987b\u6309\u7167\u4e00\u5b9a\u7684\u76ee\u5f55\u7ed3\u6784\u653e\u7f6e\uff0c\u5f88\u591a\u73b0\u4ee3\u6784\u5efa\u5de5\u5177\u90fd\u6709\u8fd9\u6837\u7c7b\u4f3c\u7684\u8981\u6c42 \u5176\u4e2d\uff1a build.sbt :\u5b58\u653e\u4e86\u7edd\u5927\u591a\u6570\u6784\u5efa\u89c4\u5219(\u4e3b\u6d41\u7528\u6cd5)\uff0c\u4e3b\u8981\u662f\u6784\u5efa\u5bf9\u8c61\u4ee5\u53ca\u4f9d\u8d56\u7684\u5305\uff0cchisel\u5305\u5c31\u5728\u8fd9\u91cc\u9762\u8fdb\u884c\u8bf4\u660e build.sc :\u76ee\u524d\u8fd8\u672a\u5b8c\u5168\u5f04\u6e05 src : \u6839\u636esbt\u89c4\u5219\uff0c\u9ed8\u8ba4\u6784\u5efa\u5bf9\u8c61\u5b58\u653e\u7684\u76ee\u5f55\u5c31\u662fsrc,src\u76ee\u5f55\u4e0b\u5fc5\u987b\u6709\u4e00\u4e2amian/scala\u76ee\u5f55\uff0c\u6e90\u6587\u4ef6\u653e\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e0b src/test : test\u76ee\u5f55\uff0c\u6d4b\u8bd5\u4ee3\u7801\u5e94\u8be5\u653e\u5728\u8fd9\u4e2a\u76ee\u5f55\u7684scala\u5b50\u76ee\u5f55\u4e0b\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4f7f\u7528iotester\u548ctester2\u8fdb\u884c\u5355\u5143\u6d4b\u8bd5\u4e86 test_run_dir : \u8fd0\u884c\u65f6\u53ef\u80fd\u751f\u6210\u6b64\u76ee\u5f55\uff0c\u751f\u6210\u7684VCD\u6ce2\u5f62\u6587\u4ef6\u5c31\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e0b\uff0c\u8fd9\u662ftester\u7684\u529f\u80fd project : sbt \u4f7f\u7528 . \u251c\u2500\u2500 build.sbt \u251c\u2500\u2500 build.sc \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 project \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u2514\u2500\u2500 scala \u2502 \u2502 \u2514\u2500\u2500 demo.scala \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 scala \u2502 \u2514\u2500\u2500 BaseTest.scala \u251c\u2500\u2500 target \u2514\u2500\u2500 test_run_dir","title":"\u73af\u5883\u642d\u5efa"},{"location":"chisel/chisel.html#chisel_1","text":"\u65f6\u523b\u6ce8\u610f\uff0cchisel\u662f\u5f3a\u7c7b\u578b\u8bed\u8a00\uff0c\u7c7b\u578b\u4e0d\u5339\u914d\u5728\u7f16\u8bd1\u65f6\u4f1a\u62a5\u9519\uff0c\u8981\u719f\u77e5\u4f7f\u7528\u7684\u5bf9\u8c61\u7684\u7c7b\u578b\u3002 \u4e0b\u9762\u7684\u8bed\u6cd5\u8981\u70b9\u662f\u5bf9\u5b98\u65b9\u6559\u7a0b\u8fdb\u884c\u4e86\u603b\u7ed3\uff0c\u4f46**\u719f\u6089chisel\u57fa\u7840\u8bed\u6cd5\u6700\u597d\u7684\u65b9\u5f0f\u662f\u6309\u7167\u5b98\u65b9\u6559\u7a0b\u8fdb\u884c\u5b66\u4e60**","title":"chisel\u8bed\u6cd5\u8981\u70b9"},{"location":"chisel/chisel.html#_6","text":"chisel\u6709\u7740\u4e25\u683c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5b83\u7528\u4e8e\u6784\u5efa\u903b\u8f91\u7535\u8def\u7684\u6570\u636e\u7c7b\u578b\u548cscala\u662f\u4e25\u683c\u533a\u5206\u7684\u3002\u540c\u65f6\uff0c\u56e0\u4e3a\u662f\u751f\u6210\u786c\u4ef6\u7535\u8def\uff0c\u56e0\u6b64\uff0c\u6240\u6709\u7684\u6570\u636e\u90fd\u5e94\u8be5\u662fval\u800c\u4e0d\u662fvar \u5982\u4e0b\u662f\u5e38\u7528\u6570\u636e\u7c7b\u578b\uff0c\u5176\u4e2d.U .S .B\u662f\u5e38\u89c1\u7684\u4e09\u79cd\u6570\u636e\u7c7b\u578b 1 . U // decimal 1-bit lit from Scala Int. \"ha\" . U // hexadecimal 4-bit lit from string. \"o12\" . U // octal 4-bit lit from string. \"b1010\" . U // binary 4-bit lit from string. 5 . S // signed decimal 4-bit lit from Scala Int. - 8 . S // negative decimal 4-bit lit from Scala Int. 5 . U // unsigned decimal 3-bit lit from Scala Int. 8 . U ( 4 . W ) // 4-bit unsigned decimal, value 8. - 152 . S ( 32 . W ) // 32-bit signed decimal, value -152. true . B // Bool lits from Scala lits. false . B \u4e0b\u5212\u7ebf\u53ef\u4ee5\u7528\u6765\u589e\u52a0\u53ef\u8bfb\u6027\uff0c\u5e76\u6ca1\u6709\u5b9e\u9645\u610f\u4e49 \"h_dead_beef\" . U // 32-bit lit of type UInt .W\u7528\u6765\u6307\u5b9a\u5bbd\u5ea6\u3002\u5982\u679c\u4e0d\u6307\u5b9a\uff0c\u90a3\u4e48\u81ea\u52a8\u7684\u4f1a\u7528\u6700\u5c11\u7684bits\u3002\u5982\u679c\u6307\u5b9a\u7684\u4f4d\u5bbd\u5927\u4e8e\u5b9e\u9645\u9700\u8981\u7684\u4f4d\u5bbd\uff0cUInt\u4f1a\u8fdb\u884c0\u6269\u5c55\uff0cSInt\u4f1a\u8fdb\u884c\u7b26\u53f7\u6269\u5c55\uff1b\u5982\u679c\u5c0f\u4e8e\uff0c\u7f16\u8bd1\u4f1a\u62a5\u9519\u3002 Vecs \u4e5f\u662f\u6570\u636e\u7c7b\u578b(\u8fd9\u6837\u5c31\u80fd\u7406\u89e3\u4e3a\u4ec0\u4e48\u5199\u505aReg(Vec(4, UInt(4.W)))) Analog \u5c31\u7b49\u4e8einout\uff0c\u53cc\u5411\u7ebf chisel\u4e2d\u6709\u5f88\u591aclass\u90fd\u53ef\u4ee5\u4e0d\u7528new\u6765\u5b9e\u4f8b\u5316\uff0c\u56e0\u4e3a\u6709\u4e9b\u4f7f\u7528\u4e86case class, \u6709\u4e00\u4e9b\u5df2\u7ecf\u5b9e\u73b0\u4e86object\u7684apply\u65b9\u6cd5","title":"\u6570\u636e\u7c7b\u578b"},{"location":"chisel/chisel.html#bundles","text":"bundle\u662f\u4e00\u4e2a\u503c\u7684\u96c6\u5408\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u662fstruct Flipped()\u53ef\u4ee5\u7528\u6765\u7ffb\u8f6cBundle\uff0c\u8fd9\u6837\u5c31\u975e\u5e38\u65b9\u4fbf\u7684\u6784\u5efa\u53cc\u5411\u63a5\u53e3 class ABBundle extends Bundle { val a = Input ( Bool ()) val b = Output ( Bool ()) } class MyFlippedModule extends RawModule { // Normal instantiation of the bundle // 'a' is an Input and 'b' is an Output val normalBundle = IO ( new ABBundle ) normalBundle . b := normalBundle . a // Flipped recursively flips the direction of all Bundle fields // Now 'a' is an Output and 'b' is an Input val flippedBundle = IO ( Flipped ( new ABBundle )) flippedBundle . a := flippedBundle . b } rocket-chip\u4e2d\u7684flip\u7684\u4f7f\u7528\uff0c\u5176\u4e2dflip\u5c31\u662fFlipped(target),\u8fd9\u6837\u5c31\u80fd\u5b9a\u4e49\u63a5\u53e3\u5c31\u597d\u4e86\uff0c\u5bf9\u4e8e\u8f93\u51fa\u6a21\u5757\u548c\u8f93\u51fa\u6a21\u5757\uff0c\u4ed6\u4eec\u7684\u4fe1\u53f7\u5c31\u662f\u5b8c\u5168\u53ef\u4ee5Flip\u3002 \u5176\u4e2dValid\u662f\u5728\u4fe1\u53f7\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e86Valid\u4fe1\u53f7\u3002\u901a\u8fc7\u8fd9\u79cd\u673a\u5236\uff0cchisel\u7f16\u5199\u7684\u6a21\u5757\u53ef\u8bfb\u6027\u66f4\u597d\u3002 class BTB ( implicit p : Parameters ) extends BtbModule { val io = new Bundle { val req = Valid ( new BTBReq ). flip val resp = Valid ( new BTBResp ) val btb_update = Valid ( new BTBUpdate ). flip val bht_update = Valid ( new BHTUpdate ). flip val bht_advance = Valid ( new BTBResp ). flip val ras_update = Valid ( new RASUpdate ). flip val ras_head = Valid ( UInt ( width = vaddrBits )) val flush = Bool (). asInput }","title":"Bundles"},{"location":"chisel/chisel.html#_7","text":"chisel\u63d0\u4f9b\u4e86Mux,Cat,Wire\u7b49\u57fa\u7840\u7c7b\u578b\u7528\u4e8e\u5b9e\u73b0\u7ec4\u5408\u903b\u8f91\uff0c\u63d0\u4f9b\u4e86Reg\uff0cwhen, elsewhen, otherwise\u7b49\u6765\u5b9e\u73b0\u65f6\u5e8f\u903b\u8f91\u3002 \u5fc5\u987b\u4f7f\u7528 := \u6765\u5bf9Wire\u548cReg\u8fdb\u884c\u8d4b\u503c, \u8fd9\u91cc\u4f7f\u7528\u4e00\u4e2a\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\u7684ALU\u5355\u5143\u6765\u4f53\u73b0chisel\u5982\u4f55\u5b9e\u73b0\u7ec4\u5408\u903b\u8f91\u548c\u65f6\u5e8f\u903b\u8f91 class MyAlu extends Module { val io = IO ( new Bundle { val in_src1 = Input ( UInt ( 32 . W )) val in_src2 = Input ( UInt ( 32 . W )) val in_imm2 = Input ( UInt ( 2 . W )) val output_add = Output ( UInt ( 32 . W )) val output_add_expand = Output ( UInt ( 64 . W )) val output_sub = Output ( UInt ( 32 . W )) val output_max = Output ( UInt ( 32 . W )) val output_ext = Output ( UInt ( 32 . W )) }) io . output_add := io . in_src1 + io . in_src2 io . output_sub := io . in_src1 - io . in_src2 io . output_add_expand := io . in_src1 +& io . in_src2 val to_max = Wire ( UInt ( 32 . W )) when ( io . in_src1 < io . in_src2 ) { to_max := io . in_src2 } . otherwise { to_max := io . in_src1 } io . output_max := to_max val ext_reg = RegInit ( UInt ( 32 . W ), 0 . U ) switch ( io . in_imm2 ) { is ( 0 . U ) { ext_reg := io . in_src1 } is ( 1 . U ) { ext_reg := Cat ( io . in_src1 ( 31 , 1 ), 0 . U ( 1 . W )) } is ( 2 . U ) { ext_reg := Cat ( io . in_src1 ( 31 , 2 ), 0 . U ( 2 . W )) } is ( 3 . U ) { ext_reg := Cat ( io . in_src1 ( 31 , 3 ), 0 . U ( 3 . W )) } } io . output_ext := ext_reg } \u751f\u6210\u7684verilog\u4ee3\u7801\u5982\u4e0b module MyAlu ( input clock , input reset , input [ 31 : 0 ] io_in_src1 , input [ 31 : 0 ] io_in_src2 , input [ 1 : 0 ] io_in_imm2 , output [ 31 : 0 ] io_output_add , output [ 63 : 0 ] io_output_add_expand , output [ 31 : 0 ] io_output_sub , output [ 31 : 0 ] io_output_max , output [ 31 : 0 ] io_output_ext ); wire [ 32 : 0 ] _io_output_add_T = io_in_src1 + io_in_src2 ; // @[demo.scala 17:31] reg [ 31 : 0 ] ext_reg ; // @[demo.scala 29:24] wire _T_1 = 2'h0 == io_in_imm2 ; // @[Conditional.scala 37:30] wire _T_2 = 2'h1 == io_in_imm2 ; // @[Conditional.scala 37:30] wire [ 30 : 0 ] ext_reg_hi = io_in_src1 [ 31 : 1 ]; // @[demo.scala 35:32] wire [ 31 : 0 ] _ext_reg_T = { ext_reg_hi , 1'h0 }; // @[Cat.scala 30:58] wire _T_3 = 2'h2 == io_in_imm2 ; // @[Conditional.scala 37:30] wire [ 29 : 0 ] ext_reg_hi_1 = io_in_src1 [ 31 : 2 ]; // @[demo.scala 38:32] wire [ 31 : 0 ] _ext_reg_T_1 = { ext_reg_hi_1 , 2'h0 }; // @[Cat.scala 30:58] wire _T_4 = 2'h3 == io_in_imm2 ; // @[Conditional.scala 37:30] wire [ 28 : 0 ] ext_reg_hi_2 = io_in_src1 [ 31 : 3 ]; // @[demo.scala 41:32] wire [ 31 : 0 ] _ext_reg_T_2 = { ext_reg_hi_2 , 3'h0 }; // @[Cat.scala 30:58] wire [ 31 : 0 ] _GEN_1 = _T_4 ? _ext_reg_T_2 : ext_reg ; // @[Conditional.scala 39:67 demo.scala 41:15 demo.scala 29:24] assign io_output_add = io_in_src1 + io_in_src2 ; // @[demo.scala 17:31] assign io_output_add_expand = {{ 31 'd0 }, _io_output_add_T }; // @[demo.scala 19:38] assign io_output_sub = io_in_src1 - io_in_src2 ; // @[demo.scala 18:31] assign io_output_max = io_in_src1 < io_in_src2 ? io_in_src2 : io_in_src1 ; // @[demo.scala 22:34 demo.scala 23:12 demo.scala 25:12] assign io_output_ext = ext_reg ; // @[demo.scala 44:17] always @( posedge clock ) begin if ( reset ) begin // @[demo.scala 29:24] ext_reg <= 32'h0 ; // @[demo.scala 29:24] end else if ( _T_1 ) begin // @[Conditional.scala 40:58] ext_reg <= io_in_src1 ; // @[demo.scala 32:15] end else if ( _T_2 ) begin // @[Conditional.scala 39:67] ext_reg <= _ext_reg_T ; // @[demo.scala 35:15] end else if ( _T_3 ) begin // @[Conditional.scala 39:67] ext_reg <= _ext_reg_T_1 ; // @[demo.scala 38:15] end else begin ext_reg <= _GEN_1 ; end end endmodule","title":"\u7ec4\u5408\u903b\u8f91\u548c\u65f6\u5e8f\u903b\u8f91"},{"location":"chisel/chisel.html#tester","text":"\u4e00\u4e2aFir\u6570\u5b57\u6ee4\u6ce2\u5668\u7684\u7b80\u5355\u6d4b\u8bd5\u65b9\u6cd5\uff0c\u5e76\u652f\u6301\u751f\u6210VCD\u6ce2\u5f62 import chisel3 . _ import chiseltest . _ import org . scalatest . _ import chiseltest . experimental . TestOptionBuilder . _ import chiseltest . internal . WriteVcdAnnotation class MySpec extends FlatSpec with ChiselScalatestTester with Matchers { it should \"get a fir\" in { test ( new My4ElementFir ( 0 , 0 , 0 , 0 )). withAnnotations ( Seq ( WriteVcdAnnotation )) { c => c . io . in . poke ( 0 . U ) c . io . out . expect ( 0 . U ) c . clock . step ( 1 ) c . io . in . poke ( 4 . U ) c . io . out . expect ( 0 . U ) c . clock . step ( 1 ) c . io . in . poke ( 5 . U ) c . io . out . expect ( 0 . U ) c . clock . step ( 1 ) c . io . in . poke ( 2 . U ) c . io . out . expect ( 0 . U ) } } } chisel \u652f\u6301scala\u7684tester\u6d4b\u8bd5\u6846\u67b6\uff0c\u540c\u65f6\u4e5f\u6b63\u5728\u6539\u8fdb\u6d4b\u8bd5\u6846\u67b6\uff0c\u540d\u4e3atesters2\u3002 \u6211\u4eec\u5728verilog\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u4e9b\u5355\u5143\u6d4b\u8bd5\u9700\u8981\u81ea\u5df1\u5199\u6fc0\u52b1\u6587\u4ef6\uff0c\u5f80\u5f80\u5bf9\u4e8e\u7a0d\u5fae\u590d\u6742\u7684\u6a21\u5757\uff0c\u6fc0\u52b1\u6587\u4ef6\u7684\u590d\u6742\u5ea6\u5f88\u9ad8\uff0c\u5f80\u5f80\u8fd9\u90e8\u5206\u5de5\u4f5c\u6709\u4e13\u95e8\u7684RTL\u9a8c\u8bc1\u4eba\u5458\u8d1f\u8d23\u3002chisel\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u9002\u7528\u4e8e\u5355\u5143\u6d4b\u8bd5\u548c\u7cfb\u7edf\u96c6\u6210\u6d4b\u8bd5\uff0c\u5e76\u5c3d\u53ef\u80fd\u4f7f\u5f97\u5355\u5143\u6d4b\u8bd5\u7b80\u5355\u65b9\u4fbf\u6709\u7528 \u8ba8\u8bba\uff1a \u81f3\u5c11\u5728\u5355\u5143\u81ea\u6d4b\u8bd5\u65b9\u9762\uff0cTesters\u63d0\u4f9b\u4e86\u4e00\u4e2a\u975e\u5e38\u65b9\u4fbf\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u7b80\u5355\u81ea\u9a8c\u8bc1\u3002Testers2\u5728\u4f7f\u7528chisel\u8fdb\u884cIC\u5f00\u53d1\u7684\u8fc7\u7a0b\u4e2d\u626e\u6f14\u7740\u600e\u6837\u7684\u89d2\u8272\uff1fTestes\u662f\u5426\u80fd\u591f\u66ff\u4ee3\u73b0\u6709\u7684\u6d4b\u8bd5\u624b\u6bb5\uff1f","title":"tester"},{"location":"chisel/chisel.html#_8","text":"\u6240\u8c13\u7684\u751f\u6210\u5668\u5c31\u662f\u6307\u6a21\u5757\u7684\u53c2\u6570\u5316\uff0c\u8fd9\u662fchisel\u771f\u6b63\u5f3a\u5927\u7684\u5730\u65b9\uff0c\u4e5f\u662f\u7cbe\u9ad3\u6240\u5728\u3002\u5355\u770b\u4e0a\u9762\u65f6\u5e8f\u903b\u8f91\u548c\u7ec4\u5408\u903b\u8f91\u7684\u4f8b\u5b50\uff0c\u4f60\u4e0d\u4f1a\u611f\u89c9\u5230chisel\u7684\u5f3a\u5927\uff0c\u53ea\u6709\u5728\u63a5\u89e6\u4e86\u751f\u6210\u5668\u4e4b\u540e\uff0c\u624d\u80fd\u771f\u6b63\u7684\u4f53\u4f1a\u5230\u7684\u5b83\u7684\u9ad8\u6548\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48chisel\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u8bb2\u7a76\u654f\u6377\u3002 \u8bed\u6cd5\u8981\u70b9\uff1a Option match,case Implicits\u9690\u542b\u53c2\u6570\uff0c\u9690\u5f0f\u8f6c\u6362(\u8fd9\u79cd\u65b9\u6cd5\u6bd4\u8f83\u96be\u8bfb\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528) \u5bb9\u5668 mutable.ArrayBuffer Vec(\u4ec5\u5728\u666e\u901aScala\u5bb9\u5668\u7528\u4e0d\u4e86\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528) \u4e3e\u4f8b\uff1a\u5982\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5bc4\u5b58\u5668\u6587\u4ef6\u5b9e\u73b0\uff0c\u53ef\u4ee5\u901a\u8fc7\u53c2\u6570\u6307\u5b9a\u8bfb\u7aef\u53e3\u7684\u6570\u91cf class RegisterFile ( readPorts : Int ) extends Module { require ( readPorts >= 0 ) val io = IO ( new Bundle { val wen = Input ( Bool ()) val waddr = Input ( UInt ( 5 . W )) val wdata = Input ( UInt ( 32 . W )) val raddr = Input ( Vec ( readPorts , UInt ( 5 . W ))) val rdata = Output ( Vec ( readPorts , UInt ( 32 . W ))) }) val reg = RegInit ( VecInit ( Seq . fill ( 32 )( 0 . U ( 32 . W )))) when ( io . wen ) { reg ( io . waddr ) := io . wdata } for ( i <- 0 until readPorts ) { when ( io . raddr ( i ) === 0 . U ) { io . rdata ( i ) := 0 . U } . otherwise { io . rdata ( i ) := reg ( io . raddr ( i )) } } } \u751f\u6210\u7684verilog\u5982\u4e0b\uff0c\u4f8b\u5316\u7684readPorts\u6570\u91cf\u4e3a3 module RegisterFile ( input clock , input reset , input io_wen , input [ 4 : 0 ] io_waddr , input [ 31 : 0 ] io_wdata , input [ 4 : 0 ] io_raddr_0 , input [ 4 : 0 ] io_raddr_1 , input [ 4 : 0 ] io_raddr_2 , output [ 31 : 0 ] io_rdata_0 , output [ 31 : 0 ] io_rdata_1 , output [ 31 : 0 ] io_rdata_2 ); reg [ 31 : 0 ] reg_0 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_1 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_2 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_3 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_4 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_5 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_6 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_7 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_8 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_9 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_10 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_11 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_12 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_13 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_14 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_15 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_16 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_17 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_18 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_19 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_20 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_21 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_22 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_23 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_24 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_25 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_26 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_27 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_28 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_29 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_30 ; // @[demo.scala 165:22] reg [ 31 : 0 ] reg_31 ; // @[demo.scala 165:22] wire [ 31 : 0 ] _GEN_65 = 5'h1 == io_raddr_0 ? reg_1 : reg_0 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_66 = 5'h2 == io_raddr_0 ? reg_2 : _GEN_65 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_67 = 5'h3 == io_raddr_0 ? reg_3 : _GEN_66 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_68 = 5'h4 == io_raddr_0 ? reg_4 : _GEN_67 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_69 = 5'h5 == io_raddr_0 ? reg_5 : _GEN_68 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_70 = 5'h6 == io_raddr_0 ? reg_6 : _GEN_69 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_71 = 5'h7 == io_raddr_0 ? reg_7 : _GEN_70 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_72 = 5'h8 == io_raddr_0 ? reg_8 : _GEN_71 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_73 = 5'h9 == io_raddr_0 ? reg_9 : _GEN_72 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_74 = 5'ha == io_raddr_0 ? reg_10 : _GEN_73 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_75 = 5'hb == io_raddr_0 ? reg_11 : _GEN_74 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_76 = 5'hc == io_raddr_0 ? reg_12 : _GEN_75 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_77 = 5'hd == io_raddr_0 ? reg_13 : _GEN_76 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_78 = 5'he == io_raddr_0 ? reg_14 : _GEN_77 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_79 = 5'hf == io_raddr_0 ? reg_15 : _GEN_78 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_80 = 5'h10 == io_raddr_0 ? reg_16 : _GEN_79 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_81 = 5'h11 == io_raddr_0 ? reg_17 : _GEN_80 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_82 = 5'h12 == io_raddr_0 ? reg_18 : _GEN_81 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_83 = 5'h13 == io_raddr_0 ? reg_19 : _GEN_82 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_84 = 5'h14 == io_raddr_0 ? reg_20 : _GEN_83 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_85 = 5'h15 == io_raddr_0 ? reg_21 : _GEN_84 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_86 = 5'h16 == io_raddr_0 ? reg_22 : _GEN_85 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_87 = 5'h17 == io_raddr_0 ? reg_23 : _GEN_86 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_88 = 5'h18 == io_raddr_0 ? reg_24 : _GEN_87 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_89 = 5'h19 == io_raddr_0 ? reg_25 : _GEN_88 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_90 = 5'h1a == io_raddr_0 ? reg_26 : _GEN_89 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_91 = 5'h1b == io_raddr_0 ? reg_27 : _GEN_90 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_92 = 5'h1c == io_raddr_0 ? reg_28 : _GEN_91 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_93 = 5'h1d == io_raddr_0 ? reg_29 : _GEN_92 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_94 = 5'h1e == io_raddr_0 ? reg_30 : _GEN_93 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_95 = 5'h1f == io_raddr_0 ? reg_31 : _GEN_94 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_98 = 5'h1 == io_raddr_1 ? reg_1 : reg_0 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_99 = 5'h2 == io_raddr_1 ? reg_2 : _GEN_98 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_100 = 5'h3 == io_raddr_1 ? reg_3 : _GEN_99 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_101 = 5'h4 == io_raddr_1 ? reg_4 : _GEN_100 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_102 = 5'h5 == io_raddr_1 ? reg_5 : _GEN_101 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_103 = 5'h6 == io_raddr_1 ? reg_6 : _GEN_102 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_104 = 5'h7 == io_raddr_1 ? reg_7 : _GEN_103 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_105 = 5'h8 == io_raddr_1 ? reg_8 : _GEN_104 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_106 = 5'h9 == io_raddr_1 ? reg_9 : _GEN_105 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_107 = 5'ha == io_raddr_1 ? reg_10 : _GEN_106 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_108 = 5'hb == io_raddr_1 ? reg_11 : _GEN_107 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_109 = 5'hc == io_raddr_1 ? reg_12 : _GEN_108 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_110 = 5'hd == io_raddr_1 ? reg_13 : _GEN_109 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_111 = 5'he == io_raddr_1 ? reg_14 : _GEN_110 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_112 = 5'hf == io_raddr_1 ? reg_15 : _GEN_111 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_113 = 5'h10 == io_raddr_1 ? reg_16 : _GEN_112 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_114 = 5'h11 == io_raddr_1 ? reg_17 : _GEN_113 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_115 = 5'h12 == io_raddr_1 ? reg_18 : _GEN_114 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_116 = 5'h13 == io_raddr_1 ? reg_19 : _GEN_115 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_117 = 5'h14 == io_raddr_1 ? reg_20 : _GEN_116 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_118 = 5'h15 == io_raddr_1 ? reg_21 : _GEN_117 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_119 = 5'h16 == io_raddr_1 ? reg_22 : _GEN_118 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_120 = 5'h17 == io_raddr_1 ? reg_23 : _GEN_119 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_121 = 5'h18 == io_raddr_1 ? reg_24 : _GEN_120 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_122 = 5'h19 == io_raddr_1 ? reg_25 : _GEN_121 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_123 = 5'h1a == io_raddr_1 ? reg_26 : _GEN_122 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_124 = 5'h1b == io_raddr_1 ? reg_27 : _GEN_123 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_125 = 5'h1c == io_raddr_1 ? reg_28 : _GEN_124 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_126 = 5'h1d == io_raddr_1 ? reg_29 : _GEN_125 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_127 = 5'h1e == io_raddr_1 ? reg_30 : _GEN_126 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_128 = 5'h1f == io_raddr_1 ? reg_31 : _GEN_127 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_131 = 5'h1 == io_raddr_2 ? reg_1 : reg_0 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_132 = 5'h2 == io_raddr_2 ? reg_2 : _GEN_131 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_133 = 5'h3 == io_raddr_2 ? reg_3 : _GEN_132 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_134 = 5'h4 == io_raddr_2 ? reg_4 : _GEN_133 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_135 = 5'h5 == io_raddr_2 ? reg_5 : _GEN_134 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_136 = 5'h6 == io_raddr_2 ? reg_6 : _GEN_135 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_137 = 5'h7 == io_raddr_2 ? reg_7 : _GEN_136 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_138 = 5'h8 == io_raddr_2 ? reg_8 : _GEN_137 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_139 = 5'h9 == io_raddr_2 ? reg_9 : _GEN_138 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_140 = 5'ha == io_raddr_2 ? reg_10 : _GEN_139 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_141 = 5'hb == io_raddr_2 ? reg_11 : _GEN_140 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_142 = 5'hc == io_raddr_2 ? reg_12 : _GEN_141 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_143 = 5'hd == io_raddr_2 ? reg_13 : _GEN_142 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_144 = 5'he == io_raddr_2 ? reg_14 : _GEN_143 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_145 = 5'hf == io_raddr_2 ? reg_15 : _GEN_144 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_146 = 5'h10 == io_raddr_2 ? reg_16 : _GEN_145 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_147 = 5'h11 == io_raddr_2 ? reg_17 : _GEN_146 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_148 = 5'h12 == io_raddr_2 ? reg_18 : _GEN_147 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_149 = 5'h13 == io_raddr_2 ? reg_19 : _GEN_148 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_150 = 5'h14 == io_raddr_2 ? reg_20 : _GEN_149 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_151 = 5'h15 == io_raddr_2 ? reg_21 : _GEN_150 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_152 = 5'h16 == io_raddr_2 ? reg_22 : _GEN_151 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_153 = 5'h17 == io_raddr_2 ? reg_23 : _GEN_152 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_154 = 5'h18 == io_raddr_2 ? reg_24 : _GEN_153 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_155 = 5'h19 == io_raddr_2 ? reg_25 : _GEN_154 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_156 = 5'h1a == io_raddr_2 ? reg_26 : _GEN_155 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_157 = 5'h1b == io_raddr_2 ? reg_27 : _GEN_156 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_158 = 5'h1c == io_raddr_2 ? reg_28 : _GEN_157 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_159 = 5'h1d == io_raddr_2 ? reg_29 : _GEN_158 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_160 = 5'h1e == io_raddr_2 ? reg_30 : _GEN_159 ; // @[demo.scala 175:25 demo.scala 175:25] wire [ 31 : 0 ] _GEN_161 = 5'h1f == io_raddr_2 ? reg_31 : _GEN_160 ; // @[demo.scala 175:25 demo.scala 175:25] assign io_rdata_0 = io_raddr_0 == 5'h0 ? 32'h0 : _GEN_95 ; // @[demo.scala 172:36 demo.scala 173:25 demo.scala 175:25] assign io_rdata_1 = io_raddr_1 == 5'h0 ? 32'h0 : _GEN_128 ; // @[demo.scala 172:36 demo.scala 173:25 demo.scala 175:25] assign io_rdata_2 = io_raddr_2 == 5'h0 ? 32'h0 : _GEN_161 ; // @[demo.scala 172:36 demo.scala 173:25 demo.scala 175:25] always @( posedge clock ) begin if ( reset ) begin // @[demo.scala 165:22] reg_0 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h0 == io_waddr ) begin // @[demo.scala 168:23] reg_0 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_1 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h1 == io_waddr ) begin // @[demo.scala 168:23] reg_1 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_2 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h2 == io_waddr ) begin // @[demo.scala 168:23] reg_2 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_3 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h3 == io_waddr ) begin // @[demo.scala 168:23] reg_3 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_4 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h4 == io_waddr ) begin // @[demo.scala 168:23] reg_4 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_5 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h5 == io_waddr ) begin // @[demo.scala 168:23] reg_5 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_6 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h6 == io_waddr ) begin // @[demo.scala 168:23] reg_6 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_7 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h7 == io_waddr ) begin // @[demo.scala 168:23] reg_7 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_8 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h8 == io_waddr ) begin // @[demo.scala 168:23] reg_8 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_9 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h9 == io_waddr ) begin // @[demo.scala 168:23] reg_9 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_10 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'ha == io_waddr ) begin // @[demo.scala 168:23] reg_10 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_11 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'hb == io_waddr ) begin // @[demo.scala 168:23] reg_11 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_12 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'hc == io_waddr ) begin // @[demo.scala 168:23] reg_12 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_13 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'hd == io_waddr ) begin // @[demo.scala 168:23] reg_13 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_14 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'he == io_waddr ) begin // @[demo.scala 168:23] reg_14 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_15 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'hf == io_waddr ) begin // @[demo.scala 168:23] reg_15 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_16 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h10 == io_waddr ) begin // @[demo.scala 168:23] reg_16 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_17 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h11 == io_waddr ) begin // @[demo.scala 168:23] reg_17 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_18 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h12 == io_waddr ) begin // @[demo.scala 168:23] reg_18 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_19 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h13 == io_waddr ) begin // @[demo.scala 168:23] reg_19 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_20 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h14 == io_waddr ) begin // @[demo.scala 168:23] reg_20 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_21 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h15 == io_waddr ) begin // @[demo.scala 168:23] reg_21 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_22 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h16 == io_waddr ) begin // @[demo.scala 168:23] reg_22 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_23 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h17 == io_waddr ) begin // @[demo.scala 168:23] reg_23 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_24 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h18 == io_waddr ) begin // @[demo.scala 168:23] reg_24 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_25 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h19 == io_waddr ) begin // @[demo.scala 168:23] reg_25 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_26 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h1a == io_waddr ) begin // @[demo.scala 168:23] reg_26 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_27 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h1b == io_waddr ) begin // @[demo.scala 168:23] reg_27 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_28 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h1c == io_waddr ) begin // @[demo.scala 168:23] reg_28 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_29 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h1d == io_waddr ) begin // @[demo.scala 168:23] reg_29 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_30 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h1e == io_waddr ) begin // @[demo.scala 168:23] reg_30 <= io_wdata ; // @[demo.scala 168:23] end end if ( reset ) begin // @[demo.scala 165:22] reg_31 <= 32'h0 ; // @[demo.scala 165:22] end else if ( io_wen ) begin // @[demo.scala 167:19] if ( 5'h1f == io_waddr ) begin // @[demo.scala 168:23] reg_31 <= io_wdata ; // @[demo.scala 168:23] end end end endmodule HLS \u9ad8\u7ea7\u7efc\u5408(high-level synthesis) \u80fd\u81ea\u52a8\u628a C/C++ \u4e4b\u7c7b\u7684\u9ad8\u7ea7\u8bed\u8a00\u8f6c\u5316\u6210 Verilog/VHDL \u4e4b\u7c7b\u7684\u5e95\u5c42\u786c\u4ef6\u63cf\u8ff0\u8bed\u8a00(RTL), \u4f8b\u5982\uff1avivado HLS, Intel HLS compiler, Mentor Catapult HLS, Cadence Stratus HLS, Synopsys C\u3002\u636e\u8bf42003\u5e74\uff0c\u4e00\u4f4d\u535a\u58eb\u751f\u6311\u6218\u4e86\u5df2\u7ecf\u5361\u58f320\u5e74\u7684HLS\u9886\u57df\uff0c\u6210\u529f\u628a\u975e\u65f6\u5e8f\u7684\u4ee3\u7801\u65f6\u5e8f\u786c\u4ef6\u5316\u3002\u4ed6\u548c\u8001\u5e08\u4e00\u8d77\u521b\u529e\u4e86AutoESL\uff0c\u505aC\u81ea\u52a8\u8f6c\u6362RTL\u30022011\u5e74\u88abXilinx\u6536\u8d2d\uff0c\u8bde\u751f\u4e86Xilinx Vivado HLS \u21a9","title":"\u751f\u6210\u5668"},{"location":"chisel/rocketchip.html","text":"rocket chip\u5206\u6790 \u00b6 https://github.com/chipsalliance/rocket-chip Rocket Chip is a design generator, capable of producing many design instances from a single high-level source rocket chip\u9879\u76ee\u4e0d\u4ec5\u5b9e\u73b0\u4e86rocket chip\u7684SOC\uff0c\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u5e93\u6765\u4f7f\u7528,\u51c6\u786e\u6765\u8bb2\uff0cRocket Chip\u662f\u4e00\u4e2a\u5f00\u6e90\u7684SOC\u53ef\u7efc\u5408RTL\u751f\u6210\u5668\u3002\u5185\u90e8\u5b9e\u73b0\u4e86\u57fa\u4e8eRISCV\u67b6\u6784\u7684\u987a\u5e8fCore(Rocket)\u548c\u4e71\u5e8fCore(BOOM)\u3002\u76ee\u524dRocket Chip\u5df2\u7ecf taped out 11\u6b21\uff0c\u7a33\u5b9a\u6027\u5f97\u5230\u4e86\u80af\u5b9a\u3002 \u901a\u8fc7github\u7684README\u53ef\u4ee5\u8f7b\u677e\u627e\u5230Rocket\u7684\u76f8\u5173\u6587\u6863\u8bf4\u660e repo\u7ed3\u6784 \u00b6 \u968f\u7740\u6a21\u5757\u5316\u7684\u53d1\u5c55\uff0cRocket Chip\u7684\u8bb8\u591a\u7ec4\u4ef6\u5e93\u6210\u4e3a\u4e86\u72ec\u7acb\u7684repo, Rocket Chip\u91c7\u7528git submodules\u6765\u5305\u542b\u8fd9\u4e9b\u6a21\u5757\u7684\u53ef\u4fe1\u7248\u672c \u9876\u5c42\u76ee\u5f55\u7ed3\u6784 \u00b6 \u251c\u2500\u2500 bootrom \u542f\u52a8romcode \u251c\u2500\u2500 build.sbt \u6784\u5efa\u811a\u672c \u251c\u2500\u2500 emulator \u7528\u4e8e\u5b58\u653everilator\u751f\u6210\u7684\u6a21\u62df\u5668\uff0c\u5176\u4e2d\u7684Makefile\u63d0\u4f9b\u4e86\u751f\u6210\u65b9\u6cd5 \u251c\u2500\u2500 hardfloat \u6d6e\u70b9\u5355\u5143submodule \u251c\u2500\u2500 macros \u251c\u2500\u2500 project sbt\u7f16\u8bd1\u8fd0\u884c\u4e13\u7528\u76ee\u5f55 \u251c\u2500\u2500 regression \u56de\u5f52\u6d4b\u8bd5\u811a\u672c,\u4f7f\u7528scala test\u7684\u6d4b\u8bd5\u811a\u672c \u251c\u2500\u2500 scripts \u4e00\u4e9b\u6709\u7528\u7684\u5c0f\u5de5\u5177 \u251c\u2500\u2500 src \u751f\u6210\u5668\u5b58\u653e\u76ee\u5f55 \u251c\u2500\u2500 target sbt\u4e13\u7528\u76ee\u5f55 \u251c\u2500\u2500 torture riscv-torture\u968f\u673a\u6307\u4ee4\u6d4b\u8bd5\u6846\u67b6 \u2514\u2500\u2500 vsim Synopsys VCS simulations are compiled and run\uff0c \u9700\u8981VCS\u73af\u5883 \u751f\u6210\u5668\u76ee\u5f55\u7ed3\u6784 \u00b6 . \u251c\u2500\u2500 amba \u5305\u542bahb,apb,axi4\u7b49AMBA\u603b\u7ebf\u534f\u8bae \u251c\u2500\u2500 aop \u251c\u2500\u2500 aspects \u251c\u2500\u2500 devices \u5305\u542b\u4e86debug\u6a21\u5757\u4ee5\u53ca\u4e00\u4e9b\u7269\u7406\u8bbe\u5907 \u251c\u2500\u2500 diplomacy \u251c\u2500\u2500 diplomaticobjectmodel \u251c\u2500\u2500 examples \u251c\u2500\u2500 formal \u251c\u2500\u2500 groundtest \u251c\u2500\u2500 interrupts \u251c\u2500\u2500 jtag JTAG \u603b\u7ebf\u63a5\u53e3 \u251c\u2500\u2500 linting \u251c\u2500\u2500 package.scala \u251c\u2500\u2500 prci \u251c\u2500\u2500 regmapper \u251c\u2500\u2500 rocket Rocket Core\u7684\u751f\u6210\u5668\uff0c\u5305\u542balu btb ...\u7b49\u7684\u751f\u6210\u5668\u5b9e\u73b0 \u251c\u2500\u2500 scie \u251c\u2500\u2500 stage \u251c\u2500\u2500 subsystem \u251c\u2500\u2500 system \u914d\u7f6e\u6587\u4ef6(\u7ec4\u88c5\u6587\u4ef6) \u251c\u2500\u2500 tile \u7ec4\u4ef6\uff0cFPU, ROCC\u7b49\u7ec4\u4ef6 \u251c\u2500\u2500 tilelink TileLink\u534f\u8bae\u4ee5\u53ca\u9002\u914d\u5668\u548c\u534f\u8bae\u8f6c\u6362\u5668 \u251c\u2500\u2500 transforms \u251c\u2500\u2500 unittest \u53ef\u7efc\u5408\u7684\u786c\u4ef6\u6d4b\u8bd5\u6846\u67b6 \u2514\u2500\u2500 util \u5927\u91cf\u7684\u53ef\u590d\u7528\u7684\u5c0f\u6a21\u5757 \u73af\u5883\u642d\u5efa \u00b6 git clone https://github.com/ucb-bar/rocket-chip.git cd rocket-chip export ROCKETCHIP = ` pwd ` git submodule update --init --recursive export RISCV = /path/to/install/riscv/toolchain #riscv\u5de5\u5177\u94fe\u5b89\u88c5\u76ee\u5f55 rocket-tools \u662f\u8f6f\u4ef6\u96c6\u5408\uff0c\u53ef\u4ee5\u9009\u62e9\u81ea\u5df1\u5355\u72ec\u642d\u5efa\u4e5f\u53ef\u4ee5\u9009\u62e9\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e2arepo,\u7531\u4e8e\u6211\u7684\u672c\u5730\u5df2\u7ecf\u6709riscv-tools,\u76f4\u63a5\u4f7f\u7528\u5176\u4e2d\u7684riscv-tests\u751f\u6210\u7684\u6d4b\u8bd5case\u4e5f\u80fd\u8fdb\u884cemulator\u7684\u6d4b\u8bd5 \u7f16\u8bd1C++\u6a21\u62df\u5668,\u751f\u6210\u7684\u9ed8\u8ba4\u7684elf\u4e3a\uff1aemulator-freechips.rocketchip.system-freechips.rocketchip.system.DefaultConfig cd emulator make -jN \u7f16\u8bd1VCS\u6a21\u62df\u5668\uff0c\u7531\u4e8e\u6ca1\u6709vcs\u73af\u5883\uff0c\u6682\u65f6\u65e0\u6cd5\u751f\u6210 cd vsim make -jN \u751f\u6210verilog,\u9ed8\u8ba4\u7684verilog\u4e3a\uff1afreechips.rocketchip.system.DefaultConfig.v cd vsim make verilog Rocket Core \u00b6","title":"rocket chip\u5206\u6790"},{"location":"chisel/rocketchip.html#rocket-chip","text":"https://github.com/chipsalliance/rocket-chip Rocket Chip is a design generator, capable of producing many design instances from a single high-level source rocket chip\u9879\u76ee\u4e0d\u4ec5\u5b9e\u73b0\u4e86rocket chip\u7684SOC\uff0c\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u5e93\u6765\u4f7f\u7528,\u51c6\u786e\u6765\u8bb2\uff0cRocket Chip\u662f\u4e00\u4e2a\u5f00\u6e90\u7684SOC\u53ef\u7efc\u5408RTL\u751f\u6210\u5668\u3002\u5185\u90e8\u5b9e\u73b0\u4e86\u57fa\u4e8eRISCV\u67b6\u6784\u7684\u987a\u5e8fCore(Rocket)\u548c\u4e71\u5e8fCore(BOOM)\u3002\u76ee\u524dRocket Chip\u5df2\u7ecf taped out 11\u6b21\uff0c\u7a33\u5b9a\u6027\u5f97\u5230\u4e86\u80af\u5b9a\u3002 \u901a\u8fc7github\u7684README\u53ef\u4ee5\u8f7b\u677e\u627e\u5230Rocket\u7684\u76f8\u5173\u6587\u6863\u8bf4\u660e","title":"rocket chip\u5206\u6790"},{"location":"chisel/rocketchip.html#repo","text":"\u968f\u7740\u6a21\u5757\u5316\u7684\u53d1\u5c55\uff0cRocket Chip\u7684\u8bb8\u591a\u7ec4\u4ef6\u5e93\u6210\u4e3a\u4e86\u72ec\u7acb\u7684repo, Rocket Chip\u91c7\u7528git submodules\u6765\u5305\u542b\u8fd9\u4e9b\u6a21\u5757\u7684\u53ef\u4fe1\u7248\u672c","title":"repo\u7ed3\u6784"},{"location":"chisel/rocketchip.html#_1","text":"\u251c\u2500\u2500 bootrom \u542f\u52a8romcode \u251c\u2500\u2500 build.sbt \u6784\u5efa\u811a\u672c \u251c\u2500\u2500 emulator \u7528\u4e8e\u5b58\u653everilator\u751f\u6210\u7684\u6a21\u62df\u5668\uff0c\u5176\u4e2d\u7684Makefile\u63d0\u4f9b\u4e86\u751f\u6210\u65b9\u6cd5 \u251c\u2500\u2500 hardfloat \u6d6e\u70b9\u5355\u5143submodule \u251c\u2500\u2500 macros \u251c\u2500\u2500 project sbt\u7f16\u8bd1\u8fd0\u884c\u4e13\u7528\u76ee\u5f55 \u251c\u2500\u2500 regression \u56de\u5f52\u6d4b\u8bd5\u811a\u672c,\u4f7f\u7528scala test\u7684\u6d4b\u8bd5\u811a\u672c \u251c\u2500\u2500 scripts \u4e00\u4e9b\u6709\u7528\u7684\u5c0f\u5de5\u5177 \u251c\u2500\u2500 src \u751f\u6210\u5668\u5b58\u653e\u76ee\u5f55 \u251c\u2500\u2500 target sbt\u4e13\u7528\u76ee\u5f55 \u251c\u2500\u2500 torture riscv-torture\u968f\u673a\u6307\u4ee4\u6d4b\u8bd5\u6846\u67b6 \u2514\u2500\u2500 vsim Synopsys VCS simulations are compiled and run\uff0c \u9700\u8981VCS\u73af\u5883","title":"\u9876\u5c42\u76ee\u5f55\u7ed3\u6784"},{"location":"chisel/rocketchip.html#_2","text":". \u251c\u2500\u2500 amba \u5305\u542bahb,apb,axi4\u7b49AMBA\u603b\u7ebf\u534f\u8bae \u251c\u2500\u2500 aop \u251c\u2500\u2500 aspects \u251c\u2500\u2500 devices \u5305\u542b\u4e86debug\u6a21\u5757\u4ee5\u53ca\u4e00\u4e9b\u7269\u7406\u8bbe\u5907 \u251c\u2500\u2500 diplomacy \u251c\u2500\u2500 diplomaticobjectmodel \u251c\u2500\u2500 examples \u251c\u2500\u2500 formal \u251c\u2500\u2500 groundtest \u251c\u2500\u2500 interrupts \u251c\u2500\u2500 jtag JTAG \u603b\u7ebf\u63a5\u53e3 \u251c\u2500\u2500 linting \u251c\u2500\u2500 package.scala \u251c\u2500\u2500 prci \u251c\u2500\u2500 regmapper \u251c\u2500\u2500 rocket Rocket Core\u7684\u751f\u6210\u5668\uff0c\u5305\u542balu btb ...\u7b49\u7684\u751f\u6210\u5668\u5b9e\u73b0 \u251c\u2500\u2500 scie \u251c\u2500\u2500 stage \u251c\u2500\u2500 subsystem \u251c\u2500\u2500 system \u914d\u7f6e\u6587\u4ef6(\u7ec4\u88c5\u6587\u4ef6) \u251c\u2500\u2500 tile \u7ec4\u4ef6\uff0cFPU, ROCC\u7b49\u7ec4\u4ef6 \u251c\u2500\u2500 tilelink TileLink\u534f\u8bae\u4ee5\u53ca\u9002\u914d\u5668\u548c\u534f\u8bae\u8f6c\u6362\u5668 \u251c\u2500\u2500 transforms \u251c\u2500\u2500 unittest \u53ef\u7efc\u5408\u7684\u786c\u4ef6\u6d4b\u8bd5\u6846\u67b6 \u2514\u2500\u2500 util \u5927\u91cf\u7684\u53ef\u590d\u7528\u7684\u5c0f\u6a21\u5757","title":"\u751f\u6210\u5668\u76ee\u5f55\u7ed3\u6784"},{"location":"chisel/rocketchip.html#_3","text":"git clone https://github.com/ucb-bar/rocket-chip.git cd rocket-chip export ROCKETCHIP = ` pwd ` git submodule update --init --recursive export RISCV = /path/to/install/riscv/toolchain #riscv\u5de5\u5177\u94fe\u5b89\u88c5\u76ee\u5f55 rocket-tools \u662f\u8f6f\u4ef6\u96c6\u5408\uff0c\u53ef\u4ee5\u9009\u62e9\u81ea\u5df1\u5355\u72ec\u642d\u5efa\u4e5f\u53ef\u4ee5\u9009\u62e9\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e2arepo,\u7531\u4e8e\u6211\u7684\u672c\u5730\u5df2\u7ecf\u6709riscv-tools,\u76f4\u63a5\u4f7f\u7528\u5176\u4e2d\u7684riscv-tests\u751f\u6210\u7684\u6d4b\u8bd5case\u4e5f\u80fd\u8fdb\u884cemulator\u7684\u6d4b\u8bd5 \u7f16\u8bd1C++\u6a21\u62df\u5668,\u751f\u6210\u7684\u9ed8\u8ba4\u7684elf\u4e3a\uff1aemulator-freechips.rocketchip.system-freechips.rocketchip.system.DefaultConfig cd emulator make -jN \u7f16\u8bd1VCS\u6a21\u62df\u5668\uff0c\u7531\u4e8e\u6ca1\u6709vcs\u73af\u5883\uff0c\u6682\u65f6\u65e0\u6cd5\u751f\u6210 cd vsim make -jN \u751f\u6210verilog,\u9ed8\u8ba4\u7684verilog\u4e3a\uff1afreechips.rocketchip.system.DefaultConfig.v cd vsim make verilog","title":"\u73af\u5883\u642d\u5efa"},{"location":"chisel/rocketchip.html#rocket-core","text":"","title":"Rocket Core"},{"location":"chisel/sbt.html","text":"sbt \u00b6 sbt(Simple Build Tool)\u662fscala\u7684\u6784\u5efa\u5de5\u5177, \u91c7\u7528scala\u6765\u7f16\u5199\u914d\u7f6e\u6587\u4ef6 sbt\u65e0\u75db\u5165\u95e8\u6307\u5357 \u8fd9\u91cc\u9762\u4ecb\u7ecd\u4e86\u5982\u4f55\u5b89\u88c5SBT\uff0c\u5e76\u4e14\u914d\u7f6e\u56fd\u5185\u4ed3\u5e93\uff0c\u5e76\u4e14\u4f7f\u7528\u5168\u5c40\u4ed3\u5e93\u3002 \u82b1\u8d39\u534a\u5929\u7684\u65f6\u95f4\uff0c\u6839\u636esbt\u5b98\u65b9\u6587\u6863\u6765\u5199\u4e00\u4e9b\u7b80\u5355\u6784\u5efa\uff0c\u5c31\u8db3\u4ee5\u5e94\u4ed8\u65e5\u5e38\u9700\u6c42\u4e86 sbt\u5b98\u65b9\u6587\u6863 sbt\u4f7f\u7528build.sbt\u811a\u672c\u6765\u5efa\u7acb\u6784\u5efa\u89c4\u5219\uff0c\u4e3b\u8981\u662f\u5b9a\u4e49\u6784\u5efa\u5bf9\u8c61(projects)\u5e76\u4e14\u8bbe\u7f6e\u4e00\u4e9b\u4f9d\u8d56\u3002sbt\u5bf9\u4e8e\u6784\u5efa\u76ee\u5f55\u8fdb\u884c\u4e86\u9650\u5236\uff0c\u6240\u4ee5\u4f7f\u7528\u4e00\u4e2a\u9879\u76ee\u6a21\u677f\u662f\u975e\u5e38\u7701\u4e8b\u7684\u65b9\u6cd5\u3002 sbt\u9ed8\u8ba4\u7684\u6784\u5efaproject\u76ee\u5f55\u662frepo\u7684\u6839\u76ee\u5f55\u3002\u6bd4\u5982\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3ahello\u7684repo\uff0c\u90a3\u4e48\u6211\u4eec\u7684scala\u6e90\u7801\u5e94\u8be5\u653e\u5728src/main/scala/ \u76ee\u5f55\u4e0b\uff0c\u6b64\u65f6\u9ed8\u8ba4\u7684\u6784\u5efa\u5bf9\u8c61 \u5c31\u662fhello\u3002\u5982\u679c\u6211\u4eec\u8981\u65b0\u589e\u4e00\u4e2a\u6784\u5efa\u5bf9\u8c61testrun\uff0c\u6211\u4eec\u5e94\u8be5\u521b\u5efa\u4e00\u4e2a testrun/src/main/scala/ \u7684\u76ee\u5f55\uff0c\u5e76\u4e14\u628a\u6e90\u6587\u4ef6\u653e\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e0b\uff0c\u540c\u65f6\uff0c\u5e94\u8be5\u5728build.sbt\u4e2d\u6dfb\u52a0 \u4e00\u4e2atestrun\u7684\u6784\u5efa\u8bf4\u660e lazy var testRun = ( project in file ( \"testrun\" )) \u8fd9\u770b\u8d77\u6765\u50cf\u4e0d\u50cfMakefile\uff01\uff01\uff01","title":"sbt"},{"location":"chisel/sbt.html#sbt","text":"sbt(Simple Build Tool)\u662fscala\u7684\u6784\u5efa\u5de5\u5177, \u91c7\u7528scala\u6765\u7f16\u5199\u914d\u7f6e\u6587\u4ef6 sbt\u65e0\u75db\u5165\u95e8\u6307\u5357 \u8fd9\u91cc\u9762\u4ecb\u7ecd\u4e86\u5982\u4f55\u5b89\u88c5SBT\uff0c\u5e76\u4e14\u914d\u7f6e\u56fd\u5185\u4ed3\u5e93\uff0c\u5e76\u4e14\u4f7f\u7528\u5168\u5c40\u4ed3\u5e93\u3002 \u82b1\u8d39\u534a\u5929\u7684\u65f6\u95f4\uff0c\u6839\u636esbt\u5b98\u65b9\u6587\u6863\u6765\u5199\u4e00\u4e9b\u7b80\u5355\u6784\u5efa\uff0c\u5c31\u8db3\u4ee5\u5e94\u4ed8\u65e5\u5e38\u9700\u6c42\u4e86 sbt\u5b98\u65b9\u6587\u6863 sbt\u4f7f\u7528build.sbt\u811a\u672c\u6765\u5efa\u7acb\u6784\u5efa\u89c4\u5219\uff0c\u4e3b\u8981\u662f\u5b9a\u4e49\u6784\u5efa\u5bf9\u8c61(projects)\u5e76\u4e14\u8bbe\u7f6e\u4e00\u4e9b\u4f9d\u8d56\u3002sbt\u5bf9\u4e8e\u6784\u5efa\u76ee\u5f55\u8fdb\u884c\u4e86\u9650\u5236\uff0c\u6240\u4ee5\u4f7f\u7528\u4e00\u4e2a\u9879\u76ee\u6a21\u677f\u662f\u975e\u5e38\u7701\u4e8b\u7684\u65b9\u6cd5\u3002 sbt\u9ed8\u8ba4\u7684\u6784\u5efaproject\u76ee\u5f55\u662frepo\u7684\u6839\u76ee\u5f55\u3002\u6bd4\u5982\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3ahello\u7684repo\uff0c\u90a3\u4e48\u6211\u4eec\u7684scala\u6e90\u7801\u5e94\u8be5\u653e\u5728src/main/scala/ \u76ee\u5f55\u4e0b\uff0c\u6b64\u65f6\u9ed8\u8ba4\u7684\u6784\u5efa\u5bf9\u8c61 \u5c31\u662fhello\u3002\u5982\u679c\u6211\u4eec\u8981\u65b0\u589e\u4e00\u4e2a\u6784\u5efa\u5bf9\u8c61testrun\uff0c\u6211\u4eec\u5e94\u8be5\u521b\u5efa\u4e00\u4e2a testrun/src/main/scala/ \u7684\u76ee\u5f55\uff0c\u5e76\u4e14\u628a\u6e90\u6587\u4ef6\u653e\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e0b\uff0c\u540c\u65f6\uff0c\u5e94\u8be5\u5728build.sbt\u4e2d\u6dfb\u52a0 \u4e00\u4e2atestrun\u7684\u6784\u5efa\u8bf4\u660e lazy var testRun = ( project in file ( \"testrun\" )) \u8fd9\u770b\u8d77\u6765\u50cf\u4e0d\u50cfMakefile\uff01\uff01\uff01","title":"sbt"},{"location":"chisel/scala.html","text":"scala \u00b6 \u5b98\u65b9\u7f51\u7ad9 \u8fd9\u91cc\u6211\u4eec\u53ea\u9488\u5bf9scala3\u8fdb\u884c\u5b66\u4e60\uff0c\u76f4\u63a5\u8df3\u8fc7scala2 scala3 book \u5173\u952e\u8bed\u6cd5\u4e3e\u4f8b\u89e3\u6790 \u00b6 \u53d8\u91cf \u00b6 \u6ce8\u610fval\u548cvar\u7684\u533a\u522b\uff0cval\u662f\u503c\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3aconst; var\u662f\u53d8\u91cf\u3002val\u4e0d\u53ef\u88ab\u66f4\u6539, \u56e0\u4e3achisel\u4e2d\u6240\u6709\u7684\u90fd\u5e94\u8be5\u662f\u7535\u8def, \u4e00\u65e6\u786e\u5b9a\u4e86\u4e0d\u80fd\u66f4\u6539\uff0c\u56e0\u6b64\u6240\u6709\u7684\u90fd\u5e94\u8be5\u662fval \u5185\u7f6e\u7684\u53d8\u91cf\u7c7b\u578b\u5982\u4e0b\uff1a val b : Byte = 1 val i : Int = 1 val l : Long = 1 val s : Short = 1 val d : Double = 2.0 val f : Float = 3.0 val e : String = \"config\" val a : Char = 'c' \u5faa\u73af \u00b6 \u8fd9\u91cc\u6ce8\u610f for(i <- 1 until 3) \u548c for(i <- 1 to 3) \u7684\u533a\u522b\uff0c until\u662f\u4e0d\u5305\u542b\uff0c to\u662f\u5305\u542b \u95ed\u5305 \u00b6 \u95ed\u5305\u672c\u8eab\u662f\u4e00\u4e2a\u51fd\u6570,\u8d77\u59cb\u6211\u4eec\u5728C\u8bed\u8a00\u4e2d\u7ecf\u5e38\u8fd9\u6837\u7528,\u8fd9\u91cc\u91cd\u70b9\u89e3\u91ca\u95ed\u5305\u7684\u542b\u4e49\uff1a\u95ed\u5305\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd4\u56de\u503c\u4f9d\u8d56\u4e8e\u58f0\u660e\u5728\u51fd\u6570\u5916\u90e8\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u53d8\u91cf var factor = 3 val multiplier = ( i : Int ) => i * factor \u7ee7\u627f \u00b6 \u7ee7\u627f,\u4e00\u4e2a\u5b50\u7c7b\u53ea\u80fd\u7ee7\u627f\u4e00\u4e2a\u7236\u7c7b traits \u00b6 \u63a5\u53e3\uff0c\u63a5\u53e3\u4e2d\u53ef\u4ee5\u5305\u542b\u62bd\u8c61\u6216\u8005\u5177\u4f53\u7684\u65b9\u6cd5\u548c\u5b57\u6bb5\uff0c\u4e5f\u53ef\u4ee5\u50cf\u7c7b\u4e00\u6837\u5177\u6709\u53c2\u6570\u3002\u63a5\u53e3\u53ef\u4ee5\u591a\u7ee7\u627f \u4e0b\u9762\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u62bd\u8c61\u63a5\u53e3\u548c\u975e\u62bd\u8c61\u63a5\u53e3, \u62bd\u8c61\u7684\u5b9e\u73b0\u65b9\u5f0f,class\u548ctraits\u662f\u4e00\u6837\u7684 trait Speaker1 : def speak (): String // has no body, so it\u2019s abstract trait Speaker2 : def speak (): String = \"Meow\" \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c \u91cd\u5199\u5177\u4f53\u65b9\u6cd5\u6216\u63a5\u53e3\u5fc5\u987b\u4f7f\u7528override,\u865a\u65b9\u6cd5\u6216\u8005\u865a\u63a5\u53e3,\u4e0d\u9700\u8981 extends \u00b6 abstract class BtbModule ( implicit val p : Parameters ) extends Module with HasBtbParameters \u5e94\u8be5\u89e3\u8bfb\u4e3aextends ( A with B with ....) case class \u00b6 \u6837\u4f8b\u7c7b\uff0c\u4e00\u79cd\u7279\u6b8a\u7684\u7c7b\uff0c\u80fd\u591f\u88ab\u4f18\u5316\u4ee5\u7528\u4e8e\u6a21\u5f0f\u5339\u914d\u3002 \u6784\u9020\u5668\u4e2d\u7684\u53c2\u6570\u5982\u679c\u4e0d\u88ab\u58f0\u660e\u4e3avar\u7684\u8bdd\uff0c\u9ed8\u8ba4\u662fval\u7c7b\u578b \u81ea\u52a8\u521b\u5efa\u4f34\u751f\u5bf9\u8c61\uff0c\u5b9e\u73b0apply\u65b9\u6cd5\uff0c\u53ef\u4ee5\u4e0d\u76f4\u63a5\u663e\u793a\u5730new\u5bf9\u8c61 \u4f34\u751f\u5bf9\u8c61\u5b9e\u73b0unapply\u65b9\u6cd5\uff0c\u4ece\u800c\u53ef\u4ee5\u5c06case class\u5e94\u7528\u4e8e\u6a21\u5f0f\u5339\u914d \u5b9e\u73b0toString\u3001hashCode\u3001copy\u3001equals\u65b9\u6cd5 implicit \u00b6 Scala\u652f\u6301\u4e24\u79cd\u5f62\u5f0f\u7684\u9690\u5f0f\u8f6c\u6362\uff1a \u9690\u5f0f\u503c\uff1a\u7528\u4e8e\u7ed9\u65b9\u6cd5\u63d0\u4f9b\u53c2\u6570 \u9690\u5f0f\u89c6\u56fe\uff1a\u7528\u4e8e\u7c7b\u578b\u95f4\u8f6c\u6362\u6216\u4f7f\u9488\u5bf9\u67d0\u7c7b\u578b\u7684\u65b9\u6cd5\u80fd\u8c03\u7528\u6210\u529f \u9690\u5f0f\u503c scala > def persion ( implicit name : String ) = name def persion ( implicit name : String ): String scala > implicit val p : String = \"test\" val p : String = test scala > persion val res0 : String = test \u9690\u5f0f\u89c6\u56fe scala > import scala . language . implicitConversions scala > def foo ( msg : String ) = println ( msg ) def foo ( msg : String ): Unit scala > foo ( 10 ) 1 | foo ( 10 ) | ^^ | Found : ( 10 : Int ) | Required : String scala > implicit def abc ( x : Int ): String = x . toString def abc ( x : Int ): String scala > foo ( 10 ) 10 \u534f\u53d8\u548c\u9006\u53d8 \u00b6 \u8fd9\u91cc\u9996\u5148\u8981\u89e3\u91ca\u4e00\u4e0b\u6cdb\u578b\u7f16\u7a0b\uff0c\u624d\u80fd\u66f4\u597d\u7684\u7406\u89e3\u534f\u53d8\u548c\u9006\u53d8\u7684\u6765\u9f99\u53bb\u8109\u3002\u9996\u5148\u6cdb\u578b\u7f16\u7a0b\u662f\u4e00\u79cd\u601d\u60f3\uff0c\u4e0d\u5728\u4e8e\u8bed\u8a00\uff0c\u652f\u6301\u6cdb\u578b\u7f16\u7a0b\u7684\u8bed\u8a00\u53ea\u662f\u5c06\u5176\u5b9e\u73b0\u53d8\u5f97\u65b9\u4fbf\u3002 C\u8bed\u8a00\u53ef\u4ee5\u4f7f\u7528\u5b8f\u6765\u8fbe\u5230\u6cdb\u578b\u7f16\u7a0b\u7684\u76ee\u7684,\u4f46\u5b8f\u4ec5\u5de5\u4f5c\u5728\u9884\u5904\u7406\u9636\u6bb5\uff0c\u8c03\u8bd5\u8d77\u6765\u4e5f\u5f88\u9ebb\u70e6\u3002C++\u4f7f\u7528\u6a21\u677f\u6765\u5b9e\u73b0\u6cdb\u578b\u7f16\u7a0b\uff0c\u6a21\u677f\u51fd\u6570\u548c\u6a21\u677f\u7c7b\u662f\u4e3b\u8981\u9014\u5f84\u3002 scala\u548cjava\u4e00\u6837\uff0c\u4e5f\u652f\u6301\u6cdb\u578b\u7f16\u7a0b\u3002\u6cdb\u578b\u7f16\u7a0b\u4e0d\u5c5e\u4e8eOOO\u4f53\u7cfb\uff0c\u5b83\u662f\u5bf9OOO\u7684\u8865\u5145\uff0cOOO\u5728\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u65b9\u9762\u6709\u7740\u5148\u5929\u7684\u4e0d\u8db3\uff0c\u6cdb\u578b\u7f16\u7a0b\u5f25\u8865\u4e86\u8fd9\u4e00\u70b9\u3002\u8fd9\u65f6\u5019\u5c31\u4f1a\u51fa\u73b0\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679cT'\u662fT\u7684\u4e00\u4e2a\u5b50\u7c7b\uff0c \u90a3\u4e48Pipeline[T']\u662f\u4e0d\u662f\u5e94\u8be5\u88ab\u770b\u505a\u662fPipeline[T]\u7684\u5b50\u7c7b\u5462\uff1f\u8fd9\u6837\u5c31\u5f15\u51fa\u4e86\u534f\u53d8\u548c\u9006\u53d8\u3002 scala \u4f7f\u7528\u5982\u4e0b\u65b9\u6cd5\u6765\u89e3\u51b3\u4e0a\u9762\u7684\u95ee\u9898 invariant \u4e0d\u53d8 \u5199\u6210Pipeline[T] \u8ba4\u4e3aPipeline[T']\u6ca1\u6709\u5173\u7cfb covariant \u534f\u53d8 \u5199\u6210Pipeline[+T]\uff0c \u8ba4\u4e3aPipeline[T'] \u662fPipeline[T]\u7684\u5b50\u7c7b\u578b contravariant \u9006\u53d8 \u5199\u6210Pipeline[-T]\uff0c \u8ba4\u4e3aPipeline[T] \u662fPipeline[T']\u7684\u5b50\u7c7b\u578b \u8fd8\u53ef\u5bf9\u7c7b\u578b\u8fb9\u754c\u8fdb\u884c\u9650\u5236 \u4e0a\u8fb9\u754c\uff0c\u8868\u8fbe\u4e86\u6cdb\u578b\u7c7b\u578b\u5fc5\u987b\u662f\u67d0\u79cd\u7c7b\u578b\u6216\u67d0\u79cd\u7c7b\u578b\u7684\u5b50\u7c7b\uff0c \u8bed\u6cd5\u4e3a\uff1a\u201c<:\u201d \u4e0b\u8fb9\u754c\uff0c\u8868\u8fbe\u4e86\u6cdb\u578b\u7c7b\u578b\u5fc5\u987b\u662f\u67d0\u79cd\u7c7b\u578b\u6216\u67d0\u79cd\u7c7b\u578b\u7684\u7236\u7c7b\uff0c\u8bed\u6cd5\u4e3a\uff1a\u201c>:\u201d","title":"scala"},{"location":"chisel/scala.html#scala","text":"\u5b98\u65b9\u7f51\u7ad9 \u8fd9\u91cc\u6211\u4eec\u53ea\u9488\u5bf9scala3\u8fdb\u884c\u5b66\u4e60\uff0c\u76f4\u63a5\u8df3\u8fc7scala2 scala3 book","title":"scala"},{"location":"chisel/scala.html#_1","text":"","title":"\u5173\u952e\u8bed\u6cd5\u4e3e\u4f8b\u89e3\u6790"},{"location":"chisel/scala.html#_2","text":"\u6ce8\u610fval\u548cvar\u7684\u533a\u522b\uff0cval\u662f\u503c\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3aconst; var\u662f\u53d8\u91cf\u3002val\u4e0d\u53ef\u88ab\u66f4\u6539, \u56e0\u4e3achisel\u4e2d\u6240\u6709\u7684\u90fd\u5e94\u8be5\u662f\u7535\u8def, \u4e00\u65e6\u786e\u5b9a\u4e86\u4e0d\u80fd\u66f4\u6539\uff0c\u56e0\u6b64\u6240\u6709\u7684\u90fd\u5e94\u8be5\u662fval \u5185\u7f6e\u7684\u53d8\u91cf\u7c7b\u578b\u5982\u4e0b\uff1a val b : Byte = 1 val i : Int = 1 val l : Long = 1 val s : Short = 1 val d : Double = 2.0 val f : Float = 3.0 val e : String = \"config\" val a : Char = 'c'","title":"\u53d8\u91cf"},{"location":"chisel/scala.html#_3","text":"\u8fd9\u91cc\u6ce8\u610f for(i <- 1 until 3) \u548c for(i <- 1 to 3) \u7684\u533a\u522b\uff0c until\u662f\u4e0d\u5305\u542b\uff0c to\u662f\u5305\u542b","title":"\u5faa\u73af"},{"location":"chisel/scala.html#_4","text":"\u95ed\u5305\u672c\u8eab\u662f\u4e00\u4e2a\u51fd\u6570,\u8d77\u59cb\u6211\u4eec\u5728C\u8bed\u8a00\u4e2d\u7ecf\u5e38\u8fd9\u6837\u7528,\u8fd9\u91cc\u91cd\u70b9\u89e3\u91ca\u95ed\u5305\u7684\u542b\u4e49\uff1a\u95ed\u5305\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd4\u56de\u503c\u4f9d\u8d56\u4e8e\u58f0\u660e\u5728\u51fd\u6570\u5916\u90e8\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u53d8\u91cf var factor = 3 val multiplier = ( i : Int ) => i * factor","title":"\u95ed\u5305"},{"location":"chisel/scala.html#_5","text":"\u7ee7\u627f,\u4e00\u4e2a\u5b50\u7c7b\u53ea\u80fd\u7ee7\u627f\u4e00\u4e2a\u7236\u7c7b","title":"\u7ee7\u627f"},{"location":"chisel/scala.html#traits","text":"\u63a5\u53e3\uff0c\u63a5\u53e3\u4e2d\u53ef\u4ee5\u5305\u542b\u62bd\u8c61\u6216\u8005\u5177\u4f53\u7684\u65b9\u6cd5\u548c\u5b57\u6bb5\uff0c\u4e5f\u53ef\u4ee5\u50cf\u7c7b\u4e00\u6837\u5177\u6709\u53c2\u6570\u3002\u63a5\u53e3\u53ef\u4ee5\u591a\u7ee7\u627f \u4e0b\u9762\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u62bd\u8c61\u63a5\u53e3\u548c\u975e\u62bd\u8c61\u63a5\u53e3, \u62bd\u8c61\u7684\u5b9e\u73b0\u65b9\u5f0f,class\u548ctraits\u662f\u4e00\u6837\u7684 trait Speaker1 : def speak (): String // has no body, so it\u2019s abstract trait Speaker2 : def speak (): String = \"Meow\" \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c \u91cd\u5199\u5177\u4f53\u65b9\u6cd5\u6216\u63a5\u53e3\u5fc5\u987b\u4f7f\u7528override,\u865a\u65b9\u6cd5\u6216\u8005\u865a\u63a5\u53e3,\u4e0d\u9700\u8981","title":"traits"},{"location":"chisel/scala.html#extends","text":"abstract class BtbModule ( implicit val p : Parameters ) extends Module with HasBtbParameters \u5e94\u8be5\u89e3\u8bfb\u4e3aextends ( A with B with ....)","title":"extends"},{"location":"chisel/scala.html#case-class","text":"\u6837\u4f8b\u7c7b\uff0c\u4e00\u79cd\u7279\u6b8a\u7684\u7c7b\uff0c\u80fd\u591f\u88ab\u4f18\u5316\u4ee5\u7528\u4e8e\u6a21\u5f0f\u5339\u914d\u3002 \u6784\u9020\u5668\u4e2d\u7684\u53c2\u6570\u5982\u679c\u4e0d\u88ab\u58f0\u660e\u4e3avar\u7684\u8bdd\uff0c\u9ed8\u8ba4\u662fval\u7c7b\u578b \u81ea\u52a8\u521b\u5efa\u4f34\u751f\u5bf9\u8c61\uff0c\u5b9e\u73b0apply\u65b9\u6cd5\uff0c\u53ef\u4ee5\u4e0d\u76f4\u63a5\u663e\u793a\u5730new\u5bf9\u8c61 \u4f34\u751f\u5bf9\u8c61\u5b9e\u73b0unapply\u65b9\u6cd5\uff0c\u4ece\u800c\u53ef\u4ee5\u5c06case class\u5e94\u7528\u4e8e\u6a21\u5f0f\u5339\u914d \u5b9e\u73b0toString\u3001hashCode\u3001copy\u3001equals\u65b9\u6cd5","title":"case class"},{"location":"chisel/scala.html#implicit","text":"Scala\u652f\u6301\u4e24\u79cd\u5f62\u5f0f\u7684\u9690\u5f0f\u8f6c\u6362\uff1a \u9690\u5f0f\u503c\uff1a\u7528\u4e8e\u7ed9\u65b9\u6cd5\u63d0\u4f9b\u53c2\u6570 \u9690\u5f0f\u89c6\u56fe\uff1a\u7528\u4e8e\u7c7b\u578b\u95f4\u8f6c\u6362\u6216\u4f7f\u9488\u5bf9\u67d0\u7c7b\u578b\u7684\u65b9\u6cd5\u80fd\u8c03\u7528\u6210\u529f \u9690\u5f0f\u503c scala > def persion ( implicit name : String ) = name def persion ( implicit name : String ): String scala > implicit val p : String = \"test\" val p : String = test scala > persion val res0 : String = test \u9690\u5f0f\u89c6\u56fe scala > import scala . language . implicitConversions scala > def foo ( msg : String ) = println ( msg ) def foo ( msg : String ): Unit scala > foo ( 10 ) 1 | foo ( 10 ) | ^^ | Found : ( 10 : Int ) | Required : String scala > implicit def abc ( x : Int ): String = x . toString def abc ( x : Int ): String scala > foo ( 10 ) 10","title":"implicit"},{"location":"chisel/scala.html#_6","text":"\u8fd9\u91cc\u9996\u5148\u8981\u89e3\u91ca\u4e00\u4e0b\u6cdb\u578b\u7f16\u7a0b\uff0c\u624d\u80fd\u66f4\u597d\u7684\u7406\u89e3\u534f\u53d8\u548c\u9006\u53d8\u7684\u6765\u9f99\u53bb\u8109\u3002\u9996\u5148\u6cdb\u578b\u7f16\u7a0b\u662f\u4e00\u79cd\u601d\u60f3\uff0c\u4e0d\u5728\u4e8e\u8bed\u8a00\uff0c\u652f\u6301\u6cdb\u578b\u7f16\u7a0b\u7684\u8bed\u8a00\u53ea\u662f\u5c06\u5176\u5b9e\u73b0\u53d8\u5f97\u65b9\u4fbf\u3002 C\u8bed\u8a00\u53ef\u4ee5\u4f7f\u7528\u5b8f\u6765\u8fbe\u5230\u6cdb\u578b\u7f16\u7a0b\u7684\u76ee\u7684,\u4f46\u5b8f\u4ec5\u5de5\u4f5c\u5728\u9884\u5904\u7406\u9636\u6bb5\uff0c\u8c03\u8bd5\u8d77\u6765\u4e5f\u5f88\u9ebb\u70e6\u3002C++\u4f7f\u7528\u6a21\u677f\u6765\u5b9e\u73b0\u6cdb\u578b\u7f16\u7a0b\uff0c\u6a21\u677f\u51fd\u6570\u548c\u6a21\u677f\u7c7b\u662f\u4e3b\u8981\u9014\u5f84\u3002 scala\u548cjava\u4e00\u6837\uff0c\u4e5f\u652f\u6301\u6cdb\u578b\u7f16\u7a0b\u3002\u6cdb\u578b\u7f16\u7a0b\u4e0d\u5c5e\u4e8eOOO\u4f53\u7cfb\uff0c\u5b83\u662f\u5bf9OOO\u7684\u8865\u5145\uff0cOOO\u5728\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u65b9\u9762\u6709\u7740\u5148\u5929\u7684\u4e0d\u8db3\uff0c\u6cdb\u578b\u7f16\u7a0b\u5f25\u8865\u4e86\u8fd9\u4e00\u70b9\u3002\u8fd9\u65f6\u5019\u5c31\u4f1a\u51fa\u73b0\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679cT'\u662fT\u7684\u4e00\u4e2a\u5b50\u7c7b\uff0c \u90a3\u4e48Pipeline[T']\u662f\u4e0d\u662f\u5e94\u8be5\u88ab\u770b\u505a\u662fPipeline[T]\u7684\u5b50\u7c7b\u5462\uff1f\u8fd9\u6837\u5c31\u5f15\u51fa\u4e86\u534f\u53d8\u548c\u9006\u53d8\u3002 scala \u4f7f\u7528\u5982\u4e0b\u65b9\u6cd5\u6765\u89e3\u51b3\u4e0a\u9762\u7684\u95ee\u9898 invariant \u4e0d\u53d8 \u5199\u6210Pipeline[T] \u8ba4\u4e3aPipeline[T']\u6ca1\u6709\u5173\u7cfb covariant \u534f\u53d8 \u5199\u6210Pipeline[+T]\uff0c \u8ba4\u4e3aPipeline[T'] \u662fPipeline[T]\u7684\u5b50\u7c7b\u578b contravariant \u9006\u53d8 \u5199\u6210Pipeline[-T]\uff0c \u8ba4\u4e3aPipeline[T] \u662fPipeline[T']\u7684\u5b50\u7c7b\u578b \u8fd8\u53ef\u5bf9\u7c7b\u578b\u8fb9\u754c\u8fdb\u884c\u9650\u5236 \u4e0a\u8fb9\u754c\uff0c\u8868\u8fbe\u4e86\u6cdb\u578b\u7c7b\u578b\u5fc5\u987b\u662f\u67d0\u79cd\u7c7b\u578b\u6216\u67d0\u79cd\u7c7b\u578b\u7684\u5b50\u7c7b\uff0c \u8bed\u6cd5\u4e3a\uff1a\u201c<:\u201d \u4e0b\u8fb9\u754c\uff0c\u8868\u8fbe\u4e86\u6cdb\u578b\u7c7b\u578b\u5fc5\u987b\u662f\u67d0\u79cd\u7c7b\u578b\u6216\u67d0\u79cd\u7c7b\u578b\u7684\u7236\u7c7b\uff0c\u8bed\u6cd5\u4e3a\uff1a\u201c>:\u201d","title":"\u534f\u53d8\u548c\u9006\u53d8"},{"location":"debug/objcopy.html","text":"objcopy \u00b6 objcopy \u5728\u4f7f\u7528objcopy\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53d1\u73b0-j\u9009\u9879\u53ea\u80fd\u63d0\u53d6WA flag\u7684\u6bb5\uff08\u5177\u4f53\u8fd8\u9700\u8981\u8fdb\u4e00\u6b65\u786e\u8ba4\uff0c\u53ea\u662f\u56e0\u4e3a\u6211\u589e\u52a0\u4e86wa flag\u5c5e\u6027\u5c31\u80fd\u591f\u63d0\u53d6\u4e86\uff09\uff0c \u7279\u6b64\u8bb0\u5f55\u4e00\u4e0b \u6211\u5728\u4ee3\u7801\u4e2d\u81ea\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6bb5\uff0c\u6c47\u7f16\u4ee3\u7801\u5982\u4e0b\uff1a .section .ddrdata .align 8 ddrdata : .dword 0x2debba328c9d8d5c , 0x3b87beaeebcf3a2b .dword 0x28a10827080f6e69 , 0x1793c3b898462757 \u5728\u94fe\u63a5\u65f6\uff0c\u505a\u4e86\u5982\u4e0b\u5904\u7406 . = 0x10000; .scdata : { *(.ddrdata) } \u4e8e\u662f\u751f\u6210\u7684elf\u6587\u4ef6\uff0c\u622a\u53d6\u90e8\u5206readelf\u4fe1\u606f\u5982\u4e0b output$ riscv32-unknown-elf-readelf -S test There are 11 section headers, starting at offset 0x7630: \u8282\u5934\uff1a [ Nr ] Name Type Addr Off Size ES Flg Lk Inf Al [ 0 ] NULL 00000000 000000 000000 00 0 0 0 [ 3 ] .data PROGBITS 00002000 003000 000610 00 WA 0 0 256 [ 4 ] .scdata PROGBITS 00010000 003700 000400 00 0 0 256 [ 10 ] .shstrtab STRTAB 00000000 0075d0 00005f 00 0 0 1 \u6211\u53d1\u73b0\u5f53\u6211\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u63d0\u53d6scdata\u6bb5\u65f6\uff0c\u5f97\u5230\u7684\u6587\u4ef6\u4e3a\u7a7a output$ riscv32-unknown-elf-objcopy -O binary -j .scdata test 111 .bin output$ ll 111 .bin -rwxr-xr-x 1 chsgcxy chsgcxy 0 3\u6708 12 15 :08 111 .bin* \u4e8e\u662f\u5c1d\u8bd5\u63d0\u53d6.data\u6bb5\uff0c\u53d1\u73b0\u662f\u53ef\u4ee5\u63d0\u53d6\u7684\uff0c\u90a3\u5c31\u60f3\u662f\u4e0d\u662f\u56e0\u4e3adata\u6bb5\u6709WA flag\uff0c\u6240\u4ee5\u53ef\u4ee5\u63d0\u53d6\u5462\uff0c \u628a\u81ea\u5b9a\u4e49\u6bb5\u6dfb\u52a0wa\u6807\u8bb0\u8bd5\u4e00\u4e0b .section .ddrdata , \"aw\" .align 8 ddrdata : .dword 0x2debba328c9d8d5c , 0x3b87beaeebcf3a2b .dword 0x28a10827080f6e69 , 0x1793c3b898462757 \u518d\u6b21\u67e5\u770b\u751f\u6210\u7684elf\u6587\u4ef6 output$ riscv32-unknown-elf-readelf -S test There are 11 section headers, starting at offset 0x7630: \u8282\u5934\uff1a [ Nr ] Name Type Addr Off Size ES Flg Lk Inf Al [ 0 ] NULL 00000000 000000 000000 00 0 0 0 [ 3 ] .data PROGBITS 00002000 003000 000610 00 WA 0 0 256 [ 4 ] .scdata PROGBITS 00010000 003700 000400 00 WA 0 0 256 [ 10 ] .shstrtab STRTAB 00000000 0075d0 00005f 00 0 0 1 \u518d\u6b21\u5c1d\u8bd5\u63d0\u53d6 output$ riscv32-unknown-elf-objcopy -O binary -j .scdata test 111 .bin output$ ll 111 .bin -rwxr-xr-x 1 chsgcxy chsgcxy 1024 3\u6708 12 15 :19 111 .bin* output$ hexdump 111 .bin | more 0000000 8d5c 8c9d ba32 2deb 3a2b ebcf beae 3b87 0000010 6e69 080f 0827 28a1 2757 9846 c3b8 1793 \u63d0\u53d6\u6210\u529f\u4e86\uff0c\u4f46\u662f\u8fd9\u91cc\u5c31\u6709\u7591\u95ee\u4e86\uff0cobjcopy\u662f\u6709\u8fd9\u79cd\u9650\u5236\u5417\uff1f\u6b64\u95ee\u9898\u9700\u8981\u8fdb\u4e00\u6b65\u63a2\u7d22","title":"objcopy"},{"location":"debug/objcopy.html#objcopy","text":"objcopy \u5728\u4f7f\u7528objcopy\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53d1\u73b0-j\u9009\u9879\u53ea\u80fd\u63d0\u53d6WA flag\u7684\u6bb5\uff08\u5177\u4f53\u8fd8\u9700\u8981\u8fdb\u4e00\u6b65\u786e\u8ba4\uff0c\u53ea\u662f\u56e0\u4e3a\u6211\u589e\u52a0\u4e86wa flag\u5c5e\u6027\u5c31\u80fd\u591f\u63d0\u53d6\u4e86\uff09\uff0c \u7279\u6b64\u8bb0\u5f55\u4e00\u4e0b \u6211\u5728\u4ee3\u7801\u4e2d\u81ea\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6bb5\uff0c\u6c47\u7f16\u4ee3\u7801\u5982\u4e0b\uff1a .section .ddrdata .align 8 ddrdata : .dword 0x2debba328c9d8d5c , 0x3b87beaeebcf3a2b .dword 0x28a10827080f6e69 , 0x1793c3b898462757 \u5728\u94fe\u63a5\u65f6\uff0c\u505a\u4e86\u5982\u4e0b\u5904\u7406 . = 0x10000; .scdata : { *(.ddrdata) } \u4e8e\u662f\u751f\u6210\u7684elf\u6587\u4ef6\uff0c\u622a\u53d6\u90e8\u5206readelf\u4fe1\u606f\u5982\u4e0b output$ riscv32-unknown-elf-readelf -S test There are 11 section headers, starting at offset 0x7630: \u8282\u5934\uff1a [ Nr ] Name Type Addr Off Size ES Flg Lk Inf Al [ 0 ] NULL 00000000 000000 000000 00 0 0 0 [ 3 ] .data PROGBITS 00002000 003000 000610 00 WA 0 0 256 [ 4 ] .scdata PROGBITS 00010000 003700 000400 00 0 0 256 [ 10 ] .shstrtab STRTAB 00000000 0075d0 00005f 00 0 0 1 \u6211\u53d1\u73b0\u5f53\u6211\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u63d0\u53d6scdata\u6bb5\u65f6\uff0c\u5f97\u5230\u7684\u6587\u4ef6\u4e3a\u7a7a output$ riscv32-unknown-elf-objcopy -O binary -j .scdata test 111 .bin output$ ll 111 .bin -rwxr-xr-x 1 chsgcxy chsgcxy 0 3\u6708 12 15 :08 111 .bin* \u4e8e\u662f\u5c1d\u8bd5\u63d0\u53d6.data\u6bb5\uff0c\u53d1\u73b0\u662f\u53ef\u4ee5\u63d0\u53d6\u7684\uff0c\u90a3\u5c31\u60f3\u662f\u4e0d\u662f\u56e0\u4e3adata\u6bb5\u6709WA flag\uff0c\u6240\u4ee5\u53ef\u4ee5\u63d0\u53d6\u5462\uff0c \u628a\u81ea\u5b9a\u4e49\u6bb5\u6dfb\u52a0wa\u6807\u8bb0\u8bd5\u4e00\u4e0b .section .ddrdata , \"aw\" .align 8 ddrdata : .dword 0x2debba328c9d8d5c , 0x3b87beaeebcf3a2b .dword 0x28a10827080f6e69 , 0x1793c3b898462757 \u518d\u6b21\u67e5\u770b\u751f\u6210\u7684elf\u6587\u4ef6 output$ riscv32-unknown-elf-readelf -S test There are 11 section headers, starting at offset 0x7630: \u8282\u5934\uff1a [ Nr ] Name Type Addr Off Size ES Flg Lk Inf Al [ 0 ] NULL 00000000 000000 000000 00 0 0 0 [ 3 ] .data PROGBITS 00002000 003000 000610 00 WA 0 0 256 [ 4 ] .scdata PROGBITS 00010000 003700 000400 00 WA 0 0 256 [ 10 ] .shstrtab STRTAB 00000000 0075d0 00005f 00 0 0 1 \u518d\u6b21\u5c1d\u8bd5\u63d0\u53d6 output$ riscv32-unknown-elf-objcopy -O binary -j .scdata test 111 .bin output$ ll 111 .bin -rwxr-xr-x 1 chsgcxy chsgcxy 1024 3\u6708 12 15 :19 111 .bin* output$ hexdump 111 .bin | more 0000000 8d5c 8c9d ba32 2deb 3a2b ebcf beae 3b87 0000010 6e69 080f 0827 28a1 2757 9846 c3b8 1793 \u63d0\u53d6\u6210\u529f\u4e86\uff0c\u4f46\u662f\u8fd9\u91cc\u5c31\u6709\u7591\u95ee\u4e86\uff0cobjcopy\u662f\u6709\u8fd9\u79cd\u9650\u5236\u5417\uff1f\u6b64\u95ee\u9898\u9700\u8981\u8fdb\u4e00\u6b65\u63a2\u7d22","title":"objcopy"},{"location":"deeplearning/bert.html","text":"Bert(Bidirectional Encoder Representations from Transformers) \u00b6 Bert(Bidirectional Encoder Representations from Transformers) bert\u5230\u5e95\u662f\u4ec0\u4e48 Bert\u7279\u70b9 \u6a21\u578b forward \u8bad\u7ec3\u4efb\u52a1 Pretraining\u4efb\u52a1 MLM MSP Fine-Tuning \u57fa\u4e8e\u53e5\u5b50\u5bf9\u7684\u5206\u7c7b\u4efb\u52a1 MNLI QQP STS-B MRPC RTE SWAG \u57fa\u4e8e\u5355\u4e2a\u53e5\u5b50\u7684\u5206\u7c7b\u4efb\u52a1 SST-2 CoLA \u95ee\u7b54\u4efb\u52a1 SQuAD v1.1 \u547d\u540d\u5b9e\u4f53\u8bc6\u522b CoNLL-2003 NER Bert\u5206\u4e24\u65b9\u9762\u6765\u7406\u89e3\uff0c\u4e00\u65b9\u9762\u662f\u5b83\u662f\u600e\u4e48\u6765\u7684\uff0c\u4ed6\u89e3\u51b3\u4e86\u54ea\u4e9b\u95ee\u9898;\u53e6\u4e00\u65b9\u9762\u662f\u4ece\u5de5\u7a0b\u5316\u7684\u89d2\u5ea6\uff0cbert\u5230\u5e95\u600e\u4e48\u7528\u3002 bert\u5230\u5e95\u662f\u4ec0\u4e48 \u00b6 bert\u662f\u4e00\u4e2a\u7ecf\u8fc7\u9884\u8bad\u7ec3\u7684\u8bed\u8a00\u8868\u8fbe\u65b9\u6cd5\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5148\u901a\u8fc7\u4e00\u4e2a\u5f88\u5927\u7684\u8bed\u6599\u5e93\uff0c\u8bad\u7ec3\u4e00\u4e2a\u901a\u7528\u7684\u8bed\u8a00\u7406\u89e3\u6a21\u578b\uff0c\u7136\u540e\u518d\u7528\u8fd9\u4e2a\u6a21\u578b\u6765\u505a\u7ec6\u5206\u7684NLP\u4efb\u52a1\u3002bert\u6bd4\u4ee5\u5f80\u7684\u65b9\u6cd5\u90fd\u8981\u597d\uff0c\u56e0\u4e3a\u5b83\u662f\u7b2c\u4e00\u4e2a\u9488\u5bf9\u9884\u8bad\u7ec3NLP\u7684\u65e0\u76d1\u7763\uff0c\u6df1\u5ea6\u53cc\u5411\u7cfb\u7edf\u3002 bert\u7684\u65e0\u76d1\u7763\u4f53\u73b0\u5728\u5b83\u5b8c\u5168\u662f\u901a\u8fc7\u539f\u59cb\u8bed\u6599\u5e93\u8bad\u7ec3\u6765\u7684\uff0c\u8fd9\u5176\u5b9e\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u539f\u59cb\u8bed\u6599\u5e93\u5728\u7f51\u7edc\u662f\u975e\u5e38\u5bb9\u6613\u83b7\u53d6\u7684\u3002 bert\u4e3a\u4e86\u8fbe\u5230\u65e0\u76d1\u7763\u548c\u53cc\u5411\uff0c\u4f7f\u7528\u4e86\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u53c8\u5de7\u5999\u7684\u9014\u5f84\uff1a\u5c4f\u853d\u6389\u8f93\u5165\u4e2d15%\u7684\u5355\u8bcd\uff0c\u7136\u540e\u5728\u6df1\u5ea6\u53cc\u5411\u7684transformer\u7f51\u7edc\u4e2d\u8fd0\u884c\u6574\u4e2a\u53e5\u5b50\uff0c\u7136\u540e\u9884\u6d4b\u88ab\u5c4f\u853d\u6389\u7684\u5355\u8bcd\u3002 \u4e3a\u4e86\u80fd\u591f\u5b66\u4e60\u53e5\u5b50\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u4e5f\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u4efb\u52a1\u5bf9\u6b64\u8fdb\u884c\u4e86\u8bad\u7ec3\uff0c\u4efb\u52a1\u53ef\u4ee5\u7531\u4efb\u4f55\u5355\u4e00\u8bed\u8a00\u8bed\u6599\u5e93\u6765\u751f\u6210\u3002\u7ed9\u5b9a\u4e24\u4e2a\u53e5\u5b50\uff0cA\u548cB,B\u53ef\u80fd\u662fA\u7684\u4e0b\u4e00\u53e5\uff0c\u4e5f\u53ef\u80fd\u4e0d\u662f\uff0c\u7136\u540e\u8fdb\u884c\u5927\u91cf\u7684\u8bad\u7ec3\u3002 \u5927\u81f4\u4e0a\uff0c\u8fd9\u5c31\u662fbert bert\u662f\u4e00\u4e2a\u7ecf\u8fc7\u9884\u8bad\u7ec3\u7684\u795e\u7ecf\u7f51\u7edc\u3002\u90a3\u4e48\u662f\u4e0d\u662f\u53ef\u4ee5\u8ba4\u4e3a\uff0c\u9884\u8bad\u7ec3\u7684\u90e8\u5206\u6559\u4f1a\u4e86\u5b83\u5bf9\u8bed\u8a00\u7684\u57fa\u672c\u7406\u89e3\uff0c\u5269\u4e0b\u7684\u662f\u5199\u4f5c\u6587\uff0c\u8fd8\u662f\u9605\u8bfb\u7406\u89e3\uff0c\u53ea\u9700\u8981\u6839\u636e\u5177\u4f53\u4efb\u52a1\u8fdb\u884cfine-tuning\u5c31\u884c\u4e86\u3002\u5f53\u7136\u9884\u8bad\u7ec3\u5176\u5b9e\u6210\u672c\u5f88\u9ad8\uff0c\u4f46\u597d\u5904\u662f\u4e00\u65e6\u5b66\u4f1a\u4e86\u5c31\u5fd8\u4e0d\u6389\u4e86\u3002 BERT\u62e5\u6709\u4e00\u4e2a\u6df1\u800c\u7a84\u7684\u795e\u7ecf\u7f51\u7edc\u3002transformer\u7684\u4e2d\u95f4\u5c42\u67092048\uff0cBERT\u53ea\u67091024\uff0c\u4f46\u5374\u670912\u5c42\u3002\u56e0\u6b64\uff0c\u5b83\u53ef\u4ee5\u5728\u65e0\u9700\u5927\u5e45\u67b6\u6784\u4fee\u6539\u7684\u524d\u63d0\u4e0b\u8fdb\u884c\u53cc\u5411\u8bad\u7ec3\u3002\u7531\u4e8e\u662f\u65e0\u76d1\u7763\u5b66\u4e60\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u4eba\u5de5\u5e72\u9884\u548c\u6807\u6ce8\uff0c\u8ba9\u4f4e\u6210\u672c\u5730\u8bad\u7ec3\u8d85\u5927\u89c4\u6a21\u8bed\u6599\u6210\u4e3a\u53ef\u80fd\u3002 BERT\u6a21\u578b\u80fd\u591f\u8054\u5408\u795e\u7ecf\u7f51\u7edc\u6240\u6709\u5c42\u4e2d\u7684\u4e0a\u4e0b\u6587\u6765\u8fdb\u884c\u8bad\u7ec3\u3002\u8fd9\u6837\u8bad\u7ec3\u51fa\u6765\u7684\u6a21\u578b\u5728\u5904\u7406\u95ee\u7b54\u6216\u8bed\u8a00\u63a8\u7406\u4efb\u52a1\u65f6\uff0c\u80fd\u591f\u7ed3\u5408\u4e0a\u4e0b\u6587\u7406\u89e3\u8bed\u4e49\uff0c\u5e76\u4e14\u5b9e\u73b0\u66f4\u7cbe\u51c6\u7684\u6587\u672c\u9884\u6d4b\u751f\u6210\u3002 BERT\u53ea\u9700\u8981\u5fae\u8c03\u5c31\u53ef\u4ee5\u9002\u5e94\u5f88\u591a\u7c7b\u578b\u7684NLP\u4efb\u52a1\uff0c\u8fd9\u4f7f\u5176\u5e94\u7528\u573a\u666f\u6269\u5927\uff0c\u5e76\u4e14\u964d\u4f4e\u4e86\u4f01\u4e1a\u7684\u8bad\u7ec3\u6210\u672c\u3002BERT\u652f\u6301\u5305\u62ec\u4e2d\u6587\u5728\u5185\u768460\u79cd\u8bed\u8a00\uff0c\u7814\u7a76\u4eba\u5458\u4e5f\u4e0d\u9700\u8981\u4ece\u5934\u5f00\u59cb\u8bad\u7ec3\u81ea\u5df1\u7684\u6a21\u578b\uff0c\u53ea\u9700\u8981\u5229\u7528BERT\u9488\u5bf9\u7279\u5b9a\u4efb\u52a1\u8fdb\u884c\u4fee\u6539\uff0c\u5728\u5355\u4e2a\u4e91TPU\u4e0a\u8fd0\u884c\u51e0\u5c0f\u65f6\u751a\u81f3\u51e0\u5341\u5206\u949f\uff0c\u5c31\u80fd\u83b7\u5f97\u4e0d\u9519\u7684\u5206\u6570 BERT\u63d0\u4f9b\u4e86\u7b80\u5355\u548c\u590d\u6742\u4e24\u4e2a\u6a21\u578bBERT_base\u548cBERT_large \u7c7b\u578b \u7f51\u7edc\u5c42\u6570(Bert Model) \u9690\u5c42\u5927\u5c0f Attention\u7684\u6570\u91cf \u53c2\u6570\u603b\u5927\u5c0f BERT_base L=12 H=768 A=12 110MB BERT_large L=24 H=1024 A=16 340MB github\u5730\u5740 https://github.com/google-research/bert Bert\u7279\u70b9 \u00b6 NLP\u9886\u57df\u5927\u6709\u4f5c\u4e3a\uff0c \u53ea\u9700\u8981\u5fae\u8c03\u5c31\u53ef\u4ee5\u9002\u5e94\u5f88\u591a\u7c7b\u578b\u7684NLP\u4efb\u52a1 \u4f7f\u7528\u4e86Transformer \u4f5c\u4e3a\u7b97\u6cd5\u7684\u4e3b\u8981\u6846\u67b6 \u5f00\u6e90 \u6a21\u578b \u00b6 matmul ^ | | Pooler Dense ^ | | |--------------------------| | Add & Norm | | ^ | | | | | Feed Forward | | ^ | BertModel | | | x12 | Add & Norm | | ^ | | | | | Multi-Head Attention | |--------------------------- ^ | | Layer Normal ^ | | Position Embedding ----------> add <---------- Segment Embedding ^ | | Input Embedding Bert\u83b7\u53d6\u524d\u7aef\u8f93\u5165\u7684\u5d4c\u5165\u7279\u5f81\uff0c\u7136\u540e\u901a\u8fc7Bert Model\u5bf9\u7279\u5f81\u8fdb\u884c\u5904\u7406\uff0cBert Model \u548c Transformer model \u5f88\u76f8\u4f3c\uff0c \u6700\u540e\u8981\u901a\u8fc7\u7279\u6b8a\u5904\u7406\u83b7\u5f97\u60f3\u8981\u7684\u7ed3\u679c\uff0c\u9488\u5bf9\u4e0d\u540c\u7684\u7ec6\u5206\u5e94\u7528\uff0c\u540e\u7eed\u7684\u5904\u7406\u4f1a\u6709\u4e0d\u540c\u3002 forward \u00b6 (\u6a21\u578b\u8f93\u5165\uff0c\u4ee5MRPC\u4e3a\u4f8b\uff0c\u4e24\u53e5\u8bdd\uff0c\u5224\u5b9a\u76f8\u5173\u6027) as input note left PCCW 's chief operating officer , Mike Butcher , and Alex Arena , the chief financial officer , will report directly to Mr So . Current Chief Operating Officer Mike Butcher and Group Chief Financial Officer Alex Arena will report to So . endnote (FullTokenizer \\n\\n\\ \u7b2c\u4e00\u6b65\u901a\u8fc7load_vocab\u52a0\u8f7d\u8bcd\u5178\\n\\ \u7b2c\u4e8c\u6b65BasicTokenizer\u53bb\u9664\u7a7a\u683c\u7b49\u65e0\u610f\u4e49\u5b57\u7b26\uff0c\u8fdb\u884c\u7c97\u7c92\u5ea6\u5206\u8bcd\\n\\ \u7b2c\u4e09\u6b65WordpieceTokenizer\u6839\u636e\u8bcd\u5178\u4f7f\u7528\u8d2a\u5a6a\u7b97\u6cd5\u8fdb\u884c\u7ec6\u7c92\u5ea6\u5206\u8bcd) as tk (\u7ec6\u7c92\u5ea6\u5206\u8bcd\u7ed3\u679c) as tokened input --> tk tk --> tokened note left [CLS] pc ##c ##w ' s chief operating officer , mike butcher , and alex arena , the chief financial officer , will report directly to mr so . [SEP] current chief operating officer mike butcher and group chief financial officer alex arena will report to so . [SEP] endnote (\u67e5\u627e\u5b57\u5178\uff0c\u83b7\u53d6\u5b57\u7b26\u7f16\u7801,\u6807\u8bb0\u4e3ainput_ids) as InputIds (\u628a\u7b2c\u4e00\u53e5\u6240\u6709\u5b57\u7b26\u6807\u8bb0\u4e3a0\uff0c\\n\\ \u7b2c\u4e8c\u53e5\u6240\u6709\u5b57\u7b26\u6807\u8bb0\u4e3a1\uff0c\u7ec4\u6210segment_ids) as SegmentIds (\u5f3a\u5236\u7f16\u7801\u53e5\u5b50\u4e2d\u6bcf\u4e2a\u8bcd\u7684\u4f4d\u7f6e\uff0c\u7ec4\u6210position) as position (\u6839\u636e\u53e5\u5b50\u6700\u5927\u7f16\u7801\u957f\u5ea6\uff0c\u6709\u6548\u5b57\u7b26\u6807\u8bb0\u4e3a1\uff0c\\n\\ \u672a\u4f7f\u7528\u7684\u6807\u8bb0\u4e3a0\uff0c\u7ec4\u6210input_mask) as InputMask tokened --> InputIds tokened --> InputMask tokened --> SegmentIds tokened --> position (Input Embedding\\n\\ \u67e5\u8868) as ie (Position Embedding) as pe (Segment Embeddin\\n\\ one-hot) as se InputIds --> ie position --> pe SegmentIds --> se ie --> (add) pe --> (add) se --> (add) BERT\u4e0d\u76f4\u63a5\u5904\u7406\u5355\u8bcd\uff0c\u800c\u662f\u628aWordPieces\u4f5c\u4e3atoken\u3002 BERT\u7684\u8f93\u5165\u7684\u7f16\u7801\u5411\u91cf\u662f3\u4e2a\u5d4c\u5165\u7279\u5f81\u7684\u5355\u4f4d\u548c\uff0c\u8fd9\u4e09\u4e2a\u8bcd\u5d4c\u5165\u7279\u5f81\u662f\uff1a WordPiece \u5d4c\u5165\uff1a\u67e5\u627eWordPiece\u5d4c\u5165\u7684token\u8bcd\u6c47\u8868\u3002\u7528##\u8868\u793a\u5206\u8bcd\u3002 WordPiece\u662f\u6307\u5c06\u5355\u8bcd\u5212\u5206\u6210\u4e00\u7ec4\u6709\u9650\u7684\u516c\u5171\u5b50\u8bcd\u5355\u5143\uff0c\u80fd\u5728\u5355\u8bcd\u7684\u6709\u6548\u6027\u548c\u5b57\u7b26\u7684\u7075\u6d3b\u6027\u4e4b\u95f4\u53d6\u5f97\u4e00\u4e2a\u6298\u4e2d\u7684\u5e73\u8861\u3002\u5982\u5c06\u2018playing\u2019\u88ab\u62c6\u5206\u6210\u4e86\u2018play\u2019\u548c\u2018ing\u2019\u3002\u5728\u53e5\u5b50\u5f00\u5934\u548c\u7ed3\u5c3e\u8fd8\u4f1a\u63d2\u5165\u4e24\u4e2a\u7279\u6b8a\u7b26\u53f7[CLS]\u548c[SEP]\uff0c\u5176\u4e2d[CLS]\u8868\u793a\u8be5\u7279\u5f81\u7528\u4e8e\u5206\u7c7b\u6a21\u578b\uff0c\u6bcf\u4e2a\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2atoken\u59cb\u7ec8\u662f\u7279\u6b8a\u5206\u7c7b\u5d4c\u5165\uff08[CLS]\uff09\u3002\u5bf9\u5e94\u4e8e\u8be5token\u7684\u6700\u7ec8\u9690\u85cf\u72b6\u6001\uff08\u5373\uff0cTransformer\u7684\u8f93\u51fa\uff09\u88ab\u7528\u4f5c\u5206\u7c7b\u4efb\u52a1\u7684\u805a\u5408\u5e8f\u5217\u8868\u793a\u3002\u5bf9\u4e8e\u975e\u5206\u7c7b\u4efb\u52a1\uff0c\u5c06\u5ffd\u7565\u6b64\u5411\u91cf\u3002[SEP]\u8868\u793a\u5206\u53e5\u7b26\u53f7\uff0c\u7528\u4e8e\u65ad\u5f00\u8f93\u5165\u8bed\u6599\u4e2d\u7684\u4e24\u4e2a\u53e5\u5b50 \u4f4d\u7f6e\u5d4c\u5165\uff08Position Embedding\uff09\uff1a\u4f4d\u7f6e\u5d4c\u5165\u662f\u6307\u5c06\u5355\u8bcd\u7684\u4f4d\u7f6e\u4fe1\u606f\u7f16\u7801\u6210\u7279\u5f81\u5411\u91cf\uff0c\u4f4d\u7f6e\u5d4c\u5165\u662f\u5411\u6a21\u578b\u4e2d\u5f15\u5165\u5355\u8bcd\u4f4d\u7f6e\u5173\u7cfb\u7684\u81f3\u5173\u91cd\u8981\u7684\u4e00\u73af \u5206\u5272\u5d4c\u5165\uff08Segment Embedding\uff09\uff1a\u7528\u4e8e\u533a\u5206\u4e24\u4e2a\u53e5\u5b50\uff0c\u4f8b\u5982B\u662f\u5426\u662fA\u7684\u4e0b\u6587\uff08\u5bf9\u8bdd\u573a\u666f\uff0c\u95ee\u7b54\u573a\u666f\u7b49\uff09\u3002\u5bf9\u4e8e\u53e5\u5b50\u5bf9\uff0c\u7b2c\u4e00\u4e2a\u53e5\u5b50\u7684\u7279\u5f81\u503c\u662f0\uff0c\u7b2c\u4e8c\u4e2a\u53e5\u5b50\u7684\u7279\u5f81\u503c\u662f1 mask\u5d4c\u5165\u7279\u5f81\u4f1a\u5728bert Model\u4e2d\u4f7f\u7528\uff0c\u8fd9\u548ctransformer\u4e00\u6837 \u8bad\u7ec3\u4efb\u52a1 \u00b6 Bert\u7684\u8bad\u7ec3\u4efb\u52a1\u53ef\u4ee5\u5206\u4e3aPretraining\u4efb\u52a1\u548cFine-Tuning\u3002Pretraining\u4efb\u52a1\u5b9e\u73b0\u4e86\u4e00\u4e2a\u57fa\u7840\u7684Bert\uff0c\u5728\u9700\u8981\u8fdb\u884c\u5177\u4f53\u7684\u4efb\u52a1\u65f6\uff0c\u8fd8\u9700\u8981\u8fdb\u884cFine-Tuning Pretraining\u4efb\u52a1 \u00b6 BERT\u662f\u4e00\u4e2a\u591a\u4efb\u52a1\u6a21\u578b\uff0c\u5b83\u7684\u4efb\u52a1\u662f\u7531\u4e24\u4e2a\u81ea\u76d1\u7763\u4efb\u52a1\u7ec4\u6210\uff0c\u5373MLM(Masked Language Model)\u548cNSP(Next Sentence Prediction) MLM \u00b6 \u6240\u8c13MLM\u662f\u6307\u5728\u8bad\u7ec3\u7684\u65f6\u5019\u968f\u5373\u4ece\u8f93\u5165\u9884\u6599\u4e0amask\u6389\u4e00\u4e9b\u5355\u8bcd\uff0c\u7136\u540e\u901a\u8fc7\u7684\u4e0a\u4e0b\u6587\u9884\u6d4b\u8be5\u5355\u8bcd\u3002\u5728BERT\u7684\u5b9e\u9a8c\u4e2d\uff0c15%\u7684WordPiece Token\u4f1a\u88ab\u968f\u673aMask\u6389\u3002\u5728\u8bad\u7ec3\u6a21\u578b\u65f6\uff0c\u4e00\u4e2a\u53e5\u5b50\u4f1a\u88ab\u591a\u6b21\u5582\u5230\u6a21\u578b\u4e2d\u7528\u4e8e\u53c2\u6570\u5b66\u4e60\uff0c\u4f46\u662fGoogle\u5e76\u6ca1\u6709\u5728\u6bcf\u6b21\u90fdmask\u6389\u8fd9\u4e9b\u5355\u8bcd\uff0c\u800c\u662f\u5728\u786e\u5b9a\u8981Mask\u6389\u7684\u5355\u8bcd\u4e4b\u540e 80%\u65f6\u95f4\uff1amy dog is hairy -> my dog is [mask] 10%\u65f6\u95f4\uff1amy dog is hairy -> my dog is apple 10%\u65f6\u95f4\uff1amy dog is hairy -> my dog is hairy MSP \u00b6 Next Sentence Prediction\uff08NSP\uff09\u7684\u4efb\u52a1\u662f\u5224\u65ad\u53e5\u5b50B\u662f\u5426\u662f\u53e5\u5b50A\u7684\u4e0b\u6587\u3002\u5982\u679c\u662f\u7684\u8bdd\u8f93\u51fa\u201cIsNext\u201d\uff0c\u5426\u5219\u8f93\u51fa\u201cNotNext\u201d\u3002\u8bad\u7ec3\u6570\u636e\u7684\u751f\u6210\u65b9\u5f0f\u662f\u4ece\u5e73\u884c\u8bed\u6599\u4e2d\u968f\u673a\u62bd\u53d6\u7684\u8fde\u7eed\u4e24\u53e5\u8bdd\uff0c\u5176\u4e2d50%\u4fdd\u7559\u62bd\u53d6\u7684\u4e24\u53e5\u8bdd\uff0c\u5b83\u4eec\u7b26\u5408IsNext\u5173\u7cfb\uff0c\u53e6\u591650%\u7684\u7b2c\u4e8c\u53e5\u8bdd\u662f\u968f\u673a\u4ece\u9884\u6599\u4e2d\u63d0\u53d6\u7684\uff0c\u5b83\u4eec\u7684\u5173\u7cfb\u662fNotNext\u7684\u3002\u8fd9\u4e2a\u5173\u7cfb\u4fdd\u5b58\u5728[CLS]\u7b26\u53f7\u4e2d Fine-Tuning \u00b6 \u5728\u6d77\u91cf\u5355\u9884\u6599\u4e0a\u8bad\u7ec3\u5b8cBERT\u4e4b\u540e\uff0c\u4fbf\u53ef\u4ee5\u5c06\u5176\u5e94\u7528\u5230NLP\u7684\u5404\u4e2a\u4efb\u52a1\u4e2d\u4e86.\u5bf9\u4e8e\u5176\u5b83\u4efb\u52a1\u6765\u8bf4\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u6839\u636eBERT\u7684\u8f93\u51fa\u4fe1\u606f\u4f5c\u51fa\u5bf9\u5e94\u7684\u9884\u6d4b,\u5b83\u4eec\u53ea\u9700\u8981\u5728BERT\u7684\u57fa\u7840\u4e0a\u518d\u6dfb\u52a0\u4e00\u4e2a\u8f93\u51fa\u5c42\u4fbf\u53ef\u4ee5\u5b8c\u6210\u5bf9\u7279\u5b9a\u4efb\u52a1\u7684\u5fae\u8c03 \u5fae\u8c03\u7684\u4efb\u52a1\u5305\u62ec \u57fa\u4e8e\u53e5\u5b50\u5bf9\u7684\u5206\u7c7b\u4efb\u52a1 \u57fa\u4e8e\u5355\u4e2a\u53e5\u5b50\u7684\u5206\u7c7b\u4efb\u52a1 \u95ee\u7b54\u4efb\u52a1 \u547d\u540d\u5b9e\u4f53\u8bc6\u522b \u57fa\u4e8e\u53e5\u5b50\u5bf9\u7684\u5206\u7c7b\u4efb\u52a1 \u00b6 MNLI \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u524d\u63d0 (Premise) \uff0c\u6839\u636e\u8fd9\u4e2a\u524d\u63d0\u53bb\u63a8\u65ad\u5047\u8bbe (Hypothesis) \u4e0e\u524d\u63d0\u7684\u5173\u7cfb\u3002\u8be5\u4efb\u52a1\u7684\u5173\u7cfb\u5206\u4e3a\u4e09\u79cd\uff0c\u8574\u542b\u5173\u7cfb (Entailment)\u3001\u77db\u76fe\u5173\u7cfb (Contradiction) \u4ee5\u53ca\u4e2d\u7acb\u5173\u7cfb (Neutral)\u3002\u6240\u4ee5\u8fd9\u4e2a\u95ee\u9898\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u5206\u7c7b\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u505a\u7684\u662f\u53bb\u53d1\u6398\u524d\u63d0\u548c\u5047\u8bbe\u8fd9\u4e24\u4e2a\u53e5\u5b50\u5bf9\u4e4b\u95f4\u7684\u4ea4\u4e92\u4fe1\u606f QQP \u00b6 \u57fa\u4e8eQuora\uff0c\u5224\u65ad Quora \u4e0a\u7684\u4e24\u4e2a\u95ee\u9898\u53e5\u662f\u5426\u8868\u793a\u7684\u662f\u4e00\u6837\u7684\u610f\u601d\u3002QNLI\uff1a\u7528\u4e8e\u5224\u65ad\u6587\u672c\u662f\u5426\u5305\u542b\u95ee\u9898\u7684\u7b54\u6848\uff0c\u7c7b\u4f3c\u4e8e\u6211\u4eec\u505a\u9605\u8bfb\u7406\u89e3\u5b9a\u4f4d\u95ee\u9898\u6240\u5728\u7684\u6bb5\u843d\u3002 STS-B \u00b6 \u9884\u6d4b\u4e24\u4e2a\u53e5\u5b50\u7684\u76f8\u4f3c\u6027\uff0c\u5305\u62ec5\u4e2a\u7ea7\u522b\u3002 MRPC \u00b6 \u4e5f\u662f\u5224\u65ad\u4e24\u4e2a\u53e5\u5b50\u662f\u5426\u662f\u7b49\u4ef7\u7684\u3002 RTE \u00b6 \u7c7b\u4f3c\u4e8eMNLI\uff0c\u4f46\u662f\u53ea\u662f\u5bf9\u8574\u542b\u5173\u7cfb\u7684\u4e8c\u5206\u7c7b\u5224\u65ad\uff0c\u800c\u4e14\u6570\u636e\u96c6\u66f4\u5c0f\u3002 SWAG \u00b6 \u4ece\u56db\u4e2a\u53e5\u5b50\u4e2d\u9009\u62e9\u4e3a\u53ef\u80fd\u4e3a\u524d\u53e5\u4e0b\u6587\u7684\u90a3\u4e2a\u3002 \u57fa\u4e8e\u5355\u4e2a\u53e5\u5b50\u7684\u5206\u7c7b\u4efb\u52a1 \u00b6 SST-2 \u00b6 \u7535\u5f71\u8bc4\u4ef7\u7684\u60c5\u611f\u5206\u6790\u3002 CoLA \u00b6 \u53e5\u5b50\u8bed\u4e49\u5224\u65ad\uff0c\u662f\u5426\u662f\u53ef\u63a5\u53d7\u7684\uff08Acceptable\uff09\u3002 \u95ee\u7b54\u4efb\u52a1 \u00b6 SQuAD v1.1 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u53e5\u5b50\uff08\u901a\u5e38\u662f\u4e00\u4e2a\u95ee\u9898\uff09\u548c\u4e00\u6bb5\u63cf\u8ff0\u6587\u672c\uff0c\u8f93\u51fa\u8fd9\u4e2a\u95ee\u9898\u7684\u7b54\u6848\uff0c\u7c7b\u4f3c\u4e8e\u505a\u9605\u8bfb\u7406\u89e3\u7684\u7b80\u7b54\u9898\u3002\u5982\u56fe \u00a9\u8868\u793a\u7684\uff0cSQuAD\u7684\u8f93\u5165\u662f\u95ee\u9898\u548c\u63cf\u8ff0\u6587\u672c\u7684\u53e5\u5b50\u5bf9\u3002\u8f93\u51fa\u662f\u7279\u5f81\u5411\u91cf\uff0c\u901a\u8fc7\u5728\u63cf\u8ff0\u6587\u672c\u4e0a\u63a5\u4e00\u5c42\u6fc0\u6d3b\u51fd\u6570\u4e3asoftmax\u7684\u5168\u8fde\u63a5\u6765\u83b7\u5f97\u8f93\u51fa\u6587\u672c\u7684\u6761\u4ef6\u6982\u7387\uff0c\u5168\u8fde\u63a5\u7684\u8f93\u51fa\u8282\u70b9\u4e2a\u6570\u662f\u8bed\u6599\u4e2dToken\u7684\u4e2a\u6570 \u547d\u540d\u5b9e\u4f53\u8bc6\u522b \u00b6 CoNLL-2003 NER \u00b6 \u5224\u65ad\u4e00\u4e2a\u53e5\u5b50\u4e2d\u7684\u5355\u8bcd\u662f\u4e0d\u662fPerson\uff0cOrganization\uff0cLocation\uff0cMiscellaneous\u6216\u8005other\uff08\u65e0\u547d\u540d\u5b9e\u4f53\uff09\u3002\u5fae\u8c03CoNLL-2003 NER\u65f6\u5c06\u6574\u4e2a\u53e5\u5b50\u4f5c\u4e3a\u8f93\u5165\uff0c\u5728\u6bcf\u4e2a\u65f6\u95f4\u7247\u8f93\u51fa\u4e00\u4e2a\u6982\u7387\uff0c\u5e76\u901a\u8fc7softmax\u5f97\u5230\u8fd9\u4e2aToken\u7684\u5b9e\u4f53\u7c7b\u522b\u3002","title":"Bert(Bidirectional Encoder Representations from Transformers)"},{"location":"deeplearning/bert.html#bertbidirectional-encoder-representations-from-transformers","text":"Bert(Bidirectional Encoder Representations from Transformers) bert\u5230\u5e95\u662f\u4ec0\u4e48 Bert\u7279\u70b9 \u6a21\u578b forward \u8bad\u7ec3\u4efb\u52a1 Pretraining\u4efb\u52a1 MLM MSP Fine-Tuning \u57fa\u4e8e\u53e5\u5b50\u5bf9\u7684\u5206\u7c7b\u4efb\u52a1 MNLI QQP STS-B MRPC RTE SWAG \u57fa\u4e8e\u5355\u4e2a\u53e5\u5b50\u7684\u5206\u7c7b\u4efb\u52a1 SST-2 CoLA \u95ee\u7b54\u4efb\u52a1 SQuAD v1.1 \u547d\u540d\u5b9e\u4f53\u8bc6\u522b CoNLL-2003 NER Bert\u5206\u4e24\u65b9\u9762\u6765\u7406\u89e3\uff0c\u4e00\u65b9\u9762\u662f\u5b83\u662f\u600e\u4e48\u6765\u7684\uff0c\u4ed6\u89e3\u51b3\u4e86\u54ea\u4e9b\u95ee\u9898;\u53e6\u4e00\u65b9\u9762\u662f\u4ece\u5de5\u7a0b\u5316\u7684\u89d2\u5ea6\uff0cbert\u5230\u5e95\u600e\u4e48\u7528\u3002","title":"Bert(Bidirectional Encoder Representations from Transformers)"},{"location":"deeplearning/bert.html#bert","text":"bert\u662f\u4e00\u4e2a\u7ecf\u8fc7\u9884\u8bad\u7ec3\u7684\u8bed\u8a00\u8868\u8fbe\u65b9\u6cd5\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5148\u901a\u8fc7\u4e00\u4e2a\u5f88\u5927\u7684\u8bed\u6599\u5e93\uff0c\u8bad\u7ec3\u4e00\u4e2a\u901a\u7528\u7684\u8bed\u8a00\u7406\u89e3\u6a21\u578b\uff0c\u7136\u540e\u518d\u7528\u8fd9\u4e2a\u6a21\u578b\u6765\u505a\u7ec6\u5206\u7684NLP\u4efb\u52a1\u3002bert\u6bd4\u4ee5\u5f80\u7684\u65b9\u6cd5\u90fd\u8981\u597d\uff0c\u56e0\u4e3a\u5b83\u662f\u7b2c\u4e00\u4e2a\u9488\u5bf9\u9884\u8bad\u7ec3NLP\u7684\u65e0\u76d1\u7763\uff0c\u6df1\u5ea6\u53cc\u5411\u7cfb\u7edf\u3002 bert\u7684\u65e0\u76d1\u7763\u4f53\u73b0\u5728\u5b83\u5b8c\u5168\u662f\u901a\u8fc7\u539f\u59cb\u8bed\u6599\u5e93\u8bad\u7ec3\u6765\u7684\uff0c\u8fd9\u5176\u5b9e\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u539f\u59cb\u8bed\u6599\u5e93\u5728\u7f51\u7edc\u662f\u975e\u5e38\u5bb9\u6613\u83b7\u53d6\u7684\u3002 bert\u4e3a\u4e86\u8fbe\u5230\u65e0\u76d1\u7763\u548c\u53cc\u5411\uff0c\u4f7f\u7528\u4e86\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u53c8\u5de7\u5999\u7684\u9014\u5f84\uff1a\u5c4f\u853d\u6389\u8f93\u5165\u4e2d15%\u7684\u5355\u8bcd\uff0c\u7136\u540e\u5728\u6df1\u5ea6\u53cc\u5411\u7684transformer\u7f51\u7edc\u4e2d\u8fd0\u884c\u6574\u4e2a\u53e5\u5b50\uff0c\u7136\u540e\u9884\u6d4b\u88ab\u5c4f\u853d\u6389\u7684\u5355\u8bcd\u3002 \u4e3a\u4e86\u80fd\u591f\u5b66\u4e60\u53e5\u5b50\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u4e5f\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u4efb\u52a1\u5bf9\u6b64\u8fdb\u884c\u4e86\u8bad\u7ec3\uff0c\u4efb\u52a1\u53ef\u4ee5\u7531\u4efb\u4f55\u5355\u4e00\u8bed\u8a00\u8bed\u6599\u5e93\u6765\u751f\u6210\u3002\u7ed9\u5b9a\u4e24\u4e2a\u53e5\u5b50\uff0cA\u548cB,B\u53ef\u80fd\u662fA\u7684\u4e0b\u4e00\u53e5\uff0c\u4e5f\u53ef\u80fd\u4e0d\u662f\uff0c\u7136\u540e\u8fdb\u884c\u5927\u91cf\u7684\u8bad\u7ec3\u3002 \u5927\u81f4\u4e0a\uff0c\u8fd9\u5c31\u662fbert bert\u662f\u4e00\u4e2a\u7ecf\u8fc7\u9884\u8bad\u7ec3\u7684\u795e\u7ecf\u7f51\u7edc\u3002\u90a3\u4e48\u662f\u4e0d\u662f\u53ef\u4ee5\u8ba4\u4e3a\uff0c\u9884\u8bad\u7ec3\u7684\u90e8\u5206\u6559\u4f1a\u4e86\u5b83\u5bf9\u8bed\u8a00\u7684\u57fa\u672c\u7406\u89e3\uff0c\u5269\u4e0b\u7684\u662f\u5199\u4f5c\u6587\uff0c\u8fd8\u662f\u9605\u8bfb\u7406\u89e3\uff0c\u53ea\u9700\u8981\u6839\u636e\u5177\u4f53\u4efb\u52a1\u8fdb\u884cfine-tuning\u5c31\u884c\u4e86\u3002\u5f53\u7136\u9884\u8bad\u7ec3\u5176\u5b9e\u6210\u672c\u5f88\u9ad8\uff0c\u4f46\u597d\u5904\u662f\u4e00\u65e6\u5b66\u4f1a\u4e86\u5c31\u5fd8\u4e0d\u6389\u4e86\u3002 BERT\u62e5\u6709\u4e00\u4e2a\u6df1\u800c\u7a84\u7684\u795e\u7ecf\u7f51\u7edc\u3002transformer\u7684\u4e2d\u95f4\u5c42\u67092048\uff0cBERT\u53ea\u67091024\uff0c\u4f46\u5374\u670912\u5c42\u3002\u56e0\u6b64\uff0c\u5b83\u53ef\u4ee5\u5728\u65e0\u9700\u5927\u5e45\u67b6\u6784\u4fee\u6539\u7684\u524d\u63d0\u4e0b\u8fdb\u884c\u53cc\u5411\u8bad\u7ec3\u3002\u7531\u4e8e\u662f\u65e0\u76d1\u7763\u5b66\u4e60\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u4eba\u5de5\u5e72\u9884\u548c\u6807\u6ce8\uff0c\u8ba9\u4f4e\u6210\u672c\u5730\u8bad\u7ec3\u8d85\u5927\u89c4\u6a21\u8bed\u6599\u6210\u4e3a\u53ef\u80fd\u3002 BERT\u6a21\u578b\u80fd\u591f\u8054\u5408\u795e\u7ecf\u7f51\u7edc\u6240\u6709\u5c42\u4e2d\u7684\u4e0a\u4e0b\u6587\u6765\u8fdb\u884c\u8bad\u7ec3\u3002\u8fd9\u6837\u8bad\u7ec3\u51fa\u6765\u7684\u6a21\u578b\u5728\u5904\u7406\u95ee\u7b54\u6216\u8bed\u8a00\u63a8\u7406\u4efb\u52a1\u65f6\uff0c\u80fd\u591f\u7ed3\u5408\u4e0a\u4e0b\u6587\u7406\u89e3\u8bed\u4e49\uff0c\u5e76\u4e14\u5b9e\u73b0\u66f4\u7cbe\u51c6\u7684\u6587\u672c\u9884\u6d4b\u751f\u6210\u3002 BERT\u53ea\u9700\u8981\u5fae\u8c03\u5c31\u53ef\u4ee5\u9002\u5e94\u5f88\u591a\u7c7b\u578b\u7684NLP\u4efb\u52a1\uff0c\u8fd9\u4f7f\u5176\u5e94\u7528\u573a\u666f\u6269\u5927\uff0c\u5e76\u4e14\u964d\u4f4e\u4e86\u4f01\u4e1a\u7684\u8bad\u7ec3\u6210\u672c\u3002BERT\u652f\u6301\u5305\u62ec\u4e2d\u6587\u5728\u5185\u768460\u79cd\u8bed\u8a00\uff0c\u7814\u7a76\u4eba\u5458\u4e5f\u4e0d\u9700\u8981\u4ece\u5934\u5f00\u59cb\u8bad\u7ec3\u81ea\u5df1\u7684\u6a21\u578b\uff0c\u53ea\u9700\u8981\u5229\u7528BERT\u9488\u5bf9\u7279\u5b9a\u4efb\u52a1\u8fdb\u884c\u4fee\u6539\uff0c\u5728\u5355\u4e2a\u4e91TPU\u4e0a\u8fd0\u884c\u51e0\u5c0f\u65f6\u751a\u81f3\u51e0\u5341\u5206\u949f\uff0c\u5c31\u80fd\u83b7\u5f97\u4e0d\u9519\u7684\u5206\u6570 BERT\u63d0\u4f9b\u4e86\u7b80\u5355\u548c\u590d\u6742\u4e24\u4e2a\u6a21\u578bBERT_base\u548cBERT_large \u7c7b\u578b \u7f51\u7edc\u5c42\u6570(Bert Model) \u9690\u5c42\u5927\u5c0f Attention\u7684\u6570\u91cf \u53c2\u6570\u603b\u5927\u5c0f BERT_base L=12 H=768 A=12 110MB BERT_large L=24 H=1024 A=16 340MB github\u5730\u5740 https://github.com/google-research/bert","title":"bert\u5230\u5e95\u662f\u4ec0\u4e48"},{"location":"deeplearning/bert.html#bert_1","text":"NLP\u9886\u57df\u5927\u6709\u4f5c\u4e3a\uff0c \u53ea\u9700\u8981\u5fae\u8c03\u5c31\u53ef\u4ee5\u9002\u5e94\u5f88\u591a\u7c7b\u578b\u7684NLP\u4efb\u52a1 \u4f7f\u7528\u4e86Transformer \u4f5c\u4e3a\u7b97\u6cd5\u7684\u4e3b\u8981\u6846\u67b6 \u5f00\u6e90","title":"Bert\u7279\u70b9"},{"location":"deeplearning/bert.html#_1","text":"matmul ^ | | Pooler Dense ^ | | |--------------------------| | Add & Norm | | ^ | | | | | Feed Forward | | ^ | BertModel | | | x12 | Add & Norm | | ^ | | | | | Multi-Head Attention | |--------------------------- ^ | | Layer Normal ^ | | Position Embedding ----------> add <---------- Segment Embedding ^ | | Input Embedding Bert\u83b7\u53d6\u524d\u7aef\u8f93\u5165\u7684\u5d4c\u5165\u7279\u5f81\uff0c\u7136\u540e\u901a\u8fc7Bert Model\u5bf9\u7279\u5f81\u8fdb\u884c\u5904\u7406\uff0cBert Model \u548c Transformer model \u5f88\u76f8\u4f3c\uff0c \u6700\u540e\u8981\u901a\u8fc7\u7279\u6b8a\u5904\u7406\u83b7\u5f97\u60f3\u8981\u7684\u7ed3\u679c\uff0c\u9488\u5bf9\u4e0d\u540c\u7684\u7ec6\u5206\u5e94\u7528\uff0c\u540e\u7eed\u7684\u5904\u7406\u4f1a\u6709\u4e0d\u540c\u3002","title":"\u6a21\u578b"},{"location":"deeplearning/bert.html#forward","text":"(\u6a21\u578b\u8f93\u5165\uff0c\u4ee5MRPC\u4e3a\u4f8b\uff0c\u4e24\u53e5\u8bdd\uff0c\u5224\u5b9a\u76f8\u5173\u6027) as input note left PCCW 's chief operating officer , Mike Butcher , and Alex Arena , the chief financial officer , will report directly to Mr So . Current Chief Operating Officer Mike Butcher and Group Chief Financial Officer Alex Arena will report to So . endnote (FullTokenizer \\n\\n\\ \u7b2c\u4e00\u6b65\u901a\u8fc7load_vocab\u52a0\u8f7d\u8bcd\u5178\\n\\ \u7b2c\u4e8c\u6b65BasicTokenizer\u53bb\u9664\u7a7a\u683c\u7b49\u65e0\u610f\u4e49\u5b57\u7b26\uff0c\u8fdb\u884c\u7c97\u7c92\u5ea6\u5206\u8bcd\\n\\ \u7b2c\u4e09\u6b65WordpieceTokenizer\u6839\u636e\u8bcd\u5178\u4f7f\u7528\u8d2a\u5a6a\u7b97\u6cd5\u8fdb\u884c\u7ec6\u7c92\u5ea6\u5206\u8bcd) as tk (\u7ec6\u7c92\u5ea6\u5206\u8bcd\u7ed3\u679c) as tokened input --> tk tk --> tokened note left [CLS] pc ##c ##w ' s chief operating officer , mike butcher , and alex arena , the chief financial officer , will report directly to mr so . [SEP] current chief operating officer mike butcher and group chief financial officer alex arena will report to so . [SEP] endnote (\u67e5\u627e\u5b57\u5178\uff0c\u83b7\u53d6\u5b57\u7b26\u7f16\u7801,\u6807\u8bb0\u4e3ainput_ids) as InputIds (\u628a\u7b2c\u4e00\u53e5\u6240\u6709\u5b57\u7b26\u6807\u8bb0\u4e3a0\uff0c\\n\\ \u7b2c\u4e8c\u53e5\u6240\u6709\u5b57\u7b26\u6807\u8bb0\u4e3a1\uff0c\u7ec4\u6210segment_ids) as SegmentIds (\u5f3a\u5236\u7f16\u7801\u53e5\u5b50\u4e2d\u6bcf\u4e2a\u8bcd\u7684\u4f4d\u7f6e\uff0c\u7ec4\u6210position) as position (\u6839\u636e\u53e5\u5b50\u6700\u5927\u7f16\u7801\u957f\u5ea6\uff0c\u6709\u6548\u5b57\u7b26\u6807\u8bb0\u4e3a1\uff0c\\n\\ \u672a\u4f7f\u7528\u7684\u6807\u8bb0\u4e3a0\uff0c\u7ec4\u6210input_mask) as InputMask tokened --> InputIds tokened --> InputMask tokened --> SegmentIds tokened --> position (Input Embedding\\n\\ \u67e5\u8868) as ie (Position Embedding) as pe (Segment Embeddin\\n\\ one-hot) as se InputIds --> ie position --> pe SegmentIds --> se ie --> (add) pe --> (add) se --> (add) BERT\u4e0d\u76f4\u63a5\u5904\u7406\u5355\u8bcd\uff0c\u800c\u662f\u628aWordPieces\u4f5c\u4e3atoken\u3002 BERT\u7684\u8f93\u5165\u7684\u7f16\u7801\u5411\u91cf\u662f3\u4e2a\u5d4c\u5165\u7279\u5f81\u7684\u5355\u4f4d\u548c\uff0c\u8fd9\u4e09\u4e2a\u8bcd\u5d4c\u5165\u7279\u5f81\u662f\uff1a WordPiece \u5d4c\u5165\uff1a\u67e5\u627eWordPiece\u5d4c\u5165\u7684token\u8bcd\u6c47\u8868\u3002\u7528##\u8868\u793a\u5206\u8bcd\u3002 WordPiece\u662f\u6307\u5c06\u5355\u8bcd\u5212\u5206\u6210\u4e00\u7ec4\u6709\u9650\u7684\u516c\u5171\u5b50\u8bcd\u5355\u5143\uff0c\u80fd\u5728\u5355\u8bcd\u7684\u6709\u6548\u6027\u548c\u5b57\u7b26\u7684\u7075\u6d3b\u6027\u4e4b\u95f4\u53d6\u5f97\u4e00\u4e2a\u6298\u4e2d\u7684\u5e73\u8861\u3002\u5982\u5c06\u2018playing\u2019\u88ab\u62c6\u5206\u6210\u4e86\u2018play\u2019\u548c\u2018ing\u2019\u3002\u5728\u53e5\u5b50\u5f00\u5934\u548c\u7ed3\u5c3e\u8fd8\u4f1a\u63d2\u5165\u4e24\u4e2a\u7279\u6b8a\u7b26\u53f7[CLS]\u548c[SEP]\uff0c\u5176\u4e2d[CLS]\u8868\u793a\u8be5\u7279\u5f81\u7528\u4e8e\u5206\u7c7b\u6a21\u578b\uff0c\u6bcf\u4e2a\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2atoken\u59cb\u7ec8\u662f\u7279\u6b8a\u5206\u7c7b\u5d4c\u5165\uff08[CLS]\uff09\u3002\u5bf9\u5e94\u4e8e\u8be5token\u7684\u6700\u7ec8\u9690\u85cf\u72b6\u6001\uff08\u5373\uff0cTransformer\u7684\u8f93\u51fa\uff09\u88ab\u7528\u4f5c\u5206\u7c7b\u4efb\u52a1\u7684\u805a\u5408\u5e8f\u5217\u8868\u793a\u3002\u5bf9\u4e8e\u975e\u5206\u7c7b\u4efb\u52a1\uff0c\u5c06\u5ffd\u7565\u6b64\u5411\u91cf\u3002[SEP]\u8868\u793a\u5206\u53e5\u7b26\u53f7\uff0c\u7528\u4e8e\u65ad\u5f00\u8f93\u5165\u8bed\u6599\u4e2d\u7684\u4e24\u4e2a\u53e5\u5b50 \u4f4d\u7f6e\u5d4c\u5165\uff08Position Embedding\uff09\uff1a\u4f4d\u7f6e\u5d4c\u5165\u662f\u6307\u5c06\u5355\u8bcd\u7684\u4f4d\u7f6e\u4fe1\u606f\u7f16\u7801\u6210\u7279\u5f81\u5411\u91cf\uff0c\u4f4d\u7f6e\u5d4c\u5165\u662f\u5411\u6a21\u578b\u4e2d\u5f15\u5165\u5355\u8bcd\u4f4d\u7f6e\u5173\u7cfb\u7684\u81f3\u5173\u91cd\u8981\u7684\u4e00\u73af \u5206\u5272\u5d4c\u5165\uff08Segment Embedding\uff09\uff1a\u7528\u4e8e\u533a\u5206\u4e24\u4e2a\u53e5\u5b50\uff0c\u4f8b\u5982B\u662f\u5426\u662fA\u7684\u4e0b\u6587\uff08\u5bf9\u8bdd\u573a\u666f\uff0c\u95ee\u7b54\u573a\u666f\u7b49\uff09\u3002\u5bf9\u4e8e\u53e5\u5b50\u5bf9\uff0c\u7b2c\u4e00\u4e2a\u53e5\u5b50\u7684\u7279\u5f81\u503c\u662f0\uff0c\u7b2c\u4e8c\u4e2a\u53e5\u5b50\u7684\u7279\u5f81\u503c\u662f1 mask\u5d4c\u5165\u7279\u5f81\u4f1a\u5728bert Model\u4e2d\u4f7f\u7528\uff0c\u8fd9\u548ctransformer\u4e00\u6837","title":"forward"},{"location":"deeplearning/bert.html#_2","text":"Bert\u7684\u8bad\u7ec3\u4efb\u52a1\u53ef\u4ee5\u5206\u4e3aPretraining\u4efb\u52a1\u548cFine-Tuning\u3002Pretraining\u4efb\u52a1\u5b9e\u73b0\u4e86\u4e00\u4e2a\u57fa\u7840\u7684Bert\uff0c\u5728\u9700\u8981\u8fdb\u884c\u5177\u4f53\u7684\u4efb\u52a1\u65f6\uff0c\u8fd8\u9700\u8981\u8fdb\u884cFine-Tuning","title":"\u8bad\u7ec3\u4efb\u52a1"},{"location":"deeplearning/bert.html#pretraining","text":"BERT\u662f\u4e00\u4e2a\u591a\u4efb\u52a1\u6a21\u578b\uff0c\u5b83\u7684\u4efb\u52a1\u662f\u7531\u4e24\u4e2a\u81ea\u76d1\u7763\u4efb\u52a1\u7ec4\u6210\uff0c\u5373MLM(Masked Language Model)\u548cNSP(Next Sentence Prediction)","title":"Pretraining\u4efb\u52a1"},{"location":"deeplearning/bert.html#mlm","text":"\u6240\u8c13MLM\u662f\u6307\u5728\u8bad\u7ec3\u7684\u65f6\u5019\u968f\u5373\u4ece\u8f93\u5165\u9884\u6599\u4e0amask\u6389\u4e00\u4e9b\u5355\u8bcd\uff0c\u7136\u540e\u901a\u8fc7\u7684\u4e0a\u4e0b\u6587\u9884\u6d4b\u8be5\u5355\u8bcd\u3002\u5728BERT\u7684\u5b9e\u9a8c\u4e2d\uff0c15%\u7684WordPiece Token\u4f1a\u88ab\u968f\u673aMask\u6389\u3002\u5728\u8bad\u7ec3\u6a21\u578b\u65f6\uff0c\u4e00\u4e2a\u53e5\u5b50\u4f1a\u88ab\u591a\u6b21\u5582\u5230\u6a21\u578b\u4e2d\u7528\u4e8e\u53c2\u6570\u5b66\u4e60\uff0c\u4f46\u662fGoogle\u5e76\u6ca1\u6709\u5728\u6bcf\u6b21\u90fdmask\u6389\u8fd9\u4e9b\u5355\u8bcd\uff0c\u800c\u662f\u5728\u786e\u5b9a\u8981Mask\u6389\u7684\u5355\u8bcd\u4e4b\u540e 80%\u65f6\u95f4\uff1amy dog is hairy -> my dog is [mask] 10%\u65f6\u95f4\uff1amy dog is hairy -> my dog is apple 10%\u65f6\u95f4\uff1amy dog is hairy -> my dog is hairy","title":"MLM"},{"location":"deeplearning/bert.html#msp","text":"Next Sentence Prediction\uff08NSP\uff09\u7684\u4efb\u52a1\u662f\u5224\u65ad\u53e5\u5b50B\u662f\u5426\u662f\u53e5\u5b50A\u7684\u4e0b\u6587\u3002\u5982\u679c\u662f\u7684\u8bdd\u8f93\u51fa\u201cIsNext\u201d\uff0c\u5426\u5219\u8f93\u51fa\u201cNotNext\u201d\u3002\u8bad\u7ec3\u6570\u636e\u7684\u751f\u6210\u65b9\u5f0f\u662f\u4ece\u5e73\u884c\u8bed\u6599\u4e2d\u968f\u673a\u62bd\u53d6\u7684\u8fde\u7eed\u4e24\u53e5\u8bdd\uff0c\u5176\u4e2d50%\u4fdd\u7559\u62bd\u53d6\u7684\u4e24\u53e5\u8bdd\uff0c\u5b83\u4eec\u7b26\u5408IsNext\u5173\u7cfb\uff0c\u53e6\u591650%\u7684\u7b2c\u4e8c\u53e5\u8bdd\u662f\u968f\u673a\u4ece\u9884\u6599\u4e2d\u63d0\u53d6\u7684\uff0c\u5b83\u4eec\u7684\u5173\u7cfb\u662fNotNext\u7684\u3002\u8fd9\u4e2a\u5173\u7cfb\u4fdd\u5b58\u5728[CLS]\u7b26\u53f7\u4e2d","title":"MSP"},{"location":"deeplearning/bert.html#fine-tuning","text":"\u5728\u6d77\u91cf\u5355\u9884\u6599\u4e0a\u8bad\u7ec3\u5b8cBERT\u4e4b\u540e\uff0c\u4fbf\u53ef\u4ee5\u5c06\u5176\u5e94\u7528\u5230NLP\u7684\u5404\u4e2a\u4efb\u52a1\u4e2d\u4e86.\u5bf9\u4e8e\u5176\u5b83\u4efb\u52a1\u6765\u8bf4\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u6839\u636eBERT\u7684\u8f93\u51fa\u4fe1\u606f\u4f5c\u51fa\u5bf9\u5e94\u7684\u9884\u6d4b,\u5b83\u4eec\u53ea\u9700\u8981\u5728BERT\u7684\u57fa\u7840\u4e0a\u518d\u6dfb\u52a0\u4e00\u4e2a\u8f93\u51fa\u5c42\u4fbf\u53ef\u4ee5\u5b8c\u6210\u5bf9\u7279\u5b9a\u4efb\u52a1\u7684\u5fae\u8c03 \u5fae\u8c03\u7684\u4efb\u52a1\u5305\u62ec \u57fa\u4e8e\u53e5\u5b50\u5bf9\u7684\u5206\u7c7b\u4efb\u52a1 \u57fa\u4e8e\u5355\u4e2a\u53e5\u5b50\u7684\u5206\u7c7b\u4efb\u52a1 \u95ee\u7b54\u4efb\u52a1 \u547d\u540d\u5b9e\u4f53\u8bc6\u522b","title":"Fine-Tuning"},{"location":"deeplearning/bert.html#_3","text":"","title":"\u57fa\u4e8e\u53e5\u5b50\u5bf9\u7684\u5206\u7c7b\u4efb\u52a1"},{"location":"deeplearning/bert.html#mnli","text":"\u7ed9\u5b9a\u4e00\u4e2a\u524d\u63d0 (Premise) \uff0c\u6839\u636e\u8fd9\u4e2a\u524d\u63d0\u53bb\u63a8\u65ad\u5047\u8bbe (Hypothesis) \u4e0e\u524d\u63d0\u7684\u5173\u7cfb\u3002\u8be5\u4efb\u52a1\u7684\u5173\u7cfb\u5206\u4e3a\u4e09\u79cd\uff0c\u8574\u542b\u5173\u7cfb (Entailment)\u3001\u77db\u76fe\u5173\u7cfb (Contradiction) \u4ee5\u53ca\u4e2d\u7acb\u5173\u7cfb (Neutral)\u3002\u6240\u4ee5\u8fd9\u4e2a\u95ee\u9898\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u5206\u7c7b\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u505a\u7684\u662f\u53bb\u53d1\u6398\u524d\u63d0\u548c\u5047\u8bbe\u8fd9\u4e24\u4e2a\u53e5\u5b50\u5bf9\u4e4b\u95f4\u7684\u4ea4\u4e92\u4fe1\u606f","title":"MNLI"},{"location":"deeplearning/bert.html#qqp","text":"\u57fa\u4e8eQuora\uff0c\u5224\u65ad Quora \u4e0a\u7684\u4e24\u4e2a\u95ee\u9898\u53e5\u662f\u5426\u8868\u793a\u7684\u662f\u4e00\u6837\u7684\u610f\u601d\u3002QNLI\uff1a\u7528\u4e8e\u5224\u65ad\u6587\u672c\u662f\u5426\u5305\u542b\u95ee\u9898\u7684\u7b54\u6848\uff0c\u7c7b\u4f3c\u4e8e\u6211\u4eec\u505a\u9605\u8bfb\u7406\u89e3\u5b9a\u4f4d\u95ee\u9898\u6240\u5728\u7684\u6bb5\u843d\u3002","title":"QQP"},{"location":"deeplearning/bert.html#sts-b","text":"\u9884\u6d4b\u4e24\u4e2a\u53e5\u5b50\u7684\u76f8\u4f3c\u6027\uff0c\u5305\u62ec5\u4e2a\u7ea7\u522b\u3002","title":"STS-B"},{"location":"deeplearning/bert.html#mrpc","text":"\u4e5f\u662f\u5224\u65ad\u4e24\u4e2a\u53e5\u5b50\u662f\u5426\u662f\u7b49\u4ef7\u7684\u3002","title":"MRPC"},{"location":"deeplearning/bert.html#rte","text":"\u7c7b\u4f3c\u4e8eMNLI\uff0c\u4f46\u662f\u53ea\u662f\u5bf9\u8574\u542b\u5173\u7cfb\u7684\u4e8c\u5206\u7c7b\u5224\u65ad\uff0c\u800c\u4e14\u6570\u636e\u96c6\u66f4\u5c0f\u3002","title":"RTE"},{"location":"deeplearning/bert.html#swag","text":"\u4ece\u56db\u4e2a\u53e5\u5b50\u4e2d\u9009\u62e9\u4e3a\u53ef\u80fd\u4e3a\u524d\u53e5\u4e0b\u6587\u7684\u90a3\u4e2a\u3002","title":"SWAG"},{"location":"deeplearning/bert.html#_4","text":"","title":"\u57fa\u4e8e\u5355\u4e2a\u53e5\u5b50\u7684\u5206\u7c7b\u4efb\u52a1"},{"location":"deeplearning/bert.html#sst-2","text":"\u7535\u5f71\u8bc4\u4ef7\u7684\u60c5\u611f\u5206\u6790\u3002","title":"SST-2"},{"location":"deeplearning/bert.html#cola","text":"\u53e5\u5b50\u8bed\u4e49\u5224\u65ad\uff0c\u662f\u5426\u662f\u53ef\u63a5\u53d7\u7684\uff08Acceptable\uff09\u3002","title":"CoLA"},{"location":"deeplearning/bert.html#_5","text":"","title":"\u95ee\u7b54\u4efb\u52a1"},{"location":"deeplearning/bert.html#squad-v11","text":"\u7ed9\u5b9a\u4e00\u4e2a\u53e5\u5b50\uff08\u901a\u5e38\u662f\u4e00\u4e2a\u95ee\u9898\uff09\u548c\u4e00\u6bb5\u63cf\u8ff0\u6587\u672c\uff0c\u8f93\u51fa\u8fd9\u4e2a\u95ee\u9898\u7684\u7b54\u6848\uff0c\u7c7b\u4f3c\u4e8e\u505a\u9605\u8bfb\u7406\u89e3\u7684\u7b80\u7b54\u9898\u3002\u5982\u56fe \u00a9\u8868\u793a\u7684\uff0cSQuAD\u7684\u8f93\u5165\u662f\u95ee\u9898\u548c\u63cf\u8ff0\u6587\u672c\u7684\u53e5\u5b50\u5bf9\u3002\u8f93\u51fa\u662f\u7279\u5f81\u5411\u91cf\uff0c\u901a\u8fc7\u5728\u63cf\u8ff0\u6587\u672c\u4e0a\u63a5\u4e00\u5c42\u6fc0\u6d3b\u51fd\u6570\u4e3asoftmax\u7684\u5168\u8fde\u63a5\u6765\u83b7\u5f97\u8f93\u51fa\u6587\u672c\u7684\u6761\u4ef6\u6982\u7387\uff0c\u5168\u8fde\u63a5\u7684\u8f93\u51fa\u8282\u70b9\u4e2a\u6570\u662f\u8bed\u6599\u4e2dToken\u7684\u4e2a\u6570","title":"SQuAD v1.1"},{"location":"deeplearning/bert.html#_6","text":"","title":"\u547d\u540d\u5b9e\u4f53\u8bc6\u522b"},{"location":"deeplearning/bert.html#conll-2003-ner","text":"\u5224\u65ad\u4e00\u4e2a\u53e5\u5b50\u4e2d\u7684\u5355\u8bcd\u662f\u4e0d\u662fPerson\uff0cOrganization\uff0cLocation\uff0cMiscellaneous\u6216\u8005other\uff08\u65e0\u547d\u540d\u5b9e\u4f53\uff09\u3002\u5fae\u8c03CoNLL-2003 NER\u65f6\u5c06\u6574\u4e2a\u53e5\u5b50\u4f5c\u4e3a\u8f93\u5165\uff0c\u5728\u6bcf\u4e2a\u65f6\u95f4\u7247\u8f93\u51fa\u4e00\u4e2a\u6982\u7387\uff0c\u5e76\u901a\u8fc7softmax\u5f97\u5230\u8fd9\u4e2aToken\u7684\u5b9e\u4f53\u7c7b\u522b\u3002","title":"CoNLL-2003 NER"},{"location":"deeplearning/deeplearning.html","text":"deeplearning \u00b6 deeplearning FP16 \u5377\u79ef \u6570\u636e\u5f52\u4e00\u5316 \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 LLVM \u4ec0\u4e48\u662fLLVM JIT\u7f16\u8bd1\u5668\u548c\u89e3\u91ca\u5668 \u4f20\u7edf\u9759\u6001\u7f16\u8bd1\u5668 \u8ba1\u7b97\u56fe \u56fe\u4f18\u5316 tensor\u4f18\u5316 \u6df1\u5ea6\u5b66\u4e60(\u795e\u7ecf\u7f51\u7edc)\u7f16\u8bd1\u5668 XLA LSTM FP16 \u00b6 \u4e00\u4e2afp16\u6570\u636e\u5360\u636e\u4e24\u4e2a\u5b57\u8282\uff0c1\u4f4d\u7b26\u53f7\u4f4d\uff0c5\u4f4d\u6307\u6570\u4f4d\uff0c10\u4f4d\u6709\u6548\u7cbe\u5ea6 \u7b26\u53f7\u4f4d 0\uff1a\u6b63\u6570 1\uff1a\u8d1f\u6570 \u6307\u6570\u4f4d\uff1a\u4e0e15\u7684\u504f\u5dee max_e=11110-01111=15 min_e=00001-01111=-14 00000\u548c11111\u6709\u5176\u4ed6\u610f\u4e49 \u6570\u503c\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a {(-1)}^{signbit}\\times2^{e-15}\\times(1+\\sum_{i=1}^{10}(b_{10-i}\\times2^{-i})) {(-1)}^{signbit}\\times2^{e-15}\\times(1+\\sum_{i=1}^{10}(b_{10-i}\\times2^{-i})) \u6700\u5927\u503c\uff1a 0 11110 1111111111={(-1)}^0\\times2^{30-15}\\times(1+1-2^{-10})=65504 0 11110 1111111111={(-1)}^0\\times2^{30-15}\\times(1+1-2^{-10})=65504 \u6700\u5c0f\u503c\uff1a 0 00001 0000000000=2^{(-14)}=6.10 \\times10^{(-5)} 0 00001 0000000000=2^{(-14)}=6.10 \\times10^{(-5)} \u5377\u79ef \u00b6 \u5b9e\u9645\u4e0a\u662f\u5bf9\u5e94\u6570\u636e\u76f8\u4e58\u7136\u540e\u6c42\u548c\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u52a0\u6743\u6c42\u548c \u6570\u636e\u5f52\u4e00\u5316 \u00b6 \u5f52\u4e00\u5316\uff08\u6807\u51c6\u5316\uff09\u53ef\u4ee5\u5b9a\u4e49\u4e3a\uff1a\u628a\u4f60\u9700\u8981\u5904\u7406\u7684\u6570\u636e\u7ecf\u8fc7\u5904\u7406\u540e\uff08\u901a\u8fc7\u67d0\u79cd\u7b97\u6cd5\uff09\u9650\u5236\u5728\u4f60\u9700\u8981\u7684\u4e00\u5b9a\u8303\u56f4\u5185\u3002 \u9996\u5148\u5f52\u4e00\u5316\u662f\u4e3a\u4e86\u540e\u9762\u6570\u636e\u5904\u7406\u7684\u65b9\u4fbf\uff0c\u5176\u6b21\u662f\u4fdd\u8bc1\u6a21\u578b\u8fd0\u884c\u65f6\u6536\u655b\u52a0\u5feb\uff0c\u5f52\u4e00\u5316\u5e76\u4e0d\u662f\u7ea6\u675f\u52300~1\u4e4b\u95f4 \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 \u00b6 \u6846\u67b6 \u524d\u7aef \u540e\u7aef \u786c\u4ef6 tensorflow XLA LLVM GPU / ARM / X86 tensorflow/Caffe2/PyTorch/MXNet Poplar POPLAR GRAPH COMPILER IPU tensorflow/ONNX/CoreML TVM(NNVM) cuda/LLVM/Metal/OpenCL tensorflow/MxNet/ONNX NGraph IA Transformer/NNP LLVM \u00b6 \u4ec0\u4e48\u662fLLVM \u00b6 \u53c2\u8003\u81ea LLVM\u5b98\u7f51 The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. Despite its name, LLVM has little to do with traditional virtual machines. The name \"LLVM\" itself is not an acronym; it is the full name of the project. LLVM\u662f\u4e00\u79cd\u6a21\u5757\u5316\u548c\u53ef\u91cd\u7528\u7684\u7f16\u8bd1\u5668\u548c\u5de5\u5177\u94fe\u6280\u672f\u3002LLVM\u7684\u540d\u5b57\u5176\u5b9e\u548clow level virtual machines\u6ca1\u6709\u4e00\u6bdb\u94b1\u7684\u5173\u7cfb\uff0c\u5b83\u53ea\u662f\u4e00\u4e2a\u9879\u76ee\u540d\u79f0\u800c\u5df2(\u8001\u5916\u771f\u4efb\u6027\uff0c\u8d77\u4e2a\u540d\u5b57\u4e5f\u4e0d\u544a\u8bc9\u6211\u4eec\u4e3a\u5565) LLVM provides some unique capabilities, and is known for some of its great tools (e.g., the Clang compiler 2 , a C/C++/Objective-C compiler which provides a number of benefits over the GCC compiler), the main thing that sets LLVM apart from other compilers is its internal architecture. LLVM\u6709\u5f88\u591a\u7279\u6027\uff0c\u5b83\u7684\u5185\u90e8\u67b6\u6784\u4f7f\u5b83\u4e0e\u4f17\u4e0d\u540c Beyond the composition of the compiler itself, the communities surrounding popular language implementations were usually strongly polarized: an implementation usually provided either a traditional static compiler like GCC, Free Pascal, and FreeBASIC, or it provided a runtime compiler in the form of an interpreter or Just-In-Time (JIT) compiler. It was very uncommon to see language implementation that supported both, and if they did, there was usually very little sharing of code. \u5173\u4e8e\u4e3b\u6d41\u8bed\u8a00\u7684\u5b9e\u73b0\u7684\u8ba8\u8bba\u901a\u5e38\u6bd4\u8f83\u5206\u5316\uff0c\u4e00\u4e2a\u8bed\u8a00\u7684\u5b9e\u73b0\u8981\u4e48\u63d0\u4f9b\u4e00\u4e2a\u50cfGCC,FreePascal,FreeBASIC\u4e00\u6837\u7684static compiler(\u9759\u6001\u7f16\u8bd1\u5668,\u5b8c\u5168\u7f16\u8bd1\u5b8c\u6210\u4e4b\u540e\u518d\u53bb\u6267\u884c)\uff0c\u8981\u4e48\u4ee5\u89e3\u91ca\u5668\u6216\u8005JIT(Just-In-Time)\u7f16\u8bd1\u5668\u7684\u5f62\u5f0f\u63d0\u4f9b\u4e00\u4e2aruntime compiler(\u8fd0\u884c\u65f6\u7f16\u8bd1\u5668)\u3002\u5f88\u5c11\u80fd\u770b\u5230\u4e00\u79cd\u8fd9\u4e24\u8005\u90fd\u652f\u6301\u7684\u8bed\u8a00\u5b9e\u73b0\uff0c\u5373\u4f7f\u6709\uff0c\u4ed6\u4eec\u901a\u5e38\u4e5f\u53ea\u6709\u975e\u5e38\u5c11\u7684\u4ee3\u7801\u590d\u7528 Finally LLVM has also been used to create a broad variety of new products, perhaps the best known of which is the OpenCL GPU programming language and runtime. \u53ef\u4ee5\u53c2\u8003\uff0c\u4eba\u5de5\u667a\u80fd\u82af\u7247\u7684\u7f16\u8bd1\u5668\u5b8c\u5168\u53ef\u4ee5\u501f\u52a9LLVM JIT\u7f16\u8bd1\u5668\u548c\u89e3\u91ca\u5668 \u00b6 JIT\u7f16\u8bd1\u5668\u548c\u89e3\u91ca\u5668\u8fd8\u662f\u6709\u533a\u522b\u7684\uff0cJIT\u662f\u5373\u65f6\u7f16\u8bd1\uff0c\u5b9e\u8d28\u662f\u8fd8\u662f\u7f16\u8bd1\uff0c\u90a3\u4e48\u6d41\u7a0b\u4e0a\u4ecd\u7136\u662f \u4e2d\u95f4\u4ee3\u7801 -> [ \u7f16\u8bd1 ] -> \u53ef\u6267\u884c\u4e8c\u8fdb\u5236 -> [ \u6267\u884c ] -> \u7ed3\u679c \u4f46\u662f\u89e3\u91ca\u6267\u884c\u6d41\u7a0b\u4e0a\u662f \u4e2d\u95f4\u4ee3\u7801 -> [ \u89e3\u91ca ] -> \u7ed3\u679c \u8bf4JIT\u6bd4\u89e3\u91ca\u5feb\uff0c\u5176\u5b9e\u8bf4\u7684\u662f\u201c\u6267\u884c\u7f16\u8bd1\u540e\u7684\u4ee3\u7801\u201d\u6bd4\u201c\u89e3\u91ca\u5668\u89e3\u91ca\u6267\u884c\u201d\u8981\u5feb\uff0c\u5e76\u4e0d\u662f\u8bf4\u201c\u7f16\u8bd1\u201d\u8fd9\u4e2a\u52a8\u4f5c\u6bd4\u201c\u89e3\u91ca\u201d\u8fd9\u4e2a\u52a8\u4f5c\u5feb\u3002\u7136\u800c\u8fd9JIT\u7f16\u8bd1\u518d\u600e\u4e48\u5feb\uff0c\u81f3\u5c11\u4e5f\u6bd4\u89e3\u91ca\u6267\u884c\u4e00\u6b21\u7565\u6162\u4e00\u4e9b\uff0c\u800c\u8981\u5f97\u5230\u6700\u540e\u7684\u6267\u884c\u7ed3\u679c\u8fd8\u5f97\u518d\u7ecf\u8fc7\u4e00\u4e2a\u201c\u6267\u884c\u7f16\u8bd1\u540e\u7684\u4ee3\u7801\u201d\u7684\u8fc7\u7a0b\u3002\u6240\u4ee5\uff0c\u5bf9\u201c\u53ea\u6267\u884c\u4e00\u6b21\u201d\u7684\u4ee3\u7801\u800c\u8a00\uff0c\u89e3\u91ca\u6267\u884c\u5176\u5b9e\u603b\u662f\u6bd4JIT\u7f16\u8bd1\u6267\u884c\u8981\u5feb\u3002\u600e\u4e48\u7b97\u662f\u201c\u53ea\u6267\u884c\u4e00\u6b21\u7684\u4ee3\u7801\u201d\u5462\uff1f\u7c97\u7565\u8bf4\uff0c\u4e0b\u9762\u4e24\u4e2a\u6761\u4ef6\u540c\u65f6\u6ee1\u8db3\u65f6\u5c31\u662f\u4e25\u683c\u7684\u201c\u53ea\u6267\u884c\u4e00\u6b21\u201d\u53ea\u88ab\u8c03\u7528\u4e00\u6b21\uff0c\u4f8b\u5982\u7c7b\u7684\u521d\u59cb\u5316\u5668\uff08class initializer\uff0c< clinit >()V\uff09\u6ca1\u6709\u5faa\u73af\u5bf9\u53ea\u6267\u884c\u4e00\u6b21\u7684\u4ee3\u7801\u505aJIT\u7f16\u8bd1\u518d\u6267\u884c\uff0c\u53ef\u4ee5\u8bf4\u662f\u5f97\u4e0d\u507f\u5931\u3002\u5bf9\u53ea\u6267\u884c\u5c11\u91cf\u6b21\u6570\u7684\u4ee3\u7801\uff0cJIT\u7f16\u8bd1\u5e26\u6765\u7684\u6267\u884c\u901f\u5ea6\u7684\u63d0\u5347\u4e5f\u672a\u5fc5\u80fd\u62b5\u6d88\u6389\u6700\u521d\u7f16\u8bd1\u5e26\u6765\u7684\u5f00\u9500\u3002\u53ea\u6709\u5bf9\u9891\u7e41\u6267\u884c\u7684\u4ee3\u7801\uff0cJIT\u7f16\u8bd1\u624d\u80fd\u4fdd\u8bc1\u6709\u6b63\u9762\u7684\u6536\u76ca\u3002 \u4f5c\u8005\uff1aRednaxelaFX \u94fe\u63a5\uff1a https://www.zhihu.com/question/37389356/answer/73820511 \u6765\u6e90\uff1a\u77e5\u4e4e \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u4f20\u7edf\u9759\u6001\u7f16\u8bd1\u5668 \u00b6 \u8ba1\u7b97\u56fe \u00b6 \u8ba1\u7b97\u56fe \u56fe\u4f18\u5316 \u00b6 tvm\u7684\u7b97\u5b50\u4f18\u5316\u5305\u62ecoperator fusion, pruning, layout transformation, and memory management\uff0c\u8fd9\u4e2a\u4e00\u4e2a\u9ad8\u5c42\u6b21\u7684\u4f18\u5316\uff0c\u4e0e\u540e\u7aef\u6ca1\u6709\u5173\u7cfb\uff0c\u5bf9\u4e8eoperator fusion\u5f88\u597d\u7406\u89e3\uff0c\u4e00\u4e9b\u53ef\u4ee5\u5408\u5e76\u7684\u64cd\u4f5c\u53ef\u4ee5\u63d0\u524d\u5408\u5e76\uff0c\u4f46\u662f\u6240\u8c13\u7684layout transformation\u548cmemory management\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u5728tvm\u4e2d\uff0crelay\u6765\u505a\u56fe\u4f18\u5316 tensor\u4f18\u5316 \u00b6 \u5bf9\u4e8etensor\u4f18\u5316\uff0ctensor\u5373\u5f20\u91cf\uff0c\u662f\u5404\u4e2a\u7b97\u5b50\u6240\u8981\u64cd\u4f5c\u7684\u77e9\u9635\uff0c\u57fa\u4e8etensor\u7684\u4f18\u5316\u4e5f\u5c31\u662f\u8bf4\u77e9\u9635\u8fd0\u7b97\u7684\u4f18\u5316\u3002\u4e3e\u4e2a\u4f8b\u5b50\u77e9\u9635\u52a0\u6cd5\uff0c\u5982\u679c\u5728x86\u4e0a\u90a3\u4e48\u5145\u5206\u5229\u7528cache\u4f1a\u6709\u5f88\u5927\u7684\u6548\u7387\u63d0\u5347\uff0c\u5982\u679c\u5728AI\u82af\u7247\u4e0a\uff0c\u90a3\u4e48\u5f88\u6709\u53ef\u80fd\u652f\u6301\u77e9\u9635\u52a0\u6cd5\u7684\u64cd\u4f5c\uff0c\u53ef\u4ee5\u76f4\u63a5\u8f6c\u6362\u4e3a\u82af\u7247\u7684\u77e9\u9635\u52a0\u6cd5\u64cd\u4f5c,\u5728TVM\u4e2dtvm\u6765\u505atensor\u7684\u4f18\u5316 \u6df1\u5ea6\u5b66\u4e60(\u795e\u7ecf\u7f51\u7edc)\u7f16\u8bd1\u5668 \u00b6 \u7c7b\u4f3c\u4e8e\u4ee3\u7801\u7f16\u8bd1\u5668\uff0c\u6211\u4eec\u9700\u8981\u4e00\u5957\u8f6f\u4ef6\u6808\u6765\u8854\u63a5\u524d\u7aef(Frontend)\u5404\u79cd\u4e0d\u540c\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff08tensorflow,Caffe,MXNet...\uff09,\u7136\u540e\u6620\u5c04\u5230\u540e\u7aef\u5404\u79cd\u4e0d\u540c\u7684\u8ba1\u7b97\u786c\u4ef6\u5e73\u53f0\u4e0a,\u5e76\u5728\u6b64\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u5404\u79cd\u4e0d\u540c\u5c42\u9762\u7684\u4f18\u5316\u63aa\u65bd\u3002\u8fd9\u5c31\u662f\u795e\u7ecf\u7f51\u7edc\u7f16\u8bd1\u5668\u6216\u8005\u5de5\u5177\u94fe\u6240\u8981\u89e3\u51b3\u7684\u95ee\u9898 XLA \u00b6 XLA LSTM \u00b6 \u53c2\u8003 LSTM\u8be6\u89e3","title":"deeplearning"},{"location":"deeplearning/deeplearning.html#deeplearning","text":"deeplearning FP16 \u5377\u79ef \u6570\u636e\u5f52\u4e00\u5316 \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 LLVM \u4ec0\u4e48\u662fLLVM JIT\u7f16\u8bd1\u5668\u548c\u89e3\u91ca\u5668 \u4f20\u7edf\u9759\u6001\u7f16\u8bd1\u5668 \u8ba1\u7b97\u56fe \u56fe\u4f18\u5316 tensor\u4f18\u5316 \u6df1\u5ea6\u5b66\u4e60(\u795e\u7ecf\u7f51\u7edc)\u7f16\u8bd1\u5668 XLA LSTM","title":"deeplearning"},{"location":"deeplearning/deeplearning.html#fp16","text":"\u4e00\u4e2afp16\u6570\u636e\u5360\u636e\u4e24\u4e2a\u5b57\u8282\uff0c1\u4f4d\u7b26\u53f7\u4f4d\uff0c5\u4f4d\u6307\u6570\u4f4d\uff0c10\u4f4d\u6709\u6548\u7cbe\u5ea6 \u7b26\u53f7\u4f4d 0\uff1a\u6b63\u6570 1\uff1a\u8d1f\u6570 \u6307\u6570\u4f4d\uff1a\u4e0e15\u7684\u504f\u5dee max_e=11110-01111=15 min_e=00001-01111=-14 00000\u548c11111\u6709\u5176\u4ed6\u610f\u4e49 \u6570\u503c\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a {(-1)}^{signbit}\\times2^{e-15}\\times(1+\\sum_{i=1}^{10}(b_{10-i}\\times2^{-i})) {(-1)}^{signbit}\\times2^{e-15}\\times(1+\\sum_{i=1}^{10}(b_{10-i}\\times2^{-i})) \u6700\u5927\u503c\uff1a 0 11110 1111111111={(-1)}^0\\times2^{30-15}\\times(1+1-2^{-10})=65504 0 11110 1111111111={(-1)}^0\\times2^{30-15}\\times(1+1-2^{-10})=65504 \u6700\u5c0f\u503c\uff1a 0 00001 0000000000=2^{(-14)}=6.10 \\times10^{(-5)} 0 00001 0000000000=2^{(-14)}=6.10 \\times10^{(-5)}","title":"FP16"},{"location":"deeplearning/deeplearning.html#_1","text":"\u5b9e\u9645\u4e0a\u662f\u5bf9\u5e94\u6570\u636e\u76f8\u4e58\u7136\u540e\u6c42\u548c\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u52a0\u6743\u6c42\u548c","title":"\u5377\u79ef"},{"location":"deeplearning/deeplearning.html#_2","text":"\u5f52\u4e00\u5316\uff08\u6807\u51c6\u5316\uff09\u53ef\u4ee5\u5b9a\u4e49\u4e3a\uff1a\u628a\u4f60\u9700\u8981\u5904\u7406\u7684\u6570\u636e\u7ecf\u8fc7\u5904\u7406\u540e\uff08\u901a\u8fc7\u67d0\u79cd\u7b97\u6cd5\uff09\u9650\u5236\u5728\u4f60\u9700\u8981\u7684\u4e00\u5b9a\u8303\u56f4\u5185\u3002 \u9996\u5148\u5f52\u4e00\u5316\u662f\u4e3a\u4e86\u540e\u9762\u6570\u636e\u5904\u7406\u7684\u65b9\u4fbf\uff0c\u5176\u6b21\u662f\u4fdd\u8bc1\u6a21\u578b\u8fd0\u884c\u65f6\u6536\u655b\u52a0\u5feb\uff0c\u5f52\u4e00\u5316\u5e76\u4e0d\u662f\u7ea6\u675f\u52300~1\u4e4b\u95f4","title":"\u6570\u636e\u5f52\u4e00\u5316"},{"location":"deeplearning/deeplearning.html#_3","text":"\u6846\u67b6 \u524d\u7aef \u540e\u7aef \u786c\u4ef6 tensorflow XLA LLVM GPU / ARM / X86 tensorflow/Caffe2/PyTorch/MXNet Poplar POPLAR GRAPH COMPILER IPU tensorflow/ONNX/CoreML TVM(NNVM) cuda/LLVM/Metal/OpenCL tensorflow/MxNet/ONNX NGraph IA Transformer/NNP","title":"\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6"},{"location":"deeplearning/deeplearning.html#llvm","text":"","title":"LLVM"},{"location":"deeplearning/deeplearning.html#llvm_1","text":"\u53c2\u8003\u81ea LLVM\u5b98\u7f51 The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. Despite its name, LLVM has little to do with traditional virtual machines. The name \"LLVM\" itself is not an acronym; it is the full name of the project. LLVM\u662f\u4e00\u79cd\u6a21\u5757\u5316\u548c\u53ef\u91cd\u7528\u7684\u7f16\u8bd1\u5668\u548c\u5de5\u5177\u94fe\u6280\u672f\u3002LLVM\u7684\u540d\u5b57\u5176\u5b9e\u548clow level virtual machines\u6ca1\u6709\u4e00\u6bdb\u94b1\u7684\u5173\u7cfb\uff0c\u5b83\u53ea\u662f\u4e00\u4e2a\u9879\u76ee\u540d\u79f0\u800c\u5df2(\u8001\u5916\u771f\u4efb\u6027\uff0c\u8d77\u4e2a\u540d\u5b57\u4e5f\u4e0d\u544a\u8bc9\u6211\u4eec\u4e3a\u5565) LLVM provides some unique capabilities, and is known for some of its great tools (e.g., the Clang compiler 2 , a C/C++/Objective-C compiler which provides a number of benefits over the GCC compiler), the main thing that sets LLVM apart from other compilers is its internal architecture. LLVM\u6709\u5f88\u591a\u7279\u6027\uff0c\u5b83\u7684\u5185\u90e8\u67b6\u6784\u4f7f\u5b83\u4e0e\u4f17\u4e0d\u540c Beyond the composition of the compiler itself, the communities surrounding popular language implementations were usually strongly polarized: an implementation usually provided either a traditional static compiler like GCC, Free Pascal, and FreeBASIC, or it provided a runtime compiler in the form of an interpreter or Just-In-Time (JIT) compiler. It was very uncommon to see language implementation that supported both, and if they did, there was usually very little sharing of code. \u5173\u4e8e\u4e3b\u6d41\u8bed\u8a00\u7684\u5b9e\u73b0\u7684\u8ba8\u8bba\u901a\u5e38\u6bd4\u8f83\u5206\u5316\uff0c\u4e00\u4e2a\u8bed\u8a00\u7684\u5b9e\u73b0\u8981\u4e48\u63d0\u4f9b\u4e00\u4e2a\u50cfGCC,FreePascal,FreeBASIC\u4e00\u6837\u7684static compiler(\u9759\u6001\u7f16\u8bd1\u5668,\u5b8c\u5168\u7f16\u8bd1\u5b8c\u6210\u4e4b\u540e\u518d\u53bb\u6267\u884c)\uff0c\u8981\u4e48\u4ee5\u89e3\u91ca\u5668\u6216\u8005JIT(Just-In-Time)\u7f16\u8bd1\u5668\u7684\u5f62\u5f0f\u63d0\u4f9b\u4e00\u4e2aruntime compiler(\u8fd0\u884c\u65f6\u7f16\u8bd1\u5668)\u3002\u5f88\u5c11\u80fd\u770b\u5230\u4e00\u79cd\u8fd9\u4e24\u8005\u90fd\u652f\u6301\u7684\u8bed\u8a00\u5b9e\u73b0\uff0c\u5373\u4f7f\u6709\uff0c\u4ed6\u4eec\u901a\u5e38\u4e5f\u53ea\u6709\u975e\u5e38\u5c11\u7684\u4ee3\u7801\u590d\u7528 Finally LLVM has also been used to create a broad variety of new products, perhaps the best known of which is the OpenCL GPU programming language and runtime. \u53ef\u4ee5\u53c2\u8003\uff0c\u4eba\u5de5\u667a\u80fd\u82af\u7247\u7684\u7f16\u8bd1\u5668\u5b8c\u5168\u53ef\u4ee5\u501f\u52a9LLVM","title":"\u4ec0\u4e48\u662fLLVM"},{"location":"deeplearning/deeplearning.html#jit","text":"JIT\u7f16\u8bd1\u5668\u548c\u89e3\u91ca\u5668\u8fd8\u662f\u6709\u533a\u522b\u7684\uff0cJIT\u662f\u5373\u65f6\u7f16\u8bd1\uff0c\u5b9e\u8d28\u662f\u8fd8\u662f\u7f16\u8bd1\uff0c\u90a3\u4e48\u6d41\u7a0b\u4e0a\u4ecd\u7136\u662f \u4e2d\u95f4\u4ee3\u7801 -> [ \u7f16\u8bd1 ] -> \u53ef\u6267\u884c\u4e8c\u8fdb\u5236 -> [ \u6267\u884c ] -> \u7ed3\u679c \u4f46\u662f\u89e3\u91ca\u6267\u884c\u6d41\u7a0b\u4e0a\u662f \u4e2d\u95f4\u4ee3\u7801 -> [ \u89e3\u91ca ] -> \u7ed3\u679c \u8bf4JIT\u6bd4\u89e3\u91ca\u5feb\uff0c\u5176\u5b9e\u8bf4\u7684\u662f\u201c\u6267\u884c\u7f16\u8bd1\u540e\u7684\u4ee3\u7801\u201d\u6bd4\u201c\u89e3\u91ca\u5668\u89e3\u91ca\u6267\u884c\u201d\u8981\u5feb\uff0c\u5e76\u4e0d\u662f\u8bf4\u201c\u7f16\u8bd1\u201d\u8fd9\u4e2a\u52a8\u4f5c\u6bd4\u201c\u89e3\u91ca\u201d\u8fd9\u4e2a\u52a8\u4f5c\u5feb\u3002\u7136\u800c\u8fd9JIT\u7f16\u8bd1\u518d\u600e\u4e48\u5feb\uff0c\u81f3\u5c11\u4e5f\u6bd4\u89e3\u91ca\u6267\u884c\u4e00\u6b21\u7565\u6162\u4e00\u4e9b\uff0c\u800c\u8981\u5f97\u5230\u6700\u540e\u7684\u6267\u884c\u7ed3\u679c\u8fd8\u5f97\u518d\u7ecf\u8fc7\u4e00\u4e2a\u201c\u6267\u884c\u7f16\u8bd1\u540e\u7684\u4ee3\u7801\u201d\u7684\u8fc7\u7a0b\u3002\u6240\u4ee5\uff0c\u5bf9\u201c\u53ea\u6267\u884c\u4e00\u6b21\u201d\u7684\u4ee3\u7801\u800c\u8a00\uff0c\u89e3\u91ca\u6267\u884c\u5176\u5b9e\u603b\u662f\u6bd4JIT\u7f16\u8bd1\u6267\u884c\u8981\u5feb\u3002\u600e\u4e48\u7b97\u662f\u201c\u53ea\u6267\u884c\u4e00\u6b21\u7684\u4ee3\u7801\u201d\u5462\uff1f\u7c97\u7565\u8bf4\uff0c\u4e0b\u9762\u4e24\u4e2a\u6761\u4ef6\u540c\u65f6\u6ee1\u8db3\u65f6\u5c31\u662f\u4e25\u683c\u7684\u201c\u53ea\u6267\u884c\u4e00\u6b21\u201d\u53ea\u88ab\u8c03\u7528\u4e00\u6b21\uff0c\u4f8b\u5982\u7c7b\u7684\u521d\u59cb\u5316\u5668\uff08class initializer\uff0c< clinit >()V\uff09\u6ca1\u6709\u5faa\u73af\u5bf9\u53ea\u6267\u884c\u4e00\u6b21\u7684\u4ee3\u7801\u505aJIT\u7f16\u8bd1\u518d\u6267\u884c\uff0c\u53ef\u4ee5\u8bf4\u662f\u5f97\u4e0d\u507f\u5931\u3002\u5bf9\u53ea\u6267\u884c\u5c11\u91cf\u6b21\u6570\u7684\u4ee3\u7801\uff0cJIT\u7f16\u8bd1\u5e26\u6765\u7684\u6267\u884c\u901f\u5ea6\u7684\u63d0\u5347\u4e5f\u672a\u5fc5\u80fd\u62b5\u6d88\u6389\u6700\u521d\u7f16\u8bd1\u5e26\u6765\u7684\u5f00\u9500\u3002\u53ea\u6709\u5bf9\u9891\u7e41\u6267\u884c\u7684\u4ee3\u7801\uff0cJIT\u7f16\u8bd1\u624d\u80fd\u4fdd\u8bc1\u6709\u6b63\u9762\u7684\u6536\u76ca\u3002 \u4f5c\u8005\uff1aRednaxelaFX \u94fe\u63a5\uff1a https://www.zhihu.com/question/37389356/answer/73820511 \u6765\u6e90\uff1a\u77e5\u4e4e \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002","title":"JIT\u7f16\u8bd1\u5668\u548c\u89e3\u91ca\u5668"},{"location":"deeplearning/deeplearning.html#_4","text":"","title":"\u4f20\u7edf\u9759\u6001\u7f16\u8bd1\u5668"},{"location":"deeplearning/deeplearning.html#_5","text":"\u8ba1\u7b97\u56fe","title":"\u8ba1\u7b97\u56fe"},{"location":"deeplearning/deeplearning.html#_6","text":"tvm\u7684\u7b97\u5b50\u4f18\u5316\u5305\u62ecoperator fusion, pruning, layout transformation, and memory management\uff0c\u8fd9\u4e2a\u4e00\u4e2a\u9ad8\u5c42\u6b21\u7684\u4f18\u5316\uff0c\u4e0e\u540e\u7aef\u6ca1\u6709\u5173\u7cfb\uff0c\u5bf9\u4e8eoperator fusion\u5f88\u597d\u7406\u89e3\uff0c\u4e00\u4e9b\u53ef\u4ee5\u5408\u5e76\u7684\u64cd\u4f5c\u53ef\u4ee5\u63d0\u524d\u5408\u5e76\uff0c\u4f46\u662f\u6240\u8c13\u7684layout transformation\u548cmemory management\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u5728tvm\u4e2d\uff0crelay\u6765\u505a\u56fe\u4f18\u5316","title":"\u56fe\u4f18\u5316"},{"location":"deeplearning/deeplearning.html#tensor","text":"\u5bf9\u4e8etensor\u4f18\u5316\uff0ctensor\u5373\u5f20\u91cf\uff0c\u662f\u5404\u4e2a\u7b97\u5b50\u6240\u8981\u64cd\u4f5c\u7684\u77e9\u9635\uff0c\u57fa\u4e8etensor\u7684\u4f18\u5316\u4e5f\u5c31\u662f\u8bf4\u77e9\u9635\u8fd0\u7b97\u7684\u4f18\u5316\u3002\u4e3e\u4e2a\u4f8b\u5b50\u77e9\u9635\u52a0\u6cd5\uff0c\u5982\u679c\u5728x86\u4e0a\u90a3\u4e48\u5145\u5206\u5229\u7528cache\u4f1a\u6709\u5f88\u5927\u7684\u6548\u7387\u63d0\u5347\uff0c\u5982\u679c\u5728AI\u82af\u7247\u4e0a\uff0c\u90a3\u4e48\u5f88\u6709\u53ef\u80fd\u652f\u6301\u77e9\u9635\u52a0\u6cd5\u7684\u64cd\u4f5c\uff0c\u53ef\u4ee5\u76f4\u63a5\u8f6c\u6362\u4e3a\u82af\u7247\u7684\u77e9\u9635\u52a0\u6cd5\u64cd\u4f5c,\u5728TVM\u4e2dtvm\u6765\u505atensor\u7684\u4f18\u5316","title":"tensor\u4f18\u5316"},{"location":"deeplearning/deeplearning.html#_7","text":"\u7c7b\u4f3c\u4e8e\u4ee3\u7801\u7f16\u8bd1\u5668\uff0c\u6211\u4eec\u9700\u8981\u4e00\u5957\u8f6f\u4ef6\u6808\u6765\u8854\u63a5\u524d\u7aef(Frontend)\u5404\u79cd\u4e0d\u540c\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff08tensorflow,Caffe,MXNet...\uff09,\u7136\u540e\u6620\u5c04\u5230\u540e\u7aef\u5404\u79cd\u4e0d\u540c\u7684\u8ba1\u7b97\u786c\u4ef6\u5e73\u53f0\u4e0a,\u5e76\u5728\u6b64\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u5404\u79cd\u4e0d\u540c\u5c42\u9762\u7684\u4f18\u5316\u63aa\u65bd\u3002\u8fd9\u5c31\u662f\u795e\u7ecf\u7f51\u7edc\u7f16\u8bd1\u5668\u6216\u8005\u5de5\u5177\u94fe\u6240\u8981\u89e3\u51b3\u7684\u95ee\u9898","title":"\u6df1\u5ea6\u5b66\u4e60(\u795e\u7ecf\u7f51\u7edc)\u7f16\u8bd1\u5668"},{"location":"deeplearning/deeplearning.html#xla","text":"XLA","title":"XLA"},{"location":"deeplearning/deeplearning.html#lstm","text":"\u53c2\u8003 LSTM\u8be6\u89e3","title":"LSTM"},{"location":"deeplearning/onehot.html","text":"one-hot \u00b6 one-hot \u6982\u8ff0 \u8be6\u89e3 \u5b9e\u8df5 \u603b\u7ed3 \u6982\u8ff0 \u00b6 As a first idea, we might \"one-hot\" encode each word in our vocabulary. Consider the sentence \"The cat sat on the mat\". The vocabulary (or unique words) in this sentence is (cat, mat, on, sat, the). To represent each word, we will create a zero vector with length equal to the vocabulary, then place a one in the index that corresponds to the word. This approach is shown in the following diagram. To create a vector that contains the encoding of the sentence, we could then concatenate the one-hot vectors for each word. Key Point: This approach is inefficient. A one-hot encoded vector is sparse (meaning, most indices are zero). Imagine we have 10,000 words in the vocabulary. To one-hot encode each word, we would create a vector where 99.99% of the elements are zero. from tensorflow_one-hot \u8be6\u89e3 \u00b6 Returns a one-hot tensor. The locations represented by indices in indices take value on_value, while all other locations take value off_value. If the input indices is rank N, the output will have rank N+1, The new axis is created at dimension axis (default: the new axis is appended at the end). If indices is a scalar the output shape will be a vector of length depth. If indices is a vector of length features, the output shape will be: features x depth if axis == -1 depth x features if axis == 0 If indices is a matrix (batch) with shape [batch, features], the output shape will be: batch x features x depth if axis == -1 batch x depth x features if axis == 1 depth x batch x features if axis == 0 Suppose that indices = [0, 2, -1, 1] depth = 3 on_value = 5.0 off_value = 0.0 axis = -1 Then output is [4 x 3]: output = [5.0 0.0 0.0] // one_hot(0) [0.0 0.0 5.0] // one_hot(2) [0.0 0.0 0.0] // one_hot(-1) [0.0 5.0 0.0] // one_hot(1) Suppose that indices = [0, 2, -1, 1] depth = 3 on_value = 0.0 off_value = 3.0 axis = 0 Then output is [3 x 4]: output = [0.0 3.0 3.0 3.0] [3.0 3.0 3.0 0.0] [3.0 0.0 3.0 3.0] Suppose that indices = [[0, 2], [1, -1]] depth = 3 on_value = 1.0 off_value = 0.0 axis = -1 Then output is [2 x 2 x 3]: output = [ [1.0, 0.0, 0.0] // one_hot(0) [0.0, 0.0, 1.0] // one_hot(2) ][ [0.0, 1.0, 0.0] // one_hot(1) [0.0, 0.0, 0.0] // one_hot(-1) ] Note : from netron documentation \u5b9e\u8df5 \u00b6 import tensorflow as tf import numpy as np from tensorflow.python.framework import graph_util graph = tf . Graph () with graph . as_default (): # session = tf.InteractiveSession() labels = tf . placeholder ( tf . int32 , shape = [ 11 ,], name = \"labels\" ) classes = 10 out = tf . one_hot ( labels , depth = classes , on_value = 1.0 , off_value = 0.0 , name = \"out\" ) print ( \"labels:\" , labels . shape ) print ( \"out:\" , out . shape , out . dtype ) with tf . Session ( graph = graph ) as session : #\u8bad\u7ec3\u5b8c\u6210\u540e\uff0c\u5c06\u7f51\u7edc\u4e2d\u7684\u6743\u503c\u8f6c\u5316\u4e3a\u5e38\u91cf\uff0c\u5f62\u6210\u5e38\u91cfgraph x = np . array ([ 1 , 3 , 4 , 8 , 7 , 5 , 2 , 9 , 0 , 8 , 7 ], dtype = np . int32 ) print ( \"out\" , session . run ( out , feed_dict = { labels : x })) constant_graph = graph_util . convert_variables_to_constants ( sess = session , input_graph_def = graph . as_graph_def ( None , True ), output_node_names = [ 'out' ]) #\u5c06\u5e26\u6743\u503c\u7684graph\u5e8f\u5217\u5316\uff0c\u5199\u6210pb\u6587\u4ef6\u5b58\u50a8\u8d77\u6765 with tf . gfile . GFile ( \"./one-hot.pb\" , mode = 'wb' ) as f : f . write ( constant_graph . SerializeToString ()) # tf.import_graph_def(graph_def, name='') tf . train . write_graph ( constant_graph , \"./\" , \"one-hot.pbtxt\" , as_text = True ) \u603b\u7ed3 \u00b6 one-hot\u5c31\u662f\u4e00\u79cd\u7f16\u7801\u65b9\u6cd5\uff0c\u5f53\u7136\u8fd9\u79cd\u65b9\u6cd5\u633a\u6d6a\u8d39\u7a7a\u95f4\u7684\u3002one-hot\u540c\u65f6\u5e26\u6765\u4e86\u6570\u636e\u7ef4\u5ea6\u4e0a\u7684\u6269\u5c55\uff0c \u6269\u5c55\u53d6\u51b3\u4e8eaxis\u548cdepth\u3002axis\u9ed8\u8ba4\u4e3a-1,\u5373depth\u6269\u5c55\u7684\u662f\u6a2a\u5411\u3002\u6269\u5c55\u7684\u7ef4\u5ea6\u7684\u957f\u5ea6\u5373depth\u3002\u5982\u679c\u6df1\u5ea6\u4e0d\u591f\uff0c\u90a3\u4e48\u5c31\u6709\u53ef\u80fd\u4f7f\u5f97\u7f16\u7801\u7a7a\u95f4\u4e0d\u591f\uff0c\u4e0d\u8db3\u4ee5\u628a\u6240\u6709\u7684labels\u90fd\u8fdb\u884c\u7f16\u7801\u3002","title":"one-hot"},{"location":"deeplearning/onehot.html#one-hot","text":"one-hot \u6982\u8ff0 \u8be6\u89e3 \u5b9e\u8df5 \u603b\u7ed3","title":"one-hot"},{"location":"deeplearning/onehot.html#_1","text":"As a first idea, we might \"one-hot\" encode each word in our vocabulary. Consider the sentence \"The cat sat on the mat\". The vocabulary (or unique words) in this sentence is (cat, mat, on, sat, the). To represent each word, we will create a zero vector with length equal to the vocabulary, then place a one in the index that corresponds to the word. This approach is shown in the following diagram. To create a vector that contains the encoding of the sentence, we could then concatenate the one-hot vectors for each word. Key Point: This approach is inefficient. A one-hot encoded vector is sparse (meaning, most indices are zero). Imagine we have 10,000 words in the vocabulary. To one-hot encode each word, we would create a vector where 99.99% of the elements are zero. from tensorflow_one-hot","title":"\u6982\u8ff0"},{"location":"deeplearning/onehot.html#_2","text":"Returns a one-hot tensor. The locations represented by indices in indices take value on_value, while all other locations take value off_value. If the input indices is rank N, the output will have rank N+1, The new axis is created at dimension axis (default: the new axis is appended at the end). If indices is a scalar the output shape will be a vector of length depth. If indices is a vector of length features, the output shape will be: features x depth if axis == -1 depth x features if axis == 0 If indices is a matrix (batch) with shape [batch, features], the output shape will be: batch x features x depth if axis == -1 batch x depth x features if axis == 1 depth x batch x features if axis == 0 Suppose that indices = [0, 2, -1, 1] depth = 3 on_value = 5.0 off_value = 0.0 axis = -1 Then output is [4 x 3]: output = [5.0 0.0 0.0] // one_hot(0) [0.0 0.0 5.0] // one_hot(2) [0.0 0.0 0.0] // one_hot(-1) [0.0 5.0 0.0] // one_hot(1) Suppose that indices = [0, 2, -1, 1] depth = 3 on_value = 0.0 off_value = 3.0 axis = 0 Then output is [3 x 4]: output = [0.0 3.0 3.0 3.0] [3.0 3.0 3.0 0.0] [3.0 0.0 3.0 3.0] Suppose that indices = [[0, 2], [1, -1]] depth = 3 on_value = 1.0 off_value = 0.0 axis = -1 Then output is [2 x 2 x 3]: output = [ [1.0, 0.0, 0.0] // one_hot(0) [0.0, 0.0, 1.0] // one_hot(2) ][ [0.0, 1.0, 0.0] // one_hot(1) [0.0, 0.0, 0.0] // one_hot(-1) ] Note : from netron documentation","title":"\u8be6\u89e3"},{"location":"deeplearning/onehot.html#_3","text":"import tensorflow as tf import numpy as np from tensorflow.python.framework import graph_util graph = tf . Graph () with graph . as_default (): # session = tf.InteractiveSession() labels = tf . placeholder ( tf . int32 , shape = [ 11 ,], name = \"labels\" ) classes = 10 out = tf . one_hot ( labels , depth = classes , on_value = 1.0 , off_value = 0.0 , name = \"out\" ) print ( \"labels:\" , labels . shape ) print ( \"out:\" , out . shape , out . dtype ) with tf . Session ( graph = graph ) as session : #\u8bad\u7ec3\u5b8c\u6210\u540e\uff0c\u5c06\u7f51\u7edc\u4e2d\u7684\u6743\u503c\u8f6c\u5316\u4e3a\u5e38\u91cf\uff0c\u5f62\u6210\u5e38\u91cfgraph x = np . array ([ 1 , 3 , 4 , 8 , 7 , 5 , 2 , 9 , 0 , 8 , 7 ], dtype = np . int32 ) print ( \"out\" , session . run ( out , feed_dict = { labels : x })) constant_graph = graph_util . convert_variables_to_constants ( sess = session , input_graph_def = graph . as_graph_def ( None , True ), output_node_names = [ 'out' ]) #\u5c06\u5e26\u6743\u503c\u7684graph\u5e8f\u5217\u5316\uff0c\u5199\u6210pb\u6587\u4ef6\u5b58\u50a8\u8d77\u6765 with tf . gfile . GFile ( \"./one-hot.pb\" , mode = 'wb' ) as f : f . write ( constant_graph . SerializeToString ()) # tf.import_graph_def(graph_def, name='') tf . train . write_graph ( constant_graph , \"./\" , \"one-hot.pbtxt\" , as_text = True )","title":"\u5b9e\u8df5"},{"location":"deeplearning/onehot.html#_4","text":"one-hot\u5c31\u662f\u4e00\u79cd\u7f16\u7801\u65b9\u6cd5\uff0c\u5f53\u7136\u8fd9\u79cd\u65b9\u6cd5\u633a\u6d6a\u8d39\u7a7a\u95f4\u7684\u3002one-hot\u540c\u65f6\u5e26\u6765\u4e86\u6570\u636e\u7ef4\u5ea6\u4e0a\u7684\u6269\u5c55\uff0c \u6269\u5c55\u53d6\u51b3\u4e8eaxis\u548cdepth\u3002axis\u9ed8\u8ba4\u4e3a-1,\u5373depth\u6269\u5c55\u7684\u662f\u6a2a\u5411\u3002\u6269\u5c55\u7684\u7ef4\u5ea6\u7684\u957f\u5ea6\u5373depth\u3002\u5982\u679c\u6df1\u5ea6\u4e0d\u591f\uff0c\u90a3\u4e48\u5c31\u6709\u53ef\u80fd\u4f7f\u5f97\u7f16\u7801\u7a7a\u95f4\u4e0d\u591f\uff0c\u4e0d\u8db3\u4ee5\u628a\u6240\u6709\u7684labels\u90fd\u8fdb\u884c\u7f16\u7801\u3002","title":"\u603b\u7ed3"},{"location":"design-patterns/design-patterns.html","text":"design-patterns \u00b6 design-patterns \u8bbf\u95ee\u8005\u6a21\u5f0f(visitor) \u60c5\u666f\u5047\u8bbe \u89e3\u51b3\u601d\u8def \u4ee3\u7801\u4e3e\u4f8b \u8fd0\u884c\u7ed3\u679c \u7f51\u7edc\u4e0a\u4ecb\u7ecd\u8bbe\u8ba1\u6a21\u5f0f\u7684\u76f8\u5173\u4e66\u7c4d\u548c\u535a\u5ba2\u5df2\u7ecf\u975e\u5e38\u591a\u4e86\uff0c\u4f46\u6211\u8fd8\u662f\u60f3\u8bb0\u5f55\u4e00\u4e0b\u81ea\u5df1\u5728\u5b66\u4e60\u8bbe\u8ba1\u6a21\u5f0f\u8fc7\u7a0b\u4e2d\u7684\u4e00\u4e9b\u5fc3\u5f97\u3002\u8fd9\u662f\u6211\u4e00\u76f4\u60f3\u505a\u800c\u8fd8\u6ca1\u6709\u53bb\u505a\u7684\u4e8b\u60c5\u3002\u90a3\u4e48\u6211\u6240\u8bb0\u5f55\u7684\u548c\u7f51\u7edc\u4e0a\u5927\u591a\u6570\u7684\u76f8\u5173\u6587\u7ae0\u6709\u4ec0\u4e48\u4e0d\u4e00\u6837\u7684\u5462\uff1f\u6211\u60f3\u4e00\u662f\u8fd9\u662f\u6211\u81ea\u5df1\u7684\u5fc3\u5f97\uff0c\u6211\u4f1a\u6309\u7167\u6211\u81ea\u5df1\u7684\u7406\u89e3\u6765\u5199\uff0c\u800c\u4e0d\u662f\u5b8c\u5168\u7167\u6284\u5927\u591a\u6570\u7684\u4f8b\u5b50\uff1b\u4e8c\u662f\u6211\u5e0c\u671b\u66f4\u591a\u7684\u8bb0\u5f55\u4e00\u4e9b\u6211\u5bf9\u8bbe\u8ba1\u6a21\u5f0f\u672c\u8d28\u7684\u7406\u89e3\u3002\u56e0\u4e3a\u6211\u89c9\u5f97\u5355\u7eaf\u770b\u4e00\u4e9b\u8bbe\u8ba1\u6a21\u5f0f\u662f\u6ca1\u6709\u592a\u591a\u5e2e\u52a9\u7684\uff0c\u5f88\u96be\u5e94\u7528\u5728\u5177\u4f53\u7684\u4ee3\u7801\u8bbe\u8ba1\u4e2d\uff0c\u4e5f\u4e0d\u5bb9\u6613\u5728\u8bfb\u522b\u4eba\u7684\u4ee3\u7801\u7684\u65f6\u5019\u770b\u51fa\u6765\u5b83\u7684\u8bbe\u8ba1\u601d\u60f3\u3002\u53ea\u6709\u4f53\u4f1a\u5230\u8bbe\u8ba1\u6a21\u5f0f\u7684\u672c\u8d28\uff0c\u624d\u80fd\u505a\u5230\u8fd0\u7528\u81ea\u5982\uff0c\u4e3e\u4e00\u53cd\u4e09\u3002\u6bd4\u5982\u8bf4\uff0c\u6709\u4e00\u53e5\u5f88\u7ecf\u5178\u8bdd\uff0c\u539f\u8bdd\u5df2\u7ecf\u4e0d\u8bb0\u5f97\u4e86\uff0c\u4f46\u5927\u81f4\u610f\u601d\u662f: \u5728\u8ba1\u7b97\u673a\u4e16\u754c\u91cc\uff0c\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\u662f\u589e\u52a0\u4e00\u5c42\u6240\u4e0d\u80fd\u89e3\u51b3\u7684\uff0c\u5982\u679c\u6709\uff0c\u518d\u589e\u52a0\u4e00\u5c42 \u5982\u679c\u7406\u89e3\u4e86\u8fd9\u53e5\u8bdd\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e3a\u4ec0\u4e48\u8981\u62bd\u8c61\u57fa\u7c7b\uff08\u5c01\u88c5\uff09\uff0c\u4e3a\u4ec0\u4e48\u8981\u6709\u63a5\u53e3\u5c31\u5f88\u5bb9\u6613\u7406\u89e3\u4e86\uff0c\u5bf9\u4e8e\u5404\u79cd\u8bbe\u8ba1\u6a21\u5f0f\u8981\u89e3\u51b3\u7684\u95ee\u9898\u60c5\u666f\u4e5f\u5c31\u5f88\u5bb9\u6613\u7406\u89e3\u4e86\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u518d\u4e0e\u6807\u51c6\u8bbe\u8ba1\u6a21\u5f0f\u8fdb\u884c\u601d\u8def\u4e0a\u7684\u78b0\u649e\uff0c\u5c31\u4f1a\u6709\u5f88\u591a\u672c\u8d28\u4e0a\u7684\u6536\u83b7\u3002 \u5173\u4e8e\u793a\u4f8b\u4ee3\u7801\u7684\u8bed\u8a00\u9009\u62e9\uff0c\u7f51\u7edc\u4e0a\u5927\u591a\u6570\u662f\u57fa\u4e8eJAVA(\u6211\u4e2a\u4eba\u89c9\u5f97JAVA\u5728\u4e92\u8054\u7f51\u9886\u57df\u6709\u7740\u9886\u5bfc\u5730\u4f4d\uff0c\u800c\u4e14\u5f80\u5f80\u4e92\u8054\u7f51\u9886\u57df\u9762\u4e34\u7740\u9700\u6c42\u591a\u53d8\u7684\u60c5\u51b5\u4f1a\u975e\u5e38\u591a\uff0c\u7279\u522b\u9700\u8981\u7406\u89e3\u8bbe\u8ba1\u6a21\u5f0f\uff1b\u800c\u5728\u5d4c\u5165\u5f0f\u9886\u57df\uff0c\u5176\u5b9e\u5f88\u591a\u4eba\u8fd8\u4e0d\u61c2\u4ec0\u4e48\u662fOOP)\u6211\u4ece\u76ee\u524d\u81ea\u5df1\u6700\u719f\u6089\u7684\u9ad8\u7ea7\u8bed\u8a00C,C++,Python\u4e2d\u8fdb\u884c\u9009\u62e9\uff0cC\u867d\u7136\u4e0d\u662f\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\uff0c\u4f46\u662f\u53ef\u4ee5\u6309\u7167\u9762\u5411\u5bf9\u8c61\u7684\u601d\u60f3\u53bb\u5199\uff0c\u4f46\u662f\u603b\u89c9\u5f97\u8868\u8fbe\u51fa\u6765\u5dee\u70b9\u513f\u610f\u601d\uff1bC++\u548cPython\u6211\u9009\u62e9C++(\u867d\u7136Python\u6211\u89c9\u5f97\u53ef\u80fd\u4f1a\u66f4\u6e05\u6670\u4e00\u4e9b\uff0c\u4f46\u603b\u89c9\u5f97\u5b83\u662f\u811a\u672c\u8bed\u8a00\uff0c\u968f\u610f\u6027\u76f8\u5bf9\u8981\u5927\u4e00\u4e9b) \u8bbf\u95ee\u8005\u6a21\u5f0f(visitor) \u00b6 \u60c5\u666f\u5047\u8bbe \u00b6 \u89e3\u51b3\u601d\u8def \u00b6 \u4ee3\u7801\u4e3e\u4f8b \u00b6 \u8fd0\u884c\u7ed3\u679c \u00b6","title":"design-patterns"},{"location":"design-patterns/design-patterns.html#design-patterns","text":"design-patterns \u8bbf\u95ee\u8005\u6a21\u5f0f(visitor) \u60c5\u666f\u5047\u8bbe \u89e3\u51b3\u601d\u8def \u4ee3\u7801\u4e3e\u4f8b \u8fd0\u884c\u7ed3\u679c \u7f51\u7edc\u4e0a\u4ecb\u7ecd\u8bbe\u8ba1\u6a21\u5f0f\u7684\u76f8\u5173\u4e66\u7c4d\u548c\u535a\u5ba2\u5df2\u7ecf\u975e\u5e38\u591a\u4e86\uff0c\u4f46\u6211\u8fd8\u662f\u60f3\u8bb0\u5f55\u4e00\u4e0b\u81ea\u5df1\u5728\u5b66\u4e60\u8bbe\u8ba1\u6a21\u5f0f\u8fc7\u7a0b\u4e2d\u7684\u4e00\u4e9b\u5fc3\u5f97\u3002\u8fd9\u662f\u6211\u4e00\u76f4\u60f3\u505a\u800c\u8fd8\u6ca1\u6709\u53bb\u505a\u7684\u4e8b\u60c5\u3002\u90a3\u4e48\u6211\u6240\u8bb0\u5f55\u7684\u548c\u7f51\u7edc\u4e0a\u5927\u591a\u6570\u7684\u76f8\u5173\u6587\u7ae0\u6709\u4ec0\u4e48\u4e0d\u4e00\u6837\u7684\u5462\uff1f\u6211\u60f3\u4e00\u662f\u8fd9\u662f\u6211\u81ea\u5df1\u7684\u5fc3\u5f97\uff0c\u6211\u4f1a\u6309\u7167\u6211\u81ea\u5df1\u7684\u7406\u89e3\u6765\u5199\uff0c\u800c\u4e0d\u662f\u5b8c\u5168\u7167\u6284\u5927\u591a\u6570\u7684\u4f8b\u5b50\uff1b\u4e8c\u662f\u6211\u5e0c\u671b\u66f4\u591a\u7684\u8bb0\u5f55\u4e00\u4e9b\u6211\u5bf9\u8bbe\u8ba1\u6a21\u5f0f\u672c\u8d28\u7684\u7406\u89e3\u3002\u56e0\u4e3a\u6211\u89c9\u5f97\u5355\u7eaf\u770b\u4e00\u4e9b\u8bbe\u8ba1\u6a21\u5f0f\u662f\u6ca1\u6709\u592a\u591a\u5e2e\u52a9\u7684\uff0c\u5f88\u96be\u5e94\u7528\u5728\u5177\u4f53\u7684\u4ee3\u7801\u8bbe\u8ba1\u4e2d\uff0c\u4e5f\u4e0d\u5bb9\u6613\u5728\u8bfb\u522b\u4eba\u7684\u4ee3\u7801\u7684\u65f6\u5019\u770b\u51fa\u6765\u5b83\u7684\u8bbe\u8ba1\u601d\u60f3\u3002\u53ea\u6709\u4f53\u4f1a\u5230\u8bbe\u8ba1\u6a21\u5f0f\u7684\u672c\u8d28\uff0c\u624d\u80fd\u505a\u5230\u8fd0\u7528\u81ea\u5982\uff0c\u4e3e\u4e00\u53cd\u4e09\u3002\u6bd4\u5982\u8bf4\uff0c\u6709\u4e00\u53e5\u5f88\u7ecf\u5178\u8bdd\uff0c\u539f\u8bdd\u5df2\u7ecf\u4e0d\u8bb0\u5f97\u4e86\uff0c\u4f46\u5927\u81f4\u610f\u601d\u662f: \u5728\u8ba1\u7b97\u673a\u4e16\u754c\u91cc\uff0c\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\u662f\u589e\u52a0\u4e00\u5c42\u6240\u4e0d\u80fd\u89e3\u51b3\u7684\uff0c\u5982\u679c\u6709\uff0c\u518d\u589e\u52a0\u4e00\u5c42 \u5982\u679c\u7406\u89e3\u4e86\u8fd9\u53e5\u8bdd\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e3a\u4ec0\u4e48\u8981\u62bd\u8c61\u57fa\u7c7b\uff08\u5c01\u88c5\uff09\uff0c\u4e3a\u4ec0\u4e48\u8981\u6709\u63a5\u53e3\u5c31\u5f88\u5bb9\u6613\u7406\u89e3\u4e86\uff0c\u5bf9\u4e8e\u5404\u79cd\u8bbe\u8ba1\u6a21\u5f0f\u8981\u89e3\u51b3\u7684\u95ee\u9898\u60c5\u666f\u4e5f\u5c31\u5f88\u5bb9\u6613\u7406\u89e3\u4e86\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u518d\u4e0e\u6807\u51c6\u8bbe\u8ba1\u6a21\u5f0f\u8fdb\u884c\u601d\u8def\u4e0a\u7684\u78b0\u649e\uff0c\u5c31\u4f1a\u6709\u5f88\u591a\u672c\u8d28\u4e0a\u7684\u6536\u83b7\u3002 \u5173\u4e8e\u793a\u4f8b\u4ee3\u7801\u7684\u8bed\u8a00\u9009\u62e9\uff0c\u7f51\u7edc\u4e0a\u5927\u591a\u6570\u662f\u57fa\u4e8eJAVA(\u6211\u4e2a\u4eba\u89c9\u5f97JAVA\u5728\u4e92\u8054\u7f51\u9886\u57df\u6709\u7740\u9886\u5bfc\u5730\u4f4d\uff0c\u800c\u4e14\u5f80\u5f80\u4e92\u8054\u7f51\u9886\u57df\u9762\u4e34\u7740\u9700\u6c42\u591a\u53d8\u7684\u60c5\u51b5\u4f1a\u975e\u5e38\u591a\uff0c\u7279\u522b\u9700\u8981\u7406\u89e3\u8bbe\u8ba1\u6a21\u5f0f\uff1b\u800c\u5728\u5d4c\u5165\u5f0f\u9886\u57df\uff0c\u5176\u5b9e\u5f88\u591a\u4eba\u8fd8\u4e0d\u61c2\u4ec0\u4e48\u662fOOP)\u6211\u4ece\u76ee\u524d\u81ea\u5df1\u6700\u719f\u6089\u7684\u9ad8\u7ea7\u8bed\u8a00C,C++,Python\u4e2d\u8fdb\u884c\u9009\u62e9\uff0cC\u867d\u7136\u4e0d\u662f\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\uff0c\u4f46\u662f\u53ef\u4ee5\u6309\u7167\u9762\u5411\u5bf9\u8c61\u7684\u601d\u60f3\u53bb\u5199\uff0c\u4f46\u662f\u603b\u89c9\u5f97\u8868\u8fbe\u51fa\u6765\u5dee\u70b9\u513f\u610f\u601d\uff1bC++\u548cPython\u6211\u9009\u62e9C++(\u867d\u7136Python\u6211\u89c9\u5f97\u53ef\u80fd\u4f1a\u66f4\u6e05\u6670\u4e00\u4e9b\uff0c\u4f46\u603b\u89c9\u5f97\u5b83\u662f\u811a\u672c\u8bed\u8a00\uff0c\u968f\u610f\u6027\u76f8\u5bf9\u8981\u5927\u4e00\u4e9b)","title":"design-patterns"},{"location":"design-patterns/design-patterns.html#visitor","text":"","title":"\u8bbf\u95ee\u8005\u6a21\u5f0f(visitor)"},{"location":"design-patterns/design-patterns.html#_1","text":"","title":"\u60c5\u666f\u5047\u8bbe"},{"location":"design-patterns/design-patterns.html#_2","text":"","title":"\u89e3\u51b3\u601d\u8def"},{"location":"design-patterns/design-patterns.html#_3","text":"","title":"\u4ee3\u7801\u4e3e\u4f8b"},{"location":"design-patterns/design-patterns.html#_4","text":"","title":"\u8fd0\u884c\u7ed3\u679c"},{"location":"ic/axi4.html","text":"AXI4 \u00b6 valid/ready\u63e1\u624b\u534f\u8bae AXI4\u6709\u591a\u79cd\u5b50\u7c7b\u578b\uff1a AXI4: \u4e00\u822c\u7528\u4e8e\u9ad8\u6027\u80fd\u5b58\u50a8\u6620\u5c04\u9700\u6c42 AXI4-Lite: \u4e00\u822c\u7528\u4e8e\u7b80\u5355\u7684\uff0c\u4f4e\u541e\u5410\u91cf\u7684\u5b58\u50a8\u6620\u5c04\uff08\u4f8b\u5982\u63a7\u5236\u4e0e\u72b6\u6001\u5bc4\u5b58\u5668\u4e4b\u95f4\u7684\u6620\u5c04\uff09 AXI4-Stream: \u4e00\u822c\u7528\u4e8e\u9ad8\u901f\u7684\u6570\u636e\u6d41 \u540d\u8bcd\u89e3\u91ca\uff1a Transaction\uff1a\u64cd\u4f5c\uff0c\u4e00\u7b14\u64cd\u4f5c\u5728\u591a\u4e2a\u901a\u9053\u4e0a\u8fdb\u884c\uff0c\u6784\u6210\u4e00\u4e2a\u5b8c\u6574\u7684\u4fe1\u606f\u4ea4\u6362 Burst\uff1a\u5355\u4e2a\u5730\u5740\u4f20\u8f93\u591a\u4e2a\u6570\u636e\uff0c\u6709\u4e09\u79cd\u6a21\u5f0f\u3002 Outstanding: \u4e00\u4e2a\u4f20\u8f93\u6ca1\u6709\u5b8c\u6210\u5c31\u53ef\u4ee5\u53d1\u9001\u4e0b\u4e00\u4e2a \u603b\u7ebf\u5e26\u5bbd\u7684\u8ba1\u7b97 trans_size = beat_size * burst_len bandwidth = trans_counter * trans_size / trans_time \u6ce8\u610f\u76f8\u540cID\u4e0d\u4e71\u5e8f AXI4-stream \u00b6 todo...","title":"AXI4"},{"location":"ic/axi4.html#axi4","text":"valid/ready\u63e1\u624b\u534f\u8bae AXI4\u6709\u591a\u79cd\u5b50\u7c7b\u578b\uff1a AXI4: \u4e00\u822c\u7528\u4e8e\u9ad8\u6027\u80fd\u5b58\u50a8\u6620\u5c04\u9700\u6c42 AXI4-Lite: \u4e00\u822c\u7528\u4e8e\u7b80\u5355\u7684\uff0c\u4f4e\u541e\u5410\u91cf\u7684\u5b58\u50a8\u6620\u5c04\uff08\u4f8b\u5982\u63a7\u5236\u4e0e\u72b6\u6001\u5bc4\u5b58\u5668\u4e4b\u95f4\u7684\u6620\u5c04\uff09 AXI4-Stream: \u4e00\u822c\u7528\u4e8e\u9ad8\u901f\u7684\u6570\u636e\u6d41 \u540d\u8bcd\u89e3\u91ca\uff1a Transaction\uff1a\u64cd\u4f5c\uff0c\u4e00\u7b14\u64cd\u4f5c\u5728\u591a\u4e2a\u901a\u9053\u4e0a\u8fdb\u884c\uff0c\u6784\u6210\u4e00\u4e2a\u5b8c\u6574\u7684\u4fe1\u606f\u4ea4\u6362 Burst\uff1a\u5355\u4e2a\u5730\u5740\u4f20\u8f93\u591a\u4e2a\u6570\u636e\uff0c\u6709\u4e09\u79cd\u6a21\u5f0f\u3002 Outstanding: \u4e00\u4e2a\u4f20\u8f93\u6ca1\u6709\u5b8c\u6210\u5c31\u53ef\u4ee5\u53d1\u9001\u4e0b\u4e00\u4e2a \u603b\u7ebf\u5e26\u5bbd\u7684\u8ba1\u7b97 trans_size = beat_size * burst_len bandwidth = trans_counter * trans_size / trans_time \u6ce8\u610f\u76f8\u540cID\u4e0d\u4e71\u5e8f","title":"AXI4"},{"location":"ic/axi4.html#axi4-stream","text":"todo...","title":"AXI4-stream"},{"location":"ic/cordic.html","text":"\u786c\u4ef6\u4e09\u89d2\u51fd\u6570\u7b97\u6cd5CORDIC \u00b6 \u80cc\u666f\u4ecb\u7ecd \u00b6 \u51fa\u4e8e\u5de5\u4f5c\u9700\u8981\uff0c\u5e0c\u671b\u80fd\u591f\u5728\u786c\u4ef6\u4e0a\u5b9e\u73b0\u4e09\u89d2\u51fd\u6570\u7b49\u8d85\u8d8a\u51fd\u6570\u7684\u8ba1\u7b97\uff0c\u4e8e\u662f\u67e5\u627e\u8d44\u6599\u6765\u627e\u5bfb\u5b9e\u73b0\u7684\u4e00\u822c\u65b9\u6cd5\uff0c\u641c\u7d22\u7ed9\u51fa\u7684\u7ed3\u679c\u51fa\u5947\u7684\u4e00\u81f4\uff0c\u5927\u5bb6\u666e\u904d\u90fd\u662f\u4f7f\u7528cordic\u7b97\u6cd5\u5b9e\u73b0\u7684\u3002\u5c3d\u7ba1\u5177\u4f53\u7684\u5b9e\u73b0\u4f1a\u6709\u5dee\u5f02\uff0c\u4f46\u6838\u5fc3\u7684\u601d\u60f3\u662f\u4e00\u81f4\u7684\u3002\u5c3d\u7ba1\u6700\u540e\u51fa\u4e8e\u5404\u79cd\u539f\u56e0\uff0c\u6ca1\u6709\u628a\u8fd9\u4e2a\u5de5\u4f5c\u505a\u5230\u6700\u540e\uff0c\u4f46\u5bf9\u4e8ecordic\u7b97\u6cd5\u7684\u7406\u8bba\u5df2\u7ecf\u57fa\u672c\u638c\u63e1\uff0c\u7279\u6b64\u8bb0\u5f55\u3002 \u503c\u5f97\u8bf4\u660e\u7684\u662f\uff0c\u7f51\u7edc\u4e0a\u8fd9\u65b9\u9762\u7684\u6587\u7ae0\u5df2\u7ecf\u5f88\u591a\u4e86\uff0c\u6240\u4ee5\u5199\u8fd9\u7bc7\u6587\u7ae0\u7684\u76ee\u7684\u662f\u628a\u5b83\u4f5c\u4e3a\u4e00\u4e2a\u601d\u8def\u5f15\u5bfc\uff0c\u800c\u4e0d\u662f\u518d\u628a\u7f51\u7edc\u4e0a\u7684\u8d44\u6599\u6284\u4e00\u904d\u3002 CORDIC\u7b97\u6cd5 \u00b6 \u636e\u4e86\u89e3\uff0cCORDIC(Coordinate Rotation Digital Computer)\u5750\u6807\u65cb\u8f6c\u6570\u5b57\u8ba1\u7b97\u7b97\u6cd51959\u5e74\u5c31\u88ab\u63d0\u51fa\u4e86\uff0c\u7528\u6765\u89e3\u51b3\u5bfc\u822a\u7cfb\u7edf\u4e2d\u4e09\u89d2\u51fd\u6570\u8fd0\u7b97\u7684\u95ee\u9898\uff0c\u7528\u8fd9\u79cd\u65b9\u6cd5\u80fd\u591f\u6ee1\u8db3\u5b9e\u65f6\u6027\u8981\u6c42\u3002\u90a3\u4e48\u57282021\u5e74\u6211\u4eec\u4f7f\u7528\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u663e\u7136\u4e5f\u80fd\u591f\u6ee1\u8db3\u5b9e\u65f6\u6027\u8981\u6c42\u3002 \u9996\u5148\uff0c\u8981\u4e86\u89e3\u5230\u5176\u57fa\u672c\u539f\u7406\uff0c\u7528\u6587\u5b57\u63cf\u8ff0\u5c31\u662f\u5df2\u77e5\u4e00\u4e2a\u89d2\u5ea6\u7684\u6b63\u5f26\u503ca\u548c\u4f59\u5f26\u503cb\uff0c\u7136\u540e\u8fd9\u4e2a\u89d2\u5ea6\u518d\u65cb\u8f6c\u4e00\u4e2a\u89d2\u5ea6c,\u65cb\u8f6c\u4e4b\u540e\u7684\u89d2\u5ea6\u7684\u6b63\u5f26\u503c\u548c\u4f59\u5f26\u503c\u80fd\u591f\u901a\u8fc7a,b,c\u8fd9\u4e09\u4e2a\u91cf\u6c42\u51fa\u6765\u3002\u8fd9\u63d0\u4f9b\u4e86\u9010\u6b21\u903c\u8fd1\u7684\u57fa\u7840\u3002\u5728\u9010\u6b21\u903c\u8fd1\u65f6\uff0c\u6bd4\u5982\u6211\u4eec\u6c42sin(30\u00b0)\uff0c\u5b9e\u8d28\u4e0a\u662f\u7528\u4e00\u7cfb\u5217\u5df2\u77e5\u6b63\u4f59\u5f26\u503c\u7684\u89d2\u5ea6\u7ec4\u5408\u6765\u9010\u6b21\u903c\u8fd1\u523030\u00b0\u3002(\u5f53\u7136\uff0c\u8fd9\u4e9b\u89d2\u5ea6\u90fd\u662f\u4e00\u4e9b\u7279\u5b9a\u89d2\u5ea6)\u3002 \u4e3e\u4f8b\u6765\u8bb2\uff0c30.0\u00b0 \u2248 45.0\u00b0 - 26.6\u00b0 + 14.0\u00b0 - 7.1\u00b0 + 3.6\u00b0 + 1.8\u00b0 - 0.9\u00b0 + 0.4\u00b0 - 0.2\u00b0 + 0.1\u00b0 = 30.1\u00b0 \u90a3\u4e48\u6839\u636e\u4e0a\u9762\u7684\u539f\u7406\uff0c\u77e5\u905345.0\u5ea6\u7684\u6b63\u4f59\u5f26\u503c\uff0c\u5b83\u65cb\u8f6c\u4e8626.6\u00b0\uff0c\u5c31\u6c42\u51fa\u4e86\u65cb\u8f6c\u4e4b\u540e\u7684(45.0\u00b0 - 26.6\u00b0)\u7684\u6b63\u4f59\u5f26\u503c\uff0c\u8fd9\u7b97\u4e00\u6b21\u8fed\u4ee3\uff0c\u5f53\u8fed\u4ee3\u4e8610\u6b21\u4e4b\u540e\uff0c\u5c31\u8ba1\u7b97\u51fa\u4e8630.1\u00b0\u7684\u6b63\u4f59\u5f26\u503c\uff0c\u4e5f\u5c31\u8fd1\u4f3c\u662f30\u5ea6\u7684\u6b63\u4f59\u5f26\u503c\u3002 \u90a3\u4e48\u80af\u5b9a\u4f1a\u95ee\uff0c\u4e3a\u4ec0\u4e48\u662f\u8fd9\u4e9b\u7279\u5b9a\u89d2\u5ea6\uff1f\u56e0\u4e3a\u8fd9\u4e9b\u89d2\u5ea6\u90fd\u4f1a\u4f7f\u8ba1\u7b97\u540e\u7684\u7eb5\u5750\u6807\u7f29\u51cf\u4e3a\u539f\u6765\u7684\u00bd,\u8fd9\u663e\u7136\u662f\u9010\u6b21\u903c\u8fd1\u80fd\u591f\u5feb\u901f\u63a5\u8fd1\u7684\u57fa\u7840\u3002 \u5f53\u7136\u4f60\u4e5f\u4f1a\u7591\u60d1\uff0c\u65cb\u8f6c\u540e\u7684\u89d2\u5ea6\u771f\u7684\u80fd\u591f\u901a\u8fc7a,b,c\u4e09\u4e2a\u91cf\u6c42\u51fa\u6765\u5417\uff1f\u6211\u4ece\u4e0a\u5b66\u5c31\u517b\u6210\u4e86\u4e00\u4e2a\u5f88\u4e0d\u597d\u7684\u4e60\u60ef\uff0c\u5f53\u6211\u4e0d\u660e\u767d\u539f\u7406\uff0c\u53ea\u77e5\u9053\u7ed3\u8bba\u7684\u65f6\u5019\uff0c\u5c31\u5f88\u96be\u4e0b\u624b\u505a\u4e00\u4ef6\u4e8b\u60c5\u3002\u4f46\u5176\u5b9e\u5f88\u591a\u65f6\u5019\uff0c\u5bf9\u4e8e\u5feb\u901f\u641e\u5b9a\u4e00\u4ef6\u4e8b\u60c5\u6765\u8bb2\uff0c\u539f\u7406\u5e76\u4e0d\u90a3\u4e48\u91cd\u8981\uff0c\u6bd4\u5982\u8bf4\u8003\u8bd5\u7684\u65f6\u5019\u3002\u65e2\u7136\u73b0\u5728\u4e0d\u662f\u8003\u8bd5\uff0c\u90a3\u4e48\u6211\u4eec\u8fd8\u662f\u6765\u770b\u4e00\u4e0b\u8fd9\u91cc\u9762\u7684\u539f\u7406\uff0c\u5148\u4e0d\u8981\u6015\uff0c\u521d\u4e09\u6c34\u5e73\u8db3\u591f\u4e86\u3002 \u539f\u7406\u53c2\u89c1\u94fe\u63a5\uff0c\u5176\u4e2d\u5b83\u7684\u56fe\u7684\u6807\u6ce8\u5b58\u5728\u95ee\u9898\uff0csin\u548ccos\u5199\u53cd\u4e86\uff0c\u4f46\u9664\u6b64\u4e4b\u5916\u5df2\u7ecf\u975e\u5e38\u7b80\u5355\u660e\u4e86 https://www.cnblogs.com/touchblue/p/3535968.html \u4ee3\u7801\u5b9e\u73b0 \u00b6 github\u4e2d\u5df2\u7ecf\u6709\u5f88\u591a\u7248\u672c\u7684\u5b9e\u73b0\uff0c\u8fd9\u91cc\u9644\u5e26\u51e0\u4e2a\u94fe\u63a5\uff0c\u65b9\u4fbf\u53c2\u8003\uff0c\u4ee3\u7801\u666e\u904d\u6bd4\u8f83\u7b80\u5355\uff0c\u4e00\u770b\u5c31\u61c2 cordic_wrapped CORDIC-all-in-one-verilog \u5173\u4e8e\u9884\u5904\u7406 \u00b6 \u901a\u8fc7\u719f\u6089\u539f\u7406\u548c\u4ee3\u7801\uff0c\u60f3\u5fc5\u6211\u4eec\u8fd8\u53d1\u73b0\u4e86\u4e00\u4e2a\u7ec6\u8282\uff0c\u5c31\u662fcordic\u5bf9\u4e8e\u8f93\u5165\u7684\u89d2\u5ea6\u662f\u6709\u8981\u6c42\u7684\uff0c\u4e00\u822c\u7684\u5e94\u7528\u573a\u666f\uff0c\u6211\u4eec\u4e0d\u4f1a\u5bf9\u89d2\u5ea6\u505a\u9650\u5236\uff0c\u4f46cordic\u53ea\u80fd\u5904\u7406[-99.7\u00b0,99.7\u00b0]\u4e4b\u95f4\u7684\u89d2\u5ea6\uff0c\u56e0\u6b64\u5bf9\u4e8e\u66f4\u5927\u7684\u89d2\u5ea6\uff0c\u5c31\u9700\u8981\u5bf92\u03a0\u53d6\u4f59\u3002 \u8fd9\u91cc\u9762\u6d89\u53ca\u9664\u6cd5\u548c\u03a0\u7684\u7cbe\u5ea6\u95ee\u9898\uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u5904\u7406 int shift = ( int ) floor ( a / ( M_PI / 2.0 )); double b = a - shift * ( M_PI / 2.0 ); \u5176\u4e2da\u4e3a\u8f93\u5165\u89d2\u5ea6\uff0cb\u4e3a\u53d6\u4f59\u4e4b\u540e\u7684\u89d2\u5ea6\uff0c\u5047\u5982\u4f7f\u7528fp16\u6765\u8868\u793aM_PI\uff0ca\u6570\u503c\u8f83\u5927\u65f6\uff0c\u5fc5\u7136\u4f1a\u5e26\u6765\u7cbe\u5ea6\u95ee\u9898,\u6700\u7b80\u5355\u7684\u505a\u6cd5\u662f\u5185\u90e8\u8ba1\u7b97\u91c7\u7528fp32,\u8ba1\u7b97\u5b8c\u6210\u540e\u518d\u7528fp16\u8fdb\u884c\u8868\u793a\u3002 \u5173\u4e8e\u8c61\u9650 \u00b6 \u5bf9\u4e8e\u8ba1\u7b97\u4e0d\u540c\u8c61\u9650\u7684\u89d2\u5ea6\uff0c\u5728\u7b26\u53f7\u4e0a\u662f\u4e0d\u540c\u7684\uff0c\u8be6\u7ec6\u7684\u5904\u7406\u53ef\u4ee5\u53c2\u8003\u7ed9\u51fa\u7684github\u4ee3\u7801\u3002","title":"\u786c\u4ef6\u4e09\u89d2\u51fd\u6570\u7b97\u6cd5CORDIC"},{"location":"ic/cordic.html#cordic","text":"","title":"\u786c\u4ef6\u4e09\u89d2\u51fd\u6570\u7b97\u6cd5CORDIC"},{"location":"ic/cordic.html#_1","text":"\u51fa\u4e8e\u5de5\u4f5c\u9700\u8981\uff0c\u5e0c\u671b\u80fd\u591f\u5728\u786c\u4ef6\u4e0a\u5b9e\u73b0\u4e09\u89d2\u51fd\u6570\u7b49\u8d85\u8d8a\u51fd\u6570\u7684\u8ba1\u7b97\uff0c\u4e8e\u662f\u67e5\u627e\u8d44\u6599\u6765\u627e\u5bfb\u5b9e\u73b0\u7684\u4e00\u822c\u65b9\u6cd5\uff0c\u641c\u7d22\u7ed9\u51fa\u7684\u7ed3\u679c\u51fa\u5947\u7684\u4e00\u81f4\uff0c\u5927\u5bb6\u666e\u904d\u90fd\u662f\u4f7f\u7528cordic\u7b97\u6cd5\u5b9e\u73b0\u7684\u3002\u5c3d\u7ba1\u5177\u4f53\u7684\u5b9e\u73b0\u4f1a\u6709\u5dee\u5f02\uff0c\u4f46\u6838\u5fc3\u7684\u601d\u60f3\u662f\u4e00\u81f4\u7684\u3002\u5c3d\u7ba1\u6700\u540e\u51fa\u4e8e\u5404\u79cd\u539f\u56e0\uff0c\u6ca1\u6709\u628a\u8fd9\u4e2a\u5de5\u4f5c\u505a\u5230\u6700\u540e\uff0c\u4f46\u5bf9\u4e8ecordic\u7b97\u6cd5\u7684\u7406\u8bba\u5df2\u7ecf\u57fa\u672c\u638c\u63e1\uff0c\u7279\u6b64\u8bb0\u5f55\u3002 \u503c\u5f97\u8bf4\u660e\u7684\u662f\uff0c\u7f51\u7edc\u4e0a\u8fd9\u65b9\u9762\u7684\u6587\u7ae0\u5df2\u7ecf\u5f88\u591a\u4e86\uff0c\u6240\u4ee5\u5199\u8fd9\u7bc7\u6587\u7ae0\u7684\u76ee\u7684\u662f\u628a\u5b83\u4f5c\u4e3a\u4e00\u4e2a\u601d\u8def\u5f15\u5bfc\uff0c\u800c\u4e0d\u662f\u518d\u628a\u7f51\u7edc\u4e0a\u7684\u8d44\u6599\u6284\u4e00\u904d\u3002","title":"\u80cc\u666f\u4ecb\u7ecd"},{"location":"ic/cordic.html#cordic_1","text":"\u636e\u4e86\u89e3\uff0cCORDIC(Coordinate Rotation Digital Computer)\u5750\u6807\u65cb\u8f6c\u6570\u5b57\u8ba1\u7b97\u7b97\u6cd51959\u5e74\u5c31\u88ab\u63d0\u51fa\u4e86\uff0c\u7528\u6765\u89e3\u51b3\u5bfc\u822a\u7cfb\u7edf\u4e2d\u4e09\u89d2\u51fd\u6570\u8fd0\u7b97\u7684\u95ee\u9898\uff0c\u7528\u8fd9\u79cd\u65b9\u6cd5\u80fd\u591f\u6ee1\u8db3\u5b9e\u65f6\u6027\u8981\u6c42\u3002\u90a3\u4e48\u57282021\u5e74\u6211\u4eec\u4f7f\u7528\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u663e\u7136\u4e5f\u80fd\u591f\u6ee1\u8db3\u5b9e\u65f6\u6027\u8981\u6c42\u3002 \u9996\u5148\uff0c\u8981\u4e86\u89e3\u5230\u5176\u57fa\u672c\u539f\u7406\uff0c\u7528\u6587\u5b57\u63cf\u8ff0\u5c31\u662f\u5df2\u77e5\u4e00\u4e2a\u89d2\u5ea6\u7684\u6b63\u5f26\u503ca\u548c\u4f59\u5f26\u503cb\uff0c\u7136\u540e\u8fd9\u4e2a\u89d2\u5ea6\u518d\u65cb\u8f6c\u4e00\u4e2a\u89d2\u5ea6c,\u65cb\u8f6c\u4e4b\u540e\u7684\u89d2\u5ea6\u7684\u6b63\u5f26\u503c\u548c\u4f59\u5f26\u503c\u80fd\u591f\u901a\u8fc7a,b,c\u8fd9\u4e09\u4e2a\u91cf\u6c42\u51fa\u6765\u3002\u8fd9\u63d0\u4f9b\u4e86\u9010\u6b21\u903c\u8fd1\u7684\u57fa\u7840\u3002\u5728\u9010\u6b21\u903c\u8fd1\u65f6\uff0c\u6bd4\u5982\u6211\u4eec\u6c42sin(30\u00b0)\uff0c\u5b9e\u8d28\u4e0a\u662f\u7528\u4e00\u7cfb\u5217\u5df2\u77e5\u6b63\u4f59\u5f26\u503c\u7684\u89d2\u5ea6\u7ec4\u5408\u6765\u9010\u6b21\u903c\u8fd1\u523030\u00b0\u3002(\u5f53\u7136\uff0c\u8fd9\u4e9b\u89d2\u5ea6\u90fd\u662f\u4e00\u4e9b\u7279\u5b9a\u89d2\u5ea6)\u3002 \u4e3e\u4f8b\u6765\u8bb2\uff0c30.0\u00b0 \u2248 45.0\u00b0 - 26.6\u00b0 + 14.0\u00b0 - 7.1\u00b0 + 3.6\u00b0 + 1.8\u00b0 - 0.9\u00b0 + 0.4\u00b0 - 0.2\u00b0 + 0.1\u00b0 = 30.1\u00b0 \u90a3\u4e48\u6839\u636e\u4e0a\u9762\u7684\u539f\u7406\uff0c\u77e5\u905345.0\u5ea6\u7684\u6b63\u4f59\u5f26\u503c\uff0c\u5b83\u65cb\u8f6c\u4e8626.6\u00b0\uff0c\u5c31\u6c42\u51fa\u4e86\u65cb\u8f6c\u4e4b\u540e\u7684(45.0\u00b0 - 26.6\u00b0)\u7684\u6b63\u4f59\u5f26\u503c\uff0c\u8fd9\u7b97\u4e00\u6b21\u8fed\u4ee3\uff0c\u5f53\u8fed\u4ee3\u4e8610\u6b21\u4e4b\u540e\uff0c\u5c31\u8ba1\u7b97\u51fa\u4e8630.1\u00b0\u7684\u6b63\u4f59\u5f26\u503c\uff0c\u4e5f\u5c31\u8fd1\u4f3c\u662f30\u5ea6\u7684\u6b63\u4f59\u5f26\u503c\u3002 \u90a3\u4e48\u80af\u5b9a\u4f1a\u95ee\uff0c\u4e3a\u4ec0\u4e48\u662f\u8fd9\u4e9b\u7279\u5b9a\u89d2\u5ea6\uff1f\u56e0\u4e3a\u8fd9\u4e9b\u89d2\u5ea6\u90fd\u4f1a\u4f7f\u8ba1\u7b97\u540e\u7684\u7eb5\u5750\u6807\u7f29\u51cf\u4e3a\u539f\u6765\u7684\u00bd,\u8fd9\u663e\u7136\u662f\u9010\u6b21\u903c\u8fd1\u80fd\u591f\u5feb\u901f\u63a5\u8fd1\u7684\u57fa\u7840\u3002 \u5f53\u7136\u4f60\u4e5f\u4f1a\u7591\u60d1\uff0c\u65cb\u8f6c\u540e\u7684\u89d2\u5ea6\u771f\u7684\u80fd\u591f\u901a\u8fc7a,b,c\u4e09\u4e2a\u91cf\u6c42\u51fa\u6765\u5417\uff1f\u6211\u4ece\u4e0a\u5b66\u5c31\u517b\u6210\u4e86\u4e00\u4e2a\u5f88\u4e0d\u597d\u7684\u4e60\u60ef\uff0c\u5f53\u6211\u4e0d\u660e\u767d\u539f\u7406\uff0c\u53ea\u77e5\u9053\u7ed3\u8bba\u7684\u65f6\u5019\uff0c\u5c31\u5f88\u96be\u4e0b\u624b\u505a\u4e00\u4ef6\u4e8b\u60c5\u3002\u4f46\u5176\u5b9e\u5f88\u591a\u65f6\u5019\uff0c\u5bf9\u4e8e\u5feb\u901f\u641e\u5b9a\u4e00\u4ef6\u4e8b\u60c5\u6765\u8bb2\uff0c\u539f\u7406\u5e76\u4e0d\u90a3\u4e48\u91cd\u8981\uff0c\u6bd4\u5982\u8bf4\u8003\u8bd5\u7684\u65f6\u5019\u3002\u65e2\u7136\u73b0\u5728\u4e0d\u662f\u8003\u8bd5\uff0c\u90a3\u4e48\u6211\u4eec\u8fd8\u662f\u6765\u770b\u4e00\u4e0b\u8fd9\u91cc\u9762\u7684\u539f\u7406\uff0c\u5148\u4e0d\u8981\u6015\uff0c\u521d\u4e09\u6c34\u5e73\u8db3\u591f\u4e86\u3002 \u539f\u7406\u53c2\u89c1\u94fe\u63a5\uff0c\u5176\u4e2d\u5b83\u7684\u56fe\u7684\u6807\u6ce8\u5b58\u5728\u95ee\u9898\uff0csin\u548ccos\u5199\u53cd\u4e86\uff0c\u4f46\u9664\u6b64\u4e4b\u5916\u5df2\u7ecf\u975e\u5e38\u7b80\u5355\u660e\u4e86 https://www.cnblogs.com/touchblue/p/3535968.html","title":"CORDIC\u7b97\u6cd5"},{"location":"ic/cordic.html#_2","text":"github\u4e2d\u5df2\u7ecf\u6709\u5f88\u591a\u7248\u672c\u7684\u5b9e\u73b0\uff0c\u8fd9\u91cc\u9644\u5e26\u51e0\u4e2a\u94fe\u63a5\uff0c\u65b9\u4fbf\u53c2\u8003\uff0c\u4ee3\u7801\u666e\u904d\u6bd4\u8f83\u7b80\u5355\uff0c\u4e00\u770b\u5c31\u61c2 cordic_wrapped CORDIC-all-in-one-verilog","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"ic/cordic.html#_3","text":"\u901a\u8fc7\u719f\u6089\u539f\u7406\u548c\u4ee3\u7801\uff0c\u60f3\u5fc5\u6211\u4eec\u8fd8\u53d1\u73b0\u4e86\u4e00\u4e2a\u7ec6\u8282\uff0c\u5c31\u662fcordic\u5bf9\u4e8e\u8f93\u5165\u7684\u89d2\u5ea6\u662f\u6709\u8981\u6c42\u7684\uff0c\u4e00\u822c\u7684\u5e94\u7528\u573a\u666f\uff0c\u6211\u4eec\u4e0d\u4f1a\u5bf9\u89d2\u5ea6\u505a\u9650\u5236\uff0c\u4f46cordic\u53ea\u80fd\u5904\u7406[-99.7\u00b0,99.7\u00b0]\u4e4b\u95f4\u7684\u89d2\u5ea6\uff0c\u56e0\u6b64\u5bf9\u4e8e\u66f4\u5927\u7684\u89d2\u5ea6\uff0c\u5c31\u9700\u8981\u5bf92\u03a0\u53d6\u4f59\u3002 \u8fd9\u91cc\u9762\u6d89\u53ca\u9664\u6cd5\u548c\u03a0\u7684\u7cbe\u5ea6\u95ee\u9898\uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u5904\u7406 int shift = ( int ) floor ( a / ( M_PI / 2.0 )); double b = a - shift * ( M_PI / 2.0 ); \u5176\u4e2da\u4e3a\u8f93\u5165\u89d2\u5ea6\uff0cb\u4e3a\u53d6\u4f59\u4e4b\u540e\u7684\u89d2\u5ea6\uff0c\u5047\u5982\u4f7f\u7528fp16\u6765\u8868\u793aM_PI\uff0ca\u6570\u503c\u8f83\u5927\u65f6\uff0c\u5fc5\u7136\u4f1a\u5e26\u6765\u7cbe\u5ea6\u95ee\u9898,\u6700\u7b80\u5355\u7684\u505a\u6cd5\u662f\u5185\u90e8\u8ba1\u7b97\u91c7\u7528fp32,\u8ba1\u7b97\u5b8c\u6210\u540e\u518d\u7528fp16\u8fdb\u884c\u8868\u793a\u3002","title":"\u5173\u4e8e\u9884\u5904\u7406"},{"location":"ic/cordic.html#_4","text":"\u5bf9\u4e8e\u8ba1\u7b97\u4e0d\u540c\u8c61\u9650\u7684\u89d2\u5ea6\uff0c\u5728\u7b26\u53f7\u4e0a\u662f\u4e0d\u540c\u7684\uff0c\u8be6\u7ec6\u7684\u5904\u7406\u53ef\u4ee5\u53c2\u8003\u7ed9\u51fa\u7684github\u4ee3\u7801\u3002","title":"\u5173\u4e8e\u8c61\u9650"},{"location":"ic/esl.html","text":"ESL \u00b6 [ https://blog.csdn.net/yesky12/article/details/637376 ] [ https://blog.csdn.net/yesky12/article/details/637335 ]","title":"ESL"},{"location":"ic/esl.html#esl","text":"[ https://blog.csdn.net/yesky12/article/details/637376 ] [ https://blog.csdn.net/yesky12/article/details/637335 ]","title":"ESL"},{"location":"ic/ic_develop.html","text":"IC\u8bbe\u8ba1\u4e0e\u5f00\u53d1\u6d41\u7a0b \u00b6 \u5b66\u4e60verilog\uff0c\u91cd\u70b9\u4e0d\u5728\u4e8everilog\u8bed\u8a00\u672c\u8eab\uff0c\u5927\u5bb6\u4e00\u81f4\u540c\u610fverilog\u6bd4C\u8bed\u8a00\u7b80\u5355\u3002\u5173\u952e\u5728\u4e8everilog\u4ee3\u8868\u4e86\u4e00\u4e2a\u9886\u57df\u7684\u8de8\u8d8a\uff0c\u5b9e\u9645\u4e0a\u662f\u4ece\u8f6f\u4ef6\u9886\u57df\u5230IC\u9886\u57df\u7684\u8de8\u8d8a\u3002\u6240\u4ee5\u5728\u6b64\u4e4b\u524d\u9700\u8981\u5148\u4e86\u89e3\u76ee\u524d\u82af\u7247\u884c\u4e1aIC\u8bbe\u8ba1\u4e0e\u5f00\u53d1\u7684\u6d41\u7a0b IC\u5f00\u53d1\u6d41\u7a0b \u00b6 IC\u8bbe\u8ba1\u662f\u4e00\u4e2a\u81ea\u4e0a\u800c\u4e0b\u7684\u8bbe\u8ba1\uff0c\u8fd9\u4e2a\u5f88\u597d\u7406\u89e3\uff0cIC\u8bbe\u8ba1\u7684\u6574\u4e2a\u5468\u671f\u957f\uff0c\u5f88\u7cbe\u7ec6\uff0c\u5982\u679c\u9700\u6c42\u4e0d\u660e\u786e\uff0c\u90a3\u4e48\u540e\u671f\u5f88\u96be\u4fee\u6539\u3002\u6709\u70b9\u513f\u50cf\u76d6\u623f\u5b50\uff0c\u548c\u73b0\u5728\u7684 \u4e92\u8054\u7f51\u8f6f\u4ef6\u5f00\u53d1\u6709\u6bd4\u8f83\u660e\u663e\u7684\u533a\u522b\u3002 \u76ee\u524d\u6765\u8bb2\uff0c\u884c\u4e3a\u7ea7\u63cf\u8ff0\u5411RTL\u7ea7\u7684\u63cf\u8ff0\u4ecd\u7136\u662f\u5168\u624b\u5de5\u5b8c\u6210\u7684\uff0cRTL\u63cf\u8ff0\u5230\u95e8\u7ea7\u7f51\u8868\u53ef\u4ee5\u4f7f\u7528\u7efc\u5408\u5de5\u5177\u6765\u5b9e\u73b0\uff0c\u518d\u6709\u81ea\u52a8\u5e03\u5c40\u5e03\u7ebf\u5de5\u5177\u6765\u5b9e\u73b0\u6700\u7ec8\u7684\u7269\u7406\u7248\u56fe\u3002\u73b0\u5728\u4e5f\u6709\u884c\u4e3a\u7ea7\u80fd\u76f4\u63a5\u8f6c\u6362\u4e3aRTL\u7ea7\u7684\u5de5\u5177\uff0c\u867d\u7136\u4e0d\u6210\u719f\uff0c\u4f46\u8fd9\u662f\u4e00\u79cd\u8d8b\u52bf\u3002\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u79cd\u8d8b\u52bf\u662f\u5fc5\u7136\u7684\uff0c\u5c31\u50cf\u7531\u673a\u5668\u7801\u5230\u6c47\u7f16\u518d\u5230C\u8bed\u8a00\u4ee5\u53ca\u66f4\u9ad8\u7ea7\u7684\u8bed\u8a00\u3002\u5f53\u7136\uff0c\u5728\u8ffd\u6c42\u6027\u80fd\u65f6\uff0c\u9ad8\u7ea7\u8bed\u8a00\u5d4c\u5165\u6c47\u7f16\u4e5f\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\uff0cHDL\u4e5f\u5e94\u8be5\u5177\u5907\u8fd9\u79cd\u80fd\u591f\u5d4c\u5165\u7684\u80fd\u529b\u3002 \u76ee\u524d\u5927\u5bb6\u666e\u904d\u91c7\u7528 VCS + Verdi + UVM \u7684\u5f00\u53d1\u9a8c\u8bc1\u65b9\u6848 |-------------------------------------------------------------------------------------- | | |-----------------| input *************** | | RTL xxxx.v | ------>* * V |-----------------| * * ********************** * VCS * * * |-----------------| input * * output |--------------| input * * | testbech.v | ------>* compile * ----------->| xxxx.fsdb | ------------>* Verdi * |-----------------| * * |--------------| * * * * * * |-----------------| input * * ********************** | filelist.f | ------>* * ^ |-----------------| *************** | | | |--------------------------------------------------------------------------------------- \u529f\u80fd\u4eff\u771f\uff08\u524d\u4eff\u771f\uff09 \u00b6 \u5bf9\u5efa\u6a21\u6587\u4ef6\u8fdb\u884c\u7f16\u8bd1\uff0c\u5bf9\u6a21\u578b\u7535\u8def\u8fdb\u884c\u529f\u80fd\u4e0a\u7684\u4eff\u771f\u9a8c\u8bc1\uff0c\u67e5\u627e\u8bbe\u8ba1\u7684\u9519\u8bef\u5e76\u4fee\u6b63\u3002 \u6b64\u65f6\u7684\u4eff\u771f\u9a8c\u8bc1\u5e76\u6ca1\u6709\u8003\u8651\u5230\u4fe1\u53f7\u7684\u5ef6\u8fdf\u7b49\u4e00\u4e9b timing \u56e0\u7d20\uff0c\u53ea\u662f\u9a8c\u8bc1\u903b\u8f91\u4e0a\u7684\u6b63\u786e\u6027\u3002 \u903b\u8f91\u7efc\u5408 \u00b6 \u7efc\u5408\uff08synthesize\uff09\uff0c\u5c31\u662f\u5728\u6807\u51c6\u5355\u5143\u5e93\u548c\u7279\u5b9a\u7684\u8bbe\u8ba1\u7ea6\u675f\u7684\u57fa\u7840\u4e0a\uff0c\u5c06\u8bbe\u8ba1\u7684\u9ad8\u5c42\u6b21\u63cf\u8ff0\uff08Verilog \u5efa\u6a21\uff09\u8f6c\u6362\u4e3a\u95e8\u7ea7\u7f51\u8868\u7684\u8fc7\u7a0b\u3002\u903b\u8f91\u7efc\u5408\u7684\u76ee\u7684\u662f\u4ea7\u751f\u7269\u7406\u7535\u8def\u95e8\u7ea7\u7ed3\u6784\uff0c\u5e76\u5728\u903b\u8f91\u3001\u65f6\u5e8f\u4e0a\u8fdb\u884c\u4e00\u5b9a\u7a0b\u5ea6\u7684\u4f18\u5316\uff0c\u5bfb\u6c42\u903b\u8f91\u3001\u9762\u79ef\u3001\u529f\u8017\u7684\u5e73\u8861\uff0c\u589e\u5f3a\u7535\u8def\u7684\u53ef\u6d4b\u8bd5\u6027\u3002 \u4f46\u4e0d\u662f\u6240\u6709\u7684 Verilog \u8bed\u53e5\u90fd\u662f\u53ef\u4ee5\u7efc\u5408\u6210\u903b\u8f91\u5355\u5143\u7684\uff0c\u4f8b\u5982\u65f6\u5ef6\u8bed\u53e5\u3002 \u5e03\u5c40\u5e03\u7ebf \u00b6 \u6839\u636e\u903b\u8f91\u7efc\u5408\u51fa\u7684\u7f51\u8868\u4e0e\u7ea6\u675f\u6587\u4ef6\uff0c\u5229\u7528\u5382\u5bb6\u63d0\u4f9b\u7684\u5404\u79cd\u57fa\u672c\u6807\u51c6\u5355\u5143\u5e93\uff0c\u5bf9\u95e8\u7ea7\u7535\u8def\u8fdb\u884c\u5e03\u5c40\u5e03\u7ebf\u3002\u81f3\u6b64\uff0c\u5df2\u7ecf\u5c06 Verilog \u8bbe\u8ba1\u7684\u6570\u5b57\u7535\u8def\uff0c\u8bbe\u8ba1\u6210\u7531\u6807\u51c6\u5355\u5143\u5e93\u7ec4\u6210\u7684\u6570\u5b57\u7535\u8def\u3002 \u65f6\u5e8f\u4eff\u771f\uff08\u540e\u4eff\u771f\uff09 \u00b6 \u5e03\u5c40\u5e03\u7ebf\u540e\uff0c\u7535\u8def\u6a21\u578b\u4e2d\u5df2\u7ecf\u5305\u542b\u4e86\u65f6\u5ef6\u4fe1\u606f\u3002\u5229\u7528\u5728\u5e03\u5c40\u5e03\u7ebf\u4e2d\u83b7\u5f97\u7684\u7cbe\u786e\u53c2\u6570\uff0c\u7528\u4eff\u771f\u8f6f\u4ef6\u9a8c\u8bc1\u7535\u8def\u7684\u65f6\u5e8f\u3002\u5355\u5143\u5668\u4ef6\u7684\u4e0d\u540c\u3001\u5e03\u5c40\u5e03\u7ebf\u65b9\u6848\u90fd\u4f1a\u7ed9\u7535\u8def\u7684\u65f6\u5e8f\u9020\u6210\u5f71\u54cd\uff0c\u4e25\u91cd\u65f6\u4f1a\u51fa\u73b0\u9519\u8bef\u3002\u51fa\u9519\u540e\u53ef\u80fd\u5c31\u9700\u8981\u91cd\u65b0\u4fee\u6539 RTL\uff08\u5bc4\u5b58\u5668\u4f20\u8f93\u7ea7\u63cf\u8ff0\uff0c\u5373 Verilog \u521d\u7248\u63cf\u8ff0\uff09\uff0c\u91cd\u590d\u540e\u9762\u7684\u6b65\u9aa4\u3002\u8fd9\u6837\u7684\u8fc7\u7a0b\u53ef\u80fd\u53cd\u590d\u591a\u6b21\uff0c\u76f4\u81f3\u9519\u8bef\u5b8c\u5168\u6392\u9664 IC\u57fa\u7840 \u00b6 Wafer\u548cDie \u00b6 wafer\u662f\u6210\u54c1\u7684\u6676\u5706\uff0c\u662f\u539f\u59cb\u7684\u7845\u952d\uff0c\u7ecf\u8fc7\u6eb6\u89e3\u5149\u523b\u80f6\uff0c\u8680\u523b\uff0c\u79bb\u5b50\u6ce8\u5165\uff0c\u7535\u9540\uff0c\u94dc\u5c42\u751f\u957f\u7b49\u64cd\u4f5c\u4e4b\u540e\u7684\u6210\u54c1\uff0c\u5c06wafer\u5207\u5f00\uff0c\u5f97\u5230\u4e00\u4e2a\u4e2aCPU\u7684\u6838\u5fc3\uff0cDie. CPU\u4f1a\u5185\u7f6e\u5f88\u591agate,\u5728binning\u9636\u6bb5\uff0c\u5c01\u6d4b\u53d1\u73b0\u95ee\u9898\u5c31\u4f1a\u5c01\u95ed\u51fa\u73b0\u9519\u8bef\u7684\u90e8\u4ef6\u3002CPU\u7684\u6210\u672c\u4e00\u4e2a\u91cd\u8981\u7684\u53c2\u8003\u91cf\u662f\u6bcf\u4e2awafer\u80fd\u5236\u9020\u591a\u5c11\u4e2aDie,Die\u7684\u5927\u5c0f\u4f1a\u5f71\u54cdWafer\u7684\u6d6a\u8d39\u6bd4\u4f8b\uff0c\u4e5f\u4f1a\u5f71\u54cdDie\u7684\u826f\u7387(yield). \u9891\u7387\u548c\u7535\u538b \u00b6 \u9891\u7387\u80fd\u591f\u63d0\u9ad8CPU\u7684\u6027\u80fd\uff0c\u4f46\u56e0\u4e3a\u95e8\u5ef6\u8fdf\u7684\u95ee\u9898\u5b58\u5728\uff0c\u7ec4\u6210CPU\u7684FET\u5145\u653e\u7535\u90fd\u9700\u8981\u4e00\u5b9a\u7684\u65f6\u95f4\uff0c\u9891\u7387\u9ad8\u4e8e\u8fd9\u4e2a\u65f6\u95f4\uff0cCPU\u5c31\u4f1a\u8fd0\u884c\u9519\u8bef\u3002\u63d0\u9ad8\u7535\u538b\u80fd\u591f\u63d0\u9ad8FET\u7684\u5145\u653e\u7535\u901f\u5ea6\uff0c\u56e0\u6b64\uff0c\u9891\u7387\u7684\u63d0\u9ad8\u4e00\u822c\u9700\u8981\u4f34\u968f\u7740\u7535\u538b\u7684\u63d0\u9ad8\u3002 \u5149\u901f\u5927\u6982\u662f\u6bcf\u79d230w\u516c\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u4e00\u4e0b\u5728\u56fa\u5b9a\u9891\u7387\u4e0b\uff0c\u7535\u4fe1\u53f7\u7684\u4f20\u64ad\u8ddd\u79bb\u3002\u6bd4\u598210GHz, \u90a3\u4e48\u5c31\u662f30w/10GHz = 30mm,\u5047\u8bbe\u4e00\u4e2adie\u7684\u5bbd\u5ea6\u662f10mm, \u90a3\u4e48CPU\u7684\u4e3b\u9891\u7406\u8bba\u4e0a\u4e0d\u4f1a\u8d85\u8fc730GHz\u3002 \u8001\u5316(burn-in) \u00b6 \u7247\u95f4\u4e92\u8054 \u00b6 \u4e00\u4e2apackage\u5c01\u88c5\u591a\u4e2a\u72ec\u7acb\u7684Die","title":"IC\u8bbe\u8ba1\u4e0e\u5f00\u53d1\u6d41\u7a0b"},{"location":"ic/ic_develop.html#ic","text":"\u5b66\u4e60verilog\uff0c\u91cd\u70b9\u4e0d\u5728\u4e8everilog\u8bed\u8a00\u672c\u8eab\uff0c\u5927\u5bb6\u4e00\u81f4\u540c\u610fverilog\u6bd4C\u8bed\u8a00\u7b80\u5355\u3002\u5173\u952e\u5728\u4e8everilog\u4ee3\u8868\u4e86\u4e00\u4e2a\u9886\u57df\u7684\u8de8\u8d8a\uff0c\u5b9e\u9645\u4e0a\u662f\u4ece\u8f6f\u4ef6\u9886\u57df\u5230IC\u9886\u57df\u7684\u8de8\u8d8a\u3002\u6240\u4ee5\u5728\u6b64\u4e4b\u524d\u9700\u8981\u5148\u4e86\u89e3\u76ee\u524d\u82af\u7247\u884c\u4e1aIC\u8bbe\u8ba1\u4e0e\u5f00\u53d1\u7684\u6d41\u7a0b","title":"IC\u8bbe\u8ba1\u4e0e\u5f00\u53d1\u6d41\u7a0b"},{"location":"ic/ic_develop.html#ic_1","text":"IC\u8bbe\u8ba1\u662f\u4e00\u4e2a\u81ea\u4e0a\u800c\u4e0b\u7684\u8bbe\u8ba1\uff0c\u8fd9\u4e2a\u5f88\u597d\u7406\u89e3\uff0cIC\u8bbe\u8ba1\u7684\u6574\u4e2a\u5468\u671f\u957f\uff0c\u5f88\u7cbe\u7ec6\uff0c\u5982\u679c\u9700\u6c42\u4e0d\u660e\u786e\uff0c\u90a3\u4e48\u540e\u671f\u5f88\u96be\u4fee\u6539\u3002\u6709\u70b9\u513f\u50cf\u76d6\u623f\u5b50\uff0c\u548c\u73b0\u5728\u7684 \u4e92\u8054\u7f51\u8f6f\u4ef6\u5f00\u53d1\u6709\u6bd4\u8f83\u660e\u663e\u7684\u533a\u522b\u3002 \u76ee\u524d\u6765\u8bb2\uff0c\u884c\u4e3a\u7ea7\u63cf\u8ff0\u5411RTL\u7ea7\u7684\u63cf\u8ff0\u4ecd\u7136\u662f\u5168\u624b\u5de5\u5b8c\u6210\u7684\uff0cRTL\u63cf\u8ff0\u5230\u95e8\u7ea7\u7f51\u8868\u53ef\u4ee5\u4f7f\u7528\u7efc\u5408\u5de5\u5177\u6765\u5b9e\u73b0\uff0c\u518d\u6709\u81ea\u52a8\u5e03\u5c40\u5e03\u7ebf\u5de5\u5177\u6765\u5b9e\u73b0\u6700\u7ec8\u7684\u7269\u7406\u7248\u56fe\u3002\u73b0\u5728\u4e5f\u6709\u884c\u4e3a\u7ea7\u80fd\u76f4\u63a5\u8f6c\u6362\u4e3aRTL\u7ea7\u7684\u5de5\u5177\uff0c\u867d\u7136\u4e0d\u6210\u719f\uff0c\u4f46\u8fd9\u662f\u4e00\u79cd\u8d8b\u52bf\u3002\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u79cd\u8d8b\u52bf\u662f\u5fc5\u7136\u7684\uff0c\u5c31\u50cf\u7531\u673a\u5668\u7801\u5230\u6c47\u7f16\u518d\u5230C\u8bed\u8a00\u4ee5\u53ca\u66f4\u9ad8\u7ea7\u7684\u8bed\u8a00\u3002\u5f53\u7136\uff0c\u5728\u8ffd\u6c42\u6027\u80fd\u65f6\uff0c\u9ad8\u7ea7\u8bed\u8a00\u5d4c\u5165\u6c47\u7f16\u4e5f\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\uff0cHDL\u4e5f\u5e94\u8be5\u5177\u5907\u8fd9\u79cd\u80fd\u591f\u5d4c\u5165\u7684\u80fd\u529b\u3002 \u76ee\u524d\u5927\u5bb6\u666e\u904d\u91c7\u7528 VCS + Verdi + UVM \u7684\u5f00\u53d1\u9a8c\u8bc1\u65b9\u6848 |-------------------------------------------------------------------------------------- | | |-----------------| input *************** | | RTL xxxx.v | ------>* * V |-----------------| * * ********************** * VCS * * * |-----------------| input * * output |--------------| input * * | testbech.v | ------>* compile * ----------->| xxxx.fsdb | ------------>* Verdi * |-----------------| * * |--------------| * * * * * * |-----------------| input * * ********************** | filelist.f | ------>* * ^ |-----------------| *************** | | | |---------------------------------------------------------------------------------------","title":"IC\u5f00\u53d1\u6d41\u7a0b"},{"location":"ic/ic_develop.html#_1","text":"\u5bf9\u5efa\u6a21\u6587\u4ef6\u8fdb\u884c\u7f16\u8bd1\uff0c\u5bf9\u6a21\u578b\u7535\u8def\u8fdb\u884c\u529f\u80fd\u4e0a\u7684\u4eff\u771f\u9a8c\u8bc1\uff0c\u67e5\u627e\u8bbe\u8ba1\u7684\u9519\u8bef\u5e76\u4fee\u6b63\u3002 \u6b64\u65f6\u7684\u4eff\u771f\u9a8c\u8bc1\u5e76\u6ca1\u6709\u8003\u8651\u5230\u4fe1\u53f7\u7684\u5ef6\u8fdf\u7b49\u4e00\u4e9b timing \u56e0\u7d20\uff0c\u53ea\u662f\u9a8c\u8bc1\u903b\u8f91\u4e0a\u7684\u6b63\u786e\u6027\u3002","title":"\u529f\u80fd\u4eff\u771f\uff08\u524d\u4eff\u771f\uff09"},{"location":"ic/ic_develop.html#_2","text":"\u7efc\u5408\uff08synthesize\uff09\uff0c\u5c31\u662f\u5728\u6807\u51c6\u5355\u5143\u5e93\u548c\u7279\u5b9a\u7684\u8bbe\u8ba1\u7ea6\u675f\u7684\u57fa\u7840\u4e0a\uff0c\u5c06\u8bbe\u8ba1\u7684\u9ad8\u5c42\u6b21\u63cf\u8ff0\uff08Verilog \u5efa\u6a21\uff09\u8f6c\u6362\u4e3a\u95e8\u7ea7\u7f51\u8868\u7684\u8fc7\u7a0b\u3002\u903b\u8f91\u7efc\u5408\u7684\u76ee\u7684\u662f\u4ea7\u751f\u7269\u7406\u7535\u8def\u95e8\u7ea7\u7ed3\u6784\uff0c\u5e76\u5728\u903b\u8f91\u3001\u65f6\u5e8f\u4e0a\u8fdb\u884c\u4e00\u5b9a\u7a0b\u5ea6\u7684\u4f18\u5316\uff0c\u5bfb\u6c42\u903b\u8f91\u3001\u9762\u79ef\u3001\u529f\u8017\u7684\u5e73\u8861\uff0c\u589e\u5f3a\u7535\u8def\u7684\u53ef\u6d4b\u8bd5\u6027\u3002 \u4f46\u4e0d\u662f\u6240\u6709\u7684 Verilog \u8bed\u53e5\u90fd\u662f\u53ef\u4ee5\u7efc\u5408\u6210\u903b\u8f91\u5355\u5143\u7684\uff0c\u4f8b\u5982\u65f6\u5ef6\u8bed\u53e5\u3002","title":"\u903b\u8f91\u7efc\u5408"},{"location":"ic/ic_develop.html#_3","text":"\u6839\u636e\u903b\u8f91\u7efc\u5408\u51fa\u7684\u7f51\u8868\u4e0e\u7ea6\u675f\u6587\u4ef6\uff0c\u5229\u7528\u5382\u5bb6\u63d0\u4f9b\u7684\u5404\u79cd\u57fa\u672c\u6807\u51c6\u5355\u5143\u5e93\uff0c\u5bf9\u95e8\u7ea7\u7535\u8def\u8fdb\u884c\u5e03\u5c40\u5e03\u7ebf\u3002\u81f3\u6b64\uff0c\u5df2\u7ecf\u5c06 Verilog \u8bbe\u8ba1\u7684\u6570\u5b57\u7535\u8def\uff0c\u8bbe\u8ba1\u6210\u7531\u6807\u51c6\u5355\u5143\u5e93\u7ec4\u6210\u7684\u6570\u5b57\u7535\u8def\u3002","title":"\u5e03\u5c40\u5e03\u7ebf"},{"location":"ic/ic_develop.html#_4","text":"\u5e03\u5c40\u5e03\u7ebf\u540e\uff0c\u7535\u8def\u6a21\u578b\u4e2d\u5df2\u7ecf\u5305\u542b\u4e86\u65f6\u5ef6\u4fe1\u606f\u3002\u5229\u7528\u5728\u5e03\u5c40\u5e03\u7ebf\u4e2d\u83b7\u5f97\u7684\u7cbe\u786e\u53c2\u6570\uff0c\u7528\u4eff\u771f\u8f6f\u4ef6\u9a8c\u8bc1\u7535\u8def\u7684\u65f6\u5e8f\u3002\u5355\u5143\u5668\u4ef6\u7684\u4e0d\u540c\u3001\u5e03\u5c40\u5e03\u7ebf\u65b9\u6848\u90fd\u4f1a\u7ed9\u7535\u8def\u7684\u65f6\u5e8f\u9020\u6210\u5f71\u54cd\uff0c\u4e25\u91cd\u65f6\u4f1a\u51fa\u73b0\u9519\u8bef\u3002\u51fa\u9519\u540e\u53ef\u80fd\u5c31\u9700\u8981\u91cd\u65b0\u4fee\u6539 RTL\uff08\u5bc4\u5b58\u5668\u4f20\u8f93\u7ea7\u63cf\u8ff0\uff0c\u5373 Verilog \u521d\u7248\u63cf\u8ff0\uff09\uff0c\u91cd\u590d\u540e\u9762\u7684\u6b65\u9aa4\u3002\u8fd9\u6837\u7684\u8fc7\u7a0b\u53ef\u80fd\u53cd\u590d\u591a\u6b21\uff0c\u76f4\u81f3\u9519\u8bef\u5b8c\u5168\u6392\u9664","title":"\u65f6\u5e8f\u4eff\u771f\uff08\u540e\u4eff\u771f\uff09"},{"location":"ic/ic_develop.html#ic_2","text":"","title":"IC\u57fa\u7840"},{"location":"ic/ic_develop.html#waferdie","text":"wafer\u662f\u6210\u54c1\u7684\u6676\u5706\uff0c\u662f\u539f\u59cb\u7684\u7845\u952d\uff0c\u7ecf\u8fc7\u6eb6\u89e3\u5149\u523b\u80f6\uff0c\u8680\u523b\uff0c\u79bb\u5b50\u6ce8\u5165\uff0c\u7535\u9540\uff0c\u94dc\u5c42\u751f\u957f\u7b49\u64cd\u4f5c\u4e4b\u540e\u7684\u6210\u54c1\uff0c\u5c06wafer\u5207\u5f00\uff0c\u5f97\u5230\u4e00\u4e2a\u4e2aCPU\u7684\u6838\u5fc3\uff0cDie. CPU\u4f1a\u5185\u7f6e\u5f88\u591agate,\u5728binning\u9636\u6bb5\uff0c\u5c01\u6d4b\u53d1\u73b0\u95ee\u9898\u5c31\u4f1a\u5c01\u95ed\u51fa\u73b0\u9519\u8bef\u7684\u90e8\u4ef6\u3002CPU\u7684\u6210\u672c\u4e00\u4e2a\u91cd\u8981\u7684\u53c2\u8003\u91cf\u662f\u6bcf\u4e2awafer\u80fd\u5236\u9020\u591a\u5c11\u4e2aDie,Die\u7684\u5927\u5c0f\u4f1a\u5f71\u54cdWafer\u7684\u6d6a\u8d39\u6bd4\u4f8b\uff0c\u4e5f\u4f1a\u5f71\u54cdDie\u7684\u826f\u7387(yield).","title":"Wafer\u548cDie"},{"location":"ic/ic_develop.html#_5","text":"\u9891\u7387\u80fd\u591f\u63d0\u9ad8CPU\u7684\u6027\u80fd\uff0c\u4f46\u56e0\u4e3a\u95e8\u5ef6\u8fdf\u7684\u95ee\u9898\u5b58\u5728\uff0c\u7ec4\u6210CPU\u7684FET\u5145\u653e\u7535\u90fd\u9700\u8981\u4e00\u5b9a\u7684\u65f6\u95f4\uff0c\u9891\u7387\u9ad8\u4e8e\u8fd9\u4e2a\u65f6\u95f4\uff0cCPU\u5c31\u4f1a\u8fd0\u884c\u9519\u8bef\u3002\u63d0\u9ad8\u7535\u538b\u80fd\u591f\u63d0\u9ad8FET\u7684\u5145\u653e\u7535\u901f\u5ea6\uff0c\u56e0\u6b64\uff0c\u9891\u7387\u7684\u63d0\u9ad8\u4e00\u822c\u9700\u8981\u4f34\u968f\u7740\u7535\u538b\u7684\u63d0\u9ad8\u3002 \u5149\u901f\u5927\u6982\u662f\u6bcf\u79d230w\u516c\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u4e00\u4e0b\u5728\u56fa\u5b9a\u9891\u7387\u4e0b\uff0c\u7535\u4fe1\u53f7\u7684\u4f20\u64ad\u8ddd\u79bb\u3002\u6bd4\u598210GHz, \u90a3\u4e48\u5c31\u662f30w/10GHz = 30mm,\u5047\u8bbe\u4e00\u4e2adie\u7684\u5bbd\u5ea6\u662f10mm, \u90a3\u4e48CPU\u7684\u4e3b\u9891\u7406\u8bba\u4e0a\u4e0d\u4f1a\u8d85\u8fc730GHz\u3002","title":"\u9891\u7387\u548c\u7535\u538b"},{"location":"ic/ic_develop.html#burn-in","text":"","title":"\u8001\u5316(burn-in)"},{"location":"ic/ic_develop.html#_6","text":"\u4e00\u4e2apackage\u5c01\u88c5\u591a\u4e2a\u72ec\u7acb\u7684Die","title":"\u7247\u95f4\u4e92\u8054"},{"location":"ic/pcie.html","text":"PCIE \u00b6 PCIE \u7f29\u5199 \u62d3\u6251 RC(root complex) Endpoints switch \u4e1a\u52a1\u5c42 \u6982\u8ff0 \u5305\u683c\u5f0f \u8def\u7531\u548c\u5730\u5740\u89c4\u5219 \u5730\u5740\u8def\u7531\u89c4\u5219 ID\u8def\u7531\u89c4\u5219 first/last DW byte transaction descriptor \u5185\u5b58/IO/\u914d\u7f6e\u8bf7\u6c42 \u6d88\u606f\u8bf7\u6c42 completion\u89c4\u5219 \u63a5\u6536TLP\u7684\u5904\u7406 \u987a\u5e8f\u89c4\u5219 \u865a\u62df\u901a\u9053\u673a\u5236 \u6d41\u63a7 \u5b8c\u6210\u8d85\u65f6\u673a\u5236 \u6570\u636e\u94fe\u8def\u5c42 \u4e2d\u65ad PCIe\u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u7684\u5e7f\u6cdb\u7528\u4e8e\u4e0d\u540c\u7684\u8ba1\u7b97\u548c\u901a\u4fe1\u5e73\u53f0\u7684\u901a\u7528IO\u4e92\u8054\u534f\u8bae\u3002 \u5b83\u5177\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a \u4e32\u884c\u5168\u53cc\u5de5 \u6570\u636e\u4ee5\u5305(packet)\u7684\u5f62\u5f0f\u4f20\u8f93 \u91c7\u7528\u5dee\u5206\u4fe1\u53f7\u63d0\u9ad8\u7a33\u5b9a\u6027 \u5d4c\u5165\u5f0f\u65f6\u949f(embedded clock)\u6280\u672f\uff0c\u53d1\u9001\u7aef\u4e0d\u9700\u8981\u5411\u63a5\u6536\u7aef\u53d1\u9001\u65f6\u949f\uff0c\u63a5\u6536\u7aef\u80fd\u591f\u901a\u8fc7\u7f16\u7801\u4ece\u6570\u636elane\u4e2d\u6062\u590d PCIe\u5b9a\u4e49\u4e86\u4e09\u4e2a\u903b\u8f91\u5c42\uff1a \u4e1a\u52a1\u5c42(Transaction Layer) \u4e3b\u8981\u8d1f\u8d23TLP(transaction layer packet)\u7684\u7ec4\u5305\u548c\u89e3\u5305\uff0cTLP\u662f\u7528\u6765\u4e1a\u52a1\u901a\u4fe1\u7684\uff0c\u5305\u62ec\u8bfb\u5199\u548c\u4e00\u4e9b\u7279\u5b9a\u7c7b\u578b\u7684\u4e8b\u4ef6\u3002\u4e1a\u52a1\u5c42\u4e5f\u8d1f\u8d23TLP\u7684credit-based\u6d41\u63a7\u3002 \u4e1a\u52a1\u5c42\u652f\u6301\u56db\u79cd\u5730\u5740\u7a7a\u95f4\uff0c\u4e09\u4e2aPCI\u5730\u5740\u7a7a\u95f4(memory,I/O,configuration)\u548cmessage\u7a7a\u95f4\u3002 message\u7a7a\u95f4\u7528\u6765\u652f\u6301\u6240\u6709\u7684\u524d\u8fb9\u5e26\u4fe1\u53f7\uff0c\u6bd4\u5982\u4e2d\u65ad\uff0c\u7535\u6e90\u7ba1\u7406\u8bf7\u6c42\u7b49\u3002 \u6570\u636e\u94fe\u8def\u5c42(Data Link Layer) \u6570\u636e\u94fe\u8def\u5c42\u8d1f\u8d23\u94fe\u8def\u7ba1\u7406\u548c\u6570\u636e\u5b8c\u6574\u6027\uff0c\u5305\u542b\u9519\u8bef\u68c0\u67e5\u548c\u6821\u6b63\u3002\u6570\u636e\u94fe\u8def\u5c42\u63a5\u6536\u63a5\u6536\u4e1a\u52a1\u5c42\u6253\u5305\u7684TLP,\u8ba1\u7b97\u5e76\u6dfb\u52a0\u6570\u636e\u4fdd\u62a4\u7801\u548cTLP\u5e8f\u5217\u53f7\uff0c\u5c06\u4ed6\u4eec\u63d0\u4ea4\u5230\u7269\u7406\u5c42\u4ee5\u8fdb\u884c\u94fe\u8def\u4f20\u64ad\u3002\u540c\u65f6\uff0c\u6570\u636e\u94fe\u8def\u5c42\u7684\u63a5\u6536\u90e8\u5206\u8d1f\u8d23\u68c0\u67e5\u63a5\u6536\u5230\u7684TLP\u7684\u5b8c\u6574\u6027\u5e76\u4e14\u628a\u4ed6\u4eec\u63d0\u4ea4\u5230\u4e1a\u52a1\u5c42\u505a\u5176\u4ed6\u7684\u5904\u7406\u3002\u4e00\u4f46\u68c0\u6d4b\u5230TLP\u9519\u8bef\uff0c\u8fd9\u4e00\u5c42\u4f1a\u8d1f\u8d23\u8bf7\u6c42\u91cd\u65b0\u4f20\u8f93TLP\u76f4\u5230\u63a5\u6536\u6b63\u786e\u6216\u8005\u94fe\u8def\u88ab\u8ba4\u5b9a\u4e3a\u6709\u9519\u8bef\u3002 \u6570\u636e\u94fe\u8def\u5c42\u4e5f\u4f1a\u4ea7\u751f\u6216\u5904\u7406\u7528\u4e8e\u94fe\u8def\u7ba1\u7406\u7684\u6570\u636e\u5305\u3002DLLP(data link layer packet)\u5c06\u4f1a\u5728\u7684\u65f6\u5019\u4f7f\u7528 \u7269\u7406\u5c42(Physical Layer) \u5c06\u6765\u603b\u7ebf\u901f\u5ea6\uff0c\u7f16\u7801\u6280\u672f\u6216\u8005\u901a\u4fe1\u4ecb\u8d28\u53ef\u80fd\u53ea\u4f1a\u5f71\u54cd\u7269\u7406\u5c42 \u6bcf\u4e2a\u5c42\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u4e00\u4e2a\u662f\u5904\u7406outbound\u4fe1\u606f\uff0c\u4e00\u4e2a\u5904\u7406inbound\u4fe1\u606f \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6bcf\u4e00\u5c42\u5728\u53d1\u9001\u7684\u65f6\u5019\u90fd\u4f1a\u7ed9\u6570\u636e\u5305\u6dfb\u52a0\u4e00\u4e9b\u5fc5\u8981\u7684\u4fe1\u606f \u7f29\u5199 \u00b6 Multi-Function Device (MFD) Alternative Routing-ID Interpretation (ARI) Steering Tag (ST) Processing Hint (PH) Read Completion Boundary (RCB) Non-Posted Request (NPR) Virtual Channel (VC) Multi-Function Virtual Channel (MFVC) Traffic Class (TC) Flow Control (FC) \u62d3\u6251 \u00b6 RC(root complex) \u00b6 RC\u8868\u793aIO\u5c42\u7ea7\u7ed3\u6784\u7684\u6839\uff0c\u8fde\u63a5\u4e86cpu\u53ca\u5185\u5b58\u5b50\u7cfb\u7edf RC\u53ef\u4ee5\u652f\u6301\u4e00\u4e2a\u6216\u591a\u4e2aPCIe ports.\u6bcf\u4e00\u4e2a\u63a5\u53e3\u5b9a\u4e49\u4e00\u4e2a\u72ec\u7acb\u7684hierarchy domain.\u6bcf\u4e00\u4e2ahierarchy domain\u53ef\u4ee5\u7ec4\u6210\u4e00\u4e2aEP\u6216\u8005\u4e00\u4e2a\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2aswitch\u548cEP\u7684\u5b50\u5c42\u7ea7 RC\u5fc5\u987b\u652f\u6301\u751f\u6210\u914d\u7f6e\u8bf7\u6c42 RC\u5141\u8bb8\u652f\u6301IO\u8bf7\u6c42\u7684\u751f\u6210 Endpoints \u00b6 EP\u4ee3\u8868\u7684\u529f\u80fd\u7c7b\u578b\u53ef\u4ee5\u662f\u8bf7\u6c42\u8005\u4e5f\u53ef\u4ee5\u662f\u5b8c\u6210\u8005\u3002\u5206\u4e3a\u4e09\u79cd\uff1a Legacy Endpoint PCIe Endpoint Root Complex Integrated Endpoint switch \u00b6 switch\u662f\u591a\u4e2aPCI-to-PCI\u6865\u8bbe\u5907\u7684\u903b\u8f91\u7ec4\u88c5 \u5728\u914d\u7f6e\u8f6f\u4ef6\u770b\u6765\uff0cPCIe Switch\u662f\u4e24\u5230\u591a\u4e2a\u903b\u8f91PCI-to-PCI\u6865 \u9664\u975e\u53e6\u6709\u8bf4\u660e\uff0cswitch\u5fc5\u987b\u5728\u4efb\u610f\u7684\u7aef\u53e3\u4e0a\u652f\u6301\u6240\u6709\u7684TLP\u7c7b\u578b\u7684\u8f6c\u53d1 switch\u4e0d\u80fd\u652f\u6301\u6570\u636e\u5305\u7684\u62c6\u5206 \u4e1a\u52a1\u5c42 \u00b6 \u6982\u8ff0 \u00b6 \u4e1a\u52a1\u5c42\u5728\u5904\u7406\u751f\u6210\u548c\u63a5\u6536TLP\u7684\u65f6\u5019\uff0c\u548c\u5bf9\u7aef\u7684\u4e1a\u52a1\u5c42\u4ea4\u6362\u6d41\u63a7\u4fe1\u606f\u3002\u4e5f\u8d1f\u8d23\u8f6f\u4ef6\u548c\u786c\u4ef6\u521d\u59cb\u5316\u7535\u6e90\u7ba1\u7406\u3002 \u521d\u59cb\u5316\u548c\u914d\u7f6e\u529f\u80fd\u9700\u8981\u4e1a\u52a1\u5c42\uff1a \u5b58\u50a8\u5904\u7406\u5668\u6216\u7ba1\u7406\u8bbe\u5907\u751f\u6210\u7684\u94fe\u8def\u914d\u7f6e\u4fe1\u606f \u5b58\u50a8\u7269\u7406\u5c42\u786c\u4ef6\u534f\u5546\u7684\u6570\u636e\u5bbd\u5ea6\u548c\u9891\u7387\u94fe\u8def\u80fd\u529b \u4e00\u4e2aTLP\u7684\u751f\u6210\u548c\u5904\u7406\u670d\u52a1\u9700\u8981\u505a\uff1a \u57fa\u4e8e\u8bbe\u5907\u8bf7\u6c42\u751f\u6210TLP \u5c06\u63a5\u6536\u5230\u7684TLP\u8bf7\u6c42\u8f6c\u6362\u6210\u8bbe\u5907\u8bf7\u6c42 \u5c06\u63a5\u6536\u5230\u7684\u5b8c\u6210\u5305\u8f6c\u6362\u4e3a\u53ef\u4ea4\u4ed8\u7ed9\u6838\u5fc3\u7684\u6709\u6548\u8f7d\u8377\u6216\u72b6\u6001\u4fe1\u606f \u68c0\u6d4b\u4e0d\u652f\u6301\u7684TLP,\u59d4\u6258\u9002\u5f53\u7684\u673a\u5236\u53bb\u5904\u7406 \u5982\u679c\u652f\u6301\u7aef\u5230\u7aef\u7684\u6570\u636e\u5b8c\u6574\u6027\uff0c\u751f\u6210\u7aef\u5230\u7aef\u7684\u6570\u636e\u5b8c\u6574\u6027CRC\u5e76\u66f4\u65b0\u5230TLP\u5934\u4e2d \u6d41\u63a7\u670d\u52a1\uff1a \u4e1a\u52a1\u5c42\u8ddf\u8e2a\u6d41\u63a7credits \u901a\u8fc7\u6570\u636e\u94fe\u8def\u5c42\u7684\u4f20\u8f93\u670d\u52a1\u5c06credit\u72b6\u6001\u5468\u671f\u6027\u5730\u53d1\u9001\u5230\u8fdc\u7aef\u4e1a\u52a1\u5c42 \u8fdc\u7aef\u6d41\u63a7\u4fe1\u606f\u7528\u4e8e\u63a7\u5236TLP\u4f20\u8f93\u7684\u5f00\u5ea6(throttle) \u7535\u6e90\u7ba1\u7406\u670d\u52a1\uff1a \u8f6f\u4ef6\u63a7\u5236\u7684\u7535\u6e90\u7ba1\u7406\u673a\u5236\uff0c\u7531\u7cfb\u7edf\u8f6f\u4ef6\u51b3\u5b9a\u7684 \u786c\u4ef6\u63a7\u5236\u7684\u81ea\u4e3b\u7535\u6e90\u7ba1\u7406\u53ef\u5728\u7535\u6e90\u5168\u5f00\u72b6\u6001\u4e0b\u6700\u5927\u9650\u5ea6\u5730\u964d\u4f4e\u529f\u7387 \u865a\u62df\u901a\u9053\u548c\u6d41\u91cf\u7c7b\u578b(traffic class)\uff1a \u63d0\u4f9b\u865a\u62df\u901a\u9053\u673a\u5236\u548c\u6d41\u91cf\u7c7b\u578b\u8bc6\u522b\u7684\u7ec4\u5408\uff0c\u7528\u6765\u8fdb\u884c\u5dee\u5f02\u5316\u670d\u52a1\u548c\u652f\u6301\u7279\u5b9a\u5e94\u7528\u7c7b\u578b\u7684QoS \u6d41\u91cf\u7c7b\u578b\u662fTLP\u7684\u6807\u7b7e\u3002\u5728\u6bcf\u4e00\u4e2a\u670d\u52a1\u70b9\uff0c\u6d41\u91cf\u7c7b\u578b\u88ab\u5e94\u7528\u4e8e\u9002\u5f53\u7684\u670d\u52a1\u673a\u5236\u3002\u6bcf\u4e00\u4e2a\u6d41\u91cf\u7c7b\u578b\u6807\u7b7e\u5b9a\u4e49\u4e86\u4e00\u4e2a\u552f\u4e00\u7684\u987a\u5e8f\u57df\uff0c\u62e5\u6709\u4e0d\u540c\u6d41\u91cf\u7c7b\u578b\u6807\u7b7e\u7684\u6570\u636e\u5305\u6ca1\u6709\u5148\u540e\u987a\u5e8f\u7684\u4ef2\u88c1 \u4e1a\u52a1\u901a\u8fc7requests\u548ccompletions\u6765\u5b8c\u6210\u3002completions\u53ea\u6709\u5728\u9700\u8981\u7684\u65f6\u5019\u4f7f\u7528\uff0c\u4f8b\u5982\u8fd4\u56de\u8bfb\u7684\u6570\u636e\uff0c\u6216\u8005\u5e94\u7b54IO\u548c\u5199\u914d\u7f6e\u7684\u5b8c\u6210\u3002completions\u901a\u8fc7\u5305\u5934\u4e2d\u7684\u4e1a\u52a1ID\u6765\u5173\u8054\u5bf9\u5e94\u7684requests. TLP\u4e2d\u4fdd\u7559\u7684\u5b57\u6bb5\u90fd\u9700\u8981\u586b0.\u63a5\u6536\u7aef\u5fc5\u987b\u5ffd\u7565\u8fd9\u4e9b\u4fdd\u7559\u5b57\u6bb5\uff0cswitch\u5fc5\u987b\u539f\u5c01\u4e0d\u52a8\u7684\u8f6c\u53d1\u3002 \u5305\u683c\u5f0f \u00b6 PCIe\u662f\u4ee5\u4e32\u884c\u7684\u5b57\u8282\u6d41\u6765\u4f20\u8f93\u4fe1\u606f\u7684\uff0c\u4ece\u5b57\u8282\u7684\u5c42\u9762\u4e0a\uff0c\u5148\u4f20\u5934\u3002 \u5982\u56fe\u6240\u793a\uff0cTLP Prefix, TLP Header, TLP Digest \u753b\u5728\u4e86\u5de6\u8fb9\u3002TLP Header\u7684\u7ec4\u7ec7\u5f62\u5f0f\u8fdb\u884c\u4e86\u6027\u80fd\u4f18\u5316\uff0c\u5c06\u6700\u8981\u7d27\u7684\u4fe1\u606f\u653e\u5728\u6700\u5934\u4e0a\uff0c\u4ee5\u4fdd\u8bc1\u5148\u8fdb\u884c\u4f20\u8f93\u3002\u6bd4\u5982\u8bf4\u5c06\u5730\u5740\u57df\u653e\u5728\u5934\u4e0a\uff0c\u8fd9\u6837\u80fd\u591f\u8f83\u65e9\u7684\u8fdb\u884c\u5730\u5740\u89e3\u7801\u3002 TLP\u5934\u4e3b\u8981\u5305\u542b\u5982\u4e0b\u5b57\u6bb5\uff1a Format of the packet Type of the packet Length for any associated data Transaction Descriptor, including Transaction ID Attributes Traffic Class Address/routing information Byte Enables Message encoding Completion status \u6240\u6709\u7684TLP\u7684\u524d\u7f00\u548c\u5934\u90fd\u5305\u542b\u4e0a\u9762\u56fe\u4e2d\u7684\u5b57\u6bb5\uff0cFmt\u5b57\u6bb5\u6307\u793a\u4e00\u4e2a\u6216\u591a\u4e2aTLP\u524d\u7f00\u7684\u5b58\u5728\uff0cType\u5b57\u6bb5\u6307\u793aTLP\u524d\u7f00\u7c7b\u578b\u3002 Fmt\u548ctype\u5b57\u6bb5\u63d0\u4f9b\u4e86TLP\u5934\u90e8\u5269\u4f59\u90e8\u5206\u5927\u5c0f\u548c\u662f\u5426\u5305\u542b\u6570\u636e\u57df\u7684\u4fe1\u606f\u3002type\u5b57\u6bb5\u4e5f\u51b3\u5b9a\u4e86switch\u5982\u4f55\u8fdb\u884c\u8def\u7531 fmt\u548ctype\u7684\u7ec4\u5408\uff0c\u5b9e\u73b0\u4e86\u591a\u79cd\u547d\u4ee4,\u5982\u4e0b\u56fe\u6240\u793a \u6570\u636e\u957f\u5ea6\u7f16\u7801\u5982\u4e0b\u56fe\u6240\u793a \u6570\u636e\u957f\u5ea6\u662f\u4ee5DW\u4e3a\u5355\u4f4d\uff0c\u6709Max_Payload_Size\u9650\u5236\uff0c\u4e0d\u540c\u7684\u8bbe\u5907\u7684\u6700\u5927\u957f\u5ea6\u9650\u5236\u4e0d\u540c\u3002Max_Payload_Size\u53ea\u5bf9\u643a\u5e26\u6570\u636e\u7684TLP\u8d77\u4f5c\u7528\u3002\u5185\u5b58\u8bfb\u8bf7\u6c42\u4e0d\u53d7\u9650\u5236\uff0c\u662f\u901a\u8fc7length\u57df\u6765\u63a7\u5236\u7684\u3002 \u8def\u7531\u548c\u5730\u5740\u89c4\u5219 \u00b6 \u4e00\u5171\u6709\u4e09\u79cd\u8def\u7531\u89c4\u5219 address ID implicit(\u53ea\u6709\u5728message\u8bf7\u6c42\u7684\u65f6\u5019\u7528\u5230) \u5730\u5740\u8def\u7531\u89c4\u5219 \u00b6 \u5730\u5740\u8def\u7531\u7528\u6765\u5b9e\u73b0\u5185\u5b58\u548cIO\u8bf7\u6c42\uff0c\u6709\u4e24\u79cd\u683c\u5f0f\uff0c64-bit\u683c\u5f0f\u4f7f\u75284DW\u5934\uff0c32-bit\u4f7f\u75283DW\u5934\u3002 \u8bfb\u5185\u5b58\uff0c\u5199\u5185\u5b58\uff0c\u539f\u5b50\u64cd\u4f5c\u8bf7\u6c42\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u7684\u683c\u5f0f\u3002\u4f46\u5bf9\u4e8e\u4f4e\u4e8e4GB\u7684\u5730\u5740\uff0c\u5fc5\u987b\u4f7f\u752832-bit\u683c\u5f0f\u3002\u4f7f\u752864bit\u683c\u5f0f\u8bf7\u6c42\u4e00\u4e2a4GB\u5185\u7684\u5730\u5740\u7684\u884c\u4e3a\u4e0d\u505a\u5b9a\u4e49\u3002 I/O\u8bfb\u5199\u8bf7\u6c42\u4f7f\u752832-bit\u683c\u5f0f ID\u8def\u7531\u89c4\u5219 \u00b6 \u914d\u7f6e\u8bf7\u6c42\u4f7f\u7528ID\u8def\u7531 ID\u8def\u7531\u4f7f\u7528bus,device,function numbers\u6307\u5b9a\u4e00\u4e2aTLP\u76ee\u6807 first/last DW byte \u00b6 \u5e72\u5565\u7528\u7684\uff1f transaction descriptor \u00b6 \u4e1a\u52a1\u63cf\u8ff0\u7b26\u662f\u627f\u8f7d\u4e1a\u52a1\u4fe1\u606f\u7684\u4e00\u79cd\u673a\u5236\uff0c\u5305\u542b\u4e09\u4e2a\u57df\uff1a Transaction ID \u6807\u8bc6\uff0c\u7531requester ID\u548c Tag\u5171\u540c\u7ec4\u6210 Attributes field \u6307\u5b9a\u7279\u6027\uff0c\u4e3b\u8981\u8d1f\u8d23\u4fdd\u5e8f\u548c\u786c\u4ef6\u4e00\u81f4\u6027\u7ba1\u7406(snoop) Traffic Class (TC) \u8bf7\u6c42\u670d\u52a1\u7684\u7c7b\u578b,3bit\uff0c\u5b9e\u73b08\u79cd\u7c7b\u578b\uff0c\u914d\u5408\u865a\u62df\u901a\u9053\uff0c\u5b9e\u73b0\u6d41\u63a7 \u5185\u5b58/IO/\u914d\u7f6e\u8bf7\u6c42 \u00b6 \u6d88\u606f\u8bf7\u6c42 \u00b6 \u5176\u4e2dtype\u57df\u7684r[2:0]\u5b9a\u4e49\u4e86\u8def\u7531\u89c4\u5219 completion\u89c4\u5219 \u00b6 \u6240\u6709\u7684\u8bfb\uff0cnon-posted\u5199\uff0c\u539f\u5b50\u64cd\u4f5c\u90fd\u9700\u8981completion\u3002completion\u5305\u542b\u5934\uff0c\u6709\u4e9b\u4f1a\u5305\u542b\u4e00\u4e9b\u6570\u636e A posted write is a computer bus write transaction that does not wait for a write completion response to indicate success or failure of the write transaction. For a posted write, the CPU assumes that the write cycle will complete with zero wait states, and so doesn't wait for the done. This speeds up writes considerably. For starters, it doesn't have to wait for the done response, but it also allows for better pipelining of the datapath without much performance penalty. A non-posted write requires that a bus transaction responds with a write completion response to indicate success or failure of the transaction, and is naturally much slower than a posted write since it requires a round trip delay similar to read bus transactions. \u63a5\u6536TLP\u7684\u5904\u7406 \u00b6 RCB\u51b3\u5b9a\u4e86\u5c06\u4e00\u4e2a\u8bfb\u8bf7\u6c42\u8f6c\u6362\u4e3a\u591a\u4e2acompletions\u7684\u5730\u5740\u5206\u5272\u8fb9\u754c,\u5bf9RC\u6765\u8bb2\uff0cRCB\u662f64\u6216128\u5b57\u8282\uff0c\u53ef\u4ee5\u5728\u94fe\u8def\u63a7\u5236\u5bc4\u5b58\u5668\u4e2d\u8bbe\u7f6e\u3002 \u987a\u5e8f\u89c4\u5219 \u00b6 \u5982\u56fe2-40\u6240\u793a\uff0c\u5217\u662f\u7b2c\u4e00\u4e2a\u53d1\u9001\u7684TLP\uff0c\u884c\u662f\u7b2c\u4e8c\u4e2a\u53d1\u9001\u7684TLP\uff0c\u8868\u4e2d\u63cf\u8ff0\u4e86\u7b2c\u4e00\u4e2a\u53d1\u9001\u7684TLP\u548c\u7b2c\u4e8c\u4e2a\u53d1\u9001\u7684TLP\u7684\u987a\u5e8f\u89c4\u5219\u3002 \u5176\u4e2d\u7b80\u5199\u542b\u4e49\u5982\u4e0b\uff1a Yes \u5fc5\u987b\u5141\u8bb8\u8d85\u8f66 Y/N \u600e\u4e48\u90fd\u884c No \u5fc5\u987b\u4fdd\u5e8f\uff0c\u4e0d\u80fd\u8d85\u8f66 \u8bf7\u6c42\u7c7b\u578b\u6709\u5982\u4e0b\u89e3\u91ca\uff1a Posted Request \u5185\u5b58\u5199\u8bf7\u6c42\u6216\u8005\u6d88\u606f\u8bf7\u6c42 Read Request \u914d\u7f6e\u8bfb\u8bf7\u6c42\uff0cIO\u8bfb\u8bf7\u6c42\uff0c\u5185\u5b58\u8bfb\u8bf7\u6c42 NPR with data \u914d\u7f6e\u5199\u8bf7\u6c42\uff0cIO\u5199\u8bf7\u6c42\uff0c\u539f\u5b50\u64cd\u4f5c\u8bf7\u6c42 \u865a\u62df\u901a\u9053\u673a\u5236 \u00b6 \u6bcf\u4e00\u4e2aTC\u5fc5\u987b\u6620\u5c04\u5230\u4e00\u4e2aVC\u4e0a\uff0cTC0\u5230VC0\u7684\u6620\u5c04\u662f\u56fa\u5b9a\u7684\uff0c\u9664\u6b64\u4e4b\u5916\u7684\u6620\u5c04\u662f\u7cfb\u7edf\u8f6f\u4ef6\u5b9a\u4e49\u7684\u3002\u4f46\u662f\uff0c\u8981\u7b26\u5408\u5982\u4e0b\u89c4\u5219\uff1a \u591a\u4e2aTC\u53ef\u4ee5\u6620\u5c04\u5230\u540c\u4e00\u4e2aVC\uff0c\u4f46\u4e00\u4e2aTC\u4e0d\u80fd\u6620\u5c04\u5230\u591a\u4e2aVC \u94fe\u8def\u4e24\u7aef\u7684TC/VC\u6620\u5c04\u5fc5\u987b\u4fdd\u6301\u4e00\u81f4 DLLP\u5305\u542b\u4e86\u505a\u6d41\u63a7\u8ba1\u6570\u7684VC ID\u4fe1\u606f\uff0c TLP\u4e0d\u5305\u542b\u3002TLP\u901a\u8fc7VC/TC\u6620\u5c04\u5173\u7cfb\u6765\u5bf9\u5e94\u5230VC ID \u4e0b\u9762\u662f\u4e00\u4e2aTC/VC\u6620\u5c04\u4e3e\u4f8b \u6d41\u63a7 \u00b6 \u6bcf\u4e00\u4e2a\u865a\u62df\u901a\u9053\u90fd\u6709\u4e00\u4e2a\u72ec\u7acb\u7684credit\u6c60 \u6d41\u63a7\u4fe1\u606f\u901a\u8fc7\u6d41\u63a7\u5305FCPs(Flow Control Packets)\u5728\u94fe\u8def\u4e24\u7aef\u4f20\u64ad\uff0cFCPs\u662f\u4e00\u79cdDLLPs \u6d41\u63a7\u662f\u4e1a\u52a1\u5c42\u548c\u6570\u636e\u94fe\u8def\u5c42\u914d\u5408\u8fdb\u884c\u5904\u7406\u7684 \u5b8c\u6210\u8d85\u65f6\u673a\u5236 \u00b6 \u6570\u636e\u94fe\u8def\u5c42 \u00b6 \u6570\u636e\u94fe\u8def\u5c42\u8d1f\u8d23\u548c\u5bf9\u7aef\u7684\u6570\u636e\u94fe\u8def\u5c42\u53ef\u4fe1\u7684\u4ea4\u6362\u4fe1\u606f\u3002 \u521d\u59cb\u5316\u548c\u7535\u6e90\u7ba1\u7406\u670d\u52a1\uff1a \u63a5\u53d7\u6765\u81ea\u4e1a\u52a1\u5c42\u7684\u7535\u6e90\u72b6\u6001\u8bf7\u6c42\uff0c\u4f20\u9001\u5230\u7269\u7406\u5c42 \u5411\u4e1a\u52a1\u5c42\u4f20\u9001active/reset/disconnected/power managed state \u6570\u636e\u4fdd\u62a4\uff0c\u9519\u8bef\u68c0\u67e5\uff0c\u91cd\u53d1\u670d\u52a1\uff1a \u751f\u6210CRC \u4e3a\u6570\u636e\u94fe\u8def\u7ea7\u7684\u91cd\u8bd5\u5b58\u50a8TLP \u9519\u8bef\u68c0\u67e5 TLP\u786e\u8ba4\u548c\u91cd\u8bd5\u6d88\u606f \u9519\u8bef\u62a5\u544a\u548c\u65e5\u5fd7\u8bb0\u5f55\u7684\u9519\u8bef\u6307\u793a \u4e2d\u65ad \u00b6 PCIe\u4e2d\u65ad\u6a21\u578b\u652f\u6301\u4e24\u79cd\u673a\u5236\uff1a INTx \u6a21\u62df message signaled interrupt(MSI/MSI-X) \u4e3a\u4e86\u5411\u524d\u517c\u5bb9\uff0cPCIe\u63d0\u4f9b\u4e86INTx\u6a21\u62df\u673a\u5236\u3002\u5b83\u901a\u8fc7\u5e26\u5185\u4fe1\u53f7\u673a\u5236\u865a\u62df\u5316\u4e86PCI\u7269\u7406\u4e2d\u65ad\u4fe1\u53f7\u3002 \u5982\u679c\u5b9e\u73b0\u7684\u8bbe\u5907\u652f\u6301\u4e2d\u65ad\uff0c\u90a3\u4e48\u8981\u6c42\u5fc5\u987b\u81f3\u5c11\u5b9e\u73b0MSI\u6216MSI-X\u7684\u4e00\u79cd\u3002\u57fa\u4e8eINTx\u7684\u5b9e\u73b0\u662f\u53ef\u9009\u7684\u3002 switch\u9700\u8981\u652f\u6301\u8f6c\u53d1INTx\u4e2d\u65ad\u6a21\u62df\u4fe1\u606f\u3002 \u7cfb\u7edf\u8f6f\u4ef6\u901a\u8fc7\u8bfb\u53d6\u591a\u4e2a\u6d88\u606f\u80fd\u529b\u57df\u6765\u51b3\u5b9a\u8bf7\u6c42\u5411\u91cf\u7684\u6570\u91cf\u3002MSI\u652f\u6301\u6bcf\u4e2a\u529f\u80fd\u6700\u591a32\u4e2a\u5411\u91cf\u3002\u7cfb\u7edf\u8f6f\u4ef6\u5199\u591a\u4e2a\u6d88\u606f\u4f7f\u80fd\u57df\u53bb\u7533\u8bf7\u6240\u6709\u7684\u6216\u8005\u4e00\u90e8\u5206\u8bf7\u6c42\u5411\u91cf\u3002\u4f46\u8bf7\u6c42\u7684\u5411\u91cf\u6570\u6bd4\u5982\u662f2\u7684\u6307\u6570\u500d\u3002 EP(end point) RP(root point) BDF(Bus, Device, Function)","title":"PCIE"},{"location":"ic/pcie.html#pcie","text":"PCIE \u7f29\u5199 \u62d3\u6251 RC(root complex) Endpoints switch \u4e1a\u52a1\u5c42 \u6982\u8ff0 \u5305\u683c\u5f0f \u8def\u7531\u548c\u5730\u5740\u89c4\u5219 \u5730\u5740\u8def\u7531\u89c4\u5219 ID\u8def\u7531\u89c4\u5219 first/last DW byte transaction descriptor \u5185\u5b58/IO/\u914d\u7f6e\u8bf7\u6c42 \u6d88\u606f\u8bf7\u6c42 completion\u89c4\u5219 \u63a5\u6536TLP\u7684\u5904\u7406 \u987a\u5e8f\u89c4\u5219 \u865a\u62df\u901a\u9053\u673a\u5236 \u6d41\u63a7 \u5b8c\u6210\u8d85\u65f6\u673a\u5236 \u6570\u636e\u94fe\u8def\u5c42 \u4e2d\u65ad PCIe\u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u7684\u5e7f\u6cdb\u7528\u4e8e\u4e0d\u540c\u7684\u8ba1\u7b97\u548c\u901a\u4fe1\u5e73\u53f0\u7684\u901a\u7528IO\u4e92\u8054\u534f\u8bae\u3002 \u5b83\u5177\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a \u4e32\u884c\u5168\u53cc\u5de5 \u6570\u636e\u4ee5\u5305(packet)\u7684\u5f62\u5f0f\u4f20\u8f93 \u91c7\u7528\u5dee\u5206\u4fe1\u53f7\u63d0\u9ad8\u7a33\u5b9a\u6027 \u5d4c\u5165\u5f0f\u65f6\u949f(embedded clock)\u6280\u672f\uff0c\u53d1\u9001\u7aef\u4e0d\u9700\u8981\u5411\u63a5\u6536\u7aef\u53d1\u9001\u65f6\u949f\uff0c\u63a5\u6536\u7aef\u80fd\u591f\u901a\u8fc7\u7f16\u7801\u4ece\u6570\u636elane\u4e2d\u6062\u590d PCIe\u5b9a\u4e49\u4e86\u4e09\u4e2a\u903b\u8f91\u5c42\uff1a \u4e1a\u52a1\u5c42(Transaction Layer) \u4e3b\u8981\u8d1f\u8d23TLP(transaction layer packet)\u7684\u7ec4\u5305\u548c\u89e3\u5305\uff0cTLP\u662f\u7528\u6765\u4e1a\u52a1\u901a\u4fe1\u7684\uff0c\u5305\u62ec\u8bfb\u5199\u548c\u4e00\u4e9b\u7279\u5b9a\u7c7b\u578b\u7684\u4e8b\u4ef6\u3002\u4e1a\u52a1\u5c42\u4e5f\u8d1f\u8d23TLP\u7684credit-based\u6d41\u63a7\u3002 \u4e1a\u52a1\u5c42\u652f\u6301\u56db\u79cd\u5730\u5740\u7a7a\u95f4\uff0c\u4e09\u4e2aPCI\u5730\u5740\u7a7a\u95f4(memory,I/O,configuration)\u548cmessage\u7a7a\u95f4\u3002 message\u7a7a\u95f4\u7528\u6765\u652f\u6301\u6240\u6709\u7684\u524d\u8fb9\u5e26\u4fe1\u53f7\uff0c\u6bd4\u5982\u4e2d\u65ad\uff0c\u7535\u6e90\u7ba1\u7406\u8bf7\u6c42\u7b49\u3002 \u6570\u636e\u94fe\u8def\u5c42(Data Link Layer) \u6570\u636e\u94fe\u8def\u5c42\u8d1f\u8d23\u94fe\u8def\u7ba1\u7406\u548c\u6570\u636e\u5b8c\u6574\u6027\uff0c\u5305\u542b\u9519\u8bef\u68c0\u67e5\u548c\u6821\u6b63\u3002\u6570\u636e\u94fe\u8def\u5c42\u63a5\u6536\u63a5\u6536\u4e1a\u52a1\u5c42\u6253\u5305\u7684TLP,\u8ba1\u7b97\u5e76\u6dfb\u52a0\u6570\u636e\u4fdd\u62a4\u7801\u548cTLP\u5e8f\u5217\u53f7\uff0c\u5c06\u4ed6\u4eec\u63d0\u4ea4\u5230\u7269\u7406\u5c42\u4ee5\u8fdb\u884c\u94fe\u8def\u4f20\u64ad\u3002\u540c\u65f6\uff0c\u6570\u636e\u94fe\u8def\u5c42\u7684\u63a5\u6536\u90e8\u5206\u8d1f\u8d23\u68c0\u67e5\u63a5\u6536\u5230\u7684TLP\u7684\u5b8c\u6574\u6027\u5e76\u4e14\u628a\u4ed6\u4eec\u63d0\u4ea4\u5230\u4e1a\u52a1\u5c42\u505a\u5176\u4ed6\u7684\u5904\u7406\u3002\u4e00\u4f46\u68c0\u6d4b\u5230TLP\u9519\u8bef\uff0c\u8fd9\u4e00\u5c42\u4f1a\u8d1f\u8d23\u8bf7\u6c42\u91cd\u65b0\u4f20\u8f93TLP\u76f4\u5230\u63a5\u6536\u6b63\u786e\u6216\u8005\u94fe\u8def\u88ab\u8ba4\u5b9a\u4e3a\u6709\u9519\u8bef\u3002 \u6570\u636e\u94fe\u8def\u5c42\u4e5f\u4f1a\u4ea7\u751f\u6216\u5904\u7406\u7528\u4e8e\u94fe\u8def\u7ba1\u7406\u7684\u6570\u636e\u5305\u3002DLLP(data link layer packet)\u5c06\u4f1a\u5728\u7684\u65f6\u5019\u4f7f\u7528 \u7269\u7406\u5c42(Physical Layer) \u5c06\u6765\u603b\u7ebf\u901f\u5ea6\uff0c\u7f16\u7801\u6280\u672f\u6216\u8005\u901a\u4fe1\u4ecb\u8d28\u53ef\u80fd\u53ea\u4f1a\u5f71\u54cd\u7269\u7406\u5c42 \u6bcf\u4e2a\u5c42\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u4e00\u4e2a\u662f\u5904\u7406outbound\u4fe1\u606f\uff0c\u4e00\u4e2a\u5904\u7406inbound\u4fe1\u606f \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6bcf\u4e00\u5c42\u5728\u53d1\u9001\u7684\u65f6\u5019\u90fd\u4f1a\u7ed9\u6570\u636e\u5305\u6dfb\u52a0\u4e00\u4e9b\u5fc5\u8981\u7684\u4fe1\u606f","title":"PCIE"},{"location":"ic/pcie.html#_1","text":"Multi-Function Device (MFD) Alternative Routing-ID Interpretation (ARI) Steering Tag (ST) Processing Hint (PH) Read Completion Boundary (RCB) Non-Posted Request (NPR) Virtual Channel (VC) Multi-Function Virtual Channel (MFVC) Traffic Class (TC) Flow Control (FC)","title":"\u7f29\u5199"},{"location":"ic/pcie.html#_2","text":"","title":"\u62d3\u6251"},{"location":"ic/pcie.html#rcroot-complex","text":"RC\u8868\u793aIO\u5c42\u7ea7\u7ed3\u6784\u7684\u6839\uff0c\u8fde\u63a5\u4e86cpu\u53ca\u5185\u5b58\u5b50\u7cfb\u7edf RC\u53ef\u4ee5\u652f\u6301\u4e00\u4e2a\u6216\u591a\u4e2aPCIe ports.\u6bcf\u4e00\u4e2a\u63a5\u53e3\u5b9a\u4e49\u4e00\u4e2a\u72ec\u7acb\u7684hierarchy domain.\u6bcf\u4e00\u4e2ahierarchy domain\u53ef\u4ee5\u7ec4\u6210\u4e00\u4e2aEP\u6216\u8005\u4e00\u4e2a\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2aswitch\u548cEP\u7684\u5b50\u5c42\u7ea7 RC\u5fc5\u987b\u652f\u6301\u751f\u6210\u914d\u7f6e\u8bf7\u6c42 RC\u5141\u8bb8\u652f\u6301IO\u8bf7\u6c42\u7684\u751f\u6210","title":"RC(root complex)"},{"location":"ic/pcie.html#endpoints","text":"EP\u4ee3\u8868\u7684\u529f\u80fd\u7c7b\u578b\u53ef\u4ee5\u662f\u8bf7\u6c42\u8005\u4e5f\u53ef\u4ee5\u662f\u5b8c\u6210\u8005\u3002\u5206\u4e3a\u4e09\u79cd\uff1a Legacy Endpoint PCIe Endpoint Root Complex Integrated Endpoint","title":"Endpoints"},{"location":"ic/pcie.html#switch","text":"switch\u662f\u591a\u4e2aPCI-to-PCI\u6865\u8bbe\u5907\u7684\u903b\u8f91\u7ec4\u88c5 \u5728\u914d\u7f6e\u8f6f\u4ef6\u770b\u6765\uff0cPCIe Switch\u662f\u4e24\u5230\u591a\u4e2a\u903b\u8f91PCI-to-PCI\u6865 \u9664\u975e\u53e6\u6709\u8bf4\u660e\uff0cswitch\u5fc5\u987b\u5728\u4efb\u610f\u7684\u7aef\u53e3\u4e0a\u652f\u6301\u6240\u6709\u7684TLP\u7c7b\u578b\u7684\u8f6c\u53d1 switch\u4e0d\u80fd\u652f\u6301\u6570\u636e\u5305\u7684\u62c6\u5206","title":"switch"},{"location":"ic/pcie.html#_3","text":"","title":"\u4e1a\u52a1\u5c42"},{"location":"ic/pcie.html#_4","text":"\u4e1a\u52a1\u5c42\u5728\u5904\u7406\u751f\u6210\u548c\u63a5\u6536TLP\u7684\u65f6\u5019\uff0c\u548c\u5bf9\u7aef\u7684\u4e1a\u52a1\u5c42\u4ea4\u6362\u6d41\u63a7\u4fe1\u606f\u3002\u4e5f\u8d1f\u8d23\u8f6f\u4ef6\u548c\u786c\u4ef6\u521d\u59cb\u5316\u7535\u6e90\u7ba1\u7406\u3002 \u521d\u59cb\u5316\u548c\u914d\u7f6e\u529f\u80fd\u9700\u8981\u4e1a\u52a1\u5c42\uff1a \u5b58\u50a8\u5904\u7406\u5668\u6216\u7ba1\u7406\u8bbe\u5907\u751f\u6210\u7684\u94fe\u8def\u914d\u7f6e\u4fe1\u606f \u5b58\u50a8\u7269\u7406\u5c42\u786c\u4ef6\u534f\u5546\u7684\u6570\u636e\u5bbd\u5ea6\u548c\u9891\u7387\u94fe\u8def\u80fd\u529b \u4e00\u4e2aTLP\u7684\u751f\u6210\u548c\u5904\u7406\u670d\u52a1\u9700\u8981\u505a\uff1a \u57fa\u4e8e\u8bbe\u5907\u8bf7\u6c42\u751f\u6210TLP \u5c06\u63a5\u6536\u5230\u7684TLP\u8bf7\u6c42\u8f6c\u6362\u6210\u8bbe\u5907\u8bf7\u6c42 \u5c06\u63a5\u6536\u5230\u7684\u5b8c\u6210\u5305\u8f6c\u6362\u4e3a\u53ef\u4ea4\u4ed8\u7ed9\u6838\u5fc3\u7684\u6709\u6548\u8f7d\u8377\u6216\u72b6\u6001\u4fe1\u606f \u68c0\u6d4b\u4e0d\u652f\u6301\u7684TLP,\u59d4\u6258\u9002\u5f53\u7684\u673a\u5236\u53bb\u5904\u7406 \u5982\u679c\u652f\u6301\u7aef\u5230\u7aef\u7684\u6570\u636e\u5b8c\u6574\u6027\uff0c\u751f\u6210\u7aef\u5230\u7aef\u7684\u6570\u636e\u5b8c\u6574\u6027CRC\u5e76\u66f4\u65b0\u5230TLP\u5934\u4e2d \u6d41\u63a7\u670d\u52a1\uff1a \u4e1a\u52a1\u5c42\u8ddf\u8e2a\u6d41\u63a7credits \u901a\u8fc7\u6570\u636e\u94fe\u8def\u5c42\u7684\u4f20\u8f93\u670d\u52a1\u5c06credit\u72b6\u6001\u5468\u671f\u6027\u5730\u53d1\u9001\u5230\u8fdc\u7aef\u4e1a\u52a1\u5c42 \u8fdc\u7aef\u6d41\u63a7\u4fe1\u606f\u7528\u4e8e\u63a7\u5236TLP\u4f20\u8f93\u7684\u5f00\u5ea6(throttle) \u7535\u6e90\u7ba1\u7406\u670d\u52a1\uff1a \u8f6f\u4ef6\u63a7\u5236\u7684\u7535\u6e90\u7ba1\u7406\u673a\u5236\uff0c\u7531\u7cfb\u7edf\u8f6f\u4ef6\u51b3\u5b9a\u7684 \u786c\u4ef6\u63a7\u5236\u7684\u81ea\u4e3b\u7535\u6e90\u7ba1\u7406\u53ef\u5728\u7535\u6e90\u5168\u5f00\u72b6\u6001\u4e0b\u6700\u5927\u9650\u5ea6\u5730\u964d\u4f4e\u529f\u7387 \u865a\u62df\u901a\u9053\u548c\u6d41\u91cf\u7c7b\u578b(traffic class)\uff1a \u63d0\u4f9b\u865a\u62df\u901a\u9053\u673a\u5236\u548c\u6d41\u91cf\u7c7b\u578b\u8bc6\u522b\u7684\u7ec4\u5408\uff0c\u7528\u6765\u8fdb\u884c\u5dee\u5f02\u5316\u670d\u52a1\u548c\u652f\u6301\u7279\u5b9a\u5e94\u7528\u7c7b\u578b\u7684QoS \u6d41\u91cf\u7c7b\u578b\u662fTLP\u7684\u6807\u7b7e\u3002\u5728\u6bcf\u4e00\u4e2a\u670d\u52a1\u70b9\uff0c\u6d41\u91cf\u7c7b\u578b\u88ab\u5e94\u7528\u4e8e\u9002\u5f53\u7684\u670d\u52a1\u673a\u5236\u3002\u6bcf\u4e00\u4e2a\u6d41\u91cf\u7c7b\u578b\u6807\u7b7e\u5b9a\u4e49\u4e86\u4e00\u4e2a\u552f\u4e00\u7684\u987a\u5e8f\u57df\uff0c\u62e5\u6709\u4e0d\u540c\u6d41\u91cf\u7c7b\u578b\u6807\u7b7e\u7684\u6570\u636e\u5305\u6ca1\u6709\u5148\u540e\u987a\u5e8f\u7684\u4ef2\u88c1 \u4e1a\u52a1\u901a\u8fc7requests\u548ccompletions\u6765\u5b8c\u6210\u3002completions\u53ea\u6709\u5728\u9700\u8981\u7684\u65f6\u5019\u4f7f\u7528\uff0c\u4f8b\u5982\u8fd4\u56de\u8bfb\u7684\u6570\u636e\uff0c\u6216\u8005\u5e94\u7b54IO\u548c\u5199\u914d\u7f6e\u7684\u5b8c\u6210\u3002completions\u901a\u8fc7\u5305\u5934\u4e2d\u7684\u4e1a\u52a1ID\u6765\u5173\u8054\u5bf9\u5e94\u7684requests. TLP\u4e2d\u4fdd\u7559\u7684\u5b57\u6bb5\u90fd\u9700\u8981\u586b0.\u63a5\u6536\u7aef\u5fc5\u987b\u5ffd\u7565\u8fd9\u4e9b\u4fdd\u7559\u5b57\u6bb5\uff0cswitch\u5fc5\u987b\u539f\u5c01\u4e0d\u52a8\u7684\u8f6c\u53d1\u3002","title":"\u6982\u8ff0"},{"location":"ic/pcie.html#_5","text":"PCIe\u662f\u4ee5\u4e32\u884c\u7684\u5b57\u8282\u6d41\u6765\u4f20\u8f93\u4fe1\u606f\u7684\uff0c\u4ece\u5b57\u8282\u7684\u5c42\u9762\u4e0a\uff0c\u5148\u4f20\u5934\u3002 \u5982\u56fe\u6240\u793a\uff0cTLP Prefix, TLP Header, TLP Digest \u753b\u5728\u4e86\u5de6\u8fb9\u3002TLP Header\u7684\u7ec4\u7ec7\u5f62\u5f0f\u8fdb\u884c\u4e86\u6027\u80fd\u4f18\u5316\uff0c\u5c06\u6700\u8981\u7d27\u7684\u4fe1\u606f\u653e\u5728\u6700\u5934\u4e0a\uff0c\u4ee5\u4fdd\u8bc1\u5148\u8fdb\u884c\u4f20\u8f93\u3002\u6bd4\u5982\u8bf4\u5c06\u5730\u5740\u57df\u653e\u5728\u5934\u4e0a\uff0c\u8fd9\u6837\u80fd\u591f\u8f83\u65e9\u7684\u8fdb\u884c\u5730\u5740\u89e3\u7801\u3002 TLP\u5934\u4e3b\u8981\u5305\u542b\u5982\u4e0b\u5b57\u6bb5\uff1a Format of the packet Type of the packet Length for any associated data Transaction Descriptor, including Transaction ID Attributes Traffic Class Address/routing information Byte Enables Message encoding Completion status \u6240\u6709\u7684TLP\u7684\u524d\u7f00\u548c\u5934\u90fd\u5305\u542b\u4e0a\u9762\u56fe\u4e2d\u7684\u5b57\u6bb5\uff0cFmt\u5b57\u6bb5\u6307\u793a\u4e00\u4e2a\u6216\u591a\u4e2aTLP\u524d\u7f00\u7684\u5b58\u5728\uff0cType\u5b57\u6bb5\u6307\u793aTLP\u524d\u7f00\u7c7b\u578b\u3002 Fmt\u548ctype\u5b57\u6bb5\u63d0\u4f9b\u4e86TLP\u5934\u90e8\u5269\u4f59\u90e8\u5206\u5927\u5c0f\u548c\u662f\u5426\u5305\u542b\u6570\u636e\u57df\u7684\u4fe1\u606f\u3002type\u5b57\u6bb5\u4e5f\u51b3\u5b9a\u4e86switch\u5982\u4f55\u8fdb\u884c\u8def\u7531 fmt\u548ctype\u7684\u7ec4\u5408\uff0c\u5b9e\u73b0\u4e86\u591a\u79cd\u547d\u4ee4,\u5982\u4e0b\u56fe\u6240\u793a \u6570\u636e\u957f\u5ea6\u7f16\u7801\u5982\u4e0b\u56fe\u6240\u793a \u6570\u636e\u957f\u5ea6\u662f\u4ee5DW\u4e3a\u5355\u4f4d\uff0c\u6709Max_Payload_Size\u9650\u5236\uff0c\u4e0d\u540c\u7684\u8bbe\u5907\u7684\u6700\u5927\u957f\u5ea6\u9650\u5236\u4e0d\u540c\u3002Max_Payload_Size\u53ea\u5bf9\u643a\u5e26\u6570\u636e\u7684TLP\u8d77\u4f5c\u7528\u3002\u5185\u5b58\u8bfb\u8bf7\u6c42\u4e0d\u53d7\u9650\u5236\uff0c\u662f\u901a\u8fc7length\u57df\u6765\u63a7\u5236\u7684\u3002","title":"\u5305\u683c\u5f0f"},{"location":"ic/pcie.html#_6","text":"\u4e00\u5171\u6709\u4e09\u79cd\u8def\u7531\u89c4\u5219 address ID implicit(\u53ea\u6709\u5728message\u8bf7\u6c42\u7684\u65f6\u5019\u7528\u5230)","title":"\u8def\u7531\u548c\u5730\u5740\u89c4\u5219"},{"location":"ic/pcie.html#_7","text":"\u5730\u5740\u8def\u7531\u7528\u6765\u5b9e\u73b0\u5185\u5b58\u548cIO\u8bf7\u6c42\uff0c\u6709\u4e24\u79cd\u683c\u5f0f\uff0c64-bit\u683c\u5f0f\u4f7f\u75284DW\u5934\uff0c32-bit\u4f7f\u75283DW\u5934\u3002 \u8bfb\u5185\u5b58\uff0c\u5199\u5185\u5b58\uff0c\u539f\u5b50\u64cd\u4f5c\u8bf7\u6c42\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u7684\u683c\u5f0f\u3002\u4f46\u5bf9\u4e8e\u4f4e\u4e8e4GB\u7684\u5730\u5740\uff0c\u5fc5\u987b\u4f7f\u752832-bit\u683c\u5f0f\u3002\u4f7f\u752864bit\u683c\u5f0f\u8bf7\u6c42\u4e00\u4e2a4GB\u5185\u7684\u5730\u5740\u7684\u884c\u4e3a\u4e0d\u505a\u5b9a\u4e49\u3002 I/O\u8bfb\u5199\u8bf7\u6c42\u4f7f\u752832-bit\u683c\u5f0f","title":"\u5730\u5740\u8def\u7531\u89c4\u5219"},{"location":"ic/pcie.html#id","text":"\u914d\u7f6e\u8bf7\u6c42\u4f7f\u7528ID\u8def\u7531 ID\u8def\u7531\u4f7f\u7528bus,device,function numbers\u6307\u5b9a\u4e00\u4e2aTLP\u76ee\u6807","title":"ID\u8def\u7531\u89c4\u5219"},{"location":"ic/pcie.html#firstlast-dw-byte","text":"\u5e72\u5565\u7528\u7684\uff1f","title":"first/last DW byte"},{"location":"ic/pcie.html#transaction-descriptor","text":"\u4e1a\u52a1\u63cf\u8ff0\u7b26\u662f\u627f\u8f7d\u4e1a\u52a1\u4fe1\u606f\u7684\u4e00\u79cd\u673a\u5236\uff0c\u5305\u542b\u4e09\u4e2a\u57df\uff1a Transaction ID \u6807\u8bc6\uff0c\u7531requester ID\u548c Tag\u5171\u540c\u7ec4\u6210 Attributes field \u6307\u5b9a\u7279\u6027\uff0c\u4e3b\u8981\u8d1f\u8d23\u4fdd\u5e8f\u548c\u786c\u4ef6\u4e00\u81f4\u6027\u7ba1\u7406(snoop) Traffic Class (TC) \u8bf7\u6c42\u670d\u52a1\u7684\u7c7b\u578b,3bit\uff0c\u5b9e\u73b08\u79cd\u7c7b\u578b\uff0c\u914d\u5408\u865a\u62df\u901a\u9053\uff0c\u5b9e\u73b0\u6d41\u63a7","title":"transaction descriptor"},{"location":"ic/pcie.html#io","text":"","title":"\u5185\u5b58/IO/\u914d\u7f6e\u8bf7\u6c42"},{"location":"ic/pcie.html#_8","text":"\u5176\u4e2dtype\u57df\u7684r[2:0]\u5b9a\u4e49\u4e86\u8def\u7531\u89c4\u5219","title":"\u6d88\u606f\u8bf7\u6c42"},{"location":"ic/pcie.html#completion","text":"\u6240\u6709\u7684\u8bfb\uff0cnon-posted\u5199\uff0c\u539f\u5b50\u64cd\u4f5c\u90fd\u9700\u8981completion\u3002completion\u5305\u542b\u5934\uff0c\u6709\u4e9b\u4f1a\u5305\u542b\u4e00\u4e9b\u6570\u636e A posted write is a computer bus write transaction that does not wait for a write completion response to indicate success or failure of the write transaction. For a posted write, the CPU assumes that the write cycle will complete with zero wait states, and so doesn't wait for the done. This speeds up writes considerably. For starters, it doesn't have to wait for the done response, but it also allows for better pipelining of the datapath without much performance penalty. A non-posted write requires that a bus transaction responds with a write completion response to indicate success or failure of the transaction, and is naturally much slower than a posted write since it requires a round trip delay similar to read bus transactions.","title":"completion\u89c4\u5219"},{"location":"ic/pcie.html#tlp","text":"RCB\u51b3\u5b9a\u4e86\u5c06\u4e00\u4e2a\u8bfb\u8bf7\u6c42\u8f6c\u6362\u4e3a\u591a\u4e2acompletions\u7684\u5730\u5740\u5206\u5272\u8fb9\u754c,\u5bf9RC\u6765\u8bb2\uff0cRCB\u662f64\u6216128\u5b57\u8282\uff0c\u53ef\u4ee5\u5728\u94fe\u8def\u63a7\u5236\u5bc4\u5b58\u5668\u4e2d\u8bbe\u7f6e\u3002","title":"\u63a5\u6536TLP\u7684\u5904\u7406"},{"location":"ic/pcie.html#_9","text":"\u5982\u56fe2-40\u6240\u793a\uff0c\u5217\u662f\u7b2c\u4e00\u4e2a\u53d1\u9001\u7684TLP\uff0c\u884c\u662f\u7b2c\u4e8c\u4e2a\u53d1\u9001\u7684TLP\uff0c\u8868\u4e2d\u63cf\u8ff0\u4e86\u7b2c\u4e00\u4e2a\u53d1\u9001\u7684TLP\u548c\u7b2c\u4e8c\u4e2a\u53d1\u9001\u7684TLP\u7684\u987a\u5e8f\u89c4\u5219\u3002 \u5176\u4e2d\u7b80\u5199\u542b\u4e49\u5982\u4e0b\uff1a Yes \u5fc5\u987b\u5141\u8bb8\u8d85\u8f66 Y/N \u600e\u4e48\u90fd\u884c No \u5fc5\u987b\u4fdd\u5e8f\uff0c\u4e0d\u80fd\u8d85\u8f66 \u8bf7\u6c42\u7c7b\u578b\u6709\u5982\u4e0b\u89e3\u91ca\uff1a Posted Request \u5185\u5b58\u5199\u8bf7\u6c42\u6216\u8005\u6d88\u606f\u8bf7\u6c42 Read Request \u914d\u7f6e\u8bfb\u8bf7\u6c42\uff0cIO\u8bfb\u8bf7\u6c42\uff0c\u5185\u5b58\u8bfb\u8bf7\u6c42 NPR with data \u914d\u7f6e\u5199\u8bf7\u6c42\uff0cIO\u5199\u8bf7\u6c42\uff0c\u539f\u5b50\u64cd\u4f5c\u8bf7\u6c42","title":"\u987a\u5e8f\u89c4\u5219"},{"location":"ic/pcie.html#_10","text":"\u6bcf\u4e00\u4e2aTC\u5fc5\u987b\u6620\u5c04\u5230\u4e00\u4e2aVC\u4e0a\uff0cTC0\u5230VC0\u7684\u6620\u5c04\u662f\u56fa\u5b9a\u7684\uff0c\u9664\u6b64\u4e4b\u5916\u7684\u6620\u5c04\u662f\u7cfb\u7edf\u8f6f\u4ef6\u5b9a\u4e49\u7684\u3002\u4f46\u662f\uff0c\u8981\u7b26\u5408\u5982\u4e0b\u89c4\u5219\uff1a \u591a\u4e2aTC\u53ef\u4ee5\u6620\u5c04\u5230\u540c\u4e00\u4e2aVC\uff0c\u4f46\u4e00\u4e2aTC\u4e0d\u80fd\u6620\u5c04\u5230\u591a\u4e2aVC \u94fe\u8def\u4e24\u7aef\u7684TC/VC\u6620\u5c04\u5fc5\u987b\u4fdd\u6301\u4e00\u81f4 DLLP\u5305\u542b\u4e86\u505a\u6d41\u63a7\u8ba1\u6570\u7684VC ID\u4fe1\u606f\uff0c TLP\u4e0d\u5305\u542b\u3002TLP\u901a\u8fc7VC/TC\u6620\u5c04\u5173\u7cfb\u6765\u5bf9\u5e94\u5230VC ID \u4e0b\u9762\u662f\u4e00\u4e2aTC/VC\u6620\u5c04\u4e3e\u4f8b","title":"\u865a\u62df\u901a\u9053\u673a\u5236"},{"location":"ic/pcie.html#_11","text":"\u6bcf\u4e00\u4e2a\u865a\u62df\u901a\u9053\u90fd\u6709\u4e00\u4e2a\u72ec\u7acb\u7684credit\u6c60 \u6d41\u63a7\u4fe1\u606f\u901a\u8fc7\u6d41\u63a7\u5305FCPs(Flow Control Packets)\u5728\u94fe\u8def\u4e24\u7aef\u4f20\u64ad\uff0cFCPs\u662f\u4e00\u79cdDLLPs \u6d41\u63a7\u662f\u4e1a\u52a1\u5c42\u548c\u6570\u636e\u94fe\u8def\u5c42\u914d\u5408\u8fdb\u884c\u5904\u7406\u7684","title":"\u6d41\u63a7"},{"location":"ic/pcie.html#_12","text":"","title":"\u5b8c\u6210\u8d85\u65f6\u673a\u5236"},{"location":"ic/pcie.html#_13","text":"\u6570\u636e\u94fe\u8def\u5c42\u8d1f\u8d23\u548c\u5bf9\u7aef\u7684\u6570\u636e\u94fe\u8def\u5c42\u53ef\u4fe1\u7684\u4ea4\u6362\u4fe1\u606f\u3002 \u521d\u59cb\u5316\u548c\u7535\u6e90\u7ba1\u7406\u670d\u52a1\uff1a \u63a5\u53d7\u6765\u81ea\u4e1a\u52a1\u5c42\u7684\u7535\u6e90\u72b6\u6001\u8bf7\u6c42\uff0c\u4f20\u9001\u5230\u7269\u7406\u5c42 \u5411\u4e1a\u52a1\u5c42\u4f20\u9001active/reset/disconnected/power managed state \u6570\u636e\u4fdd\u62a4\uff0c\u9519\u8bef\u68c0\u67e5\uff0c\u91cd\u53d1\u670d\u52a1\uff1a \u751f\u6210CRC \u4e3a\u6570\u636e\u94fe\u8def\u7ea7\u7684\u91cd\u8bd5\u5b58\u50a8TLP \u9519\u8bef\u68c0\u67e5 TLP\u786e\u8ba4\u548c\u91cd\u8bd5\u6d88\u606f \u9519\u8bef\u62a5\u544a\u548c\u65e5\u5fd7\u8bb0\u5f55\u7684\u9519\u8bef\u6307\u793a","title":"\u6570\u636e\u94fe\u8def\u5c42"},{"location":"ic/pcie.html#_14","text":"PCIe\u4e2d\u65ad\u6a21\u578b\u652f\u6301\u4e24\u79cd\u673a\u5236\uff1a INTx \u6a21\u62df message signaled interrupt(MSI/MSI-X) \u4e3a\u4e86\u5411\u524d\u517c\u5bb9\uff0cPCIe\u63d0\u4f9b\u4e86INTx\u6a21\u62df\u673a\u5236\u3002\u5b83\u901a\u8fc7\u5e26\u5185\u4fe1\u53f7\u673a\u5236\u865a\u62df\u5316\u4e86PCI\u7269\u7406\u4e2d\u65ad\u4fe1\u53f7\u3002 \u5982\u679c\u5b9e\u73b0\u7684\u8bbe\u5907\u652f\u6301\u4e2d\u65ad\uff0c\u90a3\u4e48\u8981\u6c42\u5fc5\u987b\u81f3\u5c11\u5b9e\u73b0MSI\u6216MSI-X\u7684\u4e00\u79cd\u3002\u57fa\u4e8eINTx\u7684\u5b9e\u73b0\u662f\u53ef\u9009\u7684\u3002 switch\u9700\u8981\u652f\u6301\u8f6c\u53d1INTx\u4e2d\u65ad\u6a21\u62df\u4fe1\u606f\u3002 \u7cfb\u7edf\u8f6f\u4ef6\u901a\u8fc7\u8bfb\u53d6\u591a\u4e2a\u6d88\u606f\u80fd\u529b\u57df\u6765\u51b3\u5b9a\u8bf7\u6c42\u5411\u91cf\u7684\u6570\u91cf\u3002MSI\u652f\u6301\u6bcf\u4e2a\u529f\u80fd\u6700\u591a32\u4e2a\u5411\u91cf\u3002\u7cfb\u7edf\u8f6f\u4ef6\u5199\u591a\u4e2a\u6d88\u606f\u4f7f\u80fd\u57df\u53bb\u7533\u8bf7\u6240\u6709\u7684\u6216\u8005\u4e00\u90e8\u5206\u8bf7\u6c42\u5411\u91cf\u3002\u4f46\u8bf7\u6c42\u7684\u5411\u91cf\u6570\u6bd4\u5982\u662f2\u7684\u6307\u6570\u500d\u3002 EP(end point) RP(root point) BDF(Bus, Device, Function)","title":"\u4e2d\u65ad"},{"location":"ic/qemu.html","text":"QEMU \u00b6 QEMU is a generic and open source machine emulator and virtualizer \u663e\u7136\uff0cQEMU\u6709\u4e24\u4e2a\u7528\u9014 \u4f5c\u4e3a\u6027\u80fd\u975e\u5e38\u4e0d\u9519\u7684\u6a21\u62df\u5668\uff0c\u770b\u8d77\u6765\u8fd9\u5bf9\u4e8eSOC\u5f00\u53d1\u7684\u573a\u666f\uff0c\u5728\u8c03\u8bd5\u6574\u5957\u7cfb\u7edf\u8f6f\u4ef6\u65f6\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9 \u4f5c\u4e3a\u865a\u62df\u673a\uff0cqemu\u5305\u542b\u4e86\u865a\u62df\u5316\u7684\u4e00\u5957\u5185\u5bb9\uff0c\u53ef\u4ee5\u914d\u5408KVM\u6765\u5b9e\u73b0\uff0c\u8fd9\u90e8\u5206\u5185\u5bb9\u6682\u65f6\u4e0d\u592a\u4e86\u89e3 \u672c\u6587\u53ea\u9488\u5bf9QEMU\u4f5c\u4e3a\u6a21\u62df\u5668\u7684\u573a\u666f, \u6709\u4e9b\u6280\u672f\u5185\u5bb9\u7ffb\u8bd1\u81ea\u5b98\u65b9\u6587\u6863[ https://qemu-project.gitlab.io/qemu/ ] \u6574\u4f53\u5b9e\u73b0 \u00b6 QEMU\u91c7\u53d6\u4e86\u52a8\u6001\u8f6c\u6362\u673a\u5236\uff0c\u4f1a\u5c06target\u4ee3\u7801\u7ffb\u8bd1\u6210\u540d\u4e3aTCG\u7684IR\uff0cIR\u53c8\u4f1a\u7ffb\u8bd1\u6210host\u4ee3\u7801\uff0c\u4ee3\u7801\u6309\u7167 TranslationBlock\u5206\u5757\u8fdb\u884c\u8f6c\u6362\u548c\u6267\u884c\u3002\u820d\u5f97\u820d\u5f97\uff0c\u6709\u820d\u5fc5\u6709\u5f97\uff0c\u6709\u5f97\u5fc5\u6709\u820d\u3002\u901f\u5ea6\u63d0\u5347\u4e86\uff0c\u53ef\u8c03\u8bd5\u6027\u5c31\u4e0b\u964d\u4e86\u3002 QEMU\u8ddf\u4e00\u822c\u6a21\u62df\u5668\u76f8\u6bd4\uff0c\u8c03\u8bd5\u8d77\u6765\u66f4\u9ebb\u70e6\uff0c\u6ca1\u6cd5\u8f7b\u677e\u5206\u6790\u6307\u4ee4\u884c\u4e3a\uff0c\u6bd4\u5982\u8bf4\u60f3\u5355\u6b65\u8fd0\u884c\uff0c\u5b9e\u65f6\u67e5\u770b\u5bc4\u5b58\u5668\u72b6\u6001\uff0c \u4ea4\u4e92\u5f0f\u7684\u8c03\u8bd5\uff0c\u8fd9\u79cdQEMU\u505a\u4e0d\u5230\uff0c\u5b83\u4e3a\u7684\u8fd8\u662f\u66f4\u5feb\u3002 \u4ece\u6a21\u62df\u5668\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u6211\u4eec\u4e3b\u8981\u5173\u6ce8QEMU\u7684\u5982\u4e0b\u51e0\u4e2a\u65b9\u9762\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002 \u5404\u4e2a\u90e8\u5206\u4ee3\u7801\u529f\u80fd\u3002\u4e86\u89e3\u4ee3\u7801\u5c42\u6b21\u7ed3\u6784\u5212\u5206 \u6574\u4f53\u6d41\u7a0b\u3002\u4ece\u9876\u5c42\u6765\u770b\uff0c\u6574\u4f53\u7684\u6d41\u7a0b\u3002\u4e86\u89e3QEMU\u5927\u6982\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002 \u6307\u4ee4\u6267\u884c\u8fc7\u7a0b\u3002\u5305\u542b\u53cd\u6c47\u7f16\u8fc7\u7a0b\uff0c\u4e86\u89e3\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u4ece\u4e2d\u627e\u5230\u4e00\u4e9b\u8c03\u8bd5\u624b\u6bb5\u3002 \u5bf9\u4e8e\u5404\u4e2a\u88ab\u6a21\u62df\u7684\u8bbe\u5907\u7684\u7ba1\u7406 host\u8c03\u8bd5\u624b\u6bb5 target\u8c03\u8bd5\u624b\u6bb5 \u81f3\u4e8e\u5176\u6d89\u53ca\u7684\u865a\u62df\u5316\u90e8\u5206\uff0c\u8fd9\u90e8\u5206\u592a\u5927\uff0c\u6682\u65f6\u4e5f\u5bf9\u6b64\u6ca1\u6709\u4ec0\u4e48\u4e86\u89e3\uff0c\u540e\u7eed\u82e5\u5728\u5de5\u4f5c\u4e2d\u9700\u8981\u7528\u5230\u518d\u53bb\u7814\u7a76\uff0c\u6bd5\u7adf\u76ee\u524d\u8fd9\u4e0d\u662f\u6211\u611f\u5174\u8da3\u7684\u70b9\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u5728\u7f16\u7a0b\u8bed\u8a00\u65b9\u9762\uff0c\u6211\u4e5f\u6709\u7591\u60d1\u3002\u65e2\u7136QEMU\u8d39\u5c3d\u5fc3\u673a\uff0c\u628aC\u8bed\u8a00\u5c3d\u53ef\u80fd\u505a\u7684\u50cfC++, \u90a3\u4e48\u4e3a\u4ec0\u4e48\u4e0d\u5e72\u8106\u4f7f\u7528C++\u5462\uff1f \u4ee3\u7801\u7ed3\u6784 \u00b6 \u5148\u6765\u4ece\u6574\u4e2a\u76ee\u5f55\u7684\u89d2\u5ea6\u6765\u5206\u6790\u4e00\u4e0b\u5404\u90e8\u5206\u4ee3\u7801\u7684\u529f\u80fd\u3002\u6574\u4f53\u4ee3\u7801\u7ed3\u6784\u5982\u4e0b \u76ee\u5f55 \u529f\u80fd bsd-user \u652f\u6301BSD\u7cfb\u7edf\uff0c\u901a\u8fc7\u8fd9\u4e00\u5c42\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884cBSD\u5e94\u7528\u7a0b\u5e8f linux-user \u652f\u6301linux\u7cfb\u7edf\uff0c\u901a\u8fc7\u8fd9\u4e00\u5c42\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884clinux\u5e94\u7528 hw \u5b9e\u73b0\u4e86\u5bf9\u5404\u79cd\u5916\u8bbe\u7684\u6a21\u62df QOM QEMU\u7684\u5bf9\u8c61\u7ba1\u7406\uff0c\u7528\u9762\u5411\u5bf9\u8c61\u7684\u601d\u60f3\u5b9e\u73b0\u4e86\u4e00\u5957QEMU\u7ba1\u7406\u5bf9\u8c61\u7684\u62bd\u8c61\u548c\u5c01\u88c5\uff0c\u5404\u4e2a\u88ab\u6a21\u62df\u7684\u6a21\u5757\u90fd\u662f\u4e00\u4e2aQOM\u5b50\u7c7b softmmu target \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u4e3b\u76ee\u5f55\u6709audio\u76ee\u5f55\uff0c\u5728hw\u76ee\u5f55\u4e0b\u9762\uff0c\u4e5f\u6709audio\u76ee\u5f55\uff0c\u8fd9\u4e24\u4e2a\u76ee\u5f55\u7684\u529f\u80fd\u5206\u522b\u662f\u4ec0\u4e48\uff1f \u8bbe\u5907\u7ba1\u7406\u4e4bQOM \u00b6 \u53ef\u4ee5\u4f5c\u4e3a\u5b66\u4e60\u9762\u5411\u5bf9\u8c61\u539f\u7406\u7684\u6750\u6599\uff0c\u628a\u4e00\u4e2a\u4e0d\u652f\u6301\u9762\u5411\u5bf9\u8c61\u7684C\u8bed\u8a00\uff0c\u5c01\u88c5\u6210\u652f\u6301\u9762\u5411\u5bf9\u8c61\u7684C\u8bed\u8a00\uff0c\u8fd9\u79cd\u5c01\u88c5\u548c\u4f7f\u7528\u65b9\u6cd5\uff0c\u503c\u5f97\u5b66\u4e60\uff0c\u901a\u8fc7\u5b66\u4e60\uff0c\u5e94\u8be5\u4f1a\u5bf9\u9762\u5411\u5bf9\u8c61\u6709\u66f4\u6df1\u7684\u7406\u89e3\u3002\uff08\u5f53\u7136\uff0c\u8fd9\u771f\u7684\u6709\u610f\u4e49\u5417\uff1f c++ \u6216\u8005python\u5b83\u4e0d\u9999\u5417\uff1f\uff09 \u5728qemu\u7684docs/devel/qom.rst\u4e2d\uff0c\u5305\u542b\u4e86\u96be\u5f97\u7684\u5bf9QOM\u7684\u4ecb\u7ecd\u3002QEMU Object Model \u63d0\u4f9b\u4e86\u4e00\u4e2a\u6846\u67b6\uff0c\u57fa\u4e8e\u8fd9\u4e2a\u6846\u67b6\uff0c\u4f7f\u7528\u8005\u53ef\u4ee5\u628a\u81ea\u5df1\u6dfb\u52a0\u7c7b\u578b\u505a\u6ce8\u518c\u548c\u5b9e\u4f8b\u5316\u3002 TypeInfo \u548c TypeImpl struct TypeInfo { const char * name ; const char * parent ; size_t instance_size ; size_t instance_align ; void ( * instance_init )( Object * obj ); void ( * instance_post_init )( Object * obj ); void ( * instance_finalize )( Object * obj ); bool abstract ; size_t class_size ; void ( * class_init )( ObjectClass * klass , void * data ); void ( * class_base_init )( ObjectClass * klass , void * data ); void * class_data ; InterfaceInfo * interfaces ; }; struct TypeImpl { const char * name ; size_t class_size ; size_t instance_size ; size_t instance_align ; void ( * class_init )( ObjectClass * klass , void * data ); void ( * class_base_init )( ObjectClass * klass , void * data ); void * class_data ; void ( * instance_init )( Object * obj ); void ( * instance_post_init )( Object * obj ); void ( * instance_finalize )( Object * obj ); bool abstract ; const char * parent ; TypeImpl * parent_type ; ObjectClass * class ; int num_interfaces ; InterfaceImpl interfaces [ MAX_INTERFACES ]; }; \u8fd9\u4e24\u8005\u5b9a\u4e49\u57fa\u672c\u76f8\u540c\uff0c\u4f46 \u4ee5RISCV CPU\u6765\u4e3e\u4f8b\u8bf4\u660e static const TypeInfo riscv_cpu_type_infos [] = { { . name = TYPE_RISCV_CPU , . parent = TYPE_CPU , . instance_size = sizeof ( RISCVCPU ), . instance_align = __alignof__ ( RISCVCPU ), . instance_init = riscv_cpu_init , . abstract = true , . class_size = sizeof ( RISCVCPUClass ), . class_init = riscv_cpu_class_init , }, DEFINE_CPU ( TYPE_RISCV_CPU_ANY , riscv_any_cpu_init ), DEFINE_CPU ( TYPE_RISCV_CPU_BASE64 , rv64_base_cpu_init ), DEFINE_CPU ( TYPE_RISCV_CPU_SIFIVE_E51 , rv64_sifive_e_cpu_init ), DEFINE_CPU ( TYPE_RISCV_CPU_SIFIVE_U54 , rv64_sifive_u_cpu_init ), }; DEFINE_TYPES ( riscv_cpu_type_infos ) \u8c03\u8bd5\u65b9\u6cd5 \u00b6 ctrl + A / X \u9000\u51fa ctrl + A / C \u76d1\u63a7\u6a21\u5f0f -D log\u6587\u4ef6 -d \u8c03\u8bd5\u6a21\u5757\u5f00\u5173 \u4ee3\u7801\u7ec6\u8282 \u00b6 // cpu\u7ebf\u7a0b tcg_cpu_thread_fn () //tcg cpu_exec_step_atomic () tb_gen_code () cpu_tb_exec () /* \u751f\u6210(gen)\u8fc7\u7a0b */ tb_gen_code () gen_intermediate_code () trace_translate_block () tcg_gen_code () gen_intermediate_code () //arch translator_loop ( TranslatorOps * ops ) //tcg ops -> translate_insn () : riscv_tr_translate_insn () riscv_tr_translate_insn () decode_opc () decode_insn32 () // \u81ea\u52a8\u751f\u6210\uff0c\u5728\u7f16\u8bd1\u9636\u6bb5\u751f\u6210\u7684<decode-insn32.c.inc> trans_xxxx () //insn_trans\u76ee\u5f55\u4e0b\u7684\u5404\u4e2atrans_xxx_c.inc\u6587\u4ef6 tcg_gen_xxxx () gen_xxxx () gen_helper_xxxx () tcg_gen_callN ( helper_xxxx (), .....) gen_helper_tlb_flush () /* \u6267\u884c\u8fc7\u7a0b */","title":"QEMU"},{"location":"ic/qemu.html#qemu","text":"QEMU is a generic and open source machine emulator and virtualizer \u663e\u7136\uff0cQEMU\u6709\u4e24\u4e2a\u7528\u9014 \u4f5c\u4e3a\u6027\u80fd\u975e\u5e38\u4e0d\u9519\u7684\u6a21\u62df\u5668\uff0c\u770b\u8d77\u6765\u8fd9\u5bf9\u4e8eSOC\u5f00\u53d1\u7684\u573a\u666f\uff0c\u5728\u8c03\u8bd5\u6574\u5957\u7cfb\u7edf\u8f6f\u4ef6\u65f6\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9 \u4f5c\u4e3a\u865a\u62df\u673a\uff0cqemu\u5305\u542b\u4e86\u865a\u62df\u5316\u7684\u4e00\u5957\u5185\u5bb9\uff0c\u53ef\u4ee5\u914d\u5408KVM\u6765\u5b9e\u73b0\uff0c\u8fd9\u90e8\u5206\u5185\u5bb9\u6682\u65f6\u4e0d\u592a\u4e86\u89e3 \u672c\u6587\u53ea\u9488\u5bf9QEMU\u4f5c\u4e3a\u6a21\u62df\u5668\u7684\u573a\u666f, \u6709\u4e9b\u6280\u672f\u5185\u5bb9\u7ffb\u8bd1\u81ea\u5b98\u65b9\u6587\u6863[ https://qemu-project.gitlab.io/qemu/ ]","title":"QEMU"},{"location":"ic/qemu.html#_1","text":"QEMU\u91c7\u53d6\u4e86\u52a8\u6001\u8f6c\u6362\u673a\u5236\uff0c\u4f1a\u5c06target\u4ee3\u7801\u7ffb\u8bd1\u6210\u540d\u4e3aTCG\u7684IR\uff0cIR\u53c8\u4f1a\u7ffb\u8bd1\u6210host\u4ee3\u7801\uff0c\u4ee3\u7801\u6309\u7167 TranslationBlock\u5206\u5757\u8fdb\u884c\u8f6c\u6362\u548c\u6267\u884c\u3002\u820d\u5f97\u820d\u5f97\uff0c\u6709\u820d\u5fc5\u6709\u5f97\uff0c\u6709\u5f97\u5fc5\u6709\u820d\u3002\u901f\u5ea6\u63d0\u5347\u4e86\uff0c\u53ef\u8c03\u8bd5\u6027\u5c31\u4e0b\u964d\u4e86\u3002 QEMU\u8ddf\u4e00\u822c\u6a21\u62df\u5668\u76f8\u6bd4\uff0c\u8c03\u8bd5\u8d77\u6765\u66f4\u9ebb\u70e6\uff0c\u6ca1\u6cd5\u8f7b\u677e\u5206\u6790\u6307\u4ee4\u884c\u4e3a\uff0c\u6bd4\u5982\u8bf4\u60f3\u5355\u6b65\u8fd0\u884c\uff0c\u5b9e\u65f6\u67e5\u770b\u5bc4\u5b58\u5668\u72b6\u6001\uff0c \u4ea4\u4e92\u5f0f\u7684\u8c03\u8bd5\uff0c\u8fd9\u79cdQEMU\u505a\u4e0d\u5230\uff0c\u5b83\u4e3a\u7684\u8fd8\u662f\u66f4\u5feb\u3002 \u4ece\u6a21\u62df\u5668\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u6211\u4eec\u4e3b\u8981\u5173\u6ce8QEMU\u7684\u5982\u4e0b\u51e0\u4e2a\u65b9\u9762\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002 \u5404\u4e2a\u90e8\u5206\u4ee3\u7801\u529f\u80fd\u3002\u4e86\u89e3\u4ee3\u7801\u5c42\u6b21\u7ed3\u6784\u5212\u5206 \u6574\u4f53\u6d41\u7a0b\u3002\u4ece\u9876\u5c42\u6765\u770b\uff0c\u6574\u4f53\u7684\u6d41\u7a0b\u3002\u4e86\u89e3QEMU\u5927\u6982\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002 \u6307\u4ee4\u6267\u884c\u8fc7\u7a0b\u3002\u5305\u542b\u53cd\u6c47\u7f16\u8fc7\u7a0b\uff0c\u4e86\u89e3\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u4ece\u4e2d\u627e\u5230\u4e00\u4e9b\u8c03\u8bd5\u624b\u6bb5\u3002 \u5bf9\u4e8e\u5404\u4e2a\u88ab\u6a21\u62df\u7684\u8bbe\u5907\u7684\u7ba1\u7406 host\u8c03\u8bd5\u624b\u6bb5 target\u8c03\u8bd5\u624b\u6bb5 \u81f3\u4e8e\u5176\u6d89\u53ca\u7684\u865a\u62df\u5316\u90e8\u5206\uff0c\u8fd9\u90e8\u5206\u592a\u5927\uff0c\u6682\u65f6\u4e5f\u5bf9\u6b64\u6ca1\u6709\u4ec0\u4e48\u4e86\u89e3\uff0c\u540e\u7eed\u82e5\u5728\u5de5\u4f5c\u4e2d\u9700\u8981\u7528\u5230\u518d\u53bb\u7814\u7a76\uff0c\u6bd5\u7adf\u76ee\u524d\u8fd9\u4e0d\u662f\u6211\u611f\u5174\u8da3\u7684\u70b9\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u5728\u7f16\u7a0b\u8bed\u8a00\u65b9\u9762\uff0c\u6211\u4e5f\u6709\u7591\u60d1\u3002\u65e2\u7136QEMU\u8d39\u5c3d\u5fc3\u673a\uff0c\u628aC\u8bed\u8a00\u5c3d\u53ef\u80fd\u505a\u7684\u50cfC++, \u90a3\u4e48\u4e3a\u4ec0\u4e48\u4e0d\u5e72\u8106\u4f7f\u7528C++\u5462\uff1f","title":"\u6574\u4f53\u5b9e\u73b0"},{"location":"ic/qemu.html#_2","text":"\u5148\u6765\u4ece\u6574\u4e2a\u76ee\u5f55\u7684\u89d2\u5ea6\u6765\u5206\u6790\u4e00\u4e0b\u5404\u90e8\u5206\u4ee3\u7801\u7684\u529f\u80fd\u3002\u6574\u4f53\u4ee3\u7801\u7ed3\u6784\u5982\u4e0b \u76ee\u5f55 \u529f\u80fd bsd-user \u652f\u6301BSD\u7cfb\u7edf\uff0c\u901a\u8fc7\u8fd9\u4e00\u5c42\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884cBSD\u5e94\u7528\u7a0b\u5e8f linux-user \u652f\u6301linux\u7cfb\u7edf\uff0c\u901a\u8fc7\u8fd9\u4e00\u5c42\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884clinux\u5e94\u7528 hw \u5b9e\u73b0\u4e86\u5bf9\u5404\u79cd\u5916\u8bbe\u7684\u6a21\u62df QOM QEMU\u7684\u5bf9\u8c61\u7ba1\u7406\uff0c\u7528\u9762\u5411\u5bf9\u8c61\u7684\u601d\u60f3\u5b9e\u73b0\u4e86\u4e00\u5957QEMU\u7ba1\u7406\u5bf9\u8c61\u7684\u62bd\u8c61\u548c\u5c01\u88c5\uff0c\u5404\u4e2a\u88ab\u6a21\u62df\u7684\u6a21\u5757\u90fd\u662f\u4e00\u4e2aQOM\u5b50\u7c7b softmmu target \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u4e3b\u76ee\u5f55\u6709audio\u76ee\u5f55\uff0c\u5728hw\u76ee\u5f55\u4e0b\u9762\uff0c\u4e5f\u6709audio\u76ee\u5f55\uff0c\u8fd9\u4e24\u4e2a\u76ee\u5f55\u7684\u529f\u80fd\u5206\u522b\u662f\u4ec0\u4e48\uff1f","title":"\u4ee3\u7801\u7ed3\u6784"},{"location":"ic/qemu.html#qom","text":"\u53ef\u4ee5\u4f5c\u4e3a\u5b66\u4e60\u9762\u5411\u5bf9\u8c61\u539f\u7406\u7684\u6750\u6599\uff0c\u628a\u4e00\u4e2a\u4e0d\u652f\u6301\u9762\u5411\u5bf9\u8c61\u7684C\u8bed\u8a00\uff0c\u5c01\u88c5\u6210\u652f\u6301\u9762\u5411\u5bf9\u8c61\u7684C\u8bed\u8a00\uff0c\u8fd9\u79cd\u5c01\u88c5\u548c\u4f7f\u7528\u65b9\u6cd5\uff0c\u503c\u5f97\u5b66\u4e60\uff0c\u901a\u8fc7\u5b66\u4e60\uff0c\u5e94\u8be5\u4f1a\u5bf9\u9762\u5411\u5bf9\u8c61\u6709\u66f4\u6df1\u7684\u7406\u89e3\u3002\uff08\u5f53\u7136\uff0c\u8fd9\u771f\u7684\u6709\u610f\u4e49\u5417\uff1f c++ \u6216\u8005python\u5b83\u4e0d\u9999\u5417\uff1f\uff09 \u5728qemu\u7684docs/devel/qom.rst\u4e2d\uff0c\u5305\u542b\u4e86\u96be\u5f97\u7684\u5bf9QOM\u7684\u4ecb\u7ecd\u3002QEMU Object Model \u63d0\u4f9b\u4e86\u4e00\u4e2a\u6846\u67b6\uff0c\u57fa\u4e8e\u8fd9\u4e2a\u6846\u67b6\uff0c\u4f7f\u7528\u8005\u53ef\u4ee5\u628a\u81ea\u5df1\u6dfb\u52a0\u7c7b\u578b\u505a\u6ce8\u518c\u548c\u5b9e\u4f8b\u5316\u3002 TypeInfo \u548c TypeImpl struct TypeInfo { const char * name ; const char * parent ; size_t instance_size ; size_t instance_align ; void ( * instance_init )( Object * obj ); void ( * instance_post_init )( Object * obj ); void ( * instance_finalize )( Object * obj ); bool abstract ; size_t class_size ; void ( * class_init )( ObjectClass * klass , void * data ); void ( * class_base_init )( ObjectClass * klass , void * data ); void * class_data ; InterfaceInfo * interfaces ; }; struct TypeImpl { const char * name ; size_t class_size ; size_t instance_size ; size_t instance_align ; void ( * class_init )( ObjectClass * klass , void * data ); void ( * class_base_init )( ObjectClass * klass , void * data ); void * class_data ; void ( * instance_init )( Object * obj ); void ( * instance_post_init )( Object * obj ); void ( * instance_finalize )( Object * obj ); bool abstract ; const char * parent ; TypeImpl * parent_type ; ObjectClass * class ; int num_interfaces ; InterfaceImpl interfaces [ MAX_INTERFACES ]; }; \u8fd9\u4e24\u8005\u5b9a\u4e49\u57fa\u672c\u76f8\u540c\uff0c\u4f46 \u4ee5RISCV CPU\u6765\u4e3e\u4f8b\u8bf4\u660e static const TypeInfo riscv_cpu_type_infos [] = { { . name = TYPE_RISCV_CPU , . parent = TYPE_CPU , . instance_size = sizeof ( RISCVCPU ), . instance_align = __alignof__ ( RISCVCPU ), . instance_init = riscv_cpu_init , . abstract = true , . class_size = sizeof ( RISCVCPUClass ), . class_init = riscv_cpu_class_init , }, DEFINE_CPU ( TYPE_RISCV_CPU_ANY , riscv_any_cpu_init ), DEFINE_CPU ( TYPE_RISCV_CPU_BASE64 , rv64_base_cpu_init ), DEFINE_CPU ( TYPE_RISCV_CPU_SIFIVE_E51 , rv64_sifive_e_cpu_init ), DEFINE_CPU ( TYPE_RISCV_CPU_SIFIVE_U54 , rv64_sifive_u_cpu_init ), }; DEFINE_TYPES ( riscv_cpu_type_infos )","title":"\u8bbe\u5907\u7ba1\u7406\u4e4bQOM"},{"location":"ic/qemu.html#_3","text":"ctrl + A / X \u9000\u51fa ctrl + A / C \u76d1\u63a7\u6a21\u5f0f -D log\u6587\u4ef6 -d \u8c03\u8bd5\u6a21\u5757\u5f00\u5173","title":"\u8c03\u8bd5\u65b9\u6cd5"},{"location":"ic/qemu.html#_4","text":"// cpu\u7ebf\u7a0b tcg_cpu_thread_fn () //tcg cpu_exec_step_atomic () tb_gen_code () cpu_tb_exec () /* \u751f\u6210(gen)\u8fc7\u7a0b */ tb_gen_code () gen_intermediate_code () trace_translate_block () tcg_gen_code () gen_intermediate_code () //arch translator_loop ( TranslatorOps * ops ) //tcg ops -> translate_insn () : riscv_tr_translate_insn () riscv_tr_translate_insn () decode_opc () decode_insn32 () // \u81ea\u52a8\u751f\u6210\uff0c\u5728\u7f16\u8bd1\u9636\u6bb5\u751f\u6210\u7684<decode-insn32.c.inc> trans_xxxx () //insn_trans\u76ee\u5f55\u4e0b\u7684\u5404\u4e2atrans_xxx_c.inc\u6587\u4ef6 tcg_gen_xxxx () gen_xxxx () gen_helper_xxxx () tcg_gen_callN ( helper_xxxx (), .....) gen_helper_tlb_flush () /* \u6267\u884c\u8fc7\u7a0b */","title":"\u4ee3\u7801\u7ec6\u8282"},{"location":"ic/simulator.html","text":"\u6a21\u62df\u5668\u4e4b\u6211\u89c1 \u00b6 \u4ece\u4e8b\u82af\u7247\u6a21\u62df\u5668\u5f00\u53d1\u7684\u5de5\u4f5c\u4e5f\u6709\u4e00\u6bb5\u65f6\u95f4\u4e86\uff0c\u968f\u7740\u5de5\u4f5c\u7684\u6df1\u5165\uff0c\u6709\u4e00\u4e2a\u95ee\u9898\u4e00\u76f4\u5728\u6211\u8111\u6d77\u4e2d\u4e0d\u65f6\u7684\u6d6e\u73b0\uff1a \u5f53\u6211\u4eec\u9700\u8981\u4f7f\u7528\u6a21\u62df\u5668\u7684\u65f6\u5019\uff0c\u6211\u4eec\u600e\u4e48\u6765\u786e\u5b9a\u5b9e\u73b0\u65b9\u6848 \u3002 \u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u62c6\u5206\u4e3a\u4e24\u6b65\uff1a \u786e\u5b9a\u9700\u6c42 \u6839\u636e\u9700\u8981\u786e\u5b9a\u5b9e\u73b0\u65b9\u6848 \u8981\u5b8c\u6210\u8fd9\u4e24\u6b65\uff0c\u6700\u5173\u952e\u7684\u662f\u9700\u8981\u5bf9\u76ee\u524d\u5728\u6a21\u62df\u5668\u9886\u57df\u5927\u5bb6\u666e\u904d\u91c7\u7528\u7684\u65b9\u6848\u505a\u4e00\u4e2a\u603b\u7ed3\uff0c\u8fd9\u4e5f\u662f\u8fd9\u7bc7\u6587\u7ae0\u7684\u4e3b\u9898\u4e4b\u4e00\u3002\u5728\u8fd9\u4e4b\u524d\uff0c\u6211\u89c9\u5f97\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u5f88\u5173\u952e\uff0c\u4e5f\u975e\u5e38\u9700\u8981\u8bf4\u660e\u767d\u3002\u5982\u679c\u8bf4\u5982\u4f55\u9009\u62e9\u6a21\u62df\u5668\u662f\u65b9\u6cd5\u8bba\uff0c\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u5c31\u662f\u4e16\u754c\u89c2\uff1a \u6211\u4eec\u4e3a\u4ec0\u4e48\u9700\u8981\u6a21\u62df\u5668 \u6211\u4eec\u4e3a\u4ec0\u4e48\u9700\u8981\u6a21\u62df\u5668 \u00b6 \u5728\u82af\u7247\u5f00\u53d1\u524d\u671f\uff0cRTL\u521a\u5f00\u59cb\u5f00\u53d1\uff0c\u6ca1\u6709FPGA\u73af\u5883\uff0c\u66f4\u6ca1\u6709\u9a8c\u8bc1\u677f\uff0c \u8fd9\u65f6\u5019\u8f6f\u4ef6\u4e5f\u9700\u8981\u5f00\u53d1\u548c\u9a8c\u8bc1\uff0c\u9700\u8981\u6709\u4e00\u4e2a\u548c\u82af\u7247\u884c\u4e3a\u4e00\u81f4\u7684\u73af\u5883\u6765\u505a\u8f6f\u4ef6\u5f00\u53d1\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u884c\u4e3a\u7ea7\u6a21\u62df\u5668\uff0csimulator \u5728\u67b6\u6784\u8bbe\u8ba1\u8fc7\u7a0b\u4e2d\uff0c\u5e0c\u671b\u80fd\u591f\u5feb\u901f\u7684\u9a8c\u8bc1\u5fae\u67b6\u6784\u7684\u8bbe\u8ba1,\u65f6\u949f\u7ea7\u6a21\u62df\u5668\uff0cemulator \u5e0c\u671b\u6709\u4e00\u4e2a\u80fd\u591f\u4ea7\u751fgolden\u7684\u73af\u5883\uff0c\u9700\u8981\u9a8c\u8bc1\u6846\u67b6\uff0c\u6a21\u62df\u5668\uff0cRTL\u8fdb\u884c\u4e00\u4e2a\u4e09\u65b9\u9a8c\u8bc1 \u5728\u8f6f\u4ef6\u4f18\u5316\u65b9\u9762\uff0c\u5982\u679c\u80fd\u6709\u4e00\u4e2a\u65f6\u949f\u7ea7\u6a21\u62df\u5668\uff0c\u80fd\u591f\u63d0\u4f9b\u4e00\u4e9b\u5173\u952e\u4fe1\u606f\uff0c\u90a3\u4e48\u4f1a\u5bf9\u8f6f\u4ef6\u548c\u5de5\u5177\u94fe\u4f18\u5316\u6709\u5f88\u5927\u5e2e\u52a9\u3002\u6bd5\u7adfFPGA\u548c\u5e15\u62c9\u4e01\u73af\u5883\u90fd\u662f\u6709\u9650\u7684 \u4e00\u4e9bIP\u5382\u5546\u5f80\u5f80\u4f1a\u63d0\u4f9b\u914d\u5957\u7684IP\u6a21\u62df\u5668\uff0c\u6bd4\u5982systemC\u7684\u4e00\u4e2aIP\u6a21\u62df \u603b\u7ed3\u8d77\u6765\uff0c\u6a21\u62df\u5668\u5177\u6709\u5982\u4e0b\u4f18\u52bf \u5f00\u53d1\u901f\u5ea6\u8f83\u5feb\uff0c\u5f00\u53d1\u5468\u671f\u77ed\uff0c\u65b9\u4fbf\u8fdb\u884c\u4fee\u6539\uff0c\u8fed\u4ee3 \u53d1\u5e03\uff0c\u90e8\u7f72\u7b80\u5355\uff0cPC\u5c31\u80fd\u8fd0\u884c\uff0c\u8fd0\u884c\u73af\u5883\u6210\u672c\u4f4e\uff0c\u4e0d\u5bb9\u6613\u53d7\u786c\u4ef6\u8d44\u6e90\u7684\u9650\u5236 \u80fd\u591f\u6dfb\u52a0\u7684\u8f85\u52a9\u624b\u6bb5\u591a\uff0c\u80fd\u591f\u63d0\u4f9b\u4e30\u5bcc\u7684\u8c03\u8bd5\u4fe1\u606f \u90a3\u6a21\u62df\u5668\u7684\u7f3a\u70b9\u5462\uff1f\u6211\u89c9\u5f97\u4e3b\u8981\u662f\u4e0b\u9762\u51e0\u4e2a\u65b9\u9762\uff1a \u8fd0\u884c\u901f\u5ea6\u6162\uff0c\u7279\u522b\u662f\u7ec6\u529b\u5ea6\u7684\u65f6\u949f\u7ea7\u6a21\u62df\u5668\uff0c\u884c\u4e3a\u7ea7\u666e\u904d\u8fd8\u80fd\u63a5\u53d7 \u5f00\u53d1\u6210\u672c\u4e0d\u4f4e\uff0c\u65f6\u949f\u7ea7\u6a21\u62df\u5668\u5982\u679c\u8981\u6a21\u62df\u7cbe\u7ec6\uff0c\u5de5\u4f5c\u91cf\u4e5f\u4e0d\u4e9a\u4e8e\u5199RTL \u603b\u4f53\u6765\u770b\uff0c\u6a21\u62df\u5668\u7684\u4f18\u70b9\u975e\u5e38\u660e\u663e\uff0c\u5b83\u89e3\u51b3\u7684\u90fd\u662f\u82af\u7247\u8bbe\u8ba1\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u7684\u75db\u70b9\uff0c\u80fd\u591f\u5e2e\u52a9\u5c3d\u65e9\u7684\u53d1\u73b0\u95ee\u9898\uff0c\u786e\u8ba4\u95ee\u9898\uff0c\u81f3\u4e8e\u8fd0\u884c\u901f\u5ea6\u6162\uff0c\u53ef\u4ee5\u6709\u5f88\u591a\u89e3\u51b3\u529e\u6cd5\u548c\u4f18\u5316\u624b\u6bb5\uff0c\u6bd4\u5982\u53ea\u5bf9\u5173\u6ce8\u6a21\u5757\u505a\u7ec6\u529b\u5ea6\uff0c\u6bd4\u5982\u91c7\u7528\u591a\u7ebf\u7a0b\u548c\u5206\u5e03\u5f0f\uff0c\u81f3\u4e8e\u5de5\u4f5c\u91cf\u7684\u95ee\u9898\uff0c\u6211\u60f3\u8fd8\u662f\u6210\u672c\u66f4\u91cd\u8981\u3002 \u672a\u6765\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff0c\u6a21\u62df\u5668\u5728\u82af\u7247\u5f00\u53d1\u9886\u57df\u4ecd\u7136\u662f\u4e0d\u53ef\u6216\u7f3a\u7684\uff0c\u800c\u4e14\u968f\u7740\u56fd\u5185\u82af\u7247\u7684\u53d1\u529b\uff0c\u8fd9\u65b9\u9762\u7684\u9700\u6c42\u9010\u6e10\u65fa\u76db\uff0c\u81f3\u5c11\u672a\u6765\u4e09\u5e74\u662f\u4e00\u4e2a\u4f9b\u5c0f\u4e8e\u6c42\u7684\u5c40\u9762 \u6a21\u62df\u5668\u7684\u5206\u7c7b \u00b6 \u5f88\u591a\u6587\u7ae0\u6216\u8005\u8bba\u6587\u4e2d\u53ef\u80fd\u4f1a\u5bf9\u6a21\u62df\u5668\u79cd\u7c7b\u5206\u7684\u5f88\u7ec6\uff0c\u6709\u5174\u8da3\u7684\u4e5f\u53ef\u4ee5\u81ea\u884c\u641c\u7d22\u3002\u6211\u8ba4\u4e3a\u5b8f\u89c2\u4e0a\u6a21\u62df\u5668\u5c31\u5206\u4e24\u7c7b\uff0c\u884c\u4e3a\u7ea7\u548c\u65f6\u949f\u7ea7\u3002 \u6709\u4e9b\u6587\u7ae0\u4e2d\u5c06\u65f6\u949f\u7ea7\u6a21\u62df\u79f0\u4e3aemulation\u884c\u4e3a\u7ea7\u6a21\u62df\u79f0\u4e3asimulation\u3002\u8fd9\u4e24\u4e2a\u660e\u663e\u7684\u533a\u522b\u5728\u4e8e\u6d89\u4e0d\u6d89\u53ca\u5fae\u67b6\u6784\u7684\u62bd\u8c61\u3002\u884c\u4e3a\u7ea7\u662f\u529f\u80fd\u6a21\u578b\uff0c\u4e0d\u9700\u8981\u5bf9\u5fae\u67b6\u6784\u8fdb\u884c\u62bd\u8c61\uff0c\u4e0d\u9700\u8981\u6709\u7cbe\u786e\u7684\u65f6\u949f; \u65f6\u949f\u7ea7\u4e00\u5b9a\u4f1a\u6709\u7cbe\u786e\u7684\u65f6\u949f\uff0c\u4e5f\u4e00\u5b9a\u4f1a\u6d89\u53ca\u5fae\u67b6\u6784\u3002 \u662f\u4e0d\u662f\u6b64\u65f6\u7279\u522b\u60f3\u8981\u4e00\u4e2a\u8868\u683c\uff0c\u91cc\u9762\u6c47\u603b\u4e86\u76ee\u524d\u5e02\u9762\u4e0a\u7684\u5404\u79cd\u5404\u6837\u7684\u6a21\u62df\u5668\uff1f\u522b\u8bf4\uff0c\u8fd8\u771f\u8ba9\u6211\u627e\u5230\u4e86\u4e00\u4e2a [ http://pages.cs.wisc.edu/~arch/www/tools.html ] \u884c\u4e3a\u7ea7\u6a21\u62df\u5668 \u00b6 \u4e00\u822c\u6765\u8bb2\uff0c\u884c\u4e3a\u7ea7\u6a21\u62df\u5668\u5b9e\u73b0\u8d77\u6765\u8981\u7b80\u5355\u7684\u591a\uff0c\u4ee3\u7801\u91cf\u4e0d\u4f1a\u592a\u5927\u3002\u5f53\u7136\uff0c\u5f88\u591a\u884c\u4e3a\u7ea7\u6a21\u62df\u5668\u80a9\u8d1f\u4e86\u865a\u62df\u5316\u7684\u4f7f\u547d\uff0c\u4e5f\u4f1a\u6bd4\u8f83\u5e9e\u5927\u3002 \u6709\u4e9b\u4e3a\u4e86\u6267\u884c\u8d77\u6765\u66f4\u5feb\uff0c\u4e5f\u5f15\u5165\u4e86\u4e00\u4e9b\u6bd4\u8f83\u590d\u6742\u7684\u5b9e\u73b0\u3002\u4f46\u603b\u4f53\u6765\u8bb2\uff0c\u884c\u4e3a\u7ea7\u6a21\u62df\u5668\u8981\u76f8\u5bf9\u7b80\u5355\uff0c\u5f00\u53d1\u5468\u671f\u77ed\uff0c\u5bb9\u6613\u7a33\u5b9a\u3002 \u884c\u4e3a\u7ea7\u6a21\u62df\u5668\u9002\u5408\u7528\u6765\u505a\u8f6f\u4ef6\u8fd0\u884c\u5e73\u53f0\uff0c\u4e3a\u8f6f\u4ef6\u5f00\u53d1\u63d0\u4f9b\u8c03\u8bd5\u73af\u5883\u3002\u4e5f\u5f88\u9002\u5408\u505a\u4e09\u65b9\u9a8c\u8bc1\uff0c\u51fa\u4e00\u4e9b\u6d4b\u8bd5golden\u3002 \u65f6\u949f\u7ea7\u6a21\u62df\u5668 \u00b6 \u65f6\u949f\u7ea7\u6a21\u62df\u5668\u7684\u4ee3\u7801\u903b\u8f91\u8981\u66f4\u590d\u6742\uff0c\u5b83\u7684\u91cd\u70b9\u5728\u4e8e\u5fae\u67b6\u6784\u7684\u6a21\u62df\uff0c\u8981\u7ed9\u51fa\u5fae\u67b6\u6784\u5728\u6bcf\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u7684\u884c\u4e3a\u3002\u8981\u770b\u660e\u767d\u4e00\u4e2a\u6a21\u5757\uff0c\u5f80\u5f80\u9700\u8981\u770b\u591a\u4e2a\u6a21\u5757\uff0c\u6bd4\u5982\u5206\u6790\u6d41\u6c34\u7ebf\uff0c\u5c31\u4e0d\u80fd\u53ea\u5206\u6790\u6267\u884c\u9636\u6bb5\uff0c\u8981\u5206\u6790\u5bc4\u5b58\u5668\u91cd\u547d\u540d\uff0c\u8fd8\u9700\u8981\u7ed3\u5408\u6d41\u6c34\u7ebf\uff0cROB\u7b49\u6a21\u5757\u3002\u603b\u4e4b\uff0c\u5b83\u9700\u8981\u540c\u76d8\u5206\u6790\uff0c\u9700\u8981\u66f4\u591a\u7684\u903b\u8f91\u6027\u3002 \u65f6\u949f\u7ea7\u6a21\u62df\u662f\u6709\u7c92\u5ea6\u7684\u3002\u7c92\u5ea6\u8d8a\u7ec6\uff0c\u8fd0\u884c\u901f\u5ea6\u8d8a\u6162\uff0c\u54ea\u91cc\u7c97\u54ea\u91cc\u7ec6\uff0c\u8981\u770b\u9700\u6c42\uff0c\u4e00\u5473\u7684\u7ec6\u4f1a\u5e26\u6765\u5de8\u5927\u7684\u5de5\u4f5c\u91cf \u65f6\u949f\u7ea7\u6a21\u62df\u662f\u53ef\u4ee5\u5077\u61d2\u7684\u3002\u6bd5\u7adf\u662f\u6a21\u62df\u5668\uff0c\u5728\u6ee1\u8db3\u9700\u6c42\u7684\u60c5\u51b5\u4e0b\uff0c\u5b8c\u5168\u53ef\u4ee5\u4ece\u8f6f\u4ef6\u5b9e\u73b0\u65b9\u4fbf\u3001\u9ad8\u6548\u7684\u89d2\u5ea6\u6765\u8fdb\u884c\u5b9e\u73b0\u3002\u6bd4\u5982\u4e00\u4e2a\u8ba1\u7b97\u6307\u4ee4\u7684\u5b9e\u73b0\uff0c\u5047\u5982\u65e0\u6cd5\u5728\u4e00\u4e2a\u5468\u671f\u4e2d\u6267\u884c\u5b8c\uff0c\u90a3\u4e48RTL\u5c31\u9700\u8981\u5206\u591a\u6b21\u8fdb\u884c\u8ba1\u7b97\uff0c\u4f46\u6a21\u62df\u5668\u5b8c\u5168\u53ef\u4ee5\u4e00\u6b21\u8ba1\u7b97\u5b8c\u6210\uff0c\u53ea\u9700\u8981\u591a\u6b21store\u5373\u53ef\u3002\u8fd9\u6837\uff0c\u8f6f\u4ef6\u8ba1\u7b97\u8d77\u6765\u5c31\u65b9\u4fbf\uff0c\u800c\u4e14\u5bb9\u6613\u8fdb\u884c\u52a0\u901f\u3002 \u5e38\u89c1\u884c\u4e3a\u7ea7\u6a21\u62df\u5668\u5206\u6790 \u00b6 QEMU \u00b6 QEMU\u5f88\u7ecf\u5178\uff0c\u5e94\u7528\u5e7f\u6cdb\uff0c\u597d\u591a\u8f6f\u4ef6\u90fd\u5728\u4f7f\u7528QEMU\u3002\u5b83\u4e0d\u5355\u5355\u662f\u4e00\u6b3e\u884c\u4e3a\u7ea7\u6a21\u62df\u5668\uff0c\u66f4\u662f\u4e00\u6b3e\u865a\u62df\u673a\u3002 \u4f5c\u4e3a\u6a21\u62df\u5668\u6846\u67b6\u6765\u770b\uff0c\u4f18\u70b9\u53ef\u4ee5\u603b\u7ed3\u5982\u4e0b\uff1a \u91c7\u7528\u52a8\u6001\u8f6c\u6362\u673a\u5236\uff0c\u4ee5Translate Block\u4e3a\u5355\u4f4d\uff0c\u8fd0\u884c\u901f\u5ea6\u5feb\uff0c\u6548\u7387\u9ad8\u3002\u8dd1\u4e2alinux\u5185\u6838\u5b8c\u5168\u6ca1\u6709\u95ee\u9898\uff0c\u540c\u65f6\u8fd8\u53ef\u4ee5KVM\u52a0\u901f \u652f\u6301\u7684\u6307\u4ee4\u96c6\u67b6\u6784\u4e30\u5bcc\uff0c\u5e38\u89c1\u7684\u90fd\u652f\u6301\uff0c\u5305\u62ec\u73b0\u5728\u706b\u70ed\u7684RISCV \u652f\u6301\u4e30\u5bcc\u7684\u5916\u8bbe\u6a21\u62df\uff0c\u7ec4\u5efaSOC\u5b8c\u5168\u591f\u7528 \u7f3a\u70b9\u603b\u7ed3\u5982\u4e0b\uff1a \u65e0\u6cd5\u5355\u6761\u6307\u4ee4debug\uff0c\u5bf9\u4e8e\u5206\u6790\u6307\u4ee4\u6d41\u6765\u8bb2\u4e0d\u592a\u597d\u7528\uff0c\u4e5f\u4e0d\u5bb9\u6613\u770b\u5230 gdb\u8c03\u8bd5\u9ebb\u70e6\uff0c\u5185\u90e8\u91c7\u7528\u591a\u7ebf\u7a0b\u5b9e\u73b0\uff0c\u8c03\u8bd5\u8d77\u6765\u4e0d\u592a\u5bb9\u6613 \u673a\u5236\u6bd4\u8f83\u591a\uff0c\u5b66\u4e60\u6210\u672c\u76f8\u5bf9\u9ad8 \u603b\u7ed3\u4e00\u4e0b\uff0cQEMU\u9002\u7528\u4e8e\u4e3a\u7cfb\u7edf\u8f6f\u4ef6\u63d0\u4f9b\u8c03\u8bd5\u3001\u8fd0\u884c\u73af\u5883\uff0c\u4e3a\u6d4b\u8bd5\u4ea7\u751fgolden\u7684\u573a\u666f\u3002\u7279\u522b\u662f\u5728\u8fdb\u884cSOC\u5f00\u53d1\u65f6\uff0c\u9a8c\u8bc1\u6574\u5957\u8f6f\u4ef6\u8fd0\u884c\u73af\u5883\uff0c\u4eceuboot\u5230opensbi\uff0c\u5230linux kernel\uff0c\u4ee5\u53ca\u4e00\u4e9b\u5e38\u7528\u8f6f\u4ef6\u3002\u5b83\u4e30\u5bcc\u7684\u5916\u8bbe\uff0c\u9ad8\u6548\u7684\u8fd0\u884c\u901f\u5ea6\uff0c\u662f\u9009\u62e9\u5b83\u7684\u9996\u8981\u6307\u6807\u3002 \u5173\u4e8eQEMU\u7684\u8be6\u7ec6\u5206\u6790\uff0c\u53c2\u89c1 qemu\u7ae0\u8282 spike \u00b6 RISCV\u793e\u533a\u5b98\u65b9\u884c\u4e3a\u7ea7\u6a21\u62df\u5668\uff0c\u8fd9\u4e2a\u4e0d\u80fd\u7b97\u505a\u662f\u6a21\u62df\u5668\u6846\u67b6\uff0c\u6bd5\u7adf\u5b83\u53ea\u652f\u6301RISCV \u603b\u7ed3\u4f18\u70b9\u5982\u4e0b\uff1a \u4ee3\u7801\u7b80\u5355\uff0c\u4e0a\u624b\u8fc5\u901f \u8c03\u8bd5\u529f\u80fd\u5b8c\u5584\uff0c\u53ef\u4ee5\u76f4\u63a5\u5bf9\u76ee\u6807\u4ee3\u7801\u5355\u6b65\u6267\u884c\uff0c\u52a0\u65ad\u70b9\uff0c\u67e5\u770b\u5bc4\u5b58\u5668\u72b6\u6001\u65b9\u4fbf \u4ee3\u7801\u672c\u8eab\u8c03\u8bd5\u65b9\u4fbf\uff0c\u5f88\u5bb9\u6613\u8fdb\u884cgdb\u8ddf\u8e2a \u5f53\u7136\u5b83\u4e5f\u6709\u7f3a\u70b9 \u5916\u8bbe\u652f\u6301\u5f88\u5c11\uff0c\u57fa\u672c\u53ea\u5173\u6ce8\u4e8eCPU\u548c\u5185\u5b58\u7cfb\u7edf \u8fd0\u884c\u4e0d\u5feb\uff0c\u591a\u4e2aCPU\u8981\u4ea4\u66ff\u8fd0\u884c \u6269\u5c55\u6027\u4e0d\u5f3a \u603b\u7ed3\u8d77\u6765\uff0cspike\u9002\u5408\u8c03\u8bd5\u76ee\u6807\u4ee3\u7801\uff0c\u9002\u5408\u4f5c\u4e3a\u5c0f\u578b\u8f6f\u4ef6\u7684\u8fd0\u884c\u73af\u5883\uff0c\u6bd4\u5982\u6d4b\u8bd5case\uff0c\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e\u4ea7\u751fgolden\uff0c\u8c03\u8bd5\u6d4b\u8bd5case\u6765\u8bb2\u975e\u5e38\u65b9\u4fbf \u9057\u7559\u95ee\u9898\uff1a \u662f\u5426\u80fd\u8fd0\u884clinux\u5185\u6838 Bochs \u00b6 \u5f88\u6709\u540d\uff0c\u4f46\u4f3c\u4e4e\u53ea\u80fd\u6a21\u62dfx86, \u653e\u8fc7\u5b83\u5427 \u5e38\u89c1\u65f6\u949f\u7ea7\u6a21\u62df\u5668\u5206\u6790 \u00b6 gem5 \u00b6 \u5f88\u7ecf\u5178\uff0c\u5b66\u9662\u98ce\uff0c\u9002\u5408\u505a\u67b6\u6784\u63a2\u7d22 \u7f57\u5217\u4e00\u4e0b\u4f18\u70b9\uff1a \u6a21\u5757\u5316\uff0c\u6613\u4e8e\u6269\u5c55\uff0c\u57fa\u7840\u6a21\u5757\u6bd4\u8f83\u591a \u914d\u7f6e\u65b9\u4fbf\uff0c\u4f7f\u7528python\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u5b9a\u5236 debug\u4fe1\u606f\u4e30\u5bcc\uff0cgdb\u8c03\u8bd5\u65b9\u4fbf \u652f\u6301\u591a\u79cd\u67b6\u6784 \u5f00\u53d1\u5468\u671f\u77ed\uff0c\u80fd\u5feb\u901f\u9a8c\u8bc1\u60f3\u6cd5 \u81f3\u4e8e\u7f3a\u70b9\u561b\uff0c\u8fd8\u771f\u662f\u4e0d\u597d\u60f3\uff0c\u6162\u80af\u5b9a\u662f\u6162\u4e86\u3002\u5b66\u4e60\u6210\u672c\u662f\u6709\u7684\uff0c\u4e0d\u81f3\u4e8e\u592a\u8fc7\u5206\uff0c\u597d\u5728\u6709\u4e00\u4e9b\u5b98\u65b9\u6587\u6863\u53ef\u4ee5\u53c2\u8003\u3002\u4f5c\u4e3a\u67b6\u6784\u63a2\u7d22\u5f88\u5408\u9002\u3002\u542c\u8bf4\u8fd8\u6709\u4e00\u4e2a\u5206\u5e03\u5f0f\u7684\u5206\u652f\uff1f systemC \u00b6 \u4f3c\u4e4e\u662f\u5de5\u7a0b\u5316\u7684\u6b63\u7edf\uff0c\u4f5c\u4e3a\u82af\u7247\u516c\u53f8\uff0c\u4f3c\u4e4e\u5fc5\u987b\u8981\u6709\u4e00\u4e2asystemC\u7684\u6a21\u62df\u5668\uff01\uff1f \u5e02\u9762\u4e0a\u6709\u6ca1\u6709\u4e00\u4e9b\u57fa\u4e8esystemC\u7684\u5f00\u53d1\u6846\u67b6\uff1f FireSim \u00b6 [ https://fires.im/ ] \u5f00\u6e90\u7684\u65f6\u949f\u7cbe\u786e\u7684\u901a\u8fc7\u4e9a\u9a6c\u900a\u4e91FPGA\u52a0\u901f\u7684\u5168\u7cfb\u7edf\u786c\u4ef6\u6a21\u62df\u5e73\u53f0\uff0c\u53c8\u662f\u535a\u514b\u5229\u5927\u5b66(\u4e0d\u5f97\u4e0d\u4f69\u670d\u8fd9\u4e2a\u5927\u5b66\u7684\u79d1\u7814\u80fd\u529b\u5440\uff0c\u4ed6\u4eec\u600e\u4e48\u80fd\u8fd9\u4e48\u5389\u5bb3)\u7684\u4e00\u4e2a\u4ea7\u7269\u3002 \u6284\u4e00\u6bb5\u5b98\u7f51\u7684\u63cf\u8ff0\u5982\u4e0b\uff1a FireSim can simulate arbitrary hardware designs written in Chisel or designs that can be transformed into FIRRTL (including early work on supporting Verilog designs via Yosys\u2019s Verilog to FIRRTL flow). With FireSim, you can write your own RTL (processors, accelerators, etc.) and run it at near-FPGA-prototype speeds on cloud FPGAs, while obtaining cycle-accurate performance results (i.e. matching what you would find if you taped-out a chip) \u5b83\u53ef\u4ee5\u4eff\u771f(simulate)\u4efb\u610f\u7684\u786c\u4ef6\u8bbe\u8ba1\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u8bbe\u8ba1\u8981\u6c42\u662f\u7528Chisel\u5199\u7684\uff0c\u6216\u8005\u662fFIRRTL\uff08\u770b\u6765\u662f\u5b83\u81ea\u5df1\u7684\u4e00\u5957RTL\u8bed\u6cd5\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u901a\u8fc7Yosys\u7684 verlog\u8f6cFIRRTL\u5de5\u5177\u5c06RTL\u8f6c\u6362\u6210FIRRTL\uff09\u3002\u8fd9\u6837\u770b\u6765\u5b83\u5e76\u4e0d\u662f\u4e00\u4e2a\u6a21\u62df\u5668\u6846\u67b6\uff0c\u66f4\u50cf\u662f\u4e00\u4e2a\u4eff\u771f\u5de5\u5177\uff0c\u7528Chisel\u5199\u597d\u8bbe\u8ba1\uff0c\u7136\u540e\u901a\u8fc7\u8fd9\u4e2a\u5728\u4e9a\u9a6c\u900a\u4e91FPGA\u4e0a\u5feb\u901f\u8fd0\u884c\uff0c\u5f97\u5230\u6027\u80fd\u6570\u636e\uff0c\u8fd9\u662f\u4e0d\u662f\u7c7b\u4f3c\u4e0epalladium? \u5178\u578b\u5e94\u7528\u573a\u666f\u5305\u62ec\uff1a \u8bc4\u4f30\u81ea\u5df1\u5b9e\u73b0\u7684IC\u8bbe\u8ba1\u3002\u6bd4\u5982\u5199\u4e00\u4e2a\u52a0\u901f\u5668\uff0c\u5728\u4e0a\u9762\u5b9e\u9645\u7684\u8dd1\u4e00\u4e0b \u5feb\u901f\u7684\u5b9a\u5236\u6216\u8005\u8bc4\u4f30riscv\u6838\u3002firesim \u5b9e\u73b0\u4e86Rocket Chip and BOOM\uff0c\u53ef\u4ee5\u76f4\u63a5\u8dd1\u8fd9\u4fe9CPU \u4ee5FPGA\u7684\u901f\u5ea6\u8c03\u8bd5Chisel\u4ee3\u7801\uff0c\u8fd9\u5bf9\u4e8eChisel\u8c03\u8bd5\u6765\u8bb2\u5e94\u8be5\u662f\u6709\u7528\u7684 \u6a21\u62df\u5927\u578b\u6570\u636e\u4e2d\u5fc3\u7cfb\u7edf\uff0c\u56e0\u4e3a\u5b83\u4e91\u7aef\u8d44\u6e90\u4e30\u5bcc \u9ad8\u6027\u80fd\u5e26\u5916\u5206\u6790\uff0c\u6bd4\u5982\u60f3\u5728\u5b9e\u73b0\u7684SOC\u4e0a\u8dd1\u4e00\u4e2alinux\u7cfb\u7edf\uff0c\u7528\u8fd9\u4e2a\u80fd\u6bd4\u8f83\u5feb \u8fd9\u6837\u6765\u770b\uff0c\u4e0d\u8fd8\u662f\u4e91\u7aefPalladium\u5417\uff1f\u7c97\u7565\u770b\u4e86\u4e00\u4e0b\u4f7f\u7528\u65b9\u6cd5\uff0c\u7c7b\u4f3c\u4e8eFPGA IDE\uff0c\u5b83\u4f1a\u5c06Chisel\u4ee3\u7801\u7f16\u8bd1\u6210FPGA\u4ee3\u7801\uff0c\u7136\u540e\u5728\u4e91\u7aef\u6267\u884c\u3002\u56e0\u6b64\u4e0d\u80fd\u628a\u8fd9\u4e2a\u79f0\u4e3a\u6a21\u62df\u5668\u6846\u67b6\uff0c\u800c\u5e94\u8be5\u79f0\u4e3a\u4e9a\u9a6c\u900a\u4e91FPGA\u7f16\u8bd1\u5668\u3002\u5b83\u5b9e\u9645\u4e0a\u964d\u4f4e\u4e86FPGA\u7684\u4f7f\u7528\u6210\u672c\u3002 \u5f53\u8981\u628a\u65f6\u949f\u7ea7\u6a21\u62df\u5668\u505a\u7684\u5f88\u7ec6\u7684\u8bdd\uff0c\u5de5\u4f5c\u91cf\u4e0d\u4e9a\u4e8e\u5199Chisel\u4ee3\u7801\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u76f4\u63a5\u5199Chisel\uff0c\u7136\u540e\u7528FireSim\u6765\u52a0\u901f\u4eff\u771f\uff0c\u4f3c\u4e4e\u4e5f\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u8fd0\u884c\u8d77\u6765\u80af\u5b9a\u6bd4Gem5\u8981\u5feb\uff0c\u800c\u4e14\u9002\u5408\u5927\u89c4\u6a21\u3002\u8fd9\u5c31\u56de\u5f52\u5230\u4e86\u524d\u9762\u7684\u4e16\u754c\u89c2\u95ee\u9898\uff0c\u5f53FPGA\u6216\u8005Palladium\u6210\u672c\u53d8\u5f97\u975e\u5e38\u4f4e\u7684\u65f6\u5019\uff0c\u5f53\u9700\u8981\u6a21\u62df\u7684\u5f88\u7cbe\u7ec6\u7684\u65f6\u5019\uff0cGem5\u8fd9\u79cd\u7eaf\u8f6f\u4ef6\u7684\u6a21\u62df\u5668\u662f\u4e0d\u662f\u8fd8\u6709\u5b83\u7684\u4ef7\u503c\uff1f\u6211\u76ee\u524d\u4ecd\u8ba4\u4e3aGem5\u8fd9\u79cd\u7eaf\u8f6f\u4ef6\u7684\u6a21\u62df\u5668\u8fd8\u662f\u6709\u5b83\u7684\u4f18\u52bf \u7c7b\u4f3cgem5\u8fd9\u79cd\u6a21\u62df\u5668\uff0c\u6a21\u5757\u5316\u666e\u904d\u505a\u7684\u8f83\u597d\uff0c\u57fa\u4e8e\u67d0\u4e00\u4e2a\u7c7b\u4f3c\u7684\u5b9e\u73b0\u53bb\u6539\uff0c\u53ef\u80fd\u4f1a\u5927\u5927\u7f29\u77ed\u5f00\u53d1\u5468\u671f \u6bd5\u7adf\u662f\u8f6f\u4ef6\uff0c\u53ef\u6dfb\u52a0\u7684\u529f\u80fd\u548c\u624b\u6bb5\u90fd\u66f4\u591a\u66f4\u4e30\u5bcc \u5f53\u7136\uff0c\u6211\u73b0\u5728\u7684\u6c34\u5e73\u4e5f\u65e0\u6cd5\u770b\u5f97\u6e05\u695a\uff0c\u53ea\u662f\u4e00\u4e9b\u788e\u788e\u5ff5\u800c\u5df2 \u53e6\u5916\uff0c\u8fd9\u79cd\u5229\u7528FPGA\u52a0\u901f\u7684\u5c31\u662f\u4e0d\u77e5\u9053\u5b83\u8c03\u8bd5\u624b\u6bb5\u662f\u4e0d\u662f\u8db3\u591f\u4e30\u5bcc\uff0c\u662f\u4e0d\u662f\u4f1a\u5bfc\u81f4\u4ee3\u7801\u6cc4\u6f0f\u3002\u800c\u4e14Chisel\u662f\u4e0d\u662f\u771f\u7684\u6709\u524d\u9014\uff1f \u540e\u7eed\u6709\u673a\u4f1a\u53ef\u4ee5\u6309\u7167\u5b83\u7684\u6587\u6863\u81ea\u5df1\u642d\u5efa\u4e00\u4e0b\u73af\u5883\uff0c\u5c1d\u8bd5\u8fd0\u884c\u4e00\u4e0b\uff0c\u770b\u770b\u6548\u679c\u3002\u76ee\u524d\u4e0d\u5728\u8fd9\u91cc\u5c55\u5f00\u3002 socrocket \u00b6 Transaction-Level Modeling Framework for Space Applications \u76f4\u8bd1\u4e3a\u7528\u4e8e\u7a7a\u95f4\u63a2\u7d22\u7684\u4e8b\u7269\u7ea7\u5efa\u6a21\u6846\u67b6\uff0c\u90a3\u4e3a\u4ec0\u4e48\u8bf4\u7528\u4e8e\u7a7a\u95f4\u63a2\u7d22\uff0c\u4e00\u4e2a\u4ee5\u536b\u661f\u4e3a\u56fe\u6807\u7684\u6846\u67b6\uff0c\u4f3c\u4e4e\u662f\u4e0e\u822a\u5929\u6709\u4ec0\u4e48\u5173\u7cfb\u3002 \u6240\u8c13Transaction-Level\uff0c\u6211\u60f3\u662f\u56e0\u4e3a\u8fd9\u4e2a\u6846\u67b6\u7528\u7684TLM\u662f\u4e8b\u7269\u7ea7\u7684\u3002TLM\u53ef\u4ee5\u62bd\u8c61\u5c42\u6b21\u5f88\u9ad8\uff0c\u5e76\u4e14\u65e2\u53ef\u4ee5\u7528\u6765\u5199\u59cb\u7ec8\u7cbe\u786e\u7684\u4e5f\u53ef\u4ee5\u7528\u6765\u5199\u529f\u80fd\u578b\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\u4e24\u79cd\u6a21\u578b\u7684\u8981\u6c42\u90fd\u80fd\u6ee1\u8db3\uff0c\u53ef\u76d0\u53ef\u751c\uff0c\u771f\u4e0d\u6233\u3002 To archive these goals, we designed the SoCRocket Framework. Written in SystemC/TLM, it is fitted to serve the space industry'sspecial needs and builds the foundation of space-domain ESL design. \u8fd9\u4e2a\u771f\u662f\u6655\u4e86\uff0c\u600e\u4e48\u771f\u7684\u626f\u5230\u822a\u5929\u5de5\u4e1a\u53bb\u4e86\uff0c\u5230\u5e95\u5565\u610f\u601d\uff0c\u600e\u4e48\u5c31\u9002\u5408\u822a\u5929\u5de5\u4e1a\u7279\u6b8a\u9700\u6c42\u4e86\uff0c\u600e\u4e48\u5c31\u4e3a\u7a7a\u95f4\u57dfESL\u8bbe\u8ba1\u5960\u5b9a\u57fa\u7840\u4e86\u3002SOC\u706b\u7bad\u5230\u5e95\u662f\u4e2a\u5565\uff1f\u6211\u89c9\u5f97\u8fd9\u90e8\u5206\u63cf\u8ff0\u5e94\u8be5\u662f\u6709\u4e00\u4e9b\u7406\u89e3\u4e0a\u7684\u6b67\u4e49\uff0c\u6216\u8bb8\u662f\u6211\u8fd8\u4e0d\u4e86\u89e3IC\u5f00\u53d1\u7684\u4e00\u4e9b\u4e1c\u897f\u3002 TLM\u89e3\u6790 ESL\u662fIC\u8bbe\u8ba1\u7684\u672a\u6765\uff1f RISC-V-TLM \u00b6 \u8fd9\u662f\u4e00\u4e2a\u7528TLM\u5199\u7684riscv\u7684\u6a21\u62df\u5668\u3002\u76ee\u524d\u4ec5\u652f\u6301rv32imac\u3002\u663e\u7136\uff0c\u8fd9\u662f\u5b66\u4e60TLM\u548cSystemC\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u53c2\u8003\uff0c\u5bf9\u57fa\u4e8eTLM\u642d\u5efa\u81ea\u5df1\u7684\u6a21\u62df\u5668\u4e5f\u5177\u6709\u6307\u5bfc\u610f\u4e49\uff0c\u6216\u8bb8\u6211\u5e94\u8be5\u5c1d\u8bd5\u53bb\u8ddf\u4ed6\u4e00\u8d77\u6269\u5c55\u8fd9\u4e2a\u5b9e\u73b0 [ https://github.com/mariusmm/RISC-V-TLM ] Simics \u00b6 \u98ce\u6cb3\u7684\u4ea7\u54c1\uff0c\u8981\u82b1\u94b1\u7684\u8fd8\u662f\u7b97\u4e86\u5427 \u5b8c\u5168\u81ea\u5df1\u5b9e\u73b0\u6a21\u62df\u5668 \u00b6 \u8fd9\u91cc\u6682\u65f6\u4e0d\u5c55\u5f00\uff0c\u77e5\u4e4e\u6587\u7ae0[ https://zhuanlan.zhihu.com/p/53476489]\u4e2d\u63d0\u5230\u7684\u4e00\u4e9b\u70b9\u548c\u6211\u7684\u89c2\u70b9\u4e00\u81f4 \u3002 \u6bd4\u5982\u79bb\u6563\u4e8b\u4ef6\u6a21\u578b\uff0c\u6bd4\u5982\u6a21\u5757\u5316\uff0c\u4f46\u81ea\u5df1\u9020\u8f6e\u5b50\u7684\u610f\u4e49\u662f\u4ec0\u4e48\u5462\uff1f \u603b\u7ed3 \u00b6 Qemu, Gem5, SystemC/TLM\u662f\u503c\u5f97\u91cd\u70b9\u5173\u6ce8\u7684 \u5bf9\u4e8e\u65f6\u949f\u7cbe\u786e\u7684\u6a21\u62df\u5668\u5f00\u53d1\uff0c\u5b83\u7684\u95ee\u9898\u5728\u4e8e\u5c3d\u7ba1\u65f6\u949f\u53ef\u4ee5\u5f88\u7cbe\u786e\uff0c\u4f46\u4ecd\u7136\u662f\u6a21\u62df\u5668\u3002\u6bd4\u5982\u7528gem5\u6765\u5f00\u53d1\uff0c\u90a3\u5b83\u6ce8\u5b9a\u65e0\u6cd5\u8f6c\u6362\u6210RTL\u5b9e\u73b0\uff0c\u4ed6\u9700\u8981\u5f00\u53d1\u4eba\u5458\u4e3b\u52a8\u4fdd\u8bc1\u548cRTL\u5b9e\u73b0\u7684\u540c\u6b65\uff0c\u8fd9\u5728\u73b0\u5b9e\u4e2d\u5f80\u5f80\u5f88\u96be\u505a\u5230\uff0c\u5e76\u4e14\u53ef\u80fd\u7528\u5b83\u7684\u4eba\u4e5f\u6ca1\u6307\u671b\u80fd\u591f\u505a\u5230\u3002\u4f46\u65e0\u8bba\u5982\u4f55\uff0c\u6211\u4eec\u603b\u662f\u89c9\u5f97\u6a21\u62df\u5668\u7684\u5f00\u53d1\u548cRTL\u5f00\u53d1\u8fd9\u4e24\u8005\u4e4b\u95f4\u5b58\u5728\u5f88\u591a\u91cd\u590d\u6027\u5de5\u4f5c\u3002\u5047\u5982\u80fd\u6709\u4e00\u4e2a\u5168\u9762\u7684\u5de5\u5177\uff0c\u5b83\u65e2\u80fd\u6ee1\u8db3\u67b6\u6784\u63a2\u7d22\u7684\u9700\u6c42\uff0c\u53c8\u80fd\u8f6c\u5316\u4e3a\u53ef\u7528\u7684RTL\u5b9e\u73b0\uff0c\u5c82\u4e0d\u7f8e\u54c9\u3002\u4f46\u4e00\u65e6\u6d89\u53ca\u5230\u8f6c\u6362\uff0c\u90a3\u5c31\u5fc5\u7136\u4f1a\u5f15\u5165\u4e00\u4e2a\u7c7b\u4f3c\u7f16\u8bd1\u5668\u7684\u4e1c\u897f\uff0c\u7ecf\u8fc7\u7f16\u8bd1\u5668\u7f16\u8bd1\u51fa\u6765\u7684\u4e1c\u897f\u662f\u5f88\u96be\u7ef4\u62a4\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u751f\u6210\u7684RTL\u662f\u5f88\u96be\u4eba\u5de5\u52a0\u5165\u5230\u73b0\u6709RTL\u4e2d\u7684\uff0c\u90a3\u53ea\u80fd\u662f\u5b8c\u5168\u4f7f\u7528\u5168\u65b0\u7684\u66f4\u9ad8\u62bd\u8c61\u5c42\u6b21\u7684\u8bed\u8a00\u6765\u5f00\u53d1\uff0c\u8fd9\u6837\u65e2\u89e3\u51b3\u4e86\u67b6\u6784\u63a2\u7d22\u548c\u9a8c\u8bc1\u7684\u95ee\u9898\uff0c\u4e5f\u4e0d\u7528\u518d\u624b\u5199RTL\u3002\u8fd9\u4f3c\u4e4e\u662f\u672a\u6765\uff0c\u4f46\u76ee\u524d\u4e0a\u4e0d\u6210\u719f\uff0c\u7b49\u5230\u90a3\u4e2a\u65f6\u5019\uff0c\u5728\u4ea7\u54c1\u5c42\u9762\u53ef\u80fd\u5c31\u4e0d\u518d\u9700\u8981gem5\u8fd9\u79cd\u6846\u67b6\u8fdb\u884c\u67b6\u6784\u63a2\u7d22\u4e86\uff0c\u6240\u4ee5\u957f\u8fdc\u6765\u770b\uff0c\u6a21\u62df\u5668\u5f00\u53d1\u4eba\u5458\u638c\u63e1\u8db3\u591f\u7684RTL\u5f00\u53d1\u80fd\u529b\u662f\u5fc5\u987b\u7684\uff0c\u5f53\u7136\u8fd8\u5e94\u8be5\u79ef\u6781\u62e5\u62b1Chisel, TLM\u7b49\u66f4\u9ad8\u5c42\u6b21\u7684\u62bd\u8c61\u3002\u4f46\u5c31\u76ee\u524d\u6765\u770b\uff0c\u66f4\u9ad8\u62bd\u8c61\u5c42\u7684\u8bed\u8a00\u8fd8\u6709\u5f88\u957f\u7684\u8def\u8981\u8d70\uff0c\u624b\u5199RTL\u8fd8\u662f\u76ee\u524d\u6700\u4f73\u65b9\u6848\u3002\u6a21\u62df\u5668\u5f00\u53d1\u65b9\u6848\u7684\u9009\u62e9\u4ecd\u7136\u9700\u8981\u5148\u805a\u7126\u5230\u57fa\u672c\u9700\u6c42\u4e0a\u3002 \u66f4\u65b0 2023/10/23 \u00b6 Q1:\u8dd1benchmark gem5\u5230\u5e95\u5e94\u8be5\u4f7f\u7528fs\u6a21\u5f0f\u8fd8\u662fse\u6a21\u5f0f \u00b6 \u5c3d\u53ef\u80fd\u7684\u4f7f\u7528fs\u6a21\u5f0f\u3002 \u4f7f\u7528fs\u6a21\u5f0f\u7684\u4f18\u70b9\uff1a \u4e0d\u9700\u8981\u62c5\u5fc3se\u6a21\u5f0f\u4e0b\u7684\u7cfb\u7edf\u8c03\u7528\u652f\u6301\u4e0d\u5b8c\u5584\u7684\u95ee\u9898 fs\u6a21\u5f0f\u4e0b\u7684checkpoint\u66f4\u52a0\u7b80\u5355 fs\u6a21\u5f0f\u53ea\u6709kernel\u542f\u52a8\u7684\u65f6\u5019\u9700\u8981\u989d\u5916\u7684\u82b1\u8d39\u8f83\u957f\u65f6\u95f4\uff0c\u771f\u6b63\u8fd0\u884c\u7684\u65f6\u5019\u989d\u5916\u7684\u65f6\u95f4\u5f00\u9500\u6bd4\u8f83\u5c11\uff0c\u4e0d\u5bf9\u603b\u4f53\u6a21\u62df\u65f6\u95f4\u9020\u6210\u592a\u591a\u5f71\u54cd\u3002 Q2:\u6a21\u62df\u5668\u5bf9\u9f50\u53ef\u4ee5\u6709\u54ea\u51e0\u79cd\u5f62\u5f0f \u00b6 gem5\u5f88\u96be\u5b9e\u73b0\u5728\u5fae\u7ed3\u6784\u8f93\u5165\u8f93\u51fa\u5c42\u9762\u7684\u5bf9\u9f50\uff0c\u800c\u4e14\u8fd9\u79cd\u5bf9\u9f50\u771f\u7684\u6709\u610f\u4e49\u5417\uff1f\u53ef\u4ee5\u4ece\u539f\u7406\u548c\u65f6\u5e8f\u4e0a\u505a\u5fae\u7ed3\u6784\u7684\u5bf9\u9f50\uff0c\u4f46\u4e0d\u5fc5\u4fdd\u8bc1\u5728\u8f93\u5165\u8f93\u51fa\u5c42\u9762\u7684\u5b8c\u5168\u4e00\u81f4\u3002 \u53ef\u4ee5\u505a\u5ef6\u65f6\u548cthroughput\u5c42\u9762\u7684\u5bf9\u9f50 \u53ef\u4ee5\u5229\u7528benchmark\u5207\u7247\u5728IPC,cache miss, branch miss\u7b49\u5c42\u9762\u8fdb\u884c\u5bf9\u9f50","title":"\u6a21\u62df\u5668\u4e4b\u6211\u89c1"},{"location":"ic/simulator.html#_1","text":"\u4ece\u4e8b\u82af\u7247\u6a21\u62df\u5668\u5f00\u53d1\u7684\u5de5\u4f5c\u4e5f\u6709\u4e00\u6bb5\u65f6\u95f4\u4e86\uff0c\u968f\u7740\u5de5\u4f5c\u7684\u6df1\u5165\uff0c\u6709\u4e00\u4e2a\u95ee\u9898\u4e00\u76f4\u5728\u6211\u8111\u6d77\u4e2d\u4e0d\u65f6\u7684\u6d6e\u73b0\uff1a \u5f53\u6211\u4eec\u9700\u8981\u4f7f\u7528\u6a21\u62df\u5668\u7684\u65f6\u5019\uff0c\u6211\u4eec\u600e\u4e48\u6765\u786e\u5b9a\u5b9e\u73b0\u65b9\u6848 \u3002 \u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u62c6\u5206\u4e3a\u4e24\u6b65\uff1a \u786e\u5b9a\u9700\u6c42 \u6839\u636e\u9700\u8981\u786e\u5b9a\u5b9e\u73b0\u65b9\u6848 \u8981\u5b8c\u6210\u8fd9\u4e24\u6b65\uff0c\u6700\u5173\u952e\u7684\u662f\u9700\u8981\u5bf9\u76ee\u524d\u5728\u6a21\u62df\u5668\u9886\u57df\u5927\u5bb6\u666e\u904d\u91c7\u7528\u7684\u65b9\u6848\u505a\u4e00\u4e2a\u603b\u7ed3\uff0c\u8fd9\u4e5f\u662f\u8fd9\u7bc7\u6587\u7ae0\u7684\u4e3b\u9898\u4e4b\u4e00\u3002\u5728\u8fd9\u4e4b\u524d\uff0c\u6211\u89c9\u5f97\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u5f88\u5173\u952e\uff0c\u4e5f\u975e\u5e38\u9700\u8981\u8bf4\u660e\u767d\u3002\u5982\u679c\u8bf4\u5982\u4f55\u9009\u62e9\u6a21\u62df\u5668\u662f\u65b9\u6cd5\u8bba\uff0c\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u5c31\u662f\u4e16\u754c\u89c2\uff1a \u6211\u4eec\u4e3a\u4ec0\u4e48\u9700\u8981\u6a21\u62df\u5668","title":"\u6a21\u62df\u5668\u4e4b\u6211\u89c1"},{"location":"ic/simulator.html#_2","text":"\u5728\u82af\u7247\u5f00\u53d1\u524d\u671f\uff0cRTL\u521a\u5f00\u59cb\u5f00\u53d1\uff0c\u6ca1\u6709FPGA\u73af\u5883\uff0c\u66f4\u6ca1\u6709\u9a8c\u8bc1\u677f\uff0c \u8fd9\u65f6\u5019\u8f6f\u4ef6\u4e5f\u9700\u8981\u5f00\u53d1\u548c\u9a8c\u8bc1\uff0c\u9700\u8981\u6709\u4e00\u4e2a\u548c\u82af\u7247\u884c\u4e3a\u4e00\u81f4\u7684\u73af\u5883\u6765\u505a\u8f6f\u4ef6\u5f00\u53d1\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u884c\u4e3a\u7ea7\u6a21\u62df\u5668\uff0csimulator \u5728\u67b6\u6784\u8bbe\u8ba1\u8fc7\u7a0b\u4e2d\uff0c\u5e0c\u671b\u80fd\u591f\u5feb\u901f\u7684\u9a8c\u8bc1\u5fae\u67b6\u6784\u7684\u8bbe\u8ba1,\u65f6\u949f\u7ea7\u6a21\u62df\u5668\uff0cemulator \u5e0c\u671b\u6709\u4e00\u4e2a\u80fd\u591f\u4ea7\u751fgolden\u7684\u73af\u5883\uff0c\u9700\u8981\u9a8c\u8bc1\u6846\u67b6\uff0c\u6a21\u62df\u5668\uff0cRTL\u8fdb\u884c\u4e00\u4e2a\u4e09\u65b9\u9a8c\u8bc1 \u5728\u8f6f\u4ef6\u4f18\u5316\u65b9\u9762\uff0c\u5982\u679c\u80fd\u6709\u4e00\u4e2a\u65f6\u949f\u7ea7\u6a21\u62df\u5668\uff0c\u80fd\u591f\u63d0\u4f9b\u4e00\u4e9b\u5173\u952e\u4fe1\u606f\uff0c\u90a3\u4e48\u4f1a\u5bf9\u8f6f\u4ef6\u548c\u5de5\u5177\u94fe\u4f18\u5316\u6709\u5f88\u5927\u5e2e\u52a9\u3002\u6bd5\u7adfFPGA\u548c\u5e15\u62c9\u4e01\u73af\u5883\u90fd\u662f\u6709\u9650\u7684 \u4e00\u4e9bIP\u5382\u5546\u5f80\u5f80\u4f1a\u63d0\u4f9b\u914d\u5957\u7684IP\u6a21\u62df\u5668\uff0c\u6bd4\u5982systemC\u7684\u4e00\u4e2aIP\u6a21\u62df \u603b\u7ed3\u8d77\u6765\uff0c\u6a21\u62df\u5668\u5177\u6709\u5982\u4e0b\u4f18\u52bf \u5f00\u53d1\u901f\u5ea6\u8f83\u5feb\uff0c\u5f00\u53d1\u5468\u671f\u77ed\uff0c\u65b9\u4fbf\u8fdb\u884c\u4fee\u6539\uff0c\u8fed\u4ee3 \u53d1\u5e03\uff0c\u90e8\u7f72\u7b80\u5355\uff0cPC\u5c31\u80fd\u8fd0\u884c\uff0c\u8fd0\u884c\u73af\u5883\u6210\u672c\u4f4e\uff0c\u4e0d\u5bb9\u6613\u53d7\u786c\u4ef6\u8d44\u6e90\u7684\u9650\u5236 \u80fd\u591f\u6dfb\u52a0\u7684\u8f85\u52a9\u624b\u6bb5\u591a\uff0c\u80fd\u591f\u63d0\u4f9b\u4e30\u5bcc\u7684\u8c03\u8bd5\u4fe1\u606f \u90a3\u6a21\u62df\u5668\u7684\u7f3a\u70b9\u5462\uff1f\u6211\u89c9\u5f97\u4e3b\u8981\u662f\u4e0b\u9762\u51e0\u4e2a\u65b9\u9762\uff1a \u8fd0\u884c\u901f\u5ea6\u6162\uff0c\u7279\u522b\u662f\u7ec6\u529b\u5ea6\u7684\u65f6\u949f\u7ea7\u6a21\u62df\u5668\uff0c\u884c\u4e3a\u7ea7\u666e\u904d\u8fd8\u80fd\u63a5\u53d7 \u5f00\u53d1\u6210\u672c\u4e0d\u4f4e\uff0c\u65f6\u949f\u7ea7\u6a21\u62df\u5668\u5982\u679c\u8981\u6a21\u62df\u7cbe\u7ec6\uff0c\u5de5\u4f5c\u91cf\u4e5f\u4e0d\u4e9a\u4e8e\u5199RTL \u603b\u4f53\u6765\u770b\uff0c\u6a21\u62df\u5668\u7684\u4f18\u70b9\u975e\u5e38\u660e\u663e\uff0c\u5b83\u89e3\u51b3\u7684\u90fd\u662f\u82af\u7247\u8bbe\u8ba1\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u7684\u75db\u70b9\uff0c\u80fd\u591f\u5e2e\u52a9\u5c3d\u65e9\u7684\u53d1\u73b0\u95ee\u9898\uff0c\u786e\u8ba4\u95ee\u9898\uff0c\u81f3\u4e8e\u8fd0\u884c\u901f\u5ea6\u6162\uff0c\u53ef\u4ee5\u6709\u5f88\u591a\u89e3\u51b3\u529e\u6cd5\u548c\u4f18\u5316\u624b\u6bb5\uff0c\u6bd4\u5982\u53ea\u5bf9\u5173\u6ce8\u6a21\u5757\u505a\u7ec6\u529b\u5ea6\uff0c\u6bd4\u5982\u91c7\u7528\u591a\u7ebf\u7a0b\u548c\u5206\u5e03\u5f0f\uff0c\u81f3\u4e8e\u5de5\u4f5c\u91cf\u7684\u95ee\u9898\uff0c\u6211\u60f3\u8fd8\u662f\u6210\u672c\u66f4\u91cd\u8981\u3002 \u672a\u6765\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff0c\u6a21\u62df\u5668\u5728\u82af\u7247\u5f00\u53d1\u9886\u57df\u4ecd\u7136\u662f\u4e0d\u53ef\u6216\u7f3a\u7684\uff0c\u800c\u4e14\u968f\u7740\u56fd\u5185\u82af\u7247\u7684\u53d1\u529b\uff0c\u8fd9\u65b9\u9762\u7684\u9700\u6c42\u9010\u6e10\u65fa\u76db\uff0c\u81f3\u5c11\u672a\u6765\u4e09\u5e74\u662f\u4e00\u4e2a\u4f9b\u5c0f\u4e8e\u6c42\u7684\u5c40\u9762","title":"\u6211\u4eec\u4e3a\u4ec0\u4e48\u9700\u8981\u6a21\u62df\u5668"},{"location":"ic/simulator.html#_3","text":"\u5f88\u591a\u6587\u7ae0\u6216\u8005\u8bba\u6587\u4e2d\u53ef\u80fd\u4f1a\u5bf9\u6a21\u62df\u5668\u79cd\u7c7b\u5206\u7684\u5f88\u7ec6\uff0c\u6709\u5174\u8da3\u7684\u4e5f\u53ef\u4ee5\u81ea\u884c\u641c\u7d22\u3002\u6211\u8ba4\u4e3a\u5b8f\u89c2\u4e0a\u6a21\u62df\u5668\u5c31\u5206\u4e24\u7c7b\uff0c\u884c\u4e3a\u7ea7\u548c\u65f6\u949f\u7ea7\u3002 \u6709\u4e9b\u6587\u7ae0\u4e2d\u5c06\u65f6\u949f\u7ea7\u6a21\u62df\u79f0\u4e3aemulation\u884c\u4e3a\u7ea7\u6a21\u62df\u79f0\u4e3asimulation\u3002\u8fd9\u4e24\u4e2a\u660e\u663e\u7684\u533a\u522b\u5728\u4e8e\u6d89\u4e0d\u6d89\u53ca\u5fae\u67b6\u6784\u7684\u62bd\u8c61\u3002\u884c\u4e3a\u7ea7\u662f\u529f\u80fd\u6a21\u578b\uff0c\u4e0d\u9700\u8981\u5bf9\u5fae\u67b6\u6784\u8fdb\u884c\u62bd\u8c61\uff0c\u4e0d\u9700\u8981\u6709\u7cbe\u786e\u7684\u65f6\u949f; \u65f6\u949f\u7ea7\u4e00\u5b9a\u4f1a\u6709\u7cbe\u786e\u7684\u65f6\u949f\uff0c\u4e5f\u4e00\u5b9a\u4f1a\u6d89\u53ca\u5fae\u67b6\u6784\u3002 \u662f\u4e0d\u662f\u6b64\u65f6\u7279\u522b\u60f3\u8981\u4e00\u4e2a\u8868\u683c\uff0c\u91cc\u9762\u6c47\u603b\u4e86\u76ee\u524d\u5e02\u9762\u4e0a\u7684\u5404\u79cd\u5404\u6837\u7684\u6a21\u62df\u5668\uff1f\u522b\u8bf4\uff0c\u8fd8\u771f\u8ba9\u6211\u627e\u5230\u4e86\u4e00\u4e2a [ http://pages.cs.wisc.edu/~arch/www/tools.html ]","title":"\u6a21\u62df\u5668\u7684\u5206\u7c7b"},{"location":"ic/simulator.html#_4","text":"\u4e00\u822c\u6765\u8bb2\uff0c\u884c\u4e3a\u7ea7\u6a21\u62df\u5668\u5b9e\u73b0\u8d77\u6765\u8981\u7b80\u5355\u7684\u591a\uff0c\u4ee3\u7801\u91cf\u4e0d\u4f1a\u592a\u5927\u3002\u5f53\u7136\uff0c\u5f88\u591a\u884c\u4e3a\u7ea7\u6a21\u62df\u5668\u80a9\u8d1f\u4e86\u865a\u62df\u5316\u7684\u4f7f\u547d\uff0c\u4e5f\u4f1a\u6bd4\u8f83\u5e9e\u5927\u3002 \u6709\u4e9b\u4e3a\u4e86\u6267\u884c\u8d77\u6765\u66f4\u5feb\uff0c\u4e5f\u5f15\u5165\u4e86\u4e00\u4e9b\u6bd4\u8f83\u590d\u6742\u7684\u5b9e\u73b0\u3002\u4f46\u603b\u4f53\u6765\u8bb2\uff0c\u884c\u4e3a\u7ea7\u6a21\u62df\u5668\u8981\u76f8\u5bf9\u7b80\u5355\uff0c\u5f00\u53d1\u5468\u671f\u77ed\uff0c\u5bb9\u6613\u7a33\u5b9a\u3002 \u884c\u4e3a\u7ea7\u6a21\u62df\u5668\u9002\u5408\u7528\u6765\u505a\u8f6f\u4ef6\u8fd0\u884c\u5e73\u53f0\uff0c\u4e3a\u8f6f\u4ef6\u5f00\u53d1\u63d0\u4f9b\u8c03\u8bd5\u73af\u5883\u3002\u4e5f\u5f88\u9002\u5408\u505a\u4e09\u65b9\u9a8c\u8bc1\uff0c\u51fa\u4e00\u4e9b\u6d4b\u8bd5golden\u3002","title":"\u884c\u4e3a\u7ea7\u6a21\u62df\u5668"},{"location":"ic/simulator.html#_5","text":"\u65f6\u949f\u7ea7\u6a21\u62df\u5668\u7684\u4ee3\u7801\u903b\u8f91\u8981\u66f4\u590d\u6742\uff0c\u5b83\u7684\u91cd\u70b9\u5728\u4e8e\u5fae\u67b6\u6784\u7684\u6a21\u62df\uff0c\u8981\u7ed9\u51fa\u5fae\u67b6\u6784\u5728\u6bcf\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u7684\u884c\u4e3a\u3002\u8981\u770b\u660e\u767d\u4e00\u4e2a\u6a21\u5757\uff0c\u5f80\u5f80\u9700\u8981\u770b\u591a\u4e2a\u6a21\u5757\uff0c\u6bd4\u5982\u5206\u6790\u6d41\u6c34\u7ebf\uff0c\u5c31\u4e0d\u80fd\u53ea\u5206\u6790\u6267\u884c\u9636\u6bb5\uff0c\u8981\u5206\u6790\u5bc4\u5b58\u5668\u91cd\u547d\u540d\uff0c\u8fd8\u9700\u8981\u7ed3\u5408\u6d41\u6c34\u7ebf\uff0cROB\u7b49\u6a21\u5757\u3002\u603b\u4e4b\uff0c\u5b83\u9700\u8981\u540c\u76d8\u5206\u6790\uff0c\u9700\u8981\u66f4\u591a\u7684\u903b\u8f91\u6027\u3002 \u65f6\u949f\u7ea7\u6a21\u62df\u662f\u6709\u7c92\u5ea6\u7684\u3002\u7c92\u5ea6\u8d8a\u7ec6\uff0c\u8fd0\u884c\u901f\u5ea6\u8d8a\u6162\uff0c\u54ea\u91cc\u7c97\u54ea\u91cc\u7ec6\uff0c\u8981\u770b\u9700\u6c42\uff0c\u4e00\u5473\u7684\u7ec6\u4f1a\u5e26\u6765\u5de8\u5927\u7684\u5de5\u4f5c\u91cf \u65f6\u949f\u7ea7\u6a21\u62df\u662f\u53ef\u4ee5\u5077\u61d2\u7684\u3002\u6bd5\u7adf\u662f\u6a21\u62df\u5668\uff0c\u5728\u6ee1\u8db3\u9700\u6c42\u7684\u60c5\u51b5\u4e0b\uff0c\u5b8c\u5168\u53ef\u4ee5\u4ece\u8f6f\u4ef6\u5b9e\u73b0\u65b9\u4fbf\u3001\u9ad8\u6548\u7684\u89d2\u5ea6\u6765\u8fdb\u884c\u5b9e\u73b0\u3002\u6bd4\u5982\u4e00\u4e2a\u8ba1\u7b97\u6307\u4ee4\u7684\u5b9e\u73b0\uff0c\u5047\u5982\u65e0\u6cd5\u5728\u4e00\u4e2a\u5468\u671f\u4e2d\u6267\u884c\u5b8c\uff0c\u90a3\u4e48RTL\u5c31\u9700\u8981\u5206\u591a\u6b21\u8fdb\u884c\u8ba1\u7b97\uff0c\u4f46\u6a21\u62df\u5668\u5b8c\u5168\u53ef\u4ee5\u4e00\u6b21\u8ba1\u7b97\u5b8c\u6210\uff0c\u53ea\u9700\u8981\u591a\u6b21store\u5373\u53ef\u3002\u8fd9\u6837\uff0c\u8f6f\u4ef6\u8ba1\u7b97\u8d77\u6765\u5c31\u65b9\u4fbf\uff0c\u800c\u4e14\u5bb9\u6613\u8fdb\u884c\u52a0\u901f\u3002","title":"\u65f6\u949f\u7ea7\u6a21\u62df\u5668"},{"location":"ic/simulator.html#_6","text":"","title":"\u5e38\u89c1\u884c\u4e3a\u7ea7\u6a21\u62df\u5668\u5206\u6790"},{"location":"ic/simulator.html#qemu","text":"QEMU\u5f88\u7ecf\u5178\uff0c\u5e94\u7528\u5e7f\u6cdb\uff0c\u597d\u591a\u8f6f\u4ef6\u90fd\u5728\u4f7f\u7528QEMU\u3002\u5b83\u4e0d\u5355\u5355\u662f\u4e00\u6b3e\u884c\u4e3a\u7ea7\u6a21\u62df\u5668\uff0c\u66f4\u662f\u4e00\u6b3e\u865a\u62df\u673a\u3002 \u4f5c\u4e3a\u6a21\u62df\u5668\u6846\u67b6\u6765\u770b\uff0c\u4f18\u70b9\u53ef\u4ee5\u603b\u7ed3\u5982\u4e0b\uff1a \u91c7\u7528\u52a8\u6001\u8f6c\u6362\u673a\u5236\uff0c\u4ee5Translate Block\u4e3a\u5355\u4f4d\uff0c\u8fd0\u884c\u901f\u5ea6\u5feb\uff0c\u6548\u7387\u9ad8\u3002\u8dd1\u4e2alinux\u5185\u6838\u5b8c\u5168\u6ca1\u6709\u95ee\u9898\uff0c\u540c\u65f6\u8fd8\u53ef\u4ee5KVM\u52a0\u901f \u652f\u6301\u7684\u6307\u4ee4\u96c6\u67b6\u6784\u4e30\u5bcc\uff0c\u5e38\u89c1\u7684\u90fd\u652f\u6301\uff0c\u5305\u62ec\u73b0\u5728\u706b\u70ed\u7684RISCV \u652f\u6301\u4e30\u5bcc\u7684\u5916\u8bbe\u6a21\u62df\uff0c\u7ec4\u5efaSOC\u5b8c\u5168\u591f\u7528 \u7f3a\u70b9\u603b\u7ed3\u5982\u4e0b\uff1a \u65e0\u6cd5\u5355\u6761\u6307\u4ee4debug\uff0c\u5bf9\u4e8e\u5206\u6790\u6307\u4ee4\u6d41\u6765\u8bb2\u4e0d\u592a\u597d\u7528\uff0c\u4e5f\u4e0d\u5bb9\u6613\u770b\u5230 gdb\u8c03\u8bd5\u9ebb\u70e6\uff0c\u5185\u90e8\u91c7\u7528\u591a\u7ebf\u7a0b\u5b9e\u73b0\uff0c\u8c03\u8bd5\u8d77\u6765\u4e0d\u592a\u5bb9\u6613 \u673a\u5236\u6bd4\u8f83\u591a\uff0c\u5b66\u4e60\u6210\u672c\u76f8\u5bf9\u9ad8 \u603b\u7ed3\u4e00\u4e0b\uff0cQEMU\u9002\u7528\u4e8e\u4e3a\u7cfb\u7edf\u8f6f\u4ef6\u63d0\u4f9b\u8c03\u8bd5\u3001\u8fd0\u884c\u73af\u5883\uff0c\u4e3a\u6d4b\u8bd5\u4ea7\u751fgolden\u7684\u573a\u666f\u3002\u7279\u522b\u662f\u5728\u8fdb\u884cSOC\u5f00\u53d1\u65f6\uff0c\u9a8c\u8bc1\u6574\u5957\u8f6f\u4ef6\u8fd0\u884c\u73af\u5883\uff0c\u4eceuboot\u5230opensbi\uff0c\u5230linux kernel\uff0c\u4ee5\u53ca\u4e00\u4e9b\u5e38\u7528\u8f6f\u4ef6\u3002\u5b83\u4e30\u5bcc\u7684\u5916\u8bbe\uff0c\u9ad8\u6548\u7684\u8fd0\u884c\u901f\u5ea6\uff0c\u662f\u9009\u62e9\u5b83\u7684\u9996\u8981\u6307\u6807\u3002 \u5173\u4e8eQEMU\u7684\u8be6\u7ec6\u5206\u6790\uff0c\u53c2\u89c1 qemu\u7ae0\u8282","title":"QEMU"},{"location":"ic/simulator.html#spike","text":"RISCV\u793e\u533a\u5b98\u65b9\u884c\u4e3a\u7ea7\u6a21\u62df\u5668\uff0c\u8fd9\u4e2a\u4e0d\u80fd\u7b97\u505a\u662f\u6a21\u62df\u5668\u6846\u67b6\uff0c\u6bd5\u7adf\u5b83\u53ea\u652f\u6301RISCV \u603b\u7ed3\u4f18\u70b9\u5982\u4e0b\uff1a \u4ee3\u7801\u7b80\u5355\uff0c\u4e0a\u624b\u8fc5\u901f \u8c03\u8bd5\u529f\u80fd\u5b8c\u5584\uff0c\u53ef\u4ee5\u76f4\u63a5\u5bf9\u76ee\u6807\u4ee3\u7801\u5355\u6b65\u6267\u884c\uff0c\u52a0\u65ad\u70b9\uff0c\u67e5\u770b\u5bc4\u5b58\u5668\u72b6\u6001\u65b9\u4fbf \u4ee3\u7801\u672c\u8eab\u8c03\u8bd5\u65b9\u4fbf\uff0c\u5f88\u5bb9\u6613\u8fdb\u884cgdb\u8ddf\u8e2a \u5f53\u7136\u5b83\u4e5f\u6709\u7f3a\u70b9 \u5916\u8bbe\u652f\u6301\u5f88\u5c11\uff0c\u57fa\u672c\u53ea\u5173\u6ce8\u4e8eCPU\u548c\u5185\u5b58\u7cfb\u7edf \u8fd0\u884c\u4e0d\u5feb\uff0c\u591a\u4e2aCPU\u8981\u4ea4\u66ff\u8fd0\u884c \u6269\u5c55\u6027\u4e0d\u5f3a \u603b\u7ed3\u8d77\u6765\uff0cspike\u9002\u5408\u8c03\u8bd5\u76ee\u6807\u4ee3\u7801\uff0c\u9002\u5408\u4f5c\u4e3a\u5c0f\u578b\u8f6f\u4ef6\u7684\u8fd0\u884c\u73af\u5883\uff0c\u6bd4\u5982\u6d4b\u8bd5case\uff0c\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e\u4ea7\u751fgolden\uff0c\u8c03\u8bd5\u6d4b\u8bd5case\u6765\u8bb2\u975e\u5e38\u65b9\u4fbf \u9057\u7559\u95ee\u9898\uff1a \u662f\u5426\u80fd\u8fd0\u884clinux\u5185\u6838","title":"spike"},{"location":"ic/simulator.html#bochs","text":"\u5f88\u6709\u540d\uff0c\u4f46\u4f3c\u4e4e\u53ea\u80fd\u6a21\u62dfx86, \u653e\u8fc7\u5b83\u5427","title":"Bochs"},{"location":"ic/simulator.html#_7","text":"","title":"\u5e38\u89c1\u65f6\u949f\u7ea7\u6a21\u62df\u5668\u5206\u6790"},{"location":"ic/simulator.html#gem5","text":"\u5f88\u7ecf\u5178\uff0c\u5b66\u9662\u98ce\uff0c\u9002\u5408\u505a\u67b6\u6784\u63a2\u7d22 \u7f57\u5217\u4e00\u4e0b\u4f18\u70b9\uff1a \u6a21\u5757\u5316\uff0c\u6613\u4e8e\u6269\u5c55\uff0c\u57fa\u7840\u6a21\u5757\u6bd4\u8f83\u591a \u914d\u7f6e\u65b9\u4fbf\uff0c\u4f7f\u7528python\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u5b9a\u5236 debug\u4fe1\u606f\u4e30\u5bcc\uff0cgdb\u8c03\u8bd5\u65b9\u4fbf \u652f\u6301\u591a\u79cd\u67b6\u6784 \u5f00\u53d1\u5468\u671f\u77ed\uff0c\u80fd\u5feb\u901f\u9a8c\u8bc1\u60f3\u6cd5 \u81f3\u4e8e\u7f3a\u70b9\u561b\uff0c\u8fd8\u771f\u662f\u4e0d\u597d\u60f3\uff0c\u6162\u80af\u5b9a\u662f\u6162\u4e86\u3002\u5b66\u4e60\u6210\u672c\u662f\u6709\u7684\uff0c\u4e0d\u81f3\u4e8e\u592a\u8fc7\u5206\uff0c\u597d\u5728\u6709\u4e00\u4e9b\u5b98\u65b9\u6587\u6863\u53ef\u4ee5\u53c2\u8003\u3002\u4f5c\u4e3a\u67b6\u6784\u63a2\u7d22\u5f88\u5408\u9002\u3002\u542c\u8bf4\u8fd8\u6709\u4e00\u4e2a\u5206\u5e03\u5f0f\u7684\u5206\u652f\uff1f","title":"gem5"},{"location":"ic/simulator.html#systemc","text":"\u4f3c\u4e4e\u662f\u5de5\u7a0b\u5316\u7684\u6b63\u7edf\uff0c\u4f5c\u4e3a\u82af\u7247\u516c\u53f8\uff0c\u4f3c\u4e4e\u5fc5\u987b\u8981\u6709\u4e00\u4e2asystemC\u7684\u6a21\u62df\u5668\uff01\uff1f \u5e02\u9762\u4e0a\u6709\u6ca1\u6709\u4e00\u4e9b\u57fa\u4e8esystemC\u7684\u5f00\u53d1\u6846\u67b6\uff1f","title":"systemC"},{"location":"ic/simulator.html#firesim","text":"[ https://fires.im/ ] \u5f00\u6e90\u7684\u65f6\u949f\u7cbe\u786e\u7684\u901a\u8fc7\u4e9a\u9a6c\u900a\u4e91FPGA\u52a0\u901f\u7684\u5168\u7cfb\u7edf\u786c\u4ef6\u6a21\u62df\u5e73\u53f0\uff0c\u53c8\u662f\u535a\u514b\u5229\u5927\u5b66(\u4e0d\u5f97\u4e0d\u4f69\u670d\u8fd9\u4e2a\u5927\u5b66\u7684\u79d1\u7814\u80fd\u529b\u5440\uff0c\u4ed6\u4eec\u600e\u4e48\u80fd\u8fd9\u4e48\u5389\u5bb3)\u7684\u4e00\u4e2a\u4ea7\u7269\u3002 \u6284\u4e00\u6bb5\u5b98\u7f51\u7684\u63cf\u8ff0\u5982\u4e0b\uff1a FireSim can simulate arbitrary hardware designs written in Chisel or designs that can be transformed into FIRRTL (including early work on supporting Verilog designs via Yosys\u2019s Verilog to FIRRTL flow). With FireSim, you can write your own RTL (processors, accelerators, etc.) and run it at near-FPGA-prototype speeds on cloud FPGAs, while obtaining cycle-accurate performance results (i.e. matching what you would find if you taped-out a chip) \u5b83\u53ef\u4ee5\u4eff\u771f(simulate)\u4efb\u610f\u7684\u786c\u4ef6\u8bbe\u8ba1\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u8bbe\u8ba1\u8981\u6c42\u662f\u7528Chisel\u5199\u7684\uff0c\u6216\u8005\u662fFIRRTL\uff08\u770b\u6765\u662f\u5b83\u81ea\u5df1\u7684\u4e00\u5957RTL\u8bed\u6cd5\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u901a\u8fc7Yosys\u7684 verlog\u8f6cFIRRTL\u5de5\u5177\u5c06RTL\u8f6c\u6362\u6210FIRRTL\uff09\u3002\u8fd9\u6837\u770b\u6765\u5b83\u5e76\u4e0d\u662f\u4e00\u4e2a\u6a21\u62df\u5668\u6846\u67b6\uff0c\u66f4\u50cf\u662f\u4e00\u4e2a\u4eff\u771f\u5de5\u5177\uff0c\u7528Chisel\u5199\u597d\u8bbe\u8ba1\uff0c\u7136\u540e\u901a\u8fc7\u8fd9\u4e2a\u5728\u4e9a\u9a6c\u900a\u4e91FPGA\u4e0a\u5feb\u901f\u8fd0\u884c\uff0c\u5f97\u5230\u6027\u80fd\u6570\u636e\uff0c\u8fd9\u662f\u4e0d\u662f\u7c7b\u4f3c\u4e0epalladium? \u5178\u578b\u5e94\u7528\u573a\u666f\u5305\u62ec\uff1a \u8bc4\u4f30\u81ea\u5df1\u5b9e\u73b0\u7684IC\u8bbe\u8ba1\u3002\u6bd4\u5982\u5199\u4e00\u4e2a\u52a0\u901f\u5668\uff0c\u5728\u4e0a\u9762\u5b9e\u9645\u7684\u8dd1\u4e00\u4e0b \u5feb\u901f\u7684\u5b9a\u5236\u6216\u8005\u8bc4\u4f30riscv\u6838\u3002firesim \u5b9e\u73b0\u4e86Rocket Chip and BOOM\uff0c\u53ef\u4ee5\u76f4\u63a5\u8dd1\u8fd9\u4fe9CPU \u4ee5FPGA\u7684\u901f\u5ea6\u8c03\u8bd5Chisel\u4ee3\u7801\uff0c\u8fd9\u5bf9\u4e8eChisel\u8c03\u8bd5\u6765\u8bb2\u5e94\u8be5\u662f\u6709\u7528\u7684 \u6a21\u62df\u5927\u578b\u6570\u636e\u4e2d\u5fc3\u7cfb\u7edf\uff0c\u56e0\u4e3a\u5b83\u4e91\u7aef\u8d44\u6e90\u4e30\u5bcc \u9ad8\u6027\u80fd\u5e26\u5916\u5206\u6790\uff0c\u6bd4\u5982\u60f3\u5728\u5b9e\u73b0\u7684SOC\u4e0a\u8dd1\u4e00\u4e2alinux\u7cfb\u7edf\uff0c\u7528\u8fd9\u4e2a\u80fd\u6bd4\u8f83\u5feb \u8fd9\u6837\u6765\u770b\uff0c\u4e0d\u8fd8\u662f\u4e91\u7aefPalladium\u5417\uff1f\u7c97\u7565\u770b\u4e86\u4e00\u4e0b\u4f7f\u7528\u65b9\u6cd5\uff0c\u7c7b\u4f3c\u4e8eFPGA IDE\uff0c\u5b83\u4f1a\u5c06Chisel\u4ee3\u7801\u7f16\u8bd1\u6210FPGA\u4ee3\u7801\uff0c\u7136\u540e\u5728\u4e91\u7aef\u6267\u884c\u3002\u56e0\u6b64\u4e0d\u80fd\u628a\u8fd9\u4e2a\u79f0\u4e3a\u6a21\u62df\u5668\u6846\u67b6\uff0c\u800c\u5e94\u8be5\u79f0\u4e3a\u4e9a\u9a6c\u900a\u4e91FPGA\u7f16\u8bd1\u5668\u3002\u5b83\u5b9e\u9645\u4e0a\u964d\u4f4e\u4e86FPGA\u7684\u4f7f\u7528\u6210\u672c\u3002 \u5f53\u8981\u628a\u65f6\u949f\u7ea7\u6a21\u62df\u5668\u505a\u7684\u5f88\u7ec6\u7684\u8bdd\uff0c\u5de5\u4f5c\u91cf\u4e0d\u4e9a\u4e8e\u5199Chisel\u4ee3\u7801\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u76f4\u63a5\u5199Chisel\uff0c\u7136\u540e\u7528FireSim\u6765\u52a0\u901f\u4eff\u771f\uff0c\u4f3c\u4e4e\u4e5f\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u8fd0\u884c\u8d77\u6765\u80af\u5b9a\u6bd4Gem5\u8981\u5feb\uff0c\u800c\u4e14\u9002\u5408\u5927\u89c4\u6a21\u3002\u8fd9\u5c31\u56de\u5f52\u5230\u4e86\u524d\u9762\u7684\u4e16\u754c\u89c2\u95ee\u9898\uff0c\u5f53FPGA\u6216\u8005Palladium\u6210\u672c\u53d8\u5f97\u975e\u5e38\u4f4e\u7684\u65f6\u5019\uff0c\u5f53\u9700\u8981\u6a21\u62df\u7684\u5f88\u7cbe\u7ec6\u7684\u65f6\u5019\uff0cGem5\u8fd9\u79cd\u7eaf\u8f6f\u4ef6\u7684\u6a21\u62df\u5668\u662f\u4e0d\u662f\u8fd8\u6709\u5b83\u7684\u4ef7\u503c\uff1f\u6211\u76ee\u524d\u4ecd\u8ba4\u4e3aGem5\u8fd9\u79cd\u7eaf\u8f6f\u4ef6\u7684\u6a21\u62df\u5668\u8fd8\u662f\u6709\u5b83\u7684\u4f18\u52bf \u7c7b\u4f3cgem5\u8fd9\u79cd\u6a21\u62df\u5668\uff0c\u6a21\u5757\u5316\u666e\u904d\u505a\u7684\u8f83\u597d\uff0c\u57fa\u4e8e\u67d0\u4e00\u4e2a\u7c7b\u4f3c\u7684\u5b9e\u73b0\u53bb\u6539\uff0c\u53ef\u80fd\u4f1a\u5927\u5927\u7f29\u77ed\u5f00\u53d1\u5468\u671f \u6bd5\u7adf\u662f\u8f6f\u4ef6\uff0c\u53ef\u6dfb\u52a0\u7684\u529f\u80fd\u548c\u624b\u6bb5\u90fd\u66f4\u591a\u66f4\u4e30\u5bcc \u5f53\u7136\uff0c\u6211\u73b0\u5728\u7684\u6c34\u5e73\u4e5f\u65e0\u6cd5\u770b\u5f97\u6e05\u695a\uff0c\u53ea\u662f\u4e00\u4e9b\u788e\u788e\u5ff5\u800c\u5df2 \u53e6\u5916\uff0c\u8fd9\u79cd\u5229\u7528FPGA\u52a0\u901f\u7684\u5c31\u662f\u4e0d\u77e5\u9053\u5b83\u8c03\u8bd5\u624b\u6bb5\u662f\u4e0d\u662f\u8db3\u591f\u4e30\u5bcc\uff0c\u662f\u4e0d\u662f\u4f1a\u5bfc\u81f4\u4ee3\u7801\u6cc4\u6f0f\u3002\u800c\u4e14Chisel\u662f\u4e0d\u662f\u771f\u7684\u6709\u524d\u9014\uff1f \u540e\u7eed\u6709\u673a\u4f1a\u53ef\u4ee5\u6309\u7167\u5b83\u7684\u6587\u6863\u81ea\u5df1\u642d\u5efa\u4e00\u4e0b\u73af\u5883\uff0c\u5c1d\u8bd5\u8fd0\u884c\u4e00\u4e0b\uff0c\u770b\u770b\u6548\u679c\u3002\u76ee\u524d\u4e0d\u5728\u8fd9\u91cc\u5c55\u5f00\u3002","title":"FireSim"},{"location":"ic/simulator.html#socrocket","text":"Transaction-Level Modeling Framework for Space Applications \u76f4\u8bd1\u4e3a\u7528\u4e8e\u7a7a\u95f4\u63a2\u7d22\u7684\u4e8b\u7269\u7ea7\u5efa\u6a21\u6846\u67b6\uff0c\u90a3\u4e3a\u4ec0\u4e48\u8bf4\u7528\u4e8e\u7a7a\u95f4\u63a2\u7d22\uff0c\u4e00\u4e2a\u4ee5\u536b\u661f\u4e3a\u56fe\u6807\u7684\u6846\u67b6\uff0c\u4f3c\u4e4e\u662f\u4e0e\u822a\u5929\u6709\u4ec0\u4e48\u5173\u7cfb\u3002 \u6240\u8c13Transaction-Level\uff0c\u6211\u60f3\u662f\u56e0\u4e3a\u8fd9\u4e2a\u6846\u67b6\u7528\u7684TLM\u662f\u4e8b\u7269\u7ea7\u7684\u3002TLM\u53ef\u4ee5\u62bd\u8c61\u5c42\u6b21\u5f88\u9ad8\uff0c\u5e76\u4e14\u65e2\u53ef\u4ee5\u7528\u6765\u5199\u59cb\u7ec8\u7cbe\u786e\u7684\u4e5f\u53ef\u4ee5\u7528\u6765\u5199\u529f\u80fd\u578b\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\u4e24\u79cd\u6a21\u578b\u7684\u8981\u6c42\u90fd\u80fd\u6ee1\u8db3\uff0c\u53ef\u76d0\u53ef\u751c\uff0c\u771f\u4e0d\u6233\u3002 To archive these goals, we designed the SoCRocket Framework. Written in SystemC/TLM, it is fitted to serve the space industry'sspecial needs and builds the foundation of space-domain ESL design. \u8fd9\u4e2a\u771f\u662f\u6655\u4e86\uff0c\u600e\u4e48\u771f\u7684\u626f\u5230\u822a\u5929\u5de5\u4e1a\u53bb\u4e86\uff0c\u5230\u5e95\u5565\u610f\u601d\uff0c\u600e\u4e48\u5c31\u9002\u5408\u822a\u5929\u5de5\u4e1a\u7279\u6b8a\u9700\u6c42\u4e86\uff0c\u600e\u4e48\u5c31\u4e3a\u7a7a\u95f4\u57dfESL\u8bbe\u8ba1\u5960\u5b9a\u57fa\u7840\u4e86\u3002SOC\u706b\u7bad\u5230\u5e95\u662f\u4e2a\u5565\uff1f\u6211\u89c9\u5f97\u8fd9\u90e8\u5206\u63cf\u8ff0\u5e94\u8be5\u662f\u6709\u4e00\u4e9b\u7406\u89e3\u4e0a\u7684\u6b67\u4e49\uff0c\u6216\u8bb8\u662f\u6211\u8fd8\u4e0d\u4e86\u89e3IC\u5f00\u53d1\u7684\u4e00\u4e9b\u4e1c\u897f\u3002 TLM\u89e3\u6790 ESL\u662fIC\u8bbe\u8ba1\u7684\u672a\u6765\uff1f","title":"socrocket"},{"location":"ic/simulator.html#risc-v-tlm","text":"\u8fd9\u662f\u4e00\u4e2a\u7528TLM\u5199\u7684riscv\u7684\u6a21\u62df\u5668\u3002\u76ee\u524d\u4ec5\u652f\u6301rv32imac\u3002\u663e\u7136\uff0c\u8fd9\u662f\u5b66\u4e60TLM\u548cSystemC\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u53c2\u8003\uff0c\u5bf9\u57fa\u4e8eTLM\u642d\u5efa\u81ea\u5df1\u7684\u6a21\u62df\u5668\u4e5f\u5177\u6709\u6307\u5bfc\u610f\u4e49\uff0c\u6216\u8bb8\u6211\u5e94\u8be5\u5c1d\u8bd5\u53bb\u8ddf\u4ed6\u4e00\u8d77\u6269\u5c55\u8fd9\u4e2a\u5b9e\u73b0 [ https://github.com/mariusmm/RISC-V-TLM ]","title":"RISC-V-TLM"},{"location":"ic/simulator.html#simics","text":"\u98ce\u6cb3\u7684\u4ea7\u54c1\uff0c\u8981\u82b1\u94b1\u7684\u8fd8\u662f\u7b97\u4e86\u5427","title":"Simics"},{"location":"ic/simulator.html#_8","text":"\u8fd9\u91cc\u6682\u65f6\u4e0d\u5c55\u5f00\uff0c\u77e5\u4e4e\u6587\u7ae0[ https://zhuanlan.zhihu.com/p/53476489]\u4e2d\u63d0\u5230\u7684\u4e00\u4e9b\u70b9\u548c\u6211\u7684\u89c2\u70b9\u4e00\u81f4 \u3002 \u6bd4\u5982\u79bb\u6563\u4e8b\u4ef6\u6a21\u578b\uff0c\u6bd4\u5982\u6a21\u5757\u5316\uff0c\u4f46\u81ea\u5df1\u9020\u8f6e\u5b50\u7684\u610f\u4e49\u662f\u4ec0\u4e48\u5462\uff1f","title":"\u5b8c\u5168\u81ea\u5df1\u5b9e\u73b0\u6a21\u62df\u5668"},{"location":"ic/simulator.html#_9","text":"Qemu, Gem5, SystemC/TLM\u662f\u503c\u5f97\u91cd\u70b9\u5173\u6ce8\u7684 \u5bf9\u4e8e\u65f6\u949f\u7cbe\u786e\u7684\u6a21\u62df\u5668\u5f00\u53d1\uff0c\u5b83\u7684\u95ee\u9898\u5728\u4e8e\u5c3d\u7ba1\u65f6\u949f\u53ef\u4ee5\u5f88\u7cbe\u786e\uff0c\u4f46\u4ecd\u7136\u662f\u6a21\u62df\u5668\u3002\u6bd4\u5982\u7528gem5\u6765\u5f00\u53d1\uff0c\u90a3\u5b83\u6ce8\u5b9a\u65e0\u6cd5\u8f6c\u6362\u6210RTL\u5b9e\u73b0\uff0c\u4ed6\u9700\u8981\u5f00\u53d1\u4eba\u5458\u4e3b\u52a8\u4fdd\u8bc1\u548cRTL\u5b9e\u73b0\u7684\u540c\u6b65\uff0c\u8fd9\u5728\u73b0\u5b9e\u4e2d\u5f80\u5f80\u5f88\u96be\u505a\u5230\uff0c\u5e76\u4e14\u53ef\u80fd\u7528\u5b83\u7684\u4eba\u4e5f\u6ca1\u6307\u671b\u80fd\u591f\u505a\u5230\u3002\u4f46\u65e0\u8bba\u5982\u4f55\uff0c\u6211\u4eec\u603b\u662f\u89c9\u5f97\u6a21\u62df\u5668\u7684\u5f00\u53d1\u548cRTL\u5f00\u53d1\u8fd9\u4e24\u8005\u4e4b\u95f4\u5b58\u5728\u5f88\u591a\u91cd\u590d\u6027\u5de5\u4f5c\u3002\u5047\u5982\u80fd\u6709\u4e00\u4e2a\u5168\u9762\u7684\u5de5\u5177\uff0c\u5b83\u65e2\u80fd\u6ee1\u8db3\u67b6\u6784\u63a2\u7d22\u7684\u9700\u6c42\uff0c\u53c8\u80fd\u8f6c\u5316\u4e3a\u53ef\u7528\u7684RTL\u5b9e\u73b0\uff0c\u5c82\u4e0d\u7f8e\u54c9\u3002\u4f46\u4e00\u65e6\u6d89\u53ca\u5230\u8f6c\u6362\uff0c\u90a3\u5c31\u5fc5\u7136\u4f1a\u5f15\u5165\u4e00\u4e2a\u7c7b\u4f3c\u7f16\u8bd1\u5668\u7684\u4e1c\u897f\uff0c\u7ecf\u8fc7\u7f16\u8bd1\u5668\u7f16\u8bd1\u51fa\u6765\u7684\u4e1c\u897f\u662f\u5f88\u96be\u7ef4\u62a4\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u751f\u6210\u7684RTL\u662f\u5f88\u96be\u4eba\u5de5\u52a0\u5165\u5230\u73b0\u6709RTL\u4e2d\u7684\uff0c\u90a3\u53ea\u80fd\u662f\u5b8c\u5168\u4f7f\u7528\u5168\u65b0\u7684\u66f4\u9ad8\u62bd\u8c61\u5c42\u6b21\u7684\u8bed\u8a00\u6765\u5f00\u53d1\uff0c\u8fd9\u6837\u65e2\u89e3\u51b3\u4e86\u67b6\u6784\u63a2\u7d22\u548c\u9a8c\u8bc1\u7684\u95ee\u9898\uff0c\u4e5f\u4e0d\u7528\u518d\u624b\u5199RTL\u3002\u8fd9\u4f3c\u4e4e\u662f\u672a\u6765\uff0c\u4f46\u76ee\u524d\u4e0a\u4e0d\u6210\u719f\uff0c\u7b49\u5230\u90a3\u4e2a\u65f6\u5019\uff0c\u5728\u4ea7\u54c1\u5c42\u9762\u53ef\u80fd\u5c31\u4e0d\u518d\u9700\u8981gem5\u8fd9\u79cd\u6846\u67b6\u8fdb\u884c\u67b6\u6784\u63a2\u7d22\u4e86\uff0c\u6240\u4ee5\u957f\u8fdc\u6765\u770b\uff0c\u6a21\u62df\u5668\u5f00\u53d1\u4eba\u5458\u638c\u63e1\u8db3\u591f\u7684RTL\u5f00\u53d1\u80fd\u529b\u662f\u5fc5\u987b\u7684\uff0c\u5f53\u7136\u8fd8\u5e94\u8be5\u79ef\u6781\u62e5\u62b1Chisel, TLM\u7b49\u66f4\u9ad8\u5c42\u6b21\u7684\u62bd\u8c61\u3002\u4f46\u5c31\u76ee\u524d\u6765\u770b\uff0c\u66f4\u9ad8\u62bd\u8c61\u5c42\u7684\u8bed\u8a00\u8fd8\u6709\u5f88\u957f\u7684\u8def\u8981\u8d70\uff0c\u624b\u5199RTL\u8fd8\u662f\u76ee\u524d\u6700\u4f73\u65b9\u6848\u3002\u6a21\u62df\u5668\u5f00\u53d1\u65b9\u6848\u7684\u9009\u62e9\u4ecd\u7136\u9700\u8981\u5148\u805a\u7126\u5230\u57fa\u672c\u9700\u6c42\u4e0a\u3002","title":"\u603b\u7ed3"},{"location":"ic/simulator.html#20231023","text":"","title":"\u66f4\u65b0 2023/10/23"},{"location":"ic/simulator.html#q1benchmark-gem5fsse","text":"\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528fs\u6a21\u5f0f\u3002 \u4f7f\u7528fs\u6a21\u5f0f\u7684\u4f18\u70b9\uff1a \u4e0d\u9700\u8981\u62c5\u5fc3se\u6a21\u5f0f\u4e0b\u7684\u7cfb\u7edf\u8c03\u7528\u652f\u6301\u4e0d\u5b8c\u5584\u7684\u95ee\u9898 fs\u6a21\u5f0f\u4e0b\u7684checkpoint\u66f4\u52a0\u7b80\u5355 fs\u6a21\u5f0f\u53ea\u6709kernel\u542f\u52a8\u7684\u65f6\u5019\u9700\u8981\u989d\u5916\u7684\u82b1\u8d39\u8f83\u957f\u65f6\u95f4\uff0c\u771f\u6b63\u8fd0\u884c\u7684\u65f6\u5019\u989d\u5916\u7684\u65f6\u95f4\u5f00\u9500\u6bd4\u8f83\u5c11\uff0c\u4e0d\u5bf9\u603b\u4f53\u6a21\u62df\u65f6\u95f4\u9020\u6210\u592a\u591a\u5f71\u54cd\u3002","title":"Q1:\u8dd1benchmark gem5\u5230\u5e95\u5e94\u8be5\u4f7f\u7528fs\u6a21\u5f0f\u8fd8\u662fse\u6a21\u5f0f"},{"location":"ic/simulator.html#q2","text":"gem5\u5f88\u96be\u5b9e\u73b0\u5728\u5fae\u7ed3\u6784\u8f93\u5165\u8f93\u51fa\u5c42\u9762\u7684\u5bf9\u9f50\uff0c\u800c\u4e14\u8fd9\u79cd\u5bf9\u9f50\u771f\u7684\u6709\u610f\u4e49\u5417\uff1f\u53ef\u4ee5\u4ece\u539f\u7406\u548c\u65f6\u5e8f\u4e0a\u505a\u5fae\u7ed3\u6784\u7684\u5bf9\u9f50\uff0c\u4f46\u4e0d\u5fc5\u4fdd\u8bc1\u5728\u8f93\u5165\u8f93\u51fa\u5c42\u9762\u7684\u5b8c\u5168\u4e00\u81f4\u3002 \u53ef\u4ee5\u505a\u5ef6\u65f6\u548cthroughput\u5c42\u9762\u7684\u5bf9\u9f50 \u53ef\u4ee5\u5229\u7528benchmark\u5207\u7247\u5728IPC,cache miss, branch miss\u7b49\u5c42\u9762\u8fdb\u884c\u5bf9\u9f50","title":"Q2:\u6a21\u62df\u5668\u5bf9\u9f50\u53ef\u4ee5\u6709\u54ea\u51e0\u79cd\u5f62\u5f0f"},{"location":"ic/simulator2.html","text":"\u518d\u8c08\u6a21\u62df\u5668 \u00b6 \u6700\u8fd1\u5728\u9879\u76ee\u4e2d\u4f7f\u7528simpleSim\u8fdb\u884c\u4e86\u4e00\u4e2a\u81ea\u7814CPU\u7684\u5f00\u53d1\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6709\u4e00\u4e9b\u60f3\u6cd5\u503c\u5f97\u8bb0\u5f55\u4e0b\u6765\uff0c\u6240\u4ee5\u53c8\u5199\u4e86\u8fd9\u7bc7\u6a21\u62df\u5668\u76f8\u5173\u7684\u6587\u6863 \u4e3a\u4ec0\u4e48\u4f7f\u7528simpleSim \u00b6 \u9009\u7528simpleSim\u8fd9\u4e2a\u6a21\u62df\u5668\u8fdb\u884c\u5f00\u53d1\u4e3b\u8981\u6709\u5982\u4e0b\u51e0\u70b9\u539f\u56e0\uff1a \u8fd9\u6b21\u7684CPU\u5f88\u591a\u7ed3\u6784\u90fd\u662f\u5176\u4ed6CPU\u6240\u4e0d\u5177\u6709\u7684\uff0c\u5e76\u4e14\u662f\u5168\u65b0\u7684\u81ea\u5b9a\u4e49\u6307\u4ee4\u96c6\u67b6\u6784\uff0c\u5f00\u53d1\u65f6\u95f4\u5f88\u7d27\u8feb\uff0c\u57fa\u4e8eGem5\u8fdb\u884c\u5f00\u53d1\uff0c\u5de5\u4f5c\u91cf\u5f88\u5927\uff0c\u4e00\u4eba\u6708\u5f88\u96be\u5b8c\u6210\u3002 \u5728\u9879\u76ee\u4e2d\u65e2\u8981\u5f00\u53d1\u529f\u80fd\u6a21\u62df\u5668\u53c8\u8981\u5f00\u53d1\u6027\u80fd\u5206\u6790\u6a21\u62df\u5668\u3002\u529f\u80fd\u6a21\u62df\u5668\u4f18\u5148\u7ea7\u5f88\u9ad8\uff0c\u6027\u80fd\u6a21\u62df\u5668\u4e0d\u662f\u5fc5\u9009\u9879\u3002 \u81ea\u8eab\u4e0d\u719f\u6089systemc simpleSim\u4ee3\u7801\u7b80\u5355\uff0c\u6307\u4ee4\u96c6\u62bd\u8c61\u7b80\u5355\uff0c\u529f\u80fd\u6a21\u62df\u548c\u6027\u80fd\u6a21\u62df\u53ef\u4ee5\u5171\u7528\u540c\u4e00\u5957\u6307\u4ee4\u96c6\uff0c\u5f00\u53d1\u5468\u671f\u9884\u4f30\u65f6\u95f4\u77ed \u57fa\u4e8e\u4ee5\u4e0a\u51e0\u70b9\u539f\u56e0\uff0c\u9009\u62e9\u4e86\u4f7f\u7528SimpleSim\u8fdb\u884c\u5f00\u53d1 \u5f00\u53d1\u8fc7\u7a0b \u00b6 simpleSim\u6846\u67b6\u7684\u4ee3\u7801\u91cf\u8f83\u5c0f\uff0c\u6574\u4e2a\u5f00\u53d1\u8fc7\u7a0b\u5927\u6982\u5206\u4e3a\u5982\u4e0b\u51e0\u6b65 |-------------------------------| | \u4e0b\u8f7d\u6e90\u7801\uff0c\u7f16\u8bd1\u6d4b\u8bd5\uff0c\u719f\u6089\u4f7f\u7528\u65b9\u5f0f | |-------------------------------| | V |-------------------------------| | \u5efa\u7acb\u672c\u5730gitlab\u4ed3\u5e93\uff0c\u4e0a\u4f20\u4ee3\u7801 | |-------------------------------| | V |- \u6307\u4ee4\u96c6\u7ba1\u7406\u5b50\u7cfb\u7edf(\u6307\u4ee4\u7f16\u7801,\u6307\u4ee4\u89e3\u7801,\u6307\u4ee4\u62bd\u8c61) |-------------------------------| \u6a21\u62df\u5668\u5b50\u7cfb\u7edf |- \u5185\u5b58\u7ba1\u7406\u5b50\u7cfb\u7edf | \u7ed3\u5408\u5b98\u65b9\u6587\u6863\uff0c\u719f\u6089\u6a21\u62df\u5668\u57fa\u672c\u7ed3\u6784 | ---------------------|- \u8fd0\u884c\u8c03\u5ea6\u7ba1\u7406\u5b50\u7cfb\u7edf(loop\u8fd8\u662f\u4e8b\u4ef6\u8c03\u5ea6\uff0c\u591a\u7ebf\u7a0b\u8fd8\u662f\u5355\u7ebf\u7a0b) | sim-safe sim-outorder | |- register file\u7ba1\u7406\u5b50\u7cfb\u7edf |-------------------------------| |- debug\uff0ctrace\u5b50\u7cfb\u7edf | V |--------------------------------| | \u5b8c\u6210\u5bf9sim-safe\u6574\u4e2a\u6a21\u62df\u8fc7\u7a0b\u7684\u719f\u6089 | |--------------------------------| | V |-------------------------------| | \u6784\u5efa\u65b0\u7684\u6307\u4ee4\u96c6 | |-------------------------------| | V |-------------------------------| | \u7b80\u5355\u9a8c\u8bc1\u6307\u4ee4\u6b63\u786e\u6027 | |-------------------------------| | V |- fetch,decode,dispatch,rename,execute,writeback,commit\u5404\u4e2a\u9636\u6bb5\u7684\u5b9e\u73b0 |-------------------------------| cycle simulator |- lsu\u7684\u5b9e\u73b0 | \u5206\u6790sim-outorder | ----------------------|- fu\u7684\u5b9e\u73b0 |-------------------------------| |- outoforder\u76f8\u5173\u5b9e\u73b0\uff0cRUU | |- \u5404\u9636\u6bb5\u7684\u53cd\u538b\u5b9e\u73b0 V |- \u6027\u80fd\u7edf\u8ba1\u529f\u80fd\u7684\u5b9e\u73b0 |--------------------------------| | \u57fa\u4e8e\u65b0\u6307\u4ee4\u96c6\u6d4b\u8bd5\u539f\u6709sim-outorder | |--------------------------------| | V |--------------------------------| | \u9010\u6b65\u4fee\u6539\u5fae\u67b6\u6784\uff0c\u9760\u8fd1\u8bbe\u8ba1\u65b9\u6848 | |--------------------------------| \u8fc7\u7a0b\u603b\u7ed3 \u00b6 \u5bf9\u4e8e\u719f\u6089\u4e00\u4e2a\u65b0\u6a21\u62df\u5668\u6846\u67b6\uff0c\u76ee\u524d\u89c9\u5f97\u6bd4\u8f83\u9ad8\u6548\u7684\u65b9\u5f0f\u5c31\u662f\uff1a \u5148\u642d\u5efa\u597d\u73af\u5883\uff0c\u8fd0\u884c\u51e0\u4e2acase\uff0c\u719f\u6089\u6a21\u62df\u5668\u4f7f\u7528\u65b9\u6cd5\u3002 \u7136\u540e\u7ed3\u5408\u76f8\u5173\u6587\u6863\uff0c\u68b3\u7406\u6bcf\u4e2a\u76ee\u5f55\u5927\u81f4\u5728\u505a\u4ec0\u4e48\u4e8b\u60c5\u3002\u8fd9\u65f6\u5019\u53ef\u80fd\u6682\u65f6\u4e0d\u80fd\u5168\u90e8\u68b3\u7406\u6e05\u695a\uff0c\u4e0d\u7740\u6025\uff0c\u5c3d\u53ef\u80fd\u7684\u53bb\u719f\u6089 \u642d\u5efa\u597d\u8c03\u8bd5\u73af\u5883\uff0c\u53ef\u4ee5\u4f7f\u7528vscode\u5d4c\u5165\u7684gdb,\u8c03\u8bd5\u6bd4\u8f83\u65b9\u4fbf\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u5927\u81f4\u6e05\u695a\u7a0b\u5e8f\u662f\u591a\u7ebf\u7a0b\u8fd8\u662f\u5355\u7ebf\u7a0b \u9010\u6b65\u7684\u719f\u6089\u6574\u4e2a\u6846\u67b6\u7684\u7ec4\u7ec7\u7ed3\u6784 \u9488\u5bf9\u4e00\u4e2a\u5c0f\u70b9\u8fdb\u884c\u5206\u6790\uff0c\u6bd4\u5982\u529f\u80fd\u6a21\u62df\u5668\u5c31\u53ef\u4ee5\u4ece\u6307\u4ee4\u89e3\u7801\u6267\u884c\u8fc7\u7a0b\u5165\u624b\u8fdb\u884c\u5206\u6790\uff0c\u5728\u5206\u6790\u5c0f\u70b9\u7684\u8fc7\u7a0b\u4e2d\u9010\u6b65\u6e05\u6670\u6574\u4e2a\u6846\u67b6\u7684\u7ed3\u6784\uff1b \u6027\u80fd\u6a21\u62df\u5668\u4f1a\u76f8\u5bf9\u590d\u6742\uff0c\u53ef\u4ee5\u4ecefetch\u9636\u6bb5\u8fdb\u884c\u5206\u6790\u3002 \u7531\u70b9\u6210\u9762\uff0c\u6269\u5927\u7406\u89e3\u8303\u56f4 \u5927\u81f4\u6e05\u695a\u6574\u4f53\u7ed3\u6784\uff0c\u7814\u7a76\u6e05\u695a\u4e00\u4e2a\u6a21\u5757\u540e\u518d\u8fdb\u884c\u6539\u52a8 \u6539\u52a8\u65f6\u5c3d\u91cf\u4fdd\u6301\u968f\u65f6\u53ef\u8fd0\u884c\uff0c\u5c0f\u6b65\u5feb\u8dd1\uff0c\u6539\u52a8\u540e\u7acb\u5373\u9a8c\u8bc1\uff0c\u968f\u65f6\u53efrelease \u7ed3\u679c \u00b6 \u6700\u7ec8\uff0c\u529f\u80fd\u6a21\u62df\u5668\u6210\u529f\u5728\u8ba1\u5212\u65f6\u95f4\u4e4b\u524d\u7a33\u5b9a\uff0c\u6027\u80fd\u6a21\u62df\u5668\u80fd\u591f\u5927\u81f4\u8fdb\u884c\u6307\u4ee4\u6d41\u5206\u6790\uff0c\u4f46\u6ca1\u80fd\u5bf9\u9879\u76ee\u63d0\u4f9b\u6709\u7528\u5e2e\u52a9\u3002 \u529f\u80fd\u6a21\u62df\u5668\u5b9e\u73b0\u603b\u7ed3 \u00b6 \u529f\u80fd\u6a21\u62df\u5668\u662f\u6210\u529f\u7684\uff0c\u5728\u529f\u80fd\u6a21\u62df\u5668\u5bf9\u63a5\u8fc7\u7a0b\u4e2d\u6536\u83b7\u4e86\u65b0\u7684\u7ecf\u9a8c \u529f\u80fd\u6a21\u62df\u5668\u4e00\u822c\u662f\u4ee5.so\u7684\u65b9\u5f0f\u8fdb\u884crelease\u7684\uff0c\u8fd9\u662f\u56e0\u4e3aUVM\u9a8c\u8bc1\u65f6\uff0c\u5f80\u5f80\u662f\u628a\u529f\u80fd\u6a21\u62df\u5668\u4f5c\u4e3a\u5176\u4e00\u90e8\u5206\u8fdb\u884c\u96c6\u6210\u7684\uff0c\u8fd9\u65f6\u5019\uff0c\u52a8\u6001\u94fe\u63a5\u5e93(\u636e\u8bf4\u9759\u6001\u5e93\u5728\u96c6\u6210\u65f6\u4f1a\u6709\u5f88\u591a\u5751\uff1f)\u5c31\u663e\u5f97\u975e\u5e38\u65b9\u4fbf\u3002 \u540c\u65f6\uff0c\u505acosim\u9a8c\u8bc1\u65f6\uff0c\u4e00\u822c\u9700\u8981\u5b9e\u73b0step()\u63a5\u53e3\u3002(\u6709\u4e9b\u9a8c\u8bc1\u4f1a\u91c7\u7528dump\u6574\u4e2acase log\u7684\u65b9\u5f0f,\u4f46\u8fd9\u4e2a\u4e0d\u9002\u5408\u5927\u578bcase\u7684\u9a8c\u8bc1\uff0c\u6bd4\u5982\u4e00\u4e2acase\u6709\u51e0\u767e\u4e07\u6761\u6307\u4ee4) \u529f\u80fd\u6a21\u62df\u5668\u7684\u91cd\u70b9\u5728\u4e8e\u6307\u4ee4\u7f16\u89e3\u7801\u53ca\u884c\u4e3a\u5b9e\u73b0\uff0c\u6307\u4ee4\u5b9e\u73b0\u53c8\u6709\u51e0\u4e2a\u91cd\u70b9\uff1a \u7b26\u53f7\u6269\u5c55\u95ee\u9898\uff0c\u8fd9\u4e2a\u8981\u4fdd\u6301\u601d\u8def\u6e05\u6670 \u6d6e\u70b9\u5904\u7406\u95ee\u9898\uff0c\u6d6e\u70b9\u7684\u6444\u5165\u7cbe\u5ea6(fenv.h)\u4ee5\u53ca\u662f\u5426\u9700\u8981\u4f7f\u7528softfloat \u529f\u80fd\u6a21\u62df\u5668\u5f53\u7136\u662f\u8d8a\u5feb\u8d8a\u597d\uff0c\u56e0\u6b64\u597d\u591a\u529f\u80fd\u6a21\u62df\u5668\u5b9e\u73b0\u4e00\u4e9bcache\u6765\u5e2e\u52a9\u5feb\u901f\u6267\u884c\uff0c\u6bd4\u5982\u6307\u4ee4cache\u6765\u7f29\u77ed\u89e3\u7801\u65f6\u95f4\uff0ctlb\u5730\u5740cache\u6765\u7f29\u77ed\u9875\u8868\u67e5\u627e\u65f6\u95f4\u3002\u5f53\u7136\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u4f18\u5316\u624b\u6bb5\uff0c\u6bd4\u5982\u91c7\u53d6\u591a\u7ebf\u7a0b \u6027\u80fd\u6a21\u62df\u5668\u603b\u7ed3 \u00b6 \u6027\u80fd\u6a21\u62df\u5668\u4ece\u9879\u76ee\u4e0a\u6765\u8bb2\u662f\u5931\u8d25\u7684\uff0c\u56e0\u4e3a\u6ca1\u6709\u7ed9\u9879\u76ee\u5e26\u6765\u4ec0\u4e48\u6536\u76ca\u3002\u6211\u89c9\u5f97\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u4e2a\u539f\u56e0\uff1a \u5f00\u53d1\u529f\u80fd\u6a21\u62df\u5668\u5360\u7528\u4e86\u4e00\u90e8\u5206\u65f6\u95f4 \u6027\u80fd\u6a21\u62df\u5668\u548cRTL\u662f\u540c\u65f6\u8fdb\u884c\u5f00\u53d1\u7684\uff0c\u4e24\u8005\u7684\u5468\u671f\u57fa\u672c\u4fdd\u6301\u4e00\u81f4\uff0c\u751a\u81f3\u6027\u80fd\u6a21\u62df\u5668\u7684\u5468\u671f\u8fd8\u66f4\u957f\u4e00\u4e9b\u3002RTL\u8fdb\u5165\u9a8c\u8bc1\u9636\u6bb5\uff0c\u6027\u80fd\u6a21\u62df\u5668\u8fd8\u4e0d\u80fd\u7ed9\u51fa\u4e00\u4e9b\u53c2\u8003\u6570\u636e \u4e2a\u4eba\u5bf9\u4e8e\u6027\u80fd\u6a21\u62df\u5668\u5f00\u53d1\u7684\u89c4\u5212\u5b58\u5728\u95ee\u9898\uff0c\u5728\u4fee\u6539\u67d0\u4e9b\u7ed3\u6784\u65f6\u6ca1\u80fd\u505a\u5230\u65f6\u523b\u4fdd\u6301\u4ee3\u7801\u53ef\u6267\u884c\u3002\u6700\u7ec8\u6536\u655b\u901f\u5ea6\u6bd4\u8f83\u6162\u3002 \u4ee3\u7801\u601d\u8def\u4e0a\u5b58\u5728\u4e00\u4e9b\u95ee\u9898\uff0c\u5f53\u65f6\u60f3\u7740\u5fae\u7ed3\u6784\u5747\u662f\u81ea\u5df1\u8fdb\u884c\u8bbe\u8ba1\u7684\uff0c\u8981\u60f3\u6bd4\u8f83\u7cbe\u786e\u7684\u6a21\u62df\uff0c\u5c31\u9700\u8981\u5bf9\u4e00\u90e8\u5206\u5fae\u7ed3\u6784\u8fdb\u884c\u5efa\u6a21\uff0c\u6ca1\u6cd5\u4f7f\u7528\u73b0\u6709\u5fae\u7ed3\u6784\u3002\u8fd9\u79cd\u601d\u8def\u6ce8\u5b9a\u5468\u671f\u4f1a\u6bd4\u8f83\u957f\uff0c\u6536\u655b\u901f\u5ea6\u4f1a\u6bd4\u8f83\u6162\u3002 \u5982\u679c\u80fd\u591f\u76f4\u63a5\u5728\u539f\u5148\u5fae\u7ed3\u6784\u57fa\u7840\u4e0a\u8fdb\u884c\u7a0d\u5fae\u53d8\u52a8\uff0c\u4ee5\u8fbe\u5230\u57fa\u672c\u62df\u5408\uff0c\u90a3\u4e48\u5b9e\u73b0\u5468\u671f\u5e94\u8be5\u4f1a\u6709\u6240\u7f29\u77ed\uff0c\u6536\u655b\u901f\u5ea6\u4e5f\u4f1a\u5feb\u5f88\u591a\u3002 \u6027\u80fd\u6a21\u62df\u5668\u7684\u7edf\u8ba1\u5f88\u91cd\u8981\uff0csimpleSim\u672c\u8eab\u5b9e\u73b0\u4e86\u8ba1\u6570\u5668\u6846\u67b6\uff0c\u80fd\u591f\u7edf\u8ba1\u4e00\u4e9b\u60f3\u8981\u7684\u6570\u636e\u3002\u53e6\u5916\uff0c\u6211\u63a2\u7d22\u51fa\u4e00\u5957\u6027\u80fd\u6a21\u62df\u5668\u6307\u4ee4\u6548\u7387\u5206\u6790\u65b9\u6848\uff0c\u8fd9\u79cd\u65b9\u5f0f\u5bf9\u4e8e\u5206\u6790\u6027\u80fd\u6709\u6bd4\u8f83\u76f4\u89c2\u7684\u5e2e\u52a9\u3002 \u57fa\u4e8e\u6a21\u62df\u5668\u7684\u5904\u7406\u5668\u6027\u80fd\u5206\u6790\u65b9\u6848 \u00b6 \u65b9\u6848\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u662f\u6307\u4ee4\u6d41\uff0c\u4e00\u90e8\u5206\u662f\u6027\u80fd\u7edf\u8ba1 \u6307\u4ee4\u6d41\u5206\u6790\u65b9\u6848 \u00b6 \u6307\u4ee4\u6d41\u5206\u6790\u65b9\u6848\u7684\u6838\u5fc3\u5c31\u662f\u8ddf\u8e2a\u6bcf\u4e00\u6761\u6307\u4ee4\u5728\u5404\u4e2a\u6a21\u5757\u548cstage\u4e2d\u6d41\u52a8\u7684\u60c5\u51b5\uff0c\u5c06\u5176\u56fe\u8868\u5316\uff0c\u4ece\u800c\u76f4\u89c2\u7684\u63d0\u4f9b\u7ed9\u8bbe\u8ba1\u8005\u8fdb\u884c\u5206\u6790 |---------------------------| | cycle simulator | |---------------------------| | | V |- when instruction fetched from memory |---------------------------| based on cycle |- when rename the instruction | instruction log | ------------------------|- when dispatch the instruction |---------------------------| |- when instruction oprands ready | a perfect designed log format |- when instruction be executed | make analyze script easy |- when instruction be commited | |- ....... any action you want to analyze | | |---------------------------------| | <------------------| a log analyze python script | | | | V | the script convert log to json | |-----------------------------| |---------------------------------| | instruction_actions.json | example: |-----------------------------| @0: FETCH: fetch0 inst imov_c(seq:1) core 0: 0x0000000000000000 imov_c r0,c0 | | | V will be convert to V |--------------------------------------------------------------------------------| |-----------------------------| | { | | show in chrome://tracing | | \"args\":{ | |-----------------------------| | \"info\":\"0x0000000000000000 (0x00000000c000001b) imov_c r0,c0\" | https://docs.google.com/ | }, | document/d/1CvAClvFfyA5R | \"cat\":\"imov_c(seq:1)\", | -PhYUmn5OOQtYMH4h6I0n | \"name\":\"imov_c(seq:1)\", | SsKchNAySU/preview | \"ph\":\"B\", | | \"pid\":\"fetch\", | | \"tid\":\"fetch0\", | | \"ts\":0 | | }, | | { | | \"args\":{ | | \"info\":\"0x0000000000000000 (0x00000000c000001b) imov_c r0,c0\" | | }, | | \"cat\":\"imov_c(seq:1)\", | | \"name\":\"imov_c(seq:1)\", | | \"ph\":\"E\", | | \"pid\":\"fetch\", | | \"tid\":\"fetch0\", | | \"ts\":1 | | }, | |--------------------------------------------------------------------------------| \u6027\u80fd\u7edf\u8ba1\u65b9\u6848 \u00b6 \u6307\u4ee4\u6d41\u5206\u6790\u53ea\u9700\u8981\u8fd0\u884c\u4e00\u8f6ecase\u5c31\u8fdb\u884c\u5206\u6790\u5373\u53ef\uff0c\u4f46\u6027\u80fd\u5206\u6790\u5c31\u9700\u8981\u6709\u591a\u8f6e\u6267\u884c\u673a\u5236 |-------------| change |-----------------------------| can config simulator params |- fetch width | | ---------> | simulator config file | --------------------------------|- buffer size | | |-----------------------------| |- commit width | | | |- l1 icache size | | | simulator load config file |- ......any params you want to test | | | | | V | python | run |-----------------------------| | script | ---------- | cycle simulator | | | |-----------------------------| | control | | | run | | | N | V | times | get |-----------------------------| example |- IPC | | <--------- | statistics result | ---------------|- CPI | | |-----------------------------| |- branch predict miss rate | | |- buffer use rate | | | | |-------------| | | after N times |---------------------------------| |--------------------> | python pandas show the result | |---------------------------------| \u6700\u7ec8\u603b\u7ed3 \u00b6 \u6700\u7ec8cycle\u7ea7\u6a21\u62df\u5668\u8fd8\u662f\u5931\u8d25\u4e86\uff0c\u6709\u5ba2\u89c2\u539f\u56e0\uff0c\u4e5f\u6709\u4e3b\u89c2\u539f\u56e0\u3002\u5bf9\u4e2a\u4eba\u6765\u8bb2\uff0c\u6536\u83b7\u662f\u660e\u786e\u4e86\u6700\u7ec8\u7684\u4e24\u4e2a\u65b9\u6848\u3002\u540c\u65f6\u4e5f\u6709\u4e00\u4e2a\u7591\u95ee\uff1a \u5f53\u6a21\u62df\u5668\u548cRTL\u540c\u65f6\u8fdb\u884c\u5f00\u53d1\u65f6(\u6211\u60f3\u8fd9\u79cd\u60c5\u51b5\u5bf9\u4e8e\u56fd\u5185\u76ee\u524d\u7684\u5f88\u591aIC\u521d\u521b\u516c\u53f8\u6765\u8bb2\u5f88\u5e38\u89c1\uff0c\u751a\u81f3\u6a21\u62df\u5668\u5f00\u53d1\u8981\u843d\u540e\u4e8eRTL\u5f00\u53d1),cycle\u7ea7 \u6a21\u62df\u5668\u5230\u5e95\u80fd\u5728\u9879\u76ee\u4e2d\u8d77\u5230\u600e\u6837\u7684\u4f5c\u7528\uff1f\u56e0\u4e3a\u4ece\u5f00\u53d1\u5468\u671f\u6765\u8bb2\uff0c\u5f88\u53ef\u80fd\u5f00\u53d1\u6a21\u62df\u5668\u7684\u65f6\u95f4\u548c\u5199RTL\u7684\u65f6\u95f4\u662f\u5dee\u4e0d\u591a\u7684\u3002(\u5c24\u5176\u662f\u6709\u4e00\u4e9b\u73b0\u6709 \u6a21\u62df\u5668\u6846\u67b6\u90fd\u6ca1\u6709\u5b9e\u73b0\u7684\u5fae\u67b6\u6784\u51fa\u73b0\u65f6)\u3002\u5982\u679c\u65f6\u949f\u7cbe\u786e\u6a21\u62df\u5668\u5f00\u53d1\u5468\u671f\u548cRTL\u5f00\u53d1\u5468\u671f\u76f8\u8fd1\uff0c\u90a3\u4e48\u6211\u8ba4\u4e3a\u65f6\u949f\u7cbe\u786e\u6a21\u62df\u5668\u5f00\u53d1\u5c31\u6ca1\u6709\u610f\u4e49\u3002 \u7528\u8f6f\u4ef6\u5b9e\u73b0\u786c\u4ef6\uff0c\u5982\u679c\u4e0d\u80fd\u4f53\u73b0\u51fa\u65f6\u95f4\u4f18\u52bf\uff0c\u90a3\u4e48\u4e00\u5207\u5c31\u6ca1\u6709\u4e86\u610f\u4e49\u3002\u8fd9\u4e0d\u662f\u8bf4\u4ec5\u4ec5simpleSim\u6216\u8005Gem5\u6ca1\u6709\u610f\u4e49\uff0csystemc\u4e5f\u540c\u6837\u6ca1\u6709\u610f\u4e49\u3002 \u5f53\u7136\uff0c\u5982\u679c\u80fd\u591f\u6709\u673a\u4f1a\u6784\u5efasystemc\uff0c\u6211\u4f1a\u975e\u5e38\u4e50\u610f\u3002","title":"\u518d\u8c08\u6a21\u62df\u5668"},{"location":"ic/simulator2.html#_1","text":"\u6700\u8fd1\u5728\u9879\u76ee\u4e2d\u4f7f\u7528simpleSim\u8fdb\u884c\u4e86\u4e00\u4e2a\u81ea\u7814CPU\u7684\u5f00\u53d1\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6709\u4e00\u4e9b\u60f3\u6cd5\u503c\u5f97\u8bb0\u5f55\u4e0b\u6765\uff0c\u6240\u4ee5\u53c8\u5199\u4e86\u8fd9\u7bc7\u6a21\u62df\u5668\u76f8\u5173\u7684\u6587\u6863","title":"\u518d\u8c08\u6a21\u62df\u5668"},{"location":"ic/simulator2.html#simplesim","text":"\u9009\u7528simpleSim\u8fd9\u4e2a\u6a21\u62df\u5668\u8fdb\u884c\u5f00\u53d1\u4e3b\u8981\u6709\u5982\u4e0b\u51e0\u70b9\u539f\u56e0\uff1a \u8fd9\u6b21\u7684CPU\u5f88\u591a\u7ed3\u6784\u90fd\u662f\u5176\u4ed6CPU\u6240\u4e0d\u5177\u6709\u7684\uff0c\u5e76\u4e14\u662f\u5168\u65b0\u7684\u81ea\u5b9a\u4e49\u6307\u4ee4\u96c6\u67b6\u6784\uff0c\u5f00\u53d1\u65f6\u95f4\u5f88\u7d27\u8feb\uff0c\u57fa\u4e8eGem5\u8fdb\u884c\u5f00\u53d1\uff0c\u5de5\u4f5c\u91cf\u5f88\u5927\uff0c\u4e00\u4eba\u6708\u5f88\u96be\u5b8c\u6210\u3002 \u5728\u9879\u76ee\u4e2d\u65e2\u8981\u5f00\u53d1\u529f\u80fd\u6a21\u62df\u5668\u53c8\u8981\u5f00\u53d1\u6027\u80fd\u5206\u6790\u6a21\u62df\u5668\u3002\u529f\u80fd\u6a21\u62df\u5668\u4f18\u5148\u7ea7\u5f88\u9ad8\uff0c\u6027\u80fd\u6a21\u62df\u5668\u4e0d\u662f\u5fc5\u9009\u9879\u3002 \u81ea\u8eab\u4e0d\u719f\u6089systemc simpleSim\u4ee3\u7801\u7b80\u5355\uff0c\u6307\u4ee4\u96c6\u62bd\u8c61\u7b80\u5355\uff0c\u529f\u80fd\u6a21\u62df\u548c\u6027\u80fd\u6a21\u62df\u53ef\u4ee5\u5171\u7528\u540c\u4e00\u5957\u6307\u4ee4\u96c6\uff0c\u5f00\u53d1\u5468\u671f\u9884\u4f30\u65f6\u95f4\u77ed \u57fa\u4e8e\u4ee5\u4e0a\u51e0\u70b9\u539f\u56e0\uff0c\u9009\u62e9\u4e86\u4f7f\u7528SimpleSim\u8fdb\u884c\u5f00\u53d1","title":"\u4e3a\u4ec0\u4e48\u4f7f\u7528simpleSim"},{"location":"ic/simulator2.html#_2","text":"simpleSim\u6846\u67b6\u7684\u4ee3\u7801\u91cf\u8f83\u5c0f\uff0c\u6574\u4e2a\u5f00\u53d1\u8fc7\u7a0b\u5927\u6982\u5206\u4e3a\u5982\u4e0b\u51e0\u6b65 |-------------------------------| | \u4e0b\u8f7d\u6e90\u7801\uff0c\u7f16\u8bd1\u6d4b\u8bd5\uff0c\u719f\u6089\u4f7f\u7528\u65b9\u5f0f | |-------------------------------| | V |-------------------------------| | \u5efa\u7acb\u672c\u5730gitlab\u4ed3\u5e93\uff0c\u4e0a\u4f20\u4ee3\u7801 | |-------------------------------| | V |- \u6307\u4ee4\u96c6\u7ba1\u7406\u5b50\u7cfb\u7edf(\u6307\u4ee4\u7f16\u7801,\u6307\u4ee4\u89e3\u7801,\u6307\u4ee4\u62bd\u8c61) |-------------------------------| \u6a21\u62df\u5668\u5b50\u7cfb\u7edf |- \u5185\u5b58\u7ba1\u7406\u5b50\u7cfb\u7edf | \u7ed3\u5408\u5b98\u65b9\u6587\u6863\uff0c\u719f\u6089\u6a21\u62df\u5668\u57fa\u672c\u7ed3\u6784 | ---------------------|- \u8fd0\u884c\u8c03\u5ea6\u7ba1\u7406\u5b50\u7cfb\u7edf(loop\u8fd8\u662f\u4e8b\u4ef6\u8c03\u5ea6\uff0c\u591a\u7ebf\u7a0b\u8fd8\u662f\u5355\u7ebf\u7a0b) | sim-safe sim-outorder | |- register file\u7ba1\u7406\u5b50\u7cfb\u7edf |-------------------------------| |- debug\uff0ctrace\u5b50\u7cfb\u7edf | V |--------------------------------| | \u5b8c\u6210\u5bf9sim-safe\u6574\u4e2a\u6a21\u62df\u8fc7\u7a0b\u7684\u719f\u6089 | |--------------------------------| | V |-------------------------------| | \u6784\u5efa\u65b0\u7684\u6307\u4ee4\u96c6 | |-------------------------------| | V |-------------------------------| | \u7b80\u5355\u9a8c\u8bc1\u6307\u4ee4\u6b63\u786e\u6027 | |-------------------------------| | V |- fetch,decode,dispatch,rename,execute,writeback,commit\u5404\u4e2a\u9636\u6bb5\u7684\u5b9e\u73b0 |-------------------------------| cycle simulator |- lsu\u7684\u5b9e\u73b0 | \u5206\u6790sim-outorder | ----------------------|- fu\u7684\u5b9e\u73b0 |-------------------------------| |- outoforder\u76f8\u5173\u5b9e\u73b0\uff0cRUU | |- \u5404\u9636\u6bb5\u7684\u53cd\u538b\u5b9e\u73b0 V |- \u6027\u80fd\u7edf\u8ba1\u529f\u80fd\u7684\u5b9e\u73b0 |--------------------------------| | \u57fa\u4e8e\u65b0\u6307\u4ee4\u96c6\u6d4b\u8bd5\u539f\u6709sim-outorder | |--------------------------------| | V |--------------------------------| | \u9010\u6b65\u4fee\u6539\u5fae\u67b6\u6784\uff0c\u9760\u8fd1\u8bbe\u8ba1\u65b9\u6848 | |--------------------------------|","title":"\u5f00\u53d1\u8fc7\u7a0b"},{"location":"ic/simulator2.html#_3","text":"\u5bf9\u4e8e\u719f\u6089\u4e00\u4e2a\u65b0\u6a21\u62df\u5668\u6846\u67b6\uff0c\u76ee\u524d\u89c9\u5f97\u6bd4\u8f83\u9ad8\u6548\u7684\u65b9\u5f0f\u5c31\u662f\uff1a \u5148\u642d\u5efa\u597d\u73af\u5883\uff0c\u8fd0\u884c\u51e0\u4e2acase\uff0c\u719f\u6089\u6a21\u62df\u5668\u4f7f\u7528\u65b9\u6cd5\u3002 \u7136\u540e\u7ed3\u5408\u76f8\u5173\u6587\u6863\uff0c\u68b3\u7406\u6bcf\u4e2a\u76ee\u5f55\u5927\u81f4\u5728\u505a\u4ec0\u4e48\u4e8b\u60c5\u3002\u8fd9\u65f6\u5019\u53ef\u80fd\u6682\u65f6\u4e0d\u80fd\u5168\u90e8\u68b3\u7406\u6e05\u695a\uff0c\u4e0d\u7740\u6025\uff0c\u5c3d\u53ef\u80fd\u7684\u53bb\u719f\u6089 \u642d\u5efa\u597d\u8c03\u8bd5\u73af\u5883\uff0c\u53ef\u4ee5\u4f7f\u7528vscode\u5d4c\u5165\u7684gdb,\u8c03\u8bd5\u6bd4\u8f83\u65b9\u4fbf\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u5927\u81f4\u6e05\u695a\u7a0b\u5e8f\u662f\u591a\u7ebf\u7a0b\u8fd8\u662f\u5355\u7ebf\u7a0b \u9010\u6b65\u7684\u719f\u6089\u6574\u4e2a\u6846\u67b6\u7684\u7ec4\u7ec7\u7ed3\u6784 \u9488\u5bf9\u4e00\u4e2a\u5c0f\u70b9\u8fdb\u884c\u5206\u6790\uff0c\u6bd4\u5982\u529f\u80fd\u6a21\u62df\u5668\u5c31\u53ef\u4ee5\u4ece\u6307\u4ee4\u89e3\u7801\u6267\u884c\u8fc7\u7a0b\u5165\u624b\u8fdb\u884c\u5206\u6790\uff0c\u5728\u5206\u6790\u5c0f\u70b9\u7684\u8fc7\u7a0b\u4e2d\u9010\u6b65\u6e05\u6670\u6574\u4e2a\u6846\u67b6\u7684\u7ed3\u6784\uff1b \u6027\u80fd\u6a21\u62df\u5668\u4f1a\u76f8\u5bf9\u590d\u6742\uff0c\u53ef\u4ee5\u4ecefetch\u9636\u6bb5\u8fdb\u884c\u5206\u6790\u3002 \u7531\u70b9\u6210\u9762\uff0c\u6269\u5927\u7406\u89e3\u8303\u56f4 \u5927\u81f4\u6e05\u695a\u6574\u4f53\u7ed3\u6784\uff0c\u7814\u7a76\u6e05\u695a\u4e00\u4e2a\u6a21\u5757\u540e\u518d\u8fdb\u884c\u6539\u52a8 \u6539\u52a8\u65f6\u5c3d\u91cf\u4fdd\u6301\u968f\u65f6\u53ef\u8fd0\u884c\uff0c\u5c0f\u6b65\u5feb\u8dd1\uff0c\u6539\u52a8\u540e\u7acb\u5373\u9a8c\u8bc1\uff0c\u968f\u65f6\u53efrelease","title":"\u8fc7\u7a0b\u603b\u7ed3"},{"location":"ic/simulator2.html#_4","text":"\u6700\u7ec8\uff0c\u529f\u80fd\u6a21\u62df\u5668\u6210\u529f\u5728\u8ba1\u5212\u65f6\u95f4\u4e4b\u524d\u7a33\u5b9a\uff0c\u6027\u80fd\u6a21\u62df\u5668\u80fd\u591f\u5927\u81f4\u8fdb\u884c\u6307\u4ee4\u6d41\u5206\u6790\uff0c\u4f46\u6ca1\u80fd\u5bf9\u9879\u76ee\u63d0\u4f9b\u6709\u7528\u5e2e\u52a9\u3002","title":"\u7ed3\u679c"},{"location":"ic/simulator2.html#_5","text":"\u529f\u80fd\u6a21\u62df\u5668\u662f\u6210\u529f\u7684\uff0c\u5728\u529f\u80fd\u6a21\u62df\u5668\u5bf9\u63a5\u8fc7\u7a0b\u4e2d\u6536\u83b7\u4e86\u65b0\u7684\u7ecf\u9a8c \u529f\u80fd\u6a21\u62df\u5668\u4e00\u822c\u662f\u4ee5.so\u7684\u65b9\u5f0f\u8fdb\u884crelease\u7684\uff0c\u8fd9\u662f\u56e0\u4e3aUVM\u9a8c\u8bc1\u65f6\uff0c\u5f80\u5f80\u662f\u628a\u529f\u80fd\u6a21\u62df\u5668\u4f5c\u4e3a\u5176\u4e00\u90e8\u5206\u8fdb\u884c\u96c6\u6210\u7684\uff0c\u8fd9\u65f6\u5019\uff0c\u52a8\u6001\u94fe\u63a5\u5e93(\u636e\u8bf4\u9759\u6001\u5e93\u5728\u96c6\u6210\u65f6\u4f1a\u6709\u5f88\u591a\u5751\uff1f)\u5c31\u663e\u5f97\u975e\u5e38\u65b9\u4fbf\u3002 \u540c\u65f6\uff0c\u505acosim\u9a8c\u8bc1\u65f6\uff0c\u4e00\u822c\u9700\u8981\u5b9e\u73b0step()\u63a5\u53e3\u3002(\u6709\u4e9b\u9a8c\u8bc1\u4f1a\u91c7\u7528dump\u6574\u4e2acase log\u7684\u65b9\u5f0f,\u4f46\u8fd9\u4e2a\u4e0d\u9002\u5408\u5927\u578bcase\u7684\u9a8c\u8bc1\uff0c\u6bd4\u5982\u4e00\u4e2acase\u6709\u51e0\u767e\u4e07\u6761\u6307\u4ee4) \u529f\u80fd\u6a21\u62df\u5668\u7684\u91cd\u70b9\u5728\u4e8e\u6307\u4ee4\u7f16\u89e3\u7801\u53ca\u884c\u4e3a\u5b9e\u73b0\uff0c\u6307\u4ee4\u5b9e\u73b0\u53c8\u6709\u51e0\u4e2a\u91cd\u70b9\uff1a \u7b26\u53f7\u6269\u5c55\u95ee\u9898\uff0c\u8fd9\u4e2a\u8981\u4fdd\u6301\u601d\u8def\u6e05\u6670 \u6d6e\u70b9\u5904\u7406\u95ee\u9898\uff0c\u6d6e\u70b9\u7684\u6444\u5165\u7cbe\u5ea6(fenv.h)\u4ee5\u53ca\u662f\u5426\u9700\u8981\u4f7f\u7528softfloat \u529f\u80fd\u6a21\u62df\u5668\u5f53\u7136\u662f\u8d8a\u5feb\u8d8a\u597d\uff0c\u56e0\u6b64\u597d\u591a\u529f\u80fd\u6a21\u62df\u5668\u5b9e\u73b0\u4e00\u4e9bcache\u6765\u5e2e\u52a9\u5feb\u901f\u6267\u884c\uff0c\u6bd4\u5982\u6307\u4ee4cache\u6765\u7f29\u77ed\u89e3\u7801\u65f6\u95f4\uff0ctlb\u5730\u5740cache\u6765\u7f29\u77ed\u9875\u8868\u67e5\u627e\u65f6\u95f4\u3002\u5f53\u7136\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u4f18\u5316\u624b\u6bb5\uff0c\u6bd4\u5982\u91c7\u53d6\u591a\u7ebf\u7a0b","title":"\u529f\u80fd\u6a21\u62df\u5668\u5b9e\u73b0\u603b\u7ed3"},{"location":"ic/simulator2.html#_6","text":"\u6027\u80fd\u6a21\u62df\u5668\u4ece\u9879\u76ee\u4e0a\u6765\u8bb2\u662f\u5931\u8d25\u7684\uff0c\u56e0\u4e3a\u6ca1\u6709\u7ed9\u9879\u76ee\u5e26\u6765\u4ec0\u4e48\u6536\u76ca\u3002\u6211\u89c9\u5f97\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u4e2a\u539f\u56e0\uff1a \u5f00\u53d1\u529f\u80fd\u6a21\u62df\u5668\u5360\u7528\u4e86\u4e00\u90e8\u5206\u65f6\u95f4 \u6027\u80fd\u6a21\u62df\u5668\u548cRTL\u662f\u540c\u65f6\u8fdb\u884c\u5f00\u53d1\u7684\uff0c\u4e24\u8005\u7684\u5468\u671f\u57fa\u672c\u4fdd\u6301\u4e00\u81f4\uff0c\u751a\u81f3\u6027\u80fd\u6a21\u62df\u5668\u7684\u5468\u671f\u8fd8\u66f4\u957f\u4e00\u4e9b\u3002RTL\u8fdb\u5165\u9a8c\u8bc1\u9636\u6bb5\uff0c\u6027\u80fd\u6a21\u62df\u5668\u8fd8\u4e0d\u80fd\u7ed9\u51fa\u4e00\u4e9b\u53c2\u8003\u6570\u636e \u4e2a\u4eba\u5bf9\u4e8e\u6027\u80fd\u6a21\u62df\u5668\u5f00\u53d1\u7684\u89c4\u5212\u5b58\u5728\u95ee\u9898\uff0c\u5728\u4fee\u6539\u67d0\u4e9b\u7ed3\u6784\u65f6\u6ca1\u80fd\u505a\u5230\u65f6\u523b\u4fdd\u6301\u4ee3\u7801\u53ef\u6267\u884c\u3002\u6700\u7ec8\u6536\u655b\u901f\u5ea6\u6bd4\u8f83\u6162\u3002 \u4ee3\u7801\u601d\u8def\u4e0a\u5b58\u5728\u4e00\u4e9b\u95ee\u9898\uff0c\u5f53\u65f6\u60f3\u7740\u5fae\u7ed3\u6784\u5747\u662f\u81ea\u5df1\u8fdb\u884c\u8bbe\u8ba1\u7684\uff0c\u8981\u60f3\u6bd4\u8f83\u7cbe\u786e\u7684\u6a21\u62df\uff0c\u5c31\u9700\u8981\u5bf9\u4e00\u90e8\u5206\u5fae\u7ed3\u6784\u8fdb\u884c\u5efa\u6a21\uff0c\u6ca1\u6cd5\u4f7f\u7528\u73b0\u6709\u5fae\u7ed3\u6784\u3002\u8fd9\u79cd\u601d\u8def\u6ce8\u5b9a\u5468\u671f\u4f1a\u6bd4\u8f83\u957f\uff0c\u6536\u655b\u901f\u5ea6\u4f1a\u6bd4\u8f83\u6162\u3002 \u5982\u679c\u80fd\u591f\u76f4\u63a5\u5728\u539f\u5148\u5fae\u7ed3\u6784\u57fa\u7840\u4e0a\u8fdb\u884c\u7a0d\u5fae\u53d8\u52a8\uff0c\u4ee5\u8fbe\u5230\u57fa\u672c\u62df\u5408\uff0c\u90a3\u4e48\u5b9e\u73b0\u5468\u671f\u5e94\u8be5\u4f1a\u6709\u6240\u7f29\u77ed\uff0c\u6536\u655b\u901f\u5ea6\u4e5f\u4f1a\u5feb\u5f88\u591a\u3002 \u6027\u80fd\u6a21\u62df\u5668\u7684\u7edf\u8ba1\u5f88\u91cd\u8981\uff0csimpleSim\u672c\u8eab\u5b9e\u73b0\u4e86\u8ba1\u6570\u5668\u6846\u67b6\uff0c\u80fd\u591f\u7edf\u8ba1\u4e00\u4e9b\u60f3\u8981\u7684\u6570\u636e\u3002\u53e6\u5916\uff0c\u6211\u63a2\u7d22\u51fa\u4e00\u5957\u6027\u80fd\u6a21\u62df\u5668\u6307\u4ee4\u6548\u7387\u5206\u6790\u65b9\u6848\uff0c\u8fd9\u79cd\u65b9\u5f0f\u5bf9\u4e8e\u5206\u6790\u6027\u80fd\u6709\u6bd4\u8f83\u76f4\u89c2\u7684\u5e2e\u52a9\u3002","title":"\u6027\u80fd\u6a21\u62df\u5668\u603b\u7ed3"},{"location":"ic/simulator2.html#_7","text":"\u65b9\u6848\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u662f\u6307\u4ee4\u6d41\uff0c\u4e00\u90e8\u5206\u662f\u6027\u80fd\u7edf\u8ba1","title":"\u57fa\u4e8e\u6a21\u62df\u5668\u7684\u5904\u7406\u5668\u6027\u80fd\u5206\u6790\u65b9\u6848"},{"location":"ic/simulator2.html#_8","text":"\u6307\u4ee4\u6d41\u5206\u6790\u65b9\u6848\u7684\u6838\u5fc3\u5c31\u662f\u8ddf\u8e2a\u6bcf\u4e00\u6761\u6307\u4ee4\u5728\u5404\u4e2a\u6a21\u5757\u548cstage\u4e2d\u6d41\u52a8\u7684\u60c5\u51b5\uff0c\u5c06\u5176\u56fe\u8868\u5316\uff0c\u4ece\u800c\u76f4\u89c2\u7684\u63d0\u4f9b\u7ed9\u8bbe\u8ba1\u8005\u8fdb\u884c\u5206\u6790 |---------------------------| | cycle simulator | |---------------------------| | | V |- when instruction fetched from memory |---------------------------| based on cycle |- when rename the instruction | instruction log | ------------------------|- when dispatch the instruction |---------------------------| |- when instruction oprands ready | a perfect designed log format |- when instruction be executed | make analyze script easy |- when instruction be commited | |- ....... any action you want to analyze | | |---------------------------------| | <------------------| a log analyze python script | | | | V | the script convert log to json | |-----------------------------| |---------------------------------| | instruction_actions.json | example: |-----------------------------| @0: FETCH: fetch0 inst imov_c(seq:1) core 0: 0x0000000000000000 imov_c r0,c0 | | | V will be convert to V |--------------------------------------------------------------------------------| |-----------------------------| | { | | show in chrome://tracing | | \"args\":{ | |-----------------------------| | \"info\":\"0x0000000000000000 (0x00000000c000001b) imov_c r0,c0\" | https://docs.google.com/ | }, | document/d/1CvAClvFfyA5R | \"cat\":\"imov_c(seq:1)\", | -PhYUmn5OOQtYMH4h6I0n | \"name\":\"imov_c(seq:1)\", | SsKchNAySU/preview | \"ph\":\"B\", | | \"pid\":\"fetch\", | | \"tid\":\"fetch0\", | | \"ts\":0 | | }, | | { | | \"args\":{ | | \"info\":\"0x0000000000000000 (0x00000000c000001b) imov_c r0,c0\" | | }, | | \"cat\":\"imov_c(seq:1)\", | | \"name\":\"imov_c(seq:1)\", | | \"ph\":\"E\", | | \"pid\":\"fetch\", | | \"tid\":\"fetch0\", | | \"ts\":1 | | }, | |--------------------------------------------------------------------------------|","title":"\u6307\u4ee4\u6d41\u5206\u6790\u65b9\u6848"},{"location":"ic/simulator2.html#_9","text":"\u6307\u4ee4\u6d41\u5206\u6790\u53ea\u9700\u8981\u8fd0\u884c\u4e00\u8f6ecase\u5c31\u8fdb\u884c\u5206\u6790\u5373\u53ef\uff0c\u4f46\u6027\u80fd\u5206\u6790\u5c31\u9700\u8981\u6709\u591a\u8f6e\u6267\u884c\u673a\u5236 |-------------| change |-----------------------------| can config simulator params |- fetch width | | ---------> | simulator config file | --------------------------------|- buffer size | | |-----------------------------| |- commit width | | | |- l1 icache size | | | simulator load config file |- ......any params you want to test | | | | | V | python | run |-----------------------------| | script | ---------- | cycle simulator | | | |-----------------------------| | control | | | run | | | N | V | times | get |-----------------------------| example |- IPC | | <--------- | statistics result | ---------------|- CPI | | |-----------------------------| |- branch predict miss rate | | |- buffer use rate | | | | |-------------| | | after N times |---------------------------------| |--------------------> | python pandas show the result | |---------------------------------|","title":"\u6027\u80fd\u7edf\u8ba1\u65b9\u6848"},{"location":"ic/simulator2.html#_10","text":"\u6700\u7ec8cycle\u7ea7\u6a21\u62df\u5668\u8fd8\u662f\u5931\u8d25\u4e86\uff0c\u6709\u5ba2\u89c2\u539f\u56e0\uff0c\u4e5f\u6709\u4e3b\u89c2\u539f\u56e0\u3002\u5bf9\u4e2a\u4eba\u6765\u8bb2\uff0c\u6536\u83b7\u662f\u660e\u786e\u4e86\u6700\u7ec8\u7684\u4e24\u4e2a\u65b9\u6848\u3002\u540c\u65f6\u4e5f\u6709\u4e00\u4e2a\u7591\u95ee\uff1a \u5f53\u6a21\u62df\u5668\u548cRTL\u540c\u65f6\u8fdb\u884c\u5f00\u53d1\u65f6(\u6211\u60f3\u8fd9\u79cd\u60c5\u51b5\u5bf9\u4e8e\u56fd\u5185\u76ee\u524d\u7684\u5f88\u591aIC\u521d\u521b\u516c\u53f8\u6765\u8bb2\u5f88\u5e38\u89c1\uff0c\u751a\u81f3\u6a21\u62df\u5668\u5f00\u53d1\u8981\u843d\u540e\u4e8eRTL\u5f00\u53d1),cycle\u7ea7 \u6a21\u62df\u5668\u5230\u5e95\u80fd\u5728\u9879\u76ee\u4e2d\u8d77\u5230\u600e\u6837\u7684\u4f5c\u7528\uff1f\u56e0\u4e3a\u4ece\u5f00\u53d1\u5468\u671f\u6765\u8bb2\uff0c\u5f88\u53ef\u80fd\u5f00\u53d1\u6a21\u62df\u5668\u7684\u65f6\u95f4\u548c\u5199RTL\u7684\u65f6\u95f4\u662f\u5dee\u4e0d\u591a\u7684\u3002(\u5c24\u5176\u662f\u6709\u4e00\u4e9b\u73b0\u6709 \u6a21\u62df\u5668\u6846\u67b6\u90fd\u6ca1\u6709\u5b9e\u73b0\u7684\u5fae\u67b6\u6784\u51fa\u73b0\u65f6)\u3002\u5982\u679c\u65f6\u949f\u7cbe\u786e\u6a21\u62df\u5668\u5f00\u53d1\u5468\u671f\u548cRTL\u5f00\u53d1\u5468\u671f\u76f8\u8fd1\uff0c\u90a3\u4e48\u6211\u8ba4\u4e3a\u65f6\u949f\u7cbe\u786e\u6a21\u62df\u5668\u5f00\u53d1\u5c31\u6ca1\u6709\u610f\u4e49\u3002 \u7528\u8f6f\u4ef6\u5b9e\u73b0\u786c\u4ef6\uff0c\u5982\u679c\u4e0d\u80fd\u4f53\u73b0\u51fa\u65f6\u95f4\u4f18\u52bf\uff0c\u90a3\u4e48\u4e00\u5207\u5c31\u6ca1\u6709\u4e86\u610f\u4e49\u3002\u8fd9\u4e0d\u662f\u8bf4\u4ec5\u4ec5simpleSim\u6216\u8005Gem5\u6ca1\u6709\u610f\u4e49\uff0csystemc\u4e5f\u540c\u6837\u6ca1\u6709\u610f\u4e49\u3002 \u5f53\u7136\uff0c\u5982\u679c\u80fd\u591f\u6709\u673a\u4f1a\u6784\u5efasystemc\uff0c\u6211\u4f1a\u975e\u5e38\u4e50\u610f\u3002","title":"\u6700\u7ec8\u603b\u7ed3"},{"location":"ic/tlm.html","text":"TLM \u00b6","title":"TLM"},{"location":"ic/tlm.html#tlm","text":"","title":"TLM"},{"location":"ic/usb.html","text":"USB \u00b6","title":"USB"},{"location":"ic/usb.html#usb","text":"","title":"USB"},{"location":"linux/arm-linux-kmodule-load.html","text":"arm linux \u5185\u6838\u6a21\u5757\u52a0\u8f7d\u8fc7\u7a0b\u8be6\u89e3 \u00b6 arm linux \u5185\u6838\u6a21\u5757\u52a0\u8f7d\u8fc7\u7a0b\u8be6\u89e3 \u57fa\u7840\u73af\u5883 \u53c2\u8003\u8d44\u6599 what is ko linux module \u57fa\u672c\u64cd\u4f5c ELF of ko \u52a0\u8f7d\u8fc7\u7a0b \u4ece\u5185\u5b58\u9759\u6001\u89c6\u56fe\u770b\u6a21\u5757\u52a0\u8f7d \u7b80\u8981\u52a0\u8f7d\u6d41\u7a0b\u56fe \u8be6\u7ec6\u52a0\u8f7d\u8fc7\u7a0b \u57fa\u7840\u73af\u5883 \u00b6 kernel version\uff1a3.10.70 ARCH\uff1aarm \u53c2\u8003\u8d44\u6599 \u00b6 \u300a\u6df1\u5165Linux\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u5185\u6838\u673a\u5236\u300b \u300alinux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3\u300b http://www.cnblogs.com/xmphoenix/archive/2011/10/23/2221879.html http://www.cnblogs.com/LittleHann/p/3920387.html http://www.cnblogs.com/LittleHann/p/3871092.html what is ko \u00b6 Kernel modules are small pieces of compiled code which can be inserted in the running kernel, rather than being permanently built into the kernel . ko\u6587\u4ef6\u5728\u6570\u636e\u7ec4\u7ec7\u5f62\u5f0f\u4e0a\u662fELF(Excutable And Linking Format)\u683c\u5f0f\uff0c\u662f\u4e00\u79cd\u666e\u901a\u7684\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u3002 linux module \u57fa\u672c\u64cd\u4f5c \u00b6 busybox \u4e2d\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7684\u76f8\u5173\u7684\u64cd\u4f5c\u5de5\u5177 insmod \u5c06\u6a21\u5757\u52a0\u8f7d\u5230\u5185\u6838\u4e2d modprobe \u5c06\u6a21\u5757\u52a0\u8f7d\u5230\u5185\u6838\u4e2d\u5e76\u4e14\u81ea\u52a8\u5904\u7406\u6a21\u5757\u95f4\u4f9d\u8d56\u5173\u7cfb lsmod \u5217\u51fa\u52a0\u8f7d\u5230\u5185\u6838\u4e2d\u7684\u6240\u6709\u6a21\u5757 depmod \u66f4\u65b0\u6a21\u5757\u95f4\u4f9d\u8d56\u5173\u7cfb rmmod \u79fb\u9664\u6a21\u5757 modinfo \u67e5\u770b\u6a21\u5757\u4fe1\u606f ELF of ko \u00b6 \u4e3a\u4e86\u5e2e\u52a9\u66f4\u597d\u7684\u7406\u89e3\u6a21\u5757\u7b26\u53f7\u5bfc\u51fa\uff0c\u91cd\u5b9a\u5411\u7b49\u7ec6\u8282\uff0c\u6709\u5fc5\u8981\u5728\u8fd9\u91cc\u5bf9ELF\u6587\u4ef6\u505a\u4e00\u4e9b\u4ecb\u7ecd\uff0c \u4e0b\u9762\u7684ELF\u6587\u4ef6\u683c\u5f0f\u662fKO\u6587\u4ef6\u7684\u6620\u50cf\u89c6\u56fe\u3002 \u4f7f\u7528 readelf \u5de5\u5177\u53ef\u4ee5\u67e5\u770belf\u6587\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f \u8bfb\u53d6ko\u6587\u4ef6\u7684ELF\u5934,\u6211\u4eec\u53ef\u4ee5\u770b\u5230magic, \u76ee\u6807cpu\u67b6\u6784\uff0c\u7c7b\u578b\uff0c\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u4fe1\u606f,\u56e0\u4e3a\u662fKO\u6587\u4ef6\uff0c\u6240\u4ee5 \u7a0b\u5e8f\u5934\u8868\u957f\u5ea6\u4e3a0\uff0c\u53ea\u6709\u8282\u533a\u5934\u8868 readelf -h kdbg.ko ELF Header: Magic: 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 Class: ELF32 Data: 2's complement, little endian Version: 1 (current) OS/ABI: UNIX - System V ABI Version: 0 Type: REL (Relocatable file) Machine: ARM Version: 0x1 Entry point address: 0x0 Start of program headers: 0 (bytes into file) Start of section headers: 56788 (bytes into file) Flags: 0x5000000, Version5 EABI Size of this header: 52 (bytes) Size of program headers: 0 (bytes) Number of program headers: 0 Size of section headers: 40 (bytes) Number of section headers: 47 Section header string table index: 44 \u8bfb\u53d6\u8282\u533a\u5934\u90e8\u8868 readelf -S kdbg.ko There are 47 section headers, starting at offset 0xddd4: Section Headers: [Nr] Name Type Addr Off Size ES Flg Lk Inf Al [ 0] NULL 00000000 000000 000000 00 0 0 0 [ 1] .text PROGBITS 00000000 000034 000794 00 AX 0 0 4 [ 2] .rel.text REL 00000000 00e52c 000218 08 45 1 4 [ 3] .init.text PROGBITS 00000000 0007c8 0000c4 00 AX 0 0 4 [ 4] .rel.init.text REL 00000000 00e744 000050 08 45 3 4 [ 5] .exit.text PROGBITS 00000000 00088c 000038 00 AX 0 0 4 [ 6] .rel.exit.text REL 00000000 00e794 000018 08 45 5 4 [ 7] .note.gnu.build-i NOTE 00000000 0008c4 000024 00 A 0 0 4 [ 8] __ksymtab PROGBITS 00000024 0008e8 000008 00 A 0 0 4 [ 9] .rel__ksymtab REL 00000000 00e7ac 000010 08 45 8 4 [10] .ARM.extab PROGBITS 00000000 0008f0 000018 00 A 0 0 4 [11] .ARM.exidx ARM_EXIDX 00000000 000908 000080 00 AL 1 0 4 [12] .rel.ARM.exidx REL 00000000 00e7bc 0000a0 08 45 11 4 [13] .ARM.extab.init.t PROGBITS 00000000 000988 000000 00 A 0 0 1 [14] .ARM.exidx.init.t ARM_EXIDX 00000000 000988 000008 00 AL 3 0 4 [15] .rel.ARM.exidx.in REL 00000000 00e85c 000010 08 45 14 4 [16] .ARM.extab.exit.t PROGBITS 00000000 000990 000000 00 A 0 0 1 [17] .ARM.exidx.exit.t ARM_EXIDX 00000000 000990 000008 00 AL 5 0 4 [18] .rel.ARM.exidx.ex REL 00000000 00e86c 000010 08 45 17 4 [19] .modinfo PROGBITS 00000000 000998 00007c 00 A 0 0 4 [20] __ksymtab_strings PROGBITS 00000000 000a14 00000f 00 A 0 0 1 [21] .rodata.str1.4 PROGBITS 00000000 000a24 000250 01 AMS 0 0 4 [22] .data PROGBITS 00000000 000c74 000074 00 WA 0 0 4 [23] .rel.data REL 00000000 00e87c 000028 08 45 22 4 [24] .gnu.linkonce.thi PROGBITS 00000000 000ce8 000158 00 WA 0 0 4 [25] .rel.gnu.linkonce REL 00000000 00e8a4 000010 08 45 24 4 [26] .bss NOBITS 00000000 000e40 00003c 00 WA 0 0 4 [27] .debug_frame PROGBITS 00000000 000e40 0001e0 00 0 0 4 [28] .rel.debug_frame REL 00000000 00e8b4 000120 08 45 27 4 [29] .debug_info PROGBITS 00000000 001020 0073e4 00 0 0 1 [30] .rel.debug_info REL 00000000 00e9d4 003510 08 45 29 4 [31] .debug_abbrev PROGBITS 00000000 008404 000742 00 0 0 1 [32] .debug_loc PROGBITS 00000000 008b46 000630 00 0 0 1 [33] .rel.debug_loc REL 00000000 011ee4 000680 08 45 32 4 [34] .debug_aranges PROGBITS 00000000 009176 000030 00 0 0 1 [35] .rel.debug_arange REL 00000000 012564 000020 08 45 34 4 [36] .debug_ranges PROGBITS 00000000 0091a6 000088 00 0 0 1 [37] .rel.debug_ranges REL 00000000 012584 0000c0 08 45 36 4 [38] .debug_line PROGBITS 00000000 00922e 000997 00 0 0 1 [39] .rel.debug_line REL 00000000 012644 000018 08 45 38 4 [40] .debug_str PROGBITS 00000000 009bc5 003f70 01 MS 0 0 1 [41] .comment PROGBITS 00000000 00db35 000094 01 MS 0 0 1 [42] .note.GNU-stack PROGBITS 00000000 00dbc9 000000 00 0 0 1 [43] .ARM.attributes ARM_ATTRIBUTES 00000000 00dbc9 000031 00 0 0 1 [44] .shstrtab STRTAB 00000000 00dbfa 0001d8 00 0 0 1 [45] .symtab SYMTAB 00000000 01265c 0007b0 10 46 81 4 [46] .strtab STRTAB 00000000 012e0c 0002e4 00 0 0 1 Key to Flags: W (write), A (alloc), X (execute), M (merge), S (strings) I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown) O (extra OS processing required) o (OS specific), p (processor specific) \u8fd9\u91cc\u5bf9\u90e8\u5206\u8282\u533a\u505a\u4e00\u4e9b\u8bf4\u660e .rel.xxxxx \u5bf9\u5e94xxxxx section\u7684relocate\u8868\uff0c\u7528\u4e8e\u7b26\u53f7\u91cd\u5b9a\u4f4d,\u6bd4\u5982\u8bf4 .rel.text \u5c31\u662f .text \u7684\u91cd\u5b9a\u5411\u8868\u6240\u5728\u7684\u8282\u533a readelf -r kdbg.ko Relocation section '.rel.text' at offset 0xe52c contains 67 entries: Offset Info Type Sym.Value Sym. Name 00000050 00000e02 R_ARM_ABS32 00000000 .rodata.str1.4 00000054 00005802 R_ARM_ABS32 00000000 memcpy 00000058 00006902 R_ARM_ABS32 00000000 printk 0000005c 00000e02 R_ARM_ABS32 00000000 .rodata.str1.4 00000120 00006c02 R_ARM_ABS32 00000000 _ctype 00000124 00007502 R_ARM_ABS32 00000000 strlen 000001c8 00007502 R_ARM_ABS32 00000000 strlen 000001cc 00006402 R_ARM_ABS32 00000000 match_int 000001d0 00006c02 R_ARM_ABS32 00000000 _ctype 000001d4 00007302 R_ARM_ABS32 00000000 match_hex 000001fc 0000521c R_ARM_CALL 00000128 parse_interger 0000023c 00006302 R_ARM_ABS32 00000000 kallsyms_lookup_name 00000290 0000741c R_ARM_CALL 00000060 str_trim 0000029c 0000521c R_ARM_CALL 00000128 parse_interger .symtab \u6a21\u5757\u4e2d\u6240\u6709\u7684\u7b26\u53f7\u8bb0\u5f55\u90fd\u5728\u8fd9\u91cc\u9762 readelf -s ssp.ko | more Symbol table '.symtab' contains 53529 entries: Num: Value Size Type Bind Vis Ndx Name 0: 00000000 0 NOTYPE LOCAL DEFAULT UND 1: 00000000 0 SECTION LOCAL DEFAULT 1 2: 00000000 0 SECTION LOCAL DEFAULT 3 3: 00000000 0 SECTION LOCAL DEFAULT 5 4: 00000000 0 SECTION LOCAL DEFAULT 7 5: 00000000 0 SECTION LOCAL DEFAULT 8 6: 00000000 0 SECTION LOCAL DEFAULT 10 7: 00000000 0 SECTION LOCAL DEFAULT 13 8: 00000000 0 SECTION LOCAL DEFAULT 23 9: 00000000 0 SECTION LOCAL DEFAULT 24 10: 00000000 0 SECTION LOCAL DEFAULT 31 11: 00000000 0 NOTYPE LOCAL DEFAULT 1 $a 12: 00000088 0 NOTYPE LOCAL DEFAULT 1 $d 13: 00000000 0 NOTYPE LOCAL DEFAULT 28 $d 14: 00000098 0 NOTYPE LOCAL DEFAULT 1 $a 15: 00000150 0 NOTYPE LOCAL DEFAULT 1 $d 16: 00000164 0 NOTYPE LOCAL DEFAULT 1 $a .shstrtab \u8282\u533a\u540d\u79f0\u5b57\u7b26\u4e32\u8868\uff0c\u6240\u6709\u7684\u8282\u533a\u540d\u79f0\u5b57\u7b26\u4e32\u90fd\u653e\u5728\u8fd9\u91cc readelf -p 35 ssp.ko String dump of section '.shstrtab': [ 1] .symtab [ 9] .strtab [ 11] .shstrtab [ 1b] .rel.text [ 25] .rel.text.unlikely [ 38] .rel.init.text [ 47] .rel.rodata [ 53] .rodata.str1.4 [ 62] .rel.pv_table [ 70] .ARM.extab.text.unlikely [ 89] .rel.ARM.exidx.text.unlikely [ a6] .ARM.extab.init.text [ bb] .rel.ARM.exidx.init.text [ d4] .ARM.extab.exit.text [ e9] .rel.ARM.exidx.exit.text [ 102] .modinfo [ 10b] .ARM.extab [ 116] .rel.data [ 120] .rel.gnu.linkonce.this_module [ 13e] .rel.ARM.exidx [ 14d] .note.gnu.build-id [ 160] .bss [ 165] .comment [ 16e] .note.GNU-stack [ 17e] .ARM.attributes .strtab \u7b26\u53f7\u540d\u79f0\u5b57\u7b26\u4e32\u8868\uff0c\u8fd9\u91cc\u8bb0\u5f55\u4e86\u6240\u6709\u7684\u7b26\u53f7\u7684\u540d\u79f0\u5b57\u7b26\u4e32,\u5176\u683c\u5f0f\u5373\u5b57\u7b26\u4e32\u8868\u683c\u5f0f\uff0c\u548c\u8282\u533a\u5934\u90e8\u540d\u79f0\u5b57\u7b26\u4e32\u8868\u683c\u5f0f\u76f8\u540c\u3002 .gnu.linkonce.this_module struct module \u5b9e\u4f8b\u6240\u5728\u7684\u8282\u533a \u52a0\u8f7d\u8fc7\u7a0b \u00b6 \u4f7f\u7528insmod\u8fd9\u79cd\u547d\u4ee4\u6765\u52a0\u8f7d\u5185\u6838\u6a21\u5757\u65f6\uff0cinsmod\u4f1a\u5229\u7528\u6587\u4ef6\u7cfb\u7edf\u7684\u63a5\u53e3\u5148\u5c06\u6a21\u5757\u52a0\u8f7d\u5230\u7528\u6237\u7a7a\u95f4\u7684\u4e00\u6bb5\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528sys_init_module()\u6765\u6267\u884c\u5177\u4f53\u7684\u6a21\u5757\u52a0\u8f7d\u52a8\u4f5c\u3002\u6211\u4eec\u7684\u52a0\u8f7d\u8fc7\u7a0b\u5206\u6790\u4e5f\u5c31\u662f\u5bf9sys_init_module\u7684\u5206\u6790\u3002\u5728\u5bf9\u5177\u4f53\u4ee3\u7801\u7684\u5206\u6790\u4e2d\uff0c\u53bb\u6389\u4e86\u90e8\u5206\u4e0d\u91cd\u8981\u7684\u64cd\u4f5c\uff0c\u4e00\u662f\u51cf\u5c11\u4ee3\u7801\u957f\u5ea6\uff0c\u4e8c\u662f\u5c06\u5173\u6ce8\u7684\u91cd\u70b9\u653e\u5728\u4e3b\u8981\u52a0\u8f7d\u6d41\u7a0b\u4e0a\u3002\u4e3a\u4e86\u5148\u7ed9\u51fa\u4e00\u4e2a\u76f4\u89c2\u7684\u8ba4\u8bc6\uff0c\u5148\u4ece\u5185\u5b58\u9759\u6001\u89c6\u56fe\u7684\u89d2\u5ea6\u6765\u8bb2\u8ff0ko\u5728\u5185\u5b58\u4e2d\u7684\u642c\u79fb\u8fc7\u7a0b\uff0c\u7136\u540e\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u6d41\u7a0b\u56fe\u6765\u8bb2\u8ff0\u5927\u81f4\u7684\u8f6f\u4ef6\u6d41\u7a0b\uff0c\u6700\u540e\u9488\u5bf9\u5177\u4f53\u4ee3\u7801\u6765\u8bb2\u8ff0\u52a0\u8f7d\u8fc7\u7a0b\uff0c\u5728\u7ed3\u5408\u5177\u4f53\u4ee3\u7801\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5728\u7ed3\u5408\u4ee3\u7801\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9075\u5faa\u4ee3\u7801\u6267\u884c\u7684\u987a\u5e8f\uff0c\u4f46\u53ea\u4f1a\u5217\u51fa\u90e8\u5206\u7ec6\u8282\u5904\u7406\u7684\u4ee3\u7801\uff0c\u5bf9\u4e8e\u6574\u4f53\u7684\u51fd\u6570\u8c03\u7528\u6d41\u7a0b\u5728\u6587\u6863\u4e2d\u4e0d\u518d\u8d58\u8ff0\uff0c\u5927\u5bb6\u53ef\u4ee5\u76f4\u63a5\u53bb\u770b\u6e90\u7801\u3002 \u4ece\u5185\u5b58\u9759\u6001\u89c6\u56fe\u770b\u6a21\u5757\u52a0\u8f7d \u00b6 \u4e3a\u4e86\u66f4\u5bb9\u6613\u8bb2\u660e\u767d\u5185\u6838\u6a21\u5757\u7684\u52a0\u8f7d\u6d41\u7a0b\uff0c\u8fd9\u91cc\u4ece\u5185\u5b58\u9759\u6001\u89c6\u56fe\u7684\u89d2\u5ea6\u7c97\u7565\u7684\u6765\u8bb2\u8ff0ko\u5728\u5185\u5b58\u4e2d\u7684\u642c\u79fb\u8fc7\u7a0b\uff0c\u8fd9\u6837\u53ef\u80fd\u4f1a\u6709\u4e00\u4e2a\u76f4\u89c2\u7684\u611f\u53d7\uff0c arm virtual memory layout \u9996\u5148insmod\u4f1a\u901a\u8fc7\u6587\u4ef6\u7cfb\u7edf\u5c06ko\u8bfb\u5230 user space\u7684\u4e00\u5757\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u8c03\u7528\u7cfb\u7edf\u8c03\u7528sys_init_module,\u8fd9\u65f6\uff0c\u5185\u6838\u5728vmalloc\u533a\u5206\u914d\u4e0eko\u6587\u4ef6\u5927\u5c0f\u76f8\u540c\u7684\u5185\u5b58\u6765\u6682\u5b58ko\u6587\u4ef6\uff0c\u6682\u5b58\u597d\u4e4b\u540e\u89e3\u6790ko\u6587\u4ef6\uff0c\u5c06\u6587\u4ef6\u4e2d\u7684\u5404\u4e2asection\u5206\u914d\u5230init \u6bb5\u548ccore \u6bb5\uff0c\u5728modules\u533a\u4e3ainit\u6bb5\u548ccore\u6bb5\u5206\u914d\u5185\u5b58\uff0c\u5e76\u628a\u5bf9\u5e94\u7684section copy\u5230modules\u533a\u6700\u7ec8\u7684\u8fd0\u884c\u5730\u5740\uff0c\u7ecf\u8fc7relocate\u51fd\u6570\u5730\u5740\u7b49\u64cd\u4f5c\u540e\uff0c\u5c31\u53ef\u4ee5\u6267\u884cko\u7684init\u64cd\u4f5c\u4e86\uff0c\u8fd9\u6837\u4e00\u4e2ako\u7684\u52a0\u8f7d\u6d41\u7a0b\u5c31\u7ed3\u675f\u4e86\uff0c\u540c\u65f6\uff0cinit\u6bb5\u4f1a\u88ab\u91ca\u653e\u6389\uff0c\u4ec5\u7559\u4e0bcore\u6bb5\u6765\u8fd0\u884c\u3002 \u7b80\u8981\u52a0\u8f7d\u6d41\u7a0b\u56fe \u00b6 \u901a\u8fc7\u7b80\u8981\u52a0\u8f7d\u6d41\u7a0b\uff0c\u53ef\u4ee5\u5927\u81f4\u6e05\u695a\u8f6f\u4ef6\u90fd\u505a\u4e86\u54ea\u4e9b\u5de5\u4f5c \u8be6\u7ec6\u52a0\u8f7d\u8fc7\u7a0b \u00b6 sys_init_module\u7684\u5b9e\u73b0 linux-3.10.70\\kernel\\module.c /** * @brief \u7cfb\u7edf\u8c03\u7528 sys_init_module \u7684\u53c2\u6570\u5b9a\u4e49 * @param umod \u7528\u6237\u7a7a\u95f4 ko \u6a21\u5757\u8d77\u59cb\u5730\u5740 * @param len ko\u6a21\u5757\u5927\u5c0f * @param uargs \u4f20\u7ed9\u6a21\u5757\u7684\u53c2\u6570\u5728\u7528\u6237\u7a7a\u95f4\u4e0b\u7684\u5730\u5740 */ SYSCALL_DEFINE3(init_module, void __user *, umod, unsigned long, len, const char __user *, uargs) { struct load_info info = { }; /* \u901a\u8fc7vmalloc\u5728vmalloc\u533a\u5206\u914d\u5185\u5b58\u7a7a\u95f4\uff0c\u5c06\u5185\u6838\u6a21\u5757copy\u5230\u6b64\u7a7a\u95f4\uff0c info->hdr \u76f4\u63a5\u6307\u5411\u6b64\u7a7a\u95f4\u9996\u5730\u5740\uff0c\u4e5f\u5c31\u662fko\u7684elf header */ copy_module_from_user(umod, len, &info); // \u6a21\u5757\u52a0\u8f7d\u7684\u6838\u5fc3\u5904\u7406\u65b9\u6cd5,\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u5728\u8fd9\u91cc\u5b8c\u6210 return load_module(&info, uargs, 0); } load_module() \u6a21\u5757\u52a0\u8f7d\u7684\u6838\u5fc3\u5904\u7406\uff0c\u5728\u8fd9\u91cc\u5b8c\u6210\u4e86\u6a21\u5757\u7684\u642c\u79fb\uff0c\u91cd\u5b9a\u5411\u7b49\u8270\u82e6\u7684\u8fc7\u7a0b\u3002\u5728\u8bb2\u8ff0\u8fd9\u4e2a\u8fc7\u7a0b\u4e4b\u524d\uff0c\u9700\u8981\u5148\u4e86\u89e3\u5185\u6838\u6a21\u5757\u76f8\u5173\u7684\u4e24\u4e2a\u91cd\u8981\u7ed3\u6784\u4f53\uff0c struct load_info \u548c struct module struct load_info load_info\u7c7b\u4f3c\u4e8e ko \u6587\u4ef6\u7684\u4e00\u4e2a\u53e5\u67c4\uff08\u7528\u62bd\u8c61\u6765\u63cf\u8ff0\u611f\u89c9\u4e0d\u592a\u6070\u5f53\uff0c\u53c8\u60f3\u4e0d\u51fa\u4ec0\u4e48\u597d\u7684\u5f62\u5bb9\u8bcd\uff09, \u5176\u4e2d\u5305\u542b\u4e86ko\u6587\u4ef6\u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u7684\u6240\u6709\u6709\u7528\u4fe1\u606f linux-3.10.70\\kernel\\module.c struct load_info { Elf_Ehdr *hdr; // ELF\u6587\u4ef6\u5934 unsigned long len; // \u6587\u4ef6\u957f\u5ea6\uff0c\u4f3c\u4e4e\u9664\u4e86\u6821\u9a8c\u7684\u65f6\u5019\u7528\u4e86\u4e00\u4e0b\uff0c\u518d\u4e5f\u6ca1\u7528\u8fc7 Elf_Shdr *sechdrs; // \u8282\u533a\u5934\u90e8\u8868 char *secstrings, *strtab; // section \u540d\u79f0\u8868\uff0c \u5b57\u7b26\u540d\u79f0\u8868 unsigned long symoffs, stroffs; // \u7b26\u53f7\u8868\uff0c\u5b57\u7b26\u4e32\u8868\u5728\u6700\u7ec8core section\u4e2d\u7684\u504f\u79fb struct _ddebug *debug; unsigned int num_debug; bool sig_ok; #ifdef CONFIG_KALLSYMS unsigned long mod_kallsyms_init_off; #endif /*sym \u4e3a\u7b26\u53f7\u8868\u5728secton headers \u4e2d\u7684index *str \u4e3a\u5b57\u7b26\u4e32\u8868\u5728section header \u4e2d\u7684index */ struct { unsigned int sym, str, mod, vers, info, pcpu; } index; }; struct module struct module\u662f\u5185\u6838\u5bf9\u6a21\u5757\u7684\u62bd\u8c61\uff0c\u662f\u5185\u6838\u7528\u6765\u7ba1\u7406\u52a0\u8f7d\u7684\u6a21\u5757\u7684\u6838\u5fc3\u6570\u636e\u7ed3\u6784\uff0c\u5982\u4e0b\u4ee3\u7801\u5728\u6e90\u7801\u57fa\u7840\u4e0a\u8fdb\u884c\u4e86\u90e8\u5206\u88c1\u526a\uff0c\u4ee5\u4fbf\u51cf\u5c0f\u7bc7\u5e45 linux-3.10.70\\include\\linux\\module.h struct module { // \u7528\u6765\u8bb0\u5f55\u6a21\u5757\u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u4e0d\u540c\u9636\u6bb5\u7684\u72b6\u6001 enum module_state state; /* Member of list of modules */ // \u53ef\u4ee5\u770b\u5230\u5185\u6838\u4f7f\u7528\u94fe\u8868\u6765\u7ba1\u7406module struct list_head list; /* Unique handle for this module */ /* \u6a21\u5757\u540d\u79f0 */ char name[MODULE_NAME_LEN]; /* Sysfs stuff. */ struct module_kobject mkobj; struct module_attribute *modinfo_attrs; const char *version; const char *srcversion; struct kobject *holders_dir; /* Exported symbols */ // \u6a21\u5757\u5bfc\u51fa\u7b26\u53f7\u7684\u8d77\u59cb\u5730\u5740 const struct kernel_symbol *syms; // \u6a21\u5757\u5bfc\u51fa\u7b26\u53f7\u7684\u6821\u9a8c\u7801\u8d77\u59cb\u5730\u5740 const unsigned long *crcs; unsigned int num_syms; /* Kernel parameters. */ // \u5185\u6838\u6a21\u5757\u53c2\u6570\u6240\u5728\u7684\u8d77\u59cb\u5730\u5740 struct kernel_param *kp; unsigned int num_kp; /* GPL-only exported symbols. */ unsigned int num_gpl_syms; const struct kernel_symbol *gpl_syms; const unsigned long *gpl_crcs; /* symbols that will be GPL-only in the near future. */ const struct kernel_symbol *gpl_future_syms; const unsigned long *gpl_future_crcs; unsigned int num_gpl_future_syms; /* Startup function. */ // \u8fd9\u5c31\u662f\u6211\u4eec\u7528module_init(xxx)\u6765\u58f0\u660e\u7684\u5165\u53e3\u51fd\u6570 int (*init)(void); /* If this is non-NULL, vfree after init() returns */ void *module_init; /* Here is the actual code + data, vfree'd on unload. */ void *module_core; /* Here are the sizes of the init and core sections */ unsigned int init_size, core_size; /* The size of the executable code in each section. */ unsigned int init_text_size, core_text_size; /* Size of RO sections of the module (text+rodata) */ unsigned int init_ro_size, core_ro_size; /* Arch-specific module values */ struct mod_arch_specific arch; unsigned int taints; /* same bits as kernel:tainted */ #ifdef CONFIG_KALLSYMS /* * We keep the symbol and string tables for kallsyms. * The core_* fields below are temporary, loader-only (they * could really be discarded after module init). */ Elf_Sym *symtab, *core_symtab; unsigned int num_symtab, core_num_syms; char *strtab, *core_strtab; /* Section attributes */ struct module_sect_attrs *sect_attrs; /* Notes attributes */ struct module_notes_attrs *notes_attrs; #endif /* The command line arguments (may be mangled). People like keeping pointers to this stuff */ char *args; #ifdef CONFIG_MODULE_UNLOAD /* What modules depend on me? */ struct list_head source_list; /* What modules do I depend on? */ struct list_head target_list; /* Who is waiting for us to be unloaded */ struct task_struct *waiter; /* Destruction function. */ void (*exit)(void); struct module_ref __percpu *refptr; #endif } setup_load_info() setup_load_info()\u52a0\u8f7dstruct load_info \u548c struct module, rewrite_section_headers \u5c06\u6bcf\u4e2asection\u7684sh_addr\u4fee\u6539\u4e3a\u5f53\u524d\u955c\u50cf\u6240\u5728\u7684\u5185\u5b58\u5730\u5740\uff0c section \u540d\u79f0\u5b57\u7b26\u4e32\u8868\u5730\u5740\u7684\u83b7\u53d6\u65b9\u5f0f\u662f\u4eceELF\u5934\u4e2d\u7684e_shstrndx\u83b7\u53d6\u5230\u8282\u533a\u5934\u90e8\u5b57\u7b26\u4e32\u8868\u7684\u6807\u53f7\uff0c\u627e\u5230\u5bf9\u5e94section\u5728ELF\u6587\u4ef6\u4e2d\u7684\u504f\u79fb\uff0c\u518d\u52a0\u4e0aELF\u6587\u4ef6\u8d77\u59cb\u5730\u5740\u5c31\u5f97\u5230\u4e86\u5b57\u7b26\u4e32\u8868\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u3002struct module\u7684\u5b9e\u4f8bmod\u662f\u901a\u8fc7\u201c.gnu.linkonce.this_module\u201d\u8fd9\u4e2asection\u6765\u83b7\u53d6\u7684\u3002 \u6211\u4eec\u627e\u5230\u6a21\u5757\u7684\u7f16\u8bd1\u76ee\u5f55\uff0c\u4f1a\u627e\u5230\u4e00\u4e2axxx.mod.c\u7684\u6587\u4ef6 struct module __this_module __attribute__((section(\".gnu.linkonce.this_module\"))) = { .name = KBUILD_MODNAME, .init = init_module, #ifdef CONFIG_MODULE_UNLOAD .exit = cleanup_module, #endif .arch = MODULE_ARCH_INIT, }; \u5176\u4e2d\u7684__attribute__((section(\".gnu.linkonce.this_module\")))\u5c31\u628a\u8fd9\u4e2a\u5b9e\u4f8b\u94fe\u63a5\u5230\u4e86\u5bf9\u5e94\u7684\u8282\u533a\u4e2d /* * Set up our basic convenience variables (pointers to section headers, * search for module section index etc), and do some basic section * verification. * * Return the temporary module pointer (we'll replace it with the final * one when we move the module sections around). */ static struct module *setup_load_info(struct load_info *info, int flags) { unsigned int i; int err; struct module *mod; /* Set up the convenience variables */ info->sechdrs = (void *)info->hdr + info->hdr->e_shoff; info->secstrings = (void *)info->hdr + info->sechdrs[info->hdr->e_shstrndx].sh_offset; err = rewrite_section_headers(info, flags); if (err) return ERR_PTR(err); /* Find internal symbols and strings. */ for (i = 1; i < info->hdr->e_shnum; i++) { if (info->sechdrs[i].sh_type == SHT_SYMTAB) { info->index.sym = i; info->index.str = info->sechdrs[i].sh_link; info->strtab = (char *)info->hdr + info->sechdrs[info->index.str].sh_offset; break; } } info->index.mod = find_sec(info, \".gnu.linkonce.this_module\"); if (!info->index.mod) { printk(KERN_WARNING \"No module found in object\\n\"); return ERR_PTR(-ENOEXEC); } /* This is temporary: point mod into copy of data. */ mod = (void *)info->sechdrs[info->index.mod].sh_addr; if (info->index.sym == 0) { printk(KERN_WARNING \"%s: module has no symbols (stripped?)\\n\", mod->name); return ERR_PTR(-ENOEXEC); } info->index.pcpu = find_pcpusec(info); /* Check module struct version now, before we try to use module. */ if (!check_modstruct_version(info->sechdrs, info->index.vers, mod)) return ERR_PTR(-ENOEXEC); return mod; } layout_sections() layout_sections() \u8d1f\u8d23\u5c06section \u5f52\u7c7b\u4e3a core \u548c init \u8fd9\u4e24\u5927\u7c7b,\u4e3a ko \u7684\u7b2c\u4e8c\u6b21\u642c\u79fb\u505a\u51c6\u5907\u3002\u4e3a\u4ec0\u4e48\u4f1a\u6709\u7b2c\u4e8c\u6b21\u642c\u79fb\u5462\uff1f\u76f4\u63a5copy\u5230\u5b9e\u9645\u8fd0\u884c\u5730\u5740\u4e0d\u662f\u66f4\u7701\u53bb\u4e86\u5f88\u591a\u9ebb\u70e6\u5417\uff1f\u5b9e\u9645\u4e0a\uff0c\u7b2c\u4e00\u6b21copy\u5230vmalloc\u533a\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u6682\u5b58\u64cd\u4f5c\uff0cko\u4e2d\u7684\u7edd\u5927\u591a\u6570section\u4f1a\u88ab\u642c\u79fb\u5230\u6700\u7ec8\u7684module\u533a\uff0c\u4f46\u4e5f\u6709\u90e8\u5206section\u4ee5\u53caELF header\u4e0d\u9700\u8981\u5230\u6700\u7ec8\u7684module\u533a\uff0c\u800c\u4e14\u4e0e\u521d\u59cb\u5316\u76f8\u5173\u7684init\u6bb5\u5728\u6a21\u5757\u521d\u59cb\u5316\u5b8c\u6210\u4e4b\u540e\u4e5f\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\uff0c\u8fd9\u4e9b\u5360\u7528\u7684\u5185\u5b58\u6700\u7ec8\u53ef\u4ee5\u88ab\u91ca\u653e\u6389\uff0c\u7cbe\u81f4\u7684\u5185\u6838\u5f53\u7136\u4f1a\u53bb\u505a\u8fd9\u4e9b\u64cd\u4f5c\u3002\u56e0\u6b64\u4fbf\u9700\u8981\u4e8c\u6b21\u642c\u79fb\u3002\u5728\u4e3a\u90a3\u4e9b\u9700\u8981\u79fb\u52a8\u7684section\u5206\u914d\u5185\u5b58\u7a7a\u95f4\u4e4b\u524d\uff0c\u5185\u6838\u9700\u8981\u627e\u51fa\u54ea\u4e9bsection\u9700\u8981\u79fb\u52a8\uff0clayout_sections\u4f1a\u904d\u5386\u6240\u6709\u7684section header, \u6839\u636esh_flags\u8fd9\u4e2a\u5b57\u6bb5\u6765\u5224\u5b9a\u5bf9\u5e94\u7684section\u662f\u5426\u9700\u8981\u642c\u79fb\uff0c\u5e76\u4e14\u5f52\u4e3a\u54ea\u79cd\u7c7b\u578b\u3002sh_flags\u6700\u7ec8\u88ab\u5212\u5206\u4e3a4\u79cd\u7c7b\u578b\uff0ccode, read-only, read-write data, small data\u3002\u4efb\u4f55\u6807\u8bb0\u4e86SHF_ALLOC\u7684section\u90fd\u5c5e\u4e8e\u8fd9\u56db\u7c7b\u4e2d\u7684\u4e00\u7c7b\uff0c\u5bf9\u5e94\u6bcf\u4e00\u7c7blayout_sections\u90fd\u4f1a\u904d\u5386section header table\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6210\u5458\u3002\u5c06\u8282\u533a\u540d\u79f0\u4e0d\u5e26\".init\"\u7684\u5f52\u4e3acore\u7c7b\uff0c\u957f\u5ea6\u7edf\u8ba1\u5728mod->core_size\uff0c\u628a\u8282\u533a\u540d\u79f0\u5e26\".init\"\u7684\u5f52\u4e3ainit\u7c7b,\u957f\u5ea6\u7edf\u8ba1\u5728mod->init_size\u3002\u5b9e\u9645\u4e0alayout_sections\u53ea\u662f\u5bf9 core \u7c7b\u548c init \u7c7b\u7684 size \u505a\u4e86\u7edf\u8ba1\uff0c\u6ca1\u6709\u5b9e\u8d28\u6027\u7684\u64cd\u4f5c\u3002\u503c\u5f97\u4e00\u63d0\u7684\u662f\u5728\u7edf\u8ba1INIT section\u7684\u65f6\u5019\uff0c\u4e3ash_entsize\u6dfb\u52a0\u4e86INIT_OFFSET_MASK\u6807\u8bb0\uff0c\u8fd9\u662f\u540e\u7eed\u5728\u642c\u79fb\u7684\u65f6\u5019\u533a\u5206INIT section \u548c CORE section \u7684key. /* Lay out the SHF_ALLOC sections in a way not dissimilar to how ld might -- code, read-only data, read-write data, small data. Tally sizes, and place the offsets into sh_entsize fields: high bit means it belongs in init. */ static void layout_sections(struct module *mod, struct load_info *info) { static unsigned long const masks[][2] = { /* NOTE: all executable code must be the first section * in this array; otherwise modify the text_size * finder in the two loops below */ { SHF_EXECINSTR | SHF_ALLOC, ARCH_SHF_SMALL }, { SHF_ALLOC, SHF_WRITE | ARCH_SHF_SMALL }, { SHF_WRITE | SHF_ALLOC, ARCH_SHF_SMALL }, { ARCH_SHF_SMALL | SHF_ALLOC, 0 } }; unsigned int m, i; for (i = 0; i < info->hdr->e_shnum; i++) info->sechdrs[i].sh_entsize = ~0UL; pr_debug(\"Core section allocation order:\\n\"); for (m = 0; m < ARRAY_SIZE(masks); ++m) { for (i = 0; i < info->hdr->e_shnum; ++i) { Elf_Shdr *s = &info->sechdrs[i]; const char *sname = info->secstrings + s->sh_name; if ((s->sh_flags & masks[m][0]) != masks[m][0] || (s->sh_flags & masks[m][1]) || s->sh_entsize != ~0UL || strstarts(sname, \".init\")) continue; s->sh_entsize = get_offset(mod, &mod->core_size, s, i); pr_debug(\"\\t%s\\n\", sname); } /* \u8fd9\u91cc\u53c8\u6309\u7167\u56db\u5927\u7c7b\u505a\u4e86\u7ec6\u5206 */ switch (m) { case 0: /* executable */ mod->core_size = debug_align(mod->core_size); mod->core_text_size = mod->core_size; break; case 1: /* RO: text and ro-data */ mod->core_size = debug_align(mod->core_size); mod->core_ro_size = mod->core_size; break; case 3: /* whole core */ mod->core_size = debug_align(mod->core_size); break; } } pr_debug(\"Init section allocation order:\\n\"); for (m = 0; m < ARRAY_SIZE(masks); ++m) { for (i = 0; i < info->hdr->e_shnum; ++i) { Elf_Shdr *s = &info->sechdrs[i]; const char *sname = info->secstrings + s->sh_name; if ((s->sh_flags & masks[m][0]) != masks[m][0] || (s->sh_flags & masks[m][1]) || s->sh_entsize != ~0UL || !strstarts(sname, \".init\")) continue; s->sh_entsize = (get_offset(mod, &mod->init_size, s, i) | INIT_OFFSET_MASK); pr_debug(\"\\t%s\\n\", sname); } switch (m) { case 0: /* executable */ mod->init_size = debug_align(mod->init_size); mod->init_text_size = mod->init_size; break; case 1: /* RO: text and ro-data */ mod->init_size = debug_align(mod->init_size); mod->init_ro_size = mod->init_size; break; case 3: /* whole init */ mod->init_size = debug_align(mod->init_size); break; } } } layout_symtab() \u8fd9\u4e2a\u64cd\u4f5c\u662f\u53ef\u914d\u7684\uff0c\u901a\u8fc7\u914d\u7f6e\u9009\u9879CONFIG_KALLSYMS\u6765\u9009\u62e9\u662f\u5426\u542f\u52a8\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u5f53\u5f00\u542fKALLSYMS\u65f6\uff0c\u4e0d\u5149\u4fdd\u7559\u5185\u6838\u6620\u50cf\u7684\u6240\u6709\u7b26\u53f7\uff0c\u4e5f\u4fdd\u7559\u6a21\u5757\u7684\u6240\u6709\u7b26\u53f7\uff0c\u56e0\u4e3a\u6a21\u5757\u7b26\u53f7section \u672c\u8eab\u6ca1\u6709SHF_ALLOC\u6807\u5fd7\uff0c\u6240\u4ee5\u5728layout_sections\u4e2d\u4e0d\u4f1a\u88ab\u5212\u5206\u5230CORE section \u6216 INIT section\u4e2d\uff0clayout_symtab\u5c31\u662f\u628a\u7b26\u53f7\u8868\u548c\u7b26\u53f7\u540d\u79f0\u5b57\u7b26\u4e32\u8868\u52a0\u5165CORE section\u3002 \u4e3a\u4ec0\u4e48\u662fCORE section\u800c\u4e0d\u662f INIT section\uff0c \u56e0\u4e3a INIT section \u5728\u521d\u59cb\u5316\u5b8c\u6210\u4e4b\u540e\u662f\u8981\u91ca\u653e\u6389\u7684\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662fsymsect->sh_flags |= SHF_ALLOC;\u548cstrsect->sh_flags |= SHF_ALLOC;\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u5f88\u5173\u952e\uff0c\u5728\u5177\u4f53\u7684\u642c\u79fb\u7684\u65f6\u5019\u4f1a\u7528\u5230\u3002 static void layout_symtab(struct module *mod, struct load_info *info) { Elf_Shdr *symsect = info->sechdrs + info->index.sym; Elf_Shdr *strsect = info->sechdrs + info->index.str; const Elf_Sym *src; unsigned int i, nsrc, ndst, strtab_size = 0; /* Put symbol section at end of init part of module. */ symsect->sh_flags |= SHF_ALLOC; symsect->sh_entsize = get_offset(mod, &mod->init_size, symsect, info->index.sym) | INIT_OFFSET_MASK; pr_debug(\"\\t%s\\n\", info->secstrings + symsect->sh_name); src = (void *)info->hdr + symsect->sh_offset; nsrc = symsect->sh_size / sizeof(*src); /* Compute total space required for the core symbols' strtab. */ for (ndst = i = 0; i < nsrc; i++) { if (i == 0 || is_core_symbol(src+i, info->sechdrs, info->hdr->e_shnum)) { strtab_size += strlen(&info->strtab[src[i].st_name])+1; ndst++; } } /* Append room for core symbols at end of core part. */ info->symoffs = ALIGN(mod->core_size, symsect->sh_addralign ?: 1); info->stroffs = mod->core_size = info->symoffs + ndst * sizeof(Elf_Sym); mod->core_size += strtab_size; /* Put string table section at end of init part of module. */ strsect->sh_flags |= SHF_ALLOC; strsect->sh_entsize = get_offset(mod, &mod->init_size, strsect, info->index.str) | INIT_OFFSET_MASK; pr_debug(\"\\t%s\\n\", info->secstrings + strsect->sh_name); } move_module() \u628ako\u642c\u79fb\u5230\u6700\u7ec8\u7684\u8fd0\u884c\u5730\u5740\u5c31\u662f\u901a\u8fc7\u8fd9\u4e2a\u64cd\u4f5c\u4e86\u3002module_alloc_update_bounds() \u8d1f\u8d23\u5728\u6700\u7ec8\u8fd0\u884c\u533a\u7533\u8bf7\u5185\u5b58\u7a7a\u95f4\uff0c\u5176\u4f1a\u8c03\u7528module_alloc(), module_alloc()\u5728module.c\u4e2d\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5f31\u51fd\u6570\uff0c\u53ef\u4ee5\u7531\u4e0d\u540c\u7684arch\u8fdb\u884c\u6539\u5199\uff0c\u5bf9\u4e8earm\u800c\u8a00\u662f\u4e0b\u9762\u8fd9\u6837\u5b9e\u73b0\u7684\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7406\u89e3\u4e3a\u4ec0\u4e48arm\u7684virtual kernel memory layout \u4e2d\u4f1a\u6709module\u8fd9\u6837\u4e00\u4e2a\u533a\u4e86\u3002 Virtual kernel memory layout: vector : 0xffff0000 - 0xffff1000 ( 4 kB) fixmap : 0xfff00000 - 0xfffe0000 ( 896 kB) vmalloc : 0xf0800000 - 0xfff00000 ( 247 MB) lowmem : 0xc0000000 - 0xf0700000 ( 775 MB) pkmap : 0xbfe00000 - 0xc0000000 ( 2 MB) modules : 0xbe700000 - 0xbfe00000 ( 23 MB) .text : 0xc0008000 - 0xc08d6630 (9018 kB) .init : 0xc08d7000 - 0xc3f5dc80 (55836 kB) .data : 0xc3f60000 - 0xc3fbbae0 ( 367 kB) .bss : 0xc3fbbae0 - 0xc40be85c (1036 kB) void *module_alloc(unsigned long size) { return __vmalloc_node_range(size, 1, MODULES_VADDR, MODULES_END, GFP_KERNEL, PAGE_KERNEL_EXEC, -1, __builtin_return_address(0)); } \u7533\u8bf7\u5b8c\u5185\u5b58\u4e4b\u540e\u5c31\u662f\u642c\u79fb\u4e86\uff0c\u76f4\u63a5memcpy\u3002\u5f53\u7136\u4e86\u642c\u79fb\u5230\u65b0\u5730\u5740\uff0c\u5404\u4e2asection\u7684sh_addr\u4e5f\u8981\u8ddf\u7740\u53d8\u66f4,\u6307\u5411\u65b0\u7684\u5185\u5b58\u5730\u5740\u3002\".gnu.linkonce.this_module\" \u8fd9\u4e2asection\u4e5f\u662f\u5e26\u6709SHF_ALLOC\u6807\u8bb0\u7684\uff0c\u6240\u4ee5\u4e5f\u8981\u66f4\u65b0mod\u53d8\u91cf\u4f7f\u5176\u6307\u5411\u65b0\u5730\u5740\u3002mod = (void *)info->sechdrs[info->index.mod].sh_addr; \u8fd9\u4e2a\u4e0d\u662f\u5728move_module()\u4e2d\u8fdb\u884c\u64cd\u4f5c\u7684\uff0c\u4f46\u662f\u662f\u7d27\u8ddf\u7740move_module()\u8fdb\u884c\u7684\u3002\u81f3\u6b64\uff0c\u4e07\u91cc\u957f\u5f81\u5df2\u7ecf\u8fc8\u51fa\u4e86\u7b2c\u4e00\u6b65\uff0c\u4e00\u4e2alayout_and_allocate()\u8fc7\u7a0b\u5c31\u7ed3\u675f\u4e86 static int move_module(struct module *mod, struct load_info *info) { int i; void *ptr; /* Do the allocs. */ ptr = module_alloc_update_bounds(mod->core_size); /* * The pointer to this block is stored in the module structure * which is inside the block. Just mark it as not being a * leak. */ kmemleak_not_leak(ptr); if (!ptr) return -ENOMEM; memset(ptr, 0, mod->core_size); mod->module_core = ptr; if (mod->init_size) { ptr = module_alloc_update_bounds(mod->init_size); /* * The pointer to this block is stored in the module structure * which is inside the block. This block doesn't need to be * scanned as it contains data and code that will be freed * after the module is initialized. */ kmemleak_ignore(ptr); if (!ptr) { module_free(mod, mod->module_core); return -ENOMEM; } memset(ptr, 0, mod->init_size); mod->module_init = ptr; } else mod->module_init = NULL; /* Transfer each section which specifies SHF_ALLOC */ pr_debug(\"final section addresses:\\n\"); for (i = 0; i < info->hdr->e_shnum; i++) { void *dest; Elf_Shdr *shdr = &info->sechdrs[i]; if (!(shdr->sh_flags & SHF_ALLOC)) continue; if (shdr->sh_entsize & INIT_OFFSET_MASK) dest = mod->module_init + (shdr->sh_entsize & ~INIT_OFFSET_MASK); else dest = mod->module_core + shdr->sh_entsize; if (shdr->sh_type != SHT_NOBITS) memcpy(dest, (void *)shdr->sh_addr, shdr->sh_size); /* Update sh_addr to point to copy in image. */ shdr->sh_addr = (unsigned long)dest; pr_debug(\"\\t0x%lx %s\\n\", (long)shdr->sh_addr, info->secstrings + shdr->sh_name); } return 0; } \u4ee3\u7801\u642c\u79fb\u5b8c\u6210\u4e86\uff0c\u4f46\u662f\u8fd8\u4e0d\u80fd\u8fd0\u884c\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u7b26\u53f7\u5730\u5740\u6ca1\u6709\u4fee\u6539\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5fc5\u987b\u5148\u89e3\u51b3\u9759\u6001\u94fe\u63a5\u65f6\u7684\u7b26\u53f7\u5f15\u7528\u4e0e\u52a8\u6001\u52a0\u8f7d\u65f6\u5b9e\u9645\u7b26\u53f7\u5730\u5740\u4e0d\u4e00\u81f4\u7684\u95ee\u9898\u3002\u8fd9\u4e2a\u95ee\u9898\u7684\u89e3\u51b3\u5206\u4e3a\u4e86\u4e24\u6b65\uff0c\u7b2c\u4e00\u6b65\u5c31\u662fsimplify_symbols()\u5148\u4fee\u6b63\u7b26\u53f7\u8868\u4e2d\u7684\u7b26\u53f7\u5730\u5740\uff0c\u7b2c\u4e8c\u6b65\u5c31\u662fapply_relocations()\uff0c\u6839\u636e\u91cd\u5b9a\u5411\u8868\u5c06\u6240\u6709\u7684\u7b26\u53f7\u5730\u5740\u4fee\u6539\u4e3a\u5b9e\u9645\u52a0\u8f7d\u7684\u5730\u5740\u3002 \u5728\u8bb2\u8ff0simplify_symbols()\u8fd9\u4e2a\u8fc7\u7a0b\u4e4b\u524d\uff0c\u5148\u8981\u8865\u5145\u51e0\u4e2a\u57fa\u7840\u77e5\u8bc6 \u5185\u6838\u662f\u5982\u4f55\u5bfc\u51fa\u7b26\u53f7\u7684 \u8fd9\u4e2a\u5927\u5bb6\u90fd\u77e5\u9053\u600e\u4e48\u7528\uff0c\u4f7f\u7528 EXPORT_SYMBOL \u58f0\u660e\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\uff0c\u751a\u81f3\u6709\u7684\u4eba\u8fd8\u77e5\u9053 EXPORT_SYMBOL_GPL \u548c EXPORT_SYMBOL_GPL_FUTURE, \u6211\u4eec\u5f88\u5c11\u53bb\u63a2\u7a76 EXPORT_SYMBOL \u5b9e\u73b0\u7684\u539f\u7406\uff0c\u4f46\u5728\u8fd9\u91cc\u6211\u4eec\u5c31\u9700\u8981\u7b80\u5355\u63a2\u7a76\u4e00\u4e0b\u3002\u5982\u679c\u5185\u6838\u4e0d\u652f\u6301module\uff0c \u5176\u5b9e EXPORT_SYMBOL \u662f\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\u7684\uff0c\u5373\u4f7f\u5bfc\u51fa\u4e86\u4e5f\u65e0\u4eba\u4f7f\u7528\uff0c\u4f46\u6a21\u5757\u7684\u51fa\u73b0\u5c31\u4f7f\u5f97\u5bfc\u51fa\u7b26\u53f7\u53d8\u5f97\u6709\u610f\u4e49\uff0c\u6211\u4eec\u5176\u5b9e\u5728\u7f16\u5199\u8bbe\u5907\u9a71\u52a8\u7684\u65f6\u5019\u7ecf\u5e38\u7528\u5230\u5185\u6838\u5bfc\u51fa\u7684\u7b26\u53f7\uff0c\u540c\u65f6\u6211\u4eec\u7684\u4e00\u4e2ako\u53ef\u80fd\u4f9d\u8d56\u53e6\u4e00\u4e2ako\u5bfc\u51fa\u7684\u7b26\u53f7\uff0c\u5728\u6211\u4eec\u7f16\u8bd1\u8bbe\u5907\u9a71\u52a8\u65f6\uff0c\u5373\u9759\u6001\u94fe\u63a5\u65f6\uff0c\u4f7f\u7528\u5185\u6838\u6216\u5176\u4ed6\u6a21\u5757\u7684\u7b26\u53f7\u7684\u60c5\u51b5\u5c31\u53eb\u505a\u201c\u672a\u89e3\u51b3\u7684\u5f15\u7528\u201d, \u90a3\u53ea\u597d\u7559\u5230\u52a8\u6001\u52a0\u8f7d\u7684\u65f6\u5019\u89e3\u51b3\u54af\u3002 \u5185\u6838\u5bfc\u51fa\u7684\u7b26\u53f7\u8868\u7ed3\u6784\u6709\u4e24\u4e2a\u5b57\u6bb5\uff0c\u4e00\u4e2a\u662f\u7b26\u53f7\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\uff0c\u4e00\u4e2a\u662f\u7b26\u53f7\u540d\u79f0\u6307\u9488\uff0c \u7b26\u53f7\u540d\u79f0\u88ab\u653e\u5728\u4e86__ksymtab_strings\u8fd9\u4e2asection\u4e2d\uff0c\u4ee5EXPORT_SYMBOL\u4e3e\u4f8b\uff0c \u7b26\u53f7\u4f1a\u88ab\u653e\u5230\u540d\u4e3a___ksymtab\u7684section\u4e2d\u3002 linux-3.10.70\\include\\linux\\export.h /* \u8fd9\u4e2a\u7ed3\u6784\u4f53\u6211\u4eec\u8981\u6ce8\u610f\uff0c\u5b83\u6784\u6210\u7684\u8868\u662f\u5bfc\u51fa\u7b26\u53f7\u8868\u800c\u4e0d\u662f\u901a\u5e38\u610f\u4e49\u4e0a\u7684\u7b26\u53f7\u8868 */ struct kernel_symbol { unsigned long value; // \u7b26\u53f7\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740 const char *name; // \u7b26\u53f7\u540d\u79f0 }; /* For every exported symbol, place a struct in the __ksymtab section */ #define __EXPORT_SYMBOL(sym, sec) \\ extern typeof(sym) sym; \\ __CRC_SYMBOL(sym, sec) \\ static const char __kstrtab_##sym[] \\ __attribute__((section(\"__ksymtab_strings\"), aligned(1))) \\ = VMLINUX_SYMBOL_STR(sym); \\ static const struct kernel_symbol __ksymtab_##sym \\ __used \\ __attribute__((section(\"___ksymtab\" sec \"+\" #sym), unused)) \\ = { (unsigned long)&sym, __kstrtab_##sym } #define EXPORT_SYMBOL(sym) \\ __EXPORT_SYMBOL(sym, \"\") #define EXPORT_SYMBOL_GPL(sym) \\ __EXPORT_SYMBOL(sym, \"_gpl\") #define EXPORT_SYMBOL_GPL_FUTURE(sym) \\ __EXPORT_SYMBOL(sym, \"_gpl_future\") \u8fd9\u8fd8\u4e0d\u884c\uff0c\u8fd8\u9700\u8981\u94fe\u63a5\u811a\u672c\u7684\u5e2e\u52a9\uff0c\u94fe\u63a5\u5668\u811a\u672c\u628a\u6240\u6709\u7684\u76ee\u6807\u6587\u4ef6\u4e2d\u540d\u4e3a\u201c__ksymtab\u201d\u7684 section \u653e\u5728\u6700\u7ec8\u5185\u6838\u955c\u50cf\u7684\u540d\u4e3a\u201c__ksymtab\u201d\u7684section\u4e2d\uff0c\u540c\u65f6\uff0c\u5b9a\u4e49\u4e86\u53d8\u91cf__start___ksymtab\uff0c __stop___ksymtab\uff0c __start___ksymtab_gpl\uff0c __start___ksymtab_gpl \u7b49\uff0c\u8fd9\u4e9b\u5728\u89e3\u51b3\u90a3\u4e9b\u201c\u672a\u89e3\u51b3\u7684\u5f15\u7528\u201d\u7684\u65f6\u5019\u5c31\u4f1a\u7528\u5230\u8fd9\u4e9b\u53d8\u91cf linux-3.10.70\\include\\asm-generic\\Vmlinux.lds.h /* Kernel symbol table: Normal symbols */ \\ __ksymtab : AT(ADDR(__ksymtab) - LOAD_OFFSET) { \\ VMLINUX_SYMBOL(__start___ksymtab) = .; \\ *(SORT(___ksymtab+*)) \\ VMLINUX_SYMBOL(__stop___ksymtab) = .; \\ } \\ \\ /* Kernel symbol table: GPL-only symbols */ \\ __ksymtab_gpl : AT(ADDR(__ksymtab_gpl) - LOAD_OFFSET) { \\ VMLINUX_SYMBOL(__start___ksymtab_gpl) = .; \\ *(SORT(___ksymtab_gpl+*)) \\ VMLINUX_SYMBOL(__start___ksymtab_gpl) = .; \\ } \u5728module.c\u4e2d\u5c31\u901a\u8fc7\u4e0b\u9762\u7684\u58f0\u660e\u6765\u76f4\u63a5\u4f7f\u7528\u94fe\u63a5\u5668\u5b9a\u4e49\u7684\u8fd9\u4e9b\u53d8\u91cf linux-3.10.70\\kernel\\module.c /* Provided by the linker */ extern const struct kernel_symbol __start___ksymtab[]; extern const struct kernel_symbol __stop___ksymtab[]; extern const struct kernel_symbol __start___ksymtab_gpl[]; extern const struct kernel_symbol __stop___ksymtab_gpl[]; extern const struct kernel_symbol __start___ksymtab_gpl_future[]; extern const struct kernel_symbol __stop___ksymtab_gpl_future[]; \u7b26\u53f7\u8868 \u521a\u624d\u8bb2\u7684\u662f\u5185\u6838\u5bfc\u51fa\u7b26\u53f7\u8868\uff0c\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u672a\u89e3\u51b3\u7684\u5f15\u7528\u7b26\u53f7\u8868\uff0c\u73b0\u5728\u6211\u4eec\u8981\u8bb2\u7b26\u53f7\u8868\uff0c\u8fd9\u4e2a\u7b26\u53f7\u8868\u662fELF\u6587\u4ef6\u5b9a\u4e49\u7684\u548ckernel_symbol\u4e0d\u8981\u6df7\u6dc6 \u5176\u4e2dst_name \u662f\u7b26\u53f7\u540d\u79f0\u5728\u7b26\u53f7\u540d\u79f0\u5b57\u7b26\u4e32\u8868\u4e2d\u7684\u7d22\u5f15\u503c\uff0c\u56e0\u6b64\u662f\u4e2aElf32_Word\u7c7b\u578b\uff1bst_value \u662f\u7b26\u53f7\u6240\u5728\u7684\u5185\u5b58\u5730\u5740\uff0c\u6211\u4eec\u8981\u4fee\u6b63\u7684\u4e5f\u6b63\u662f\u8fd9\u4e2a\u5b57\u6bb5 st_size \u662f\u7b26\u53f7\u5927\u5c0f\uff0c\u8fd9\u4e2a\u5728\u8fd9\u91cc\u4f3c\u4e4e\u5e76\u6ca1\u6709\u7528\u5230\uff1b st_info \u662f\u7b26\u53f7\u7c7b\u578b\u548c\u7ed1\u5b9a\u4fe1\u606f\uff0c\u4f4e4\u4f4d\u8868\u793a\u7b26\u53f7\u7c7b\u578b\uff08STB_LOCAL\u5c40\u90e8\u7b26\u53f7\uff0c\u76ee\u6807\u6587\u4ef6\u5916\u90e8\u4e0d\u53ef\u89c1\uff1bSTB_GLOBAL\u5168\u5c40\u7b26\u53f7\uff0c\u5916\u90e8\u53ef\u89c1\uff1bSTB_WEAK\u5f31\u7b26\u53f7\uff09\uff0c \u9ad828\u4f4d\u8868\u793a\u7b26\u53f7\u7ed1\u5b9a\u4fe1\u606f\uff08STT_NOTYPE \u672a\u77e5\u7c7b\u578b\uff1b STT_OBJECT\u6570\u636e\u5bf9\u8c61\uff1bSTT_FUNC \u51fd\u6570\u6216\u5176\u4ed6\u53ef\u6267\u884c\u4ee3\u7801\uff1bSTT_SECTION \u6bb5\uff0c\u8fd9\u79cd\u7b26\u53f7\u5fc5\u987b\u662fSTB_LOCAL\u7c7b\u578b\u7684\uff0cSTT_FILE \u6587\u4ef6\u540d\uff0c\u4e00\u822c\u90fd\u662f\u8be5\u76ee\u6807\u6587\u4ef6\u6240\u5bf9\u5e94\u7684\u6e90\u6587\u4ef6\u540d\uff0c\u4e00\u5b9a\u662fSTB_LOCAL\u7c7b\u578b\u7684\u5e76\u4e14\u5b83\u7684st_shndx\u4e00\u5b9a\u662fSHN_ABS\uff09, st_shndx\u8868\u793a\u7b26\u53f7\u6240\u5728section\uff0c\u5982\u679c\u7b26\u53f7\u5b9a\u4e49\u5728\u955c\u50cf\u4e2d\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5c31\u8868\u793a\u7b26\u53f7\u6240\u5728\u7684section\u5728section header table\u4e2dindex, \u5982\u679c\u7b26\u53f7\u4e0d\u662f\u5b9a\u4e49\u5728\u672c\u76ee\u6807\u4e2d\uff0c\u6216\u8005\u4e00\u4e9b\u7279\u6b8a\u7b26\u53f7\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u6709\u7279\u6b8a\u542b\u4e49\uff08SHN_ABS\u8868\u793a\u7b26\u53f7\u5305\u542b\u4e86\u7edd\u5bf9\u503c\uff0c\u6bd4\u5982\u6587\u4ef6\u540d\uff1bSHN_COMMON\u8868\u793a\u662f\u4e00\u4e2aCOMMON\u5757\u7c7b\u578b\uff0c\u6bd4\u5982\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u7b26\u53f7\uff1bSHN_UNDEF \u8868\u793a\u8be5\u7b26\u53f7\u672a\u5b9a\u4e49\uff0c\u5373\u6211\u4eec\u6240\u8bf4\u7684\u672a\u89e3\u51b3\u7684\u5f15\u7528\uff09 typedef struct elf32_sym{ Elf32_Word st_name; Elf32_Addr st_value; Elf32_Word st_size; unsigned char st_info; unsigned char st_other; Elf32_Half st_shndx; } Elf32_Sym; simplify_symbols() \u73b0\u5728\u6211\u4eec\u518d\u6765\u770bsimplify_symbols\uff0c \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u904d\u5386\u4e86\u6574\u4e2a\u7b26\u53f7\u8868\u5982\u679c\u662f\u7279\u6b8a\u7b26\u53f7\uff0c\u8d70\u7279\u6b8a\u5904\u7406\uff0c\u5982\u679c\u662f\u975e\u7279\u6b8a\u7b26\u53f7\uff0c\u8d70default\u5904\u7406\u3002 \u5982\u679c\u4e0d\u662f\u7279\u6b8a\u7b26\u53f7\uff0c\u90a3\u4e48\u76f4\u63a5\u6839\u636est_shndx\u627e\u5230\u7b26\u53f7\u6240\u5728\u7684section\uff0c\u8fd9\u65f6st_value\u5df2\u7ecf\u5b58\u50a8\u4e86\u7b26\u53f7\u5728section\u4e2d\u7684\u504f\u79fb\uff0cst_value + sh_addr \u5373\u5f97\u5230\u7b26\u53f7\u771f\u6b63\u7684\u5185\u5b58\u5730\u5740\u3002 \u7279\u6b8a\u7b26\u53f7\u6211\u4eec\u91cd\u70b9\u5173\u6ce8SHN_UNDEF\uff0c \u5173\u6ce8\u5982\u4f55\u5bfb\u627e\u672a\u89e3\u51b3\u7684\u7b26\u53f7\u5f15\u7528\u3002resolve_symbol_wait\u53bb\u5185\u6838\u548c\u5176\u4ed6\u6a21\u5757\u4e2d\u901a\u8fc7\u7b26\u53f7\u540d\u79f0\u5bfb\u5740\u76ee\u6807\u7b26\u53f7\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u60f3\u800c\u77e5\uff0c\u5bfb\u627e\u7684key\u5373\u7b26\u53f7\u540d\u79f0 /* Change all symbols so that st_value encodes the pointer directly. */ static int simplify_symbols(struct module *mod, const struct load_info *info) { Elf_Shdr *symsec = &info->sechdrs[info->index.sym]; Elf_Sym *sym = (void *)symsec->sh_addr; unsigned long secbase; unsigned int i; int ret = 0; const struct kernel_symbol *ksym; for (i = 1; i < symsec->sh_size / sizeof(Elf_Sym); i++) { const char *name = info->strtab + sym[i].st_name; switch (sym[i].st_shndx) { case SHN_COMMON: /* We compiled with -fno-common. These are not supposed to happen. */ pr_debug(\"Common symbol: %s\\n\", name); printk(\"%s: please compile with -fno-common\\n\", mod->name); ret = -ENOEXEC; break; case SHN_ABS: /* Don't need to do anything */ pr_debug(\"Absolute symbol: 0x%08lx\\n\", (long)sym[i].st_value); break; case SHN_UNDEF: ksym = resolve_symbol_wait(mod, info, name); /* Ok if resolved. */ if (ksym && !IS_ERR(ksym)) { sym[i].st_value = ksym->value; break; } /* Ok if weak. */ if (!ksym && ELF_ST_BIND(sym[i].st_info) == STB_WEAK) break; printk(KERN_WARNING \"%s: Unknown symbol %s (err %li)\\n\", mod->name, name, PTR_ERR(ksym)); ret = PTR_ERR(ksym) ?: -ENOENT; break; default: /* Divert to percpu allocation if a percpu var. */ if (sym[i].st_shndx == info->index.pcpu) secbase = (unsigned long)mod_percpu(mod); else secbase = info->sechdrs[sym[i].st_shndx].sh_addr; sym[i].st_value += secbase; break; } } return ret; } \u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5230\u5e95\u662f\u600e\u4e48\u627e\u5230\u672a\u89e3\u51b3\u7684\u5f15\u7528\u7684\u7b26\u53f7\u7684\u3002resolve_symbol_wait\u4f1a\u8c03\u7528resolve_symbol\uff0c \u8fdb\u800c\u8c03\u7528 find_symbol \uff0c\u901a\u8fc7\u540d\u5b57\u6211\u4eec\u4e5f\u53ef\u4ee5\u77e5\u9053\uff0c\u8fd9\u5c31\u662f\u627e\u7b26\u53f7\u7684\u6838\u5fc3\u4e86\uff0c\u627e\u5230\u4e86\u7b26\u53f7\u4e4b\u540e\uff0c\u628a\u7b26\u53f7\u7684\u5b9e\u9645\u5730\u5740\u8d4b\u503c\u7ed9\u7b26\u53f7\u8868 sym[i].st_value = ksym->value; /* Find a symbol and return it, along with, (optional) crc and * (optional) module which owns it. Needs preempt disabled or module_mutex. */ const struct kernel_symbol *find_symbol(const char *name, struct module **owner, const unsigned long **crc, bool gplok, bool warn) { struct find_symbol_arg fsa; fsa.name = name; fsa.gplok = gplok; fsa.warn = warn; if (each_symbol_section(find_symbol_in_section, &fsa)) { if (owner) *owner = fsa.owner; if (crc) *crc = fsa.crc; return fsa.sym; } pr_debug(\"Failed to find symbol %s\\n\", name); return NULL; } EXPORT_SYMBOL_GPL(find_symbol); \u6765\u770b\u4e00\u4e0beach_symbol_section\uff0c \u6211\u4eec\u4f1a\u53d1\u73b0\u53bb\u4e24\u4e2a\u5730\u65b9\u627e\u4e86\uff0c\u4e00\u4e2a\u662f\u5185\u6838\u7684\u5bfc\u51fa\u7b26\u53f7\u8868\uff0c\u5373\u6211\u4eec\u5728\u5c06\u5185\u6838\u7b26\u53f7\u662f\u5982\u4f55\u5bfc\u51fa\u7684\u65f6\u5019\u5b9a\u4e49\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u4e00\u4e2a\u662f\u904d\u5386\u5df2\u7ecf\u52a0\u8f7d\u7684\u5185\u6838\u6a21\u5757\uff0c\u67e5\u627e\u52a8\u4f5c\u662f\u5728each_symbol_in_section\u4e2d\u5b8c\u6210\uff0c\u800c\u5b9e\u9645\u7684\u67e5\u627e\u52a8\u4f5c\u662f\u5728\u56de\u8c03\u51fd\u6570\u4e2d\u5b8c\u6210\u4e86\uff0c\u5373fn,fn\u5373find_symbol_in_section /* Returns true as soon as fn returns true, otherwise false. */ bool each_symbol_section(bool (*fn)(const struct symsearch *arr, struct module *owner, void *data), void *data) { struct module *mod; static const struct symsearch arr[] = { { __start___ksymtab, __stop___ksymtab, __start___kcrctab, NOT_GPL_ONLY, false }, { __start___ksymtab_gpl, __stop___ksymtab_gpl, __start___kcrctab_gpl, GPL_ONLY, false }, { __start___ksymtab_gpl_future, __stop___ksymtab_gpl_future, __start___kcrctab_gpl_future, WILL_BE_GPL_ONLY, false }, #ifdef CONFIG_UNUSED_SYMBOLS { __start___ksymtab_unused, __stop___ksymtab_unused, __start___kcrctab_unused, NOT_GPL_ONLY, true }, { __start___ksymtab_unused_gpl, __stop___ksymtab_unused_gpl, __start___kcrctab_unused_gpl, GPL_ONLY, true }, #endif }; if (each_symbol_in_section(arr, ARRAY_SIZE(arr), NULL, fn, data)) return true; list_for_each_entry_rcu(mod, &modules, list) { struct symsearch arr[] = { { mod->syms, mod->syms + mod->num_syms, mod->crcs, NOT_GPL_ONLY, false }, { mod->gpl_syms, mod->gpl_syms + mod->num_gpl_syms, mod->gpl_crcs, GPL_ONLY, false }, { mod->gpl_future_syms, mod->gpl_future_syms + mod->num_gpl_future_syms, mod->gpl_future_crcs, WILL_BE_GPL_ONLY, false }, #ifdef CONFIG_UNUSED_SYMBOLS { mod->unused_syms, mod->unused_syms + mod->num_unused_syms, mod->unused_crcs, NOT_GPL_ONLY, true }, { mod->unused_gpl_syms, mod->unused_gpl_syms + mod->num_unused_gpl_syms, mod->unused_gpl_crcs, GPL_ONLY, true }, #endif }; if (mod->state == MODULE_STATE_UNFORMED) continue; if (each_symbol_in_section(arr, ARRAY_SIZE(arr), mod, fn, data)) return true; } return false; } EXPORT_SYMBOL_GPL(each_symbol_section); find_symbol_in_section\u6267\u884c\u4e86\u6700\u7ec8\u7684\u67e5\u627e\uff0c\u5982\u679c\u662f\u666e\u901a\u7684\u67e5\u627e\u65b9\u6cd5\uff0c\u90a3\u6548\u7387\u662f\u4e0d\u662f\u592a\u4f4e\u4e86\u70b9\u513f\uff0c\u6211\u4eec\u524d\u9762\u5df2\u7ecf\u8bf4\u8fc7\u4e86\uff0c\u67e5\u627e\u7684key\u662f\u7b26\u53f7\u540d\u79f0\uff0c\u53ef\u80fd\u662f\u4e2a\u5b57\u7b26\u4e32\u5339\u914d\uff0c\u4f46\u6211\u4eec\u8fd8\u662f\u5c0f\u770b\u4e86\u5185\u6838\uff0cfind_symbol_in_section\u4e2d\u4f7f\u7528\u4e86\u4e8c\u5206\u67e5\u627e\u6cd5\u6765\u5339\u914d\u7b26\u53f7\uff0c\u96be\u9053\u5bfc\u51fa\u7b26\u53f7\u8868\u8fd8\u662f\u6709\u5e8f\u7684\uff1f\u5f53\u7136\u4e86\uff0c\u5176\u5b9e\u6211\u4eec\u524d\u9762\u5df2\u7ecf\u7ed9\u51fa\u4e86\u53ef\u4ee5\u4e8c\u5206\u67e5\u627e\u7684\u539f\u56e0\uff0c\u53ea\u662f\u6ca1\u6709\u8bf4\u7834\uff0c\u5728\u94fe\u63a5\u811a\u672c\u4e2d\u5728\u628a\u6240\u6709\u7684\u76ee\u6807\u6587\u4ef6\u4e2d\u5bfc\u51fa\u7684\u7b26\u53f7\u5168\u90e8\u653e\u5230\u5185\u6838\u540d\u4e3a\u201c__ksymtab\u201d\u7684section\u4e2d\u65f6\u662f\u8fd9\u6837\u5199\u7684\uff1a (SORT(___ksymtab+ ))\uff0c\u4f7f\u7528\u4e86SORT\u8fdb\u884c\u4e86\u6392\u5e8f\uff0c\u800c\u4e14\u8fd9\u662f\u4e00\u4e2a\u5347\u5e8f\u6392\u5217\u3002 static bool find_symbol_in_section(const struct symsearch *syms, struct module *owner, void *data) { struct find_symbol_arg *fsa = data; struct kernel_symbol *sym; sym = bsearch(fsa->name, syms->start, syms->stop - syms->start, sizeof(struct kernel_symbol), cmp_name); if (sym != NULL && check_symbol(syms, owner, sym - syms->start, data)) return true; return false; } \u63a5\u4e0b\u6765\u8981\u5e72\u4ec0\u4e48\u5e94\u8be5\u4e5f\u5f88\u660e\u786e\u4e86\uff0c\u7b26\u53f7\u8868\u90fd\u6536\u62fe\u597d\u4e86\uff0c\u6293\u7d27\u628a\u6240\u6709section\u4e2d\u7684\u9700\u8981\u91cd\u5b9a\u5411\u7684\u7b26\u53f7\u8fdb\u884c\u91cd\u5b9a\u5411\u5427\u3002\u4e0d\u8fc7\u5728\u8fd9\u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u662f\u9700\u8981\u666e\u53ca\u4e00\u4e2a\u77e5\u8bc6\uff0cELF\u6587\u4ef6\u7684\u91cd\u5b9a\u5411\u8868\uff0c\u53ea\u6709\u660e\u786e\u4e86\u91cd\u5b9a\u5411\u8868\uff0c\u624d\u80fd\u7406\u89e3\u5230\u5e95\u662f\u5982\u4f55\u91cd\u5b9a\u5411\u7684\u3002\u8fd9\u91cc\u8fd8\u662f\u57fa\u4e8earm\u6765\u8bb2\uff0c\u5176\u4ed6\u7684arch\u6ca1\u6709\u63a2\u7a76\uff0c\u4e0d\u786e\u5b9a\u662f\u4e0d\u662f\u5982\u6b64\u5b9a\u4e49\u7684\u3002 \u91cd\u5b9a\u5411\u8868elf_rel typedef struct elf32_rel { Elf32_Addr r_offset; Elf32_Word r_info; } Elf32_Rel; r_offset \u6307\u660e\u91cd\u5b9a\u4f4d\u6240\u4f5c\u7528\u7684\u4f4d\u7f6e\uff0c\u662f\u91cd\u5b9a\u4f4d\u8868\u6240\u4f5c\u7528\u7684section\u4e2d\u7b26\u53f7\u7684\u504f\u79fb r_info \u7684\u9ad824\u4f4d\u6307\u793a\u4e86\u6307\u793a\u4e86\u91cd\u5b9a\u5411\u7684\u7b26\u53f7\u5728\u7b26\u53f7\u8868\u4e2d\u7684index\uff08\u6ce8\u610f\u662findex\uff0c\u4e0d\u662f\u5b57\u8282\u504f\u79fb\uff09, \u4f4e8\u4f4d\u6307\u793a\u4e86\u91cd\u5b9a\u5411\u7684\u7c7b\u578b apply_relocations \u6267\u884c\u8fd9\u4e2a\u7684\u5c31\u662fapply_relocations\uff0c \u6700\u7ec8\u6267\u884c\u7684apply_relocate\u6216apply_relocate_add\u662f\u4e0earch\u6709\u5173\u7684\u51fd\u6570\u3002\u91cd\u5b9a\u4f4d\u8868\u7684sh_info \u6307\u793a\u4e86\u6240\u4f5c\u7528\u7684section\u5728section header table\u4e2d\u7684index, \u6211\u4eec\u79f0\u4e4b\u4e3a\u76ee\u6807section\uff0c \u76ee\u6807 section \u7684 sh_flags \u4e00\u5b9a\u5e26\u6709SHF_ALLOC \u6807\u8bb0\uff0c \u6839\u636e\u91cd\u5b9a\u4f4d section\u7684sh_type\u4e0d\u540c\uff0c\u53ef\u4ee5\u5206\u4e3aSHT_REL\u548cSHT_RELA\u4e24\u79cd\u91cd\u5b9a\u4f4dsection,\u8fd9\u91cc\u6211\u4eec\u53ea\u5173\u6ce8SHT_REL\u8fd9\u4e00\u79cd\u3002 static int apply_relocations(struct module *mod, const struct load_info *info) { unsigned int i; int err = 0; /* Now do relocations. */ for (i = 1; i < info->hdr->e_shnum; i++) { unsigned int infosec = info->sechdrs[i].sh_info; /* Not a valid relocation section? */ if (infosec >= info->hdr->e_shnum) continue; /* Don't bother with non-allocated sections */ if (!(info->sechdrs[infosec].sh_flags & SHF_ALLOC)) continue; if (info->sechdrs[i].sh_type == SHT_REL) err = apply_relocate(info->sechdrs, info->strtab, info->index.sym, i, mod); else if (info->sechdrs[i].sh_type == SHT_RELA) err = apply_relocate_add(info->sechdrs, info->strtab, info->index.sym, i, mod); if (err < 0) break; } return err; } \u91cd\u70b9\u6765\u770barm\u662f\u5982\u4f55\u5b9e\u73b0\u7684relocate\u3002\u904d\u5386\u91cd\u5b9a\u5411section, \u901a\u8fc7rel->r_info\u6765\u5f97\u5230\u7b26\u53f7\u5728\u7b26\u53f7\u8868\u4e2d\u7684index\uff0c \u7136\u540e\u4ece\u7b26\u53f7\u8868\u4e2d\u627e\u5230\u5bf9\u5e94\u7b26\u53f7\uff0c\u6839\u636e\u91cd\u5b9a\u5411section\u7684sh_info\u627e\u5230\u76ee\u6807section\uff0c\u7136\u540e\u6839\u636erel->r_offset\u627e\u5230\u76ee\u6807\u7b26\u53f7\u7684\u8fd0\u884c\u5730\u5740\u5b58\u653e\u5904\uff0c\u7136\u540e\u6839\u636e\u4e0d\u540c\u7684\u91cd\u5b9a\u5411\u7c7b\u578b\u4fee\u6539\u8fd9\u4e2a\u5730\u5740\u503c\u3002\u8fd9\u91cc\u4e0d\u505a\u5177\u4f53\u5c55\u5f00\uff0c\u53ea\u63d0\u4e00\u70b9\uff0cR_ARM_PC24\uff0cR_ARM_CALL\uff0cR_ARM_JUMP24\u90fd\u662f\u76f4\u63a5\u5bfb\u5740\u7684\u91cd\u5b9a\u5411\u7c7b\u578b\uff0c\u76f4\u63a5\u5bfb\u5740\u957f\u5ea6\u4e0d\u80fd\u8d85\u8fc732MB, \u5373\u7b26\u53f7\u7684\u8c03\u7528\u4f4d\u7f6e\u548c\u5b58\u50a8\u4f4d\u7f6e\u4e4b\u95f4\u7684\u95f4\u9694\u4e0d\u80fd\u8d85\u8fc732M, \u53ef\u4ee5\u901a\u8fc7gcc\u7f16\u8bd1\u9009\u9879-mlong-calls\u6765\u5f3a\u5236\u4e0d\u4ea7\u751f\u8fd9\u79cd\u91cd\u5b9a\u5411\u7c7b\u578b\u3002 linux-3.10.70\\arch\\arm\\kernel\\module.c int apply_relocate(Elf32_Shdr *sechdrs, const char *strtab, unsigned int symindex, unsigned int relindex, struct module *module) { Elf32_Shdr *symsec = sechdrs + symindex; Elf32_Shdr *relsec = sechdrs + relindex; Elf32_Shdr *dstsec = sechdrs + relsec->sh_info; Elf32_Rel *rel = (void *)relsec->sh_addr; unsigned int i; for (i = 0; i < relsec->sh_size / sizeof(Elf32_Rel); i++, rel++) { unsigned long loc; Elf32_Sym *sym; const char *symname; s32 offset; #ifdef CONFIG_THUMB2_KERNEL u32 upper, lower, sign, j1, j2; #endif offset = ELF32_R_SYM(rel->r_info); if (offset < 0 || offset > (symsec->sh_size / sizeof(Elf32_Sym))) { pr_err(\"%s: section %u reloc %u: bad relocation sym offset\\n\", module->name, relindex, i); return -ENOEXEC; } sym = ((Elf32_Sym *)symsec->sh_addr) + offset; symname = strtab + sym->st_name; if (rel->r_offset < 0 || rel->r_offset > dstsec->sh_size - sizeof(u32)) { pr_err(\"%s: section %u reloc %u sym '%s': out of bounds relocation, offset %d size %u\\n\", module->name, relindex, i, symname, rel->r_offset, dstsec->sh_size); return -ENOEXEC; } loc = dstsec->sh_addr + rel->r_offset; switch (ELF32_R_TYPE(rel->r_info)) { case R_ARM_NONE: /* ignore */ break; case R_ARM_ABS32: *(u32 *)loc += sym->st_value; break; case R_ARM_PC24: case R_ARM_CALL: case R_ARM_JUMP24: offset = (*(u32 *)loc & 0x00ffffff) << 2; if (offset & 0x02000000) offset -= 0x04000000; offset += sym->st_value - loc; if (offset & 3 || offset <= (s32)0xfe000000 || offset >= (s32)0x02000000) { pr_err(\"%s: section %u reloc %u sym '%s': relocation %u out of range (%#lx -> %#x)\\n\", module->name, relindex, i, symname, ELF32_R_TYPE(rel->r_info), loc, sym->st_value); return -ENOEXEC; } offset >>= 2; *(u32 *)loc &= 0xff000000; *(u32 *)loc |= offset & 0x00ffffff; break; case R_ARM_V4BX: /* Preserve Rm and the condition code. Alter * other bits to re-code instruction as * MOV PC,Rm. */ *(u32 *)loc &= 0xf000000f; *(u32 *)loc |= 0x01a0f000; break; case R_ARM_PREL31: offset = *(u32 *)loc + sym->st_value - loc; *(u32 *)loc = offset & 0x7fffffff; break; case R_ARM_MOVW_ABS_NC: case R_ARM_MOVT_ABS: offset = *(u32 *)loc; offset = ((offset & 0xf0000) >> 4) | (offset & 0xfff); offset = (offset ^ 0x8000) - 0x8000; offset += sym->st_value; if (ELF32_R_TYPE(rel->r_info) == R_ARM_MOVT_ABS) offset >>= 16; *(u32 *)loc &= 0xfff0f000; *(u32 *)loc |= ((offset & 0xf000) << 4) | (offset & 0x0fff); break; #ifdef CONFIG_THUMB2_KERNEL case R_ARM_THM_CALL: case R_ARM_THM_JUMP24: upper = *(u16 *)loc; lower = *(u16 *)(loc + 2); /* * 25 bit signed address range (Thumb-2 BL and B.W * instructions): * S:I1:I2:imm10:imm11:0 * where: * S = upper[10] = offset[24] * I1 = ~(J1 ^ S) = offset[23] * I2 = ~(J2 ^ S) = offset[22] * imm10 = upper[9:0] = offset[21:12] * imm11 = lower[10:0] = offset[11:1] * J1 = lower[13] * J2 = lower[11] */ sign = (upper >> 10) & 1; j1 = (lower >> 13) & 1; j2 = (lower >> 11) & 1; offset = (sign << 24) | ((~(j1 ^ sign) & 1) << 23) | ((~(j2 ^ sign) & 1) << 22) | ((upper & 0x03ff) << 12) | ((lower & 0x07ff) << 1); if (offset & 0x01000000) offset -= 0x02000000; offset += sym->st_value - loc; /* * For function symbols, only Thumb addresses are * allowed (no interworking). * * For non-function symbols, the destination * has no specific ARM/Thumb disposition, so * the branch is resolved under the assumption * that interworking is not required. */ if ((ELF32_ST_TYPE(sym->st_info) == STT_FUNC && !(offset & 1)) || offset <= (s32)0xff000000 || offset >= (s32)0x01000000) { pr_err(\"%s: section %u reloc %u sym '%s': relocation %u out of range (%#lx -> %#x)\\n\", module->name, relindex, i, symname, ELF32_R_TYPE(rel->r_info), loc, sym->st_value); return -ENOEXEC; } sign = (offset >> 24) & 1; j1 = sign ^ (~(offset >> 23) & 1); j2 = sign ^ (~(offset >> 22) & 1); *(u16 *)loc = (u16)((upper & 0xf800) | (sign << 10) | ((offset >> 12) & 0x03ff)); *(u16 *)(loc + 2) = (u16)((lower & 0xd000) | (j1 << 13) | (j2 << 11) | ((offset >> 1) & 0x07ff)); break; case R_ARM_THM_MOVW_ABS_NC: case R_ARM_THM_MOVT_ABS: upper = *(u16 *)loc; lower = *(u16 *)(loc + 2); /* * MOVT/MOVW instructions encoding in Thumb-2: * * i = upper[10] * imm4 = upper[3:0] * imm3 = lower[14:12] * imm8 = lower[7:0] * * imm16 = imm4:i:imm3:imm8 */ offset = ((upper & 0x000f) << 12) | ((upper & 0x0400) << 1) | ((lower & 0x7000) >> 4) | (lower & 0x00ff); offset = (offset ^ 0x8000) - 0x8000; offset += sym->st_value; if (ELF32_R_TYPE(rel->r_info) == R_ARM_THM_MOVT_ABS) offset >>= 16; *(u16 *)loc = (u16)((upper & 0xfbf0) | ((offset & 0xf000) >> 12) | ((offset & 0x0800) >> 1)); *(u16 *)(loc + 2) = (u16)((lower & 0x8f00) | ((offset & 0x0700) << 4) | (offset & 0x00ff)); break; #endif default: printk(KERN_ERR \"%s: unknown relocation: %u\\n\", module->name, ELF32_R_TYPE(rel->r_info)); return -ENOEXEC; } } return 0; } \u81f3\u6b64\uff0c\u6700\u4e3a\u8270\u82e6\u7684\u957f\u5f81\u8def\u5b8c\u6210\u4e86\uff0c\u5269\u4e0b\u7684\u90fd\u662f\u8f83\u4e3a\u8f7b\u677e\u7684\u5de5\u4f5c\u4e86\uff0c\u5173\u4e8edo_init_module\u7684\u64cd\u4f5c\uff0c\u5c31\u4e0d\u5728\u8fd9\u91cc\u505a\u4ecb\u7ecd\u4e86\uff0c\u8fd9\u6b21\u52a0\u8f7d\u6d41\u7a0b\u89e3\u6790\u5c31\u5148\u5230\u8fd9\u91cc\u3002","title":"arm linux \u5185\u6838\u6a21\u5757\u52a0\u8f7d\u8fc7\u7a0b\u8be6\u89e3"},{"location":"linux/arm-linux-kmodule-load.html#arm-linux","text":"arm linux \u5185\u6838\u6a21\u5757\u52a0\u8f7d\u8fc7\u7a0b\u8be6\u89e3 \u57fa\u7840\u73af\u5883 \u53c2\u8003\u8d44\u6599 what is ko linux module \u57fa\u672c\u64cd\u4f5c ELF of ko \u52a0\u8f7d\u8fc7\u7a0b \u4ece\u5185\u5b58\u9759\u6001\u89c6\u56fe\u770b\u6a21\u5757\u52a0\u8f7d \u7b80\u8981\u52a0\u8f7d\u6d41\u7a0b\u56fe \u8be6\u7ec6\u52a0\u8f7d\u8fc7\u7a0b","title":"arm linux \u5185\u6838\u6a21\u5757\u52a0\u8f7d\u8fc7\u7a0b\u8be6\u89e3"},{"location":"linux/arm-linux-kmodule-load.html#_1","text":"kernel version\uff1a3.10.70 ARCH\uff1aarm","title":"\u57fa\u7840\u73af\u5883"},{"location":"linux/arm-linux-kmodule-load.html#_2","text":"\u300a\u6df1\u5165Linux\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u5185\u6838\u673a\u5236\u300b \u300alinux\u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3\u300b http://www.cnblogs.com/xmphoenix/archive/2011/10/23/2221879.html http://www.cnblogs.com/LittleHann/p/3920387.html http://www.cnblogs.com/LittleHann/p/3871092.html","title":"\u53c2\u8003\u8d44\u6599"},{"location":"linux/arm-linux-kmodule-load.html#what-is-ko","text":"Kernel modules are small pieces of compiled code which can be inserted in the running kernel, rather than being permanently built into the kernel . ko\u6587\u4ef6\u5728\u6570\u636e\u7ec4\u7ec7\u5f62\u5f0f\u4e0a\u662fELF(Excutable And Linking Format)\u683c\u5f0f\uff0c\u662f\u4e00\u79cd\u666e\u901a\u7684\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u3002","title":"what is ko"},{"location":"linux/arm-linux-kmodule-load.html#linux-module","text":"busybox \u4e2d\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7684\u76f8\u5173\u7684\u64cd\u4f5c\u5de5\u5177 insmod \u5c06\u6a21\u5757\u52a0\u8f7d\u5230\u5185\u6838\u4e2d modprobe \u5c06\u6a21\u5757\u52a0\u8f7d\u5230\u5185\u6838\u4e2d\u5e76\u4e14\u81ea\u52a8\u5904\u7406\u6a21\u5757\u95f4\u4f9d\u8d56\u5173\u7cfb lsmod \u5217\u51fa\u52a0\u8f7d\u5230\u5185\u6838\u4e2d\u7684\u6240\u6709\u6a21\u5757 depmod \u66f4\u65b0\u6a21\u5757\u95f4\u4f9d\u8d56\u5173\u7cfb rmmod \u79fb\u9664\u6a21\u5757 modinfo \u67e5\u770b\u6a21\u5757\u4fe1\u606f","title":"linux module \u57fa\u672c\u64cd\u4f5c"},{"location":"linux/arm-linux-kmodule-load.html#elf-of-ko","text":"\u4e3a\u4e86\u5e2e\u52a9\u66f4\u597d\u7684\u7406\u89e3\u6a21\u5757\u7b26\u53f7\u5bfc\u51fa\uff0c\u91cd\u5b9a\u5411\u7b49\u7ec6\u8282\uff0c\u6709\u5fc5\u8981\u5728\u8fd9\u91cc\u5bf9ELF\u6587\u4ef6\u505a\u4e00\u4e9b\u4ecb\u7ecd\uff0c \u4e0b\u9762\u7684ELF\u6587\u4ef6\u683c\u5f0f\u662fKO\u6587\u4ef6\u7684\u6620\u50cf\u89c6\u56fe\u3002 \u4f7f\u7528 readelf \u5de5\u5177\u53ef\u4ee5\u67e5\u770belf\u6587\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f \u8bfb\u53d6ko\u6587\u4ef6\u7684ELF\u5934,\u6211\u4eec\u53ef\u4ee5\u770b\u5230magic, \u76ee\u6807cpu\u67b6\u6784\uff0c\u7c7b\u578b\uff0c\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u4fe1\u606f,\u56e0\u4e3a\u662fKO\u6587\u4ef6\uff0c\u6240\u4ee5 \u7a0b\u5e8f\u5934\u8868\u957f\u5ea6\u4e3a0\uff0c\u53ea\u6709\u8282\u533a\u5934\u8868 readelf -h kdbg.ko ELF Header: Magic: 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 Class: ELF32 Data: 2's complement, little endian Version: 1 (current) OS/ABI: UNIX - System V ABI Version: 0 Type: REL (Relocatable file) Machine: ARM Version: 0x1 Entry point address: 0x0 Start of program headers: 0 (bytes into file) Start of section headers: 56788 (bytes into file) Flags: 0x5000000, Version5 EABI Size of this header: 52 (bytes) Size of program headers: 0 (bytes) Number of program headers: 0 Size of section headers: 40 (bytes) Number of section headers: 47 Section header string table index: 44 \u8bfb\u53d6\u8282\u533a\u5934\u90e8\u8868 readelf -S kdbg.ko There are 47 section headers, starting at offset 0xddd4: Section Headers: [Nr] Name Type Addr Off Size ES Flg Lk Inf Al [ 0] NULL 00000000 000000 000000 00 0 0 0 [ 1] .text PROGBITS 00000000 000034 000794 00 AX 0 0 4 [ 2] .rel.text REL 00000000 00e52c 000218 08 45 1 4 [ 3] .init.text PROGBITS 00000000 0007c8 0000c4 00 AX 0 0 4 [ 4] .rel.init.text REL 00000000 00e744 000050 08 45 3 4 [ 5] .exit.text PROGBITS 00000000 00088c 000038 00 AX 0 0 4 [ 6] .rel.exit.text REL 00000000 00e794 000018 08 45 5 4 [ 7] .note.gnu.build-i NOTE 00000000 0008c4 000024 00 A 0 0 4 [ 8] __ksymtab PROGBITS 00000024 0008e8 000008 00 A 0 0 4 [ 9] .rel__ksymtab REL 00000000 00e7ac 000010 08 45 8 4 [10] .ARM.extab PROGBITS 00000000 0008f0 000018 00 A 0 0 4 [11] .ARM.exidx ARM_EXIDX 00000000 000908 000080 00 AL 1 0 4 [12] .rel.ARM.exidx REL 00000000 00e7bc 0000a0 08 45 11 4 [13] .ARM.extab.init.t PROGBITS 00000000 000988 000000 00 A 0 0 1 [14] .ARM.exidx.init.t ARM_EXIDX 00000000 000988 000008 00 AL 3 0 4 [15] .rel.ARM.exidx.in REL 00000000 00e85c 000010 08 45 14 4 [16] .ARM.extab.exit.t PROGBITS 00000000 000990 000000 00 A 0 0 1 [17] .ARM.exidx.exit.t ARM_EXIDX 00000000 000990 000008 00 AL 5 0 4 [18] .rel.ARM.exidx.ex REL 00000000 00e86c 000010 08 45 17 4 [19] .modinfo PROGBITS 00000000 000998 00007c 00 A 0 0 4 [20] __ksymtab_strings PROGBITS 00000000 000a14 00000f 00 A 0 0 1 [21] .rodata.str1.4 PROGBITS 00000000 000a24 000250 01 AMS 0 0 4 [22] .data PROGBITS 00000000 000c74 000074 00 WA 0 0 4 [23] .rel.data REL 00000000 00e87c 000028 08 45 22 4 [24] .gnu.linkonce.thi PROGBITS 00000000 000ce8 000158 00 WA 0 0 4 [25] .rel.gnu.linkonce REL 00000000 00e8a4 000010 08 45 24 4 [26] .bss NOBITS 00000000 000e40 00003c 00 WA 0 0 4 [27] .debug_frame PROGBITS 00000000 000e40 0001e0 00 0 0 4 [28] .rel.debug_frame REL 00000000 00e8b4 000120 08 45 27 4 [29] .debug_info PROGBITS 00000000 001020 0073e4 00 0 0 1 [30] .rel.debug_info REL 00000000 00e9d4 003510 08 45 29 4 [31] .debug_abbrev PROGBITS 00000000 008404 000742 00 0 0 1 [32] .debug_loc PROGBITS 00000000 008b46 000630 00 0 0 1 [33] .rel.debug_loc REL 00000000 011ee4 000680 08 45 32 4 [34] .debug_aranges PROGBITS 00000000 009176 000030 00 0 0 1 [35] .rel.debug_arange REL 00000000 012564 000020 08 45 34 4 [36] .debug_ranges PROGBITS 00000000 0091a6 000088 00 0 0 1 [37] .rel.debug_ranges REL 00000000 012584 0000c0 08 45 36 4 [38] .debug_line PROGBITS 00000000 00922e 000997 00 0 0 1 [39] .rel.debug_line REL 00000000 012644 000018 08 45 38 4 [40] .debug_str PROGBITS 00000000 009bc5 003f70 01 MS 0 0 1 [41] .comment PROGBITS 00000000 00db35 000094 01 MS 0 0 1 [42] .note.GNU-stack PROGBITS 00000000 00dbc9 000000 00 0 0 1 [43] .ARM.attributes ARM_ATTRIBUTES 00000000 00dbc9 000031 00 0 0 1 [44] .shstrtab STRTAB 00000000 00dbfa 0001d8 00 0 0 1 [45] .symtab SYMTAB 00000000 01265c 0007b0 10 46 81 4 [46] .strtab STRTAB 00000000 012e0c 0002e4 00 0 0 1 Key to Flags: W (write), A (alloc), X (execute), M (merge), S (strings) I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown) O (extra OS processing required) o (OS specific), p (processor specific) \u8fd9\u91cc\u5bf9\u90e8\u5206\u8282\u533a\u505a\u4e00\u4e9b\u8bf4\u660e .rel.xxxxx \u5bf9\u5e94xxxxx section\u7684relocate\u8868\uff0c\u7528\u4e8e\u7b26\u53f7\u91cd\u5b9a\u4f4d,\u6bd4\u5982\u8bf4 .rel.text \u5c31\u662f .text \u7684\u91cd\u5b9a\u5411\u8868\u6240\u5728\u7684\u8282\u533a readelf -r kdbg.ko Relocation section '.rel.text' at offset 0xe52c contains 67 entries: Offset Info Type Sym.Value Sym. Name 00000050 00000e02 R_ARM_ABS32 00000000 .rodata.str1.4 00000054 00005802 R_ARM_ABS32 00000000 memcpy 00000058 00006902 R_ARM_ABS32 00000000 printk 0000005c 00000e02 R_ARM_ABS32 00000000 .rodata.str1.4 00000120 00006c02 R_ARM_ABS32 00000000 _ctype 00000124 00007502 R_ARM_ABS32 00000000 strlen 000001c8 00007502 R_ARM_ABS32 00000000 strlen 000001cc 00006402 R_ARM_ABS32 00000000 match_int 000001d0 00006c02 R_ARM_ABS32 00000000 _ctype 000001d4 00007302 R_ARM_ABS32 00000000 match_hex 000001fc 0000521c R_ARM_CALL 00000128 parse_interger 0000023c 00006302 R_ARM_ABS32 00000000 kallsyms_lookup_name 00000290 0000741c R_ARM_CALL 00000060 str_trim 0000029c 0000521c R_ARM_CALL 00000128 parse_interger .symtab \u6a21\u5757\u4e2d\u6240\u6709\u7684\u7b26\u53f7\u8bb0\u5f55\u90fd\u5728\u8fd9\u91cc\u9762 readelf -s ssp.ko | more Symbol table '.symtab' contains 53529 entries: Num: Value Size Type Bind Vis Ndx Name 0: 00000000 0 NOTYPE LOCAL DEFAULT UND 1: 00000000 0 SECTION LOCAL DEFAULT 1 2: 00000000 0 SECTION LOCAL DEFAULT 3 3: 00000000 0 SECTION LOCAL DEFAULT 5 4: 00000000 0 SECTION LOCAL DEFAULT 7 5: 00000000 0 SECTION LOCAL DEFAULT 8 6: 00000000 0 SECTION LOCAL DEFAULT 10 7: 00000000 0 SECTION LOCAL DEFAULT 13 8: 00000000 0 SECTION LOCAL DEFAULT 23 9: 00000000 0 SECTION LOCAL DEFAULT 24 10: 00000000 0 SECTION LOCAL DEFAULT 31 11: 00000000 0 NOTYPE LOCAL DEFAULT 1 $a 12: 00000088 0 NOTYPE LOCAL DEFAULT 1 $d 13: 00000000 0 NOTYPE LOCAL DEFAULT 28 $d 14: 00000098 0 NOTYPE LOCAL DEFAULT 1 $a 15: 00000150 0 NOTYPE LOCAL DEFAULT 1 $d 16: 00000164 0 NOTYPE LOCAL DEFAULT 1 $a .shstrtab \u8282\u533a\u540d\u79f0\u5b57\u7b26\u4e32\u8868\uff0c\u6240\u6709\u7684\u8282\u533a\u540d\u79f0\u5b57\u7b26\u4e32\u90fd\u653e\u5728\u8fd9\u91cc readelf -p 35 ssp.ko String dump of section '.shstrtab': [ 1] .symtab [ 9] .strtab [ 11] .shstrtab [ 1b] .rel.text [ 25] .rel.text.unlikely [ 38] .rel.init.text [ 47] .rel.rodata [ 53] .rodata.str1.4 [ 62] .rel.pv_table [ 70] .ARM.extab.text.unlikely [ 89] .rel.ARM.exidx.text.unlikely [ a6] .ARM.extab.init.text [ bb] .rel.ARM.exidx.init.text [ d4] .ARM.extab.exit.text [ e9] .rel.ARM.exidx.exit.text [ 102] .modinfo [ 10b] .ARM.extab [ 116] .rel.data [ 120] .rel.gnu.linkonce.this_module [ 13e] .rel.ARM.exidx [ 14d] .note.gnu.build-id [ 160] .bss [ 165] .comment [ 16e] .note.GNU-stack [ 17e] .ARM.attributes .strtab \u7b26\u53f7\u540d\u79f0\u5b57\u7b26\u4e32\u8868\uff0c\u8fd9\u91cc\u8bb0\u5f55\u4e86\u6240\u6709\u7684\u7b26\u53f7\u7684\u540d\u79f0\u5b57\u7b26\u4e32,\u5176\u683c\u5f0f\u5373\u5b57\u7b26\u4e32\u8868\u683c\u5f0f\uff0c\u548c\u8282\u533a\u5934\u90e8\u540d\u79f0\u5b57\u7b26\u4e32\u8868\u683c\u5f0f\u76f8\u540c\u3002 .gnu.linkonce.this_module struct module \u5b9e\u4f8b\u6240\u5728\u7684\u8282\u533a","title":"ELF of ko"},{"location":"linux/arm-linux-kmodule-load.html#_3","text":"\u4f7f\u7528insmod\u8fd9\u79cd\u547d\u4ee4\u6765\u52a0\u8f7d\u5185\u6838\u6a21\u5757\u65f6\uff0cinsmod\u4f1a\u5229\u7528\u6587\u4ef6\u7cfb\u7edf\u7684\u63a5\u53e3\u5148\u5c06\u6a21\u5757\u52a0\u8f7d\u5230\u7528\u6237\u7a7a\u95f4\u7684\u4e00\u6bb5\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528sys_init_module()\u6765\u6267\u884c\u5177\u4f53\u7684\u6a21\u5757\u52a0\u8f7d\u52a8\u4f5c\u3002\u6211\u4eec\u7684\u52a0\u8f7d\u8fc7\u7a0b\u5206\u6790\u4e5f\u5c31\u662f\u5bf9sys_init_module\u7684\u5206\u6790\u3002\u5728\u5bf9\u5177\u4f53\u4ee3\u7801\u7684\u5206\u6790\u4e2d\uff0c\u53bb\u6389\u4e86\u90e8\u5206\u4e0d\u91cd\u8981\u7684\u64cd\u4f5c\uff0c\u4e00\u662f\u51cf\u5c11\u4ee3\u7801\u957f\u5ea6\uff0c\u4e8c\u662f\u5c06\u5173\u6ce8\u7684\u91cd\u70b9\u653e\u5728\u4e3b\u8981\u52a0\u8f7d\u6d41\u7a0b\u4e0a\u3002\u4e3a\u4e86\u5148\u7ed9\u51fa\u4e00\u4e2a\u76f4\u89c2\u7684\u8ba4\u8bc6\uff0c\u5148\u4ece\u5185\u5b58\u9759\u6001\u89c6\u56fe\u7684\u89d2\u5ea6\u6765\u8bb2\u8ff0ko\u5728\u5185\u5b58\u4e2d\u7684\u642c\u79fb\u8fc7\u7a0b\uff0c\u7136\u540e\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u6d41\u7a0b\u56fe\u6765\u8bb2\u8ff0\u5927\u81f4\u7684\u8f6f\u4ef6\u6d41\u7a0b\uff0c\u6700\u540e\u9488\u5bf9\u5177\u4f53\u4ee3\u7801\u6765\u8bb2\u8ff0\u52a0\u8f7d\u8fc7\u7a0b\uff0c\u5728\u7ed3\u5408\u5177\u4f53\u4ee3\u7801\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5728\u7ed3\u5408\u4ee3\u7801\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9075\u5faa\u4ee3\u7801\u6267\u884c\u7684\u987a\u5e8f\uff0c\u4f46\u53ea\u4f1a\u5217\u51fa\u90e8\u5206\u7ec6\u8282\u5904\u7406\u7684\u4ee3\u7801\uff0c\u5bf9\u4e8e\u6574\u4f53\u7684\u51fd\u6570\u8c03\u7528\u6d41\u7a0b\u5728\u6587\u6863\u4e2d\u4e0d\u518d\u8d58\u8ff0\uff0c\u5927\u5bb6\u53ef\u4ee5\u76f4\u63a5\u53bb\u770b\u6e90\u7801\u3002","title":"\u52a0\u8f7d\u8fc7\u7a0b"},{"location":"linux/arm-linux-kmodule-load.html#_4","text":"\u4e3a\u4e86\u66f4\u5bb9\u6613\u8bb2\u660e\u767d\u5185\u6838\u6a21\u5757\u7684\u52a0\u8f7d\u6d41\u7a0b\uff0c\u8fd9\u91cc\u4ece\u5185\u5b58\u9759\u6001\u89c6\u56fe\u7684\u89d2\u5ea6\u7c97\u7565\u7684\u6765\u8bb2\u8ff0ko\u5728\u5185\u5b58\u4e2d\u7684\u642c\u79fb\u8fc7\u7a0b\uff0c\u8fd9\u6837\u53ef\u80fd\u4f1a\u6709\u4e00\u4e2a\u76f4\u89c2\u7684\u611f\u53d7\uff0c arm virtual memory layout \u9996\u5148insmod\u4f1a\u901a\u8fc7\u6587\u4ef6\u7cfb\u7edf\u5c06ko\u8bfb\u5230 user space\u7684\u4e00\u5757\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u8c03\u7528\u7cfb\u7edf\u8c03\u7528sys_init_module,\u8fd9\u65f6\uff0c\u5185\u6838\u5728vmalloc\u533a\u5206\u914d\u4e0eko\u6587\u4ef6\u5927\u5c0f\u76f8\u540c\u7684\u5185\u5b58\u6765\u6682\u5b58ko\u6587\u4ef6\uff0c\u6682\u5b58\u597d\u4e4b\u540e\u89e3\u6790ko\u6587\u4ef6\uff0c\u5c06\u6587\u4ef6\u4e2d\u7684\u5404\u4e2asection\u5206\u914d\u5230init \u6bb5\u548ccore \u6bb5\uff0c\u5728modules\u533a\u4e3ainit\u6bb5\u548ccore\u6bb5\u5206\u914d\u5185\u5b58\uff0c\u5e76\u628a\u5bf9\u5e94\u7684section copy\u5230modules\u533a\u6700\u7ec8\u7684\u8fd0\u884c\u5730\u5740\uff0c\u7ecf\u8fc7relocate\u51fd\u6570\u5730\u5740\u7b49\u64cd\u4f5c\u540e\uff0c\u5c31\u53ef\u4ee5\u6267\u884cko\u7684init\u64cd\u4f5c\u4e86\uff0c\u8fd9\u6837\u4e00\u4e2ako\u7684\u52a0\u8f7d\u6d41\u7a0b\u5c31\u7ed3\u675f\u4e86\uff0c\u540c\u65f6\uff0cinit\u6bb5\u4f1a\u88ab\u91ca\u653e\u6389\uff0c\u4ec5\u7559\u4e0bcore\u6bb5\u6765\u8fd0\u884c\u3002","title":"\u4ece\u5185\u5b58\u9759\u6001\u89c6\u56fe\u770b\u6a21\u5757\u52a0\u8f7d"},{"location":"linux/arm-linux-kmodule-load.html#_5","text":"\u901a\u8fc7\u7b80\u8981\u52a0\u8f7d\u6d41\u7a0b\uff0c\u53ef\u4ee5\u5927\u81f4\u6e05\u695a\u8f6f\u4ef6\u90fd\u505a\u4e86\u54ea\u4e9b\u5de5\u4f5c","title":"\u7b80\u8981\u52a0\u8f7d\u6d41\u7a0b\u56fe"},{"location":"linux/arm-linux-kmodule-load.html#_6","text":"sys_init_module\u7684\u5b9e\u73b0 linux-3.10.70\\kernel\\module.c /** * @brief \u7cfb\u7edf\u8c03\u7528 sys_init_module \u7684\u53c2\u6570\u5b9a\u4e49 * @param umod \u7528\u6237\u7a7a\u95f4 ko \u6a21\u5757\u8d77\u59cb\u5730\u5740 * @param len ko\u6a21\u5757\u5927\u5c0f * @param uargs \u4f20\u7ed9\u6a21\u5757\u7684\u53c2\u6570\u5728\u7528\u6237\u7a7a\u95f4\u4e0b\u7684\u5730\u5740 */ SYSCALL_DEFINE3(init_module, void __user *, umod, unsigned long, len, const char __user *, uargs) { struct load_info info = { }; /* \u901a\u8fc7vmalloc\u5728vmalloc\u533a\u5206\u914d\u5185\u5b58\u7a7a\u95f4\uff0c\u5c06\u5185\u6838\u6a21\u5757copy\u5230\u6b64\u7a7a\u95f4\uff0c info->hdr \u76f4\u63a5\u6307\u5411\u6b64\u7a7a\u95f4\u9996\u5730\u5740\uff0c\u4e5f\u5c31\u662fko\u7684elf header */ copy_module_from_user(umod, len, &info); // \u6a21\u5757\u52a0\u8f7d\u7684\u6838\u5fc3\u5904\u7406\u65b9\u6cd5,\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u5728\u8fd9\u91cc\u5b8c\u6210 return load_module(&info, uargs, 0); } load_module() \u6a21\u5757\u52a0\u8f7d\u7684\u6838\u5fc3\u5904\u7406\uff0c\u5728\u8fd9\u91cc\u5b8c\u6210\u4e86\u6a21\u5757\u7684\u642c\u79fb\uff0c\u91cd\u5b9a\u5411\u7b49\u8270\u82e6\u7684\u8fc7\u7a0b\u3002\u5728\u8bb2\u8ff0\u8fd9\u4e2a\u8fc7\u7a0b\u4e4b\u524d\uff0c\u9700\u8981\u5148\u4e86\u89e3\u5185\u6838\u6a21\u5757\u76f8\u5173\u7684\u4e24\u4e2a\u91cd\u8981\u7ed3\u6784\u4f53\uff0c struct load_info \u548c struct module struct load_info load_info\u7c7b\u4f3c\u4e8e ko \u6587\u4ef6\u7684\u4e00\u4e2a\u53e5\u67c4\uff08\u7528\u62bd\u8c61\u6765\u63cf\u8ff0\u611f\u89c9\u4e0d\u592a\u6070\u5f53\uff0c\u53c8\u60f3\u4e0d\u51fa\u4ec0\u4e48\u597d\u7684\u5f62\u5bb9\u8bcd\uff09, \u5176\u4e2d\u5305\u542b\u4e86ko\u6587\u4ef6\u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u7684\u6240\u6709\u6709\u7528\u4fe1\u606f linux-3.10.70\\kernel\\module.c struct load_info { Elf_Ehdr *hdr; // ELF\u6587\u4ef6\u5934 unsigned long len; // \u6587\u4ef6\u957f\u5ea6\uff0c\u4f3c\u4e4e\u9664\u4e86\u6821\u9a8c\u7684\u65f6\u5019\u7528\u4e86\u4e00\u4e0b\uff0c\u518d\u4e5f\u6ca1\u7528\u8fc7 Elf_Shdr *sechdrs; // \u8282\u533a\u5934\u90e8\u8868 char *secstrings, *strtab; // section \u540d\u79f0\u8868\uff0c \u5b57\u7b26\u540d\u79f0\u8868 unsigned long symoffs, stroffs; // \u7b26\u53f7\u8868\uff0c\u5b57\u7b26\u4e32\u8868\u5728\u6700\u7ec8core section\u4e2d\u7684\u504f\u79fb struct _ddebug *debug; unsigned int num_debug; bool sig_ok; #ifdef CONFIG_KALLSYMS unsigned long mod_kallsyms_init_off; #endif /*sym \u4e3a\u7b26\u53f7\u8868\u5728secton headers \u4e2d\u7684index *str \u4e3a\u5b57\u7b26\u4e32\u8868\u5728section header \u4e2d\u7684index */ struct { unsigned int sym, str, mod, vers, info, pcpu; } index; }; struct module struct module\u662f\u5185\u6838\u5bf9\u6a21\u5757\u7684\u62bd\u8c61\uff0c\u662f\u5185\u6838\u7528\u6765\u7ba1\u7406\u52a0\u8f7d\u7684\u6a21\u5757\u7684\u6838\u5fc3\u6570\u636e\u7ed3\u6784\uff0c\u5982\u4e0b\u4ee3\u7801\u5728\u6e90\u7801\u57fa\u7840\u4e0a\u8fdb\u884c\u4e86\u90e8\u5206\u88c1\u526a\uff0c\u4ee5\u4fbf\u51cf\u5c0f\u7bc7\u5e45 linux-3.10.70\\include\\linux\\module.h struct module { // \u7528\u6765\u8bb0\u5f55\u6a21\u5757\u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u4e0d\u540c\u9636\u6bb5\u7684\u72b6\u6001 enum module_state state; /* Member of list of modules */ // \u53ef\u4ee5\u770b\u5230\u5185\u6838\u4f7f\u7528\u94fe\u8868\u6765\u7ba1\u7406module struct list_head list; /* Unique handle for this module */ /* \u6a21\u5757\u540d\u79f0 */ char name[MODULE_NAME_LEN]; /* Sysfs stuff. */ struct module_kobject mkobj; struct module_attribute *modinfo_attrs; const char *version; const char *srcversion; struct kobject *holders_dir; /* Exported symbols */ // \u6a21\u5757\u5bfc\u51fa\u7b26\u53f7\u7684\u8d77\u59cb\u5730\u5740 const struct kernel_symbol *syms; // \u6a21\u5757\u5bfc\u51fa\u7b26\u53f7\u7684\u6821\u9a8c\u7801\u8d77\u59cb\u5730\u5740 const unsigned long *crcs; unsigned int num_syms; /* Kernel parameters. */ // \u5185\u6838\u6a21\u5757\u53c2\u6570\u6240\u5728\u7684\u8d77\u59cb\u5730\u5740 struct kernel_param *kp; unsigned int num_kp; /* GPL-only exported symbols. */ unsigned int num_gpl_syms; const struct kernel_symbol *gpl_syms; const unsigned long *gpl_crcs; /* symbols that will be GPL-only in the near future. */ const struct kernel_symbol *gpl_future_syms; const unsigned long *gpl_future_crcs; unsigned int num_gpl_future_syms; /* Startup function. */ // \u8fd9\u5c31\u662f\u6211\u4eec\u7528module_init(xxx)\u6765\u58f0\u660e\u7684\u5165\u53e3\u51fd\u6570 int (*init)(void); /* If this is non-NULL, vfree after init() returns */ void *module_init; /* Here is the actual code + data, vfree'd on unload. */ void *module_core; /* Here are the sizes of the init and core sections */ unsigned int init_size, core_size; /* The size of the executable code in each section. */ unsigned int init_text_size, core_text_size; /* Size of RO sections of the module (text+rodata) */ unsigned int init_ro_size, core_ro_size; /* Arch-specific module values */ struct mod_arch_specific arch; unsigned int taints; /* same bits as kernel:tainted */ #ifdef CONFIG_KALLSYMS /* * We keep the symbol and string tables for kallsyms. * The core_* fields below are temporary, loader-only (they * could really be discarded after module init). */ Elf_Sym *symtab, *core_symtab; unsigned int num_symtab, core_num_syms; char *strtab, *core_strtab; /* Section attributes */ struct module_sect_attrs *sect_attrs; /* Notes attributes */ struct module_notes_attrs *notes_attrs; #endif /* The command line arguments (may be mangled). People like keeping pointers to this stuff */ char *args; #ifdef CONFIG_MODULE_UNLOAD /* What modules depend on me? */ struct list_head source_list; /* What modules do I depend on? */ struct list_head target_list; /* Who is waiting for us to be unloaded */ struct task_struct *waiter; /* Destruction function. */ void (*exit)(void); struct module_ref __percpu *refptr; #endif } setup_load_info() setup_load_info()\u52a0\u8f7dstruct load_info \u548c struct module, rewrite_section_headers \u5c06\u6bcf\u4e2asection\u7684sh_addr\u4fee\u6539\u4e3a\u5f53\u524d\u955c\u50cf\u6240\u5728\u7684\u5185\u5b58\u5730\u5740\uff0c section \u540d\u79f0\u5b57\u7b26\u4e32\u8868\u5730\u5740\u7684\u83b7\u53d6\u65b9\u5f0f\u662f\u4eceELF\u5934\u4e2d\u7684e_shstrndx\u83b7\u53d6\u5230\u8282\u533a\u5934\u90e8\u5b57\u7b26\u4e32\u8868\u7684\u6807\u53f7\uff0c\u627e\u5230\u5bf9\u5e94section\u5728ELF\u6587\u4ef6\u4e2d\u7684\u504f\u79fb\uff0c\u518d\u52a0\u4e0aELF\u6587\u4ef6\u8d77\u59cb\u5730\u5740\u5c31\u5f97\u5230\u4e86\u5b57\u7b26\u4e32\u8868\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u3002struct module\u7684\u5b9e\u4f8bmod\u662f\u901a\u8fc7\u201c.gnu.linkonce.this_module\u201d\u8fd9\u4e2asection\u6765\u83b7\u53d6\u7684\u3002 \u6211\u4eec\u627e\u5230\u6a21\u5757\u7684\u7f16\u8bd1\u76ee\u5f55\uff0c\u4f1a\u627e\u5230\u4e00\u4e2axxx.mod.c\u7684\u6587\u4ef6 struct module __this_module __attribute__((section(\".gnu.linkonce.this_module\"))) = { .name = KBUILD_MODNAME, .init = init_module, #ifdef CONFIG_MODULE_UNLOAD .exit = cleanup_module, #endif .arch = MODULE_ARCH_INIT, }; \u5176\u4e2d\u7684__attribute__((section(\".gnu.linkonce.this_module\")))\u5c31\u628a\u8fd9\u4e2a\u5b9e\u4f8b\u94fe\u63a5\u5230\u4e86\u5bf9\u5e94\u7684\u8282\u533a\u4e2d /* * Set up our basic convenience variables (pointers to section headers, * search for module section index etc), and do some basic section * verification. * * Return the temporary module pointer (we'll replace it with the final * one when we move the module sections around). */ static struct module *setup_load_info(struct load_info *info, int flags) { unsigned int i; int err; struct module *mod; /* Set up the convenience variables */ info->sechdrs = (void *)info->hdr + info->hdr->e_shoff; info->secstrings = (void *)info->hdr + info->sechdrs[info->hdr->e_shstrndx].sh_offset; err = rewrite_section_headers(info, flags); if (err) return ERR_PTR(err); /* Find internal symbols and strings. */ for (i = 1; i < info->hdr->e_shnum; i++) { if (info->sechdrs[i].sh_type == SHT_SYMTAB) { info->index.sym = i; info->index.str = info->sechdrs[i].sh_link; info->strtab = (char *)info->hdr + info->sechdrs[info->index.str].sh_offset; break; } } info->index.mod = find_sec(info, \".gnu.linkonce.this_module\"); if (!info->index.mod) { printk(KERN_WARNING \"No module found in object\\n\"); return ERR_PTR(-ENOEXEC); } /* This is temporary: point mod into copy of data. */ mod = (void *)info->sechdrs[info->index.mod].sh_addr; if (info->index.sym == 0) { printk(KERN_WARNING \"%s: module has no symbols (stripped?)\\n\", mod->name); return ERR_PTR(-ENOEXEC); } info->index.pcpu = find_pcpusec(info); /* Check module struct version now, before we try to use module. */ if (!check_modstruct_version(info->sechdrs, info->index.vers, mod)) return ERR_PTR(-ENOEXEC); return mod; } layout_sections() layout_sections() \u8d1f\u8d23\u5c06section \u5f52\u7c7b\u4e3a core \u548c init \u8fd9\u4e24\u5927\u7c7b,\u4e3a ko \u7684\u7b2c\u4e8c\u6b21\u642c\u79fb\u505a\u51c6\u5907\u3002\u4e3a\u4ec0\u4e48\u4f1a\u6709\u7b2c\u4e8c\u6b21\u642c\u79fb\u5462\uff1f\u76f4\u63a5copy\u5230\u5b9e\u9645\u8fd0\u884c\u5730\u5740\u4e0d\u662f\u66f4\u7701\u53bb\u4e86\u5f88\u591a\u9ebb\u70e6\u5417\uff1f\u5b9e\u9645\u4e0a\uff0c\u7b2c\u4e00\u6b21copy\u5230vmalloc\u533a\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u6682\u5b58\u64cd\u4f5c\uff0cko\u4e2d\u7684\u7edd\u5927\u591a\u6570section\u4f1a\u88ab\u642c\u79fb\u5230\u6700\u7ec8\u7684module\u533a\uff0c\u4f46\u4e5f\u6709\u90e8\u5206section\u4ee5\u53caELF header\u4e0d\u9700\u8981\u5230\u6700\u7ec8\u7684module\u533a\uff0c\u800c\u4e14\u4e0e\u521d\u59cb\u5316\u76f8\u5173\u7684init\u6bb5\u5728\u6a21\u5757\u521d\u59cb\u5316\u5b8c\u6210\u4e4b\u540e\u4e5f\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\uff0c\u8fd9\u4e9b\u5360\u7528\u7684\u5185\u5b58\u6700\u7ec8\u53ef\u4ee5\u88ab\u91ca\u653e\u6389\uff0c\u7cbe\u81f4\u7684\u5185\u6838\u5f53\u7136\u4f1a\u53bb\u505a\u8fd9\u4e9b\u64cd\u4f5c\u3002\u56e0\u6b64\u4fbf\u9700\u8981\u4e8c\u6b21\u642c\u79fb\u3002\u5728\u4e3a\u90a3\u4e9b\u9700\u8981\u79fb\u52a8\u7684section\u5206\u914d\u5185\u5b58\u7a7a\u95f4\u4e4b\u524d\uff0c\u5185\u6838\u9700\u8981\u627e\u51fa\u54ea\u4e9bsection\u9700\u8981\u79fb\u52a8\uff0clayout_sections\u4f1a\u904d\u5386\u6240\u6709\u7684section header, \u6839\u636esh_flags\u8fd9\u4e2a\u5b57\u6bb5\u6765\u5224\u5b9a\u5bf9\u5e94\u7684section\u662f\u5426\u9700\u8981\u642c\u79fb\uff0c\u5e76\u4e14\u5f52\u4e3a\u54ea\u79cd\u7c7b\u578b\u3002sh_flags\u6700\u7ec8\u88ab\u5212\u5206\u4e3a4\u79cd\u7c7b\u578b\uff0ccode, read-only, read-write data, small data\u3002\u4efb\u4f55\u6807\u8bb0\u4e86SHF_ALLOC\u7684section\u90fd\u5c5e\u4e8e\u8fd9\u56db\u7c7b\u4e2d\u7684\u4e00\u7c7b\uff0c\u5bf9\u5e94\u6bcf\u4e00\u7c7blayout_sections\u90fd\u4f1a\u904d\u5386section header table\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6210\u5458\u3002\u5c06\u8282\u533a\u540d\u79f0\u4e0d\u5e26\".init\"\u7684\u5f52\u4e3acore\u7c7b\uff0c\u957f\u5ea6\u7edf\u8ba1\u5728mod->core_size\uff0c\u628a\u8282\u533a\u540d\u79f0\u5e26\".init\"\u7684\u5f52\u4e3ainit\u7c7b,\u957f\u5ea6\u7edf\u8ba1\u5728mod->init_size\u3002\u5b9e\u9645\u4e0alayout_sections\u53ea\u662f\u5bf9 core \u7c7b\u548c init \u7c7b\u7684 size \u505a\u4e86\u7edf\u8ba1\uff0c\u6ca1\u6709\u5b9e\u8d28\u6027\u7684\u64cd\u4f5c\u3002\u503c\u5f97\u4e00\u63d0\u7684\u662f\u5728\u7edf\u8ba1INIT section\u7684\u65f6\u5019\uff0c\u4e3ash_entsize\u6dfb\u52a0\u4e86INIT_OFFSET_MASK\u6807\u8bb0\uff0c\u8fd9\u662f\u540e\u7eed\u5728\u642c\u79fb\u7684\u65f6\u5019\u533a\u5206INIT section \u548c CORE section \u7684key. /* Lay out the SHF_ALLOC sections in a way not dissimilar to how ld might -- code, read-only data, read-write data, small data. Tally sizes, and place the offsets into sh_entsize fields: high bit means it belongs in init. */ static void layout_sections(struct module *mod, struct load_info *info) { static unsigned long const masks[][2] = { /* NOTE: all executable code must be the first section * in this array; otherwise modify the text_size * finder in the two loops below */ { SHF_EXECINSTR | SHF_ALLOC, ARCH_SHF_SMALL }, { SHF_ALLOC, SHF_WRITE | ARCH_SHF_SMALL }, { SHF_WRITE | SHF_ALLOC, ARCH_SHF_SMALL }, { ARCH_SHF_SMALL | SHF_ALLOC, 0 } }; unsigned int m, i; for (i = 0; i < info->hdr->e_shnum; i++) info->sechdrs[i].sh_entsize = ~0UL; pr_debug(\"Core section allocation order:\\n\"); for (m = 0; m < ARRAY_SIZE(masks); ++m) { for (i = 0; i < info->hdr->e_shnum; ++i) { Elf_Shdr *s = &info->sechdrs[i]; const char *sname = info->secstrings + s->sh_name; if ((s->sh_flags & masks[m][0]) != masks[m][0] || (s->sh_flags & masks[m][1]) || s->sh_entsize != ~0UL || strstarts(sname, \".init\")) continue; s->sh_entsize = get_offset(mod, &mod->core_size, s, i); pr_debug(\"\\t%s\\n\", sname); } /* \u8fd9\u91cc\u53c8\u6309\u7167\u56db\u5927\u7c7b\u505a\u4e86\u7ec6\u5206 */ switch (m) { case 0: /* executable */ mod->core_size = debug_align(mod->core_size); mod->core_text_size = mod->core_size; break; case 1: /* RO: text and ro-data */ mod->core_size = debug_align(mod->core_size); mod->core_ro_size = mod->core_size; break; case 3: /* whole core */ mod->core_size = debug_align(mod->core_size); break; } } pr_debug(\"Init section allocation order:\\n\"); for (m = 0; m < ARRAY_SIZE(masks); ++m) { for (i = 0; i < info->hdr->e_shnum; ++i) { Elf_Shdr *s = &info->sechdrs[i]; const char *sname = info->secstrings + s->sh_name; if ((s->sh_flags & masks[m][0]) != masks[m][0] || (s->sh_flags & masks[m][1]) || s->sh_entsize != ~0UL || !strstarts(sname, \".init\")) continue; s->sh_entsize = (get_offset(mod, &mod->init_size, s, i) | INIT_OFFSET_MASK); pr_debug(\"\\t%s\\n\", sname); } switch (m) { case 0: /* executable */ mod->init_size = debug_align(mod->init_size); mod->init_text_size = mod->init_size; break; case 1: /* RO: text and ro-data */ mod->init_size = debug_align(mod->init_size); mod->init_ro_size = mod->init_size; break; case 3: /* whole init */ mod->init_size = debug_align(mod->init_size); break; } } } layout_symtab() \u8fd9\u4e2a\u64cd\u4f5c\u662f\u53ef\u914d\u7684\uff0c\u901a\u8fc7\u914d\u7f6e\u9009\u9879CONFIG_KALLSYMS\u6765\u9009\u62e9\u662f\u5426\u542f\u52a8\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u5f53\u5f00\u542fKALLSYMS\u65f6\uff0c\u4e0d\u5149\u4fdd\u7559\u5185\u6838\u6620\u50cf\u7684\u6240\u6709\u7b26\u53f7\uff0c\u4e5f\u4fdd\u7559\u6a21\u5757\u7684\u6240\u6709\u7b26\u53f7\uff0c\u56e0\u4e3a\u6a21\u5757\u7b26\u53f7section \u672c\u8eab\u6ca1\u6709SHF_ALLOC\u6807\u5fd7\uff0c\u6240\u4ee5\u5728layout_sections\u4e2d\u4e0d\u4f1a\u88ab\u5212\u5206\u5230CORE section \u6216 INIT section\u4e2d\uff0clayout_symtab\u5c31\u662f\u628a\u7b26\u53f7\u8868\u548c\u7b26\u53f7\u540d\u79f0\u5b57\u7b26\u4e32\u8868\u52a0\u5165CORE section\u3002 \u4e3a\u4ec0\u4e48\u662fCORE section\u800c\u4e0d\u662f INIT section\uff0c \u56e0\u4e3a INIT section \u5728\u521d\u59cb\u5316\u5b8c\u6210\u4e4b\u540e\u662f\u8981\u91ca\u653e\u6389\u7684\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662fsymsect->sh_flags |= SHF_ALLOC;\u548cstrsect->sh_flags |= SHF_ALLOC;\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u5f88\u5173\u952e\uff0c\u5728\u5177\u4f53\u7684\u642c\u79fb\u7684\u65f6\u5019\u4f1a\u7528\u5230\u3002 static void layout_symtab(struct module *mod, struct load_info *info) { Elf_Shdr *symsect = info->sechdrs + info->index.sym; Elf_Shdr *strsect = info->sechdrs + info->index.str; const Elf_Sym *src; unsigned int i, nsrc, ndst, strtab_size = 0; /* Put symbol section at end of init part of module. */ symsect->sh_flags |= SHF_ALLOC; symsect->sh_entsize = get_offset(mod, &mod->init_size, symsect, info->index.sym) | INIT_OFFSET_MASK; pr_debug(\"\\t%s\\n\", info->secstrings + symsect->sh_name); src = (void *)info->hdr + symsect->sh_offset; nsrc = symsect->sh_size / sizeof(*src); /* Compute total space required for the core symbols' strtab. */ for (ndst = i = 0; i < nsrc; i++) { if (i == 0 || is_core_symbol(src+i, info->sechdrs, info->hdr->e_shnum)) { strtab_size += strlen(&info->strtab[src[i].st_name])+1; ndst++; } } /* Append room for core symbols at end of core part. */ info->symoffs = ALIGN(mod->core_size, symsect->sh_addralign ?: 1); info->stroffs = mod->core_size = info->symoffs + ndst * sizeof(Elf_Sym); mod->core_size += strtab_size; /* Put string table section at end of init part of module. */ strsect->sh_flags |= SHF_ALLOC; strsect->sh_entsize = get_offset(mod, &mod->init_size, strsect, info->index.str) | INIT_OFFSET_MASK; pr_debug(\"\\t%s\\n\", info->secstrings + strsect->sh_name); } move_module() \u628ako\u642c\u79fb\u5230\u6700\u7ec8\u7684\u8fd0\u884c\u5730\u5740\u5c31\u662f\u901a\u8fc7\u8fd9\u4e2a\u64cd\u4f5c\u4e86\u3002module_alloc_update_bounds() \u8d1f\u8d23\u5728\u6700\u7ec8\u8fd0\u884c\u533a\u7533\u8bf7\u5185\u5b58\u7a7a\u95f4\uff0c\u5176\u4f1a\u8c03\u7528module_alloc(), module_alloc()\u5728module.c\u4e2d\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5f31\u51fd\u6570\uff0c\u53ef\u4ee5\u7531\u4e0d\u540c\u7684arch\u8fdb\u884c\u6539\u5199\uff0c\u5bf9\u4e8earm\u800c\u8a00\u662f\u4e0b\u9762\u8fd9\u6837\u5b9e\u73b0\u7684\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7406\u89e3\u4e3a\u4ec0\u4e48arm\u7684virtual kernel memory layout \u4e2d\u4f1a\u6709module\u8fd9\u6837\u4e00\u4e2a\u533a\u4e86\u3002 Virtual kernel memory layout: vector : 0xffff0000 - 0xffff1000 ( 4 kB) fixmap : 0xfff00000 - 0xfffe0000 ( 896 kB) vmalloc : 0xf0800000 - 0xfff00000 ( 247 MB) lowmem : 0xc0000000 - 0xf0700000 ( 775 MB) pkmap : 0xbfe00000 - 0xc0000000 ( 2 MB) modules : 0xbe700000 - 0xbfe00000 ( 23 MB) .text : 0xc0008000 - 0xc08d6630 (9018 kB) .init : 0xc08d7000 - 0xc3f5dc80 (55836 kB) .data : 0xc3f60000 - 0xc3fbbae0 ( 367 kB) .bss : 0xc3fbbae0 - 0xc40be85c (1036 kB) void *module_alloc(unsigned long size) { return __vmalloc_node_range(size, 1, MODULES_VADDR, MODULES_END, GFP_KERNEL, PAGE_KERNEL_EXEC, -1, __builtin_return_address(0)); } \u7533\u8bf7\u5b8c\u5185\u5b58\u4e4b\u540e\u5c31\u662f\u642c\u79fb\u4e86\uff0c\u76f4\u63a5memcpy\u3002\u5f53\u7136\u4e86\u642c\u79fb\u5230\u65b0\u5730\u5740\uff0c\u5404\u4e2asection\u7684sh_addr\u4e5f\u8981\u8ddf\u7740\u53d8\u66f4,\u6307\u5411\u65b0\u7684\u5185\u5b58\u5730\u5740\u3002\".gnu.linkonce.this_module\" \u8fd9\u4e2asection\u4e5f\u662f\u5e26\u6709SHF_ALLOC\u6807\u8bb0\u7684\uff0c\u6240\u4ee5\u4e5f\u8981\u66f4\u65b0mod\u53d8\u91cf\u4f7f\u5176\u6307\u5411\u65b0\u5730\u5740\u3002mod = (void *)info->sechdrs[info->index.mod].sh_addr; \u8fd9\u4e2a\u4e0d\u662f\u5728move_module()\u4e2d\u8fdb\u884c\u64cd\u4f5c\u7684\uff0c\u4f46\u662f\u662f\u7d27\u8ddf\u7740move_module()\u8fdb\u884c\u7684\u3002\u81f3\u6b64\uff0c\u4e07\u91cc\u957f\u5f81\u5df2\u7ecf\u8fc8\u51fa\u4e86\u7b2c\u4e00\u6b65\uff0c\u4e00\u4e2alayout_and_allocate()\u8fc7\u7a0b\u5c31\u7ed3\u675f\u4e86 static int move_module(struct module *mod, struct load_info *info) { int i; void *ptr; /* Do the allocs. */ ptr = module_alloc_update_bounds(mod->core_size); /* * The pointer to this block is stored in the module structure * which is inside the block. Just mark it as not being a * leak. */ kmemleak_not_leak(ptr); if (!ptr) return -ENOMEM; memset(ptr, 0, mod->core_size); mod->module_core = ptr; if (mod->init_size) { ptr = module_alloc_update_bounds(mod->init_size); /* * The pointer to this block is stored in the module structure * which is inside the block. This block doesn't need to be * scanned as it contains data and code that will be freed * after the module is initialized. */ kmemleak_ignore(ptr); if (!ptr) { module_free(mod, mod->module_core); return -ENOMEM; } memset(ptr, 0, mod->init_size); mod->module_init = ptr; } else mod->module_init = NULL; /* Transfer each section which specifies SHF_ALLOC */ pr_debug(\"final section addresses:\\n\"); for (i = 0; i < info->hdr->e_shnum; i++) { void *dest; Elf_Shdr *shdr = &info->sechdrs[i]; if (!(shdr->sh_flags & SHF_ALLOC)) continue; if (shdr->sh_entsize & INIT_OFFSET_MASK) dest = mod->module_init + (shdr->sh_entsize & ~INIT_OFFSET_MASK); else dest = mod->module_core + shdr->sh_entsize; if (shdr->sh_type != SHT_NOBITS) memcpy(dest, (void *)shdr->sh_addr, shdr->sh_size); /* Update sh_addr to point to copy in image. */ shdr->sh_addr = (unsigned long)dest; pr_debug(\"\\t0x%lx %s\\n\", (long)shdr->sh_addr, info->secstrings + shdr->sh_name); } return 0; } \u4ee3\u7801\u642c\u79fb\u5b8c\u6210\u4e86\uff0c\u4f46\u662f\u8fd8\u4e0d\u80fd\u8fd0\u884c\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u7b26\u53f7\u5730\u5740\u6ca1\u6709\u4fee\u6539\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5fc5\u987b\u5148\u89e3\u51b3\u9759\u6001\u94fe\u63a5\u65f6\u7684\u7b26\u53f7\u5f15\u7528\u4e0e\u52a8\u6001\u52a0\u8f7d\u65f6\u5b9e\u9645\u7b26\u53f7\u5730\u5740\u4e0d\u4e00\u81f4\u7684\u95ee\u9898\u3002\u8fd9\u4e2a\u95ee\u9898\u7684\u89e3\u51b3\u5206\u4e3a\u4e86\u4e24\u6b65\uff0c\u7b2c\u4e00\u6b65\u5c31\u662fsimplify_symbols()\u5148\u4fee\u6b63\u7b26\u53f7\u8868\u4e2d\u7684\u7b26\u53f7\u5730\u5740\uff0c\u7b2c\u4e8c\u6b65\u5c31\u662fapply_relocations()\uff0c\u6839\u636e\u91cd\u5b9a\u5411\u8868\u5c06\u6240\u6709\u7684\u7b26\u53f7\u5730\u5740\u4fee\u6539\u4e3a\u5b9e\u9645\u52a0\u8f7d\u7684\u5730\u5740\u3002 \u5728\u8bb2\u8ff0simplify_symbols()\u8fd9\u4e2a\u8fc7\u7a0b\u4e4b\u524d\uff0c\u5148\u8981\u8865\u5145\u51e0\u4e2a\u57fa\u7840\u77e5\u8bc6 \u5185\u6838\u662f\u5982\u4f55\u5bfc\u51fa\u7b26\u53f7\u7684 \u8fd9\u4e2a\u5927\u5bb6\u90fd\u77e5\u9053\u600e\u4e48\u7528\uff0c\u4f7f\u7528 EXPORT_SYMBOL \u58f0\u660e\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\uff0c\u751a\u81f3\u6709\u7684\u4eba\u8fd8\u77e5\u9053 EXPORT_SYMBOL_GPL \u548c EXPORT_SYMBOL_GPL_FUTURE, \u6211\u4eec\u5f88\u5c11\u53bb\u63a2\u7a76 EXPORT_SYMBOL \u5b9e\u73b0\u7684\u539f\u7406\uff0c\u4f46\u5728\u8fd9\u91cc\u6211\u4eec\u5c31\u9700\u8981\u7b80\u5355\u63a2\u7a76\u4e00\u4e0b\u3002\u5982\u679c\u5185\u6838\u4e0d\u652f\u6301module\uff0c \u5176\u5b9e EXPORT_SYMBOL \u662f\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\u7684\uff0c\u5373\u4f7f\u5bfc\u51fa\u4e86\u4e5f\u65e0\u4eba\u4f7f\u7528\uff0c\u4f46\u6a21\u5757\u7684\u51fa\u73b0\u5c31\u4f7f\u5f97\u5bfc\u51fa\u7b26\u53f7\u53d8\u5f97\u6709\u610f\u4e49\uff0c\u6211\u4eec\u5176\u5b9e\u5728\u7f16\u5199\u8bbe\u5907\u9a71\u52a8\u7684\u65f6\u5019\u7ecf\u5e38\u7528\u5230\u5185\u6838\u5bfc\u51fa\u7684\u7b26\u53f7\uff0c\u540c\u65f6\u6211\u4eec\u7684\u4e00\u4e2ako\u53ef\u80fd\u4f9d\u8d56\u53e6\u4e00\u4e2ako\u5bfc\u51fa\u7684\u7b26\u53f7\uff0c\u5728\u6211\u4eec\u7f16\u8bd1\u8bbe\u5907\u9a71\u52a8\u65f6\uff0c\u5373\u9759\u6001\u94fe\u63a5\u65f6\uff0c\u4f7f\u7528\u5185\u6838\u6216\u5176\u4ed6\u6a21\u5757\u7684\u7b26\u53f7\u7684\u60c5\u51b5\u5c31\u53eb\u505a\u201c\u672a\u89e3\u51b3\u7684\u5f15\u7528\u201d, \u90a3\u53ea\u597d\u7559\u5230\u52a8\u6001\u52a0\u8f7d\u7684\u65f6\u5019\u89e3\u51b3\u54af\u3002 \u5185\u6838\u5bfc\u51fa\u7684\u7b26\u53f7\u8868\u7ed3\u6784\u6709\u4e24\u4e2a\u5b57\u6bb5\uff0c\u4e00\u4e2a\u662f\u7b26\u53f7\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\uff0c\u4e00\u4e2a\u662f\u7b26\u53f7\u540d\u79f0\u6307\u9488\uff0c \u7b26\u53f7\u540d\u79f0\u88ab\u653e\u5728\u4e86__ksymtab_strings\u8fd9\u4e2asection\u4e2d\uff0c\u4ee5EXPORT_SYMBOL\u4e3e\u4f8b\uff0c \u7b26\u53f7\u4f1a\u88ab\u653e\u5230\u540d\u4e3a___ksymtab\u7684section\u4e2d\u3002 linux-3.10.70\\include\\linux\\export.h /* \u8fd9\u4e2a\u7ed3\u6784\u4f53\u6211\u4eec\u8981\u6ce8\u610f\uff0c\u5b83\u6784\u6210\u7684\u8868\u662f\u5bfc\u51fa\u7b26\u53f7\u8868\u800c\u4e0d\u662f\u901a\u5e38\u610f\u4e49\u4e0a\u7684\u7b26\u53f7\u8868 */ struct kernel_symbol { unsigned long value; // \u7b26\u53f7\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740 const char *name; // \u7b26\u53f7\u540d\u79f0 }; /* For every exported symbol, place a struct in the __ksymtab section */ #define __EXPORT_SYMBOL(sym, sec) \\ extern typeof(sym) sym; \\ __CRC_SYMBOL(sym, sec) \\ static const char __kstrtab_##sym[] \\ __attribute__((section(\"__ksymtab_strings\"), aligned(1))) \\ = VMLINUX_SYMBOL_STR(sym); \\ static const struct kernel_symbol __ksymtab_##sym \\ __used \\ __attribute__((section(\"___ksymtab\" sec \"+\" #sym), unused)) \\ = { (unsigned long)&sym, __kstrtab_##sym } #define EXPORT_SYMBOL(sym) \\ __EXPORT_SYMBOL(sym, \"\") #define EXPORT_SYMBOL_GPL(sym) \\ __EXPORT_SYMBOL(sym, \"_gpl\") #define EXPORT_SYMBOL_GPL_FUTURE(sym) \\ __EXPORT_SYMBOL(sym, \"_gpl_future\") \u8fd9\u8fd8\u4e0d\u884c\uff0c\u8fd8\u9700\u8981\u94fe\u63a5\u811a\u672c\u7684\u5e2e\u52a9\uff0c\u94fe\u63a5\u5668\u811a\u672c\u628a\u6240\u6709\u7684\u76ee\u6807\u6587\u4ef6\u4e2d\u540d\u4e3a\u201c__ksymtab\u201d\u7684 section \u653e\u5728\u6700\u7ec8\u5185\u6838\u955c\u50cf\u7684\u540d\u4e3a\u201c__ksymtab\u201d\u7684section\u4e2d\uff0c\u540c\u65f6\uff0c\u5b9a\u4e49\u4e86\u53d8\u91cf__start___ksymtab\uff0c __stop___ksymtab\uff0c __start___ksymtab_gpl\uff0c __start___ksymtab_gpl \u7b49\uff0c\u8fd9\u4e9b\u5728\u89e3\u51b3\u90a3\u4e9b\u201c\u672a\u89e3\u51b3\u7684\u5f15\u7528\u201d\u7684\u65f6\u5019\u5c31\u4f1a\u7528\u5230\u8fd9\u4e9b\u53d8\u91cf linux-3.10.70\\include\\asm-generic\\Vmlinux.lds.h /* Kernel symbol table: Normal symbols */ \\ __ksymtab : AT(ADDR(__ksymtab) - LOAD_OFFSET) { \\ VMLINUX_SYMBOL(__start___ksymtab) = .; \\ *(SORT(___ksymtab+*)) \\ VMLINUX_SYMBOL(__stop___ksymtab) = .; \\ } \\ \\ /* Kernel symbol table: GPL-only symbols */ \\ __ksymtab_gpl : AT(ADDR(__ksymtab_gpl) - LOAD_OFFSET) { \\ VMLINUX_SYMBOL(__start___ksymtab_gpl) = .; \\ *(SORT(___ksymtab_gpl+*)) \\ VMLINUX_SYMBOL(__start___ksymtab_gpl) = .; \\ } \u5728module.c\u4e2d\u5c31\u901a\u8fc7\u4e0b\u9762\u7684\u58f0\u660e\u6765\u76f4\u63a5\u4f7f\u7528\u94fe\u63a5\u5668\u5b9a\u4e49\u7684\u8fd9\u4e9b\u53d8\u91cf linux-3.10.70\\kernel\\module.c /* Provided by the linker */ extern const struct kernel_symbol __start___ksymtab[]; extern const struct kernel_symbol __stop___ksymtab[]; extern const struct kernel_symbol __start___ksymtab_gpl[]; extern const struct kernel_symbol __stop___ksymtab_gpl[]; extern const struct kernel_symbol __start___ksymtab_gpl_future[]; extern const struct kernel_symbol __stop___ksymtab_gpl_future[]; \u7b26\u53f7\u8868 \u521a\u624d\u8bb2\u7684\u662f\u5185\u6838\u5bfc\u51fa\u7b26\u53f7\u8868\uff0c\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u672a\u89e3\u51b3\u7684\u5f15\u7528\u7b26\u53f7\u8868\uff0c\u73b0\u5728\u6211\u4eec\u8981\u8bb2\u7b26\u53f7\u8868\uff0c\u8fd9\u4e2a\u7b26\u53f7\u8868\u662fELF\u6587\u4ef6\u5b9a\u4e49\u7684\u548ckernel_symbol\u4e0d\u8981\u6df7\u6dc6 \u5176\u4e2dst_name \u662f\u7b26\u53f7\u540d\u79f0\u5728\u7b26\u53f7\u540d\u79f0\u5b57\u7b26\u4e32\u8868\u4e2d\u7684\u7d22\u5f15\u503c\uff0c\u56e0\u6b64\u662f\u4e2aElf32_Word\u7c7b\u578b\uff1bst_value \u662f\u7b26\u53f7\u6240\u5728\u7684\u5185\u5b58\u5730\u5740\uff0c\u6211\u4eec\u8981\u4fee\u6b63\u7684\u4e5f\u6b63\u662f\u8fd9\u4e2a\u5b57\u6bb5 st_size \u662f\u7b26\u53f7\u5927\u5c0f\uff0c\u8fd9\u4e2a\u5728\u8fd9\u91cc\u4f3c\u4e4e\u5e76\u6ca1\u6709\u7528\u5230\uff1b st_info \u662f\u7b26\u53f7\u7c7b\u578b\u548c\u7ed1\u5b9a\u4fe1\u606f\uff0c\u4f4e4\u4f4d\u8868\u793a\u7b26\u53f7\u7c7b\u578b\uff08STB_LOCAL\u5c40\u90e8\u7b26\u53f7\uff0c\u76ee\u6807\u6587\u4ef6\u5916\u90e8\u4e0d\u53ef\u89c1\uff1bSTB_GLOBAL\u5168\u5c40\u7b26\u53f7\uff0c\u5916\u90e8\u53ef\u89c1\uff1bSTB_WEAK\u5f31\u7b26\u53f7\uff09\uff0c \u9ad828\u4f4d\u8868\u793a\u7b26\u53f7\u7ed1\u5b9a\u4fe1\u606f\uff08STT_NOTYPE \u672a\u77e5\u7c7b\u578b\uff1b STT_OBJECT\u6570\u636e\u5bf9\u8c61\uff1bSTT_FUNC \u51fd\u6570\u6216\u5176\u4ed6\u53ef\u6267\u884c\u4ee3\u7801\uff1bSTT_SECTION \u6bb5\uff0c\u8fd9\u79cd\u7b26\u53f7\u5fc5\u987b\u662fSTB_LOCAL\u7c7b\u578b\u7684\uff0cSTT_FILE \u6587\u4ef6\u540d\uff0c\u4e00\u822c\u90fd\u662f\u8be5\u76ee\u6807\u6587\u4ef6\u6240\u5bf9\u5e94\u7684\u6e90\u6587\u4ef6\u540d\uff0c\u4e00\u5b9a\u662fSTB_LOCAL\u7c7b\u578b\u7684\u5e76\u4e14\u5b83\u7684st_shndx\u4e00\u5b9a\u662fSHN_ABS\uff09, st_shndx\u8868\u793a\u7b26\u53f7\u6240\u5728section\uff0c\u5982\u679c\u7b26\u53f7\u5b9a\u4e49\u5728\u955c\u50cf\u4e2d\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5c31\u8868\u793a\u7b26\u53f7\u6240\u5728\u7684section\u5728section header table\u4e2dindex, \u5982\u679c\u7b26\u53f7\u4e0d\u662f\u5b9a\u4e49\u5728\u672c\u76ee\u6807\u4e2d\uff0c\u6216\u8005\u4e00\u4e9b\u7279\u6b8a\u7b26\u53f7\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u6709\u7279\u6b8a\u542b\u4e49\uff08SHN_ABS\u8868\u793a\u7b26\u53f7\u5305\u542b\u4e86\u7edd\u5bf9\u503c\uff0c\u6bd4\u5982\u6587\u4ef6\u540d\uff1bSHN_COMMON\u8868\u793a\u662f\u4e00\u4e2aCOMMON\u5757\u7c7b\u578b\uff0c\u6bd4\u5982\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u7b26\u53f7\uff1bSHN_UNDEF \u8868\u793a\u8be5\u7b26\u53f7\u672a\u5b9a\u4e49\uff0c\u5373\u6211\u4eec\u6240\u8bf4\u7684\u672a\u89e3\u51b3\u7684\u5f15\u7528\uff09 typedef struct elf32_sym{ Elf32_Word st_name; Elf32_Addr st_value; Elf32_Word st_size; unsigned char st_info; unsigned char st_other; Elf32_Half st_shndx; } Elf32_Sym; simplify_symbols() \u73b0\u5728\u6211\u4eec\u518d\u6765\u770bsimplify_symbols\uff0c \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u904d\u5386\u4e86\u6574\u4e2a\u7b26\u53f7\u8868\u5982\u679c\u662f\u7279\u6b8a\u7b26\u53f7\uff0c\u8d70\u7279\u6b8a\u5904\u7406\uff0c\u5982\u679c\u662f\u975e\u7279\u6b8a\u7b26\u53f7\uff0c\u8d70default\u5904\u7406\u3002 \u5982\u679c\u4e0d\u662f\u7279\u6b8a\u7b26\u53f7\uff0c\u90a3\u4e48\u76f4\u63a5\u6839\u636est_shndx\u627e\u5230\u7b26\u53f7\u6240\u5728\u7684section\uff0c\u8fd9\u65f6st_value\u5df2\u7ecf\u5b58\u50a8\u4e86\u7b26\u53f7\u5728section\u4e2d\u7684\u504f\u79fb\uff0cst_value + sh_addr \u5373\u5f97\u5230\u7b26\u53f7\u771f\u6b63\u7684\u5185\u5b58\u5730\u5740\u3002 \u7279\u6b8a\u7b26\u53f7\u6211\u4eec\u91cd\u70b9\u5173\u6ce8SHN_UNDEF\uff0c \u5173\u6ce8\u5982\u4f55\u5bfb\u627e\u672a\u89e3\u51b3\u7684\u7b26\u53f7\u5f15\u7528\u3002resolve_symbol_wait\u53bb\u5185\u6838\u548c\u5176\u4ed6\u6a21\u5757\u4e2d\u901a\u8fc7\u7b26\u53f7\u540d\u79f0\u5bfb\u5740\u76ee\u6807\u7b26\u53f7\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u60f3\u800c\u77e5\uff0c\u5bfb\u627e\u7684key\u5373\u7b26\u53f7\u540d\u79f0 /* Change all symbols so that st_value encodes the pointer directly. */ static int simplify_symbols(struct module *mod, const struct load_info *info) { Elf_Shdr *symsec = &info->sechdrs[info->index.sym]; Elf_Sym *sym = (void *)symsec->sh_addr; unsigned long secbase; unsigned int i; int ret = 0; const struct kernel_symbol *ksym; for (i = 1; i < symsec->sh_size / sizeof(Elf_Sym); i++) { const char *name = info->strtab + sym[i].st_name; switch (sym[i].st_shndx) { case SHN_COMMON: /* We compiled with -fno-common. These are not supposed to happen. */ pr_debug(\"Common symbol: %s\\n\", name); printk(\"%s: please compile with -fno-common\\n\", mod->name); ret = -ENOEXEC; break; case SHN_ABS: /* Don't need to do anything */ pr_debug(\"Absolute symbol: 0x%08lx\\n\", (long)sym[i].st_value); break; case SHN_UNDEF: ksym = resolve_symbol_wait(mod, info, name); /* Ok if resolved. */ if (ksym && !IS_ERR(ksym)) { sym[i].st_value = ksym->value; break; } /* Ok if weak. */ if (!ksym && ELF_ST_BIND(sym[i].st_info) == STB_WEAK) break; printk(KERN_WARNING \"%s: Unknown symbol %s (err %li)\\n\", mod->name, name, PTR_ERR(ksym)); ret = PTR_ERR(ksym) ?: -ENOENT; break; default: /* Divert to percpu allocation if a percpu var. */ if (sym[i].st_shndx == info->index.pcpu) secbase = (unsigned long)mod_percpu(mod); else secbase = info->sechdrs[sym[i].st_shndx].sh_addr; sym[i].st_value += secbase; break; } } return ret; } \u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5230\u5e95\u662f\u600e\u4e48\u627e\u5230\u672a\u89e3\u51b3\u7684\u5f15\u7528\u7684\u7b26\u53f7\u7684\u3002resolve_symbol_wait\u4f1a\u8c03\u7528resolve_symbol\uff0c \u8fdb\u800c\u8c03\u7528 find_symbol \uff0c\u901a\u8fc7\u540d\u5b57\u6211\u4eec\u4e5f\u53ef\u4ee5\u77e5\u9053\uff0c\u8fd9\u5c31\u662f\u627e\u7b26\u53f7\u7684\u6838\u5fc3\u4e86\uff0c\u627e\u5230\u4e86\u7b26\u53f7\u4e4b\u540e\uff0c\u628a\u7b26\u53f7\u7684\u5b9e\u9645\u5730\u5740\u8d4b\u503c\u7ed9\u7b26\u53f7\u8868 sym[i].st_value = ksym->value; /* Find a symbol and return it, along with, (optional) crc and * (optional) module which owns it. Needs preempt disabled or module_mutex. */ const struct kernel_symbol *find_symbol(const char *name, struct module **owner, const unsigned long **crc, bool gplok, bool warn) { struct find_symbol_arg fsa; fsa.name = name; fsa.gplok = gplok; fsa.warn = warn; if (each_symbol_section(find_symbol_in_section, &fsa)) { if (owner) *owner = fsa.owner; if (crc) *crc = fsa.crc; return fsa.sym; } pr_debug(\"Failed to find symbol %s\\n\", name); return NULL; } EXPORT_SYMBOL_GPL(find_symbol); \u6765\u770b\u4e00\u4e0beach_symbol_section\uff0c \u6211\u4eec\u4f1a\u53d1\u73b0\u53bb\u4e24\u4e2a\u5730\u65b9\u627e\u4e86\uff0c\u4e00\u4e2a\u662f\u5185\u6838\u7684\u5bfc\u51fa\u7b26\u53f7\u8868\uff0c\u5373\u6211\u4eec\u5728\u5c06\u5185\u6838\u7b26\u53f7\u662f\u5982\u4f55\u5bfc\u51fa\u7684\u65f6\u5019\u5b9a\u4e49\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u4e00\u4e2a\u662f\u904d\u5386\u5df2\u7ecf\u52a0\u8f7d\u7684\u5185\u6838\u6a21\u5757\uff0c\u67e5\u627e\u52a8\u4f5c\u662f\u5728each_symbol_in_section\u4e2d\u5b8c\u6210\uff0c\u800c\u5b9e\u9645\u7684\u67e5\u627e\u52a8\u4f5c\u662f\u5728\u56de\u8c03\u51fd\u6570\u4e2d\u5b8c\u6210\u4e86\uff0c\u5373fn,fn\u5373find_symbol_in_section /* Returns true as soon as fn returns true, otherwise false. */ bool each_symbol_section(bool (*fn)(const struct symsearch *arr, struct module *owner, void *data), void *data) { struct module *mod; static const struct symsearch arr[] = { { __start___ksymtab, __stop___ksymtab, __start___kcrctab, NOT_GPL_ONLY, false }, { __start___ksymtab_gpl, __stop___ksymtab_gpl, __start___kcrctab_gpl, GPL_ONLY, false }, { __start___ksymtab_gpl_future, __stop___ksymtab_gpl_future, __start___kcrctab_gpl_future, WILL_BE_GPL_ONLY, false }, #ifdef CONFIG_UNUSED_SYMBOLS { __start___ksymtab_unused, __stop___ksymtab_unused, __start___kcrctab_unused, NOT_GPL_ONLY, true }, { __start___ksymtab_unused_gpl, __stop___ksymtab_unused_gpl, __start___kcrctab_unused_gpl, GPL_ONLY, true }, #endif }; if (each_symbol_in_section(arr, ARRAY_SIZE(arr), NULL, fn, data)) return true; list_for_each_entry_rcu(mod, &modules, list) { struct symsearch arr[] = { { mod->syms, mod->syms + mod->num_syms, mod->crcs, NOT_GPL_ONLY, false }, { mod->gpl_syms, mod->gpl_syms + mod->num_gpl_syms, mod->gpl_crcs, GPL_ONLY, false }, { mod->gpl_future_syms, mod->gpl_future_syms + mod->num_gpl_future_syms, mod->gpl_future_crcs, WILL_BE_GPL_ONLY, false }, #ifdef CONFIG_UNUSED_SYMBOLS { mod->unused_syms, mod->unused_syms + mod->num_unused_syms, mod->unused_crcs, NOT_GPL_ONLY, true }, { mod->unused_gpl_syms, mod->unused_gpl_syms + mod->num_unused_gpl_syms, mod->unused_gpl_crcs, GPL_ONLY, true }, #endif }; if (mod->state == MODULE_STATE_UNFORMED) continue; if (each_symbol_in_section(arr, ARRAY_SIZE(arr), mod, fn, data)) return true; } return false; } EXPORT_SYMBOL_GPL(each_symbol_section); find_symbol_in_section\u6267\u884c\u4e86\u6700\u7ec8\u7684\u67e5\u627e\uff0c\u5982\u679c\u662f\u666e\u901a\u7684\u67e5\u627e\u65b9\u6cd5\uff0c\u90a3\u6548\u7387\u662f\u4e0d\u662f\u592a\u4f4e\u4e86\u70b9\u513f\uff0c\u6211\u4eec\u524d\u9762\u5df2\u7ecf\u8bf4\u8fc7\u4e86\uff0c\u67e5\u627e\u7684key\u662f\u7b26\u53f7\u540d\u79f0\uff0c\u53ef\u80fd\u662f\u4e2a\u5b57\u7b26\u4e32\u5339\u914d\uff0c\u4f46\u6211\u4eec\u8fd8\u662f\u5c0f\u770b\u4e86\u5185\u6838\uff0cfind_symbol_in_section\u4e2d\u4f7f\u7528\u4e86\u4e8c\u5206\u67e5\u627e\u6cd5\u6765\u5339\u914d\u7b26\u53f7\uff0c\u96be\u9053\u5bfc\u51fa\u7b26\u53f7\u8868\u8fd8\u662f\u6709\u5e8f\u7684\uff1f\u5f53\u7136\u4e86\uff0c\u5176\u5b9e\u6211\u4eec\u524d\u9762\u5df2\u7ecf\u7ed9\u51fa\u4e86\u53ef\u4ee5\u4e8c\u5206\u67e5\u627e\u7684\u539f\u56e0\uff0c\u53ea\u662f\u6ca1\u6709\u8bf4\u7834\uff0c\u5728\u94fe\u63a5\u811a\u672c\u4e2d\u5728\u628a\u6240\u6709\u7684\u76ee\u6807\u6587\u4ef6\u4e2d\u5bfc\u51fa\u7684\u7b26\u53f7\u5168\u90e8\u653e\u5230\u5185\u6838\u540d\u4e3a\u201c__ksymtab\u201d\u7684section\u4e2d\u65f6\u662f\u8fd9\u6837\u5199\u7684\uff1a (SORT(___ksymtab+ ))\uff0c\u4f7f\u7528\u4e86SORT\u8fdb\u884c\u4e86\u6392\u5e8f\uff0c\u800c\u4e14\u8fd9\u662f\u4e00\u4e2a\u5347\u5e8f\u6392\u5217\u3002 static bool find_symbol_in_section(const struct symsearch *syms, struct module *owner, void *data) { struct find_symbol_arg *fsa = data; struct kernel_symbol *sym; sym = bsearch(fsa->name, syms->start, syms->stop - syms->start, sizeof(struct kernel_symbol), cmp_name); if (sym != NULL && check_symbol(syms, owner, sym - syms->start, data)) return true; return false; } \u63a5\u4e0b\u6765\u8981\u5e72\u4ec0\u4e48\u5e94\u8be5\u4e5f\u5f88\u660e\u786e\u4e86\uff0c\u7b26\u53f7\u8868\u90fd\u6536\u62fe\u597d\u4e86\uff0c\u6293\u7d27\u628a\u6240\u6709section\u4e2d\u7684\u9700\u8981\u91cd\u5b9a\u5411\u7684\u7b26\u53f7\u8fdb\u884c\u91cd\u5b9a\u5411\u5427\u3002\u4e0d\u8fc7\u5728\u8fd9\u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u662f\u9700\u8981\u666e\u53ca\u4e00\u4e2a\u77e5\u8bc6\uff0cELF\u6587\u4ef6\u7684\u91cd\u5b9a\u5411\u8868\uff0c\u53ea\u6709\u660e\u786e\u4e86\u91cd\u5b9a\u5411\u8868\uff0c\u624d\u80fd\u7406\u89e3\u5230\u5e95\u662f\u5982\u4f55\u91cd\u5b9a\u5411\u7684\u3002\u8fd9\u91cc\u8fd8\u662f\u57fa\u4e8earm\u6765\u8bb2\uff0c\u5176\u4ed6\u7684arch\u6ca1\u6709\u63a2\u7a76\uff0c\u4e0d\u786e\u5b9a\u662f\u4e0d\u662f\u5982\u6b64\u5b9a\u4e49\u7684\u3002 \u91cd\u5b9a\u5411\u8868elf_rel typedef struct elf32_rel { Elf32_Addr r_offset; Elf32_Word r_info; } Elf32_Rel; r_offset \u6307\u660e\u91cd\u5b9a\u4f4d\u6240\u4f5c\u7528\u7684\u4f4d\u7f6e\uff0c\u662f\u91cd\u5b9a\u4f4d\u8868\u6240\u4f5c\u7528\u7684section\u4e2d\u7b26\u53f7\u7684\u504f\u79fb r_info \u7684\u9ad824\u4f4d\u6307\u793a\u4e86\u6307\u793a\u4e86\u91cd\u5b9a\u5411\u7684\u7b26\u53f7\u5728\u7b26\u53f7\u8868\u4e2d\u7684index\uff08\u6ce8\u610f\u662findex\uff0c\u4e0d\u662f\u5b57\u8282\u504f\u79fb\uff09, \u4f4e8\u4f4d\u6307\u793a\u4e86\u91cd\u5b9a\u5411\u7684\u7c7b\u578b apply_relocations \u6267\u884c\u8fd9\u4e2a\u7684\u5c31\u662fapply_relocations\uff0c \u6700\u7ec8\u6267\u884c\u7684apply_relocate\u6216apply_relocate_add\u662f\u4e0earch\u6709\u5173\u7684\u51fd\u6570\u3002\u91cd\u5b9a\u4f4d\u8868\u7684sh_info \u6307\u793a\u4e86\u6240\u4f5c\u7528\u7684section\u5728section header table\u4e2d\u7684index, \u6211\u4eec\u79f0\u4e4b\u4e3a\u76ee\u6807section\uff0c \u76ee\u6807 section \u7684 sh_flags \u4e00\u5b9a\u5e26\u6709SHF_ALLOC \u6807\u8bb0\uff0c \u6839\u636e\u91cd\u5b9a\u4f4d section\u7684sh_type\u4e0d\u540c\uff0c\u53ef\u4ee5\u5206\u4e3aSHT_REL\u548cSHT_RELA\u4e24\u79cd\u91cd\u5b9a\u4f4dsection,\u8fd9\u91cc\u6211\u4eec\u53ea\u5173\u6ce8SHT_REL\u8fd9\u4e00\u79cd\u3002 static int apply_relocations(struct module *mod, const struct load_info *info) { unsigned int i; int err = 0; /* Now do relocations. */ for (i = 1; i < info->hdr->e_shnum; i++) { unsigned int infosec = info->sechdrs[i].sh_info; /* Not a valid relocation section? */ if (infosec >= info->hdr->e_shnum) continue; /* Don't bother with non-allocated sections */ if (!(info->sechdrs[infosec].sh_flags & SHF_ALLOC)) continue; if (info->sechdrs[i].sh_type == SHT_REL) err = apply_relocate(info->sechdrs, info->strtab, info->index.sym, i, mod); else if (info->sechdrs[i].sh_type == SHT_RELA) err = apply_relocate_add(info->sechdrs, info->strtab, info->index.sym, i, mod); if (err < 0) break; } return err; } \u91cd\u70b9\u6765\u770barm\u662f\u5982\u4f55\u5b9e\u73b0\u7684relocate\u3002\u904d\u5386\u91cd\u5b9a\u5411section, \u901a\u8fc7rel->r_info\u6765\u5f97\u5230\u7b26\u53f7\u5728\u7b26\u53f7\u8868\u4e2d\u7684index\uff0c \u7136\u540e\u4ece\u7b26\u53f7\u8868\u4e2d\u627e\u5230\u5bf9\u5e94\u7b26\u53f7\uff0c\u6839\u636e\u91cd\u5b9a\u5411section\u7684sh_info\u627e\u5230\u76ee\u6807section\uff0c\u7136\u540e\u6839\u636erel->r_offset\u627e\u5230\u76ee\u6807\u7b26\u53f7\u7684\u8fd0\u884c\u5730\u5740\u5b58\u653e\u5904\uff0c\u7136\u540e\u6839\u636e\u4e0d\u540c\u7684\u91cd\u5b9a\u5411\u7c7b\u578b\u4fee\u6539\u8fd9\u4e2a\u5730\u5740\u503c\u3002\u8fd9\u91cc\u4e0d\u505a\u5177\u4f53\u5c55\u5f00\uff0c\u53ea\u63d0\u4e00\u70b9\uff0cR_ARM_PC24\uff0cR_ARM_CALL\uff0cR_ARM_JUMP24\u90fd\u662f\u76f4\u63a5\u5bfb\u5740\u7684\u91cd\u5b9a\u5411\u7c7b\u578b\uff0c\u76f4\u63a5\u5bfb\u5740\u957f\u5ea6\u4e0d\u80fd\u8d85\u8fc732MB, \u5373\u7b26\u53f7\u7684\u8c03\u7528\u4f4d\u7f6e\u548c\u5b58\u50a8\u4f4d\u7f6e\u4e4b\u95f4\u7684\u95f4\u9694\u4e0d\u80fd\u8d85\u8fc732M, \u53ef\u4ee5\u901a\u8fc7gcc\u7f16\u8bd1\u9009\u9879-mlong-calls\u6765\u5f3a\u5236\u4e0d\u4ea7\u751f\u8fd9\u79cd\u91cd\u5b9a\u5411\u7c7b\u578b\u3002 linux-3.10.70\\arch\\arm\\kernel\\module.c int apply_relocate(Elf32_Shdr *sechdrs, const char *strtab, unsigned int symindex, unsigned int relindex, struct module *module) { Elf32_Shdr *symsec = sechdrs + symindex; Elf32_Shdr *relsec = sechdrs + relindex; Elf32_Shdr *dstsec = sechdrs + relsec->sh_info; Elf32_Rel *rel = (void *)relsec->sh_addr; unsigned int i; for (i = 0; i < relsec->sh_size / sizeof(Elf32_Rel); i++, rel++) { unsigned long loc; Elf32_Sym *sym; const char *symname; s32 offset; #ifdef CONFIG_THUMB2_KERNEL u32 upper, lower, sign, j1, j2; #endif offset = ELF32_R_SYM(rel->r_info); if (offset < 0 || offset > (symsec->sh_size / sizeof(Elf32_Sym))) { pr_err(\"%s: section %u reloc %u: bad relocation sym offset\\n\", module->name, relindex, i); return -ENOEXEC; } sym = ((Elf32_Sym *)symsec->sh_addr) + offset; symname = strtab + sym->st_name; if (rel->r_offset < 0 || rel->r_offset > dstsec->sh_size - sizeof(u32)) { pr_err(\"%s: section %u reloc %u sym '%s': out of bounds relocation, offset %d size %u\\n\", module->name, relindex, i, symname, rel->r_offset, dstsec->sh_size); return -ENOEXEC; } loc = dstsec->sh_addr + rel->r_offset; switch (ELF32_R_TYPE(rel->r_info)) { case R_ARM_NONE: /* ignore */ break; case R_ARM_ABS32: *(u32 *)loc += sym->st_value; break; case R_ARM_PC24: case R_ARM_CALL: case R_ARM_JUMP24: offset = (*(u32 *)loc & 0x00ffffff) << 2; if (offset & 0x02000000) offset -= 0x04000000; offset += sym->st_value - loc; if (offset & 3 || offset <= (s32)0xfe000000 || offset >= (s32)0x02000000) { pr_err(\"%s: section %u reloc %u sym '%s': relocation %u out of range (%#lx -> %#x)\\n\", module->name, relindex, i, symname, ELF32_R_TYPE(rel->r_info), loc, sym->st_value); return -ENOEXEC; } offset >>= 2; *(u32 *)loc &= 0xff000000; *(u32 *)loc |= offset & 0x00ffffff; break; case R_ARM_V4BX: /* Preserve Rm and the condition code. Alter * other bits to re-code instruction as * MOV PC,Rm. */ *(u32 *)loc &= 0xf000000f; *(u32 *)loc |= 0x01a0f000; break; case R_ARM_PREL31: offset = *(u32 *)loc + sym->st_value - loc; *(u32 *)loc = offset & 0x7fffffff; break; case R_ARM_MOVW_ABS_NC: case R_ARM_MOVT_ABS: offset = *(u32 *)loc; offset = ((offset & 0xf0000) >> 4) | (offset & 0xfff); offset = (offset ^ 0x8000) - 0x8000; offset += sym->st_value; if (ELF32_R_TYPE(rel->r_info) == R_ARM_MOVT_ABS) offset >>= 16; *(u32 *)loc &= 0xfff0f000; *(u32 *)loc |= ((offset & 0xf000) << 4) | (offset & 0x0fff); break; #ifdef CONFIG_THUMB2_KERNEL case R_ARM_THM_CALL: case R_ARM_THM_JUMP24: upper = *(u16 *)loc; lower = *(u16 *)(loc + 2); /* * 25 bit signed address range (Thumb-2 BL and B.W * instructions): * S:I1:I2:imm10:imm11:0 * where: * S = upper[10] = offset[24] * I1 = ~(J1 ^ S) = offset[23] * I2 = ~(J2 ^ S) = offset[22] * imm10 = upper[9:0] = offset[21:12] * imm11 = lower[10:0] = offset[11:1] * J1 = lower[13] * J2 = lower[11] */ sign = (upper >> 10) & 1; j1 = (lower >> 13) & 1; j2 = (lower >> 11) & 1; offset = (sign << 24) | ((~(j1 ^ sign) & 1) << 23) | ((~(j2 ^ sign) & 1) << 22) | ((upper & 0x03ff) << 12) | ((lower & 0x07ff) << 1); if (offset & 0x01000000) offset -= 0x02000000; offset += sym->st_value - loc; /* * For function symbols, only Thumb addresses are * allowed (no interworking). * * For non-function symbols, the destination * has no specific ARM/Thumb disposition, so * the branch is resolved under the assumption * that interworking is not required. */ if ((ELF32_ST_TYPE(sym->st_info) == STT_FUNC && !(offset & 1)) || offset <= (s32)0xff000000 || offset >= (s32)0x01000000) { pr_err(\"%s: section %u reloc %u sym '%s': relocation %u out of range (%#lx -> %#x)\\n\", module->name, relindex, i, symname, ELF32_R_TYPE(rel->r_info), loc, sym->st_value); return -ENOEXEC; } sign = (offset >> 24) & 1; j1 = sign ^ (~(offset >> 23) & 1); j2 = sign ^ (~(offset >> 22) & 1); *(u16 *)loc = (u16)((upper & 0xf800) | (sign << 10) | ((offset >> 12) & 0x03ff)); *(u16 *)(loc + 2) = (u16)((lower & 0xd000) | (j1 << 13) | (j2 << 11) | ((offset >> 1) & 0x07ff)); break; case R_ARM_THM_MOVW_ABS_NC: case R_ARM_THM_MOVT_ABS: upper = *(u16 *)loc; lower = *(u16 *)(loc + 2); /* * MOVT/MOVW instructions encoding in Thumb-2: * * i = upper[10] * imm4 = upper[3:0] * imm3 = lower[14:12] * imm8 = lower[7:0] * * imm16 = imm4:i:imm3:imm8 */ offset = ((upper & 0x000f) << 12) | ((upper & 0x0400) << 1) | ((lower & 0x7000) >> 4) | (lower & 0x00ff); offset = (offset ^ 0x8000) - 0x8000; offset += sym->st_value; if (ELF32_R_TYPE(rel->r_info) == R_ARM_THM_MOVT_ABS) offset >>= 16; *(u16 *)loc = (u16)((upper & 0xfbf0) | ((offset & 0xf000) >> 12) | ((offset & 0x0800) >> 1)); *(u16 *)(loc + 2) = (u16)((lower & 0x8f00) | ((offset & 0x0700) << 4) | (offset & 0x00ff)); break; #endif default: printk(KERN_ERR \"%s: unknown relocation: %u\\n\", module->name, ELF32_R_TYPE(rel->r_info)); return -ENOEXEC; } } return 0; } \u81f3\u6b64\uff0c\u6700\u4e3a\u8270\u82e6\u7684\u957f\u5f81\u8def\u5b8c\u6210\u4e86\uff0c\u5269\u4e0b\u7684\u90fd\u662f\u8f83\u4e3a\u8f7b\u677e\u7684\u5de5\u4f5c\u4e86\uff0c\u5173\u4e8edo_init_module\u7684\u64cd\u4f5c\uff0c\u5c31\u4e0d\u5728\u8fd9\u91cc\u505a\u4ecb\u7ecd\u4e86\uff0c\u8fd9\u6b21\u52a0\u8f7d\u6d41\u7a0b\u89e3\u6790\u5c31\u5148\u5230\u8fd9\u91cc\u3002","title":"\u8be6\u7ec6\u52a0\u8f7d\u8fc7\u7a0b"},{"location":"linux/kernel-status.html","text":"","title":"Kernel status"},{"location":"linux/lzma_transplant.html","text":"transplant LZMA compression algo from linux2.6.32 to linux2.6.29 \u00b6 \u4e0d\u540c\u7684\u538b\u7f29\u7b97\u6cd5\u7684\u538b\u7f29\u6548\u7387\u3001\u538b\u7f29/\u89e3\u538b\u7f29\u65f6\u95f4\u4e0d\u540c\u3002LZMA\u7684\u538b\u7f29\u7387\u8981\u6bd4gzip\u9ad8\u7684\u591a\u3002\u6700\u8fd1\u9879\u76ee\u4e2d\u9047\u5230\u7cfb\u7edf\u955c\u50cf\u8d85\u51fa\u5206\u533a\u5927\u5c0f\u7684\u95ee\u9898\uff0c\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u6539\u53d8\u5185\u6838\u538b\u7f29\u7b97\u6cd5\u6765\u89e3\u51b3\u3002\u53ef\u60dc\u9879\u76ee\u4e2d\u6240\u4f7f\u7528\u7684\u5185\u6838linux2.6.29\u7248\u672c\u592a\u4f4e\uff0c\u4ec5\u652f\u6301gzip\u538b\u7f29\uff0c\u4e0d\u652f\u6301LZMA\u538b\u7f29\uff0c\u6240\u4ee5\u6211\u4eec\u4ece\u9ad8\u7248\u672c\u5185\u6838\u4e2d\u79fb\u690dLZMA\u548cbzip2\u538b\u7f29\u7b97\u6cd5\u6765\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002 \u76ee\u6807 \u00b6 \u4ecelinux2.6.32\u79fb\u690dLZMA\u548cbzip2\u5230linux2.6.29 \u76ee\u6807\u67b6\u6784\u4e3apowerpc initramfs\u91c7\u7528LZMA\u538b\u7f29\uff0cimage\u955c\u50cf\u91c7\u7528gzip\u538b\u7f29 \u5982\u4f55\u9009\u62e9LZMA\u6765\u538b\u7f29initramfs \u00b6 \u5728\u5185\u6838\u914d\u7f6e\u4e2d,\u9700\u8981\u9009\u62e9\u652f\u6301LZMA\u5e76\u4e14\u9009\u62e9built-in initramfs compression mode \u4e3aLZMA General setup ---> [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support (../../../product/s3000gb/rootfs) Initramfs source file(s) (0) User ID to map to 0 (user root) (0) Group ID to map to 0 (group root) [*] Support initial ramdisks compressed using gzip [ ] Support initial ramdisks compressed using bzip2 [*] Support initial ramdisks compressed using LZMA Built-in initramfs compression mode (LZMA) ---> \u79fb\u690d\u8fc7\u7a0b \u00b6 \u6211\u4eec\u5148\u67e5\u627e\u4e0eSupport initial ramdisks compressed using LZMA \u76f8\u5173\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b\u6b64\u914d\u7f6e\u9009\u9879\u7684help\u4fe1\u606f\u6765\u627e\u5230\u5177\u4f53\u7684\u6587\u4ef6\uff0chelp\u4fe1\u606f\u4e2d\u6709\u4e24\u4e2a\u76f8\u5173\u7684\u5b8f Symbol: RD_LZMA [=y] Depends on: BLK_DEV_INITRD [=y] && EMBEDDED [=y] Selects: DECOMPRESS_LZMA \u6211\u4eec\u57282.6.32\u4e2d\u641c\u7d22 RD_LZMA , \u4f1a\u53d1\u73b0\u5927\u90e8\u5206\u7684\u5f15\u7528\u90fd\u662f\u5728/arch/xx/config/xxx_defconfig\u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u4e0d\u53bb\u5173\u5fc3\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u6211\u4eec\u9700\u8981\u5173\u5fc3\u7684\u6240\u6709\u641c\u7d22\u7ed3\u679c usr/Kconfig: config RD_LZMA usr/Kconfig: depends on RD_LZMA \u6211\u4eec\u53d1\u73b0\u5176\u5b9eRD_LZMA\u4ec5\u5728usr\u76ee\u5f55\u4e0b\u6709\u5f15\u7528\uff0c\u5176\u5b9e\u5728\u5185\u6838\u7f16\u8bd1\u65f6\uff0cusr/built-in.o \u4e3b\u8981\u5c31\u662finitramfs\u7684\u955c\u50cf\uff0c\u6211\u4eec\u5b9a\u5236initramfs\u662f\u901a\u8fc7\u521b\u5efa\u4e00\u4e2acpio\u683c\u5f0f\u7684\u6863\u6848\u6587\u4ef6\u6765\u5b9e\u73b0\u7684\uff0c\u6211\u4eec\u5c31\u662f\u8981\u5b9e\u73b0\u7528LZMA\u6765\u538b\u7f29\u8fd9\u4e2acpio\u6587\u4ef6\u3002 \u6211\u4eec\u67e5\u770b\u4e00\u4e0busr\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6, \u5355\u4ece\u6587\u4ef6\u540d\u5df2\u7ecf\u80fd\u591f\u63a8\u7406\u51fa\u5404\u4e2a\u6587\u4ef6\u7684\u5173\u7cfb\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u540c\u6b65\u5230linux2.6.29\u4e2d root@99-252:~/V2.1.5.67086/kernel/uClinux/linux-2.6.32.x/usr# ls -al -rw-r--r-- 1 13448 6406 12543 5\u6708 17 2016 gen_init_cpio.c -rw-r--r-- 1 13448 6406 1024 5\u6708 17 2016 initramfs_data.bz2.S -rw-r--r-- 1 13448 6406 1023 5\u6708 17 2016 initramfs_data.gz.S -rw-r--r-- 1 13448 6406 1025 5\u6708 17 2016 initramfs_data.lzma.S -rw-r--r-- 1 13448 6406 1021 5\u6708 17 2016 initramfs_data.S -rw-r--r-- 1 13448 6406 4514 5\u6708 17 2016 Kconfig -rw-r--r-- 1 13448 6406 2154 5\u6708 17 2016 Makefile \u8fd9\u4e9b\u6587\u4ef6\u5177\u4f53\u7684\u529f\u80fd\u662f\u4ec0\u4e48\u5462\uff1f\u5177\u4f53\u5230\u6bcf\u4e2a\u6587\u4ef6\u91cc\u9762\u53bb\u770b\u4e00\u4e0b\uff0c\u53d1\u73b0\u5176\u5b9e\u8fd9\u4e9b\u6587\u4ef6\u91cc\u9762\u6ca1\u505a\u4ec0\u4e48\u6709\u4ef7\u503c\u7684\u64cd\u4f5c\uff0c\u4ec5\u4ec5\u662f\u6839\u636ekconfig\u6307\u5b9a\u4e86cpio\u7684\u538b\u7f29\u683c\u5f0f\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u518d\u53bb\u627e\u53e6\u4e00\u4e2a\u5b8f==DECOMPRESS_LZMA==\uff0c\u627e\u7684\u65b9\u6cd5\u548c\u4e0a\u4e00\u4e2a\u4e00\u6837\uff0c\u6211\u4eec\u5148\u5728linux2.6.32\u4e2d\u67e5\u627e\u8fd9\u4e2a\u5b8f\uff0c\u540c\u6837\u7684,\u4f1a\u6709\u5f88\u591aarch/xx/configs/xxx_defconfig\u6587\u4ef6\u4e2d\u6709\u5f15\u7528\uff0c\u8fd9\u4e9b\u6211\u4eec\u4e0d\u53bb\u5173\u7cfb\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u9664defconfig\u4e4b\u5916\u7684\u5f15\u7528\u3002 // squashfs\u662f\u538b\u7f29\u53ea\u8bfb\u6587\u4ef6\u7cfb\u7edf\uff0c\u80fd\u591f\u538b\u7f29\u7cfb\u7edf\u5185\u7684\u6587\u6863\uff0cinode\u4ee5\u53ca\u76ee\u5f55\uff0c\u663e\u7136\u8fd9\u4e2a\u6211\u4eec\u4e5f\u65e0\u9700\u5173\u5fc3 fs/squashfs/Kconfig: select DECOMPRESS_LZMA fs/squashfs/Kconfig: select DECOMPRESS_LZMA_NEEDED // \u5934\u6587\u4ef6\uff0c\u663e\u7136\u8fd9\u4e2a\u5fc5\u987b\u79fb\u690d include/linux/decompress/unlzma_mm.h:#elif defined(CONFIG_DECOMPRESS_LZMA_NEEDED) // \u89e3\u538b\u7f29\u76f8\u5173\u7684\u6587\u4ef6\uff0c\u663e\u7136\u8fd9\u4e2a\u6211\u4eec\u5fc5\u987b\u79fb\u690d lib/decompress.c:#ifndef CONFIG_DECOMPRESS_LZMA lib/Makefile:lib-$(CONFIG_DECOMPRESS_LZMA) += decompress_unlzma.o lib/Kconfig:config DECOMPRESS_LZMA lib/Kconfig:config DECOMPRESS_LZMA_NEEDED lib/decompress_unlzma.c:#elif defined(CONFIG_DECOMPRESS_LZMA_NEEDED) // \u5df2\u7ecf\u540c\u6b65\u8fc7\u4e86\uff0c\u4e0d\u518d\u9700\u8981\u5173\u5fc3 usr/Kconfig: select DECOMPRESS_LZMA \u6211\u4eec\u53d1\u73b0\u5176\u5b9e\u6211\u4eec\u53ea\u9700\u8981\u79fb\u690d\u5934\u6587\u4ef6\u548clib\u76ee\u5f55\u4e0b\u7684\u89e3\u538b\u7f29\u6587\u4ef6\u5c31\u53ef\u4ee5\u4e86\uff0c\u79fb\u690d\u7684\u65b9\u6cd5\u662f\u5bf9\u6bd4\u76f8\u5e94\u7684\u76ee\u5f55\u627e\u5230\u76f8\u5173\u7684\u4ee3\u7801\uff0c\u540c\u6b65\uff0c\u9700\u8981\u6ce8\u610fmakefile\u548ckconfig\u4e5f\u9700\u8981\u76f8\u5e94\u7684\u4fee\u6539\u3002 \u79fb\u690d\u5b8c\u6210\u540e\u54b1\u4eec\u6765\u5c1d\u8bd5\u7f16\u8bd1\u4e00\u4e0bkernel, \u5148\u8fdb\u5165menuconfig\u8bbe\u7f6e\u4e00\u4e0b\u65b0\u589e\u7684\u914d\u7f6e\uff0c\u52fe\u9009\u4e4b\u524d\u63cf\u8ff0\u7684\u9009\u9879\uff0c\u7136\u540e\u7f16\u8bd1 \u6211\u4eec\u53d1\u73b0\u786e\u5b9e\u751f\u6210\u4e86lzma\u7684cpio\u6587\u4ef6 make kernel scripts/kconfig/conf -s arch/powerpc/Kconfig CHK include/linux/version.h CHK include/linux/utsrelease.h SYMLINK include/asm -> include/asm-powerpc CALL scripts/checksyscalls.sh sed: can't read /home/chenhao/ros5.4/br_ros5.4_rsp_dev_20161214/rsp/kernel/linux-2.6.29.6-bmw/arch/x86/include/asm/unistd_32.h: No such file or directory CHK include/linux/compile.h GEN usr/initramfs_data.cpio.lzma AS usr/initramfs_data.lzma.o LD usr/built-in.o \u4f46\u6700\u7ec8\u7f16\u8bd1\u51fa\u7684\u955c\u50cf\u5927\u5c0f\u6ca1\u6709\u6539\u53d8\uff0c\u8fd9\u662f\u4ec0\u4e48\u539f\u56e0\u5462\uff1f \u6211\u4eec\u76f8\u4fe1LZMA\u7684\u538b\u7f29\u7387\u662f\u6bd4gzip\u9ad8\u7684\u591a\u7684\uff0c\u800c\u4e14\u6211\u4eec\u4e5f\u53ef\u4ee5\u5b9e\u9645\u9a8c\u8bc1\u8fd9\u4e00\u70b9 root@ubuntu:~/test_lzma# lzma -k initramfs_data.cpio root@ubuntu:~/test_lzma# gzip initramfs_data.cpio root@ubuntu:~/test_lzma# ls -al -rw-r--r-- 1 root root 63202304 Jul 11 05 :10 initramfs_data.cpio -rw-r--r-- 1 root root 21340431 Jul 11 05 :10 initramfs_data.cpio.gz -rw-r--r-- 1 root root 13816814 Jul 11 05 :10 initramfs_data.cpio.lzma \u90a3\u4e48\u6781\u5927\u53ef\u80fd\u662f\u538b\u7f29\u65f6\u6ca1\u6709\u771f\u6b63\u7684\u4f7f\u7528LZMA\u538b\u7f29\u7b97\u6cd5,\u6211\u4eec\u5148\u53bb\u770b\u4e00\u4e0bcpio\u538b\u7f29\u6587\u4ef6 root@ubuntu:~/ros5.4/br_ros5.4_rsp_dev_20161214/rsp/kernel/linux-2.6.29.6-bmw/usr# lzmainfo initramfs_data.cpio.lzma lzmainfo: initramfs_data.cpio.lzma: Not a .lzma file \u770b\u6765\u771f\u7684\u662f\u8fd9\u6837\uff0c\u4ec5\u4ec5\u662f\u538b\u7f29\u6587\u4ef6\u540d\u53d8\u6210\u4e86lzma\uff0c\u5176\u5b9e\u538b\u7f29\u7b97\u6cd5\u6ca1\u6709\u6539\u53d8\u3002\u90a3\u4e48\u5177\u4f53initramfs\u662f\u600e\u6837\u538b\u7f29\u7684\u5462\uff1f\u8fd8\u8bb0\u5f97\u6211\u4eec\u524d\u9762\u8bf4\u7684usr\u76ee\u5f55\u4e0b\u7684\u90a3\u51e0\u4e2a\u6587\u4ef6\u5417\uff1f\u90a3\u51e0\u4e2a\u6587\u4ef6\u4e0d\u5c31\u662f\u51b3\u5b9a\u538b\u7f29\u7b97\u6cd5\u7684\u5417\uff1f\u4e00\u5b9a\u662f\u90a3\u4e2a\u5730\u65b9\u51fa\u4e86\u95ee\u9898\u3002 \u6211\u4eec\u5148\u770b\u4e00\u4e0blinux2.6.32/usr\u76ee\u5f55\u4e0b\u7684==Makefile==\u6587\u4ef6 26 ##### 27 # Generate the initramfs cpio archive 28 29 hostprogs-y : = gen_init_cpio 30 initramfs : = $( CONFIG_SHELL ) $( srctree ) /scripts/gen_initramfs_list.sh 31 ramfs-input : = $(if $( filter-out \"\" , $( CONFIG_INITRAMFS_SOURCE )) , \\ 32 $( shell echo $( CONFIG_INITRAMFS_SOURCE )) ,-d ) 33 ramfs-args : = \\ 34 $(if $( CONFIG_INITRAMFS_ROOT_UID ) , -u $( CONFIG_INITRAMFS_ROOT_UID )) \\ 35 $(if $( CONFIG_INITRAMFS_ROOT_GID ) , -g $( CONFIG_INITRAMFS_ROOT_GID )) 36 37 # .initramfs_data.cpio.d is used to identify all files included 38 # in initramfs and to detect if any files are added/removed. 39 # Removed files are identified by directory timestamp being updated 40 # The dependency list is generated by gen_initramfs.sh -l 41 ifneq ( $( wildcard $( obj ) /.initramfs_data.cpio.d ) , ) 42 include $( obj ) /.initramfs_data.cpio.d 43 endif 44 45 quiet_cmd_initfs = GEN $@ 46 cmd_initfs = $( initramfs ) -o $@ $( ramfs-args ) $( ramfs-input ) 47 48 targets : = initramfs_data.cpio.gz initramfs_data.cpio.bz2 initramfs_data.cpio.lzma initramfs_data.cpio 49 # do not try to update files included in initramfs 50 $( deps_initramfs ) : ; \u6211\u60f3\u5927\u5bb6\u4e5f\u53d1\u73b0\u4e86\uff0c\u6574\u4e2amakefile\u6ca1\u6709\u8bf4\u538b\u7f29\u4ec0\u4e48\u4e8b\uff0c\u4f46\u662f==30\u884c==\u548c==46\u884c==\u660e\u663e\u662f\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u8c03\u7528\u4e86scripts\u76ee\u5f55\u4e0b\u7684gen_initramfs_list.sh \u7684\u811a\u672c\uff0c\u5f88\u591a\u8d44\u6599\u90fd\u4f1a\u8bb2\u5230\u8fd9\u4e2a\u6587\u4ef6\u7684\u4f5c\u7528\uff0c\u538b\u7f29\u7b97\u6cd5\u4e00\u5b9a\u5728\u8fd9\u4e2a\u811a\u672c\u4e2d\u6307\u5b9a\u4e86\uff0c\u6211\u4eec\u53bblinux2.6.32\u4e2d\u770b\u4e00\u4e0b 227 is_cpio_compressed = 228 compr = \"gzip -9 -f\" 229 230 arg = \" $1 \" 231 case \" $arg \" in 232 \"-l\" ) # files included in initramfs - used by kbuild 233 dep_list = \"list_\" 234 echo \"deps_initramfs := \\\\\" 235 shift 236 ;; 237 \"-o\" ) # generate compressed cpio image named $1 238 shift 239 output_file = \" $1 \" 240 cpio_list = \" $( mktemp ${ TMPDIR :- /tmp } /cpiolist.XXXXXX ) \" 241 output = ${ cpio_list } 242 echo \" $output_file \" | grep -q \"\\.gz $ \" && compr = \"gzip -9 -f\" 243 echo \" $output_file \" | grep -q \"\\.bz2 $ \" && compr = \"bzip2 -9 -f\" 244 echo \" $output_file \" | grep -q \"\\.lzma $ \" && compr = \"lzma -9 -f\" 245 echo \" $output_file \" | grep -q \"\\.cpio $ \" && compr = \"cat\" 246 shift 247 ;; 248 esac 282 # If output_file is set we will generate cpio archive and compress it 283 # we are carefull to delete tmp files 284 if [ ! -z ${ output_file } ] ; then 285 if [ -z ${ cpio_file } ] ; then 286 cpio_tfile = \" $( mktemp ${ TMPDIR :- /tmp } /cpiofile.XXXXXX ) \" 287 usr/gen_init_cpio ${ cpio_list } > ${ cpio_tfile } 288 else 289 cpio_tfile = ${ cpio_file } 290 fi 291 rm ${ cpio_list } 292 if [ \" ${ is_cpio_compressed } \" = \"compressed\" ] ; then 293 cat ${ cpio_tfile } > ${ output_file } 294 else 295 ( cat ${ cpio_tfile } | ${ compr } - > ${ output_file } ) \\ 296 || ( rm -f ${ output_file } ; false ) 297 fi 298 [ -z ${ cpio_file } ] && rm ${ cpio_tfile } 299 fi \u786e\u5b9e\u8fd9\u91cc\u9762\u5b9e\u73b0\u4e86cpio\u7684\u538b\u7f29\uff0c\u90a3\u4e48\u4e0d\u591a\u8bf4\uff0c\u628a\u8fd9\u4e9b\u90fd\u540c\u6b65\u8fc7\u53bb\u3002 \u540c\u6b65\u5b8c\u6210\u4e4b\u540e\uff0c\u518d\u6b21\u7f16\u8bd1\uff0c\u7f16\u8bd1\u901a\u8fc7\uff0c\u955c\u50cf\u5927\u5c0f\u5df2\u7ecf\u753123M\u53d8\u4e3a15M,\u663e\u7136\u7b2c\u4e00\u6b65\u538b\u7f29\u641e\u5b9a\uff1b\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u8981\u542f\u52a8\u4e00\u4e0b\u8fd9\u4e2a\u955c\u50cf\uff0c\u770b\u770b\u542f\u52a8\u65f6\u6839\u6587\u4ef6\u7cfb\u7edf\u89e3\u538b\u7f29\u662f\u5426\u6709\u95ee\u9898\u3002 \u5f88\u4e0d\u5e78\uff0c\u542f\u52a8\u65f6\u5185\u6838\u62a5\u9519 Kernel panic - not syncing: bad gzip magic numbers \u4e0d\u8981\u614c\uff0c\u6709\u9519\u8bef\u6253\u5370\u5c31\u597d\u529e\uff0c\u4ece\u6253\u5370\u770b\u5f88\u660e\u663e\u662f\u5185\u6838\u8fd8\u4ee5\u4e3a\u6839\u6587\u4ef6\u7cfb\u7edf\u662fgzip\u538b\u7f29\u683c\u5f0f\u7684\u3002 \u6211\u4eec\u5148\u627e\u5230\u5177\u4f53\u6253\u5370\u7684\u4f4d\u7f6e \u4e0b\u8ff0\u4ee3\u7801\u6765\u6e90\u4e8e2.6.32\u5185\u6838 // lib/inflate.c 1187 /* 1188 * Do the uncompression! 1189 */ 1190 static int INIT gunzip ( void ) 1191 { 1203 if ( magic [ 0 ] != 037 || 1204 (( magic [ 1 ] != 0213 ) && ( magic [ 1 ] != 0236 ))) { 1205 error ( \"bad gzip magic numbers\" ); 1206 return -1 ; 1207 } // lib/decompress.c static const struct compress_format { 27 unsigned char magic [ 2 ]; 28 const char * name ; 29 decompress_fn decompressor ; 30 } compressed_formats [] = { 31 { { 037 , 0213 }, \"gzip\" , gunzip }, 32 { { 037 , 0236 }, \"gzip\" , gunzip }, 33 { { 0x42 , 0x5a }, \"bzip2\" , bunzip2 }, 34 { { 0x5d , 0x00 }, \"lzma\" , unlzma }, 35 { { 0 , 0 }, NULL , NULL } 36 }; 37 38 decompress_fn decompress_method ( const unsigned char * inbuf , int len , 39 const char ** name ) 40 { 41 const struct compress_format * cf ; 42 43 if ( len < 2 ) 44 return NULL ; /* Need at least this much... */ 45 46 for ( cf = compressed_formats ; cf -> name ; cf ++ ) { 47 if ( ! memcmp ( inbuf , cf -> magic , 2 )) 48 break ; 49 50 } 51 if ( name ) 52 * name = cf -> name ; 53 return cf -> decompressor ; 54 } // init/initramfs.c 414 static char * __init unpack_to_rootfs ( char * buf , unsigned len ) 415 { 447 decompress = decompress_method ( buf , len , & compress_name ); \u4e0b\u8ff0\u4ee3\u7801\u6765\u6e90\u4e8e2.6.29\u5185\u6838 479 static char * __init unpack_to_rootfs ( char * buf , unsigned len , int check_only ) 480 { 515 gunzip (); \u76f8\u4fe1\u901a\u8fc7\u4e0a\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u5927\u5bb6\u5df2\u7ecf\u4e86\u89e3\u4e86initramfs\u662f\u5982\u4f55\u89e3\u538b\u7f29\u7684,\u4e0d\u591a\u8bf4\uff0c\u63a5\u7740\u540c\u6b65\u4ee3\u7801\uff0c\u4e3b\u8981\u662f\u5c06decompress_method \u79fb\u690d\u8fc7\u6765\uff0c\u5176\u4ed6\u7684\u4e0d\u52a8\u3002 \u4fee\u6539\u5b8c\u540e\uff0c\u6211\u4eec\u518d\u6b21\u7f16\u8bd1\uff0c\u542f\u52a8\uff0cinitramfs\u5df2\u7ecf\u80fd\u591f\u6b63\u5e38\u89e3\u538b\u7f29\u4e86\uff0c\u81f3\u6b64\uff0c\u79fb\u690d\u6d3b\u52a8\u5c31\u5b8c\u6210\u4e86\u3002 \u540e\u8bb0 \u00b6 \u5728\u505a\u8fd9\u4e2a\u7684\u65f6\u5019\u4e5f\u60f3\u8fc7\u76f4\u63a5\u53bb\u627e\u5185\u6838\u7684path,\u4f46\u627e\u8d77\u6765\u6bd4\u8f83\u590d\u6742\uff0c\u5c31\u653e\u5f03\u4e86\u8fd9\u4e2a\u601d\u8def\u3002 \u5bf9\u4e8e\u5185\u6838\u7684\u7f16\u8bd1\u3001\u538b\u7f29\u3001\u89e3\u538b\u7f29\u9700\u8981\u8fdb\u4e00\u6b65\u6df1\u5165\u7814\u7a76\u3002","title":"transplant LZMA compression algo from linux2.6.32 to linux2.6.29"},{"location":"linux/lzma_transplant.html#transplant-lzma-compression-algo-from-linux2632-to-linux2629","text":"\u4e0d\u540c\u7684\u538b\u7f29\u7b97\u6cd5\u7684\u538b\u7f29\u6548\u7387\u3001\u538b\u7f29/\u89e3\u538b\u7f29\u65f6\u95f4\u4e0d\u540c\u3002LZMA\u7684\u538b\u7f29\u7387\u8981\u6bd4gzip\u9ad8\u7684\u591a\u3002\u6700\u8fd1\u9879\u76ee\u4e2d\u9047\u5230\u7cfb\u7edf\u955c\u50cf\u8d85\u51fa\u5206\u533a\u5927\u5c0f\u7684\u95ee\u9898\uff0c\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u6539\u53d8\u5185\u6838\u538b\u7f29\u7b97\u6cd5\u6765\u89e3\u51b3\u3002\u53ef\u60dc\u9879\u76ee\u4e2d\u6240\u4f7f\u7528\u7684\u5185\u6838linux2.6.29\u7248\u672c\u592a\u4f4e\uff0c\u4ec5\u652f\u6301gzip\u538b\u7f29\uff0c\u4e0d\u652f\u6301LZMA\u538b\u7f29\uff0c\u6240\u4ee5\u6211\u4eec\u4ece\u9ad8\u7248\u672c\u5185\u6838\u4e2d\u79fb\u690dLZMA\u548cbzip2\u538b\u7f29\u7b97\u6cd5\u6765\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002","title":"transplant LZMA compression algo from linux2.6.32 to linux2.6.29"},{"location":"linux/lzma_transplant.html#_1","text":"\u4ecelinux2.6.32\u79fb\u690dLZMA\u548cbzip2\u5230linux2.6.29 \u76ee\u6807\u67b6\u6784\u4e3apowerpc initramfs\u91c7\u7528LZMA\u538b\u7f29\uff0cimage\u955c\u50cf\u91c7\u7528gzip\u538b\u7f29","title":"\u76ee\u6807"},{"location":"linux/lzma_transplant.html#lzmainitramfs","text":"\u5728\u5185\u6838\u914d\u7f6e\u4e2d,\u9700\u8981\u9009\u62e9\u652f\u6301LZMA\u5e76\u4e14\u9009\u62e9built-in initramfs compression mode \u4e3aLZMA General setup ---> [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support (../../../product/s3000gb/rootfs) Initramfs source file(s) (0) User ID to map to 0 (user root) (0) Group ID to map to 0 (group root) [*] Support initial ramdisks compressed using gzip [ ] Support initial ramdisks compressed using bzip2 [*] Support initial ramdisks compressed using LZMA Built-in initramfs compression mode (LZMA) --->","title":"\u5982\u4f55\u9009\u62e9LZMA\u6765\u538b\u7f29initramfs"},{"location":"linux/lzma_transplant.html#_2","text":"\u6211\u4eec\u5148\u67e5\u627e\u4e0eSupport initial ramdisks compressed using LZMA \u76f8\u5173\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b\u6b64\u914d\u7f6e\u9009\u9879\u7684help\u4fe1\u606f\u6765\u627e\u5230\u5177\u4f53\u7684\u6587\u4ef6\uff0chelp\u4fe1\u606f\u4e2d\u6709\u4e24\u4e2a\u76f8\u5173\u7684\u5b8f Symbol: RD_LZMA [=y] Depends on: BLK_DEV_INITRD [=y] && EMBEDDED [=y] Selects: DECOMPRESS_LZMA \u6211\u4eec\u57282.6.32\u4e2d\u641c\u7d22 RD_LZMA , \u4f1a\u53d1\u73b0\u5927\u90e8\u5206\u7684\u5f15\u7528\u90fd\u662f\u5728/arch/xx/config/xxx_defconfig\u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u4e0d\u53bb\u5173\u5fc3\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u6211\u4eec\u9700\u8981\u5173\u5fc3\u7684\u6240\u6709\u641c\u7d22\u7ed3\u679c usr/Kconfig: config RD_LZMA usr/Kconfig: depends on RD_LZMA \u6211\u4eec\u53d1\u73b0\u5176\u5b9eRD_LZMA\u4ec5\u5728usr\u76ee\u5f55\u4e0b\u6709\u5f15\u7528\uff0c\u5176\u5b9e\u5728\u5185\u6838\u7f16\u8bd1\u65f6\uff0cusr/built-in.o \u4e3b\u8981\u5c31\u662finitramfs\u7684\u955c\u50cf\uff0c\u6211\u4eec\u5b9a\u5236initramfs\u662f\u901a\u8fc7\u521b\u5efa\u4e00\u4e2acpio\u683c\u5f0f\u7684\u6863\u6848\u6587\u4ef6\u6765\u5b9e\u73b0\u7684\uff0c\u6211\u4eec\u5c31\u662f\u8981\u5b9e\u73b0\u7528LZMA\u6765\u538b\u7f29\u8fd9\u4e2acpio\u6587\u4ef6\u3002 \u6211\u4eec\u67e5\u770b\u4e00\u4e0busr\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6, \u5355\u4ece\u6587\u4ef6\u540d\u5df2\u7ecf\u80fd\u591f\u63a8\u7406\u51fa\u5404\u4e2a\u6587\u4ef6\u7684\u5173\u7cfb\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u540c\u6b65\u5230linux2.6.29\u4e2d root@99-252:~/V2.1.5.67086/kernel/uClinux/linux-2.6.32.x/usr# ls -al -rw-r--r-- 1 13448 6406 12543 5\u6708 17 2016 gen_init_cpio.c -rw-r--r-- 1 13448 6406 1024 5\u6708 17 2016 initramfs_data.bz2.S -rw-r--r-- 1 13448 6406 1023 5\u6708 17 2016 initramfs_data.gz.S -rw-r--r-- 1 13448 6406 1025 5\u6708 17 2016 initramfs_data.lzma.S -rw-r--r-- 1 13448 6406 1021 5\u6708 17 2016 initramfs_data.S -rw-r--r-- 1 13448 6406 4514 5\u6708 17 2016 Kconfig -rw-r--r-- 1 13448 6406 2154 5\u6708 17 2016 Makefile \u8fd9\u4e9b\u6587\u4ef6\u5177\u4f53\u7684\u529f\u80fd\u662f\u4ec0\u4e48\u5462\uff1f\u5177\u4f53\u5230\u6bcf\u4e2a\u6587\u4ef6\u91cc\u9762\u53bb\u770b\u4e00\u4e0b\uff0c\u53d1\u73b0\u5176\u5b9e\u8fd9\u4e9b\u6587\u4ef6\u91cc\u9762\u6ca1\u505a\u4ec0\u4e48\u6709\u4ef7\u503c\u7684\u64cd\u4f5c\uff0c\u4ec5\u4ec5\u662f\u6839\u636ekconfig\u6307\u5b9a\u4e86cpio\u7684\u538b\u7f29\u683c\u5f0f\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u518d\u53bb\u627e\u53e6\u4e00\u4e2a\u5b8f==DECOMPRESS_LZMA==\uff0c\u627e\u7684\u65b9\u6cd5\u548c\u4e0a\u4e00\u4e2a\u4e00\u6837\uff0c\u6211\u4eec\u5148\u5728linux2.6.32\u4e2d\u67e5\u627e\u8fd9\u4e2a\u5b8f\uff0c\u540c\u6837\u7684,\u4f1a\u6709\u5f88\u591aarch/xx/configs/xxx_defconfig\u6587\u4ef6\u4e2d\u6709\u5f15\u7528\uff0c\u8fd9\u4e9b\u6211\u4eec\u4e0d\u53bb\u5173\u7cfb\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u9664defconfig\u4e4b\u5916\u7684\u5f15\u7528\u3002 // squashfs\u662f\u538b\u7f29\u53ea\u8bfb\u6587\u4ef6\u7cfb\u7edf\uff0c\u80fd\u591f\u538b\u7f29\u7cfb\u7edf\u5185\u7684\u6587\u6863\uff0cinode\u4ee5\u53ca\u76ee\u5f55\uff0c\u663e\u7136\u8fd9\u4e2a\u6211\u4eec\u4e5f\u65e0\u9700\u5173\u5fc3 fs/squashfs/Kconfig: select DECOMPRESS_LZMA fs/squashfs/Kconfig: select DECOMPRESS_LZMA_NEEDED // \u5934\u6587\u4ef6\uff0c\u663e\u7136\u8fd9\u4e2a\u5fc5\u987b\u79fb\u690d include/linux/decompress/unlzma_mm.h:#elif defined(CONFIG_DECOMPRESS_LZMA_NEEDED) // \u89e3\u538b\u7f29\u76f8\u5173\u7684\u6587\u4ef6\uff0c\u663e\u7136\u8fd9\u4e2a\u6211\u4eec\u5fc5\u987b\u79fb\u690d lib/decompress.c:#ifndef CONFIG_DECOMPRESS_LZMA lib/Makefile:lib-$(CONFIG_DECOMPRESS_LZMA) += decompress_unlzma.o lib/Kconfig:config DECOMPRESS_LZMA lib/Kconfig:config DECOMPRESS_LZMA_NEEDED lib/decompress_unlzma.c:#elif defined(CONFIG_DECOMPRESS_LZMA_NEEDED) // \u5df2\u7ecf\u540c\u6b65\u8fc7\u4e86\uff0c\u4e0d\u518d\u9700\u8981\u5173\u5fc3 usr/Kconfig: select DECOMPRESS_LZMA \u6211\u4eec\u53d1\u73b0\u5176\u5b9e\u6211\u4eec\u53ea\u9700\u8981\u79fb\u690d\u5934\u6587\u4ef6\u548clib\u76ee\u5f55\u4e0b\u7684\u89e3\u538b\u7f29\u6587\u4ef6\u5c31\u53ef\u4ee5\u4e86\uff0c\u79fb\u690d\u7684\u65b9\u6cd5\u662f\u5bf9\u6bd4\u76f8\u5e94\u7684\u76ee\u5f55\u627e\u5230\u76f8\u5173\u7684\u4ee3\u7801\uff0c\u540c\u6b65\uff0c\u9700\u8981\u6ce8\u610fmakefile\u548ckconfig\u4e5f\u9700\u8981\u76f8\u5e94\u7684\u4fee\u6539\u3002 \u79fb\u690d\u5b8c\u6210\u540e\u54b1\u4eec\u6765\u5c1d\u8bd5\u7f16\u8bd1\u4e00\u4e0bkernel, \u5148\u8fdb\u5165menuconfig\u8bbe\u7f6e\u4e00\u4e0b\u65b0\u589e\u7684\u914d\u7f6e\uff0c\u52fe\u9009\u4e4b\u524d\u63cf\u8ff0\u7684\u9009\u9879\uff0c\u7136\u540e\u7f16\u8bd1 \u6211\u4eec\u53d1\u73b0\u786e\u5b9e\u751f\u6210\u4e86lzma\u7684cpio\u6587\u4ef6 make kernel scripts/kconfig/conf -s arch/powerpc/Kconfig CHK include/linux/version.h CHK include/linux/utsrelease.h SYMLINK include/asm -> include/asm-powerpc CALL scripts/checksyscalls.sh sed: can't read /home/chenhao/ros5.4/br_ros5.4_rsp_dev_20161214/rsp/kernel/linux-2.6.29.6-bmw/arch/x86/include/asm/unistd_32.h: No such file or directory CHK include/linux/compile.h GEN usr/initramfs_data.cpio.lzma AS usr/initramfs_data.lzma.o LD usr/built-in.o \u4f46\u6700\u7ec8\u7f16\u8bd1\u51fa\u7684\u955c\u50cf\u5927\u5c0f\u6ca1\u6709\u6539\u53d8\uff0c\u8fd9\u662f\u4ec0\u4e48\u539f\u56e0\u5462\uff1f \u6211\u4eec\u76f8\u4fe1LZMA\u7684\u538b\u7f29\u7387\u662f\u6bd4gzip\u9ad8\u7684\u591a\u7684\uff0c\u800c\u4e14\u6211\u4eec\u4e5f\u53ef\u4ee5\u5b9e\u9645\u9a8c\u8bc1\u8fd9\u4e00\u70b9 root@ubuntu:~/test_lzma# lzma -k initramfs_data.cpio root@ubuntu:~/test_lzma# gzip initramfs_data.cpio root@ubuntu:~/test_lzma# ls -al -rw-r--r-- 1 root root 63202304 Jul 11 05 :10 initramfs_data.cpio -rw-r--r-- 1 root root 21340431 Jul 11 05 :10 initramfs_data.cpio.gz -rw-r--r-- 1 root root 13816814 Jul 11 05 :10 initramfs_data.cpio.lzma \u90a3\u4e48\u6781\u5927\u53ef\u80fd\u662f\u538b\u7f29\u65f6\u6ca1\u6709\u771f\u6b63\u7684\u4f7f\u7528LZMA\u538b\u7f29\u7b97\u6cd5,\u6211\u4eec\u5148\u53bb\u770b\u4e00\u4e0bcpio\u538b\u7f29\u6587\u4ef6 root@ubuntu:~/ros5.4/br_ros5.4_rsp_dev_20161214/rsp/kernel/linux-2.6.29.6-bmw/usr# lzmainfo initramfs_data.cpio.lzma lzmainfo: initramfs_data.cpio.lzma: Not a .lzma file \u770b\u6765\u771f\u7684\u662f\u8fd9\u6837\uff0c\u4ec5\u4ec5\u662f\u538b\u7f29\u6587\u4ef6\u540d\u53d8\u6210\u4e86lzma\uff0c\u5176\u5b9e\u538b\u7f29\u7b97\u6cd5\u6ca1\u6709\u6539\u53d8\u3002\u90a3\u4e48\u5177\u4f53initramfs\u662f\u600e\u6837\u538b\u7f29\u7684\u5462\uff1f\u8fd8\u8bb0\u5f97\u6211\u4eec\u524d\u9762\u8bf4\u7684usr\u76ee\u5f55\u4e0b\u7684\u90a3\u51e0\u4e2a\u6587\u4ef6\u5417\uff1f\u90a3\u51e0\u4e2a\u6587\u4ef6\u4e0d\u5c31\u662f\u51b3\u5b9a\u538b\u7f29\u7b97\u6cd5\u7684\u5417\uff1f\u4e00\u5b9a\u662f\u90a3\u4e2a\u5730\u65b9\u51fa\u4e86\u95ee\u9898\u3002 \u6211\u4eec\u5148\u770b\u4e00\u4e0blinux2.6.32/usr\u76ee\u5f55\u4e0b\u7684==Makefile==\u6587\u4ef6 26 ##### 27 # Generate the initramfs cpio archive 28 29 hostprogs-y : = gen_init_cpio 30 initramfs : = $( CONFIG_SHELL ) $( srctree ) /scripts/gen_initramfs_list.sh 31 ramfs-input : = $(if $( filter-out \"\" , $( CONFIG_INITRAMFS_SOURCE )) , \\ 32 $( shell echo $( CONFIG_INITRAMFS_SOURCE )) ,-d ) 33 ramfs-args : = \\ 34 $(if $( CONFIG_INITRAMFS_ROOT_UID ) , -u $( CONFIG_INITRAMFS_ROOT_UID )) \\ 35 $(if $( CONFIG_INITRAMFS_ROOT_GID ) , -g $( CONFIG_INITRAMFS_ROOT_GID )) 36 37 # .initramfs_data.cpio.d is used to identify all files included 38 # in initramfs and to detect if any files are added/removed. 39 # Removed files are identified by directory timestamp being updated 40 # The dependency list is generated by gen_initramfs.sh -l 41 ifneq ( $( wildcard $( obj ) /.initramfs_data.cpio.d ) , ) 42 include $( obj ) /.initramfs_data.cpio.d 43 endif 44 45 quiet_cmd_initfs = GEN $@ 46 cmd_initfs = $( initramfs ) -o $@ $( ramfs-args ) $( ramfs-input ) 47 48 targets : = initramfs_data.cpio.gz initramfs_data.cpio.bz2 initramfs_data.cpio.lzma initramfs_data.cpio 49 # do not try to update files included in initramfs 50 $( deps_initramfs ) : ; \u6211\u60f3\u5927\u5bb6\u4e5f\u53d1\u73b0\u4e86\uff0c\u6574\u4e2amakefile\u6ca1\u6709\u8bf4\u538b\u7f29\u4ec0\u4e48\u4e8b\uff0c\u4f46\u662f==30\u884c==\u548c==46\u884c==\u660e\u663e\u662f\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u8c03\u7528\u4e86scripts\u76ee\u5f55\u4e0b\u7684gen_initramfs_list.sh \u7684\u811a\u672c\uff0c\u5f88\u591a\u8d44\u6599\u90fd\u4f1a\u8bb2\u5230\u8fd9\u4e2a\u6587\u4ef6\u7684\u4f5c\u7528\uff0c\u538b\u7f29\u7b97\u6cd5\u4e00\u5b9a\u5728\u8fd9\u4e2a\u811a\u672c\u4e2d\u6307\u5b9a\u4e86\uff0c\u6211\u4eec\u53bblinux2.6.32\u4e2d\u770b\u4e00\u4e0b 227 is_cpio_compressed = 228 compr = \"gzip -9 -f\" 229 230 arg = \" $1 \" 231 case \" $arg \" in 232 \"-l\" ) # files included in initramfs - used by kbuild 233 dep_list = \"list_\" 234 echo \"deps_initramfs := \\\\\" 235 shift 236 ;; 237 \"-o\" ) # generate compressed cpio image named $1 238 shift 239 output_file = \" $1 \" 240 cpio_list = \" $( mktemp ${ TMPDIR :- /tmp } /cpiolist.XXXXXX ) \" 241 output = ${ cpio_list } 242 echo \" $output_file \" | grep -q \"\\.gz $ \" && compr = \"gzip -9 -f\" 243 echo \" $output_file \" | grep -q \"\\.bz2 $ \" && compr = \"bzip2 -9 -f\" 244 echo \" $output_file \" | grep -q \"\\.lzma $ \" && compr = \"lzma -9 -f\" 245 echo \" $output_file \" | grep -q \"\\.cpio $ \" && compr = \"cat\" 246 shift 247 ;; 248 esac 282 # If output_file is set we will generate cpio archive and compress it 283 # we are carefull to delete tmp files 284 if [ ! -z ${ output_file } ] ; then 285 if [ -z ${ cpio_file } ] ; then 286 cpio_tfile = \" $( mktemp ${ TMPDIR :- /tmp } /cpiofile.XXXXXX ) \" 287 usr/gen_init_cpio ${ cpio_list } > ${ cpio_tfile } 288 else 289 cpio_tfile = ${ cpio_file } 290 fi 291 rm ${ cpio_list } 292 if [ \" ${ is_cpio_compressed } \" = \"compressed\" ] ; then 293 cat ${ cpio_tfile } > ${ output_file } 294 else 295 ( cat ${ cpio_tfile } | ${ compr } - > ${ output_file } ) \\ 296 || ( rm -f ${ output_file } ; false ) 297 fi 298 [ -z ${ cpio_file } ] && rm ${ cpio_tfile } 299 fi \u786e\u5b9e\u8fd9\u91cc\u9762\u5b9e\u73b0\u4e86cpio\u7684\u538b\u7f29\uff0c\u90a3\u4e48\u4e0d\u591a\u8bf4\uff0c\u628a\u8fd9\u4e9b\u90fd\u540c\u6b65\u8fc7\u53bb\u3002 \u540c\u6b65\u5b8c\u6210\u4e4b\u540e\uff0c\u518d\u6b21\u7f16\u8bd1\uff0c\u7f16\u8bd1\u901a\u8fc7\uff0c\u955c\u50cf\u5927\u5c0f\u5df2\u7ecf\u753123M\u53d8\u4e3a15M,\u663e\u7136\u7b2c\u4e00\u6b65\u538b\u7f29\u641e\u5b9a\uff1b\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u8981\u542f\u52a8\u4e00\u4e0b\u8fd9\u4e2a\u955c\u50cf\uff0c\u770b\u770b\u542f\u52a8\u65f6\u6839\u6587\u4ef6\u7cfb\u7edf\u89e3\u538b\u7f29\u662f\u5426\u6709\u95ee\u9898\u3002 \u5f88\u4e0d\u5e78\uff0c\u542f\u52a8\u65f6\u5185\u6838\u62a5\u9519 Kernel panic - not syncing: bad gzip magic numbers \u4e0d\u8981\u614c\uff0c\u6709\u9519\u8bef\u6253\u5370\u5c31\u597d\u529e\uff0c\u4ece\u6253\u5370\u770b\u5f88\u660e\u663e\u662f\u5185\u6838\u8fd8\u4ee5\u4e3a\u6839\u6587\u4ef6\u7cfb\u7edf\u662fgzip\u538b\u7f29\u683c\u5f0f\u7684\u3002 \u6211\u4eec\u5148\u627e\u5230\u5177\u4f53\u6253\u5370\u7684\u4f4d\u7f6e \u4e0b\u8ff0\u4ee3\u7801\u6765\u6e90\u4e8e2.6.32\u5185\u6838 // lib/inflate.c 1187 /* 1188 * Do the uncompression! 1189 */ 1190 static int INIT gunzip ( void ) 1191 { 1203 if ( magic [ 0 ] != 037 || 1204 (( magic [ 1 ] != 0213 ) && ( magic [ 1 ] != 0236 ))) { 1205 error ( \"bad gzip magic numbers\" ); 1206 return -1 ; 1207 } // lib/decompress.c static const struct compress_format { 27 unsigned char magic [ 2 ]; 28 const char * name ; 29 decompress_fn decompressor ; 30 } compressed_formats [] = { 31 { { 037 , 0213 }, \"gzip\" , gunzip }, 32 { { 037 , 0236 }, \"gzip\" , gunzip }, 33 { { 0x42 , 0x5a }, \"bzip2\" , bunzip2 }, 34 { { 0x5d , 0x00 }, \"lzma\" , unlzma }, 35 { { 0 , 0 }, NULL , NULL } 36 }; 37 38 decompress_fn decompress_method ( const unsigned char * inbuf , int len , 39 const char ** name ) 40 { 41 const struct compress_format * cf ; 42 43 if ( len < 2 ) 44 return NULL ; /* Need at least this much... */ 45 46 for ( cf = compressed_formats ; cf -> name ; cf ++ ) { 47 if ( ! memcmp ( inbuf , cf -> magic , 2 )) 48 break ; 49 50 } 51 if ( name ) 52 * name = cf -> name ; 53 return cf -> decompressor ; 54 } // init/initramfs.c 414 static char * __init unpack_to_rootfs ( char * buf , unsigned len ) 415 { 447 decompress = decompress_method ( buf , len , & compress_name ); \u4e0b\u8ff0\u4ee3\u7801\u6765\u6e90\u4e8e2.6.29\u5185\u6838 479 static char * __init unpack_to_rootfs ( char * buf , unsigned len , int check_only ) 480 { 515 gunzip (); \u76f8\u4fe1\u901a\u8fc7\u4e0a\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u5927\u5bb6\u5df2\u7ecf\u4e86\u89e3\u4e86initramfs\u662f\u5982\u4f55\u89e3\u538b\u7f29\u7684,\u4e0d\u591a\u8bf4\uff0c\u63a5\u7740\u540c\u6b65\u4ee3\u7801\uff0c\u4e3b\u8981\u662f\u5c06decompress_method \u79fb\u690d\u8fc7\u6765\uff0c\u5176\u4ed6\u7684\u4e0d\u52a8\u3002 \u4fee\u6539\u5b8c\u540e\uff0c\u6211\u4eec\u518d\u6b21\u7f16\u8bd1\uff0c\u542f\u52a8\uff0cinitramfs\u5df2\u7ecf\u80fd\u591f\u6b63\u5e38\u89e3\u538b\u7f29\u4e86\uff0c\u81f3\u6b64\uff0c\u79fb\u690d\u6d3b\u52a8\u5c31\u5b8c\u6210\u4e86\u3002","title":"\u79fb\u690d\u8fc7\u7a0b"},{"location":"linux/lzma_transplant.html#_3","text":"\u5728\u505a\u8fd9\u4e2a\u7684\u65f6\u5019\u4e5f\u60f3\u8fc7\u76f4\u63a5\u53bb\u627e\u5185\u6838\u7684path,\u4f46\u627e\u8d77\u6765\u6bd4\u8f83\u590d\u6742\uff0c\u5c31\u653e\u5f03\u4e86\u8fd9\u4e2a\u601d\u8def\u3002 \u5bf9\u4e8e\u5185\u6838\u7684\u7f16\u8bd1\u3001\u538b\u7f29\u3001\u89e3\u538b\u7f29\u9700\u8981\u8fdb\u4e00\u6b65\u6df1\u5165\u7814\u7a76\u3002","title":"\u540e\u8bb0"},{"location":"linux/sync-and-exclusion.html","text":"Linux\u7684\u540c\u6b65\u548c\u4e92\u65a5\u673a\u5236 \u00b6 Linux\u7684\u540c\u6b65\u548c\u4e92\u65a5\u673a\u5236 \u81ea\u65cb\u9501 \u8bfb\u5199\u9501 \u4fe1\u53f7\u91cf \u4e92\u65a5\u91cf \u9501\u7684\u6d4b\u8bd5\u65b9\u6cd5 \u5728\u9762\u5bf9\u9700\u8981\u540c\u6b65\u548c\u4e92\u65a5\u673a\u5236\u7684\u573a\u666f\u65f6\uff0c\u53ea\u6709\u719f\u7ec3\u638c\u63e1linux\u63d0\u4f9b\u7684\u540c\u6b65\u548c\u4e92\u65a5\u673a\u5236\uff0c\u624d\u80fd\u7075\u6d3b\u8fd0\u7528\uff0c\u4e3e\u4e00\u53cd\u4e09\u3002 \u81ea\u65cb\u9501(spin lock) \u8bfb\u5199\u9501(read-write lock) \u4fe1\u53f7\u91cf(semaphore) \u4e92\u65a5\u91cf(mutex) RCU \u5f53\u7136\u5b9d\u534e\u8001\u5e08\u548c\u4e00\u4f17\u5185\u6838\u5927\u795e\u5df2\u7ecf\u5bf9\u8fd9\u4e9b\u505a\u4e86\u975e\u5e38\u8be6\u7ec6\u7684\u603b\u7ed3\uff0c\u5305\u62ec\u4f7f\u7528\u573a\u666f\uff0c\u6ce8\u610f\u4e8b\u9879\uff0c\u5b9e\u73b0\u539f\u7406\u7b49\u3002 \u5927\u5bb6\u7684\u603b\u7ed3\u666e\u904d\u9488\u5bf9arm\u67b6\u6784\uff0c\u6b64\u7bc7\u603b\u7ed3\u6211\u4f1a\u9488\u5bf9riscv\u67b6\u6784\u6765\u5c55\u5f00\uff0c\u4e89\u53d6\u505a\u5230\u6709\u4e00\u70b9\u513f\u7279\u8272\u3002\u4f46\u6700\u5173\u952e\u7684\u8fd8\u662f \u501f\u6b64\u673a\u4f1a\u5de9\u56fa\u57fa\u7840\uff0c\u68b3\u7406\u601d\u60f3\u3002 \u6240\u6709\u4ee3\u7801\u57fa\u4e8elinux5.11 \u81ea\u65cb\u9501 \u00b6 \u5728\u9a71\u52a8\u5f00\u53d1\u4e2d\uff0c\u7ecf\u5e38\u4f1a\u7528\u5230\u81ea\u65cb\u9501\u3002\u81ea\u65cb\u9501\u5728\u7b49\u9501\u7684\u65f6\u5019\uff0c\u4f1a\u4e00\u76f4\u8f6e\u8be2\uff0c\u800c\u4e0d\u4f1a\u7761\u7720\u5f53\u524d\u7ebf\u7a0b\uff0c\u6240\u4ee5\u5b83\u7ecf\u5e38\u7528\u5728 \u9700\u8981\u5728\u4e2d\u65ad\u4e0a\u4e0b\u6587(\u4e0d\u80fd\u8fdb\u884csleep)\u8fdb\u884c\u6570\u636e\u4fdd\u62a4\u7684\u573a\u666f\u3002\u6240\u8c13\u81ea\u65cb\uff0c\u5c31\u662f\u8f6e\u8be2\uff0c\u4f1a\u6301\u7eed\u5360\u6709CPU\uff0c\u56e0\u6b64\u4e34\u754c\u533a\u7684\u5904\u7406 \u5e94\u8be5\u8d8a\u7b80\u6d01\u8d8a\u597d\u3002\u53ea\u8981\u7b49\u5f85\u7684\u4ee3\u4ef7\u4f4e\u4e8e\u8c03\u5ea6\u7684\u4ee3\u4ef7\uff0c\u90a3\u5c31\u8d5a\u4e86\u3002 \u4ee3\u7801\u7ed3\u6784\u4e0a\uff0c\u6a2a\u5411\u6765\u770b\uff0cspinlock\u7684\u5b9e\u73b0\u5206\u4e3aSMP\u548cUP\u4e24\u4e2a\u5927\u5206\u652f\uff0c\u6bcf\u4e2a\u5206\u652f\u4e0b\u6839\u636e\u662f\u5426\u662fdebug\u53c8\u6709\u6240\u4e0d\u540c\u3002\u7eb5\u5411\u6765\u770b\uff0c \u5305\u542b\u67b6\u6784\u65e0\u5173\u7684API\u5c42\u4ee5\u53ca\u67b6\u6784\u76f8\u5173\u7684arch\u5c42\u3002 \u4ee5spin_lock_irqsave\u4e3e\u4f8b\u6765\u5206\u6790\u5185\u6838\u7684\u8bbe\u8ba1\u601d\u8def\uff0c\u4e0e\u6b64\u540c\u65f6\uff0c\u66f4\u52a0\u5370\u8bc1\u4e86\u6240\u6709\u8ba1\u7b97\u673a\u7cfb\u7edf\u95ee\u9898\u90fd\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0\u4e00\u5c42\u6765\u89e3\u51b3\uff0c\u5982\u679c\u4e0d\u884c\uff0c \u518d\u52a0\u4e00\u5c42\u3002 spinlock.h\u4e2d\u7684\u5b9a\u4e49\u5982\u4e0b #define spin_lock_irqsave(lock, flags) \\ do { \\ raw_spin_lock_irqsave(spinlock_check(lock), flags); \\ } while (0) \u53ef\u4ee5\u770b\u51faspin_lock_xxxx \u662f\u7528\u6237\u63a5\u53e3\uff0c\u6211\u4eec\u5728\u7f16\u7a0b\u65f6\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\uff0craw_spin_lock_xxxx\u662f\u6838\u5fc3\u5b9e\u73b0\uff0c\u591a\u4e2a\u7528\u6237\u63a5\u53e3\u53ef\u80fd\u90fd\u53ef\u4ee5\u7528\u8be5\u6838\u5fc3\u5b9e\u73b0\u5c42\u6765\u5b9e\u73b0\uff0c\u8fd9\u4e00\u5c42\u7684\u4f5c\u7528\u662f\u5728\u53bb\u6389\u4e86\u4ee3\u7801\u5197\u4f59\u7684\u540c\u65f6\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u7528\u6237\u63a5\u53e3\u3002 #if defined(CONFIG_SMP) || defined(CONFIG_DEBUG_SPINLOCK) #define raw_spin_lock_irqsave(lock, flags) \\ do { \\ typecheck(unsigned long, flags); \\ flags = _raw_spin_lock_irqsave(lock); \\ } while (0) #else #define raw_spin_lock_irqsave(lock, flags) \\ do { \\ typecheck(unsigned long, flags); \\ _raw_spin_lock_irqsave(lock, flags); \\ } while (0) #endif raw_spin_lock_xxxx \u4e5f\u5c4f\u853d\u4e86SMP\u548cUP\u4ee5\u53caDEBUG\u7684\u5dee\u5f02\uff0c_raw_spin_lock_xxxx \u662f\u4e0b\u4e00\u5c42\u7684\u6838\u5fc3\u5b9e\u73b0\u3002 #ifdef CONFIG_INLINE_SPIN_LOCK_IRQSAVE #define _raw_spin_lock_irqsave(lock) __raw_spin_lock_irqsave(lock) #endif #ifndef CONFIG_INLINE_SPIN_LOCK_IRQSAVE unsigned long __lockfunc _raw_spin_lock_irqsave ( raw_spinlock_t * lock ) { return __raw_spin_lock_irqsave ( lock ); } EXPORT_SYMBOL ( _raw_spin_lock_irqsave ); #endif _raw_spin_lock_xxxx\u5c4f\u853d\u4e86inline\u7684\u9009\u62e9\u5dee\u5f02\uff0c\u771f\u6b63\u7684\u5b9e\u73b0\u5728__raw_spin_lock_xxxx\u91cc\u9762\uff0c\u5185\u6838\u7ecf\u5e38\u4f1a\u6709\u4e00\u9053\u6760\u548c\u4e24\u9053\u6760\u7684\u8bbe\u8ba1 static inline void do_raw_spin_lock_flags ( raw_spinlock_t * lock , unsigned long * flags ) __acquires ( lock ) { __acquire ( lock ); arch_spin_lock_flags ( & lock -> raw_lock , * flags ); mmiowb_spin_lock (); } __raw_spin_lock_irqsave \u4f1a\u901a\u8fc7\u4e00\u7cfb\u5217\u5c01\u88c5\u5230arch_spin_lock_xxxx, \u8fd9\u91ccarch\u5f00\u5934\u7684\u5c31\u8981\u53bb\u5404\u4e2aarch\u76ee\u5f55\u4e2d\u627e\u5bf9\u5e94\u67b6\u6784\u7684\u5b9e\u73b0\u4e86\u3002 \u770b\u5b8c\u5c01\u88c5\u5b9e\u73b0\uff0c\u518d\u770b\u770b\u67b6\u6784\u5b9e\u73b0\u3002 arm\u7684spinlock\u5b9d\u534e\u8001\u5e08\u4ee5\u53ca\u4f17\u591a\u7f51\u53cb\u5df2\u7ecf\u5206\u6790\u7684\u5f88\u900f\u5f7b\u4e86\uff0c\u8fd9\u91cc\u63d2\u5165\u76f8\u5173\u6587\u6863\uff0c\u4ee5\u4f9b\u81ea\u5df1\u540e\u7eed\u56de\u987e https://blog.csdn.net/zhoutaopower/article/details/86598839 https://blog.csdn.net/21cnbao/article/details/108091149 \u56e0\u4e3a\u8fd1\u671fRISCV\u63a5\u89e6\u7684\u6bd4\u8f83\u591a\uff0c\u6240\u4ee5\u5e72\u8106\u5206\u6790\u4e00\u4e0bRISCV\u7684spinlock\u5b9e\u73b0\u5427 riscv\u7684smp\u5bf9\u4e8earch_spin_lock\u7684\u5b9a\u4e49\u5982\u4e0b\uff0c\u5e76\u6ca1\u6709arm\u90a3\u6837\u7684owner\u548cnext\uff0c\u53ea\u6709\u4e00\u4e2alock\u3002 typedef struct { volatile unsigned int lock ; } arch_spinlock_t ; \u5728 arch/riscv/include/asm/spinlock.h \u4e2d\u5b9e\u73b0\u4e86\u5e95\u5c42\u7684spinlock\u65b9\u6cd5 //\u4ee3\u7801\u57fa\u4e8elinux5.11\u7248\u672c static inline int arch_spin_trylock ( arch_spinlock_t * lock ) { int tmp = 1 , busy ; __asm__ __volatile__ ( \" amoswap.w %0, %2, %1 \\n \" RISCV_ACQUIRE_BARRIER : \"=r\" ( busy ), \"+A\" ( lock -> lock ) : \"r\" ( tmp ) : \"memory\" ); return ! busy ; } static inline void arch_spin_lock ( arch_spinlock_t * lock ) { while ( 1 ) { if ( arch_spin_is_locked ( lock )) continue ; if ( arch_spin_trylock ( lock )) break ; } } \u5728riscv\u539f\u5b50\u6307\u4ee4\u96c6\u6269\u5c55\u4e00\u7bc7\u4e2d\uff0c\u5df2\u7ecf\u719f\u6089\u4e86amoswap.w\u662f\u539f\u5b50\u5185\u5b58\u64cd\u4f5c\u6307\u4ee4,\u5176\u4e2d\u6307\u4ee4\u683c\u5f0f\u4e3aamoswap.w rd, rs2, (rs1), \u5b9e\u9645\u4e0a\u901a\u8fc7\u539f\u5b50\u4ea4\u6362\u64cd\u4f5c\u6765\u786e\u4fddlock\u6807\u5fd7\u5b8c\u6574\u5199\u5165\u5185\u5b58\u3002 \u597d\u7684\u4e1c\u897f\u603b\u662f\u503c\u5f97\u63a8\u6572\uff0clinux\u7684\u547d\u540d\u7b56\u7565\u6bd4\u914d\u4e0a\u4e00\u4e07\u884c\u6587\u6863\u90fd\u597d\uff0c\u4f55\u51b5\u5176\u6ce8\u91ca\u4e5f\u975e\u5e38\u5230\u4f4d\u3002arch\u5f00\u5934\u7684\u660e\u663e\u662f\u67b6\u6784\u76f8\u5173\u7684\u51fd\u6570\uff0c\u5e94\u8be5\u53bb\u5bf9\u5e94arch\u76ee\u5f55\u4e0b\u6587\u4ef6\u4e2d\u627e\uff0c\u6587\u4ef6\u547d\u540d\u6e05\u6670\u660e\u4e86\u3002 \u8bfb\u5199\u9501 \u00b6 \u4e3a\u4e86\u89e3\u51b3\u591a\u4e2a\u8bfb\u7ebf\u7a0b\u65e0\u6cd5\u5e76\u884c\u7684\u95ee\u9898\uff0c\u5728spinlock\u57fa\u7840\u4e0a\u5b9e\u73b0\u4e86\u8bfb\u5199\u9501\u3002 \u8fd9\u91cc\u53ef\u4ee5\u53c2\u8003[ https://blog.csdn.net/zhoutaopower/article/details/86605987 ] \u6765\u770b\u4ee3\u7801\u5b9e\u73b0\uff0c\u5728\u5206\u6790spinlock\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u770b\u5230\uff0cspinlock.h\u4e2d\u8fd8\u5f15\u7528\u4e86\u8bfb\u5199\u9501\u7684\u5934\u6587\u4ef6rwlock.h \u540c\u6837\u7684\uff0cspinlock_types.h\u4e2d\u4e5f\u5305\u542b\u4e86rwlock\u6570\u636e\u7c7b\u578b\u7684\u5b9a\u4e49\u7684\u5934\u6587\u4ef6rwlock_types.h\uff0c\u6309\u7167spinlock\u7684\u5934\u6587\u4ef6 \u7ed3\u6784\uff0c\u6bcf\u4e2a\u6587\u4ef6\u4e2d\u90fd\u5305\u542b\u4e86rwlock\u76f8\u5173\u7684\u5934\u6587\u4ef6\u3002 \u4ee5writelock\u6765\u5206\u6790\u5c01\u88c5\u5173\u7cfb // include/linux/rwlock.h #define write_lock(lock) _raw_write_lock(lock) // \u5206smp\u548cup\u4e24\u79cd\u5b9e\u73b0\uff0c\u8fd9\u91cc\u53ea\u5206\u6790smp // kernel/locking/spinlock.c void __lockfunc _raw_write_lock ( rwlock_t * lock ) { __raw_write_lock ( lock ); } EXPORT_SYMBOL ( _raw_write_lock ); // include/linux/rwlock_api_smp.h static inline void __raw_write_lock ( rwlock_t * lock ) { preempt_disable (); rwlock_acquire ( & lock -> dep_map , 0 , 0 , _RET_IP_ ); LOCK_CONTENDED ( lock , do_raw_write_trylock , do_raw_write_lock ); } // include/linux/rwlock.h # define do_raw_write_lock(rwlock) do {__acquire(lock); arch_write_lock(&(rwlock)->raw_lock); } while (0) // arch/riscv/include/asm/spinlock.h static inline void arch_write_lock ( arch_rwlock_t * lock ) { int tmp ; __asm__ __volatile__ ( \"1: lr.w %1, %0 \\n \" \" bnez %1, 1b \\n \" \" li %1, -1 \\n \" \" sc.w %1, %1, %0 \\n \" \" bnez %1, 1b \\n \" RISCV_ACQUIRE_BARRIER : \"+A\" ( lock -> lock ), \"=&r\" ( tmp ) :: \"memory\" ); } \u8fd8\u8bb0\u5f97lr.w\u548csc.w\u5417\uff1f\u5728riscv\u7684A\u6269\u5c55\u4e2d\u5206\u6790\u8fc7\uff0criscv\u7684\u539f\u5b50\u64cd\u4f5c\u6709\u4e24\u79cd\u5f62\u5f0f\uff0cspinlock\u7528\u4e86\u539f\u5b50\u5185\u5b58\u64cd\u4f5c\u6307\u4ee4\uff0crwlock\u7528\u4e86Load-Reserved/Store-Conditional \u6307\u4ee4\u3002 \u5c06lock\u4e2d\u7684lock\u5b57\u6bb5\u8bfb\u53d6\u5230tmp\u4e2d\uff0c\u5e76\u5224\u65ad\u662f\u5426\u4e3a0,\u4e0d\u662f0\u5c31\u4f1a\u4e00\u76f4\u8bfb\uff0c\u76f4\u5230\u4e3a0, \u5982\u679c\u662f0,tmp\u53d8\u4e3a-1, \u518d\u628atmp\u5199\u5230lock\u4e2d\uff0c\u5e76\u4e14\u5224\u65ad\u662f\u5426\u4fdd\u5e8f\u6210\u529f\uff0c\u5982\u679c\u4e0d\u6210\u529f\uff0c\u5219\u8981 \u91cd\u65b0\u6267\u884c\u8fd9\u6bb5\u6307\u4ee4\u3002 \u8fd9\u91cc\u518d\u7ed3\u5408\u8bfb\u7684\u5b9e\u73b0\uff0c\u5c31\u66f4\u6e05\u6670\u4e3a\u4ec0\u4e48\u8981\u7528lr,sc\u5b9e\u73b0\u4e86 static inline int arch_read_trylock ( arch_rwlock_t * lock ) { int busy ; __asm__ __volatile__ ( \"1: lr.w %1, %0 \\n \" \" bltz %1, 1f \\n \" \" addi %1, %1, 1 \\n \" \" sc.w %1, %1, %0 \\n \" \" bnez %1, 1b \\n \" RISCV_ACQUIRE_BARRIER \"1: \\n \" : \"+A\" ( lock -> lock ), \"=&r\" ( busy ) :: \"memory\" ); return ! busy ; } \u8bfb\u7684\u65f6\u5019\u901a\u8fc7\u4e00\u4e2abusy\u8ba1\u6570\u6765\u5b9e\u73b0\u591a\u7ebf\u7a0b\u8bfb\u64cd\u4f5c\u5e76\u884c\uff0c\u8fd9\u5c31\u77e5\u9053\u4e3a\u4ec0\u4e48\u5199\u7684\u65f6\u5019\u8981\u8d4b\u503c\u4e3a-1\u4e86\u3002 \u4e0d\u5f97\u4e0d\u518d\u6b21\u611f\u6168\uff0c \u5b66\u4e60\u77e5\u8bc6\u4e00\u5f00\u59cb\u603b\u662f\u70b9\u7684\u5b66\u4e60\uff0c\u4f46\u5b66\u7740\u5b66\u7740\u5c31\u6210\u4e86\u9762\uff0c\u79ef\u7d2f\u7740\u79ef\u7d2f\u7740\u5c31\u5f62\u6210\u4e86\u81ea\u5df1\u7684\u77e5\u8bc6\u56fe \u4fe1\u53f7\u91cf \u00b6 \u524d\u9762\u4e24\u79cd\u90fd\u53ef\u4ee5\u5728\u4e2d\u65ad\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\uff0c\u9002\u5408\u8f7b\u91cf\u7ea7\u7684\u4e34\u754c\u533a\u3002\u4f46\u8fd9\u79cd\u7684\u5f0a\u7aef\u5728\u4e8e\u65e0\u6cd5\u5728\u7b49\u9501\u7684\u65f6\u5019\u91ca\u653eCPU\uff0c\u8c03\u5ea6\u5230\u5176\u4ed6\u4efb\u52a1\u4e2d\u6267\u884c\u3002 \u4fe1\u53f7\u91cf\u53ef\u4ee5\u5b9e\u73b0CPU\u7684\u91ca\u653e\uff0c\u5b83\u662f\u4e00\u79cd\u4f1a\u5bfc\u81f4\u5f53\u524d\u8fdb\u7a0b\u7761\u7720\u7684\u9501\uff0c\u5b83\u9002\u5408\u7528\u5728\u4e34\u754c\u533a\u6bd4\u8f83\u5927\u7684\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u4e2d\u3002 \u5728 Linux \u5185\u6838\u540c\u6b65\uff08\u4e94\uff09\uff1a\u4fe1\u53f7\u91cf\uff08semaphore\uff09 \u4e00\u6587\u4e2d\uff0c\u5df2\u7ecf\u8be6\u7ec6\u63cf\u8ff0\u4e86\u4fe1\u53f7\u91cf\u7684\u4f7f\u7528\u573a\u666f\u3002\u7684\u786e\uff0c\u6211\u4eec\u5728\u7f16\u5199\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u6709\u65f6\u5019\u6ca1\u5f97\u9009\uff0c\u4e2d\u65ad\u4e0a\u4e0b\u6587\u5c31\u53ea\u80fd\u7528\u81ea\u65cb\u9501\uff0c\u4e0d\u80fd\u9009\u4fe1\u53f7\u91cf\uff1b\u8981\u548c\u7528\u6237\u7a7a\u95f4\u505a\u540c\u6b65\u7684\u65f6\u5019\uff0c\u53ea\u80fd\u9009\u4fe1\u53f7\u91cf\uff1b \u6709\u65f6\u5019\u9009\u4fe1\u53f7\u91cf\u8fd8\u662f\u9009\u81ea\u65cb\u9501\uff0c\u53d6\u51b3\u4e0e\u4e34\u8fd1\u533a\u5927\u5c0f\uff0c\u4e5f\u5c31\u662f\u9884\u4f30\u8c03\u5ea6\u7684\u5f00\u9500\u66f4\u5927\u8fd8\u662f\u4e0d\u8c03\u5ea6\u66f4\u6d6a\u8d39CPU\u3002 \u4fe1\u53f7\u91cf\u5141\u8bb8\u591a\u4e2a\u9501\u6301\u6709\u8005\uff0c\u540c\u65f6\u5141\u8bb8\u7684\u6301\u6709\u8005\u6570\u91cf\u53ef\u4ee5\u5728\u58f0\u660e\u4fe1\u53f7\u7684\u65f6\u5019\u6307\u5b9a\u3002\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4fe1\u53f7\u91cf\u5141\u8bb8\u4e00\u4e2a\u9501\u7684\u6301\u6709\u8005\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u4fe1\u53f7\u91cf\u79f0\u4e4b\u4e3a\u4e8c\u503c\u4fe1\u53f7\u91cf\uff0c\u4e5f\u5c31\u662f\u4e92\u65a5\u4fe1\u53f7\u91cf\u3002 struct semaphore { raw_spinlock_t lock ; unsigned int count ; struct list_head wait_list ; }; \u4ece\u5b9a\u4e49\u4e2d\u5c31\u53ef\u4ee5\u770b\u51fa\uff0c\u4fe1\u53f7\u91cf\u7684\u57fa\u7840\u4ecd\u7136\u662f\u81ea\u65cb\u9501\u3002\u5bf9\u4e8e\u4fe1\u53f7\u91cf\u672c\u8eab\u7684\u8bbf\u95ee\uff0c\u4ecd\u7136\u9700\u8981\u81ea\u65cb\u9501\u6765\u4fdd\u62a4\u3002\u5176\u4e2dcount\u5c31\u662f\u6240\u8c13\u7684\u5141\u8bb8\u6301\u6709\u8005\u6570\u91cf\uff0c\u5f53\u7136\u7edd\u5927\u591a\u5c11\u60c5\u51b5\u4e0b\u5b83\u53ea\u5141\u8bb8\u6709\u4e00\u4e2a\u9501\u6301\u6709\u8005(\u8fd9\u91cc\u8fd8\u9700\u8981\u5c31\u5177\u4f53\u573a\u666f\uff01)\u3002 \u4fe1\u53f7\u91cf\u7684\u672f\u8bed\u662fdown\u548cup,\u6240\u8c13down\u5c31\u662f\u83b7\u53d6\u9501\uff0c\u5373count--, \u6240\u8c13up\u5c31\u662f\u91ca\u653e\u9501\uff0c\u5c31\u662fcount++\u3002\u5f53\u7136\uff0c\u8fd9\u91cc\u9762\u5728\u4e0d\u6ee1\u8db3\u6761\u4ef6\u65f6\u4f1a\u8fdb\u884c\u8c03\u5ea6\u3002 down\u7684\u8c03\u5ea6\u51fd\u6570\u5982\u4e0b static inline int __sched __down_common ( struct semaphore * sem , long state , long timeout ) { struct semaphore_waiter waiter ; list_add_tail ( & waiter . list , & sem -> wait_list ); waiter . task = current ; waiter . up = false ; for (;;) { if ( signal_pending_state ( state , current )) goto interrupted ; if ( unlikely ( timeout <= 0 )) goto timed_out ; __set_current_state ( state ); raw_spin_unlock_irq ( & sem -> lock ); timeout = schedule_timeout ( timeout ); raw_spin_lock_irq ( & sem -> lock ); if ( waiter . up ) return 0 ; } timed_out : list_del ( & waiter . list ); return - ETIME ; interrupted : list_del ( & waiter . list ); return - EINTR ; } \u8fd9\u91cc\u6709\u4e00\u5904\u7591\u95ee\uff0c\u5728\u8c03\u5ea6\u4e4b\u524draw_spin_unlock_irq(&sem->lock);\u662f\u8d77\u5230\u4ec0\u4e48\u4f5c\u7528\uff1f \u4e92\u65a5\u91cf \u00b6 \u5185\u6838\u4ee3\u7801\u7684\u6ce8\u91ca\u8d28\u91cf\u771f\u7684\u662f\u699c\u6837\uff0c\u6211\u4eec\u770binclude/linux/mutex.h\u4e2d\u7684\u63cf\u8ff0Simple, straightforward mutexes with strict semantics \u70b9\u660e\u4e86mutex\u7684\u7279\u70b9\uff0c\u7b80\u5355\u76f4\u63a5\u4e25\u8c28\u7684\u9501 include/linux/mutex.h\u4e2d\u5305\u542b\u4e86mutex\u6570\u636e\u7ed3\u6784\u7684\u5b9a\u4e49\u4ee5\u53ca\u76f8\u5e94API\u7684\u58f0\u660e struct mutex { atomic_long_t owner ; spinlock_t wait_lock ; #ifdef CONFIG_MUTEX_SPIN_ON_OWNER struct optimistic_spin_queue osq ; /* Spinner MCS lock */ #endif struct list_head wait_list ; }; \u4ecemutex\u7684\u5b9a\u4e49\u80fd\u591f\u770b\u51fa\u6765\uff0cmutex\u4e5f\u662f\u5728spinlock\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u5b9e\u73b0\u7684\u3002 \u4e92\u65a5\u4f53\u662f\u4e00\u79cd\u7761\u7720\u9501\uff0c\u4e5f\u5c31\u662f\u5982\u679c\u65e0\u6cd5\u52a0\u9501\uff0c\u5219\u4f1a\u7761\u7720\uff0c\u5f15\u53d1\u8c03\u5ea6\u3002\u663e\u7136\u8fd9\u4e0d\u80fd\u7528\u5728\u4e2d\u65ad\u4e0a\u4e0b\u6587\u4e2d\u3002\u663e\u7136\u8fd9\u53ef\u4ee5\u5e94\u5bf9 \u4e34\u754c\u533a\u6bd4\u8f83\u590d\u6742\u7684\u573a\u666f\uff0c\u56e0\u4e3a\u7b49\u5f85\u9501\u7684\u65f6\u5019\u53ef\u4ee5\u8c03\u5ea6\u51fa\u53bb\uff0c\u8ba9\u522b\u4eba\u5148\u8d70\u3002 \u4e92\u65a5\u91cf\u548ccount=1\u7684\u4e8c\u503c\u4fe1\u53f7\u91cf\u7c7b\u4f3c\uff0c\u4f46\u5b83\u7684\u4f7f\u7528\u6761\u4ef6\u66f4\u52a0\u4e25\u683c\uff0c\u80fd\u7528\u4e92\u65a5\u91cf\u5e94\u8be5\u5c3d\u91cf\u7528\u4e92\u65a5\u91cf\u3002 \u5177\u4f53\u7684mutex\u7684\u5b9e\u73b0\u8fd8\u662f\u633a\u590d\u6742\u7684\uff0c\u8fd9\u91cc\u4e0d\u8fdb\u884c\u5c55\u5f00\uff0c\u503c\u5f97\u4e00\u63d0\u7684\u662f\u73b0\u5728\u7684\u4e92\u65a5\u9501\u5df2\u7ecf\u53ef\u4ee5\u652f\u6301\u81ea\u65cb\u7b49\u5f85\u4e86\uff0c\u53ef\u4ee5\u901a\u8fc7CONFIG_MUTEX_SPIN_ON_OWNER\u4f7f\u80fdMCS\u9501\u673a\u5236\u3002 \u5f15\u7528\u5b9d\u534e\u8001\u5e08\u7684\u5206\u6790\u5982\u4e0b \u81ea\u65cb\u7b49\u5f85\u673a\u5236\u7684\u6838\u5fc3\u539f\u7406\u662f\u5f53\u53d1\u73b0\u6301\u6709\u8005\u6b63\u5728\u4e34\u754c\u533a\u6267\u884c\u5e76\u4e14\u6ca1\u6709\u5176\u4ed6\u4f18\u5148\u7ea7\u9ad8\u7684\u8fdb\u7a0b\u8981\u88ab\u8c03\u5ea6\uff08need_resched\uff09\u65f6\uff0c\u90a3\u4e48mutex\u5f53\u524d\u6240\u5728\u8fdb\u7a0b\u8ba4\u4e3a\u8be5\u6301\u6709\u8005\u5f88\u5feb\u4f1a\u79bb\u5f00\u4e34\u754c\u533a\u5e76\u91ca\u653e\u9501\uff0c\u6b64\u65f6mutex\u9009\u62e9\u81ea\u65cb\u7b49\u5f85\uff0c\u77ed\u65f6\u95f4\u7684\u81ea\u65cb\u7b49\u5f85\u663e\u7136\u6bd4\u7761\u7720-\u5524\u9192\u5f00\u9500\u5c0f\u4e00\u4e9b\u3002\u5728\u5b9e\u73b0\u4e0aMCS\u4fdd\u8bc1\u4e86\u540c\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u81ea\u65cb\u7b49\u5f85\u6301\u6709\u8005\u91ca\u653e\u9501\u3002MCS \u7684\u5b9e\u73b0\u8f83\u4e3a\u590d\u6742\uff0c\u5177\u4f53\u53ef\u53c2\u8003\u4e00\u4e9b\u5185\u6838\u4e66\u7c4d\u3002MCS\u4fdd\u8bc1\u4e86\u4e0d\u4f1a\u5b58\u5728\u591a\u4e2acpu\u4e89\u7528\u9501\u7684\u60c5\u51b5\uff0c\u4ece\u800c\u907f\u514d\u4e86\u591a\u4e2aCPU\u7684cacheline\u98a0\u7c38\u4ece\u800c\u964d\u4f4e\u7cfb\u7edf\u6027\u80fd\u7684\u95ee\u9898\u3002\u7ecf\u8fc7\u6539\u8fdb\u540e\uff0cmutex\u7684\u6027\u80fd\u6709\u4e86\u76f8\u5f53\u5927\u7684\u63d0\u9ad8\uff0c\u76f8\u5bf9\u4fe1\u53f7\u91cf\u7684\u5b9e\u73b0\u8981\u9ad8\u6548\u5f97\u591a\u3002\u56e0\u6b64\u6211\u4eec\u5c3d\u91cf\u9009\u7528mutex \u5728\u9605\u8bfb\u4e0a\u9762\u8fd9\u6bb5\u89e3\u91ca\u7684\u65f6\u5019\uff0c\u6211\u6709\u4e00\u4e2a\u8fd1\u671f\u7684\u611f\u609f\uff0c\u968f\u7740\u82af\u7247\u7684\u53d1\u5c55\uff0clinux kernel\u7ecf\u5178\u7684\u673a\u5236\u4e0d\u65ad\u7684\u9762\u4e34\u65b0\u7684\u6311\u6218\uff0c\u4e0e\u6b64\u540c\u65f6\uff0clinux kernel\u5728\u4e0d\u65ad\u4e0e\u65f6\u4ff1\u8fdb\uff0clinux kernel\u65e9\u5df2\u8fdb\u51655.0\u7248\u672c\u65f6\u4ee3\uff0c\u5728\u5f53\u4e0b\uff0c\u5f53\u6211\u4eec\u518d\u53bb\u5206\u6790\u5185\u6838\u673a\u5236\u7684\u65f6\u5019\uff0c\u5e94\u8be5\u5728\u53c2\u8003\u7ecf\u5178\u89e3\u8bfb\u7684\u540c\u65f6\uff0c\u81ea\u5df1\u53bb\u5206\u6790\u6700\u65b0\u7684kernel\u4ee3\u7801\uff0c\u5728\u53d1\u73b0\u65b0\u7279\u6027\u7684\u65f6\u5019\uff0c\u8981\u67e5\u627e\u8d44\u6599\u53bb\u4e86\u89e3\u5b83\u7684\u5e94\u7528\u573a\u666f\uff0c\u53ca\u65f6\u8ddf\u4e0a\u65f6\u4ee3\u7684\u6b65\u4f10\u3002 \u9501\u7684\u6d4b\u8bd5\u65b9\u6cd5 \u00b6 [ https://github.com/Hc7Hs/Performance-test-of-different-locks-under-Linux ] \u4e0a\u9762\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5404\u79cd\u9501\u7684\u6548\u7387\u7684\u6d4b\u8bd5\u65b9\u6cd5","title":"Linux\u7684\u540c\u6b65\u548c\u4e92\u65a5\u673a\u5236"},{"location":"linux/sync-and-exclusion.html#linux","text":"Linux\u7684\u540c\u6b65\u548c\u4e92\u65a5\u673a\u5236 \u81ea\u65cb\u9501 \u8bfb\u5199\u9501 \u4fe1\u53f7\u91cf \u4e92\u65a5\u91cf \u9501\u7684\u6d4b\u8bd5\u65b9\u6cd5 \u5728\u9762\u5bf9\u9700\u8981\u540c\u6b65\u548c\u4e92\u65a5\u673a\u5236\u7684\u573a\u666f\u65f6\uff0c\u53ea\u6709\u719f\u7ec3\u638c\u63e1linux\u63d0\u4f9b\u7684\u540c\u6b65\u548c\u4e92\u65a5\u673a\u5236\uff0c\u624d\u80fd\u7075\u6d3b\u8fd0\u7528\uff0c\u4e3e\u4e00\u53cd\u4e09\u3002 \u81ea\u65cb\u9501(spin lock) \u8bfb\u5199\u9501(read-write lock) \u4fe1\u53f7\u91cf(semaphore) \u4e92\u65a5\u91cf(mutex) RCU \u5f53\u7136\u5b9d\u534e\u8001\u5e08\u548c\u4e00\u4f17\u5185\u6838\u5927\u795e\u5df2\u7ecf\u5bf9\u8fd9\u4e9b\u505a\u4e86\u975e\u5e38\u8be6\u7ec6\u7684\u603b\u7ed3\uff0c\u5305\u62ec\u4f7f\u7528\u573a\u666f\uff0c\u6ce8\u610f\u4e8b\u9879\uff0c\u5b9e\u73b0\u539f\u7406\u7b49\u3002 \u5927\u5bb6\u7684\u603b\u7ed3\u666e\u904d\u9488\u5bf9arm\u67b6\u6784\uff0c\u6b64\u7bc7\u603b\u7ed3\u6211\u4f1a\u9488\u5bf9riscv\u67b6\u6784\u6765\u5c55\u5f00\uff0c\u4e89\u53d6\u505a\u5230\u6709\u4e00\u70b9\u513f\u7279\u8272\u3002\u4f46\u6700\u5173\u952e\u7684\u8fd8\u662f \u501f\u6b64\u673a\u4f1a\u5de9\u56fa\u57fa\u7840\uff0c\u68b3\u7406\u601d\u60f3\u3002 \u6240\u6709\u4ee3\u7801\u57fa\u4e8elinux5.11","title":"Linux\u7684\u540c\u6b65\u548c\u4e92\u65a5\u673a\u5236"},{"location":"linux/sync-and-exclusion.html#_1","text":"\u5728\u9a71\u52a8\u5f00\u53d1\u4e2d\uff0c\u7ecf\u5e38\u4f1a\u7528\u5230\u81ea\u65cb\u9501\u3002\u81ea\u65cb\u9501\u5728\u7b49\u9501\u7684\u65f6\u5019\uff0c\u4f1a\u4e00\u76f4\u8f6e\u8be2\uff0c\u800c\u4e0d\u4f1a\u7761\u7720\u5f53\u524d\u7ebf\u7a0b\uff0c\u6240\u4ee5\u5b83\u7ecf\u5e38\u7528\u5728 \u9700\u8981\u5728\u4e2d\u65ad\u4e0a\u4e0b\u6587(\u4e0d\u80fd\u8fdb\u884csleep)\u8fdb\u884c\u6570\u636e\u4fdd\u62a4\u7684\u573a\u666f\u3002\u6240\u8c13\u81ea\u65cb\uff0c\u5c31\u662f\u8f6e\u8be2\uff0c\u4f1a\u6301\u7eed\u5360\u6709CPU\uff0c\u56e0\u6b64\u4e34\u754c\u533a\u7684\u5904\u7406 \u5e94\u8be5\u8d8a\u7b80\u6d01\u8d8a\u597d\u3002\u53ea\u8981\u7b49\u5f85\u7684\u4ee3\u4ef7\u4f4e\u4e8e\u8c03\u5ea6\u7684\u4ee3\u4ef7\uff0c\u90a3\u5c31\u8d5a\u4e86\u3002 \u4ee3\u7801\u7ed3\u6784\u4e0a\uff0c\u6a2a\u5411\u6765\u770b\uff0cspinlock\u7684\u5b9e\u73b0\u5206\u4e3aSMP\u548cUP\u4e24\u4e2a\u5927\u5206\u652f\uff0c\u6bcf\u4e2a\u5206\u652f\u4e0b\u6839\u636e\u662f\u5426\u662fdebug\u53c8\u6709\u6240\u4e0d\u540c\u3002\u7eb5\u5411\u6765\u770b\uff0c \u5305\u542b\u67b6\u6784\u65e0\u5173\u7684API\u5c42\u4ee5\u53ca\u67b6\u6784\u76f8\u5173\u7684arch\u5c42\u3002 \u4ee5spin_lock_irqsave\u4e3e\u4f8b\u6765\u5206\u6790\u5185\u6838\u7684\u8bbe\u8ba1\u601d\u8def\uff0c\u4e0e\u6b64\u540c\u65f6\uff0c\u66f4\u52a0\u5370\u8bc1\u4e86\u6240\u6709\u8ba1\u7b97\u673a\u7cfb\u7edf\u95ee\u9898\u90fd\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0\u4e00\u5c42\u6765\u89e3\u51b3\uff0c\u5982\u679c\u4e0d\u884c\uff0c \u518d\u52a0\u4e00\u5c42\u3002 spinlock.h\u4e2d\u7684\u5b9a\u4e49\u5982\u4e0b #define spin_lock_irqsave(lock, flags) \\ do { \\ raw_spin_lock_irqsave(spinlock_check(lock), flags); \\ } while (0) \u53ef\u4ee5\u770b\u51faspin_lock_xxxx \u662f\u7528\u6237\u63a5\u53e3\uff0c\u6211\u4eec\u5728\u7f16\u7a0b\u65f6\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\uff0craw_spin_lock_xxxx\u662f\u6838\u5fc3\u5b9e\u73b0\uff0c\u591a\u4e2a\u7528\u6237\u63a5\u53e3\u53ef\u80fd\u90fd\u53ef\u4ee5\u7528\u8be5\u6838\u5fc3\u5b9e\u73b0\u5c42\u6765\u5b9e\u73b0\uff0c\u8fd9\u4e00\u5c42\u7684\u4f5c\u7528\u662f\u5728\u53bb\u6389\u4e86\u4ee3\u7801\u5197\u4f59\u7684\u540c\u65f6\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u7528\u6237\u63a5\u53e3\u3002 #if defined(CONFIG_SMP) || defined(CONFIG_DEBUG_SPINLOCK) #define raw_spin_lock_irqsave(lock, flags) \\ do { \\ typecheck(unsigned long, flags); \\ flags = _raw_spin_lock_irqsave(lock); \\ } while (0) #else #define raw_spin_lock_irqsave(lock, flags) \\ do { \\ typecheck(unsigned long, flags); \\ _raw_spin_lock_irqsave(lock, flags); \\ } while (0) #endif raw_spin_lock_xxxx \u4e5f\u5c4f\u853d\u4e86SMP\u548cUP\u4ee5\u53caDEBUG\u7684\u5dee\u5f02\uff0c_raw_spin_lock_xxxx \u662f\u4e0b\u4e00\u5c42\u7684\u6838\u5fc3\u5b9e\u73b0\u3002 #ifdef CONFIG_INLINE_SPIN_LOCK_IRQSAVE #define _raw_spin_lock_irqsave(lock) __raw_spin_lock_irqsave(lock) #endif #ifndef CONFIG_INLINE_SPIN_LOCK_IRQSAVE unsigned long __lockfunc _raw_spin_lock_irqsave ( raw_spinlock_t * lock ) { return __raw_spin_lock_irqsave ( lock ); } EXPORT_SYMBOL ( _raw_spin_lock_irqsave ); #endif _raw_spin_lock_xxxx\u5c4f\u853d\u4e86inline\u7684\u9009\u62e9\u5dee\u5f02\uff0c\u771f\u6b63\u7684\u5b9e\u73b0\u5728__raw_spin_lock_xxxx\u91cc\u9762\uff0c\u5185\u6838\u7ecf\u5e38\u4f1a\u6709\u4e00\u9053\u6760\u548c\u4e24\u9053\u6760\u7684\u8bbe\u8ba1 static inline void do_raw_spin_lock_flags ( raw_spinlock_t * lock , unsigned long * flags ) __acquires ( lock ) { __acquire ( lock ); arch_spin_lock_flags ( & lock -> raw_lock , * flags ); mmiowb_spin_lock (); } __raw_spin_lock_irqsave \u4f1a\u901a\u8fc7\u4e00\u7cfb\u5217\u5c01\u88c5\u5230arch_spin_lock_xxxx, \u8fd9\u91ccarch\u5f00\u5934\u7684\u5c31\u8981\u53bb\u5404\u4e2aarch\u76ee\u5f55\u4e2d\u627e\u5bf9\u5e94\u67b6\u6784\u7684\u5b9e\u73b0\u4e86\u3002 \u770b\u5b8c\u5c01\u88c5\u5b9e\u73b0\uff0c\u518d\u770b\u770b\u67b6\u6784\u5b9e\u73b0\u3002 arm\u7684spinlock\u5b9d\u534e\u8001\u5e08\u4ee5\u53ca\u4f17\u591a\u7f51\u53cb\u5df2\u7ecf\u5206\u6790\u7684\u5f88\u900f\u5f7b\u4e86\uff0c\u8fd9\u91cc\u63d2\u5165\u76f8\u5173\u6587\u6863\uff0c\u4ee5\u4f9b\u81ea\u5df1\u540e\u7eed\u56de\u987e https://blog.csdn.net/zhoutaopower/article/details/86598839 https://blog.csdn.net/21cnbao/article/details/108091149 \u56e0\u4e3a\u8fd1\u671fRISCV\u63a5\u89e6\u7684\u6bd4\u8f83\u591a\uff0c\u6240\u4ee5\u5e72\u8106\u5206\u6790\u4e00\u4e0bRISCV\u7684spinlock\u5b9e\u73b0\u5427 riscv\u7684smp\u5bf9\u4e8earch_spin_lock\u7684\u5b9a\u4e49\u5982\u4e0b\uff0c\u5e76\u6ca1\u6709arm\u90a3\u6837\u7684owner\u548cnext\uff0c\u53ea\u6709\u4e00\u4e2alock\u3002 typedef struct { volatile unsigned int lock ; } arch_spinlock_t ; \u5728 arch/riscv/include/asm/spinlock.h \u4e2d\u5b9e\u73b0\u4e86\u5e95\u5c42\u7684spinlock\u65b9\u6cd5 //\u4ee3\u7801\u57fa\u4e8elinux5.11\u7248\u672c static inline int arch_spin_trylock ( arch_spinlock_t * lock ) { int tmp = 1 , busy ; __asm__ __volatile__ ( \" amoswap.w %0, %2, %1 \\n \" RISCV_ACQUIRE_BARRIER : \"=r\" ( busy ), \"+A\" ( lock -> lock ) : \"r\" ( tmp ) : \"memory\" ); return ! busy ; } static inline void arch_spin_lock ( arch_spinlock_t * lock ) { while ( 1 ) { if ( arch_spin_is_locked ( lock )) continue ; if ( arch_spin_trylock ( lock )) break ; } } \u5728riscv\u539f\u5b50\u6307\u4ee4\u96c6\u6269\u5c55\u4e00\u7bc7\u4e2d\uff0c\u5df2\u7ecf\u719f\u6089\u4e86amoswap.w\u662f\u539f\u5b50\u5185\u5b58\u64cd\u4f5c\u6307\u4ee4,\u5176\u4e2d\u6307\u4ee4\u683c\u5f0f\u4e3aamoswap.w rd, rs2, (rs1), \u5b9e\u9645\u4e0a\u901a\u8fc7\u539f\u5b50\u4ea4\u6362\u64cd\u4f5c\u6765\u786e\u4fddlock\u6807\u5fd7\u5b8c\u6574\u5199\u5165\u5185\u5b58\u3002 \u597d\u7684\u4e1c\u897f\u603b\u662f\u503c\u5f97\u63a8\u6572\uff0clinux\u7684\u547d\u540d\u7b56\u7565\u6bd4\u914d\u4e0a\u4e00\u4e07\u884c\u6587\u6863\u90fd\u597d\uff0c\u4f55\u51b5\u5176\u6ce8\u91ca\u4e5f\u975e\u5e38\u5230\u4f4d\u3002arch\u5f00\u5934\u7684\u660e\u663e\u662f\u67b6\u6784\u76f8\u5173\u7684\u51fd\u6570\uff0c\u5e94\u8be5\u53bb\u5bf9\u5e94arch\u76ee\u5f55\u4e0b\u6587\u4ef6\u4e2d\u627e\uff0c\u6587\u4ef6\u547d\u540d\u6e05\u6670\u660e\u4e86\u3002","title":"\u81ea\u65cb\u9501"},{"location":"linux/sync-and-exclusion.html#_2","text":"\u4e3a\u4e86\u89e3\u51b3\u591a\u4e2a\u8bfb\u7ebf\u7a0b\u65e0\u6cd5\u5e76\u884c\u7684\u95ee\u9898\uff0c\u5728spinlock\u57fa\u7840\u4e0a\u5b9e\u73b0\u4e86\u8bfb\u5199\u9501\u3002 \u8fd9\u91cc\u53ef\u4ee5\u53c2\u8003[ https://blog.csdn.net/zhoutaopower/article/details/86605987 ] \u6765\u770b\u4ee3\u7801\u5b9e\u73b0\uff0c\u5728\u5206\u6790spinlock\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u770b\u5230\uff0cspinlock.h\u4e2d\u8fd8\u5f15\u7528\u4e86\u8bfb\u5199\u9501\u7684\u5934\u6587\u4ef6rwlock.h \u540c\u6837\u7684\uff0cspinlock_types.h\u4e2d\u4e5f\u5305\u542b\u4e86rwlock\u6570\u636e\u7c7b\u578b\u7684\u5b9a\u4e49\u7684\u5934\u6587\u4ef6rwlock_types.h\uff0c\u6309\u7167spinlock\u7684\u5934\u6587\u4ef6 \u7ed3\u6784\uff0c\u6bcf\u4e2a\u6587\u4ef6\u4e2d\u90fd\u5305\u542b\u4e86rwlock\u76f8\u5173\u7684\u5934\u6587\u4ef6\u3002 \u4ee5writelock\u6765\u5206\u6790\u5c01\u88c5\u5173\u7cfb // include/linux/rwlock.h #define write_lock(lock) _raw_write_lock(lock) // \u5206smp\u548cup\u4e24\u79cd\u5b9e\u73b0\uff0c\u8fd9\u91cc\u53ea\u5206\u6790smp // kernel/locking/spinlock.c void __lockfunc _raw_write_lock ( rwlock_t * lock ) { __raw_write_lock ( lock ); } EXPORT_SYMBOL ( _raw_write_lock ); // include/linux/rwlock_api_smp.h static inline void __raw_write_lock ( rwlock_t * lock ) { preempt_disable (); rwlock_acquire ( & lock -> dep_map , 0 , 0 , _RET_IP_ ); LOCK_CONTENDED ( lock , do_raw_write_trylock , do_raw_write_lock ); } // include/linux/rwlock.h # define do_raw_write_lock(rwlock) do {__acquire(lock); arch_write_lock(&(rwlock)->raw_lock); } while (0) // arch/riscv/include/asm/spinlock.h static inline void arch_write_lock ( arch_rwlock_t * lock ) { int tmp ; __asm__ __volatile__ ( \"1: lr.w %1, %0 \\n \" \" bnez %1, 1b \\n \" \" li %1, -1 \\n \" \" sc.w %1, %1, %0 \\n \" \" bnez %1, 1b \\n \" RISCV_ACQUIRE_BARRIER : \"+A\" ( lock -> lock ), \"=&r\" ( tmp ) :: \"memory\" ); } \u8fd8\u8bb0\u5f97lr.w\u548csc.w\u5417\uff1f\u5728riscv\u7684A\u6269\u5c55\u4e2d\u5206\u6790\u8fc7\uff0criscv\u7684\u539f\u5b50\u64cd\u4f5c\u6709\u4e24\u79cd\u5f62\u5f0f\uff0cspinlock\u7528\u4e86\u539f\u5b50\u5185\u5b58\u64cd\u4f5c\u6307\u4ee4\uff0crwlock\u7528\u4e86Load-Reserved/Store-Conditional \u6307\u4ee4\u3002 \u5c06lock\u4e2d\u7684lock\u5b57\u6bb5\u8bfb\u53d6\u5230tmp\u4e2d\uff0c\u5e76\u5224\u65ad\u662f\u5426\u4e3a0,\u4e0d\u662f0\u5c31\u4f1a\u4e00\u76f4\u8bfb\uff0c\u76f4\u5230\u4e3a0, \u5982\u679c\u662f0,tmp\u53d8\u4e3a-1, \u518d\u628atmp\u5199\u5230lock\u4e2d\uff0c\u5e76\u4e14\u5224\u65ad\u662f\u5426\u4fdd\u5e8f\u6210\u529f\uff0c\u5982\u679c\u4e0d\u6210\u529f\uff0c\u5219\u8981 \u91cd\u65b0\u6267\u884c\u8fd9\u6bb5\u6307\u4ee4\u3002 \u8fd9\u91cc\u518d\u7ed3\u5408\u8bfb\u7684\u5b9e\u73b0\uff0c\u5c31\u66f4\u6e05\u6670\u4e3a\u4ec0\u4e48\u8981\u7528lr,sc\u5b9e\u73b0\u4e86 static inline int arch_read_trylock ( arch_rwlock_t * lock ) { int busy ; __asm__ __volatile__ ( \"1: lr.w %1, %0 \\n \" \" bltz %1, 1f \\n \" \" addi %1, %1, 1 \\n \" \" sc.w %1, %1, %0 \\n \" \" bnez %1, 1b \\n \" RISCV_ACQUIRE_BARRIER \"1: \\n \" : \"+A\" ( lock -> lock ), \"=&r\" ( busy ) :: \"memory\" ); return ! busy ; } \u8bfb\u7684\u65f6\u5019\u901a\u8fc7\u4e00\u4e2abusy\u8ba1\u6570\u6765\u5b9e\u73b0\u591a\u7ebf\u7a0b\u8bfb\u64cd\u4f5c\u5e76\u884c\uff0c\u8fd9\u5c31\u77e5\u9053\u4e3a\u4ec0\u4e48\u5199\u7684\u65f6\u5019\u8981\u8d4b\u503c\u4e3a-1\u4e86\u3002 \u4e0d\u5f97\u4e0d\u518d\u6b21\u611f\u6168\uff0c \u5b66\u4e60\u77e5\u8bc6\u4e00\u5f00\u59cb\u603b\u662f\u70b9\u7684\u5b66\u4e60\uff0c\u4f46\u5b66\u7740\u5b66\u7740\u5c31\u6210\u4e86\u9762\uff0c\u79ef\u7d2f\u7740\u79ef\u7d2f\u7740\u5c31\u5f62\u6210\u4e86\u81ea\u5df1\u7684\u77e5\u8bc6\u56fe","title":"\u8bfb\u5199\u9501"},{"location":"linux/sync-and-exclusion.html#_3","text":"\u524d\u9762\u4e24\u79cd\u90fd\u53ef\u4ee5\u5728\u4e2d\u65ad\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\uff0c\u9002\u5408\u8f7b\u91cf\u7ea7\u7684\u4e34\u754c\u533a\u3002\u4f46\u8fd9\u79cd\u7684\u5f0a\u7aef\u5728\u4e8e\u65e0\u6cd5\u5728\u7b49\u9501\u7684\u65f6\u5019\u91ca\u653eCPU\uff0c\u8c03\u5ea6\u5230\u5176\u4ed6\u4efb\u52a1\u4e2d\u6267\u884c\u3002 \u4fe1\u53f7\u91cf\u53ef\u4ee5\u5b9e\u73b0CPU\u7684\u91ca\u653e\uff0c\u5b83\u662f\u4e00\u79cd\u4f1a\u5bfc\u81f4\u5f53\u524d\u8fdb\u7a0b\u7761\u7720\u7684\u9501\uff0c\u5b83\u9002\u5408\u7528\u5728\u4e34\u754c\u533a\u6bd4\u8f83\u5927\u7684\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u4e2d\u3002 \u5728 Linux \u5185\u6838\u540c\u6b65\uff08\u4e94\uff09\uff1a\u4fe1\u53f7\u91cf\uff08semaphore\uff09 \u4e00\u6587\u4e2d\uff0c\u5df2\u7ecf\u8be6\u7ec6\u63cf\u8ff0\u4e86\u4fe1\u53f7\u91cf\u7684\u4f7f\u7528\u573a\u666f\u3002\u7684\u786e\uff0c\u6211\u4eec\u5728\u7f16\u5199\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u6709\u65f6\u5019\u6ca1\u5f97\u9009\uff0c\u4e2d\u65ad\u4e0a\u4e0b\u6587\u5c31\u53ea\u80fd\u7528\u81ea\u65cb\u9501\uff0c\u4e0d\u80fd\u9009\u4fe1\u53f7\u91cf\uff1b\u8981\u548c\u7528\u6237\u7a7a\u95f4\u505a\u540c\u6b65\u7684\u65f6\u5019\uff0c\u53ea\u80fd\u9009\u4fe1\u53f7\u91cf\uff1b \u6709\u65f6\u5019\u9009\u4fe1\u53f7\u91cf\u8fd8\u662f\u9009\u81ea\u65cb\u9501\uff0c\u53d6\u51b3\u4e0e\u4e34\u8fd1\u533a\u5927\u5c0f\uff0c\u4e5f\u5c31\u662f\u9884\u4f30\u8c03\u5ea6\u7684\u5f00\u9500\u66f4\u5927\u8fd8\u662f\u4e0d\u8c03\u5ea6\u66f4\u6d6a\u8d39CPU\u3002 \u4fe1\u53f7\u91cf\u5141\u8bb8\u591a\u4e2a\u9501\u6301\u6709\u8005\uff0c\u540c\u65f6\u5141\u8bb8\u7684\u6301\u6709\u8005\u6570\u91cf\u53ef\u4ee5\u5728\u58f0\u660e\u4fe1\u53f7\u7684\u65f6\u5019\u6307\u5b9a\u3002\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4fe1\u53f7\u91cf\u5141\u8bb8\u4e00\u4e2a\u9501\u7684\u6301\u6709\u8005\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u4fe1\u53f7\u91cf\u79f0\u4e4b\u4e3a\u4e8c\u503c\u4fe1\u53f7\u91cf\uff0c\u4e5f\u5c31\u662f\u4e92\u65a5\u4fe1\u53f7\u91cf\u3002 struct semaphore { raw_spinlock_t lock ; unsigned int count ; struct list_head wait_list ; }; \u4ece\u5b9a\u4e49\u4e2d\u5c31\u53ef\u4ee5\u770b\u51fa\uff0c\u4fe1\u53f7\u91cf\u7684\u57fa\u7840\u4ecd\u7136\u662f\u81ea\u65cb\u9501\u3002\u5bf9\u4e8e\u4fe1\u53f7\u91cf\u672c\u8eab\u7684\u8bbf\u95ee\uff0c\u4ecd\u7136\u9700\u8981\u81ea\u65cb\u9501\u6765\u4fdd\u62a4\u3002\u5176\u4e2dcount\u5c31\u662f\u6240\u8c13\u7684\u5141\u8bb8\u6301\u6709\u8005\u6570\u91cf\uff0c\u5f53\u7136\u7edd\u5927\u591a\u5c11\u60c5\u51b5\u4e0b\u5b83\u53ea\u5141\u8bb8\u6709\u4e00\u4e2a\u9501\u6301\u6709\u8005(\u8fd9\u91cc\u8fd8\u9700\u8981\u5c31\u5177\u4f53\u573a\u666f\uff01)\u3002 \u4fe1\u53f7\u91cf\u7684\u672f\u8bed\u662fdown\u548cup,\u6240\u8c13down\u5c31\u662f\u83b7\u53d6\u9501\uff0c\u5373count--, \u6240\u8c13up\u5c31\u662f\u91ca\u653e\u9501\uff0c\u5c31\u662fcount++\u3002\u5f53\u7136\uff0c\u8fd9\u91cc\u9762\u5728\u4e0d\u6ee1\u8db3\u6761\u4ef6\u65f6\u4f1a\u8fdb\u884c\u8c03\u5ea6\u3002 down\u7684\u8c03\u5ea6\u51fd\u6570\u5982\u4e0b static inline int __sched __down_common ( struct semaphore * sem , long state , long timeout ) { struct semaphore_waiter waiter ; list_add_tail ( & waiter . list , & sem -> wait_list ); waiter . task = current ; waiter . up = false ; for (;;) { if ( signal_pending_state ( state , current )) goto interrupted ; if ( unlikely ( timeout <= 0 )) goto timed_out ; __set_current_state ( state ); raw_spin_unlock_irq ( & sem -> lock ); timeout = schedule_timeout ( timeout ); raw_spin_lock_irq ( & sem -> lock ); if ( waiter . up ) return 0 ; } timed_out : list_del ( & waiter . list ); return - ETIME ; interrupted : list_del ( & waiter . list ); return - EINTR ; } \u8fd9\u91cc\u6709\u4e00\u5904\u7591\u95ee\uff0c\u5728\u8c03\u5ea6\u4e4b\u524draw_spin_unlock_irq(&sem->lock);\u662f\u8d77\u5230\u4ec0\u4e48\u4f5c\u7528\uff1f","title":"\u4fe1\u53f7\u91cf"},{"location":"linux/sync-and-exclusion.html#_4","text":"\u5185\u6838\u4ee3\u7801\u7684\u6ce8\u91ca\u8d28\u91cf\u771f\u7684\u662f\u699c\u6837\uff0c\u6211\u4eec\u770binclude/linux/mutex.h\u4e2d\u7684\u63cf\u8ff0Simple, straightforward mutexes with strict semantics \u70b9\u660e\u4e86mutex\u7684\u7279\u70b9\uff0c\u7b80\u5355\u76f4\u63a5\u4e25\u8c28\u7684\u9501 include/linux/mutex.h\u4e2d\u5305\u542b\u4e86mutex\u6570\u636e\u7ed3\u6784\u7684\u5b9a\u4e49\u4ee5\u53ca\u76f8\u5e94API\u7684\u58f0\u660e struct mutex { atomic_long_t owner ; spinlock_t wait_lock ; #ifdef CONFIG_MUTEX_SPIN_ON_OWNER struct optimistic_spin_queue osq ; /* Spinner MCS lock */ #endif struct list_head wait_list ; }; \u4ecemutex\u7684\u5b9a\u4e49\u80fd\u591f\u770b\u51fa\u6765\uff0cmutex\u4e5f\u662f\u5728spinlock\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u5b9e\u73b0\u7684\u3002 \u4e92\u65a5\u4f53\u662f\u4e00\u79cd\u7761\u7720\u9501\uff0c\u4e5f\u5c31\u662f\u5982\u679c\u65e0\u6cd5\u52a0\u9501\uff0c\u5219\u4f1a\u7761\u7720\uff0c\u5f15\u53d1\u8c03\u5ea6\u3002\u663e\u7136\u8fd9\u4e0d\u80fd\u7528\u5728\u4e2d\u65ad\u4e0a\u4e0b\u6587\u4e2d\u3002\u663e\u7136\u8fd9\u53ef\u4ee5\u5e94\u5bf9 \u4e34\u754c\u533a\u6bd4\u8f83\u590d\u6742\u7684\u573a\u666f\uff0c\u56e0\u4e3a\u7b49\u5f85\u9501\u7684\u65f6\u5019\u53ef\u4ee5\u8c03\u5ea6\u51fa\u53bb\uff0c\u8ba9\u522b\u4eba\u5148\u8d70\u3002 \u4e92\u65a5\u91cf\u548ccount=1\u7684\u4e8c\u503c\u4fe1\u53f7\u91cf\u7c7b\u4f3c\uff0c\u4f46\u5b83\u7684\u4f7f\u7528\u6761\u4ef6\u66f4\u52a0\u4e25\u683c\uff0c\u80fd\u7528\u4e92\u65a5\u91cf\u5e94\u8be5\u5c3d\u91cf\u7528\u4e92\u65a5\u91cf\u3002 \u5177\u4f53\u7684mutex\u7684\u5b9e\u73b0\u8fd8\u662f\u633a\u590d\u6742\u7684\uff0c\u8fd9\u91cc\u4e0d\u8fdb\u884c\u5c55\u5f00\uff0c\u503c\u5f97\u4e00\u63d0\u7684\u662f\u73b0\u5728\u7684\u4e92\u65a5\u9501\u5df2\u7ecf\u53ef\u4ee5\u652f\u6301\u81ea\u65cb\u7b49\u5f85\u4e86\uff0c\u53ef\u4ee5\u901a\u8fc7CONFIG_MUTEX_SPIN_ON_OWNER\u4f7f\u80fdMCS\u9501\u673a\u5236\u3002 \u5f15\u7528\u5b9d\u534e\u8001\u5e08\u7684\u5206\u6790\u5982\u4e0b \u81ea\u65cb\u7b49\u5f85\u673a\u5236\u7684\u6838\u5fc3\u539f\u7406\u662f\u5f53\u53d1\u73b0\u6301\u6709\u8005\u6b63\u5728\u4e34\u754c\u533a\u6267\u884c\u5e76\u4e14\u6ca1\u6709\u5176\u4ed6\u4f18\u5148\u7ea7\u9ad8\u7684\u8fdb\u7a0b\u8981\u88ab\u8c03\u5ea6\uff08need_resched\uff09\u65f6\uff0c\u90a3\u4e48mutex\u5f53\u524d\u6240\u5728\u8fdb\u7a0b\u8ba4\u4e3a\u8be5\u6301\u6709\u8005\u5f88\u5feb\u4f1a\u79bb\u5f00\u4e34\u754c\u533a\u5e76\u91ca\u653e\u9501\uff0c\u6b64\u65f6mutex\u9009\u62e9\u81ea\u65cb\u7b49\u5f85\uff0c\u77ed\u65f6\u95f4\u7684\u81ea\u65cb\u7b49\u5f85\u663e\u7136\u6bd4\u7761\u7720-\u5524\u9192\u5f00\u9500\u5c0f\u4e00\u4e9b\u3002\u5728\u5b9e\u73b0\u4e0aMCS\u4fdd\u8bc1\u4e86\u540c\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u81ea\u65cb\u7b49\u5f85\u6301\u6709\u8005\u91ca\u653e\u9501\u3002MCS \u7684\u5b9e\u73b0\u8f83\u4e3a\u590d\u6742\uff0c\u5177\u4f53\u53ef\u53c2\u8003\u4e00\u4e9b\u5185\u6838\u4e66\u7c4d\u3002MCS\u4fdd\u8bc1\u4e86\u4e0d\u4f1a\u5b58\u5728\u591a\u4e2acpu\u4e89\u7528\u9501\u7684\u60c5\u51b5\uff0c\u4ece\u800c\u907f\u514d\u4e86\u591a\u4e2aCPU\u7684cacheline\u98a0\u7c38\u4ece\u800c\u964d\u4f4e\u7cfb\u7edf\u6027\u80fd\u7684\u95ee\u9898\u3002\u7ecf\u8fc7\u6539\u8fdb\u540e\uff0cmutex\u7684\u6027\u80fd\u6709\u4e86\u76f8\u5f53\u5927\u7684\u63d0\u9ad8\uff0c\u76f8\u5bf9\u4fe1\u53f7\u91cf\u7684\u5b9e\u73b0\u8981\u9ad8\u6548\u5f97\u591a\u3002\u56e0\u6b64\u6211\u4eec\u5c3d\u91cf\u9009\u7528mutex \u5728\u9605\u8bfb\u4e0a\u9762\u8fd9\u6bb5\u89e3\u91ca\u7684\u65f6\u5019\uff0c\u6211\u6709\u4e00\u4e2a\u8fd1\u671f\u7684\u611f\u609f\uff0c\u968f\u7740\u82af\u7247\u7684\u53d1\u5c55\uff0clinux kernel\u7ecf\u5178\u7684\u673a\u5236\u4e0d\u65ad\u7684\u9762\u4e34\u65b0\u7684\u6311\u6218\uff0c\u4e0e\u6b64\u540c\u65f6\uff0clinux kernel\u5728\u4e0d\u65ad\u4e0e\u65f6\u4ff1\u8fdb\uff0clinux kernel\u65e9\u5df2\u8fdb\u51655.0\u7248\u672c\u65f6\u4ee3\uff0c\u5728\u5f53\u4e0b\uff0c\u5f53\u6211\u4eec\u518d\u53bb\u5206\u6790\u5185\u6838\u673a\u5236\u7684\u65f6\u5019\uff0c\u5e94\u8be5\u5728\u53c2\u8003\u7ecf\u5178\u89e3\u8bfb\u7684\u540c\u65f6\uff0c\u81ea\u5df1\u53bb\u5206\u6790\u6700\u65b0\u7684kernel\u4ee3\u7801\uff0c\u5728\u53d1\u73b0\u65b0\u7279\u6027\u7684\u65f6\u5019\uff0c\u8981\u67e5\u627e\u8d44\u6599\u53bb\u4e86\u89e3\u5b83\u7684\u5e94\u7528\u573a\u666f\uff0c\u53ca\u65f6\u8ddf\u4e0a\u65f6\u4ee3\u7684\u6b65\u4f10\u3002","title":"\u4e92\u65a5\u91cf"},{"location":"linux/sync-and-exclusion.html#_5","text":"[ https://github.com/Hc7Hs/Performance-test-of-different-locks-under-Linux ] \u4e0a\u9762\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5404\u79cd\u9501\u7684\u6548\u7387\u7684\u6d4b\u8bd5\u65b9\u6cd5","title":"\u9501\u7684\u6d4b\u8bd5\u65b9\u6cd5"},{"location":"linux/syscall.html","text":"linux\u7cfb\u7edf\u8c03\u7528 \u00b6 \u80cc\u666f\u4ecb\u7ecd \u00b6 \u6700\u8fd1\u57fa\u4e8egem5\u8c03\u8bd5\u4e86RandomX, \u5728\u8c03\u8bd5\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u4e86gem5\u7684syscall\u6a21\u5f0f\uff0c\u4e8e\u662f\u987a\u624b\u770b\u4e86\u4e00\u4e0blinux\u7cfb\u7edf\u8c03\u7528\u76f8\u5173\u7684\u8d44\u6599\uff0c\u5728\u8fd9\u91cc\u505a\u4e00\u4e2a\u603b\u7ed3\u3002\u5f53\u7136\uff0c\u603b\u7ed3\u5206\u4e3a\u4e09\u5927\u90e8\u5206 linux\u7cfb\u7edf\u8c03\u7528\u7b80\u6790 RandomX\u603b\u7ed3 gem5\u7684syscall\u6a21\u5f0f \u8fd9\u91cc\u4e3b\u8981\u9488\u5bf9linux\u7cfb\u7edf\u4ee5\u53caRISCV\u67b6\u6784\u5b9e\u73b0\u505a\u4e00\u4e9b\u7b80\u8981\u5206\u6790\u3002 \u673a\u5236\u7b80\u4ecb \u00b6 \u60f3\u5fc5\u4e0a\u56fe\u5728\u5f88\u591a\u7ecf\u5178\u4e66\u7c4d\u6587\u6863\u4e2d\u90fd\u80fd\u88ab\u770b\u5230\u3002\u7528\u6237\u7a0b\u5e8f\u5b9e\u9645\u4e0a\u5b8c\u5168\u4f9d\u8d56\u4e8e\u7cfb\u7edf\u8c03\u7528\u3002\u516c\u5171\u5e93\u548cshell\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7cfb\u7edf\u8c03\u7528\u7684\u5c01\u88c5\uff0c\u4f7f\u5f97\u7528\u6237\u66f4\u65b9\u4fbf\u7684\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\u3002\u8fd9\u5f88\u660e\u663e\u662f\u4e00\u79cd\u2018\u5b88\u2019\u7684\u8bbe\u8ba1\u65b9\u5f0f\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4ec5\u63d0\u4f9b\u7cfb\u7edf\u8c03\u7528\u7ed9\u5e94\u7528\u7a0b\u5e8f\uff0c\u8fd9\u6837\u5c31\u80fd\u6700\u5927\u9650\u5ea6\u7684\u4fdd\u8bc1\u7cfb\u7edf\u7684\u5b89\u5168\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u5bf9\u6709\u9650\u7684\u7cfb\u7edf\u8c03\u7528\u505a\u68c0\u67e5\uff0c\u5e76\u4e14\u5b8c\u5168\u7ba1\u7406\u8fd9\u4e9b\u7cfb\u7edf\u8c03\u7528\u7684\u884c\u4e3a\u3002 \u8fd9\u5f20\u56fe\u7247\u80fd\u591f\u6e05\u695a\u7684\u770b\u5230\u51fd\u6570\u5e93\u548c\u7cfb\u7edf\u8c03\u7528\u7684\u533a\u522b\uff0c\u5e93\u51fd\u6570\u57fa\u4e8e\u7cfb\u7edf\u8c03\u7528\u4e4b\u4e0a\uff0c\u5bf9\u7cfb\u7edf\u8c03\u7528\u8fdb\u884c\u4e86\u5c01\u88c5\uff0c\u5f53\u7136\u8fd9\u4ec5\u4ec5\u662f\u5176\u529f\u80fd\u4e4b\u4e00\u3002\u5f53\u7136\uff0c\u5bf9\u4e8e\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u8005\u800c\u8a00\uff0c\u5927\u5bb6\u90fd\u719f\u6089open\uff0cmalloc\u7b49\u51fd\u6570\uff0c\u8f7b\u6613\u63a5\u89e6\u4e0d\u5230\u76f4\u63a5\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\u3002 \u90a3\u4e48\u5f88\u663e\u7136\uff0c\u7cfb\u7edf\u8c03\u7528\u5c31\u662f\u5185\u6838\u63d0\u4f9b\u7684\u4e00\u7cfb\u5217\u63a5\u53e3\uff0c\u65e2\u7136\u662f\u63a5\u53e3\uff0c\u90a3\u4e48\u5c31\u6709\u4e24\u4e2a\u4e3b\u8981\u95ee\u9898 \u600e\u4e48\u4f7f\u7528 \u63a5\u53e3\u5217\u8868 \u5982\u4f55\u4f7f\u7528 \u00b6 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5e93\u51fd\u6570\u7b80\u4ecb\u7684\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7syscall\u51fd\u6570\u6765\u663e\u5f0f\u7684\u4f7f\u7528 \u63a5\u53e3\u5217\u8868 \u00b6 \u8c08\u5230\u63a5\u53e3\u5217\u8868\uff0c\u5c31\u8981\u8c08\u5230\u7cfb\u7edf\u8c03\u7528\u7684\u6807\u51c6\u3002\u6211\u4eec\u80fd\u591f\u60f3\u5230\uff0c\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u53ef\u80fd\u4f1a\u63d0\u4f9b\u4e0d\u540c\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u5982\u679c\u5927\u5bb6\u90fd\u7edf\u4e00\u4e86\uff0c\u90a3\u4e48\u8f6f\u4ef6\u5c31\u7b80\u5355\u4e86\uff0c\u4f46\u73b0\u5b9e\u80af\u5b9a\u662f\u4e0d\u53ea\u6709\u4e00\u4e2a\u6807\u51c6\u7684\u3002 \u8fd9\u91cc\u5f15\u7528\u77e5\u4e4e\u7684\u6587\u7ae0 Linux\u7cfb\u7edf\u8c03\u7528 \u4e2d\u7684\u63cf\u8ff0 \u5728\u6240\u6709\u7c7b\u578b\u7684 UNIX \u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u7cfb\u7edf\u8c03\u7528\u90fd\u662f\u7279\u522b\u91cd\u8981\u7684\u3002\u7cfb\u7edf\u8c03\u7528\u7684\u4f5c\u7528\u8303\u56f4\u3001\u901f\u5ea6\u3001\u9ad8\u6548\u5b9e\u73b0\u662f\u5f71\u54cd\u7cfb\u7edf\u6027\u80fd\u7684\u4e00\u4e2a\u4e3b\u8981\u56e0\u7d20\u3002Linux \u4e2d\u7cfb\u7edf\u8c03\u7528\u7684\u5b9e\u73b0\u975e\u5e38\u9ad8\u6548\u800c\u4e14\u79cd\u7c7b\u7e41\u591a\u3002\u5728 UNIX \u5927\u5bb6\u5ead\u4e2d\uff0c\u6709\u5f88\u591a\u7684\u6807\u51c6\uff0c\u8fd9\u4e9b\u6807\u51c6\u4f7f\u5f97\u4e0d\u540c\u7cfb\u7edf\u7684\u63a5\u53e3\u5177\u6709\u4e00\u81f4\u6027\u3002\u8fd9\u6837\u4e0a\u5c42\u5e94\u7528\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u5728\u591a\u4e2a UNIX \u7cfb\u7edf\u4e2d\u517c\u5bb9\u3002 POSIX\u6807\u51c6(\u8fd9\u662fPortable Operating System Interface for UNIX)\u5df2\u7ecf\u6210\u4e3a\u8be5\u9886\u57df\u7684\u4e3b\u5bfc\u6807\u51c6\u3002Linux \u548c C \u6807\u51c6\u5e93\u5c3d\u529b\u9075\u5faa POSIX \u6807\u51c6\u3002\u4ece20\u4e16\u7eaa80\u5e74\u4ee3\u672bPOSIX\u7b2c\u4e00\u4e2a\u7248\u672c\u53d1\u5e03\u4ee5\u6765\uff0c\u8be5\u6807\u51c6\u6db5\u76d6\u7684\u8303\u56f4\u6025\u901f\u6269\u5c55\uff0c\u73b0\u5728\u8bb8\u591a\u7a0b\u5e8f\u5458\u8ba4\u4e3a\u5b83\u5df2\u7ecf\u592a\u957f\u4e5f\u592a\u590d\u6742\u3002 \u9664\u4e86POSIX\u4e4b\u5916\uff0c\u8fd8\u6709\u5176\u4ed6\u6807\u51c6\uff0c\u8fd9\u4e9b\u4e0d\u662f\u7531\u67d0\u4e2a\u59d4\u5458\u4f1a\u5236\u5b9a\u7684\uff0c\u800c\u662f\u6765\u6e90\u4e8e UNIX \u548c\u7c7b UNIX \u64cd\u4f5c\u7cfb\u7edf\u7684\u5f00\u53d1\u3002\u5728 UNIX \u7684\u5386\u53f2\u4e2d\uff0c\u4e24\u6761\u5f00\u53d1\u4e3b\u7ebf\u4ea7\u751f\u4e86\u4e24\u4e2a\u72ec\u7acb\u7684\u7cfb\u7edf\uff0c\u4e00\u4e2a\u662fSystemV(\u76f4\u63a5\u8d77\u6e90\u4e8eAT&T\u7684\u539f\u59cb\u4ee3\u7801)\uff0c\u53e6\u4e00\u4e2a\u662fBSD (Berkeley Software Distribution\uff0c\u5728\u52a0\u5dde\u5927\u5b66\u5f00\u53d1\uff0c\u73b0\u5728\u5e02\u573a\u4e0a\u7684 NetBSD\u3001 FreeBSD\u3001 OpenBSD \u90fd\u662f\u57fa\u4e8e BSD \u7684\uff0c\u8fd8\u6709\u57fa\u4e8eBSD\u7684\u5546\u4e1a\u7cfb\u7edf\uff0c\u5982 MacOS\u3002Linux \u63d0\u4f9b\u7684\u7cfb\u7edf\u8c03\u7528\u6c72\u53d6\u81ea\u6240\u6709\u4e0a\u8ff0 3 \u4e2a\u6765\u6e90 \u5b9e\u73b0 \u00b6 arch/riscv/kernel/entry.S \u4e2d \u5728\u5f02\u5e38\u5904\u7406\u4e2d\uff0c\u5982\u679c\u5f02\u5e38\u662f\u7528\u6237\u6a21\u5f0f\u4e0b\u53d1\u751f\u7684ecall\u6307\u4ee4\uff0c\u90a3\u4e48\u5c31\u5b9a\u4f4d\u5230sys_call_table[\u5f02\u5e38\u53f7\u5bf9\u5e94\u504f\u79fb]\u4e2d\u8fdb\u884c\u6267\u884c \u5bf9\u5e94\u7684\u6267\u884c\u51fd\u6570\u5c31\u662f\u6211\u4eec\u5728include/linux/syscall.h\u4e2d\u770b\u5230\u7684\u90a3\u4e9bsys_xxxxx\u7684\u51fd\u6570\uff0c\u5f53\u7136\uff0csys_xxxx\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u9605\u8bfb\u7684\uff0c \u6ca1\u6cd5\u76f4\u63a5\u8c03\u7528\uff0c\u4ed6\u4eec\u66f4\u50cf\u4e00\u4e2aAPI\u8bf4\u660e\u4e66\uff0c\u5176\u5b9e\u6240\u6709\u7684\u7cfb\u7edf\u8c03\u7528\u90fd\u662f\u901a\u8fc7SYSCALL_DEFINE1 - SYSCALL_DEFINE6\u6765\u5b9a\u4e49\u7684\uff0c\u5206\u6563\u5728 kernel\u4ee3\u7801\u7684\u5404\u4e2a\u89d2\u843d","title":"linux\u7cfb\u7edf\u8c03\u7528"},{"location":"linux/syscall.html#linux","text":"","title":"linux\u7cfb\u7edf\u8c03\u7528"},{"location":"linux/syscall.html#_1","text":"\u6700\u8fd1\u57fa\u4e8egem5\u8c03\u8bd5\u4e86RandomX, \u5728\u8c03\u8bd5\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u4e86gem5\u7684syscall\u6a21\u5f0f\uff0c\u4e8e\u662f\u987a\u624b\u770b\u4e86\u4e00\u4e0blinux\u7cfb\u7edf\u8c03\u7528\u76f8\u5173\u7684\u8d44\u6599\uff0c\u5728\u8fd9\u91cc\u505a\u4e00\u4e2a\u603b\u7ed3\u3002\u5f53\u7136\uff0c\u603b\u7ed3\u5206\u4e3a\u4e09\u5927\u90e8\u5206 linux\u7cfb\u7edf\u8c03\u7528\u7b80\u6790 RandomX\u603b\u7ed3 gem5\u7684syscall\u6a21\u5f0f \u8fd9\u91cc\u4e3b\u8981\u9488\u5bf9linux\u7cfb\u7edf\u4ee5\u53caRISCV\u67b6\u6784\u5b9e\u73b0\u505a\u4e00\u4e9b\u7b80\u8981\u5206\u6790\u3002","title":"\u80cc\u666f\u4ecb\u7ecd"},{"location":"linux/syscall.html#_2","text":"\u60f3\u5fc5\u4e0a\u56fe\u5728\u5f88\u591a\u7ecf\u5178\u4e66\u7c4d\u6587\u6863\u4e2d\u90fd\u80fd\u88ab\u770b\u5230\u3002\u7528\u6237\u7a0b\u5e8f\u5b9e\u9645\u4e0a\u5b8c\u5168\u4f9d\u8d56\u4e8e\u7cfb\u7edf\u8c03\u7528\u3002\u516c\u5171\u5e93\u548cshell\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7cfb\u7edf\u8c03\u7528\u7684\u5c01\u88c5\uff0c\u4f7f\u5f97\u7528\u6237\u66f4\u65b9\u4fbf\u7684\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\u3002\u8fd9\u5f88\u660e\u663e\u662f\u4e00\u79cd\u2018\u5b88\u2019\u7684\u8bbe\u8ba1\u65b9\u5f0f\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4ec5\u63d0\u4f9b\u7cfb\u7edf\u8c03\u7528\u7ed9\u5e94\u7528\u7a0b\u5e8f\uff0c\u8fd9\u6837\u5c31\u80fd\u6700\u5927\u9650\u5ea6\u7684\u4fdd\u8bc1\u7cfb\u7edf\u7684\u5b89\u5168\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u5bf9\u6709\u9650\u7684\u7cfb\u7edf\u8c03\u7528\u505a\u68c0\u67e5\uff0c\u5e76\u4e14\u5b8c\u5168\u7ba1\u7406\u8fd9\u4e9b\u7cfb\u7edf\u8c03\u7528\u7684\u884c\u4e3a\u3002 \u8fd9\u5f20\u56fe\u7247\u80fd\u591f\u6e05\u695a\u7684\u770b\u5230\u51fd\u6570\u5e93\u548c\u7cfb\u7edf\u8c03\u7528\u7684\u533a\u522b\uff0c\u5e93\u51fd\u6570\u57fa\u4e8e\u7cfb\u7edf\u8c03\u7528\u4e4b\u4e0a\uff0c\u5bf9\u7cfb\u7edf\u8c03\u7528\u8fdb\u884c\u4e86\u5c01\u88c5\uff0c\u5f53\u7136\u8fd9\u4ec5\u4ec5\u662f\u5176\u529f\u80fd\u4e4b\u4e00\u3002\u5f53\u7136\uff0c\u5bf9\u4e8e\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u8005\u800c\u8a00\uff0c\u5927\u5bb6\u90fd\u719f\u6089open\uff0cmalloc\u7b49\u51fd\u6570\uff0c\u8f7b\u6613\u63a5\u89e6\u4e0d\u5230\u76f4\u63a5\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\u3002 \u90a3\u4e48\u5f88\u663e\u7136\uff0c\u7cfb\u7edf\u8c03\u7528\u5c31\u662f\u5185\u6838\u63d0\u4f9b\u7684\u4e00\u7cfb\u5217\u63a5\u53e3\uff0c\u65e2\u7136\u662f\u63a5\u53e3\uff0c\u90a3\u4e48\u5c31\u6709\u4e24\u4e2a\u4e3b\u8981\u95ee\u9898 \u600e\u4e48\u4f7f\u7528 \u63a5\u53e3\u5217\u8868","title":"\u673a\u5236\u7b80\u4ecb"},{"location":"linux/syscall.html#_3","text":"\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5e93\u51fd\u6570\u7b80\u4ecb\u7684\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7syscall\u51fd\u6570\u6765\u663e\u5f0f\u7684\u4f7f\u7528","title":"\u5982\u4f55\u4f7f\u7528"},{"location":"linux/syscall.html#_4","text":"\u8c08\u5230\u63a5\u53e3\u5217\u8868\uff0c\u5c31\u8981\u8c08\u5230\u7cfb\u7edf\u8c03\u7528\u7684\u6807\u51c6\u3002\u6211\u4eec\u80fd\u591f\u60f3\u5230\uff0c\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u53ef\u80fd\u4f1a\u63d0\u4f9b\u4e0d\u540c\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u5982\u679c\u5927\u5bb6\u90fd\u7edf\u4e00\u4e86\uff0c\u90a3\u4e48\u8f6f\u4ef6\u5c31\u7b80\u5355\u4e86\uff0c\u4f46\u73b0\u5b9e\u80af\u5b9a\u662f\u4e0d\u53ea\u6709\u4e00\u4e2a\u6807\u51c6\u7684\u3002 \u8fd9\u91cc\u5f15\u7528\u77e5\u4e4e\u7684\u6587\u7ae0 Linux\u7cfb\u7edf\u8c03\u7528 \u4e2d\u7684\u63cf\u8ff0 \u5728\u6240\u6709\u7c7b\u578b\u7684 UNIX \u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u7cfb\u7edf\u8c03\u7528\u90fd\u662f\u7279\u522b\u91cd\u8981\u7684\u3002\u7cfb\u7edf\u8c03\u7528\u7684\u4f5c\u7528\u8303\u56f4\u3001\u901f\u5ea6\u3001\u9ad8\u6548\u5b9e\u73b0\u662f\u5f71\u54cd\u7cfb\u7edf\u6027\u80fd\u7684\u4e00\u4e2a\u4e3b\u8981\u56e0\u7d20\u3002Linux \u4e2d\u7cfb\u7edf\u8c03\u7528\u7684\u5b9e\u73b0\u975e\u5e38\u9ad8\u6548\u800c\u4e14\u79cd\u7c7b\u7e41\u591a\u3002\u5728 UNIX \u5927\u5bb6\u5ead\u4e2d\uff0c\u6709\u5f88\u591a\u7684\u6807\u51c6\uff0c\u8fd9\u4e9b\u6807\u51c6\u4f7f\u5f97\u4e0d\u540c\u7cfb\u7edf\u7684\u63a5\u53e3\u5177\u6709\u4e00\u81f4\u6027\u3002\u8fd9\u6837\u4e0a\u5c42\u5e94\u7528\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u5728\u591a\u4e2a UNIX \u7cfb\u7edf\u4e2d\u517c\u5bb9\u3002 POSIX\u6807\u51c6(\u8fd9\u662fPortable Operating System Interface for UNIX)\u5df2\u7ecf\u6210\u4e3a\u8be5\u9886\u57df\u7684\u4e3b\u5bfc\u6807\u51c6\u3002Linux \u548c C \u6807\u51c6\u5e93\u5c3d\u529b\u9075\u5faa POSIX \u6807\u51c6\u3002\u4ece20\u4e16\u7eaa80\u5e74\u4ee3\u672bPOSIX\u7b2c\u4e00\u4e2a\u7248\u672c\u53d1\u5e03\u4ee5\u6765\uff0c\u8be5\u6807\u51c6\u6db5\u76d6\u7684\u8303\u56f4\u6025\u901f\u6269\u5c55\uff0c\u73b0\u5728\u8bb8\u591a\u7a0b\u5e8f\u5458\u8ba4\u4e3a\u5b83\u5df2\u7ecf\u592a\u957f\u4e5f\u592a\u590d\u6742\u3002 \u9664\u4e86POSIX\u4e4b\u5916\uff0c\u8fd8\u6709\u5176\u4ed6\u6807\u51c6\uff0c\u8fd9\u4e9b\u4e0d\u662f\u7531\u67d0\u4e2a\u59d4\u5458\u4f1a\u5236\u5b9a\u7684\uff0c\u800c\u662f\u6765\u6e90\u4e8e UNIX \u548c\u7c7b UNIX \u64cd\u4f5c\u7cfb\u7edf\u7684\u5f00\u53d1\u3002\u5728 UNIX \u7684\u5386\u53f2\u4e2d\uff0c\u4e24\u6761\u5f00\u53d1\u4e3b\u7ebf\u4ea7\u751f\u4e86\u4e24\u4e2a\u72ec\u7acb\u7684\u7cfb\u7edf\uff0c\u4e00\u4e2a\u662fSystemV(\u76f4\u63a5\u8d77\u6e90\u4e8eAT&T\u7684\u539f\u59cb\u4ee3\u7801)\uff0c\u53e6\u4e00\u4e2a\u662fBSD (Berkeley Software Distribution\uff0c\u5728\u52a0\u5dde\u5927\u5b66\u5f00\u53d1\uff0c\u73b0\u5728\u5e02\u573a\u4e0a\u7684 NetBSD\u3001 FreeBSD\u3001 OpenBSD \u90fd\u662f\u57fa\u4e8e BSD \u7684\uff0c\u8fd8\u6709\u57fa\u4e8eBSD\u7684\u5546\u4e1a\u7cfb\u7edf\uff0c\u5982 MacOS\u3002Linux \u63d0\u4f9b\u7684\u7cfb\u7edf\u8c03\u7528\u6c72\u53d6\u81ea\u6240\u6709\u4e0a\u8ff0 3 \u4e2a\u6765\u6e90","title":"\u63a5\u53e3\u5217\u8868"},{"location":"linux/syscall.html#_5","text":"arch/riscv/kernel/entry.S \u4e2d \u5728\u5f02\u5e38\u5904\u7406\u4e2d\uff0c\u5982\u679c\u5f02\u5e38\u662f\u7528\u6237\u6a21\u5f0f\u4e0b\u53d1\u751f\u7684ecall\u6307\u4ee4\uff0c\u90a3\u4e48\u5c31\u5b9a\u4f4d\u5230sys_call_table[\u5f02\u5e38\u53f7\u5bf9\u5e94\u504f\u79fb]\u4e2d\u8fdb\u884c\u6267\u884c \u5bf9\u5e94\u7684\u6267\u884c\u51fd\u6570\u5c31\u662f\u6211\u4eec\u5728include/linux/syscall.h\u4e2d\u770b\u5230\u7684\u90a3\u4e9bsys_xxxxx\u7684\u51fd\u6570\uff0c\u5f53\u7136\uff0csys_xxxx\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u9605\u8bfb\u7684\uff0c \u6ca1\u6cd5\u76f4\u63a5\u8c03\u7528\uff0c\u4ed6\u4eec\u66f4\u50cf\u4e00\u4e2aAPI\u8bf4\u660e\u4e66\uff0c\u5176\u5b9e\u6240\u6709\u7684\u7cfb\u7edf\u8c03\u7528\u90fd\u662f\u901a\u8fc7SYSCALL_DEFINE1 - SYSCALL_DEFINE6\u6765\u5b9a\u4e49\u7684\uff0c\u5206\u6563\u5728 kernel\u4ee3\u7801\u7684\u5404\u4e2a\u89d2\u843d","title":"\u5b9e\u73b0"},{"location":"mcu/ads7843.html","text":"ADS7843 \u65e0\u4e2d\u65ad\u54cd\u5e94\u95ee\u9898\u5b9a\u4f4d \u00b6 ADS7843 \u65e0\u4e2d\u65ad\u54cd\u5e94\u95ee\u9898\u5b9a\u4f4d \u95ee\u9898\u63cf\u8ff0 \u5b9a\u4f4d\u8fc7\u7a0b \u95ee\u9898\u89e3\u51b3 \u95ee\u9898\u63cf\u8ff0 \u00b6 \u4f7f\u7528stm32f207 + ADS7843 \u5b9e\u73b0\u89e6\u6478\u5c4f\uff0c\u53d1\u73b0\u89e6\u6478\u5c4f\u6bcf\u6b21\u65ad\u7535\u4e4b\u540e\u90fd\u4e0d\u597d\u7528\uff0c\u4f46\u662f\u4e00\u65e6\u597d\u7528\u4e86\uff0c\u4e0d\u65ad\u7535\u5c31\u4f1a\u4e00\u76f4\u597d\u7528\u3002\u6709\u65f6\u5019\u8bfb\u53d6\u7684\u6570\u636e\u4e00\u76f4\u662f0xff,\u9700\u8981\u91cd\u65b0\u70e7\u5199\u7a0b\u5e8f\u624d\u6709\u53ef\u80fd\u597d\u7528 \u5b9a\u4f4d\u8fc7\u7a0b \u00b6 \u65f6\u95f4\u4ed3\u4fc3\uff0c\u5148\u4e0d\u63cf\u8ff0 \u95ee\u9898\u89e3\u51b3 \u00b6 \u4f7f\u7528\u4e86stm32f207\u7684spi3\u63a5\u53e3\uff0c\u662fJTAG\u590d\u7528\u63a5\u53e3\uff0c\u4e00\u65e6\u8fde\u63a5\u4eff\u771f\u5668\u5c31\u53ef\u80fd\u51b2\u7a81\uff0c\u56e0\u6b64\u73b0\u8c61\u4e3a\u6709\u65f6\u5019\u9700\u8981\u70e7\u5199\u7a0b\u5e8f\u624d\u80fd\u597d\u7528 ads7843 \u9700\u8981\u5148\u8bfb\u53d6\u4e00\u4e0b\u5bc4\u5b58\u5668\uff0cirq\u4fe1\u53f7\u624d\u80fd\u597d\u7528\uff0c\u8fd9\u5e94\u8be5\u662f\u82af\u7247\u7279\u6027\u6216\u8005\u662fbug\uff0c\u540e\u7eed\u67e5\u4e00\u4e0b\u82af\u7247\u624b\u518c\u786e\u8ba4","title":"ADS7843 \u65e0\u4e2d\u65ad\u54cd\u5e94\u95ee\u9898\u5b9a\u4f4d"},{"location":"mcu/ads7843.html#ads7843","text":"ADS7843 \u65e0\u4e2d\u65ad\u54cd\u5e94\u95ee\u9898\u5b9a\u4f4d \u95ee\u9898\u63cf\u8ff0 \u5b9a\u4f4d\u8fc7\u7a0b \u95ee\u9898\u89e3\u51b3","title":"ADS7843 \u65e0\u4e2d\u65ad\u54cd\u5e94\u95ee\u9898\u5b9a\u4f4d"},{"location":"mcu/ads7843.html#_1","text":"\u4f7f\u7528stm32f207 + ADS7843 \u5b9e\u73b0\u89e6\u6478\u5c4f\uff0c\u53d1\u73b0\u89e6\u6478\u5c4f\u6bcf\u6b21\u65ad\u7535\u4e4b\u540e\u90fd\u4e0d\u597d\u7528\uff0c\u4f46\u662f\u4e00\u65e6\u597d\u7528\u4e86\uff0c\u4e0d\u65ad\u7535\u5c31\u4f1a\u4e00\u76f4\u597d\u7528\u3002\u6709\u65f6\u5019\u8bfb\u53d6\u7684\u6570\u636e\u4e00\u76f4\u662f0xff,\u9700\u8981\u91cd\u65b0\u70e7\u5199\u7a0b\u5e8f\u624d\u6709\u53ef\u80fd\u597d\u7528","title":"\u95ee\u9898\u63cf\u8ff0"},{"location":"mcu/ads7843.html#_2","text":"\u65f6\u95f4\u4ed3\u4fc3\uff0c\u5148\u4e0d\u63cf\u8ff0","title":"\u5b9a\u4f4d\u8fc7\u7a0b"},{"location":"mcu/ads7843.html#_3","text":"\u4f7f\u7528\u4e86stm32f207\u7684spi3\u63a5\u53e3\uff0c\u662fJTAG\u590d\u7528\u63a5\u53e3\uff0c\u4e00\u65e6\u8fde\u63a5\u4eff\u771f\u5668\u5c31\u53ef\u80fd\u51b2\u7a81\uff0c\u56e0\u6b64\u73b0\u8c61\u4e3a\u6709\u65f6\u5019\u9700\u8981\u70e7\u5199\u7a0b\u5e8f\u624d\u80fd\u597d\u7528 ads7843 \u9700\u8981\u5148\u8bfb\u53d6\u4e00\u4e0b\u5bc4\u5b58\u5668\uff0cirq\u4fe1\u53f7\u624d\u80fd\u597d\u7528\uff0c\u8fd9\u5e94\u8be5\u662f\u82af\u7247\u7279\u6027\u6216\u8005\u662fbug\uff0c\u540e\u7eed\u67e5\u4e00\u4e0b\u82af\u7247\u624b\u518c\u786e\u8ba4","title":"\u95ee\u9898\u89e3\u51b3"},{"location":"mcu/emwin_debug.html","text":"stm32f207 emwin + freertos \u8c03\u8bd5\u8fc7\u7a0b\u95ee\u9898\u7b80\u8981\u8bb0\u5f55 \u00b6 stm32f207 emwin + freertos \u8c03\u8bd5\u8fc7\u7a0b\u95ee\u9898\u7b80\u8981\u8bb0\u5f55 \u94fe\u63a5\u51fa\u9519\uff0c\u8d85\u51fa\u5730\u5740\u8303\u56f4 FRAMEWIN \u754c\u9762\u5728freertos\u8c03\u5ea6\u4e4b\u524d\u521d\u59cb\u5316\u53ef\u4ee5\u6b63\u5e38\u663e\u793a\uff0c\u5728\u4efb\u52a1\u4e2d\u65e0\u6cd5\u6b63\u5e38\u8fd0\u884c \u5728UI\u4e2d\u89e6\u6478\u65e0\u6cd5\u89e6\u53d1\u4e8b\u4ef6 \u94fe\u63a5\u51fa\u9519\uff0c\u8d85\u51fa\u5730\u5740\u8303\u56f4 \u00b6 \u6dfb\u52a0emwin\u540e\u7f16\u8bd1\u80fd\u591f\u901a\u8fc7\uff0c\u94fe\u63a5\u7684\u65f6\u5019\u62a5\u9519\uff0c\u7b26\u53f7\u8d85\u51fa\u5730\u5740\u8303\u56f4 \u9519\u8bef\u6253\u5370\u7c7b\u4f3c\u5982\u4e0b .\\Objects\\printer.axf: Error: L6406E: No space in execution regions with .ANY selector matching guiconf.o(.bss). .\\Objects\\printer.axf: Error: L6406E: No space in execution regions with .ANY selector matching heap_4.o(.bss). .\\Objects\\printer.axf: Error: L6406E: No space in execution regions with .ANY selector matching startup_stm32f2xx.o(STACK). GUIConf.c \u4e2d\u5b9a\u4e49\u4e86GUI\u53ef\u7528\u7684flash\u5b57\u8282\u6570,\u9ed8\u8ba4\u5f88\u5927\uff0c\u6539\u5c0f\u5373\u53ef // Define the available number of bytes available for the GUI // the orign GUI_NUMBYTES is too larger //#define GUI_NUMBYTES 0x200000 #define GUI_NUMBYTES 0xc800 FRAMEWIN \u754c\u9762\u5728freertos\u8c03\u5ea6\u4e4b\u524d\u521d\u59cb\u5316\u53ef\u4ee5\u6b63\u5e38\u663e\u793a\uff0c\u5728\u4efb\u52a1\u4e2d\u65e0\u6cd5\u6b63\u5e38\u8fd0\u884c \u00b6 xTaskCreate ( task_helloworld , \"hello world\" , 64 , NULL , 1 , NULL ); xTaskCreate ( task_touch , \"touch\" , 128 , NULL , 2 , & handle_touch ); xTaskCreate ( task_ui , \"ui\" , 1024 , NULL , 1 , & handle_gui ); \u521b\u5efa\u4e863\u4e2a\u4efb\u52a1\uff0c\u5176\u4e2d\u4efb\u52a1hello world \u548c touch \u80fd\u591f\u540c\u65f6\u52a0\u5165\u6267\u884c\uff0c\u4e00\u65e6\u52a0\u5165ui task,\u5c31\u4f1a\u5361\u6b7b\uff0c\u53bb\u6389ui \u4efb\u52a1\u5c31\u80fd\u6b63\u5e38\u8c03\u5ea6 \u6000\u7591\u5806\u6808\u6ea2\u51fa \u628aui task \u5806\u6808\u5927\u5c0f\u6539\u4e3a512\uff0c \u4ec5\u4fdd\u7559\u8fd9\u4e00\u4e2a\u4efb\u52a1\uff0c\u53d1\u73b0ui\u80fd\u591f\u6b63\u5e38\u663e\u793a \u8fd9\u65f6\u518d\u52a0\u5165hello world \u4efb\u52a1\uff0chello world \u4efb\u52a1\u4e5f\u80fd\u591f\u6b63\u5e38\u5f97\u5230\u6267\u884c \u6b64\u65f6\u518d\u52a0\u5165touch\u4efb\u52a1\uff0c\u53c8\u51fa\u73b0\u5361\u6b7b\u73b0\u8c61 \u57fa\u672c\u786e\u5b9a\u5806\u6808\u4e0d\u591f\u7528 \u5c1d\u8bd5\u4fee\u6539\u542f\u52a8\u6587\u4ef6\u4e2d\u7684\u6808\u5927\u5c0f Stack_Size EQU 0x00001800 AREA STACK , NOINIT , READWRITE , ALIGN = 3 Stack_Mem SPACE Stack_Size __initial_sp \u5c06\u6808\u5927\u5c0f\u7531\u539f\u6765\u76840x800\u6539\u4e3a0x1800, \u95ee\u9898\u89e3\u51b3 \u5728UI\u4e2d\u89e6\u6478\u65e0\u6cd5\u89e6\u53d1\u4e8b\u4ef6 \u00b6 \u89e6\u6478\u9a71\u52a8\u672c\u8eab\u8c03\u8bd5ok, \u4e5f\u901a\u8fc7\u5982\u4e0b\u89e6\u6478\u4efb\u52a1\u4e0d\u65ad\u66f4\u65b0\u89e6\u6478\u72b6\u6001 void touch_update ( void ) { GUI_PID_STATE pstate ; if ( GPIO_ReadInputDataBit ( GPIOB , GPIO_Pin_10 )) { pstate . Pressed = 0 ; goto store ; } touch_read_phy (); touch_trans ( & pstate , & g_touch ); printf ( \"pressed=%d, (%d,%d) \\r\\n \" , pstate . Pressed , pstate . x , pstate . y ); store : GUI_PID_StoreState ( & pstate ); } \u4f46\u89e6\u6478FRAME_WIN\u4e2d\u7684\u63a7\u4ef6\uff0c\u4ecd\u7136\u6ca1\u6709\u89e6\u6478\u4e8b\u4ef6\u4ea7\u751f\uff0c\u786e\u8ba4\u914d\u5957\u7248\u672c\u7684emwin \u53c2\u8003\u624b\u518c\uff0c\u786e\u8ba4\u64cd\u4f5c\u65b9\u6cd5\u6ca1\u9519\uff0c\u67e5\u770b GUI_PID_STATE \u7684\u5b9a\u4e49\uff0c\u53d1\u73b0\u53ea\u6709Layer\u6ca1\u6709\u8d4b\u503c typedef struct { int x , y ; U8 Pressed ; U8 Layer ; } GUI_PID_STATE ; \u67e5\u770bemwin\u914d\u7f6eGUIConf.h #define GUI_NUM_LAYERS 2 // Maximum number of available layers \u731c\u6d4b\u662f\u4e0d\u662f\u56e0\u4e3aLayer\u6ca1\u6709\u8d4b\u503c\u800c\u5bfc\u81f4\u4f20\u9519\u4e86Layer, \u5c1d\u8bd5\u5728\u4ee3\u7801\u4e2d\u6dfb\u52a0pstate.Layer = 0; \u6dfb\u52a0\u540e\u90e8\u5206\u4ee3\u7801\u5982\u4e0b GUI_PID_STATE pstate ; pstate . Layer = 0 ; if ( GPIO_ReadInputDataBit ( GPIOB , GPIO_Pin_10 )) { \u518d\u6b21\u6d4b\u8bd5\uff0c\u80fd\u591f\u89e6\u53d1\u89e6\u6478\u4e8b\u4ef6\uff0c\u95ee\u9898\u5f97\u5230\u89e3\u51b3","title":"stm32f207 emwin + freertos \u8c03\u8bd5\u8fc7\u7a0b\u95ee\u9898\u7b80\u8981\u8bb0\u5f55"},{"location":"mcu/emwin_debug.html#stm32f207-emwin-freertos","text":"stm32f207 emwin + freertos \u8c03\u8bd5\u8fc7\u7a0b\u95ee\u9898\u7b80\u8981\u8bb0\u5f55 \u94fe\u63a5\u51fa\u9519\uff0c\u8d85\u51fa\u5730\u5740\u8303\u56f4 FRAMEWIN \u754c\u9762\u5728freertos\u8c03\u5ea6\u4e4b\u524d\u521d\u59cb\u5316\u53ef\u4ee5\u6b63\u5e38\u663e\u793a\uff0c\u5728\u4efb\u52a1\u4e2d\u65e0\u6cd5\u6b63\u5e38\u8fd0\u884c \u5728UI\u4e2d\u89e6\u6478\u65e0\u6cd5\u89e6\u53d1\u4e8b\u4ef6","title":"stm32f207 emwin + freertos \u8c03\u8bd5\u8fc7\u7a0b\u95ee\u9898\u7b80\u8981\u8bb0\u5f55"},{"location":"mcu/emwin_debug.html#_1","text":"\u6dfb\u52a0emwin\u540e\u7f16\u8bd1\u80fd\u591f\u901a\u8fc7\uff0c\u94fe\u63a5\u7684\u65f6\u5019\u62a5\u9519\uff0c\u7b26\u53f7\u8d85\u51fa\u5730\u5740\u8303\u56f4 \u9519\u8bef\u6253\u5370\u7c7b\u4f3c\u5982\u4e0b .\\Objects\\printer.axf: Error: L6406E: No space in execution regions with .ANY selector matching guiconf.o(.bss). .\\Objects\\printer.axf: Error: L6406E: No space in execution regions with .ANY selector matching heap_4.o(.bss). .\\Objects\\printer.axf: Error: L6406E: No space in execution regions with .ANY selector matching startup_stm32f2xx.o(STACK). GUIConf.c \u4e2d\u5b9a\u4e49\u4e86GUI\u53ef\u7528\u7684flash\u5b57\u8282\u6570,\u9ed8\u8ba4\u5f88\u5927\uff0c\u6539\u5c0f\u5373\u53ef // Define the available number of bytes available for the GUI // the orign GUI_NUMBYTES is too larger //#define GUI_NUMBYTES 0x200000 #define GUI_NUMBYTES 0xc800","title":"\u94fe\u63a5\u51fa\u9519\uff0c\u8d85\u51fa\u5730\u5740\u8303\u56f4"},{"location":"mcu/emwin_debug.html#framewin-freertos","text":"xTaskCreate ( task_helloworld , \"hello world\" , 64 , NULL , 1 , NULL ); xTaskCreate ( task_touch , \"touch\" , 128 , NULL , 2 , & handle_touch ); xTaskCreate ( task_ui , \"ui\" , 1024 , NULL , 1 , & handle_gui ); \u521b\u5efa\u4e863\u4e2a\u4efb\u52a1\uff0c\u5176\u4e2d\u4efb\u52a1hello world \u548c touch \u80fd\u591f\u540c\u65f6\u52a0\u5165\u6267\u884c\uff0c\u4e00\u65e6\u52a0\u5165ui task,\u5c31\u4f1a\u5361\u6b7b\uff0c\u53bb\u6389ui \u4efb\u52a1\u5c31\u80fd\u6b63\u5e38\u8c03\u5ea6 \u6000\u7591\u5806\u6808\u6ea2\u51fa \u628aui task \u5806\u6808\u5927\u5c0f\u6539\u4e3a512\uff0c \u4ec5\u4fdd\u7559\u8fd9\u4e00\u4e2a\u4efb\u52a1\uff0c\u53d1\u73b0ui\u80fd\u591f\u6b63\u5e38\u663e\u793a \u8fd9\u65f6\u518d\u52a0\u5165hello world \u4efb\u52a1\uff0chello world \u4efb\u52a1\u4e5f\u80fd\u591f\u6b63\u5e38\u5f97\u5230\u6267\u884c \u6b64\u65f6\u518d\u52a0\u5165touch\u4efb\u52a1\uff0c\u53c8\u51fa\u73b0\u5361\u6b7b\u73b0\u8c61 \u57fa\u672c\u786e\u5b9a\u5806\u6808\u4e0d\u591f\u7528 \u5c1d\u8bd5\u4fee\u6539\u542f\u52a8\u6587\u4ef6\u4e2d\u7684\u6808\u5927\u5c0f Stack_Size EQU 0x00001800 AREA STACK , NOINIT , READWRITE , ALIGN = 3 Stack_Mem SPACE Stack_Size __initial_sp \u5c06\u6808\u5927\u5c0f\u7531\u539f\u6765\u76840x800\u6539\u4e3a0x1800, \u95ee\u9898\u89e3\u51b3","title":"FRAMEWIN \u754c\u9762\u5728freertos\u8c03\u5ea6\u4e4b\u524d\u521d\u59cb\u5316\u53ef\u4ee5\u6b63\u5e38\u663e\u793a\uff0c\u5728\u4efb\u52a1\u4e2d\u65e0\u6cd5\u6b63\u5e38\u8fd0\u884c"},{"location":"mcu/emwin_debug.html#ui","text":"\u89e6\u6478\u9a71\u52a8\u672c\u8eab\u8c03\u8bd5ok, \u4e5f\u901a\u8fc7\u5982\u4e0b\u89e6\u6478\u4efb\u52a1\u4e0d\u65ad\u66f4\u65b0\u89e6\u6478\u72b6\u6001 void touch_update ( void ) { GUI_PID_STATE pstate ; if ( GPIO_ReadInputDataBit ( GPIOB , GPIO_Pin_10 )) { pstate . Pressed = 0 ; goto store ; } touch_read_phy (); touch_trans ( & pstate , & g_touch ); printf ( \"pressed=%d, (%d,%d) \\r\\n \" , pstate . Pressed , pstate . x , pstate . y ); store : GUI_PID_StoreState ( & pstate ); } \u4f46\u89e6\u6478FRAME_WIN\u4e2d\u7684\u63a7\u4ef6\uff0c\u4ecd\u7136\u6ca1\u6709\u89e6\u6478\u4e8b\u4ef6\u4ea7\u751f\uff0c\u786e\u8ba4\u914d\u5957\u7248\u672c\u7684emwin \u53c2\u8003\u624b\u518c\uff0c\u786e\u8ba4\u64cd\u4f5c\u65b9\u6cd5\u6ca1\u9519\uff0c\u67e5\u770b GUI_PID_STATE \u7684\u5b9a\u4e49\uff0c\u53d1\u73b0\u53ea\u6709Layer\u6ca1\u6709\u8d4b\u503c typedef struct { int x , y ; U8 Pressed ; U8 Layer ; } GUI_PID_STATE ; \u67e5\u770bemwin\u914d\u7f6eGUIConf.h #define GUI_NUM_LAYERS 2 // Maximum number of available layers \u731c\u6d4b\u662f\u4e0d\u662f\u56e0\u4e3aLayer\u6ca1\u6709\u8d4b\u503c\u800c\u5bfc\u81f4\u4f20\u9519\u4e86Layer, \u5c1d\u8bd5\u5728\u4ee3\u7801\u4e2d\u6dfb\u52a0pstate.Layer = 0; \u6dfb\u52a0\u540e\u90e8\u5206\u4ee3\u7801\u5982\u4e0b GUI_PID_STATE pstate ; pstate . Layer = 0 ; if ( GPIO_ReadInputDataBit ( GPIOB , GPIO_Pin_10 )) { \u518d\u6b21\u6d4b\u8bd5\uff0c\u80fd\u591f\u89e6\u53d1\u89e6\u6478\u4e8b\u4ef6\uff0c\u95ee\u9898\u5f97\u5230\u89e3\u51b3","title":"\u5728UI\u4e2d\u89e6\u6478\u65e0\u6cd5\u89e6\u53d1\u4e8b\u4ef6"},{"location":"mcu/fatfs_f_readdir.html","text":"f_readdir \u5728\u4f7f\u7528\u957f\u6587\u4ef6\u540d\u65f6\u7684\u95ee\u9898 \u00b6 f_readdir \u5728\u4f7f\u7528\u957f\u6587\u4ef6\u540d\u65f6\u7684\u95ee\u9898 \u7ed3\u8bba\u5148\u884c \u5206\u6790\u8fc7\u7a0b \u7ed3\u8bba \u7ed3\u8bba\u5148\u884c \u00b6 FRESULT f_readdir (DIR* dp, FILINFO* fno) \u5728\u4f7f\u7528\u4e86\u957f\u6587\u4ef6\u540d\u540e\uff0c\u5728\u64cd\u4f5cf_readdir\u524d\uff0c\u9700\u8981\u521d\u59cb\u5316fno.lfsize FILINFO info ; TCHAR name [ 64 ]; int res ; DIR file_dir ; info . lfname = name ; info . lfsize = 64 ; //init lfsize f_opendir ( & file_dir , PICTURE_FILE_DIR ); f_readdir ( & file_dir , & info ); \u5206\u6790\u8fc7\u7a0b \u00b6 \u5728\u4f7f\u80fd\u4e86\u957f\u6587\u4ef6\u540d\u540e\uff0c\u901a\u8fc7f_readdir\u904d\u5386\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\uff0c\u53d1\u73b0\u83b7\u53d6\u5230\u7684lfname\u4e3a\u7a7a\uff0c\u4ee3\u7801\u5982\u4e0b [DBG]-[NORMAL]\\USER\\main.c\\list_for_each_pic\\read dir, res=0, fname=PIC201~1.BMP, lfname= [DBG]-[NORMAL]\\USER\\main.c\\list_for_each_pic\\read dir, res=0, fname=PIC201~2.BMP, lfname= [DBG]-[NORMAL]\\USER\\main.c\\list_for_each_pic\\read dir, res=0, fname=PIC201~3.BMP, lfname= static void list_for_each_pic ( char * debug ) { FILINFO info ; TCHAR name [ 64 ]; int res ; DIR file_dir ; info . lfname = name ; DBG_TO_SERIAL ( DBG_NORMAL , \"%s\" , debug ); res = f_opendir ( & file_dir , PICTURE_FILE_DIR ); if ( res ) { DBG_TO_SERIAL ( DBG_NORMAL , \"can not open dir:%s, res=%d\" , PICTURE_FILE_DIR , res ); my_msg . sf_lock = 0 ; return ; } /* read picture file */ while ( 1 ) { res = f_readdir ( & file_dir , & info ); DBG_TO_SERIAL ( DBG_NORMAL , \"read dir, res=%d, fname=%s, lfname=%s\" , res , info . fname , info . lfname ); if ( res || info . fname [ 0 ] == 0 ) break ; if ( info . fname [ 0 ] == '.' ) continue ; } f_closedir ( & file_dir ); } \u8ffd\u8e2afatfs\u4ee3\u7801\uff0c\u53d1\u73b0\u6709\u5982\u4e0b\u673a\u5236 if ( dp -> sect && fno -> lfsize && dp -> lfn_idx != 0xFFFF ) { /* Get LFN if available */ \u901a\u8fc7\u6dfb\u52a0\u6253\u5370\uff0c\u53d1\u73b0\u51fa\u73b0\u83b7\u53d6\u4e0d\u5230lfname\u65f6\u7684lfzise\u4e3a0 /*-----------------------------------------------------------------------*/ /* Get file information from directory entry */ /*-----------------------------------------------------------------------*/ #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 static void get_fileinfo ( /* No return code */ DIR * dp , /* Pointer to the directory object */ FILINFO * fno /* Pointer to the file information to be filled */ ) { UINT i ; TCHAR * p , c ; BYTE * dir ; #if _USE_LFN WCHAR w , * lfn ; #endif p = fno -> fname ; if ( dp -> sect ) { /* Get SFN */ dir = dp -> dir ; i = 0 ; while ( i < 11 ) { /* Copy name body and extension */ c = ( TCHAR ) dir [ i ++ ]; if ( c == ' ' ) continue ; /* Skip padding spaces */ if ( c == RDDEM ) c = ( TCHAR ) DDEM ; /* Restore replaced DDEM character */ if ( i == 9 ) * p ++ = '.' ; /* Insert a . if extension is exist */ #if _USE_LFN if ( IsUpper ( c ) && ( dir [ DIR_NTres ] & ( i >= 9 ? NS_EXT : NS_BODY ))) c += 0x20 ; /* To lower */ #if _LFN_UNICODE if ( IsDBCS1 ( c ) && i != 8 && i != 11 && IsDBCS2 ( dir [ i ])) c = c << 8 | dir [ i ++ ]; c = ff_convert ( c , 1 ); /* OEM -> Unicode */ if ( ! c ) c = '?' ; #endif #endif * p ++ = c ; } fno -> fattrib = dir [ DIR_Attr ]; /* Attribute */ fno -> fsize = LD_DWORD ( dir + DIR_FileSize ); /* Size */ fno -> fdate = LD_WORD ( dir + DIR_WrtDate ); /* Date */ fno -> ftime = LD_WORD ( dir + DIR_WrtTime ); /* Time */ } * p = 0 ; /* Terminate SFN string by a \\0 */ #if _USE_LFN if ( fno -> lfname ) { i = 0 ; p = fno -> lfname ; if ( dp -> sect && fno -> lfsize && dp -> lfn_idx != 0xFFFF ) { /* Get LFN if available */ lfn = dp -> lfn ; while (( w = * lfn ++ ) != 0 ) { /* Get an LFN character */ #if !_LFN_UNICODE w = ff_convert ( w , 0 ); /* Unicode -> OEM */ if ( ! w ) { i = 0 ; break ; } /* No LFN if it could not be converted */ if ( _DF1S && w >= 0x100 ) /* Put 1st byte if it is a DBC (always false on SBCS cfg) */ p [ i ++ ] = ( TCHAR )( w >> 8 ); #endif if ( i >= fno -> lfsize - 1 ) { i = 0 ; break ; } /* No LFN if buffer overflow */ p [ i ++ ] = ( TCHAR ) w ; } } p [ i ] = 0 ; /* Terminate LFN string by a \\0 */ } #endif } #endif /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 */ /*-----------------------------------------------------------------------*/ /* Read Directory Entries in Sequence */ /*-----------------------------------------------------------------------*/ FRESULT f_readdir ( DIR * dp , /* Pointer to the open directory object */ FILINFO * fno /* Pointer to file information to return */ ) { FRESULT res ; DEFINE_NAMEBUF ; res = validate ( dp ); /* Check validity of the object */ if ( res == FR_OK ) { if ( ! fno ) { res = dir_sdi ( dp , 0 ); /* Rewind the directory object */ } else { INIT_BUF ( * dp ); res = dir_read ( dp , 0 ); /* Read an item */ if ( res == FR_NO_FILE ) { /* Reached end of directory */ dp -> sect = 0 ; res = FR_OK ; } if ( res == FR_OK ) { /* A valid entry is found */ get_fileinfo ( dp , fno ); /* Get the object information */ res = dir_next ( dp , 0 ); /* Increment index for next */ if ( res == FR_NO_FILE ) { dp -> sect = 0 ; res = FR_OK ; } } FREE_BUF (); } } LEAVE_FF ( dp -> fs , res ); } \u5bf9lfsize\u8fdb\u884c\u641c\u7d22\uff0c\u770b\u5728\u4ec0\u4e48\u4f4d\u7f6e\u8fdb\u884c\u7684\u8d4b\u503c Ff . c ( \\ fat_fs \\ src ) : if ( fno -> lfname && fno -> lfsize ) { Ff . c ( \\ fat_fs \\ src ) : if ( i >= fno -> lfsize - 1 ) { i = 0 ; break ; } /* Buffer overflow, no LFN */ Ff . c ( \\ fat_fs \\ src ) : fno . lfsize = i ; Ff . h ( \\ fat_fs \\ inc ) : UINT lfsize ; /* Size of LFN buffer in TCHAR */ \u53d1\u73b0\u5176\u5b9e\u6ca1\u6709\u4efb\u4f55\u4f4d\u7f6e\u5bf9\u6b64\u53d8\u91cf\u8fdb\u884c\u8d4b\u503c #if _FS_RPATH >= 2 FRESULT f_getcwd ( TCHAR * path , /* Pointer to the directory path */ UINT sz_path /* Size of path */ ) { FRESULT res ; DIR dj ; UINT i , n ; DWORD ccl ; TCHAR * tp ; FILINFO fno ; DEF_NAMEBUF ; * path = 0 ; res = chk_mounted (( const TCHAR ** ) & path , & dj . fs , 0 ); /* Get current volume */ if ( res == FR_OK ) { INIT_BUF ( dj ); i = sz_path ; /* Bottom of buffer (dir stack base) */ dj . sclust = dj . fs -> cdir ; /* Start to follow upper dir from current dir */ while (( ccl = dj . sclust ) != 0 ) { /* Repeat while current dir is a sub-dir */ res = dir_sdi ( & dj , 1 ); /* Get parent dir */ if ( res != FR_OK ) break ; res = dir_read ( & dj ); if ( res != FR_OK ) break ; dj . sclust = LD_CLUST ( dj . dir ); /* Goto parent dir */ res = dir_sdi ( & dj , 0 ); if ( res != FR_OK ) break ; do { /* Find the entry links to the child dir */ res = dir_read ( & dj ); if ( res != FR_OK ) break ; if ( ccl == LD_CLUST ( dj . dir )) break ; /* Found the entry */ res = dir_next ( & dj , 0 ); } while ( res == FR_OK ); if ( res == FR_NO_FILE ) res = FR_INT_ERR ; /* It cannot be 'not found'. */ if ( res != FR_OK ) break ; #if _USE_LFN fno . lfname = path ; fno . lfsize = i ; #endif get_fileinfo ( & dj , & fno ); /* Get the dir name and push it to the buffer */ tp = fno . fname ; if ( _USE_LFN && * path ) tp = path ; for ( n = 0 ; tp [ n ]; n ++ ) ; if ( i < n + 3 ) { res = FR_NOT_ENOUGH_CORE ; break ; } while ( n ) path [ -- i ] = tp [ -- n ]; path [ -- i ] = '/' ; } tp = path ; if ( res == FR_OK ) { * tp ++ = '0' + CurrVol ; /* Put drive number */ * tp ++ = ':' ; if ( i == sz_path ) { /* Root-dir */ * tp ++ = '/' ; } else { /* Sub-dir */ do /* Add stacked path str */ * tp ++ = path [ i ++ ]; while ( i < sz_path ); } } * tp = 0 ; FREE_BUF (); } LEAVE_FF ( dj . fs , res ); } #endif /* _FS_RPATH >= 2 */ #endif /* _FS_RPATH >= 1 */ \u7ed3\u8bba \u00b6 // lfsize\u4ec5\u6709\u4e00\u4e2a\u4f5c\u7528\uff0c\u5c31\u662f\u7528\u6765\u9650\u5236i\uff0c\u9632\u6b62\u5185\u5b58\u8d8a\u754c\uff0clfsize\u9700\u8981\u5728\u4f7f\u7528f_readdir\u4e4b\u524d\u81ea\u5df1\u624b\u52a8\u8d4b\u503c #if _USE_LFN if ( fno -> lfname ) { i = 0 ; p = fno -> lfname ; if ( dp -> sect && fno -> lfsize && dp -> lfn_idx != 0xFFFF ) { /* Get LFN if available */ lfn = dp -> lfn ; while (( w = * lfn ++ ) != 0 ) { /* Get an LFN character */ #if !_LFN_UNICODE w = ff_convert ( w , 0 ); /* Unicode -> OEM */ if ( ! w ) { i = 0 ; break ; } /* No LFN if it could not be converted */ if ( _DF1S && w >= 0x100 ) /* Put 1st byte if it is a DBC (always false on SBCS cfg) */ p [ i ++ ] = ( TCHAR )( w >> 8 ); #endif if ( i >= fno -> lfsize - 1 ) { i = 0 ; break ; } /* No LFN if buffer overflow */ p [ i ++ ] = ( TCHAR ) w ; } } p [ i ] = 0 ; /* Terminate LFN string by a \\0 */ } #endif","title":"f_readdir \u5728\u4f7f\u7528\u957f\u6587\u4ef6\u540d\u65f6\u7684\u95ee\u9898"},{"location":"mcu/fatfs_f_readdir.html#f_readdir","text":"f_readdir \u5728\u4f7f\u7528\u957f\u6587\u4ef6\u540d\u65f6\u7684\u95ee\u9898 \u7ed3\u8bba\u5148\u884c \u5206\u6790\u8fc7\u7a0b \u7ed3\u8bba","title":"f_readdir \u5728\u4f7f\u7528\u957f\u6587\u4ef6\u540d\u65f6\u7684\u95ee\u9898"},{"location":"mcu/fatfs_f_readdir.html#_1","text":"FRESULT f_readdir (DIR* dp, FILINFO* fno) \u5728\u4f7f\u7528\u4e86\u957f\u6587\u4ef6\u540d\u540e\uff0c\u5728\u64cd\u4f5cf_readdir\u524d\uff0c\u9700\u8981\u521d\u59cb\u5316fno.lfsize FILINFO info ; TCHAR name [ 64 ]; int res ; DIR file_dir ; info . lfname = name ; info . lfsize = 64 ; //init lfsize f_opendir ( & file_dir , PICTURE_FILE_DIR ); f_readdir ( & file_dir , & info );","title":"\u7ed3\u8bba\u5148\u884c"},{"location":"mcu/fatfs_f_readdir.html#_2","text":"\u5728\u4f7f\u80fd\u4e86\u957f\u6587\u4ef6\u540d\u540e\uff0c\u901a\u8fc7f_readdir\u904d\u5386\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\uff0c\u53d1\u73b0\u83b7\u53d6\u5230\u7684lfname\u4e3a\u7a7a\uff0c\u4ee3\u7801\u5982\u4e0b [DBG]-[NORMAL]\\USER\\main.c\\list_for_each_pic\\read dir, res=0, fname=PIC201~1.BMP, lfname= [DBG]-[NORMAL]\\USER\\main.c\\list_for_each_pic\\read dir, res=0, fname=PIC201~2.BMP, lfname= [DBG]-[NORMAL]\\USER\\main.c\\list_for_each_pic\\read dir, res=0, fname=PIC201~3.BMP, lfname= static void list_for_each_pic ( char * debug ) { FILINFO info ; TCHAR name [ 64 ]; int res ; DIR file_dir ; info . lfname = name ; DBG_TO_SERIAL ( DBG_NORMAL , \"%s\" , debug ); res = f_opendir ( & file_dir , PICTURE_FILE_DIR ); if ( res ) { DBG_TO_SERIAL ( DBG_NORMAL , \"can not open dir:%s, res=%d\" , PICTURE_FILE_DIR , res ); my_msg . sf_lock = 0 ; return ; } /* read picture file */ while ( 1 ) { res = f_readdir ( & file_dir , & info ); DBG_TO_SERIAL ( DBG_NORMAL , \"read dir, res=%d, fname=%s, lfname=%s\" , res , info . fname , info . lfname ); if ( res || info . fname [ 0 ] == 0 ) break ; if ( info . fname [ 0 ] == '.' ) continue ; } f_closedir ( & file_dir ); } \u8ffd\u8e2afatfs\u4ee3\u7801\uff0c\u53d1\u73b0\u6709\u5982\u4e0b\u673a\u5236 if ( dp -> sect && fno -> lfsize && dp -> lfn_idx != 0xFFFF ) { /* Get LFN if available */ \u901a\u8fc7\u6dfb\u52a0\u6253\u5370\uff0c\u53d1\u73b0\u51fa\u73b0\u83b7\u53d6\u4e0d\u5230lfname\u65f6\u7684lfzise\u4e3a0 /*-----------------------------------------------------------------------*/ /* Get file information from directory entry */ /*-----------------------------------------------------------------------*/ #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 static void get_fileinfo ( /* No return code */ DIR * dp , /* Pointer to the directory object */ FILINFO * fno /* Pointer to the file information to be filled */ ) { UINT i ; TCHAR * p , c ; BYTE * dir ; #if _USE_LFN WCHAR w , * lfn ; #endif p = fno -> fname ; if ( dp -> sect ) { /* Get SFN */ dir = dp -> dir ; i = 0 ; while ( i < 11 ) { /* Copy name body and extension */ c = ( TCHAR ) dir [ i ++ ]; if ( c == ' ' ) continue ; /* Skip padding spaces */ if ( c == RDDEM ) c = ( TCHAR ) DDEM ; /* Restore replaced DDEM character */ if ( i == 9 ) * p ++ = '.' ; /* Insert a . if extension is exist */ #if _USE_LFN if ( IsUpper ( c ) && ( dir [ DIR_NTres ] & ( i >= 9 ? NS_EXT : NS_BODY ))) c += 0x20 ; /* To lower */ #if _LFN_UNICODE if ( IsDBCS1 ( c ) && i != 8 && i != 11 && IsDBCS2 ( dir [ i ])) c = c << 8 | dir [ i ++ ]; c = ff_convert ( c , 1 ); /* OEM -> Unicode */ if ( ! c ) c = '?' ; #endif #endif * p ++ = c ; } fno -> fattrib = dir [ DIR_Attr ]; /* Attribute */ fno -> fsize = LD_DWORD ( dir + DIR_FileSize ); /* Size */ fno -> fdate = LD_WORD ( dir + DIR_WrtDate ); /* Date */ fno -> ftime = LD_WORD ( dir + DIR_WrtTime ); /* Time */ } * p = 0 ; /* Terminate SFN string by a \\0 */ #if _USE_LFN if ( fno -> lfname ) { i = 0 ; p = fno -> lfname ; if ( dp -> sect && fno -> lfsize && dp -> lfn_idx != 0xFFFF ) { /* Get LFN if available */ lfn = dp -> lfn ; while (( w = * lfn ++ ) != 0 ) { /* Get an LFN character */ #if !_LFN_UNICODE w = ff_convert ( w , 0 ); /* Unicode -> OEM */ if ( ! w ) { i = 0 ; break ; } /* No LFN if it could not be converted */ if ( _DF1S && w >= 0x100 ) /* Put 1st byte if it is a DBC (always false on SBCS cfg) */ p [ i ++ ] = ( TCHAR )( w >> 8 ); #endif if ( i >= fno -> lfsize - 1 ) { i = 0 ; break ; } /* No LFN if buffer overflow */ p [ i ++ ] = ( TCHAR ) w ; } } p [ i ] = 0 ; /* Terminate LFN string by a \\0 */ } #endif } #endif /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 */ /*-----------------------------------------------------------------------*/ /* Read Directory Entries in Sequence */ /*-----------------------------------------------------------------------*/ FRESULT f_readdir ( DIR * dp , /* Pointer to the open directory object */ FILINFO * fno /* Pointer to file information to return */ ) { FRESULT res ; DEFINE_NAMEBUF ; res = validate ( dp ); /* Check validity of the object */ if ( res == FR_OK ) { if ( ! fno ) { res = dir_sdi ( dp , 0 ); /* Rewind the directory object */ } else { INIT_BUF ( * dp ); res = dir_read ( dp , 0 ); /* Read an item */ if ( res == FR_NO_FILE ) { /* Reached end of directory */ dp -> sect = 0 ; res = FR_OK ; } if ( res == FR_OK ) { /* A valid entry is found */ get_fileinfo ( dp , fno ); /* Get the object information */ res = dir_next ( dp , 0 ); /* Increment index for next */ if ( res == FR_NO_FILE ) { dp -> sect = 0 ; res = FR_OK ; } } FREE_BUF (); } } LEAVE_FF ( dp -> fs , res ); } \u5bf9lfsize\u8fdb\u884c\u641c\u7d22\uff0c\u770b\u5728\u4ec0\u4e48\u4f4d\u7f6e\u8fdb\u884c\u7684\u8d4b\u503c Ff . c ( \\ fat_fs \\ src ) : if ( fno -> lfname && fno -> lfsize ) { Ff . c ( \\ fat_fs \\ src ) : if ( i >= fno -> lfsize - 1 ) { i = 0 ; break ; } /* Buffer overflow, no LFN */ Ff . c ( \\ fat_fs \\ src ) : fno . lfsize = i ; Ff . h ( \\ fat_fs \\ inc ) : UINT lfsize ; /* Size of LFN buffer in TCHAR */ \u53d1\u73b0\u5176\u5b9e\u6ca1\u6709\u4efb\u4f55\u4f4d\u7f6e\u5bf9\u6b64\u53d8\u91cf\u8fdb\u884c\u8d4b\u503c #if _FS_RPATH >= 2 FRESULT f_getcwd ( TCHAR * path , /* Pointer to the directory path */ UINT sz_path /* Size of path */ ) { FRESULT res ; DIR dj ; UINT i , n ; DWORD ccl ; TCHAR * tp ; FILINFO fno ; DEF_NAMEBUF ; * path = 0 ; res = chk_mounted (( const TCHAR ** ) & path , & dj . fs , 0 ); /* Get current volume */ if ( res == FR_OK ) { INIT_BUF ( dj ); i = sz_path ; /* Bottom of buffer (dir stack base) */ dj . sclust = dj . fs -> cdir ; /* Start to follow upper dir from current dir */ while (( ccl = dj . sclust ) != 0 ) { /* Repeat while current dir is a sub-dir */ res = dir_sdi ( & dj , 1 ); /* Get parent dir */ if ( res != FR_OK ) break ; res = dir_read ( & dj ); if ( res != FR_OK ) break ; dj . sclust = LD_CLUST ( dj . dir ); /* Goto parent dir */ res = dir_sdi ( & dj , 0 ); if ( res != FR_OK ) break ; do { /* Find the entry links to the child dir */ res = dir_read ( & dj ); if ( res != FR_OK ) break ; if ( ccl == LD_CLUST ( dj . dir )) break ; /* Found the entry */ res = dir_next ( & dj , 0 ); } while ( res == FR_OK ); if ( res == FR_NO_FILE ) res = FR_INT_ERR ; /* It cannot be 'not found'. */ if ( res != FR_OK ) break ; #if _USE_LFN fno . lfname = path ; fno . lfsize = i ; #endif get_fileinfo ( & dj , & fno ); /* Get the dir name and push it to the buffer */ tp = fno . fname ; if ( _USE_LFN && * path ) tp = path ; for ( n = 0 ; tp [ n ]; n ++ ) ; if ( i < n + 3 ) { res = FR_NOT_ENOUGH_CORE ; break ; } while ( n ) path [ -- i ] = tp [ -- n ]; path [ -- i ] = '/' ; } tp = path ; if ( res == FR_OK ) { * tp ++ = '0' + CurrVol ; /* Put drive number */ * tp ++ = ':' ; if ( i == sz_path ) { /* Root-dir */ * tp ++ = '/' ; } else { /* Sub-dir */ do /* Add stacked path str */ * tp ++ = path [ i ++ ]; while ( i < sz_path ); } } * tp = 0 ; FREE_BUF (); } LEAVE_FF ( dj . fs , res ); } #endif /* _FS_RPATH >= 2 */ #endif /* _FS_RPATH >= 1 */","title":"\u5206\u6790\u8fc7\u7a0b"},{"location":"mcu/fatfs_f_readdir.html#_3","text":"// lfsize\u4ec5\u6709\u4e00\u4e2a\u4f5c\u7528\uff0c\u5c31\u662f\u7528\u6765\u9650\u5236i\uff0c\u9632\u6b62\u5185\u5b58\u8d8a\u754c\uff0clfsize\u9700\u8981\u5728\u4f7f\u7528f_readdir\u4e4b\u524d\u81ea\u5df1\u624b\u52a8\u8d4b\u503c #if _USE_LFN if ( fno -> lfname ) { i = 0 ; p = fno -> lfname ; if ( dp -> sect && fno -> lfsize && dp -> lfn_idx != 0xFFFF ) { /* Get LFN if available */ lfn = dp -> lfn ; while (( w = * lfn ++ ) != 0 ) { /* Get an LFN character */ #if !_LFN_UNICODE w = ff_convert ( w , 0 ); /* Unicode -> OEM */ if ( ! w ) { i = 0 ; break ; } /* No LFN if it could not be converted */ if ( _DF1S && w >= 0x100 ) /* Put 1st byte if it is a DBC (always false on SBCS cfg) */ p [ i ++ ] = ( TCHAR )( w >> 8 ); #endif if ( i >= fno -> lfsize - 1 ) { i = 0 ; break ; } /* No LFN if buffer overflow */ p [ i ++ ] = ( TCHAR ) w ; } } p [ i ] = 0 ; /* Terminate LFN string by a \\0 */ } #endif","title":"\u7ed3\u8bba"},{"location":"mcu/lpc1114_hex2bin.html","text":"LPC1114 \u4f7f\u7528USER\u547d\u4ee4\u5b9e\u73b0hex\u8f6cbin \u00b6 \u652f\u6301\u5148\u70e7\u540e\u710a $KARM\\BIN\\ElfDwT.exe ./xxx.axf $KARM\\BIN40\\fromelf.exe --i32 -o ./xxx.hex ./xxx.axf hex\u6587\u4ef6\u62fc\u63a5 $KARM\\BIN40\\hexcombine ./xxx1.hex ./xxx2.hex axf \u8f6c bin $KARM\\BIN40\\fromelf.exe --bin -o \"$L@L.bin\" \"#L\"","title":"LPC1114 \u4f7f\u7528USER\u547d\u4ee4\u5b9e\u73b0hex\u8f6cbin"},{"location":"mcu/lpc1114_hex2bin.html#lpc1114-userhexbin","text":"\u652f\u6301\u5148\u70e7\u540e\u710a $KARM\\BIN\\ElfDwT.exe ./xxx.axf $KARM\\BIN40\\fromelf.exe --i32 -o ./xxx.hex ./xxx.axf hex\u6587\u4ef6\u62fc\u63a5 $KARM\\BIN40\\hexcombine ./xxx1.hex ./xxx2.hex axf \u8f6c bin $KARM\\BIN40\\fromelf.exe --bin -o \"$L@L.bin\" \"#L\"","title":"LPC1114 \u4f7f\u7528USER\u547d\u4ee4\u5b9e\u73b0hex\u8f6cbin"},{"location":"misc/howtolearn.html","text":"\u5b66\u4e60\u6280\u5de7 \u00b6 \u5982\u4f55\u5feb\u901f\u5207\u5165\u4e00\u4e2a\u65b0\u7684\u5f00\u6e90\u8f6f\u4ef6 \u901a\u8fc7\u9605\u8bfbREADME\u548c\u7f51\u7ad9\u4ecb\u7ecd\uff0c\u5feb\u901f\u4e86\u89e3\u8f6f\u4ef6\u529f\u80fd \u901a\u8fc7README\u7b49\uff0c\u719f\u6089\u8f6f\u4ef6\u73af\u5883\u7684\u642d\u5efa\uff0c\u642d\u5efa\u597d\u8f6f\u4ef6\u73af\u5883 \u5feb\u901f\u4e86\u89e3\u5de5\u7a0b\u5165\u53e3\uff0c\u5982\u4f55\u7b80\u5355\u8fd0\u884c\uff0c\u5c1d\u8bd5\u8fd0\u884c\uff0c\u5efa\u7acb\u5177\u8c61\u8ba4\u8bc6 \u627e\u5230debug\u65b9\u6cd5\uff0c\u901a\u8fc7debug\u6765\u4e86\u89e3\u5de5\u7a0b\u6267\u884c\u6d41\u7a0b \u7ed3\u5408\u5177\u4f53\u95ee\u9898\uff0c\u4f7f\u7528debug\u624b\u6bb5\u6765\u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790 \u5728\u5206\u6790\u95ee\u9898\uff0c\u89e3\u51b3\u95ee\u9898\u4e2d\uff0c\u638c\u63e1\u65b0\u7684\u4e1a\u52a1\u903b\u8f91 \u53ca\u65f6\u603b\u7ed3\uff0c\u68b3\u7406\uff0c\u4f7f\u8ba4\u8bc6\u66f4\u6e05\u6670\uff0c\u4e5f\u80fd\u5b66\u4e60\u5230\u8f6f\u4ef6\u8bbe\u8ba1\u7ecf\u9a8c \u5173\u4e8e\u95ee\u9898\u5206\u6790 \u4efb\u4f55\u65f6\u5019\uff0c\u8c03\u8bd5\u624b\u6bb5\u90fd\u662f\u6700\u91cd\u8981\u7684\uff0c\u9047\u5230\u95ee\u9898\u65f6\u8981\u6df1\u5165\u53bb\u5206\u6790\uff0c\u501f\u52a9\u8c03\u8bd5\u624b\u6bb5\uff0c\u627e\u5230\u95ee\u9898\u539f\u56e0 \u8c03\u8bd5\u624b\u6bb5\u5305\u62ecgdb\uff0c\u65e5\u5fd7\u7b49\uff0c\u4e86\u89e3\u4e00\u4e2a\u6846\u67b6\u4e5f\u8981\u5c06\u8c03\u8bd5\u624b\u6bb5\u4f5c\u4e3a\u4e86\u89e3\u7684\u91cd\u8981\u90e8\u5206","title":"\u5b66\u4e60\u6280\u5de7"},{"location":"misc/howtolearn.html#_1","text":"\u5982\u4f55\u5feb\u901f\u5207\u5165\u4e00\u4e2a\u65b0\u7684\u5f00\u6e90\u8f6f\u4ef6 \u901a\u8fc7\u9605\u8bfbREADME\u548c\u7f51\u7ad9\u4ecb\u7ecd\uff0c\u5feb\u901f\u4e86\u89e3\u8f6f\u4ef6\u529f\u80fd \u901a\u8fc7README\u7b49\uff0c\u719f\u6089\u8f6f\u4ef6\u73af\u5883\u7684\u642d\u5efa\uff0c\u642d\u5efa\u597d\u8f6f\u4ef6\u73af\u5883 \u5feb\u901f\u4e86\u89e3\u5de5\u7a0b\u5165\u53e3\uff0c\u5982\u4f55\u7b80\u5355\u8fd0\u884c\uff0c\u5c1d\u8bd5\u8fd0\u884c\uff0c\u5efa\u7acb\u5177\u8c61\u8ba4\u8bc6 \u627e\u5230debug\u65b9\u6cd5\uff0c\u901a\u8fc7debug\u6765\u4e86\u89e3\u5de5\u7a0b\u6267\u884c\u6d41\u7a0b \u7ed3\u5408\u5177\u4f53\u95ee\u9898\uff0c\u4f7f\u7528debug\u624b\u6bb5\u6765\u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790 \u5728\u5206\u6790\u95ee\u9898\uff0c\u89e3\u51b3\u95ee\u9898\u4e2d\uff0c\u638c\u63e1\u65b0\u7684\u4e1a\u52a1\u903b\u8f91 \u53ca\u65f6\u603b\u7ed3\uff0c\u68b3\u7406\uff0c\u4f7f\u8ba4\u8bc6\u66f4\u6e05\u6670\uff0c\u4e5f\u80fd\u5b66\u4e60\u5230\u8f6f\u4ef6\u8bbe\u8ba1\u7ecf\u9a8c \u5173\u4e8e\u95ee\u9898\u5206\u6790 \u4efb\u4f55\u65f6\u5019\uff0c\u8c03\u8bd5\u624b\u6bb5\u90fd\u662f\u6700\u91cd\u8981\u7684\uff0c\u9047\u5230\u95ee\u9898\u65f6\u8981\u6df1\u5165\u53bb\u5206\u6790\uff0c\u501f\u52a9\u8c03\u8bd5\u624b\u6bb5\uff0c\u627e\u5230\u95ee\u9898\u539f\u56e0 \u8c03\u8bd5\u624b\u6bb5\u5305\u62ecgdb\uff0c\u65e5\u5fd7\u7b49\uff0c\u4e86\u89e3\u4e00\u4e2a\u6846\u67b6\u4e5f\u8981\u5c06\u8c03\u8bd5\u624b\u6bb5\u4f5c\u4e3a\u4e86\u89e3\u7684\u91cd\u8981\u90e8\u5206","title":"\u5b66\u4e60\u6280\u5de7"},{"location":"misc/latex.html","text":"Latex \u00b6 latex \u4e4b\u524d\u786e\u5b9e\u6ca1\u6709\u542c\u8bf4\u8fc7\uff0c\u4e3a\u4ec0\u4e48\u4f1a\u53bb\u4e86\u89e3\u8fd9\u4e2a\u4e1c\u897f\u5462\uff0c\u8fd9\u5f97\u4ece\u9047\u5230\u7684\u95ee\u9898\u8bf4\u8d77 \u80cc\u666f \u00b6 \u56e2\u961f\u521a\u7ec4\u5efa\uff0c\u5f00\u59cb\u505a\u6587\u6863\u89c4\u5212\uff0c\u8d1f\u8d23\u8fd9\u4e2a\u7684\u5c0f\u4f19\u4f34\u9009\u62e9\u4e86word\u3002\u6211word\u641e\u5f97\u4e0d6\uff0c\u603b\u662f\u8fbe\u4e0d\u5230\u8981\u6c42\uff0c \u4e8e\u662f\u6211\u5c31\u95ee\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u9009\u62e9markdown\u3002 \u5f53\u7136\uff0c\u6211\u5176\u5b9e\u662f\u5728\u95ee\u81ea\u5df1\uff0c\u5982\u679c\u8ba9\u6211\u6765\u505a\uff0c\u6211\u4f1a\u600e\u4e48\u9009\u3002word,markdown\u8fd8\u662f\u4ec0\u4e48\u5176\u4ed6\u7684\uff1f\u8fd9\u4e2a\u65f6\u5019 \u7a81\u7136\u60f3\u8d77\u6765\uff0criscv\u6307\u4ee4\u96c6\u624b\u518c\u597d\u50cf\u662f\u4e00\u4e2a\u751f\u6210\u51fa\u6765\u7684\u73a9\u610f\uff0c\u90a3\u662f\u7528\u5565\u5199\u7684\uff1f\u8fd9\u624d\u5f15\u51fa\u4e86Latex\u3002 Latex\u7684\u5e94\u7528\u573a\u666f \u00b6 \u9519\u7565\u770b\u4e86\u4e00\u4e0b\uff0clatex\u662f\u4e00\u4e2a\u6392\u7248\u5de5\u5177\uff0c\u5199\u6cd5\u5462\u4e5f\u6709\u4e00\u4e9b\u6807\u8bb0\u7684\u90e8\u5206\uff0c\u4f46\u4e86\u89e3\u4e0b\u6765\uff0c\u6bd4markdown\u66f4\u590d\u6742\uff0c \u5b83\u89e3\u51b3\u7684\u662f\u6392\u7248\u95ee\u9898\uff0c\u663e\u7136\uff0c\u5199\u5b8c\u7684\u4e1c\u897f\u6700\u7ec8\u8981\u6ce8\u91cd\u683c\u5f0f\u3002\u60f3\u5fc5riscv\u5b98\u65b9\u89c9\u5f97markdown\u8981low\u4e00\u4e9b\uff0c\u62ff\u6765\u5199\u5b98\u65b9\u624b\u518c\u8fd8\u662f\u4e0d\u591f\u683c\u3002 \u540c\u65f6\uff0c\u4e5f\u6709markdown + R \u662f\u5426\u80fd\u66ff\u4ee3 Latex \u7684\u7591\u95ee\uff0c\u6211\u7ad9\u4e0d\u80fd\u8fd9\u4e00\u961f\u3002\u6bd5\u7adf Latex \u548c Markdown \u8981\u89e3\u51b3\u7684\u95ee\u9898\u662f\u4e0d\u4e00\u6837\u7684\u3002markdown\u6709\u70b9\u513f\u50cf\u624b\u673a\uff0c\u53ef\u4ee5\u73a9\u6e38\u620f\uff0c\u53ef\u4ee5\u62cd\u7167\u62cd\u89c6\u9891\uff0c\u53ef\u4ee5\u5f55\u97f3\uff0c\u53ef\u4ee5\u770b\u7535\u89c6\u5267\u3002\u4f46\u975e\u8981\u8981\u6c42\u4e13\u4e1a\uff0c\u73a9\u6e38\u620f\u8fd8\u5f97\u662f\u7535\u8111\u6216\u8005\u6e38\u620f\u673a\uff0c\u62cd\u7167\u8fd8\u5f97\u662f\u76f8\u673a\uff0c\u62cd\u89c6\u9891\u8fd8\u662f\u4e13\u4e1a\u5f55\u50cf\u673a\uff0c\u5f55\u97f3\u5f97\u7528\u5f55\u97f3\u7b14\uff0c\u6536\u58f0\u5668\uff0c\u770b\u7535\u89c6\u5267\u8fd8\u662f\u5bb6\u5ead\u5f71\u9662\u5408\u9002\u3002markdown\u786e\u5b9e\u65b9\u4fbf\uff0c\u4f46\u66ff\u4ee3\u4e0d\u4e86\u4e13\u4e1a\u7684\u4e1c\u897f\u3002 \u6211\u7684\u9009\u62e9 \u00b6 \u4ed6\u9009\u62e9word\u7684\u7406\u7531\u4e5f\u5f88\u7b80\u5355\uff0c\u4ed6\u8ba4\u4e3aword\u683c\u5f0f\u66f4\u4e30\u5bcc\uff0c\u66f4\u6b63\u5f0f\uff0cmarkdown\u592a\u7b80\u5355\u3002\u5982\u679c\u8ba9\u6211\uff0c\u6211\u4f1a\u9009\u62e9markdown\uff0c\u65e0\u8bba\u662f\u7528confluence,\u8fd8\u662fwiki\uff0c\u8fd8\u662fgitlab\u7684doc\u670d\u52a1\uff0c\u6211\u89c9\u5f97\u90fd\u5f88\u65b9\u4fbf\uff0c\u597d\u5904\u663e\u800c\u6613\u89c1 \u7f16\u5199\u65b9\u4fbf\uff0c\u9664\u4e86\u8d34\u56fe\u9ebb\u70e6\u4e00\u70b9\u513f\uff0c\u4f46\u89c4\u5212\u597d\u56fe\u7247\u8def\u5f84\u4e5f\u8fd8\u80fd\u63a5\u53d7\uff0c\u800c\u4e14\u5982\u679c\u6709\u652f\u6301\u7684plantuml\uff0c\u4e00\u4e9b\u7b80\u5355\u7684\u56fe\u4f1a\u66f4\u597d\u7ba1\u7406 \u7248\u672c\u7ba1\u7406\u65b9\u4fbf\uff0c\u65b9\u4fbfdiff\uff0c\u770b\u6539\u52a8 \u7701\u53bb\u6392\u7248\u7684\u75db\u82e6 \u4e0d\u9700\u8981\u89c4\u5212\u6a21\u677f\uff0c\u5fc5\u7136\u6bcf\u4e2a\u4eba\u770b\u5230\u7684\u90fd\u662f\u4e00\u6837\u7684\uff0c\u5de5\u4f5c\u91cf\u5c0f","title":"Latex"},{"location":"misc/latex.html#latex","text":"latex \u4e4b\u524d\u786e\u5b9e\u6ca1\u6709\u542c\u8bf4\u8fc7\uff0c\u4e3a\u4ec0\u4e48\u4f1a\u53bb\u4e86\u89e3\u8fd9\u4e2a\u4e1c\u897f\u5462\uff0c\u8fd9\u5f97\u4ece\u9047\u5230\u7684\u95ee\u9898\u8bf4\u8d77","title":"Latex"},{"location":"misc/latex.html#_1","text":"\u56e2\u961f\u521a\u7ec4\u5efa\uff0c\u5f00\u59cb\u505a\u6587\u6863\u89c4\u5212\uff0c\u8d1f\u8d23\u8fd9\u4e2a\u7684\u5c0f\u4f19\u4f34\u9009\u62e9\u4e86word\u3002\u6211word\u641e\u5f97\u4e0d6\uff0c\u603b\u662f\u8fbe\u4e0d\u5230\u8981\u6c42\uff0c \u4e8e\u662f\u6211\u5c31\u95ee\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u9009\u62e9markdown\u3002 \u5f53\u7136\uff0c\u6211\u5176\u5b9e\u662f\u5728\u95ee\u81ea\u5df1\uff0c\u5982\u679c\u8ba9\u6211\u6765\u505a\uff0c\u6211\u4f1a\u600e\u4e48\u9009\u3002word,markdown\u8fd8\u662f\u4ec0\u4e48\u5176\u4ed6\u7684\uff1f\u8fd9\u4e2a\u65f6\u5019 \u7a81\u7136\u60f3\u8d77\u6765\uff0criscv\u6307\u4ee4\u96c6\u624b\u518c\u597d\u50cf\u662f\u4e00\u4e2a\u751f\u6210\u51fa\u6765\u7684\u73a9\u610f\uff0c\u90a3\u662f\u7528\u5565\u5199\u7684\uff1f\u8fd9\u624d\u5f15\u51fa\u4e86Latex\u3002","title":"\u80cc\u666f"},{"location":"misc/latex.html#latex_1","text":"\u9519\u7565\u770b\u4e86\u4e00\u4e0b\uff0clatex\u662f\u4e00\u4e2a\u6392\u7248\u5de5\u5177\uff0c\u5199\u6cd5\u5462\u4e5f\u6709\u4e00\u4e9b\u6807\u8bb0\u7684\u90e8\u5206\uff0c\u4f46\u4e86\u89e3\u4e0b\u6765\uff0c\u6bd4markdown\u66f4\u590d\u6742\uff0c \u5b83\u89e3\u51b3\u7684\u662f\u6392\u7248\u95ee\u9898\uff0c\u663e\u7136\uff0c\u5199\u5b8c\u7684\u4e1c\u897f\u6700\u7ec8\u8981\u6ce8\u91cd\u683c\u5f0f\u3002\u60f3\u5fc5riscv\u5b98\u65b9\u89c9\u5f97markdown\u8981low\u4e00\u4e9b\uff0c\u62ff\u6765\u5199\u5b98\u65b9\u624b\u518c\u8fd8\u662f\u4e0d\u591f\u683c\u3002 \u540c\u65f6\uff0c\u4e5f\u6709markdown + R \u662f\u5426\u80fd\u66ff\u4ee3 Latex \u7684\u7591\u95ee\uff0c\u6211\u7ad9\u4e0d\u80fd\u8fd9\u4e00\u961f\u3002\u6bd5\u7adf Latex \u548c Markdown \u8981\u89e3\u51b3\u7684\u95ee\u9898\u662f\u4e0d\u4e00\u6837\u7684\u3002markdown\u6709\u70b9\u513f\u50cf\u624b\u673a\uff0c\u53ef\u4ee5\u73a9\u6e38\u620f\uff0c\u53ef\u4ee5\u62cd\u7167\u62cd\u89c6\u9891\uff0c\u53ef\u4ee5\u5f55\u97f3\uff0c\u53ef\u4ee5\u770b\u7535\u89c6\u5267\u3002\u4f46\u975e\u8981\u8981\u6c42\u4e13\u4e1a\uff0c\u73a9\u6e38\u620f\u8fd8\u5f97\u662f\u7535\u8111\u6216\u8005\u6e38\u620f\u673a\uff0c\u62cd\u7167\u8fd8\u5f97\u662f\u76f8\u673a\uff0c\u62cd\u89c6\u9891\u8fd8\u662f\u4e13\u4e1a\u5f55\u50cf\u673a\uff0c\u5f55\u97f3\u5f97\u7528\u5f55\u97f3\u7b14\uff0c\u6536\u58f0\u5668\uff0c\u770b\u7535\u89c6\u5267\u8fd8\u662f\u5bb6\u5ead\u5f71\u9662\u5408\u9002\u3002markdown\u786e\u5b9e\u65b9\u4fbf\uff0c\u4f46\u66ff\u4ee3\u4e0d\u4e86\u4e13\u4e1a\u7684\u4e1c\u897f\u3002","title":"Latex\u7684\u5e94\u7528\u573a\u666f"},{"location":"misc/latex.html#_2","text":"\u4ed6\u9009\u62e9word\u7684\u7406\u7531\u4e5f\u5f88\u7b80\u5355\uff0c\u4ed6\u8ba4\u4e3aword\u683c\u5f0f\u66f4\u4e30\u5bcc\uff0c\u66f4\u6b63\u5f0f\uff0cmarkdown\u592a\u7b80\u5355\u3002\u5982\u679c\u8ba9\u6211\uff0c\u6211\u4f1a\u9009\u62e9markdown\uff0c\u65e0\u8bba\u662f\u7528confluence,\u8fd8\u662fwiki\uff0c\u8fd8\u662fgitlab\u7684doc\u670d\u52a1\uff0c\u6211\u89c9\u5f97\u90fd\u5f88\u65b9\u4fbf\uff0c\u597d\u5904\u663e\u800c\u6613\u89c1 \u7f16\u5199\u65b9\u4fbf\uff0c\u9664\u4e86\u8d34\u56fe\u9ebb\u70e6\u4e00\u70b9\u513f\uff0c\u4f46\u89c4\u5212\u597d\u56fe\u7247\u8def\u5f84\u4e5f\u8fd8\u80fd\u63a5\u53d7\uff0c\u800c\u4e14\u5982\u679c\u6709\u652f\u6301\u7684plantuml\uff0c\u4e00\u4e9b\u7b80\u5355\u7684\u56fe\u4f1a\u66f4\u597d\u7ba1\u7406 \u7248\u672c\u7ba1\u7406\u65b9\u4fbf\uff0c\u65b9\u4fbfdiff\uff0c\u770b\u6539\u52a8 \u7701\u53bb\u6392\u7248\u7684\u75db\u82e6 \u4e0d\u9700\u8981\u89c4\u5212\u6a21\u677f\uff0c\u5fc5\u7136\u6bcf\u4e2a\u4eba\u770b\u5230\u7684\u90fd\u662f\u4e00\u6837\u7684\uff0c\u5de5\u4f5c\u91cf\u5c0f","title":"\u6211\u7684\u9009\u62e9"},{"location":"misc/pcie.html","text":"\u57fa\u4e8elinux \u7684 PCI & PCIe \u603b\u7ebf\u5206\u6790\u603b\u7ed3 \u00b6 \u524d\u8a00 \u00b6 \u8bb2\u89e3PCI & PCIe \u7684\u4e66\u6709\u5f88\u591a\uff0c\u6211\u624b\u4e0a\u5c31\u62ff\u4e86\u4e00\u672c\u300aPCI Express \u4f53\u7cfb\u7ed3\u6784\u5bfc\u8bfb\u300b\u7684\u4e66\uff0c\u636e\u8bf4\u8fd9\u672c\u4e66\u57fa\u672c\u662f\u7ffb\u8bd1\u4e86\u5916\u6587\uff0c\u4e66\u4e0a\u867d\u7136\u5185\u5bb9\u6bd4\u8f83\u5168\u9762\uff0c\u4f46\u662f\u4e66\u90a3\u4e48\u539a\uff0c\u60f3\u8fbe\u5230\u5feb\u901f\u638c\u63e1\u7684\u76ee\u7684\u8fd8\u6709\u4e00\u5b9a\u96be\u5ea6\uff1b\u7f51\u4e0a\u4e5f\u6709\u5f88\u591a\u76f8\u5173\u535a\u5ba2\uff0c\u4f46\u662f\u666e\u904d\u5f88\u6d45\uff0c\u5185\u5bb9\u5c40\u9650\u53c8\u652f\u79bb\u7834\u788e\uff1b\u8fd9\u5c31\u662f\u5199\u8fd9\u7bc7\u603b\u7ed3\u7684\u76ee\u7684\uff0c\u4ece\u6211\u7684\u7406\u89e3\u51fa\u53d1\uff0c\u5bf9PCI & PCIe \u505a\u4e00\u4e2a\u603b\u7ed3\u3002 \u5185\u5bb9\u805a\u7126\u4e8e\u4e0b\u9762\u51e0\u4e2a\u65b9\u9762: \u4ece\u8f6f\u4ef6\u5f00\u53d1\u8005\u89d2\u5ea6\u6765\u603b\u7ed3 PCI \u57fa\u7840\u77e5\u8bc6\uff0c\u7406\u6e05\u695a\u5404\u79cd\u6982\u5ff5 \u4ece\u8f6f\u4ef6\u5f00\u53d1\u8005\u89d2\u5ea6\u6765\u603b\u7ed3 PCIe \u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u5728 PCI \u7684\u57fa\u7840\u4e0a\uff0c\u5e76\u4e14\u80fd\u591f\u4e0e PCI \u8fdb\u884c\u5bf9\u6bd4 \u57fa\u4e8elinux\uff0c\u68b3\u7406\u5185\u6838 PCIe \u9a71\u52a8\u6846\u67b6\uff0c\u521d\u59cb\u5316\u6d41\u7a0b \u5982\u4f55\u57fa\u4e8elinux\u5185\u6838\u8bbe\u5907\u9a71\u52a8\u6846\u67b6\u5199\u4e00\u4e2a\u81ea\u5df1\u7684PCIe\u9a71\u52a8 \u4ece\u8f6f\u4ef6\u5f00\u53d1\u8005\u89d2\u5ea6\u8ba4\u8bc6 PCI \u603b\u7ebf \u00b6 PCI\u603b\u7ebf\u4fe1\u53f7\u5b9a\u4e49 \u00b6 PCI\u603b\u7ebf\u62d3\u6251\u56fe \u00b6 PCI\u662f\u5e76\u884c\u603b\u7ebf\uff0c\u662f\u603b\u7ebf\u578b\u62d3\u6251\u7ed3\u6784\uff0c\u56fe\u4e2d\u7ed9\u51fa\u4e86\u4e00\u4e2a\u6bd4\u8f83\u590d\u6742\u7684PCI\u603b\u7ebf\u62d3\u6251\uff0c\u501f\u6b64\u6765\u8bf4\u660ePCI\u603b\u7ebf\u7684\u7ec4\u6210\uff0c\u521d\u59cb\u5316\u7b49\u90e8\u5206 CPU\u57df & DRAM\u57df & \u5b58\u50a8\u5668\u57df & PCI\u603b\u7ebf\u57df \u00b6 \u5728\u63cf\u8ff0PCI\u603b\u7ebf\u62d3\u6251\u4e4b\u524d\u8981\u5148\u8bb2\u6e05\u695a\u56fe\u4e2d\u7684\u8fd9\u51e0\u4e2a\u57df\uff0c\u5176\u4e2d\u6709\u4e24\u4e2a\u57df\u662f\u4e00\u5b9a\u8981\u533a\u5206\u6e05\u695a\u7684\uff0c\u90a3\u5c31\u662f\u5b58\u50a8\u5668\u57df\u4e0ePCI\u603b\u7ebf\u57df\u3002\u57df\u5e94\u8be5\u600e\u4e48\u7406\u89e3\u5462\uff1f\u6211\u7406\u89e3\u4e3a\u5730\u5740\u7a7a\u95f4\uff0cPCI\u603b\u7ebf\u6709\u5176\u72ec\u7acb\u7684\u5730\u5740\u7a7a\u95f4\uff0cSOC\u4e5f\u6709\u5176\u72ec\u7acb\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u8fd9\u4e24\u4e2a\u5730\u5740\u7a7a\u95f4\u4e0d\u80fd\u641e\u6df7\u3002 CPU\u57df DRAM\u57df PCI\u603b\u7ebf\u57df - PCI\u8bbe\u5907\u80fd\u591f\u76f4\u63a5\u4f7f\u7528\u7684\u5730\u5740\u662fPCI\u603b\u7ebf\u57df\u7684\u5730\u5740\uff0c\u5728PCI\u603b\u7ebf\u4e8b\u52a1\u4e2d\u51fa\u73b0\u7684\u5730\u5740\u4e5f\u662fPCI\u603b\u7ebf\u57df\u7684\u5730\u5740 \u5b58\u50a8\u5668\u57df - \u5904\u7406\u5668\u80fd\u591f\u76f4\u63a5\u4f7f\u7528\u7684\u5730\u5740\u662f\u5b58\u50a8\u5668\u57df\u7684\u5730\u5740 CPU\u6240\u80fd\u8bbf\u95ee\u7684PCI\u603b\u7ebf\u5730\u5740\u4e00\u5b9a\u5728\u5b58\u50a8\u5668\u57df\u4e2d\u6709\u5730\u5740\u6620\u5c04\uff1b PCI\u8bbe\u5907\u80fd\u591f\u8bbf\u95ee\u7684\u5b58\u50a8\u5668\u57df\u7684\u5730\u5740\u4e5f\u4e00\u5b9a\u5728PCI\u603b\u7ebf\u57df\u4e2d\u5177\u6709\u5730\u5740\u6620\u5c04\u3002 PCI\u603b\u7ebf\u62d3\u6251\u7ec4\u6210 \u00b6 PCI\u603b\u7ebf\u62d3\u6251\u4e3b\u8981\u7531\u4e09\u90e8\u5206\u6784\u6210\uff1a HOST\u4e3b\u6865 PCI\u603b\u7ebf PCI\u8bbe\u5907 HOST\u4e3b\u6865 \u00b6 HOST\u4e3b\u6865\u7528\u6765\u9694\u79bb\u5904\u7406\u5668\u7cfb\u7edf\u7684\u5b58\u50a8\u5668\u57df\u4e0e\u5904\u7406\u5668\u7cfb\u7edf\u7684PCI\u603b\u7ebf\u57df\uff0c\u7ba1\u7406PCI\u603b\u7ebf\u57df\uff0c\u5b8c\u6210\u5904\u7406\u5668\u4e0ePCI\u8bbe\u5907\u95f4\u7684\u6570\u636e\u4ea4\u6362\u3002\u8fd9\u4e5f\u662f\u6211\u4eec\u4e3a\u4ec0\u4e48\u4e00\u4e0a\u6765\u5c31\u8bf4\u8981\u533a\u5206\u5b58\u50a8\u5668\u57df\u4e0ePCI\u603b\u7ebf\u57df\u4e86\uff0c\u56e0\u4e3aHOST\u4e3b\u6865\u7684\u4f5c\u7528\u4e4b\u4e00\u5c31\u662f\u9694\u79bb\u8fd9\u4e24\u4e2a\u57df\u3002\u56fe\u4e2d\u7684\u62d3\u6251\u5e26\u6709\u4e24\u4e2aHOST\u4e3b\u6865\uff0cHOST\u4e3b\u6865X\u4e0eHOST\u4e3b\u6865Y. PCI\u603b\u7ebf \u00b6 PCI\u603b\u7ebf\u7531HOST\u4e3b\u6865\u6216\u8005PCI\u6865\u7ba1\u7406\uff0c\u7528\u6765\u8fde\u63a5\u5404\u7c7b\u8bbe\u5907\u3002\u56fe\u4e2d\u7ed9\u51fa\u4e86PCI\u603b\u7ebf0\uff0c1\uff0c2\uff0c3\uff0c4. HOST\u4e3b\u6865\u51fa\u7684\u603b\u7ebf\u7f16\u53f7\u53f7PCI\u603b\u7ebf0\uff0c\u5728\u4e00\u68f5PCI\u603b\u7ebf\u6811\u4e2d\u6709\u591a\u5c11\u4e2aPCI\u6865\uff08\u5305\u542bHOST\u4e3b\u6865\uff09,\u5c31\u6709\u591a\u5c11\u6761PCI\u603b\u7ebf\u3002 PCI\u8bbe\u5907 \u00b6 \u5728PCI\u603b\u7ebf\u4e2d\u6709\u4e09\u7c7b\u8bbe\u5907\uff1aPCI\u4e3b\u8bbe\u5907\u3001PCI\u4ece\u8bbe\u5907\u3001PCI\u6865\u8bbe\u5907\u3002 PCI\u4e3b\u8bbe\u5907 - \u53ef\u4ee5\u901a\u8fc7\u603b\u7ebf\u4ef2\u88c1\u83b7\u5f97PCI\u603b\u7ebf\u4f7f\u7528\u6743\uff0c\u4e3b\u52a8\u5411\u5176\u4ed6PCI\u8bbe\u5907\u6216\u8005\u4e3b\u5b58\u50a8\u5668\u53d1\u8d77\u8bfb\u5199\u8bf7\u6c42\uff1b PCI\u4ece\u8bbe\u5907 - \u53ea\u80fd\u88ab\u52a8\u7684\u63a5\u6536\u6765\u81eaHOST\u4e3b\u6865\u6216\u8005\u5176\u4ed6PCI\u8bbe\u5907\u7684\u8bfb\u5199\u8bf7\u6c42\uff1b PCI\u6865\u8bbe\u5907 - \u4e3b\u8981\u662f\u7ba1\u7406\u4e0b\u6e38\u7684PCI\u8bbe\u5907\uff0c\u5e76\u8f6c\u53d1\u4e0a\u4e0b\u6e38\u4e4b\u95f4\u7684\u603b\u7ebf\u4e8b\u52a1\u3002PCI\u6865\u53ef\u4ee5\u6269\u5c55PCI\u603b\u7ebf\uff0c\u4f46\u662f\u4e0d\u80fd\u6269\u5c55PCI\u603b\u7ebf\u57df\uff0c\u6bd4\u5982\u5f53\u524d\u7cfb\u7edf\u4f7f\u7528\u7684\u662f32bit\u7684PCI\u603b\u7ebf\u5730\u5740\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7cfb\u7edf\u7684PCI\u603b\u7ebf\u57df\u7684\u5730\u5740\u7a7a\u95f4\u5c31\u662f4G,\u4e0e\u6865\u7684\u4e2a\u6570\u65e0\u5173\u3002 \u4e00\u4e2aPCI\u8bbe\u5907\u65e2\u53ef\u4ee5\u662f\u4e3b\u8bbe\u5907\u4e5f\u53ef\u4ee5\u662f\u4ece\u8bbe\u5907\uff0c\u4f46\u540c\u4e00\u65f6\u523b\u53ea\u80fd\u6709\u4e00\u79cd\u89d2\u8272\u3002 PCI\u8bbe\u5907\u7684\u914d\u7f6e\u7a7a\u95f4 \u00b6 \u4e0a\u8ff0\u7684\u63cf\u8ff0\u8bb2\u4e86PCI\u603b\u7ebf\u7684\u62d3\u6251\uff0c\u62d3\u6251\u4e2d\u6bcf\u4e00\u4e2a\u90e8\u5206\u7684\u529f\u80fd\u3002\u90a3\u4e48\u63a5\u4e0b\u6765\u5c31\u4f1a\u6709\u7591\u95ee\uff1a\u6211\u4eec\uff08CPU\uff09\u662f\u5982\u4f55\u8bbf\u95eePCI\u8bbe\u5907\u7684\uff1f \u77e5\u9053\u4e86PCI\u8bbe\u5907\u4e0eCPU\u5982\u4f55\u4ea4\u4e92\uff0c\u6211\u4eec\u624d\u80fd\u53bb\u5199\u9a71\u52a8\u4ee3\u7801\uff0c\u6240\u4ee5\u8fd9\u4e2a\u95ee\u9898\u8981\u641e\u6e05\u695a\u3002 CPU\u8bbf\u95eePCI\u8bbe\u5907\u7684**\u914d\u7f6e\u7a7a\u95f4**\u4f7f\u7528\u7684\u662f***ID\u5bfb\u5740***\u65b9\u5f0f\uff1bCPU\u8bbf\u95eePCI\u8bbe\u5907\u7684**\u5b58\u50a8\u5668**\u548c**IO\u5730\u5740\u7a7a\u95f4**\u91c7\u7528\u7684\u662f***\u5730\u5740\u5bfb\u5740***\u65b9\u5f0f \u4e00\u4e0b\u5b50\u51fa\u73b0\u4e86\u8fd9\u4e48\u591a\u540d\u8bcd\uff0c\u914d\u7f6e\u7a7a\u95f4\u3001ID\u5bfb\u5740\u3001\u5b58\u50a8\u5668\u5730\u5740\u7a7a\u95f4\u3001IO\u5730\u5740\u7a7a\u95f4\uff0c\u4e00\u4e2a\u4e2a\u8bb2\u6e05\u695a\u5c31\u77e5\u9053PCI\u5230\u5e95\u662f\u5982\u4f55\u8bbf\u95ee\u7684\u4e86\u3002 \u731c\u6d4b\u7684\u4e3a\u4ec0\u4e48\u8981\u6709\u914d\u7f6e\u7a7a\u95f4 \u00b6 CPU\u8bbf\u95eePCI\u8bbe\u5907\u662f\u901a\u8fc7\u5730\u5740\u6620\u5c04\u8fdb\u884c\u7684\uff0cPCI\u8bbe\u5907\u5185\u90e8\u7684\u5730\u5740\u7a7a\u95f4\uff08PCI\u603b\u7ebf\u57df\u7684\u4e00\u90e8\u5206\uff09\u4f1a\u901a\u8fc7\u4e00\u5b9a\u65b9\u5f0f\u6620\u5c04\u5230SOC\u80fd\u591f\u8bbf\u95ee\u5230\u7684\u4e00\u6bb5\u5730\u5740\u7a7a\u95f4\u4e2d\uff08\u5b58\u50a8\u5668\u57df\u7684\u4e00\u90e8\u5206\uff09\uff0c\u501f\u52a9DMA\u6765\u5b9e\u73b0\u901a\u4fe1\u3002\u8fd9\u4e2a\u5730\u5740\u6620\u5c04\u5173\u7cfb\u603b\u8981\u6709\u4e2a\u5730\u65b9\u8bb0\u5f55\u5427\uff1b\u8fd8\u6709\u63d2\u5165\u4e00\u4e2aPCI\u8bbe\u5907\uff0c\u603b\u8981\u77e5\u9053\u5b83\u7684\u4e00\u4e9b\u57fa\u672c\u4fe1\u606f\u5427\uff0c\u6bd4\u5982\u5382\u5bb6\u4fe1\u606f\uff0c\u7248\u672c\u4fe1\u606f......\uff1b\u63d2\u5165\u7684PCI\u8bbe\u5907\u662f\u54ea\u4e00\u79cd\u5f97\u6709\u80fd\u533a\u5206\u7684\u70b9\u5427\u3002\u4e00\u65e6\u9047\u5230\u8fd9\u79cd\u95ee\u9898\uff0c\u5927\u591a\u6570\u89e3\u51b3\u65b9\u6848\u90fd\u662f\u89c4\u5b9a\u4e00\u4e2a\u7edf\u4e00\u7684\u683c\u5f0f\uff0c\u5927\u5bb6\u90fd\u6309\u7167\u8fd9\u4e2a\u683c\u5f0f\u6765\u586b\u5199\uff0c\u800c\u4e14\u8981\u63d0\u4f9b\u4e00\u79cd\u901a\u7528\u7684\u65b9\u5f0f\u80fd\u591f\u83b7\u53d6\u5230\u8fd9\u4e2a\u683c\u5f0f\u7684\u6570\u636e\uff0c\u8fd9\u79cd\u901a\u7528\u6027\u5fc5\u987b\u80fd\u591f\u5c4f\u853dPCI\u8bbe\u5907\u95f4\u7684\u5dee\u5f02\u3002\u4e8e\u662f\u4e4e\u5c31\u6709\u4e86\u914d\u7f6e\u7a7a\u95f4\u8fd9\u4e48\u4e2a\u73a9\u610f\u3002 PCI\u914d\u7f6e\u7a7a\u95f4\u7684\u5206\u7c7b \u00b6 PCI\u8bbe\u5907\u90fd\u6709\u72ec\u7acb\u7684\u914d\u7f6e\u7a7a\u95f4\uff0c\u5206\u4e3a\u4e09\u79cd\u7c7b\u578b\uff1a PCI Agent \u4f7f\u7528\u7684\u914d\u7f6e\u7a7a\u95f4 PCI\u6865\u4f7f\u7528\u7684\u914d\u7f6e\u7a7a\u95f4 Cardbus\u6865\u7247\u4f7f\u7528\u7684\u914d\u7f6e\u7a7a\u95f4 PCI Agent\u914d\u7f6e\u7a7a\u95f4\u548cPCI\u6865\u914d\u7f6e\u7a7a\u95f4\u9700\u8981\u91cd\u70b9\u4e86\u89e3\uff0cCardbus\u8fd9\u4e2a\u6211\u4e5f\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\u9b3c\u3002 PCI Agent \u914d\u7f6e\u7a7a\u95f4 \u00b6 Device ID \u548c Verdor ID. \u5382\u5546\u5206\u914d\u7684\uff0c\u53ea\u8bfb\u3002 Revision ID. \u8bb0\u5f55\u4e86PCI\u8bbe\u5907\u7684\u7248\u672c\u53f7\uff0c\u53ea\u8bfb Class Code. \u8bb0\u5f55\u4e86PCI\u8bbe\u5907\u7684\u5206\u7c7b\uff0c\u53ea\u8bfb\u3002\u5206\u4e3abase class code\uff08\u628a\u8bbe\u5907\u5206\u4e3a\u663e\u5361\u3001\u7f51\u5361\u3001PCI\u6865\u7b49\u8bbe\u5907\uff09\u3001sub class code\uff08\u8fdb\u884c\u7ec6\u5206\uff09\u3001interface\uff08\u5b9a\u4e49\u7f16\u7a0b\u63a5\u53e3\uff09 \u4e09\u4e2a\u5b57\u6bb5\u3002\u8fd9\u4e2a\u5bc4\u5b58\u5668\u53ef\u4f9b\u7cfb\u7edf\u8f6f\u4ef6\u8bc6\u522b\u5f53\u524dPCI\u8bbe\u5907\u7684\u5206\u7c7b\u3002 Header Type. \u8868\u793a\u5f53\u524d\u914d\u7f6e\u7a7a\u95f4\u7c7b\u578b\uff0c\u53ea\u8bfb\u3002 Cache Line Size. HOST\u5904\u7406\u5668\u4f7f\u7528\u7684Cache\u884c\u957f\u5ea6\uff0c\u7531\u7cfb\u7edf\u8f6f\u4ef6\u8bbe\u7f6e\u3002\uff08\u5bf9PCIe\u65e0\u610f\u4e49\uff09 Subsystem ID \u548c subSystem Vendor ID. \u5f53\u4f7f\u7528Device ID \u548c Vendor ID \u65e0\u6cd5\u533a\u5206\u7684\u60c5\u51b5 Expansion ROM base address. \u8bb0\u5f55\u4e86ROM\u7a0b\u5e8f\u7684\u57fa\u5730\u5740\u3002\u6709\u4e9bPCI\u8bbe\u5907\u5728\u5904\u7406\u5668\u8fd8\u6ca1\u6709\u8fd0\u884c\u64cd\u4f5c\u7cfb\u7edf\u4e4b\u524d\uff0c\u5c31\u9700\u8981\u5b8c\u6210\u57fa\u672c\u7684\u521d\u59cb\u5316\u8bbe\u7f6e\uff0cPCI\u8bbe\u5907\u63d0\u4f9b\u4e86\u4e00\u6bb5ROM\u7a0b\u5e8f\uff0c\u5904\u7406\u5668\u5728\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\u5c06\u8fd0\u884c\u8fd9\u6bb5ROM\u7a0b\u5e8f\uff0c\u521d\u59cb\u5316\u8fd9\u4e9bPCI\u8bbe\u5907\u3002 Capabilities Pointer. \u5728PCI\u8bbe\u5907\u4e2d\uff0c\u5bc4\u5b58\u5668\u662f\u53ef\u9009\u7684\uff0c\u5728PCI-X\u548cPCIe\u8bbe\u5907\u4e2d\u5fc5\u987b\u652f\u6301\u3002 Interrupt Line. \u7cfb\u7edf\u8f6f\u4ef6\u5bf9PCI\u8bbe\u5907\u8fdb\u884c\u914d\u7f6e\u7684\u65f6\u5019\u5199\u5165\u7684\uff0c\u8bb0\u5f55\u5f53\u524dPCI\u8bbe\u5907\u4f7f\u7528\u7684\u4e2d\u65ad\u5411\u91cf\u53f7\uff0c\u5982\u679c\u4e0d\u9002\u75288259A\u4e2d\u65ad\u63a7\u5236\u5668\uff0c\u8fd9\u4e2a\u5bc4\u5b58\u5668\u6ca1\u6709\u610f\u4e49 Interrupt Pin. Base Address Register 0 ~ 5. \u4fdd\u5b58PCI\u8bbe\u5907\u4f7f\u7528\u7684\u5730\u5740\u7a7a\u95f4\u7684\u57fa\u5730\u5740\uff0c\u4fdd\u5b58\u7684\u662f\u8be5\u8bbe\u5907\u5728PCI\u603b\u7ebf\u57df\u4e2d\u7684\u5730\u5740\u3002 \u7edd\u5927\u591a\u6570PCI\u8bbe\u5907\u5c06PCI\u914d\u7f6e\u4fe1\u606f\u5b58\u653e\u5728E2PROM\u4e2d\uff0cPCI\u8bbe\u5907\u8fdb\u884c\u4e0a\u7535\u521d\u59cb\u5316\uff0c\u5c06E2PROM\u4e2d\u7684\u4fe1\u606f\u8bfb\u5230PCI\u8bbe\u5907\u7684\u914d\u7f6e\u7a7a\u95f4\u4e2d\u4f5c\u4e3a\u521d\u59cb\u503c\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u7531\u786c\u4ef6\u5b8c\u6210\u3002 PCI\u6865\u914d\u7f6e\u7a7a\u95f4 \u00b6 PCI\u6865\u7684\u914d\u7f6e\u7a7a\u95f4\u5728\u7cfb\u7edf\u8f6f\u4ef6\u904d\u5386PCI\u603b\u7ebf\u6811\u65f6\u8fdb\u884c\u914d\u7f6e\uff0c\u7cfb\u7edf\u8f6f\u4ef6\u4e0d\u9700\u8981\u4e13\u95e8\u7684\u9a71\u52a8\u7a0b\u5e8f\u8bbe\u7f6ePCI\u6865\u7684\u4f7f\u7528\u65b9\u6cd5\uff0cPCI\u6865\u4e00\u822c\u6765\u8bb2\u662f\u900f\u660e\u7684\u3002 PCI\u6865\u6709\u4e24\u7ec4BAR\u5bc4\u5b58\u5668\uff0c\u5982\u679cPCI\u6865\u672c\u8eab\u4e0d\u5b58\u5728\u79c1\u6709\u5bc4\u5b58\u5668\uff0c\u90a3\u4e48BAR\u5bc4\u5b58\u5668\u53ef\u4ee5\u4e0d\u4f7f\u7528(\u900f\u660e\u6865)\uff0c\u521d\u59cb\u5316\u4e3a0. PCI Bridge \u7684\u914d\u7f6e\u7a7a\u95f4\u76f8\u6bd4\u8f83 PCI Agent \u7684\u914d\u7f6e\u7a7a\u95f4\uff0c\u591a\u4e86 Bus Number \u5bc4\u5b58\u5668 Subordinate Bus Number \u5bc4\u5b58\u5668\u5b58\u653e\u5f53\u524dPCI\u5b50\u6811\u4e2d\u7f16\u53f7\u6700\u5927\u7684PCI\u603b\u7ebf\u53f7 Secondary Bus Number \u5b58\u653e\u5f53\u524dPCI\u6865Secondary Bus\u4f7f\u7528\u7684\u603b\u7ebf\u53f7\uff0c\u4e5f\u662f\u8be5\u5b50\u6811\u4e2d\u7f16\u53f7\u6700\u5c0f\u7684\u603b\u7ebf\u53f7 Primary Bus Number \u5b58\u653e\u8be5PCI\u6865\u4e0a\u6e38\u7684PCI\u603b\u7ebf\u53f7 PCI\u603b\u7ebf\u6811Bus\u53f7\u7684\u521d\u59cb\u5316 \u00b6 PCI\u6865\u7684\u914d\u7f6e\u7a7a\u95f4\u4e2d\u6709\u4e09\u4e2a Bus Number \u5bc4\u5b58\u5668\uff0c\u8fd9\u4e09\u4e2a\u5bc4\u5b58\u5668\u662f\u9700\u8981\u8f6f\u4ef6\u5728\u521d\u59cb\u5316PCI\u603b\u7ebf\u7684\u65f6\u5019\u586b\u5199\u7684\uff0c\u4e5f\u5c31\u662fPCI\u603b\u7ebf\u6811Bus\u53f7\u7684\u521d\u59cb\u5316\u3002 \u7cfb\u7edf\u8f6f\u4ef6\u5728\u904d\u5386\u5f53\u524dPCI\u603b\u7ebf\u6811\u65f6\uff0c\u9700\u8981\u9996\u5148\u5bf9\u8fd9\u4e9bPCI\u603b\u7ebf\u8fdb\u884c\u7f16\u53f7\uff0c\u5373\u521d\u59cb\u5316PCI\u6865\u7684Primary\u3001Secondary\u3001Subordinate Bus Number \u5bc4\u5b58\u5668\u3002\u7f16\u53f7\u65f6\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u7b97\u6cd5\u3002\u518d\u6b21\u5f3a\u8c03\uff0c\u5728\u4e00\u68f5PCI\u603b\u7ebf\u6811\u4e2d\u6709\u591a\u5c11\u4e2aPCI\u6865\uff08\u5305\u542bHOST\u4e3b\u6865\uff09,\u5c31\u6709\u591a\u5c11\u6761PCI\u603b\u7ebf\u3002 \u5728PCI\u603b\u7ebf\u62d3\u6251\u56fe\u4e2d\uff0cHOST\u4e3b\u6865X\u76f4\u63a5\u51fa\u7684PCI\u603b\u7ebf\u5c31\u662fPCI Bus 0 HOST\u4e3b\u6865\u626b\u63cf\uff08\u8fd9\u4e2a\u626b\u63cf\u5177\u4f53\u662f\u600e\u6837\u4e00\u79cd\u52a8\u4f5c\uff1f\uff09PCI\u603b\u7ebf0\u4e0a\u7684\u8bbe\u5907\uff0c\u7cfb\u7edf\u8f6f\u4ef6\u9996\u5148\u5ffd\u7565\u8fd9\u6761\u603b\u7ebf\u4e0a\u7684\u6240\u6709PCI Agent, HOST\u4e3b\u6865\u5c31\u53d1\u73b0\u4e86PCI\u6865\uff0c\u547d\u540d\u4e3aX1, \u628a\u8fd9\u4e2a\u6865\u51fa\u7684\u603b\u7ebf\u5b9a\u4e3aPCI Bus 1, \u5c06PCI\u6865X1\u7684Primary Bus Number \u8d4b\u4e3a0\uff0c \u56e0\u4e3a\u8fd9\u4e2a\u6865\u662f\u63a5\u5728PCI\u603b\u7ebf0\u4e0a\u7684\uff0c\u628aSecondary Bus Number \u5bc4\u5b58\u5668\u8d4b\u503c\u4e3a1\uff0c\u56e0\u4e3a\u5b83\u5f15\u51fa\u7684PCI\u603b\u7ebf\u4e3aBus 1; \u7ee7\u7eed\u626b\u63cfPCI Bus 1\uff0c\u53c8\u53d1\u73b0\u4e86\u4e00\u4e2a\u6865\uff0c\u547d\u540d\u4e3aPCI\u6865X2, \u628a\u8fd9\u4e2a\u6865\u51fa\u7684\u603b\u7ebf\u5b9a\u4e3aPCI Bus 2, \u5c06PCI\u6865X2\u7684Primary Bus Number\u4e3a1\uff0cSecondary Bus Number\u4e3a2\uff1b \u7ee7\u7eed\u626b\u63cfPCI Bus 2\uff0c\u53d1\u73b0\u4e86\u65b0\u6865\uff0c\u547d\u540d\u4e3aPCI\u6865X3\uff0c\u5c06\u8fd9\u4e2a\u6865\u51fa\u7684\u603b\u7ebf\u5b9a\u4e3aPCI Bus 3, \u5c06PCI\u6865X3\u7684Primary Bus Number\u8bbe\u7f6e\u4e3a2\uff0cSecondary Bus Number\u8bbe\u7f6e\u4e3a3\uff1b \u7ee7\u7eed\u626b\u63cfPCI Bus 3\uff0c\u6ca1\u6709\u53d1\u73b0PCI\u6865\uff0c\u4e5f\u5c31\u662f\u8bf4PCI\u603b\u7ebf3\u4e0b\u9762\u4e0d\u4f1a\u6709\u65b0\u7684\u603b\u7ebf\u4e86\uff0c\u5c31\u628aPCI\u6865X3\u7684Subordinate Bus Number \u8d4b\u503c\u4e3a3\uff0c\u5e76\u4e14\u56de\u9000\u5230PCI Bus 2; \u7ee7\u7eed\u626b\u63cfPCI Bus 2\uff0c\u6ca1\u6709\u53d1\u73b0\u9664PCI\u6865X3\u4e4b\u5916\u7684\u6865\uff0c\u628aPCI\u6865X2\u7684Subordinate Bus Number \u4e5f\u8d4b\u503c\u4e3a3\uff0c\u5e76\u56de\u9000\u5230PCI Bus 1; \u7ee7\u7eed\u626b\u63cfPCI Bus 1, \u6ca1\u6709\u53d1\u73b0\u9664PCI\u6865X2\u4e4b\u5916\u7684\u6865\uff0c\u628aPCI\u6865X1\u7684Subordinate Bus Number \u4e5f\u8d4b\u503c\u4e3a3\uff0c\u5e76\u56de\u9000\u5230PCI Bus 0; \u7ee7\u7eed\u626b\u63cfPCI Bus 0, \u53d1\u73b0\u4e86\u65b0\u6865\uff0c\u547d\u540d\u4e3aPCI\u6865X4\uff0c\u5c06PCI\u6865X4\u7684\u51fa\u7684\u603b\u7ebf\u5b9a\u4e3aPCI Bus 4, \u5c06PCI\u6865X4\u7684Primary Bus Number\u8bbe\u7f6e\u4e3a0\uff0cSecondary Bus Number\u8bbe\u7f6e\u4e3a4\uff1b \u7ee7\u7eed\u626b\u63cfPCI Bus 4\uff0c\u6ca1\u6709\u53d1\u73b0\u65b0\u6865\uff0c\u628aPCI\u6865X4\u7684Subordinate Bus Number \u8d4b\u503c\u4e3a4\uff0c \u5e76\u56de\u9000\u5230PCI Bus 0; \u7ee7\u7eed\u626b\u63cfPCI Bus 0, \u6ca1\u6709\u53d1\u73b0\u65b0\u6865\uff0c\u7ed3\u675f\u904d\u5386\uff0c\u5b8c\u6210Bus\u53f7\u5206\u914d\u3002 PCI\u8bbe\u5907\u914d\u7f6e\u7a7a\u95f4\u7684\u8bbf\u95ee\u673a\u5236 \u00b6 ID\u5bfb\u5740 \u00b6 HOST\u4e3b\u6865\u901a\u8fc7\u914d\u7f6e\u8bfb\u5199\u603b\u7ebf\u4e8b\u52a1\uff08\u8fd9\u662f\u603b\u7ebf\u4e8b\u52a1\u7684\u4e00\u79cd\uff0c\u4ec0\u4e48\u662f\u603b\u7ebf\u4e8b\u52a1\uff1f\u8fd9......\uff09\u8bbf\u95ee\u914d\u7f6e\u7a7a\u95f4\u3002 \u914d\u7f6e\u8bfb\u5199\u603b\u7ebf\u4e8b\u52a1\u901a\u8fc7ID\u53f7\u8fdb\u884c\u5bfb\u5740\u3002ID\u53f7\u7531\u603b\u7ebf\u53f7\u3001\u8bbe\u5907\u53f7\u3001\u529f\u80fd\u53f7\u7ec4\u6210\u3002 \u603b\u7ebf\u53f7\uff1a\u5728\u4e00\u68f5PCI\u603b\u7ebf\u6811\u4e2d\uff0c\u6709\u51e0\u4e2aPCI\u6865\u5c31\u6709\u51e0\u6761PCI\u603b\u7ebf\uff08\u5305\u542bHOST\u4e3b\u6865\uff09\uff1b\u603b\u7ebf\u53f7\u7531\u7cfb\u7edf\u8f6f\u4ef6\u51b3\u5b9a\u3002\u7cfb\u7edf\u8f6f\u4ef6\u4f7f\u7528DFS(\u6df1\u5ea6\u4f18\u5148)\u7b97\u6cd5\u626b\u63cfPCI\u603b\u7ebf\u6811\u4e0a\u7684\u6240\u6709PCI\u603b\u7ebf\uff0c\u5e76\u8fdb\u884c\u7f16\u53f7\u3002 \u8bbe\u5907\u53f7\uff1a\u7531PCI\u8bbe\u5907\u7684IDSEL\u4fe1\u53f7\u4e0ePCI\u603b\u7ebf\u5730\u5740\u7ebf\u7684\u8fde\u63a5\u5173\u7cfb\u786e\u5b9a\u3002 \u529f\u80fd\u53f7\uff1a\u4e0ePCI\u8bbe\u5907\u7684\u5177\u4f53\u8bbe\u8ba1\u76f8\u5173\uff0c\u4e00\u4e2aPCI\u8bbe\u5907\u4e2d\u6700\u591a\u67098\u4e2a\u529f\u80fd\u53f7\uff0c\u6bcf\u4e2a\u529f\u80fd\u8bbe\u5907\u6709\u81ea\u5df1\u7684\u914d\u7f6e\u7a7a\u95f4 HOST\u4e3b\u6865\u4f7f\u7528\u5bc4\u5b58\u5668\u53f7\u6765\u8bbf\u95eePCI\u8bbe\u5907\u914d\u7f6e\u7a7a\u95f4\u7684\u67d0\u4e2a\u5bc4\u5b58\u5668\u3002 \u914d\u7f6e\u8bf7\u6c42 \u00b6 PCI\u603b\u7ebf\u6709\u4e24\u7c7b\u914d\u7f6e\u8bf7\u6c42\uff1a Type 00h \u914d\u7f6e\u8bf7\u6c42. \u8bbf\u95ee\u4e0eHOST\u4e3b\u6865\u6216\u8005PCI\u6865\u76f4\u63a5\u76f8\u8fde\u7684PCI Agent\u6216\u8005PCI\u6865 Type 01h \u914d\u7f6e\u8bf7\u6c42. \u8bbf\u95ee\u6ca1\u6709\u76f4\u63a5\u76f8\u8fde\u7684PCI Agent \u6216\u8005PCI\u6865 \u4ee5x86\u5904\u7406\u5668\u6765\u8bb2\uff0cPCI\u63a7\u5236\u5668\u63d0\u4f9b\u4e86CONFIG_ADDRESS\u5bc4\u5b58\u5668\u548cCONFIG_DATA\u5bc4\u5b58\u5668\uff0c\u5c31\u662f\u901a\u8fc7\u8fd9\u4e24\u4e2a\u5bc4\u5b58\u5668\u6765\u63a7\u5236\u914d\u7f6e\u8bfb\u5199\u603b\u7ebf\u4e8b\u52a1 CONFIG_ADDRESS\u5bc4\u5b58\u5668\u4e0eType 01h\u914d\u7f6e\u8bf7\u6c42\u7684\u5bf9\u5e94\u5173\u7cfb CONFIG_ADDRESS\u5bc4\u5b58\u5668\u4e0eType 00h\u914d\u7f6e\u8bf7\u6c42\u7684\u5bf9\u5e94\u5173\u7cfb \u5728PCI\u603b\u7ebf\u4e2d\uff0c\u53ea\u6709PCI\u6865\u80fd\u591f\u63a5\u6536Type 01h \u914d\u7f6e\u8bf7\u6c42\uff0cType 01h \u914d\u7f6e\u8bf7\u6c42\u4e0d\u80fd\u76f4\u63a5\u53d1\u5411\u6700\u7ec8\u7684PCI Agent\u8bbe\u5907\uff0c\u800c\u53ea\u80fd\u7531PCI\u6865\u5c06\u5176\u8f6c\u6362\u4e3aType 01h \u8bf7\u6c42\u7ee7\u7eed\u53d1\u5411\u5176\u4ed6PCI\u6865\u6216\u8005\u8f6c\u6362\u4e3aType 00h \u914d\u7f6e\u8bf7\u6c42\u53d1\u5411PCI Agent \u8bbe\u5907 \u5728PCI\u603b\u7ebf\u62d3\u6251\u4e2d\uff0c\u52a0\u5165\u8981\u8bbf\u95eePCI\u8bbe\u590701 HOST\u5904\u7406\u5668\u8bbf\u95eePCI01\u7684\u914d\u7f6e\u7a7a\u95f4\uff0c\u53d1\u73b0PCI\u8bbe\u590701\u4e0eHOST\u4e3b\u6865\u76f4\u63a5\u76f8\u8fde\uff0c \u6240\u4ee5\u5c06\u76f4\u63a5\u4f7f\u7528Type 00h \u914d\u7f6e\u8bf7\u6c42\u8bbf\u95ee\u8be5\u8bbe\u5907\u7684\u914d\u7f6e\u7a7a\u95f4 \u5c06CONFIG_ADDRESS \u5bc4\u5b58\u5668\u7684Enabled\u4f4d\u7f6e1\uff0c Bus Number\u53f7\u7f6e\u4e3a0\uff0c\u5e76\u5bf9\u8be5\u5bc4\u5b58\u5668\u7684Device, Function, Register Number\u5b57\u6bb5\u8d4b\u503c \u5f53HOST\u5904\u7406\u5668\u5bf9CONFIG_DATA\u5bc4\u5b58\u5668\u8bbf\u95ee\u65f6\uff0c HOST\u4e3b\u6865\u5c06\u5b58\u653e\u5728CONFIG_ADDRESS\u5bc4\u5b58\u5668\u4e2d\u7684\u6570\u503c\u8f6c\u6362\u4e3aType 00h\u914d\u7f6e\u8bf7\u6c42\uff0c \u5e76\u53d1\u9001\u5230PCI\u603b\u7ebf0 PCI01\u8bbe\u5907\u63a5\u6536\u5230\u8fd9\u4e2aType 00h\u914d\u7f6e\u8bf7\u6c42\uff0c\u8fdb\u884c\u4ea4\u4e92\u3002 \u5728PCI\u603b\u7ebf\u62d3\u6251\u4e2d\uff0c\u5047\u5982\u8981\u8bbf\u95eePCI\u8bbe\u590731 HOST\u5904\u7406\u5668\u8bbf\u95eePCI\u8bbe\u590731\u7684\u914d\u7f6e\u7a7a\u95f4\uff0c\u9700\u8981\u901a\u8fc7HOST\u4e3b\u6865\u3001PCI\u6865X1\u3001X2\u548cX3\uff0c\u6700\u5230\u8fbePCI31\u3002 \u9996\u5148\u5c06CONFIG_ADDRESS\u7684 Bus Number \u7f6e\u4e3a3\uff1b \u7136\u540e\u5f53HOST\u5904\u7406\u5668\u5bf9CONFIG_DATA\u5bc4\u5b58\u5668\u8fdb\u884c\u8bfb\u5199\u8bbf\u95ee\u65f6\uff0cHOST\u4e3b\u6865\u5c06Type 01h \u7684\u914d\u7f6e\u8bf7\u6c42\u53d1\u9001\u5230PCI\u603b\u7ebf0\uff1b PCI Bus 0\u4e0a\u7684PCI\u6865X1\u63a5\u6536\u914d\u7f6e\u8bf7\u6c42\u3002 PCI\u6865X1\u7684Secondary Bus Number\u4e3a1\uff0cSubordinate Bus Number\u4e3a3\uff0c 1 < Bus Number <=3, \u6240\u4ee5PCI\u6865X1\u63a5\u6536\u6765\u81eaPCI\u603b\u7ebf0\u7684Type 01h\u914d\u7f6e\u8bf7\u6c42\uff0c\u5e76\u5c06\u8fd9\u4e2a\u914d\u7f6e\u8bf7\u6c42\u53d1\u9001\u5230PCI Bus 1\uff1b PCI Bus 1\u4e0a\u7684PCI\u6865X2\u63a5\u6536\u914d\u7f6e\u8bf7\u6c42\u3002 PCI\u6865X2\u7684Secondary Bus Number\u4e3a2\uff0cSubordinate Bus Number\u4e3a3\uff0c 2 < Bus Number <= 3, \u6240\u4ee5PCI\u6865X2\u63a5\u6536\u6765\u81eaPCI\u603b\u7ebf1\u7684Type 01h\u914d\u7f6e\u8bf7\u6c42, \u5e76\u5c06\u8fd9\u4e2a\u914d\u7f6e\u8bf7\u6c42\u53d1\u9001\u5230PCI Bus 2\uff1b PCI Bus 2\u4e0a\u7684PCI\u6865X3\u63a5\u6536\u914d\u7f6e\u8bf7\u6c42\u3002 PCI\u6865X3\u7684Secondary Bus Number\u4e3a3\uff0cSubordinate Bus Number\u4e3a3\uff0c\u5219\u8981\u8bbf\u95ee\u7684\u8bbe\u5907\u5c31\u5728\u8fd9\u4e2a\u6865\u4e0b\uff0c PCI\u6865X3\u5c06Type 01h\u7684\u603b\u7ebf\u4e8b\u52a1\u8f6c\u6362\u6210Type 00h\u7684\u603b\u7ebf\u4e8b\u52a1\uff0c\u53d1\u9001\u5230PCI\u603b\u7ebf3\uff0c PCI31 \u63a5\u6536\u5230\u4e86\u8bf7\u6c42\uff0c\u8fdb\u884c\u4ea4\u4e92\u3002 Device\u53f7\u7684\u5206\u914d \u00b6 PCI\u8bbe\u5907\u7684IDSEL\u4fe1\u53f7\u4e0ePCI\u603b\u7ebf\u7684AD[31:0]\u4fe1\u53f7\u7684\u8fde\u63a5\u5173\u7cfb\u51b3\u5b9a\u4e86\u8be5\u8bbe\u5907\u5728\u8fd9\u6761PCI\u603b\u7ebf\u7684\u8bbe\u5907\u53f7\u3002 \u6bcf\u4e00\u4e2aPCI\u8bbe\u5907\u90fd\u4f7f\u7528\u72ec\u7acb\u7684IDSEL\u4fe1\u53f7\uff0c\u5176\u4e2dCONFIG_ADDRESS\u5bc4\u5b58\u5668\u4e2d\u7684Device Number \u5b57\u6bb5\u5171\u67095\u4f4d\uff0c\u53ef\u4ee5\u8868\u793a32\u4e2a\u8bbe\u5907\uff0c\u800cAD[31:11]\u53ea\u670921\u4f4d\uff0c\u8fd9\u610f\u5473\u7740\u4e00\u6761PCI\u603b\u7ebf\u4e0a\u6700\u591a\u80fd\u63a521\u4e2a\u8bbe\u5907\u3002 PCI \u603b\u7ebf\u6570\u636e\u4ea4\u6362 \u00b6 \u5b58\u50a8\u5668\u57df\u4e0ePCI\u603b\u7ebf\u57df\u7684\u6620\u5c04 PCI Agent \u8bbe\u5907\u4e4b\u95f4\u4ee5\u53caHOST \u5904\u7406\u5668\u548cPCI Agent\u8bbe\u5907\u4e4b\u95f4\u53ef\u4ee5\u4f7f\u7528\u5b58\u50a8\u5668\u8bfb\u5199\u548cIO\u8bfb\u5199\u7b49\u603b\u7ebf\u4e8b\u52a1\u8fdb\u884c\u6570\u636e\u4f20\u9001\u9001\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c PCI\u6865\u4e0d\u4e4b\u95f4\u4e0ePCI\u8bbe\u5907\u6216\u8005HOST\u4e3b\u6865\u8fdb\u884c\u6570\u636e\u4ea4\u6362\uff0c\u4ec5\u4ec5\u662f\u8f6c\u53d1\u6765\u81eaPCI Agent \u6216\u8005 HOST \u4e3b\u6865\u7684\u6570\u636e\u3002 \u5728PCI Agent \u8bbe\u5907\u8fdb\u884c\u6570\u636e\u4f20\u9001\u4e4b\u524d\uff0c\u7cfb\u7edf\u8f6f\u4ef6\u9700\u8981\u521d\u59cb\u5316PCI Agent \u8bbe\u5907\u7684 BAR0 ~ BAR5\u5bc4\u5b58\u5668\uff0c\u4ee5\u53caPCI\u6865\u7684Base, Limit\u5bc4\u5b58\u5668\uff0c\u7cfb\u7edf\u8f6f\u4ef6\u4f7f\u7528DFS\u7b97\u6cd5\u5bf9PCI\u603b\u7ebf\u8fdb\u884c\u904d\u5386\u65f6\uff0c\u5b8c\u6210\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u521d\u59cb\u5316\uff0c\u5206\u914d\u8fd9\u4e9b\u8bbe\u5907\u5728PCI\u603b\u7ebf\u57df\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u7136\u540ePCI\u8bbe\u5907\u5c31\u53ef\u4ee5\u4f7f\u7528PCI\u603b\u7ebf\u5730\u5740\u8fdb\u884c\u6570\u636e\u4f20\u8f93\u4e86\u3002 PCI Agent \u7684BAR0 ~ 5, \u4ee5\u53ca PCI bridge \u7684 Base \u5bc4\u5b58\u5668\u90fd\u662f\u5b58\u7684PCI\u603b\u7ebf\u5730\u5740\uff0c\u8fd9\u4e9b\u5730\u5740\u5728\u5904\u7406\u5668\u7684\u5b58\u50a8\u5668\u57df\u6709\u5bf9\u5e94\u7684\u6620\u50cf\uff0c\u5982\u679c\u4e00\u4e2aPCI\u8bbe\u5907\u7684BAR\u7a7a\u95f4\u5728\u5904\u7406\u5668\u7684\u5b58\u50a8\u5668\u57df\u6ca1\u6709\u6620\u50cf\uff0c\u5904\u7406\u5668\u5c06\u4e0d\u80fd\u8bbf\u95eePCI\u8bbe\u5907\u7684BAR\u7a7a\u95f4\u3002 \u5904\u7406\u5668\u8bbf\u95eePCI\u8bbe\u5907\u5730\u5740\u7a7a\u95f4 \u00b6 HOST\u4e3b\u6865\u9694\u79bb\u4e86PCI\u603b\u7ebf\u57df\u4e0e\u5b58\u50a8\u5668\u57df\u3002\u5728PCI\u603b\u7ebf\u521d\u59cb\u5316\u65f6\uff0c\u4f1a\u5728CPU\u5b58\u50a8\u5668\u57df\u4e2d\u5efa\u7acbPCI\u8bbe\u5907\u7684\u5b58\u50a8\u5668\u5730\u5740\u7a7a\u95f4\u7684\u6620\u5c04\uff0c\u5f53\u5904\u7406\u5668\u8bbf\u95ee\u8bbe\u5907\u7684\u5730\u5740\u7a7a\u95f4\u65f6\uff0c\u9996\u5148\u8bbf\u95ee\u8be5\u8bbe\u5907\u5728\u5b58\u50a8\u5668\u57df\u4e2d\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u5e76\u4e14\u901a\u8fc7HOST\u4e3b\u6865\u7684\u5730\u5740\u7a7a\u95f4\u8f6c\u6362\u4e3aPCI\u603b\u7ebf\u57df\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u518d\u4f7f\u7528PCI\u603b\u7ebf\u4e8b\u52a1\u5c06\u6570\u636e\u53d1\u9001\u5230\u6307\u5b9a\u7684PCI\u8bbe\u5907\u4e2d PCI\u8bbe\u5907\u8bbf\u95ee\u5b58\u50a8\u5668\u57df\u7684\u5730\u5740\u7a7a\u95f4 \u00b6 PCI\u8bbe\u5907\u8bbf\u95ee\u5b58\u50a8\u5668\u57df\u7684\u5730\u5740\u7a7a\u95f4\u65f6\u901a\u8fc7DMA\u5b8c\u6210\u7684\u3002\u5904\u7406\u5668\u9700\u8981\u5c06\u5b58\u50a8\u5668\u57df\u7684\u5730\u5740\u7a7a\u95f4\u53cd\u5411\u6620\u5c04\u5230PCI\u603b\u7ebf\u5730\u5740\u7a7a\u95f4\u3002\u9996\u5148\u8bbf\u95ee\u8be5\u50a8\u5b58\u5668\u5730\u5740\u7a7a\u95f4\u5bf9\u5e94\u7684PCI\u603b\u7ebf\u5730\u5740\u7a7a\u95f4\uff0c\u901a\u8fc7HOST\u4e3b\u6865\u5c06\u8fd9\u4e2a\u5730\u5740\u7a7a\u95f4\u8f6c\u6362\u4e3a\u5b58\u50a8\u5668\u5730\u5740\u7a7a\u95f4\uff0c\u518d\u7531DDR\u63a7\u5236\u5668\u5bf9\u5b58\u50a8\u5668\u8fdb\u884c\u8bfb\u5199\u8bbf\u95ee\u3002 X86\u5904\u7406\u5668\u7684HOST\u4e3b\u6865\u4e2d\uff0c\u5b58\u50a8\u5668\u57df\u7684\u5b58\u50a8\u5668\u5730\u5740\u4e0ePCI\u603b\u7ebf\u57df\u7684\u5730\u5740\u76f8\u7b49\u3002 PCI\u8bbe\u5907BAR\u5bc4\u5b58\u5668\u548cPCI\u6865 Base\u3001Limit\u5bc4\u5b58\u5668\u7684\u521d\u59cb\u5316 \u00b6 \u5b58\u50a8\u5668\u7a7a\u95f4\u4e0eIO\u7a7a\u95f4 \u00b6 PCI\u6865\u914d\u7f6e\u7a7a\u95f4\u7684\u56fe\u4e2d\uff0c\u6709\u4e00\u4e9bLimit \u548c Base \u7684\u5bc4\u5b58\u5668\uff0c\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u4f5c\u7528\u5c31\u662f\u8bb0\u5f55\u8be5PCI\u6865\u6240\u7ba1\u7406\u7684PCI\u5b50\u6811\u7684\u5b58\u50a8\u5668\u5730\u5740\u7a7a\u95f4\u6216\u8005I/O\u5730\u5740\u7a7a\u95f4\u7684\u57fa\u5730\u5740\u548c\u957f\u5ea6\u3002 I/O Limit I/O Base Memory Limit Memory Base \u73b0\u5728\u5047\u8bbe\u5982\u4e0b\uff1a CPU\u7684\u5b58\u50a8\u5668\u57df\u7684 0xF000-0000 ~ 0xF800-0000 \u4e0e PCI\u603b\u7ebf\u57df\u76840x7000-0000 ~ 0x7800-0000 \u662f\u6620\u5c04\u5173\u7cfb \u5b9e\u9645\u60c5\u51b5\u5462\uff1f PCI\u603b\u7ebf\u57df\u7684\u8fd9\u4e2a\u8d77\u59cb\u5730\u5740\u662f\u5982\u4f55\u786e\u5b9a\u7684\uff1f PCI Agent \u8bbe\u5907\u53ea\u4f7f\u7528BAR0 \u5bc4\u5b58\u5668 \u5b9e\u9645\u60c5\u51b5\u5462\uff1f\u4e00\u822c\u90fd\u7528\u51e0\u4e2a\uff1f PCI Agent \u7684\u5b58\u50a8\u5668\u7a7a\u95f4\u5927\u5c0f\u4e3a16MB(0x100-0000) \u5b9e\u9645\u60c5\u51b5\u5462\uff1f\u8fd9\u4e2a\u7a7a\u95f4\u5927\u5c0f\u662f\u5982\u4f55\u786e\u5b9a\u7684\u5462\uff1f BAR\u5bc4\u5b58\u5668\u521d\u59cb\u5316\u548cPCI\u603b\u7ebf\u7684Bus\u53f7\u5206\u914d\u662f\u5728\u540c\u4e00\u4e2a\u52a8\u4f5c\u4e2d\u5b8c\u6210\u7684 \u8f6f\u4ef6\u904d\u5386\u5230PCI\u6865X3\u540e\uff0c\u6ca1\u6709\u518d\u63a2\u6d4b\u5230PCI Bus 3\u4e0b\u9762\u6709PCI\u6865\uff0c\u8fd9\u65f6\u5019\u5c31\u4e3aPCI Bus 3 \u4e0b\u9762\u7684PCI Agent\u7684BAR\u5bc4\u5b58\u5668\u8d4b\u503c\uff08\u5f53\u7136\u5c31\u662f\u4ece0x7000-0000 ~ 0x7800-0000\u4e2d\u5206\u914d\uff09 PCI-Agent31.BAR0 = 0x7000-0000; PCI-Agent32.BAR0 = 0x7100-0000; \u4e3aPCI\u6865X3\u7684Base, Limit \u5bc4\u5b58\u5668\u8d4b\u503c PCI-BridgeX3.Memory-Base = 0x7000-0000; PCI-BridgeX3.Memory-Limit = 0x200-0000; \u56de\u9000\u5230PCI Bus 2, \u53d1\u73b0PCI\u8bbe\u590721\uff0c PCI-Agent21.BAR0 = 0x7200-0000; \u4e3aPCI\u6865X2\u7684Base, Limit \u5bc4\u5b58\u5668\u8d4b\u503c PCI-BridgeX2.Memory-Base = 0x7000-0000; PCI-BridgeX3.Memory-Limit = 0x300-0000; \u56de\u9000\u5230PCI Bus 1, \u53d1\u73b0PCI\u8bbe\u590711\uff0c PCI-Agent11.BAR0 = 0x7300-0000; \u4e3aPCI\u6865X1\u7684Base, Limit \u5bc4\u5b58\u5668\u8d4b\u503c PCI-BridgeX1.Memory-Base = 0x7000-0000; PCI-BridgeX3.Memory-Limit = 0x400-0000; \u56de\u9000\u5230PCI Bus 0, \u53d1\u73b0PCI\u6865X4, \u8fdb\u5165PCI Bus 4, \u6ca1\u6709\u518d\u63a2\u6d4b\u5230PCI Bus 4 \u4e0b\u9762\u6709PCI\u6865\uff0c\u8fd9\u65f6\u5019\u5c31\u4e3aPCI Bus 4 \u4e0b\u9762\u7684PCI Agent\u7684BAR\u5bc4\u5b58\u5668\u8d4b\u503c PCI-Agent41.BAR0 = 0x7400-0000; PCI-Agent42.BAR0 = 0x7500-0000; \u4e3aPCI\u6865X4\u7684Base, Limit \u5bc4\u5b58\u5668\u8d4b\u503c PCI-BridgeX4.Memory-Base = 0x7400-0000; PCI-BridgeX4.Memory-Limit = 0x200-0000; \u56de\u9000\u5230PCI Bus 0, \u6ca1\u6709\u518d\u63a2\u6d4b\u5230PCI Bus 0\u4e0b\u9762\u6709PCI\u6865\uff0c \u8fd9\u65f6\u5019\u5c31\u4e3aPCI Bus 4 \u4e0b\u9762\u7684PCI Agent\u7684BAR\u5bc4\u5b58\u5668\u8d4b\u503c PCI-Agent01.BAR0 = 0x7600-0000; \u904d\u5386\u7ed3\u675f \u5730\u5740\u8bd1\u7801 \u00b6 \u5f53\u4e00\u4e2a\u5b58\u50a8\u5668\u8bfb\u5199\u603b\u7ebf\u4e8b\u52a1\u5230\u8fbePCI\u603b\u7ebf\u65f6\uff0c\u5728\u8fd9\u6761\u603b\u7ebf\u4e0a\u6240\u4ee5\u7684\u8bbe\u5907\u5c06\u8fdb\u884c\u5730\u5740\u8bd1\u7801\uff0c\u5982\u679c\u5f53\u524d\u603b\u7ebf\u4e8b\u52a1\u4f7f\u7528\u7684\u5730\u5740\u5728\u67d0\u4e2aPCI\u8bbe\u5907\u7684BAR\u7a7a\u95f4\u4e2d\uff0c\u8be5PCI\u8bbe\u5907\u5c06\u4f7f\u80fdDVESEL#\u4fe1\u53f7\uff0c\u8ba4\u9886\u603b\u7ebf\u4e8b\u52a1\u3002 Posted \u4f20\u9001\u65b9\u5f0f\u4e0eNon-Posted \u4f20\u9001\u65b9\u5f0f Posted\u4f20\u9001\u65b9\u5f0f\uff0c\u6570\u636e\u901a\u8fc7PCI\u6865\u540e\u5c06\u7ed3\u675f\u4e0a\u4e00\u7ea7\u603b\u7ebf\u7684PCI\u4e8b\u52a1\uff0c\u4ece\u800c\u4e0a\u4e00\u7ea7PCI\u603b\u7ebf\u53ef\u4ee5\u88ab\u5176\u4ed6PCI\u8bbe\u5907\u4f7f\u7528\u3002 Non-Posted \u4f20\u9001\u65b9\u5f0f\uff0c\u5f53\u6570\u636e\u8fbe\u5230\u76ee\u6807\u8bbe\u5907\u540e\uff0c\u76ee\u6807\u8bbe\u5907\u9700\u8981\u5411\u4e3b\u8bbe\u5907\u53d1\u51fa\u56de\u5e94\uff0c\u5f53\u4e3b\u8bbe\u5907\u6536\u5230\u8fd9\u4e2a\u56de\u5e94\u540e\u624d\u80fd\u7ed3\u675f\u6574\u4e2a\u603b\u7ebf\u4e8b\u52a1\u3002 \u5904\u7406\u5668\u5411PCI\u8bbe\u5907\u8fdb\u884c\u8bfb\u64cd\u4f5c\u4f7f\u7528\u7684\u662fNon-Posted\u65b9\u5f0f\uff0c\u5199\u64cd\u4f5c\u4f7f\u7528\u7684\u662fPosted\u65b9\u5f0f PCI\u8bbe\u5907\u7684DMA\u5199\u4f7f\u7528Posted\u65b9\u5f0f\uff0cDMA\u8bfb\u4f7f\u7528Non-Posted\u65b9\u5f0f PCI\u8bbe\u5907\u8bfb\u5199\u4e3b\u5b58\u50a8\u5668 \u00b6 PCI\u8bbe\u5907\u4e0e\u5b58\u50a8\u5668\u76f4\u63a5\u8fdb\u884c\u6570\u636e\u4ea4\u6362\u7684\u8fc7\u7a0b\u662f\u901a\u8fc7DMA\u5b9e\u73b0\u7684\u3002\u652f\u6301DMA\u4f20\u9012\u7684PCI\u8bbe\u5907\u53ef\u4ee5\u5728BAR\u7a7a\u95f4\u4e2d\u8bbe\u7f6e\u4e24\u4e2a\u5bc4\u5b58\u5668\uff0c\u5206\u522b\u4fdd\u5b58\u76ee\u6807\u5730\u5740\u548c\u4f20\u9001\u5927\u5c0f\u3002 PCI\u8bbe\u5907\u8fdb\u884cDMA\u64cd\u4f5c\u65f6\uff0c\u4f7f\u7528\u7684\u76ee\u7684\u5730\u5740\u662fPCI\u603b\u7ebf\u57df\u7684\u7269\u7406\u5730\u5740\uff0c\u800c\u4e0d\u662f\u5b58\u50a8\u5668\u57df\u7684 \u4e2d\u65ad\u673a\u5236 \u00b6 PCI\u63d0\u4f9b\u4e86INTA#,INTB#,INTC#,INTD#\u4fe1\u53f7\u5411\u5904\u7406\u5668\u53d1\u51fa\u4e2d\u65ad\u8bf7\u6c42\uff0c\u540c\u65f6\u4e5f\u63d0\u4f9b\u4e86MSI\u673a\u5236\u5411\u5904\u7406\u5668\u63d0\u4ea4\u4e2d\u65ad\u8bf7\u6c42 MSI\u4e2d\u65ad\u673a\u5236 \u00b6 MSI\u4e2d\u65ad\u673a\u5236\u91c7\u7528\u5b58\u50a8\u5668\u5199\u603b\u7ebf\u4e8b\u52a1\u5411\u5904\u7406\u5668\u7cfb\u7edf\u63d0\u4ea4\u4e2d\u65ad\u8bf7\u6c42\uff0c\u5176\u5b9e\u73b0\u673a\u5236\u662f\u5411HOST\u5904\u7406\u5668\u6307\u5b9a\u7684\u4e00\u4e2a\u5b58\u50a8\u5668\u5730\u5740\u5199\u6307\u5b9a\u7684\u6570\u636e\u3002\u8fd9\u4e2a\u5b58\u50a8\u5668\u5730\u5740\u4e00\u822c\u662f\u4e2d\u65ad\u63a7\u5236\u5668\u89c4\u5b9a\u7684\u67d0\u6bb5\u5b58\u50a8\u5668\u5730\u5740\u8303\u56f4\uff0c\u800c\u4e14\u6570\u636e\u4e5f\u662f\u4e8b\u5148\u5b89\u6392\u597d\u7684\u6570\u636e\uff0c\u901a\u5e38\u542b\u6709\u4e2d\u65ad\u5411\u91cf\u53f7\u3002 MSI\u5728PCIe\u4e0a\u5df2\u7ecf\u6210\u4e3a\u4e86\u4e3b\u6d41\uff0cPCIe\u8bbe\u5907\u5fc5\u987b\u652f\u6301MSI\u4e2d\u65ad\u673a\u5236\uff0cPCI\u8bbe\u5907\u4e0d\u4e00\u5b9a\u90fd\u652f\u6301\uff0c\u800c\u4e14\u5728PCI\u8bbe\u5907\u4e0a\u4e0d\u5e38\u7528\u3002 \u4ece\u8f6f\u4ef6\u89d2\u5ea6\u8ba4\u8bc6PCIe\u603b\u7ebf \u00b6 PCI\u603b\u7ebf\u662f\u5e76\u884c\u603b\u7ebf\uff0c\u540c\u4e00\u6761\u603b\u7ebf\u4e0a\uff0c\u6240\u6709\u5916\u90e8\u8bbe\u5907\u5171\u4eab\u603b\u7ebf\u5e26\u5bbd\uff0cPCIe\u603b\u7ebf\u4f7f\u7528\u9ad8\u901f\u5dee\u5206\u603b\u7ebf\uff0c\u5e76\u91c7\u7528\u7aef\u5230\u7aef\u7684\u8fde\u63a5\u65b9\u5f0f\uff0c\u5728\u4e00\u6761PCIe\u94fe\u8def\u7684\u4e24\u7aef\u53ea\u80fd\u5404\u8fde\u63a5\u4e00\u4e2a\u8bbe\u5907\uff0c\u8fd9\u4e24\u4e2a\u8bbe\u5907\u4e92\u4e3a\u6570\u636e\u53d1\u9001\u7aef\u548c\u6570\u636e\u63a5\u6536\u7aef\u3002PCIe\u603b\u7ebf\u5728\u8bbe\u8ba1\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u4e86\u4e00\u4e9b\u7f51\u7edc\u901a\u4fe1\u7684\u6280\u672f\u3002\uff08\u73b0\u5728\u611f\u89c9\u9ad8\u901f\u6570\u636e\u6709\u5f88\u591a\u7c7b\u4f3c\u7684\u5730\u65b9\uff0c\u57fa\u672c\u90fd\u6d89\u53caserdies\uff09","title":"\u57fa\u4e8elinux \u7684 PCI & PCIe \u603b\u7ebf\u5206\u6790\u603b\u7ed3"},{"location":"misc/pcie.html#linux-pci-pcie","text":"","title":"\u57fa\u4e8elinux \u7684 PCI &amp; PCIe \u603b\u7ebf\u5206\u6790\u603b\u7ed3"},{"location":"misc/pcie.html#_1","text":"\u8bb2\u89e3PCI & PCIe \u7684\u4e66\u6709\u5f88\u591a\uff0c\u6211\u624b\u4e0a\u5c31\u62ff\u4e86\u4e00\u672c\u300aPCI Express \u4f53\u7cfb\u7ed3\u6784\u5bfc\u8bfb\u300b\u7684\u4e66\uff0c\u636e\u8bf4\u8fd9\u672c\u4e66\u57fa\u672c\u662f\u7ffb\u8bd1\u4e86\u5916\u6587\uff0c\u4e66\u4e0a\u867d\u7136\u5185\u5bb9\u6bd4\u8f83\u5168\u9762\uff0c\u4f46\u662f\u4e66\u90a3\u4e48\u539a\uff0c\u60f3\u8fbe\u5230\u5feb\u901f\u638c\u63e1\u7684\u76ee\u7684\u8fd8\u6709\u4e00\u5b9a\u96be\u5ea6\uff1b\u7f51\u4e0a\u4e5f\u6709\u5f88\u591a\u76f8\u5173\u535a\u5ba2\uff0c\u4f46\u662f\u666e\u904d\u5f88\u6d45\uff0c\u5185\u5bb9\u5c40\u9650\u53c8\u652f\u79bb\u7834\u788e\uff1b\u8fd9\u5c31\u662f\u5199\u8fd9\u7bc7\u603b\u7ed3\u7684\u76ee\u7684\uff0c\u4ece\u6211\u7684\u7406\u89e3\u51fa\u53d1\uff0c\u5bf9PCI & PCIe \u505a\u4e00\u4e2a\u603b\u7ed3\u3002 \u5185\u5bb9\u805a\u7126\u4e8e\u4e0b\u9762\u51e0\u4e2a\u65b9\u9762: \u4ece\u8f6f\u4ef6\u5f00\u53d1\u8005\u89d2\u5ea6\u6765\u603b\u7ed3 PCI \u57fa\u7840\u77e5\u8bc6\uff0c\u7406\u6e05\u695a\u5404\u79cd\u6982\u5ff5 \u4ece\u8f6f\u4ef6\u5f00\u53d1\u8005\u89d2\u5ea6\u6765\u603b\u7ed3 PCIe \u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u5728 PCI \u7684\u57fa\u7840\u4e0a\uff0c\u5e76\u4e14\u80fd\u591f\u4e0e PCI \u8fdb\u884c\u5bf9\u6bd4 \u57fa\u4e8elinux\uff0c\u68b3\u7406\u5185\u6838 PCIe \u9a71\u52a8\u6846\u67b6\uff0c\u521d\u59cb\u5316\u6d41\u7a0b \u5982\u4f55\u57fa\u4e8elinux\u5185\u6838\u8bbe\u5907\u9a71\u52a8\u6846\u67b6\u5199\u4e00\u4e2a\u81ea\u5df1\u7684PCIe\u9a71\u52a8","title":"\u524d\u8a00"},{"location":"misc/pcie.html#pci","text":"","title":"\u4ece\u8f6f\u4ef6\u5f00\u53d1\u8005\u89d2\u5ea6\u8ba4\u8bc6 PCI \u603b\u7ebf"},{"location":"misc/pcie.html#pci_1","text":"","title":"PCI\u603b\u7ebf\u4fe1\u53f7\u5b9a\u4e49"},{"location":"misc/pcie.html#pci_2","text":"PCI\u662f\u5e76\u884c\u603b\u7ebf\uff0c\u662f\u603b\u7ebf\u578b\u62d3\u6251\u7ed3\u6784\uff0c\u56fe\u4e2d\u7ed9\u51fa\u4e86\u4e00\u4e2a\u6bd4\u8f83\u590d\u6742\u7684PCI\u603b\u7ebf\u62d3\u6251\uff0c\u501f\u6b64\u6765\u8bf4\u660ePCI\u603b\u7ebf\u7684\u7ec4\u6210\uff0c\u521d\u59cb\u5316\u7b49\u90e8\u5206","title":"PCI\u603b\u7ebf\u62d3\u6251\u56fe"},{"location":"misc/pcie.html#cpu-dram-pci","text":"\u5728\u63cf\u8ff0PCI\u603b\u7ebf\u62d3\u6251\u4e4b\u524d\u8981\u5148\u8bb2\u6e05\u695a\u56fe\u4e2d\u7684\u8fd9\u51e0\u4e2a\u57df\uff0c\u5176\u4e2d\u6709\u4e24\u4e2a\u57df\u662f\u4e00\u5b9a\u8981\u533a\u5206\u6e05\u695a\u7684\uff0c\u90a3\u5c31\u662f\u5b58\u50a8\u5668\u57df\u4e0ePCI\u603b\u7ebf\u57df\u3002\u57df\u5e94\u8be5\u600e\u4e48\u7406\u89e3\u5462\uff1f\u6211\u7406\u89e3\u4e3a\u5730\u5740\u7a7a\u95f4\uff0cPCI\u603b\u7ebf\u6709\u5176\u72ec\u7acb\u7684\u5730\u5740\u7a7a\u95f4\uff0cSOC\u4e5f\u6709\u5176\u72ec\u7acb\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u8fd9\u4e24\u4e2a\u5730\u5740\u7a7a\u95f4\u4e0d\u80fd\u641e\u6df7\u3002 CPU\u57df DRAM\u57df PCI\u603b\u7ebf\u57df - PCI\u8bbe\u5907\u80fd\u591f\u76f4\u63a5\u4f7f\u7528\u7684\u5730\u5740\u662fPCI\u603b\u7ebf\u57df\u7684\u5730\u5740\uff0c\u5728PCI\u603b\u7ebf\u4e8b\u52a1\u4e2d\u51fa\u73b0\u7684\u5730\u5740\u4e5f\u662fPCI\u603b\u7ebf\u57df\u7684\u5730\u5740 \u5b58\u50a8\u5668\u57df - \u5904\u7406\u5668\u80fd\u591f\u76f4\u63a5\u4f7f\u7528\u7684\u5730\u5740\u662f\u5b58\u50a8\u5668\u57df\u7684\u5730\u5740 CPU\u6240\u80fd\u8bbf\u95ee\u7684PCI\u603b\u7ebf\u5730\u5740\u4e00\u5b9a\u5728\u5b58\u50a8\u5668\u57df\u4e2d\u6709\u5730\u5740\u6620\u5c04\uff1b PCI\u8bbe\u5907\u80fd\u591f\u8bbf\u95ee\u7684\u5b58\u50a8\u5668\u57df\u7684\u5730\u5740\u4e5f\u4e00\u5b9a\u5728PCI\u603b\u7ebf\u57df\u4e2d\u5177\u6709\u5730\u5740\u6620\u5c04\u3002","title":"CPU\u57df &amp; DRAM\u57df &amp; \u5b58\u50a8\u5668\u57df &amp; PCI\u603b\u7ebf\u57df"},{"location":"misc/pcie.html#pci_3","text":"PCI\u603b\u7ebf\u62d3\u6251\u4e3b\u8981\u7531\u4e09\u90e8\u5206\u6784\u6210\uff1a HOST\u4e3b\u6865 PCI\u603b\u7ebf PCI\u8bbe\u5907","title":"PCI\u603b\u7ebf\u62d3\u6251\u7ec4\u6210"},{"location":"misc/pcie.html#host","text":"HOST\u4e3b\u6865\u7528\u6765\u9694\u79bb\u5904\u7406\u5668\u7cfb\u7edf\u7684\u5b58\u50a8\u5668\u57df\u4e0e\u5904\u7406\u5668\u7cfb\u7edf\u7684PCI\u603b\u7ebf\u57df\uff0c\u7ba1\u7406PCI\u603b\u7ebf\u57df\uff0c\u5b8c\u6210\u5904\u7406\u5668\u4e0ePCI\u8bbe\u5907\u95f4\u7684\u6570\u636e\u4ea4\u6362\u3002\u8fd9\u4e5f\u662f\u6211\u4eec\u4e3a\u4ec0\u4e48\u4e00\u4e0a\u6765\u5c31\u8bf4\u8981\u533a\u5206\u5b58\u50a8\u5668\u57df\u4e0ePCI\u603b\u7ebf\u57df\u4e86\uff0c\u56e0\u4e3aHOST\u4e3b\u6865\u7684\u4f5c\u7528\u4e4b\u4e00\u5c31\u662f\u9694\u79bb\u8fd9\u4e24\u4e2a\u57df\u3002\u56fe\u4e2d\u7684\u62d3\u6251\u5e26\u6709\u4e24\u4e2aHOST\u4e3b\u6865\uff0cHOST\u4e3b\u6865X\u4e0eHOST\u4e3b\u6865Y.","title":"HOST\u4e3b\u6865"},{"location":"misc/pcie.html#pci_4","text":"PCI\u603b\u7ebf\u7531HOST\u4e3b\u6865\u6216\u8005PCI\u6865\u7ba1\u7406\uff0c\u7528\u6765\u8fde\u63a5\u5404\u7c7b\u8bbe\u5907\u3002\u56fe\u4e2d\u7ed9\u51fa\u4e86PCI\u603b\u7ebf0\uff0c1\uff0c2\uff0c3\uff0c4. HOST\u4e3b\u6865\u51fa\u7684\u603b\u7ebf\u7f16\u53f7\u53f7PCI\u603b\u7ebf0\uff0c\u5728\u4e00\u68f5PCI\u603b\u7ebf\u6811\u4e2d\u6709\u591a\u5c11\u4e2aPCI\u6865\uff08\u5305\u542bHOST\u4e3b\u6865\uff09,\u5c31\u6709\u591a\u5c11\u6761PCI\u603b\u7ebf\u3002","title":"PCI\u603b\u7ebf"},{"location":"misc/pcie.html#pci_5","text":"\u5728PCI\u603b\u7ebf\u4e2d\u6709\u4e09\u7c7b\u8bbe\u5907\uff1aPCI\u4e3b\u8bbe\u5907\u3001PCI\u4ece\u8bbe\u5907\u3001PCI\u6865\u8bbe\u5907\u3002 PCI\u4e3b\u8bbe\u5907 - \u53ef\u4ee5\u901a\u8fc7\u603b\u7ebf\u4ef2\u88c1\u83b7\u5f97PCI\u603b\u7ebf\u4f7f\u7528\u6743\uff0c\u4e3b\u52a8\u5411\u5176\u4ed6PCI\u8bbe\u5907\u6216\u8005\u4e3b\u5b58\u50a8\u5668\u53d1\u8d77\u8bfb\u5199\u8bf7\u6c42\uff1b PCI\u4ece\u8bbe\u5907 - \u53ea\u80fd\u88ab\u52a8\u7684\u63a5\u6536\u6765\u81eaHOST\u4e3b\u6865\u6216\u8005\u5176\u4ed6PCI\u8bbe\u5907\u7684\u8bfb\u5199\u8bf7\u6c42\uff1b PCI\u6865\u8bbe\u5907 - \u4e3b\u8981\u662f\u7ba1\u7406\u4e0b\u6e38\u7684PCI\u8bbe\u5907\uff0c\u5e76\u8f6c\u53d1\u4e0a\u4e0b\u6e38\u4e4b\u95f4\u7684\u603b\u7ebf\u4e8b\u52a1\u3002PCI\u6865\u53ef\u4ee5\u6269\u5c55PCI\u603b\u7ebf\uff0c\u4f46\u662f\u4e0d\u80fd\u6269\u5c55PCI\u603b\u7ebf\u57df\uff0c\u6bd4\u5982\u5f53\u524d\u7cfb\u7edf\u4f7f\u7528\u7684\u662f32bit\u7684PCI\u603b\u7ebf\u5730\u5740\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7cfb\u7edf\u7684PCI\u603b\u7ebf\u57df\u7684\u5730\u5740\u7a7a\u95f4\u5c31\u662f4G,\u4e0e\u6865\u7684\u4e2a\u6570\u65e0\u5173\u3002 \u4e00\u4e2aPCI\u8bbe\u5907\u65e2\u53ef\u4ee5\u662f\u4e3b\u8bbe\u5907\u4e5f\u53ef\u4ee5\u662f\u4ece\u8bbe\u5907\uff0c\u4f46\u540c\u4e00\u65f6\u523b\u53ea\u80fd\u6709\u4e00\u79cd\u89d2\u8272\u3002","title":"PCI\u8bbe\u5907"},{"location":"misc/pcie.html#pci_6","text":"\u4e0a\u8ff0\u7684\u63cf\u8ff0\u8bb2\u4e86PCI\u603b\u7ebf\u7684\u62d3\u6251\uff0c\u62d3\u6251\u4e2d\u6bcf\u4e00\u4e2a\u90e8\u5206\u7684\u529f\u80fd\u3002\u90a3\u4e48\u63a5\u4e0b\u6765\u5c31\u4f1a\u6709\u7591\u95ee\uff1a\u6211\u4eec\uff08CPU\uff09\u662f\u5982\u4f55\u8bbf\u95eePCI\u8bbe\u5907\u7684\uff1f \u77e5\u9053\u4e86PCI\u8bbe\u5907\u4e0eCPU\u5982\u4f55\u4ea4\u4e92\uff0c\u6211\u4eec\u624d\u80fd\u53bb\u5199\u9a71\u52a8\u4ee3\u7801\uff0c\u6240\u4ee5\u8fd9\u4e2a\u95ee\u9898\u8981\u641e\u6e05\u695a\u3002 CPU\u8bbf\u95eePCI\u8bbe\u5907\u7684**\u914d\u7f6e\u7a7a\u95f4**\u4f7f\u7528\u7684\u662f***ID\u5bfb\u5740***\u65b9\u5f0f\uff1bCPU\u8bbf\u95eePCI\u8bbe\u5907\u7684**\u5b58\u50a8\u5668**\u548c**IO\u5730\u5740\u7a7a\u95f4**\u91c7\u7528\u7684\u662f***\u5730\u5740\u5bfb\u5740***\u65b9\u5f0f \u4e00\u4e0b\u5b50\u51fa\u73b0\u4e86\u8fd9\u4e48\u591a\u540d\u8bcd\uff0c\u914d\u7f6e\u7a7a\u95f4\u3001ID\u5bfb\u5740\u3001\u5b58\u50a8\u5668\u5730\u5740\u7a7a\u95f4\u3001IO\u5730\u5740\u7a7a\u95f4\uff0c\u4e00\u4e2a\u4e2a\u8bb2\u6e05\u695a\u5c31\u77e5\u9053PCI\u5230\u5e95\u662f\u5982\u4f55\u8bbf\u95ee\u7684\u4e86\u3002","title":"PCI\u8bbe\u5907\u7684\u914d\u7f6e\u7a7a\u95f4"},{"location":"misc/pcie.html#_2","text":"CPU\u8bbf\u95eePCI\u8bbe\u5907\u662f\u901a\u8fc7\u5730\u5740\u6620\u5c04\u8fdb\u884c\u7684\uff0cPCI\u8bbe\u5907\u5185\u90e8\u7684\u5730\u5740\u7a7a\u95f4\uff08PCI\u603b\u7ebf\u57df\u7684\u4e00\u90e8\u5206\uff09\u4f1a\u901a\u8fc7\u4e00\u5b9a\u65b9\u5f0f\u6620\u5c04\u5230SOC\u80fd\u591f\u8bbf\u95ee\u5230\u7684\u4e00\u6bb5\u5730\u5740\u7a7a\u95f4\u4e2d\uff08\u5b58\u50a8\u5668\u57df\u7684\u4e00\u90e8\u5206\uff09\uff0c\u501f\u52a9DMA\u6765\u5b9e\u73b0\u901a\u4fe1\u3002\u8fd9\u4e2a\u5730\u5740\u6620\u5c04\u5173\u7cfb\u603b\u8981\u6709\u4e2a\u5730\u65b9\u8bb0\u5f55\u5427\uff1b\u8fd8\u6709\u63d2\u5165\u4e00\u4e2aPCI\u8bbe\u5907\uff0c\u603b\u8981\u77e5\u9053\u5b83\u7684\u4e00\u4e9b\u57fa\u672c\u4fe1\u606f\u5427\uff0c\u6bd4\u5982\u5382\u5bb6\u4fe1\u606f\uff0c\u7248\u672c\u4fe1\u606f......\uff1b\u63d2\u5165\u7684PCI\u8bbe\u5907\u662f\u54ea\u4e00\u79cd\u5f97\u6709\u80fd\u533a\u5206\u7684\u70b9\u5427\u3002\u4e00\u65e6\u9047\u5230\u8fd9\u79cd\u95ee\u9898\uff0c\u5927\u591a\u6570\u89e3\u51b3\u65b9\u6848\u90fd\u662f\u89c4\u5b9a\u4e00\u4e2a\u7edf\u4e00\u7684\u683c\u5f0f\uff0c\u5927\u5bb6\u90fd\u6309\u7167\u8fd9\u4e2a\u683c\u5f0f\u6765\u586b\u5199\uff0c\u800c\u4e14\u8981\u63d0\u4f9b\u4e00\u79cd\u901a\u7528\u7684\u65b9\u5f0f\u80fd\u591f\u83b7\u53d6\u5230\u8fd9\u4e2a\u683c\u5f0f\u7684\u6570\u636e\uff0c\u8fd9\u79cd\u901a\u7528\u6027\u5fc5\u987b\u80fd\u591f\u5c4f\u853dPCI\u8bbe\u5907\u95f4\u7684\u5dee\u5f02\u3002\u4e8e\u662f\u4e4e\u5c31\u6709\u4e86\u914d\u7f6e\u7a7a\u95f4\u8fd9\u4e48\u4e2a\u73a9\u610f\u3002","title":"\u731c\u6d4b\u7684\u4e3a\u4ec0\u4e48\u8981\u6709\u914d\u7f6e\u7a7a\u95f4"},{"location":"misc/pcie.html#pci_7","text":"PCI\u8bbe\u5907\u90fd\u6709\u72ec\u7acb\u7684\u914d\u7f6e\u7a7a\u95f4\uff0c\u5206\u4e3a\u4e09\u79cd\u7c7b\u578b\uff1a PCI Agent \u4f7f\u7528\u7684\u914d\u7f6e\u7a7a\u95f4 PCI\u6865\u4f7f\u7528\u7684\u914d\u7f6e\u7a7a\u95f4 Cardbus\u6865\u7247\u4f7f\u7528\u7684\u914d\u7f6e\u7a7a\u95f4 PCI Agent\u914d\u7f6e\u7a7a\u95f4\u548cPCI\u6865\u914d\u7f6e\u7a7a\u95f4\u9700\u8981\u91cd\u70b9\u4e86\u89e3\uff0cCardbus\u8fd9\u4e2a\u6211\u4e5f\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\u9b3c\u3002","title":"PCI\u914d\u7f6e\u7a7a\u95f4\u7684\u5206\u7c7b"},{"location":"misc/pcie.html#pci-agent","text":"Device ID \u548c Verdor ID. \u5382\u5546\u5206\u914d\u7684\uff0c\u53ea\u8bfb\u3002 Revision ID. \u8bb0\u5f55\u4e86PCI\u8bbe\u5907\u7684\u7248\u672c\u53f7\uff0c\u53ea\u8bfb Class Code. \u8bb0\u5f55\u4e86PCI\u8bbe\u5907\u7684\u5206\u7c7b\uff0c\u53ea\u8bfb\u3002\u5206\u4e3abase class code\uff08\u628a\u8bbe\u5907\u5206\u4e3a\u663e\u5361\u3001\u7f51\u5361\u3001PCI\u6865\u7b49\u8bbe\u5907\uff09\u3001sub class code\uff08\u8fdb\u884c\u7ec6\u5206\uff09\u3001interface\uff08\u5b9a\u4e49\u7f16\u7a0b\u63a5\u53e3\uff09 \u4e09\u4e2a\u5b57\u6bb5\u3002\u8fd9\u4e2a\u5bc4\u5b58\u5668\u53ef\u4f9b\u7cfb\u7edf\u8f6f\u4ef6\u8bc6\u522b\u5f53\u524dPCI\u8bbe\u5907\u7684\u5206\u7c7b\u3002 Header Type. \u8868\u793a\u5f53\u524d\u914d\u7f6e\u7a7a\u95f4\u7c7b\u578b\uff0c\u53ea\u8bfb\u3002 Cache Line Size. HOST\u5904\u7406\u5668\u4f7f\u7528\u7684Cache\u884c\u957f\u5ea6\uff0c\u7531\u7cfb\u7edf\u8f6f\u4ef6\u8bbe\u7f6e\u3002\uff08\u5bf9PCIe\u65e0\u610f\u4e49\uff09 Subsystem ID \u548c subSystem Vendor ID. \u5f53\u4f7f\u7528Device ID \u548c Vendor ID \u65e0\u6cd5\u533a\u5206\u7684\u60c5\u51b5 Expansion ROM base address. \u8bb0\u5f55\u4e86ROM\u7a0b\u5e8f\u7684\u57fa\u5730\u5740\u3002\u6709\u4e9bPCI\u8bbe\u5907\u5728\u5904\u7406\u5668\u8fd8\u6ca1\u6709\u8fd0\u884c\u64cd\u4f5c\u7cfb\u7edf\u4e4b\u524d\uff0c\u5c31\u9700\u8981\u5b8c\u6210\u57fa\u672c\u7684\u521d\u59cb\u5316\u8bbe\u7f6e\uff0cPCI\u8bbe\u5907\u63d0\u4f9b\u4e86\u4e00\u6bb5ROM\u7a0b\u5e8f\uff0c\u5904\u7406\u5668\u5728\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\u5c06\u8fd0\u884c\u8fd9\u6bb5ROM\u7a0b\u5e8f\uff0c\u521d\u59cb\u5316\u8fd9\u4e9bPCI\u8bbe\u5907\u3002 Capabilities Pointer. \u5728PCI\u8bbe\u5907\u4e2d\uff0c\u5bc4\u5b58\u5668\u662f\u53ef\u9009\u7684\uff0c\u5728PCI-X\u548cPCIe\u8bbe\u5907\u4e2d\u5fc5\u987b\u652f\u6301\u3002 Interrupt Line. \u7cfb\u7edf\u8f6f\u4ef6\u5bf9PCI\u8bbe\u5907\u8fdb\u884c\u914d\u7f6e\u7684\u65f6\u5019\u5199\u5165\u7684\uff0c\u8bb0\u5f55\u5f53\u524dPCI\u8bbe\u5907\u4f7f\u7528\u7684\u4e2d\u65ad\u5411\u91cf\u53f7\uff0c\u5982\u679c\u4e0d\u9002\u75288259A\u4e2d\u65ad\u63a7\u5236\u5668\uff0c\u8fd9\u4e2a\u5bc4\u5b58\u5668\u6ca1\u6709\u610f\u4e49 Interrupt Pin. Base Address Register 0 ~ 5. \u4fdd\u5b58PCI\u8bbe\u5907\u4f7f\u7528\u7684\u5730\u5740\u7a7a\u95f4\u7684\u57fa\u5730\u5740\uff0c\u4fdd\u5b58\u7684\u662f\u8be5\u8bbe\u5907\u5728PCI\u603b\u7ebf\u57df\u4e2d\u7684\u5730\u5740\u3002 \u7edd\u5927\u591a\u6570PCI\u8bbe\u5907\u5c06PCI\u914d\u7f6e\u4fe1\u606f\u5b58\u653e\u5728E2PROM\u4e2d\uff0cPCI\u8bbe\u5907\u8fdb\u884c\u4e0a\u7535\u521d\u59cb\u5316\uff0c\u5c06E2PROM\u4e2d\u7684\u4fe1\u606f\u8bfb\u5230PCI\u8bbe\u5907\u7684\u914d\u7f6e\u7a7a\u95f4\u4e2d\u4f5c\u4e3a\u521d\u59cb\u503c\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u7531\u786c\u4ef6\u5b8c\u6210\u3002","title":"PCI Agent \u914d\u7f6e\u7a7a\u95f4"},{"location":"misc/pcie.html#pci_8","text":"PCI\u6865\u7684\u914d\u7f6e\u7a7a\u95f4\u5728\u7cfb\u7edf\u8f6f\u4ef6\u904d\u5386PCI\u603b\u7ebf\u6811\u65f6\u8fdb\u884c\u914d\u7f6e\uff0c\u7cfb\u7edf\u8f6f\u4ef6\u4e0d\u9700\u8981\u4e13\u95e8\u7684\u9a71\u52a8\u7a0b\u5e8f\u8bbe\u7f6ePCI\u6865\u7684\u4f7f\u7528\u65b9\u6cd5\uff0cPCI\u6865\u4e00\u822c\u6765\u8bb2\u662f\u900f\u660e\u7684\u3002 PCI\u6865\u6709\u4e24\u7ec4BAR\u5bc4\u5b58\u5668\uff0c\u5982\u679cPCI\u6865\u672c\u8eab\u4e0d\u5b58\u5728\u79c1\u6709\u5bc4\u5b58\u5668\uff0c\u90a3\u4e48BAR\u5bc4\u5b58\u5668\u53ef\u4ee5\u4e0d\u4f7f\u7528(\u900f\u660e\u6865)\uff0c\u521d\u59cb\u5316\u4e3a0. PCI Bridge \u7684\u914d\u7f6e\u7a7a\u95f4\u76f8\u6bd4\u8f83 PCI Agent \u7684\u914d\u7f6e\u7a7a\u95f4\uff0c\u591a\u4e86 Bus Number \u5bc4\u5b58\u5668 Subordinate Bus Number \u5bc4\u5b58\u5668\u5b58\u653e\u5f53\u524dPCI\u5b50\u6811\u4e2d\u7f16\u53f7\u6700\u5927\u7684PCI\u603b\u7ebf\u53f7 Secondary Bus Number \u5b58\u653e\u5f53\u524dPCI\u6865Secondary Bus\u4f7f\u7528\u7684\u603b\u7ebf\u53f7\uff0c\u4e5f\u662f\u8be5\u5b50\u6811\u4e2d\u7f16\u53f7\u6700\u5c0f\u7684\u603b\u7ebf\u53f7 Primary Bus Number \u5b58\u653e\u8be5PCI\u6865\u4e0a\u6e38\u7684PCI\u603b\u7ebf\u53f7","title":"PCI\u6865\u914d\u7f6e\u7a7a\u95f4"},{"location":"misc/pcie.html#pcibus","text":"PCI\u6865\u7684\u914d\u7f6e\u7a7a\u95f4\u4e2d\u6709\u4e09\u4e2a Bus Number \u5bc4\u5b58\u5668\uff0c\u8fd9\u4e09\u4e2a\u5bc4\u5b58\u5668\u662f\u9700\u8981\u8f6f\u4ef6\u5728\u521d\u59cb\u5316PCI\u603b\u7ebf\u7684\u65f6\u5019\u586b\u5199\u7684\uff0c\u4e5f\u5c31\u662fPCI\u603b\u7ebf\u6811Bus\u53f7\u7684\u521d\u59cb\u5316\u3002 \u7cfb\u7edf\u8f6f\u4ef6\u5728\u904d\u5386\u5f53\u524dPCI\u603b\u7ebf\u6811\u65f6\uff0c\u9700\u8981\u9996\u5148\u5bf9\u8fd9\u4e9bPCI\u603b\u7ebf\u8fdb\u884c\u7f16\u53f7\uff0c\u5373\u521d\u59cb\u5316PCI\u6865\u7684Primary\u3001Secondary\u3001Subordinate Bus Number \u5bc4\u5b58\u5668\u3002\u7f16\u53f7\u65f6\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u7b97\u6cd5\u3002\u518d\u6b21\u5f3a\u8c03\uff0c\u5728\u4e00\u68f5PCI\u603b\u7ebf\u6811\u4e2d\u6709\u591a\u5c11\u4e2aPCI\u6865\uff08\u5305\u542bHOST\u4e3b\u6865\uff09,\u5c31\u6709\u591a\u5c11\u6761PCI\u603b\u7ebf\u3002 \u5728PCI\u603b\u7ebf\u62d3\u6251\u56fe\u4e2d\uff0cHOST\u4e3b\u6865X\u76f4\u63a5\u51fa\u7684PCI\u603b\u7ebf\u5c31\u662fPCI Bus 0 HOST\u4e3b\u6865\u626b\u63cf\uff08\u8fd9\u4e2a\u626b\u63cf\u5177\u4f53\u662f\u600e\u6837\u4e00\u79cd\u52a8\u4f5c\uff1f\uff09PCI\u603b\u7ebf0\u4e0a\u7684\u8bbe\u5907\uff0c\u7cfb\u7edf\u8f6f\u4ef6\u9996\u5148\u5ffd\u7565\u8fd9\u6761\u603b\u7ebf\u4e0a\u7684\u6240\u6709PCI Agent, HOST\u4e3b\u6865\u5c31\u53d1\u73b0\u4e86PCI\u6865\uff0c\u547d\u540d\u4e3aX1, \u628a\u8fd9\u4e2a\u6865\u51fa\u7684\u603b\u7ebf\u5b9a\u4e3aPCI Bus 1, \u5c06PCI\u6865X1\u7684Primary Bus Number \u8d4b\u4e3a0\uff0c \u56e0\u4e3a\u8fd9\u4e2a\u6865\u662f\u63a5\u5728PCI\u603b\u7ebf0\u4e0a\u7684\uff0c\u628aSecondary Bus Number \u5bc4\u5b58\u5668\u8d4b\u503c\u4e3a1\uff0c\u56e0\u4e3a\u5b83\u5f15\u51fa\u7684PCI\u603b\u7ebf\u4e3aBus 1; \u7ee7\u7eed\u626b\u63cfPCI Bus 1\uff0c\u53c8\u53d1\u73b0\u4e86\u4e00\u4e2a\u6865\uff0c\u547d\u540d\u4e3aPCI\u6865X2, \u628a\u8fd9\u4e2a\u6865\u51fa\u7684\u603b\u7ebf\u5b9a\u4e3aPCI Bus 2, \u5c06PCI\u6865X2\u7684Primary Bus Number\u4e3a1\uff0cSecondary Bus Number\u4e3a2\uff1b \u7ee7\u7eed\u626b\u63cfPCI Bus 2\uff0c\u53d1\u73b0\u4e86\u65b0\u6865\uff0c\u547d\u540d\u4e3aPCI\u6865X3\uff0c\u5c06\u8fd9\u4e2a\u6865\u51fa\u7684\u603b\u7ebf\u5b9a\u4e3aPCI Bus 3, \u5c06PCI\u6865X3\u7684Primary Bus Number\u8bbe\u7f6e\u4e3a2\uff0cSecondary Bus Number\u8bbe\u7f6e\u4e3a3\uff1b \u7ee7\u7eed\u626b\u63cfPCI Bus 3\uff0c\u6ca1\u6709\u53d1\u73b0PCI\u6865\uff0c\u4e5f\u5c31\u662f\u8bf4PCI\u603b\u7ebf3\u4e0b\u9762\u4e0d\u4f1a\u6709\u65b0\u7684\u603b\u7ebf\u4e86\uff0c\u5c31\u628aPCI\u6865X3\u7684Subordinate Bus Number \u8d4b\u503c\u4e3a3\uff0c\u5e76\u4e14\u56de\u9000\u5230PCI Bus 2; \u7ee7\u7eed\u626b\u63cfPCI Bus 2\uff0c\u6ca1\u6709\u53d1\u73b0\u9664PCI\u6865X3\u4e4b\u5916\u7684\u6865\uff0c\u628aPCI\u6865X2\u7684Subordinate Bus Number \u4e5f\u8d4b\u503c\u4e3a3\uff0c\u5e76\u56de\u9000\u5230PCI Bus 1; \u7ee7\u7eed\u626b\u63cfPCI Bus 1, \u6ca1\u6709\u53d1\u73b0\u9664PCI\u6865X2\u4e4b\u5916\u7684\u6865\uff0c\u628aPCI\u6865X1\u7684Subordinate Bus Number \u4e5f\u8d4b\u503c\u4e3a3\uff0c\u5e76\u56de\u9000\u5230PCI Bus 0; \u7ee7\u7eed\u626b\u63cfPCI Bus 0, \u53d1\u73b0\u4e86\u65b0\u6865\uff0c\u547d\u540d\u4e3aPCI\u6865X4\uff0c\u5c06PCI\u6865X4\u7684\u51fa\u7684\u603b\u7ebf\u5b9a\u4e3aPCI Bus 4, \u5c06PCI\u6865X4\u7684Primary Bus Number\u8bbe\u7f6e\u4e3a0\uff0cSecondary Bus Number\u8bbe\u7f6e\u4e3a4\uff1b \u7ee7\u7eed\u626b\u63cfPCI Bus 4\uff0c\u6ca1\u6709\u53d1\u73b0\u65b0\u6865\uff0c\u628aPCI\u6865X4\u7684Subordinate Bus Number \u8d4b\u503c\u4e3a4\uff0c \u5e76\u56de\u9000\u5230PCI Bus 0; \u7ee7\u7eed\u626b\u63cfPCI Bus 0, \u6ca1\u6709\u53d1\u73b0\u65b0\u6865\uff0c\u7ed3\u675f\u904d\u5386\uff0c\u5b8c\u6210Bus\u53f7\u5206\u914d\u3002","title":"PCI\u603b\u7ebf\u6811Bus\u53f7\u7684\u521d\u59cb\u5316"},{"location":"misc/pcie.html#pci_9","text":"","title":"PCI\u8bbe\u5907\u914d\u7f6e\u7a7a\u95f4\u7684\u8bbf\u95ee\u673a\u5236"},{"location":"misc/pcie.html#id","text":"HOST\u4e3b\u6865\u901a\u8fc7\u914d\u7f6e\u8bfb\u5199\u603b\u7ebf\u4e8b\u52a1\uff08\u8fd9\u662f\u603b\u7ebf\u4e8b\u52a1\u7684\u4e00\u79cd\uff0c\u4ec0\u4e48\u662f\u603b\u7ebf\u4e8b\u52a1\uff1f\u8fd9......\uff09\u8bbf\u95ee\u914d\u7f6e\u7a7a\u95f4\u3002 \u914d\u7f6e\u8bfb\u5199\u603b\u7ebf\u4e8b\u52a1\u901a\u8fc7ID\u53f7\u8fdb\u884c\u5bfb\u5740\u3002ID\u53f7\u7531\u603b\u7ebf\u53f7\u3001\u8bbe\u5907\u53f7\u3001\u529f\u80fd\u53f7\u7ec4\u6210\u3002 \u603b\u7ebf\u53f7\uff1a\u5728\u4e00\u68f5PCI\u603b\u7ebf\u6811\u4e2d\uff0c\u6709\u51e0\u4e2aPCI\u6865\u5c31\u6709\u51e0\u6761PCI\u603b\u7ebf\uff08\u5305\u542bHOST\u4e3b\u6865\uff09\uff1b\u603b\u7ebf\u53f7\u7531\u7cfb\u7edf\u8f6f\u4ef6\u51b3\u5b9a\u3002\u7cfb\u7edf\u8f6f\u4ef6\u4f7f\u7528DFS(\u6df1\u5ea6\u4f18\u5148)\u7b97\u6cd5\u626b\u63cfPCI\u603b\u7ebf\u6811\u4e0a\u7684\u6240\u6709PCI\u603b\u7ebf\uff0c\u5e76\u8fdb\u884c\u7f16\u53f7\u3002 \u8bbe\u5907\u53f7\uff1a\u7531PCI\u8bbe\u5907\u7684IDSEL\u4fe1\u53f7\u4e0ePCI\u603b\u7ebf\u5730\u5740\u7ebf\u7684\u8fde\u63a5\u5173\u7cfb\u786e\u5b9a\u3002 \u529f\u80fd\u53f7\uff1a\u4e0ePCI\u8bbe\u5907\u7684\u5177\u4f53\u8bbe\u8ba1\u76f8\u5173\uff0c\u4e00\u4e2aPCI\u8bbe\u5907\u4e2d\u6700\u591a\u67098\u4e2a\u529f\u80fd\u53f7\uff0c\u6bcf\u4e2a\u529f\u80fd\u8bbe\u5907\u6709\u81ea\u5df1\u7684\u914d\u7f6e\u7a7a\u95f4 HOST\u4e3b\u6865\u4f7f\u7528\u5bc4\u5b58\u5668\u53f7\u6765\u8bbf\u95eePCI\u8bbe\u5907\u914d\u7f6e\u7a7a\u95f4\u7684\u67d0\u4e2a\u5bc4\u5b58\u5668\u3002","title":"ID\u5bfb\u5740"},{"location":"misc/pcie.html#_3","text":"PCI\u603b\u7ebf\u6709\u4e24\u7c7b\u914d\u7f6e\u8bf7\u6c42\uff1a Type 00h \u914d\u7f6e\u8bf7\u6c42. \u8bbf\u95ee\u4e0eHOST\u4e3b\u6865\u6216\u8005PCI\u6865\u76f4\u63a5\u76f8\u8fde\u7684PCI Agent\u6216\u8005PCI\u6865 Type 01h \u914d\u7f6e\u8bf7\u6c42. \u8bbf\u95ee\u6ca1\u6709\u76f4\u63a5\u76f8\u8fde\u7684PCI Agent \u6216\u8005PCI\u6865 \u4ee5x86\u5904\u7406\u5668\u6765\u8bb2\uff0cPCI\u63a7\u5236\u5668\u63d0\u4f9b\u4e86CONFIG_ADDRESS\u5bc4\u5b58\u5668\u548cCONFIG_DATA\u5bc4\u5b58\u5668\uff0c\u5c31\u662f\u901a\u8fc7\u8fd9\u4e24\u4e2a\u5bc4\u5b58\u5668\u6765\u63a7\u5236\u914d\u7f6e\u8bfb\u5199\u603b\u7ebf\u4e8b\u52a1 CONFIG_ADDRESS\u5bc4\u5b58\u5668\u4e0eType 01h\u914d\u7f6e\u8bf7\u6c42\u7684\u5bf9\u5e94\u5173\u7cfb CONFIG_ADDRESS\u5bc4\u5b58\u5668\u4e0eType 00h\u914d\u7f6e\u8bf7\u6c42\u7684\u5bf9\u5e94\u5173\u7cfb \u5728PCI\u603b\u7ebf\u4e2d\uff0c\u53ea\u6709PCI\u6865\u80fd\u591f\u63a5\u6536Type 01h \u914d\u7f6e\u8bf7\u6c42\uff0cType 01h \u914d\u7f6e\u8bf7\u6c42\u4e0d\u80fd\u76f4\u63a5\u53d1\u5411\u6700\u7ec8\u7684PCI Agent\u8bbe\u5907\uff0c\u800c\u53ea\u80fd\u7531PCI\u6865\u5c06\u5176\u8f6c\u6362\u4e3aType 01h \u8bf7\u6c42\u7ee7\u7eed\u53d1\u5411\u5176\u4ed6PCI\u6865\u6216\u8005\u8f6c\u6362\u4e3aType 00h \u914d\u7f6e\u8bf7\u6c42\u53d1\u5411PCI Agent \u8bbe\u5907 \u5728PCI\u603b\u7ebf\u62d3\u6251\u4e2d\uff0c\u52a0\u5165\u8981\u8bbf\u95eePCI\u8bbe\u590701 HOST\u5904\u7406\u5668\u8bbf\u95eePCI01\u7684\u914d\u7f6e\u7a7a\u95f4\uff0c\u53d1\u73b0PCI\u8bbe\u590701\u4e0eHOST\u4e3b\u6865\u76f4\u63a5\u76f8\u8fde\uff0c \u6240\u4ee5\u5c06\u76f4\u63a5\u4f7f\u7528Type 00h \u914d\u7f6e\u8bf7\u6c42\u8bbf\u95ee\u8be5\u8bbe\u5907\u7684\u914d\u7f6e\u7a7a\u95f4 \u5c06CONFIG_ADDRESS \u5bc4\u5b58\u5668\u7684Enabled\u4f4d\u7f6e1\uff0c Bus Number\u53f7\u7f6e\u4e3a0\uff0c\u5e76\u5bf9\u8be5\u5bc4\u5b58\u5668\u7684Device, Function, Register Number\u5b57\u6bb5\u8d4b\u503c \u5f53HOST\u5904\u7406\u5668\u5bf9CONFIG_DATA\u5bc4\u5b58\u5668\u8bbf\u95ee\u65f6\uff0c HOST\u4e3b\u6865\u5c06\u5b58\u653e\u5728CONFIG_ADDRESS\u5bc4\u5b58\u5668\u4e2d\u7684\u6570\u503c\u8f6c\u6362\u4e3aType 00h\u914d\u7f6e\u8bf7\u6c42\uff0c \u5e76\u53d1\u9001\u5230PCI\u603b\u7ebf0 PCI01\u8bbe\u5907\u63a5\u6536\u5230\u8fd9\u4e2aType 00h\u914d\u7f6e\u8bf7\u6c42\uff0c\u8fdb\u884c\u4ea4\u4e92\u3002 \u5728PCI\u603b\u7ebf\u62d3\u6251\u4e2d\uff0c\u5047\u5982\u8981\u8bbf\u95eePCI\u8bbe\u590731 HOST\u5904\u7406\u5668\u8bbf\u95eePCI\u8bbe\u590731\u7684\u914d\u7f6e\u7a7a\u95f4\uff0c\u9700\u8981\u901a\u8fc7HOST\u4e3b\u6865\u3001PCI\u6865X1\u3001X2\u548cX3\uff0c\u6700\u5230\u8fbePCI31\u3002 \u9996\u5148\u5c06CONFIG_ADDRESS\u7684 Bus Number \u7f6e\u4e3a3\uff1b \u7136\u540e\u5f53HOST\u5904\u7406\u5668\u5bf9CONFIG_DATA\u5bc4\u5b58\u5668\u8fdb\u884c\u8bfb\u5199\u8bbf\u95ee\u65f6\uff0cHOST\u4e3b\u6865\u5c06Type 01h \u7684\u914d\u7f6e\u8bf7\u6c42\u53d1\u9001\u5230PCI\u603b\u7ebf0\uff1b PCI Bus 0\u4e0a\u7684PCI\u6865X1\u63a5\u6536\u914d\u7f6e\u8bf7\u6c42\u3002 PCI\u6865X1\u7684Secondary Bus Number\u4e3a1\uff0cSubordinate Bus Number\u4e3a3\uff0c 1 < Bus Number <=3, \u6240\u4ee5PCI\u6865X1\u63a5\u6536\u6765\u81eaPCI\u603b\u7ebf0\u7684Type 01h\u914d\u7f6e\u8bf7\u6c42\uff0c\u5e76\u5c06\u8fd9\u4e2a\u914d\u7f6e\u8bf7\u6c42\u53d1\u9001\u5230PCI Bus 1\uff1b PCI Bus 1\u4e0a\u7684PCI\u6865X2\u63a5\u6536\u914d\u7f6e\u8bf7\u6c42\u3002 PCI\u6865X2\u7684Secondary Bus Number\u4e3a2\uff0cSubordinate Bus Number\u4e3a3\uff0c 2 < Bus Number <= 3, \u6240\u4ee5PCI\u6865X2\u63a5\u6536\u6765\u81eaPCI\u603b\u7ebf1\u7684Type 01h\u914d\u7f6e\u8bf7\u6c42, \u5e76\u5c06\u8fd9\u4e2a\u914d\u7f6e\u8bf7\u6c42\u53d1\u9001\u5230PCI Bus 2\uff1b PCI Bus 2\u4e0a\u7684PCI\u6865X3\u63a5\u6536\u914d\u7f6e\u8bf7\u6c42\u3002 PCI\u6865X3\u7684Secondary Bus Number\u4e3a3\uff0cSubordinate Bus Number\u4e3a3\uff0c\u5219\u8981\u8bbf\u95ee\u7684\u8bbe\u5907\u5c31\u5728\u8fd9\u4e2a\u6865\u4e0b\uff0c PCI\u6865X3\u5c06Type 01h\u7684\u603b\u7ebf\u4e8b\u52a1\u8f6c\u6362\u6210Type 00h\u7684\u603b\u7ebf\u4e8b\u52a1\uff0c\u53d1\u9001\u5230PCI\u603b\u7ebf3\uff0c PCI31 \u63a5\u6536\u5230\u4e86\u8bf7\u6c42\uff0c\u8fdb\u884c\u4ea4\u4e92\u3002","title":"\u914d\u7f6e\u8bf7\u6c42"},{"location":"misc/pcie.html#device","text":"PCI\u8bbe\u5907\u7684IDSEL\u4fe1\u53f7\u4e0ePCI\u603b\u7ebf\u7684AD[31:0]\u4fe1\u53f7\u7684\u8fde\u63a5\u5173\u7cfb\u51b3\u5b9a\u4e86\u8be5\u8bbe\u5907\u5728\u8fd9\u6761PCI\u603b\u7ebf\u7684\u8bbe\u5907\u53f7\u3002 \u6bcf\u4e00\u4e2aPCI\u8bbe\u5907\u90fd\u4f7f\u7528\u72ec\u7acb\u7684IDSEL\u4fe1\u53f7\uff0c\u5176\u4e2dCONFIG_ADDRESS\u5bc4\u5b58\u5668\u4e2d\u7684Device Number \u5b57\u6bb5\u5171\u67095\u4f4d\uff0c\u53ef\u4ee5\u8868\u793a32\u4e2a\u8bbe\u5907\uff0c\u800cAD[31:11]\u53ea\u670921\u4f4d\uff0c\u8fd9\u610f\u5473\u7740\u4e00\u6761PCI\u603b\u7ebf\u4e0a\u6700\u591a\u80fd\u63a521\u4e2a\u8bbe\u5907\u3002","title":"Device\u53f7\u7684\u5206\u914d"},{"location":"misc/pcie.html#pci_10","text":"\u5b58\u50a8\u5668\u57df\u4e0ePCI\u603b\u7ebf\u57df\u7684\u6620\u5c04 PCI Agent \u8bbe\u5907\u4e4b\u95f4\u4ee5\u53caHOST \u5904\u7406\u5668\u548cPCI Agent\u8bbe\u5907\u4e4b\u95f4\u53ef\u4ee5\u4f7f\u7528\u5b58\u50a8\u5668\u8bfb\u5199\u548cIO\u8bfb\u5199\u7b49\u603b\u7ebf\u4e8b\u52a1\u8fdb\u884c\u6570\u636e\u4f20\u9001\u9001\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c PCI\u6865\u4e0d\u4e4b\u95f4\u4e0ePCI\u8bbe\u5907\u6216\u8005HOST\u4e3b\u6865\u8fdb\u884c\u6570\u636e\u4ea4\u6362\uff0c\u4ec5\u4ec5\u662f\u8f6c\u53d1\u6765\u81eaPCI Agent \u6216\u8005 HOST \u4e3b\u6865\u7684\u6570\u636e\u3002 \u5728PCI Agent \u8bbe\u5907\u8fdb\u884c\u6570\u636e\u4f20\u9001\u4e4b\u524d\uff0c\u7cfb\u7edf\u8f6f\u4ef6\u9700\u8981\u521d\u59cb\u5316PCI Agent \u8bbe\u5907\u7684 BAR0 ~ BAR5\u5bc4\u5b58\u5668\uff0c\u4ee5\u53caPCI\u6865\u7684Base, Limit\u5bc4\u5b58\u5668\uff0c\u7cfb\u7edf\u8f6f\u4ef6\u4f7f\u7528DFS\u7b97\u6cd5\u5bf9PCI\u603b\u7ebf\u8fdb\u884c\u904d\u5386\u65f6\uff0c\u5b8c\u6210\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u521d\u59cb\u5316\uff0c\u5206\u914d\u8fd9\u4e9b\u8bbe\u5907\u5728PCI\u603b\u7ebf\u57df\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u7136\u540ePCI\u8bbe\u5907\u5c31\u53ef\u4ee5\u4f7f\u7528PCI\u603b\u7ebf\u5730\u5740\u8fdb\u884c\u6570\u636e\u4f20\u8f93\u4e86\u3002 PCI Agent \u7684BAR0 ~ 5, \u4ee5\u53ca PCI bridge \u7684 Base \u5bc4\u5b58\u5668\u90fd\u662f\u5b58\u7684PCI\u603b\u7ebf\u5730\u5740\uff0c\u8fd9\u4e9b\u5730\u5740\u5728\u5904\u7406\u5668\u7684\u5b58\u50a8\u5668\u57df\u6709\u5bf9\u5e94\u7684\u6620\u50cf\uff0c\u5982\u679c\u4e00\u4e2aPCI\u8bbe\u5907\u7684BAR\u7a7a\u95f4\u5728\u5904\u7406\u5668\u7684\u5b58\u50a8\u5668\u57df\u6ca1\u6709\u6620\u50cf\uff0c\u5904\u7406\u5668\u5c06\u4e0d\u80fd\u8bbf\u95eePCI\u8bbe\u5907\u7684BAR\u7a7a\u95f4\u3002","title":"PCI \u603b\u7ebf\u6570\u636e\u4ea4\u6362"},{"location":"misc/pcie.html#pci_11","text":"HOST\u4e3b\u6865\u9694\u79bb\u4e86PCI\u603b\u7ebf\u57df\u4e0e\u5b58\u50a8\u5668\u57df\u3002\u5728PCI\u603b\u7ebf\u521d\u59cb\u5316\u65f6\uff0c\u4f1a\u5728CPU\u5b58\u50a8\u5668\u57df\u4e2d\u5efa\u7acbPCI\u8bbe\u5907\u7684\u5b58\u50a8\u5668\u5730\u5740\u7a7a\u95f4\u7684\u6620\u5c04\uff0c\u5f53\u5904\u7406\u5668\u8bbf\u95ee\u8bbe\u5907\u7684\u5730\u5740\u7a7a\u95f4\u65f6\uff0c\u9996\u5148\u8bbf\u95ee\u8be5\u8bbe\u5907\u5728\u5b58\u50a8\u5668\u57df\u4e2d\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u5e76\u4e14\u901a\u8fc7HOST\u4e3b\u6865\u7684\u5730\u5740\u7a7a\u95f4\u8f6c\u6362\u4e3aPCI\u603b\u7ebf\u57df\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u518d\u4f7f\u7528PCI\u603b\u7ebf\u4e8b\u52a1\u5c06\u6570\u636e\u53d1\u9001\u5230\u6307\u5b9a\u7684PCI\u8bbe\u5907\u4e2d","title":"\u5904\u7406\u5668\u8bbf\u95eePCI\u8bbe\u5907\u5730\u5740\u7a7a\u95f4"},{"location":"misc/pcie.html#pci_12","text":"PCI\u8bbe\u5907\u8bbf\u95ee\u5b58\u50a8\u5668\u57df\u7684\u5730\u5740\u7a7a\u95f4\u65f6\u901a\u8fc7DMA\u5b8c\u6210\u7684\u3002\u5904\u7406\u5668\u9700\u8981\u5c06\u5b58\u50a8\u5668\u57df\u7684\u5730\u5740\u7a7a\u95f4\u53cd\u5411\u6620\u5c04\u5230PCI\u603b\u7ebf\u5730\u5740\u7a7a\u95f4\u3002\u9996\u5148\u8bbf\u95ee\u8be5\u50a8\u5b58\u5668\u5730\u5740\u7a7a\u95f4\u5bf9\u5e94\u7684PCI\u603b\u7ebf\u5730\u5740\u7a7a\u95f4\uff0c\u901a\u8fc7HOST\u4e3b\u6865\u5c06\u8fd9\u4e2a\u5730\u5740\u7a7a\u95f4\u8f6c\u6362\u4e3a\u5b58\u50a8\u5668\u5730\u5740\u7a7a\u95f4\uff0c\u518d\u7531DDR\u63a7\u5236\u5668\u5bf9\u5b58\u50a8\u5668\u8fdb\u884c\u8bfb\u5199\u8bbf\u95ee\u3002 X86\u5904\u7406\u5668\u7684HOST\u4e3b\u6865\u4e2d\uff0c\u5b58\u50a8\u5668\u57df\u7684\u5b58\u50a8\u5668\u5730\u5740\u4e0ePCI\u603b\u7ebf\u57df\u7684\u5730\u5740\u76f8\u7b49\u3002","title":"PCI\u8bbe\u5907\u8bbf\u95ee\u5b58\u50a8\u5668\u57df\u7684\u5730\u5740\u7a7a\u95f4"},{"location":"misc/pcie.html#pcibarpci-baselimit","text":"","title":"PCI\u8bbe\u5907BAR\u5bc4\u5b58\u5668\u548cPCI\u6865 Base\u3001Limit\u5bc4\u5b58\u5668\u7684\u521d\u59cb\u5316"},{"location":"misc/pcie.html#io","text":"PCI\u6865\u914d\u7f6e\u7a7a\u95f4\u7684\u56fe\u4e2d\uff0c\u6709\u4e00\u4e9bLimit \u548c Base \u7684\u5bc4\u5b58\u5668\uff0c\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u4f5c\u7528\u5c31\u662f\u8bb0\u5f55\u8be5PCI\u6865\u6240\u7ba1\u7406\u7684PCI\u5b50\u6811\u7684\u5b58\u50a8\u5668\u5730\u5740\u7a7a\u95f4\u6216\u8005I/O\u5730\u5740\u7a7a\u95f4\u7684\u57fa\u5730\u5740\u548c\u957f\u5ea6\u3002 I/O Limit I/O Base Memory Limit Memory Base \u73b0\u5728\u5047\u8bbe\u5982\u4e0b\uff1a CPU\u7684\u5b58\u50a8\u5668\u57df\u7684 0xF000-0000 ~ 0xF800-0000 \u4e0e PCI\u603b\u7ebf\u57df\u76840x7000-0000 ~ 0x7800-0000 \u662f\u6620\u5c04\u5173\u7cfb \u5b9e\u9645\u60c5\u51b5\u5462\uff1f PCI\u603b\u7ebf\u57df\u7684\u8fd9\u4e2a\u8d77\u59cb\u5730\u5740\u662f\u5982\u4f55\u786e\u5b9a\u7684\uff1f PCI Agent \u8bbe\u5907\u53ea\u4f7f\u7528BAR0 \u5bc4\u5b58\u5668 \u5b9e\u9645\u60c5\u51b5\u5462\uff1f\u4e00\u822c\u90fd\u7528\u51e0\u4e2a\uff1f PCI Agent \u7684\u5b58\u50a8\u5668\u7a7a\u95f4\u5927\u5c0f\u4e3a16MB(0x100-0000) \u5b9e\u9645\u60c5\u51b5\u5462\uff1f\u8fd9\u4e2a\u7a7a\u95f4\u5927\u5c0f\u662f\u5982\u4f55\u786e\u5b9a\u7684\u5462\uff1f BAR\u5bc4\u5b58\u5668\u521d\u59cb\u5316\u548cPCI\u603b\u7ebf\u7684Bus\u53f7\u5206\u914d\u662f\u5728\u540c\u4e00\u4e2a\u52a8\u4f5c\u4e2d\u5b8c\u6210\u7684 \u8f6f\u4ef6\u904d\u5386\u5230PCI\u6865X3\u540e\uff0c\u6ca1\u6709\u518d\u63a2\u6d4b\u5230PCI Bus 3\u4e0b\u9762\u6709PCI\u6865\uff0c\u8fd9\u65f6\u5019\u5c31\u4e3aPCI Bus 3 \u4e0b\u9762\u7684PCI Agent\u7684BAR\u5bc4\u5b58\u5668\u8d4b\u503c\uff08\u5f53\u7136\u5c31\u662f\u4ece0x7000-0000 ~ 0x7800-0000\u4e2d\u5206\u914d\uff09 PCI-Agent31.BAR0 = 0x7000-0000; PCI-Agent32.BAR0 = 0x7100-0000; \u4e3aPCI\u6865X3\u7684Base, Limit \u5bc4\u5b58\u5668\u8d4b\u503c PCI-BridgeX3.Memory-Base = 0x7000-0000; PCI-BridgeX3.Memory-Limit = 0x200-0000; \u56de\u9000\u5230PCI Bus 2, \u53d1\u73b0PCI\u8bbe\u590721\uff0c PCI-Agent21.BAR0 = 0x7200-0000; \u4e3aPCI\u6865X2\u7684Base, Limit \u5bc4\u5b58\u5668\u8d4b\u503c PCI-BridgeX2.Memory-Base = 0x7000-0000; PCI-BridgeX3.Memory-Limit = 0x300-0000; \u56de\u9000\u5230PCI Bus 1, \u53d1\u73b0PCI\u8bbe\u590711\uff0c PCI-Agent11.BAR0 = 0x7300-0000; \u4e3aPCI\u6865X1\u7684Base, Limit \u5bc4\u5b58\u5668\u8d4b\u503c PCI-BridgeX1.Memory-Base = 0x7000-0000; PCI-BridgeX3.Memory-Limit = 0x400-0000; \u56de\u9000\u5230PCI Bus 0, \u53d1\u73b0PCI\u6865X4, \u8fdb\u5165PCI Bus 4, \u6ca1\u6709\u518d\u63a2\u6d4b\u5230PCI Bus 4 \u4e0b\u9762\u6709PCI\u6865\uff0c\u8fd9\u65f6\u5019\u5c31\u4e3aPCI Bus 4 \u4e0b\u9762\u7684PCI Agent\u7684BAR\u5bc4\u5b58\u5668\u8d4b\u503c PCI-Agent41.BAR0 = 0x7400-0000; PCI-Agent42.BAR0 = 0x7500-0000; \u4e3aPCI\u6865X4\u7684Base, Limit \u5bc4\u5b58\u5668\u8d4b\u503c PCI-BridgeX4.Memory-Base = 0x7400-0000; PCI-BridgeX4.Memory-Limit = 0x200-0000; \u56de\u9000\u5230PCI Bus 0, \u6ca1\u6709\u518d\u63a2\u6d4b\u5230PCI Bus 0\u4e0b\u9762\u6709PCI\u6865\uff0c \u8fd9\u65f6\u5019\u5c31\u4e3aPCI Bus 4 \u4e0b\u9762\u7684PCI Agent\u7684BAR\u5bc4\u5b58\u5668\u8d4b\u503c PCI-Agent01.BAR0 = 0x7600-0000; \u904d\u5386\u7ed3\u675f","title":"\u5b58\u50a8\u5668\u7a7a\u95f4\u4e0eIO\u7a7a\u95f4"},{"location":"misc/pcie.html#_4","text":"\u5f53\u4e00\u4e2a\u5b58\u50a8\u5668\u8bfb\u5199\u603b\u7ebf\u4e8b\u52a1\u5230\u8fbePCI\u603b\u7ebf\u65f6\uff0c\u5728\u8fd9\u6761\u603b\u7ebf\u4e0a\u6240\u4ee5\u7684\u8bbe\u5907\u5c06\u8fdb\u884c\u5730\u5740\u8bd1\u7801\uff0c\u5982\u679c\u5f53\u524d\u603b\u7ebf\u4e8b\u52a1\u4f7f\u7528\u7684\u5730\u5740\u5728\u67d0\u4e2aPCI\u8bbe\u5907\u7684BAR\u7a7a\u95f4\u4e2d\uff0c\u8be5PCI\u8bbe\u5907\u5c06\u4f7f\u80fdDVESEL#\u4fe1\u53f7\uff0c\u8ba4\u9886\u603b\u7ebf\u4e8b\u52a1\u3002 Posted \u4f20\u9001\u65b9\u5f0f\u4e0eNon-Posted \u4f20\u9001\u65b9\u5f0f Posted\u4f20\u9001\u65b9\u5f0f\uff0c\u6570\u636e\u901a\u8fc7PCI\u6865\u540e\u5c06\u7ed3\u675f\u4e0a\u4e00\u7ea7\u603b\u7ebf\u7684PCI\u4e8b\u52a1\uff0c\u4ece\u800c\u4e0a\u4e00\u7ea7PCI\u603b\u7ebf\u53ef\u4ee5\u88ab\u5176\u4ed6PCI\u8bbe\u5907\u4f7f\u7528\u3002 Non-Posted \u4f20\u9001\u65b9\u5f0f\uff0c\u5f53\u6570\u636e\u8fbe\u5230\u76ee\u6807\u8bbe\u5907\u540e\uff0c\u76ee\u6807\u8bbe\u5907\u9700\u8981\u5411\u4e3b\u8bbe\u5907\u53d1\u51fa\u56de\u5e94\uff0c\u5f53\u4e3b\u8bbe\u5907\u6536\u5230\u8fd9\u4e2a\u56de\u5e94\u540e\u624d\u80fd\u7ed3\u675f\u6574\u4e2a\u603b\u7ebf\u4e8b\u52a1\u3002 \u5904\u7406\u5668\u5411PCI\u8bbe\u5907\u8fdb\u884c\u8bfb\u64cd\u4f5c\u4f7f\u7528\u7684\u662fNon-Posted\u65b9\u5f0f\uff0c\u5199\u64cd\u4f5c\u4f7f\u7528\u7684\u662fPosted\u65b9\u5f0f PCI\u8bbe\u5907\u7684DMA\u5199\u4f7f\u7528Posted\u65b9\u5f0f\uff0cDMA\u8bfb\u4f7f\u7528Non-Posted\u65b9\u5f0f","title":"\u5730\u5740\u8bd1\u7801"},{"location":"misc/pcie.html#pci_13","text":"PCI\u8bbe\u5907\u4e0e\u5b58\u50a8\u5668\u76f4\u63a5\u8fdb\u884c\u6570\u636e\u4ea4\u6362\u7684\u8fc7\u7a0b\u662f\u901a\u8fc7DMA\u5b9e\u73b0\u7684\u3002\u652f\u6301DMA\u4f20\u9012\u7684PCI\u8bbe\u5907\u53ef\u4ee5\u5728BAR\u7a7a\u95f4\u4e2d\u8bbe\u7f6e\u4e24\u4e2a\u5bc4\u5b58\u5668\uff0c\u5206\u522b\u4fdd\u5b58\u76ee\u6807\u5730\u5740\u548c\u4f20\u9001\u5927\u5c0f\u3002 PCI\u8bbe\u5907\u8fdb\u884cDMA\u64cd\u4f5c\u65f6\uff0c\u4f7f\u7528\u7684\u76ee\u7684\u5730\u5740\u662fPCI\u603b\u7ebf\u57df\u7684\u7269\u7406\u5730\u5740\uff0c\u800c\u4e0d\u662f\u5b58\u50a8\u5668\u57df\u7684","title":"PCI\u8bbe\u5907\u8bfb\u5199\u4e3b\u5b58\u50a8\u5668"},{"location":"misc/pcie.html#_5","text":"PCI\u63d0\u4f9b\u4e86INTA#,INTB#,INTC#,INTD#\u4fe1\u53f7\u5411\u5904\u7406\u5668\u53d1\u51fa\u4e2d\u65ad\u8bf7\u6c42\uff0c\u540c\u65f6\u4e5f\u63d0\u4f9b\u4e86MSI\u673a\u5236\u5411\u5904\u7406\u5668\u63d0\u4ea4\u4e2d\u65ad\u8bf7\u6c42","title":"\u4e2d\u65ad\u673a\u5236"},{"location":"misc/pcie.html#msi","text":"MSI\u4e2d\u65ad\u673a\u5236\u91c7\u7528\u5b58\u50a8\u5668\u5199\u603b\u7ebf\u4e8b\u52a1\u5411\u5904\u7406\u5668\u7cfb\u7edf\u63d0\u4ea4\u4e2d\u65ad\u8bf7\u6c42\uff0c\u5176\u5b9e\u73b0\u673a\u5236\u662f\u5411HOST\u5904\u7406\u5668\u6307\u5b9a\u7684\u4e00\u4e2a\u5b58\u50a8\u5668\u5730\u5740\u5199\u6307\u5b9a\u7684\u6570\u636e\u3002\u8fd9\u4e2a\u5b58\u50a8\u5668\u5730\u5740\u4e00\u822c\u662f\u4e2d\u65ad\u63a7\u5236\u5668\u89c4\u5b9a\u7684\u67d0\u6bb5\u5b58\u50a8\u5668\u5730\u5740\u8303\u56f4\uff0c\u800c\u4e14\u6570\u636e\u4e5f\u662f\u4e8b\u5148\u5b89\u6392\u597d\u7684\u6570\u636e\uff0c\u901a\u5e38\u542b\u6709\u4e2d\u65ad\u5411\u91cf\u53f7\u3002 MSI\u5728PCIe\u4e0a\u5df2\u7ecf\u6210\u4e3a\u4e86\u4e3b\u6d41\uff0cPCIe\u8bbe\u5907\u5fc5\u987b\u652f\u6301MSI\u4e2d\u65ad\u673a\u5236\uff0cPCI\u8bbe\u5907\u4e0d\u4e00\u5b9a\u90fd\u652f\u6301\uff0c\u800c\u4e14\u5728PCI\u8bbe\u5907\u4e0a\u4e0d\u5e38\u7528\u3002","title":"MSI\u4e2d\u65ad\u673a\u5236"},{"location":"misc/pcie.html#pcie","text":"PCI\u603b\u7ebf\u662f\u5e76\u884c\u603b\u7ebf\uff0c\u540c\u4e00\u6761\u603b\u7ebf\u4e0a\uff0c\u6240\u6709\u5916\u90e8\u8bbe\u5907\u5171\u4eab\u603b\u7ebf\u5e26\u5bbd\uff0cPCIe\u603b\u7ebf\u4f7f\u7528\u9ad8\u901f\u5dee\u5206\u603b\u7ebf\uff0c\u5e76\u91c7\u7528\u7aef\u5230\u7aef\u7684\u8fde\u63a5\u65b9\u5f0f\uff0c\u5728\u4e00\u6761PCIe\u94fe\u8def\u7684\u4e24\u7aef\u53ea\u80fd\u5404\u8fde\u63a5\u4e00\u4e2a\u8bbe\u5907\uff0c\u8fd9\u4e24\u4e2a\u8bbe\u5907\u4e92\u4e3a\u6570\u636e\u53d1\u9001\u7aef\u548c\u6570\u636e\u63a5\u6536\u7aef\u3002PCIe\u603b\u7ebf\u5728\u8bbe\u8ba1\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u4e86\u4e00\u4e9b\u7f51\u7edc\u901a\u4fe1\u7684\u6280\u672f\u3002\uff08\u73b0\u5728\u611f\u89c9\u9ad8\u901f\u6570\u636e\u6709\u5f88\u591a\u7c7b\u4f3c\u7684\u5730\u65b9\uff0c\u57fa\u672c\u90fd\u6d89\u53caserdies\uff09","title":"\u4ece\u8f6f\u4ef6\u89d2\u5ea6\u8ba4\u8bc6PCIe\u603b\u7ebf"},{"location":"misc/photograph.html","text":"\u6444\u5f71\u4e0e\u89c6\u542c\u57fa\u7840\u7406\u8bba \u00b6 \u6444\u5f71\u4e0e\u89c6\u542c\u57fa\u7840\u7406\u8bba ISO(\u611f\u5149\u5ea6) \u5feb\u95e8 \u5149\u5708 \u66dd\u5149 \u6d4b\u5149 \u5173\u4e8e\u6784\u56fe ISO(\u611f\u5149\u5ea6) \u00b6 ISO\u5373\u611f\u5149\u5ea6\uff0c\u56fd\u9645\u6807\u51c6\u7ec4\u7ec7\u5236\u5b9a\u7684CCD/CMOS(\u6216\u80f6\u5377)\u5bf9\u5149\u7ebf\u7684\u654f\u611f\u7a0b\u5ea6\u3002\u6570\u503c\u8d8a\u9ad8\u4ee3\u8868\u8d8a\u654f\u611f\uff0c\u5373\u5bb9\u6613\u6210\u50cf\u3002\u9ad8ISO\u6210\u50cf\u901f\u5ea6\u5feb\uff0c\u4f46\u9897\u7c92\u611f\u5f3a\uff0c\u4f4eISO\u6210\u50cf\u901f\u5ea6\u6162\uff0c\u753b\u9762\u7ec6\u817b\u3002\u76f8\u5e94\u7684\uff0c\u5149\u7ebf\u6697\u65f6\uff0cISO\u5e94\u8be5\u9ad8\u4e00\u4e9b\uff0c\u5149\u7ebf\u5f3a\u65f6\uff0cISO\u5e94\u8be5\u4f4e\u4e00\u4e9b\u3002 \u5feb\u95e8 \u00b6 \u5feb\u95e8\u662f\u63a7\u5236\u95e8(\u60f3\u8c61\u76f8\u673a\u7684CMOS\u548c\u666f\u7269\u4e4b\u95f4\u6709\u4e00\u6247\u95e8\uff0c\u95e8\u6253\u5f00CMOS\u5c31\u5f00\u59cb\u6210\u50cf\uff0c\u95e8\u5173\u95ed\uff0cCMOS\u5c31\u7ed3\u675f\u4e86\u6210\u50cf\uff0c\u4ece\u6253\u5f00\u5230\u5173\u95ed\u7684\u8fd9\u6bb5\u65f6\u95f4\u4e2d\uff0c\u76f8\u673a\u5b8c\u6210\u4e86\u7167\u76f8\u52a8\u4f5c)\u5f00\u653e\u65f6\u95f4\u7684\u4e00\u4e2a\u88c5\u7f6e\u3002\u6bd4\u5982\u8bf4\u5feb\u95e8\u4e3a1/100\u79d2\uff0c\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\u95e8\u6253\u5f00\u540e\u6301\u7eed\u4e861/100\u79d2\uff0c\u7136\u540e\u5173\u95ed\u4e86\u3002\u663e\u7136\uff0c\u5feb\u95e8\u63a7\u5236\u4e86\u66dd\u5149\u65f6\u95f4 \u5149\u5708 \u00b6 \u6211\u4eec\u8fd8\u662f\u60f3\u8c61CMOS\u548c\u666f\u7269\u4e4b\u95f4\u6709\u4e00\u6247\u95e8(\u5b9e\u9645\u4e0a\u76f8\u673a\u5149\u5708\u662f\u7531\u4e00\u7cfb\u5217\u53f6\u7247\u7ec4\u6210\uff0c\u901a\u8fc7\u4e00\u5b9a\u7684\u8054\u52a8\u4f5c\u7528\uff0c\u5728\u4e2d\u592e\u5f62\u6210\u4e00\u4e2a\u53ef\u53d8\u5927\u5c0f\u7684\u5706\u5f62\u5b54\uff0c\u6211\u4eec\u770b\u5f88\u591a\u76f8\u673a\u7684APP\u56fe\u6807\u5c31\u662f\u5149\u5708)\uff0c\u8fd9\u6247\u95e8\u7684\u5927\u5c0f\uff0c\u5c31\u662f\u5149\u5708\u3002\u5f88\u663e\u7136\uff0c\u5149\u5708\u5c0f\uff0c\u5355\u4f4d\u65f6\u95f4\u8fdb\u5149\u91cf\u5c31\u5c11\uff0c\u5149\u5708\u5927\uff0c\u5355\u4f4d\u65f6\u95f4\u8fdb\u5149\u91cf\u5c31\u591a\u3002(\u95e8\u5927\uff0c\u540c\u65f6\u80fd\u591f\u8fdb\u5165\u7684\u4eba\u5c31\u591a\uff0c\u4e00\u6837\u7684\u9053\u7406)\u3002\u5e38\u89c1\u5149\u5708\u503c\u6709F1,F1.4,F2,F2.8,F4,F5.6,F8,F11,F16,F22...... F\u503c\u8d8a\u5927\uff0c\u5149\u5708\u8d8a\u5c0f\uff0c\u4e00\u822c\u6765\u8bb2\uff0c\u4e2d\u7b49\u5149\u5708\u7684\u6210\u50cf\u4f1a\u6bd4\u8f83\u597d\u3002 \u66dd\u5149 \u00b6 \u540c\u6837\u7684\u66dd\u5149\uff0c\u53ef\u4ee5\u6709N\u4e2d\u5feb\u95e8\u548c\u5149\u5708\u7684\u7ec4\u5408\uff0c\u4f46\u5e76\u4e0d\u662f\u6240\u6709\u7684\u90fd\u6613\u4e8e\u5b9e\u73b0\u3002ISO\u4e5f\u662f\u5f71\u54cd\u66dd\u5149\u7684\u56e0\u7d20\u4e4b\u4e00\uff0c\u5373\u5149\u5708\u548c\u5feb\u95e8\u63a7\u5236\u7684\u662f\u5149\u7684\u8fdb\u5165\uff0cISO\u63a7\u5236\u7684\u662f\u5bf9\u5149\u7684\u53cd\u5e94\u3002 \u6d4b\u5149 \u00b6 \u8981\u60f3\u6b63\u786e\u7684\u66dd\u5149\uff0c\u5c31\u5f97\u6bd4\u8f83\u51c6\u786e\u7684\u6d4b\u5149\uff0c\u73b0\u5728\u7684\u76f8\u673a\u90fd\u652f\u6301\u81ea\u52a8\u6d4b\u5149\uff0c\u80fd\u81ea\u52a8\u7684\u6839\u636e\u6d4b\u5f97\u7684\u5149\u5f3a\u6765\u9009\u62e9\u5408\u9002\u7684\u5149\u5708\u548c\u5feb\u95e8\u3002\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u76f8\u673a\u7684\u81ea\u52a8\u6d4b\u5149\u662f\u51c6\u786e\u7684\uff0c\u4f46\u4e5f\u6709\u4f8b\u5916\u3002 \u5173\u4e8e\u6784\u56fe \u00b6 \u62cd\u6444\u7684\u89d2\u5ea6\u5f88\u91cd\u8981\uff0c\u89d2\u5ea6\u80fd\u591f\u89c4\u907f\u6389\u4e00\u4e9b\u4e0d\u60f3\u8981\u7684\u753b\u9762\uff0c\u7a81\u51fa\u66f4\u60f3\u8868\u73b0\u7684\u90e8\u5206\u3002 \u524d\u666f\u540e\u666f\u5f88\u91cd\u8981\uff0c\u6ca1\u6709\u524d\u540e\u666f\u7684\u533a\u522b\u5c31\u4f1a\u663e\u5f97\u5355\u4e00\uff0c\u7167\u7247\u4e0d\u751f\u52a8 \u8981\u6709\u91cd\u70b9\uff0c\u7a81\u51fa\u70b9\uff0c\u8da3\u5473\u70b9\u3002\u6ca1\u6709\u8da3\u5473\u70b9\u7684\u7167\u7247\u4e0d\u5982\u4e0d\u62cd \u7ad6\u5411\u7684\u7167\u7247\u4e5f\u8981\u6709\uff0c\u65b9\u4fbf\u4f5c\u4e3a\u624b\u673a\u58c1\u7eb8\u4e4b\u7c7b\u7684","title":"\u6444\u5f71\u4e0e\u89c6\u542c\u57fa\u7840\u7406\u8bba"},{"location":"misc/photograph.html#_1","text":"\u6444\u5f71\u4e0e\u89c6\u542c\u57fa\u7840\u7406\u8bba ISO(\u611f\u5149\u5ea6) \u5feb\u95e8 \u5149\u5708 \u66dd\u5149 \u6d4b\u5149 \u5173\u4e8e\u6784\u56fe","title":"\u6444\u5f71\u4e0e\u89c6\u542c\u57fa\u7840\u7406\u8bba"},{"location":"misc/photograph.html#iso","text":"ISO\u5373\u611f\u5149\u5ea6\uff0c\u56fd\u9645\u6807\u51c6\u7ec4\u7ec7\u5236\u5b9a\u7684CCD/CMOS(\u6216\u80f6\u5377)\u5bf9\u5149\u7ebf\u7684\u654f\u611f\u7a0b\u5ea6\u3002\u6570\u503c\u8d8a\u9ad8\u4ee3\u8868\u8d8a\u654f\u611f\uff0c\u5373\u5bb9\u6613\u6210\u50cf\u3002\u9ad8ISO\u6210\u50cf\u901f\u5ea6\u5feb\uff0c\u4f46\u9897\u7c92\u611f\u5f3a\uff0c\u4f4eISO\u6210\u50cf\u901f\u5ea6\u6162\uff0c\u753b\u9762\u7ec6\u817b\u3002\u76f8\u5e94\u7684\uff0c\u5149\u7ebf\u6697\u65f6\uff0cISO\u5e94\u8be5\u9ad8\u4e00\u4e9b\uff0c\u5149\u7ebf\u5f3a\u65f6\uff0cISO\u5e94\u8be5\u4f4e\u4e00\u4e9b\u3002","title":"ISO(\u611f\u5149\u5ea6)"},{"location":"misc/photograph.html#_2","text":"\u5feb\u95e8\u662f\u63a7\u5236\u95e8(\u60f3\u8c61\u76f8\u673a\u7684CMOS\u548c\u666f\u7269\u4e4b\u95f4\u6709\u4e00\u6247\u95e8\uff0c\u95e8\u6253\u5f00CMOS\u5c31\u5f00\u59cb\u6210\u50cf\uff0c\u95e8\u5173\u95ed\uff0cCMOS\u5c31\u7ed3\u675f\u4e86\u6210\u50cf\uff0c\u4ece\u6253\u5f00\u5230\u5173\u95ed\u7684\u8fd9\u6bb5\u65f6\u95f4\u4e2d\uff0c\u76f8\u673a\u5b8c\u6210\u4e86\u7167\u76f8\u52a8\u4f5c)\u5f00\u653e\u65f6\u95f4\u7684\u4e00\u4e2a\u88c5\u7f6e\u3002\u6bd4\u5982\u8bf4\u5feb\u95e8\u4e3a1/100\u79d2\uff0c\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\u95e8\u6253\u5f00\u540e\u6301\u7eed\u4e861/100\u79d2\uff0c\u7136\u540e\u5173\u95ed\u4e86\u3002\u663e\u7136\uff0c\u5feb\u95e8\u63a7\u5236\u4e86\u66dd\u5149\u65f6\u95f4","title":"\u5feb\u95e8"},{"location":"misc/photograph.html#_3","text":"\u6211\u4eec\u8fd8\u662f\u60f3\u8c61CMOS\u548c\u666f\u7269\u4e4b\u95f4\u6709\u4e00\u6247\u95e8(\u5b9e\u9645\u4e0a\u76f8\u673a\u5149\u5708\u662f\u7531\u4e00\u7cfb\u5217\u53f6\u7247\u7ec4\u6210\uff0c\u901a\u8fc7\u4e00\u5b9a\u7684\u8054\u52a8\u4f5c\u7528\uff0c\u5728\u4e2d\u592e\u5f62\u6210\u4e00\u4e2a\u53ef\u53d8\u5927\u5c0f\u7684\u5706\u5f62\u5b54\uff0c\u6211\u4eec\u770b\u5f88\u591a\u76f8\u673a\u7684APP\u56fe\u6807\u5c31\u662f\u5149\u5708)\uff0c\u8fd9\u6247\u95e8\u7684\u5927\u5c0f\uff0c\u5c31\u662f\u5149\u5708\u3002\u5f88\u663e\u7136\uff0c\u5149\u5708\u5c0f\uff0c\u5355\u4f4d\u65f6\u95f4\u8fdb\u5149\u91cf\u5c31\u5c11\uff0c\u5149\u5708\u5927\uff0c\u5355\u4f4d\u65f6\u95f4\u8fdb\u5149\u91cf\u5c31\u591a\u3002(\u95e8\u5927\uff0c\u540c\u65f6\u80fd\u591f\u8fdb\u5165\u7684\u4eba\u5c31\u591a\uff0c\u4e00\u6837\u7684\u9053\u7406)\u3002\u5e38\u89c1\u5149\u5708\u503c\u6709F1,F1.4,F2,F2.8,F4,F5.6,F8,F11,F16,F22...... F\u503c\u8d8a\u5927\uff0c\u5149\u5708\u8d8a\u5c0f\uff0c\u4e00\u822c\u6765\u8bb2\uff0c\u4e2d\u7b49\u5149\u5708\u7684\u6210\u50cf\u4f1a\u6bd4\u8f83\u597d\u3002","title":"\u5149\u5708"},{"location":"misc/photograph.html#_4","text":"\u540c\u6837\u7684\u66dd\u5149\uff0c\u53ef\u4ee5\u6709N\u4e2d\u5feb\u95e8\u548c\u5149\u5708\u7684\u7ec4\u5408\uff0c\u4f46\u5e76\u4e0d\u662f\u6240\u6709\u7684\u90fd\u6613\u4e8e\u5b9e\u73b0\u3002ISO\u4e5f\u662f\u5f71\u54cd\u66dd\u5149\u7684\u56e0\u7d20\u4e4b\u4e00\uff0c\u5373\u5149\u5708\u548c\u5feb\u95e8\u63a7\u5236\u7684\u662f\u5149\u7684\u8fdb\u5165\uff0cISO\u63a7\u5236\u7684\u662f\u5bf9\u5149\u7684\u53cd\u5e94\u3002","title":"\u66dd\u5149"},{"location":"misc/photograph.html#_5","text":"\u8981\u60f3\u6b63\u786e\u7684\u66dd\u5149\uff0c\u5c31\u5f97\u6bd4\u8f83\u51c6\u786e\u7684\u6d4b\u5149\uff0c\u73b0\u5728\u7684\u76f8\u673a\u90fd\u652f\u6301\u81ea\u52a8\u6d4b\u5149\uff0c\u80fd\u81ea\u52a8\u7684\u6839\u636e\u6d4b\u5f97\u7684\u5149\u5f3a\u6765\u9009\u62e9\u5408\u9002\u7684\u5149\u5708\u548c\u5feb\u95e8\u3002\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u76f8\u673a\u7684\u81ea\u52a8\u6d4b\u5149\u662f\u51c6\u786e\u7684\uff0c\u4f46\u4e5f\u6709\u4f8b\u5916\u3002","title":"\u6d4b\u5149"},{"location":"misc/photograph.html#_6","text":"\u62cd\u6444\u7684\u89d2\u5ea6\u5f88\u91cd\u8981\uff0c\u89d2\u5ea6\u80fd\u591f\u89c4\u907f\u6389\u4e00\u4e9b\u4e0d\u60f3\u8981\u7684\u753b\u9762\uff0c\u7a81\u51fa\u66f4\u60f3\u8868\u73b0\u7684\u90e8\u5206\u3002 \u524d\u666f\u540e\u666f\u5f88\u91cd\u8981\uff0c\u6ca1\u6709\u524d\u540e\u666f\u7684\u533a\u522b\u5c31\u4f1a\u663e\u5f97\u5355\u4e00\uff0c\u7167\u7247\u4e0d\u751f\u52a8 \u8981\u6709\u91cd\u70b9\uff0c\u7a81\u51fa\u70b9\uff0c\u8da3\u5473\u70b9\u3002\u6ca1\u6709\u8da3\u5473\u70b9\u7684\u7167\u7247\u4e0d\u5982\u4e0d\u62cd \u7ad6\u5411\u7684\u7167\u7247\u4e5f\u8981\u6709\uff0c\u65b9\u4fbf\u4f5c\u4e3a\u624b\u673a\u58c1\u7eb8\u4e4b\u7c7b\u7684","title":"\u5173\u4e8e\u6784\u56fe"},{"location":"misc/pytest.html","text":"pytest\u6d4b\u8bd5\u6846\u67b6 \u00b6 \u6b63\u5f0f\u5927\u91cf\u4f7f\u7528python\u5df2\u7ecf\u4e24\u5e74\u591a\u4e86\uff0c\u4e4b\u524d\u4e5f\u542c\u8bf4\u8fc7pytest\u6846\u67b6\uff0c\u4f46\u4e00\u76f4\u6ca1\u6709\u65f6\u95f4\u5177\u4f53\u770b\u600e\u4e48\u4f7f\u7528\u3002\u6700\u8fd1\u5728\u770b\u516c\u53f8\u76ee\u524d\u6709\u7684\u6d4b\u8bd5\u6846\u67b6\u7684\u65f6\u5019\uff0c \u53d1\u73b0\u5b83\u5df2\u7ecf\u7e41\u7410\u5230\u4e0d\u5fcd\u5fc3\u53bb\u6dfb\u52a0\u6d4b\u8bd5case,\u4e00\u60f3\u5230\u6dfb\u52a0case\u8fd9\u4ef6\u4e8b\u5c31\u5934\u75bc\u3002\u6240\u4ee5\u51b3\u5fc3\u770b\u4e00\u4e0bpytest\u7684\u7528\u6cd5\uff0c\u6784\u601d\u5982\u679c\u73b0\u5728\u8ba9\u6211\u6765\u8bbe\u8ba1\u4e00\u4e2a\u6d4b\u8bd5\u6846\u67b6\uff0c \u6211\u4f1a\u5982\u4f55\u8bbe\u8ba1\u3002 \u5728\u8bb2\u73b0\u5728\u6211\u5982\u4f55\u8bbe\u8ba1\u4e4b\u524d\uff0c\u6211\u5148\u8bb2\u4e00\u4e0b\u4e4b\u524d(\u4e0d\u719f\u6089pytest)\u6211\u5982\u4f55\u8bbe\u8ba1\uff0c\u8fd9\u4e2a\u8bbe\u8ba1\u662f\u4e00\u4e2a\u5df2\u7ecf\u6709\u5b9e\u9645\u5e94\u7528\u7684\u8bbe\u8ba1\uff0c\u4f46\u5904\u4e8e\u4e00\u4e9b\u4e0d\u53ef\u63cf\u8ff0\u7684\u539f\u56e0\uff0c\u88ab\u5e9f\u5f03\uff0c\u5b9e\u9645\u4e0a\u6211\u4e00\u76f4\u8ba4\u4e3a\u5b83\u8981\u6bd4\u6211\u4eec\u73b0\u5728\u4f7f\u7528\u7684\u8fd9\u5957\u597d\u7684\u591a\u3002 \u6d4b\u8bd5\u5de5\u5177\u662f\u56f4\u7ed5\u6307\u4ee4\u96c6\u6d4b\u8bd5\u5c55\u5f00\u3002\u6211\u5c31\u60f3\uff0c\u53ef\u4ee5\u7528python\u6765\u4ea7\u751f\u6307\u4ee4\u9700\u8981\u7684\u8f93\u5165\u4e0e\u8f93\u51fa\u6570\u636e\uff0c\u7136\u540e\u901a\u8fc7\u4e00\u4e9b\u5c01\u88c5\u7ee7\u627f\u624b\u6bb5\u6765\u7f29\u51cf\u589e\u52a0\u4e00\u4e2a\u6307\u4ee4\u7684\u5de5\u4f5c\u91cf\uff0c\u540c\u65f6\u53ef\u4ee5\u5c06\u4e00\u4e9b\u6d4b\u8bd5\u6761\u4ef6\u505a\u6210\u914d\u7f6e\u6587\u4ef6\uff0c\u4e8e\u662f\u6709\u4e86\u5982\u4e0b\u8bbe\u8ba1 NCbet(Neural Core bugs eliminate tools) \u00b6 This is an auto test tools for Neural Core. Aims to eliminate Neural core's bugs. Features: Auto collect insns from './insns/' directory and auto new insns object Support config file type of '.json' or '.xls' Auto combine configs of cases that splited by ',' Report file can be used as config file directly Support output file type of '.dat' and '.bin' Auto creat riscv code file according to 'func' in config a global color log support, and default level is debug Flexible and scalable, easy to expend Support force acu to all Insn Class Diagram \u00b6 As a quick start reference, you can read class_diagram.png How To Add Instruction \u00b6 You must add instruction under 'insns' directory. File name and class name must follow the naming rules. Example \u00b6 co nf ig f ile : { \"func\" : \"xxxx.mm (rd),(rs1),(rs2)\" , \"rs1\" : \"0x20000\" , ...... } i nsn f ile : xxxx.mm.py class na me : XxxxxXx How To Add Config File \u00b6 There support two kind of config file, .json and .xls (.json same with .xls). Both json files and xls files have common rules. Rules \u00b6 each config must has a field named \"func\", this contains instruction name and parameter descriptions.For example, you can find string \"veadd.mm (rd),(rs1),(rs2)\" in Neural Core ISA Specification, and you just need copy 'vfadd.vv vd, vs2, vs1, vm' to fill field named \"func\" directly. When combine config, ncbet will replace ',' to ' ' with string in field \"func\", so just copy ISA descriptions from Neural Core ISA Specification. if you want to enable the combline function, you should split every optional parameter by ','. example \"rd\":\"0x20000,0x20002,0x20004\" each field in config must be a string. field like \"rs1\": 0x20000 is invalid, this should be \"rs1\": \"0x20000\" Json config file \u00b6 file must contain a json list, otherwise, an exception will be thrown. example: [ { \"func\" : \"xxxx.vv vd,vs2,vs1,vm\" , \"vd_or_rd\" : \"0x0\" , \"vs2\" : \"0x20\" , \"vs1_or_rs1\" : \"0x40\" , \"vm\" : \"0\" , \"v0\" : \"0x60\" , \"vl\" : \"10\" , \"vsew\" : \"1\" , \"vstart\" : \"0\" } ] Xls config file \u00b6 the first row of xls file must be title, and each config must in one row. example: func rs1 rs2 xxxx.mm (rd),(rs1),(rs2) 0x20000 0x20100 xxxx.mv (rd),(rs1),(rs2),dim0 0x20000,0x20002 0x40000 How to run \u00b6 you can read the code in run.py to get the available command line arguments, you can run like this: ./run.py -e spike -c veadd.json report file support run as config file, so you can run like this ./run.py -e spike -c output/reports/fail/report0.xls Warning: you must run a config file that all cases have same type About Docker image \u00b6 I hope anyone gets this can do test directly, and no need to waste time building in the environment, so, a docker image is effect.","title":"pytest\u6d4b\u8bd5\u6846\u67b6"},{"location":"misc/pytest.html#pytest","text":"\u6b63\u5f0f\u5927\u91cf\u4f7f\u7528python\u5df2\u7ecf\u4e24\u5e74\u591a\u4e86\uff0c\u4e4b\u524d\u4e5f\u542c\u8bf4\u8fc7pytest\u6846\u67b6\uff0c\u4f46\u4e00\u76f4\u6ca1\u6709\u65f6\u95f4\u5177\u4f53\u770b\u600e\u4e48\u4f7f\u7528\u3002\u6700\u8fd1\u5728\u770b\u516c\u53f8\u76ee\u524d\u6709\u7684\u6d4b\u8bd5\u6846\u67b6\u7684\u65f6\u5019\uff0c \u53d1\u73b0\u5b83\u5df2\u7ecf\u7e41\u7410\u5230\u4e0d\u5fcd\u5fc3\u53bb\u6dfb\u52a0\u6d4b\u8bd5case,\u4e00\u60f3\u5230\u6dfb\u52a0case\u8fd9\u4ef6\u4e8b\u5c31\u5934\u75bc\u3002\u6240\u4ee5\u51b3\u5fc3\u770b\u4e00\u4e0bpytest\u7684\u7528\u6cd5\uff0c\u6784\u601d\u5982\u679c\u73b0\u5728\u8ba9\u6211\u6765\u8bbe\u8ba1\u4e00\u4e2a\u6d4b\u8bd5\u6846\u67b6\uff0c \u6211\u4f1a\u5982\u4f55\u8bbe\u8ba1\u3002 \u5728\u8bb2\u73b0\u5728\u6211\u5982\u4f55\u8bbe\u8ba1\u4e4b\u524d\uff0c\u6211\u5148\u8bb2\u4e00\u4e0b\u4e4b\u524d(\u4e0d\u719f\u6089pytest)\u6211\u5982\u4f55\u8bbe\u8ba1\uff0c\u8fd9\u4e2a\u8bbe\u8ba1\u662f\u4e00\u4e2a\u5df2\u7ecf\u6709\u5b9e\u9645\u5e94\u7528\u7684\u8bbe\u8ba1\uff0c\u4f46\u5904\u4e8e\u4e00\u4e9b\u4e0d\u53ef\u63cf\u8ff0\u7684\u539f\u56e0\uff0c\u88ab\u5e9f\u5f03\uff0c\u5b9e\u9645\u4e0a\u6211\u4e00\u76f4\u8ba4\u4e3a\u5b83\u8981\u6bd4\u6211\u4eec\u73b0\u5728\u4f7f\u7528\u7684\u8fd9\u5957\u597d\u7684\u591a\u3002 \u6d4b\u8bd5\u5de5\u5177\u662f\u56f4\u7ed5\u6307\u4ee4\u96c6\u6d4b\u8bd5\u5c55\u5f00\u3002\u6211\u5c31\u60f3\uff0c\u53ef\u4ee5\u7528python\u6765\u4ea7\u751f\u6307\u4ee4\u9700\u8981\u7684\u8f93\u5165\u4e0e\u8f93\u51fa\u6570\u636e\uff0c\u7136\u540e\u901a\u8fc7\u4e00\u4e9b\u5c01\u88c5\u7ee7\u627f\u624b\u6bb5\u6765\u7f29\u51cf\u589e\u52a0\u4e00\u4e2a\u6307\u4ee4\u7684\u5de5\u4f5c\u91cf\uff0c\u540c\u65f6\u53ef\u4ee5\u5c06\u4e00\u4e9b\u6d4b\u8bd5\u6761\u4ef6\u505a\u6210\u914d\u7f6e\u6587\u4ef6\uff0c\u4e8e\u662f\u6709\u4e86\u5982\u4e0b\u8bbe\u8ba1","title":"pytest\u6d4b\u8bd5\u6846\u67b6"},{"location":"misc/pytest.html#ncbetneural-core-bugs-eliminate-tools","text":"This is an auto test tools for Neural Core. Aims to eliminate Neural core's bugs. Features: Auto collect insns from './insns/' directory and auto new insns object Support config file type of '.json' or '.xls' Auto combine configs of cases that splited by ',' Report file can be used as config file directly Support output file type of '.dat' and '.bin' Auto creat riscv code file according to 'func' in config a global color log support, and default level is debug Flexible and scalable, easy to expend Support force acu to all Insn","title":"NCbet(Neural Core bugs eliminate tools)"},{"location":"misc/pytest.html#class-diagram","text":"As a quick start reference, you can read class_diagram.png","title":"Class Diagram"},{"location":"misc/pytest.html#how-to-add-instruction","text":"You must add instruction under 'insns' directory. File name and class name must follow the naming rules.","title":"How To Add Instruction"},{"location":"misc/pytest.html#example","text":"co nf ig f ile : { \"func\" : \"xxxx.mm (rd),(rs1),(rs2)\" , \"rs1\" : \"0x20000\" , ...... } i nsn f ile : xxxx.mm.py class na me : XxxxxXx","title":"Example"},{"location":"misc/pytest.html#how-to-add-config-file","text":"There support two kind of config file, .json and .xls (.json same with .xls). Both json files and xls files have common rules.","title":"How To Add Config File"},{"location":"misc/pytest.html#rules","text":"each config must has a field named \"func\", this contains instruction name and parameter descriptions.For example, you can find string \"veadd.mm (rd),(rs1),(rs2)\" in Neural Core ISA Specification, and you just need copy 'vfadd.vv vd, vs2, vs1, vm' to fill field named \"func\" directly. When combine config, ncbet will replace ',' to ' ' with string in field \"func\", so just copy ISA descriptions from Neural Core ISA Specification. if you want to enable the combline function, you should split every optional parameter by ','. example \"rd\":\"0x20000,0x20002,0x20004\" each field in config must be a string. field like \"rs1\": 0x20000 is invalid, this should be \"rs1\": \"0x20000\"","title":"Rules"},{"location":"misc/pytest.html#json-config-file","text":"file must contain a json list, otherwise, an exception will be thrown. example: [ { \"func\" : \"xxxx.vv vd,vs2,vs1,vm\" , \"vd_or_rd\" : \"0x0\" , \"vs2\" : \"0x20\" , \"vs1_or_rs1\" : \"0x40\" , \"vm\" : \"0\" , \"v0\" : \"0x60\" , \"vl\" : \"10\" , \"vsew\" : \"1\" , \"vstart\" : \"0\" } ]","title":"Json config file"},{"location":"misc/pytest.html#xls-config-file","text":"the first row of xls file must be title, and each config must in one row. example: func rs1 rs2 xxxx.mm (rd),(rs1),(rs2) 0x20000 0x20100 xxxx.mv (rd),(rs1),(rs2),dim0 0x20000,0x20002 0x40000","title":"Xls config file"},{"location":"misc/pytest.html#how-to-run","text":"you can read the code in run.py to get the available command line arguments, you can run like this: ./run.py -e spike -c veadd.json report file support run as config file, so you can run like this ./run.py -e spike -c output/reports/fail/report0.xls Warning: you must run a config file that all cases have same type","title":"How to run"},{"location":"misc/pytest.html#about-docker-image","text":"I hope anyone gets this can do test directly, and no need to waste time building in the environment, so, a docker image is effect.","title":"About Docker image"},{"location":"misc/randomx.html","text":"RandomX \u7b80\u4ecb \u00b6 todo...","title":"RandomX \u7b80\u4ecb"},{"location":"misc/randomx.html#randomx","text":"todo...","title":"RandomX \u7b80\u4ecb"},{"location":"misc/roadmap.html","text":"My Road Map \u00b6 \u672a\u6765\u4e00\u6bb5\u65f6\u95f4\u7684\u89c4\u5212 map \u00b6 \u7b97\u6cd5 ( \u4e0d\u5173\u5fc3 ) ---------------------------------------------\u4e0a\u5c42 \u795e\u7ecf\u7f51\u7edc ( \u6838\u5fc3\u9886\u57df ) Lenet Resnet Bert LSTM ---------------------------------------------\u4e0b\u5c42 \u5173\u6ce8\u70b9 \u5173\u6ce8\u7f51\u7edc\u7ed3\u6784\uff0c\u4e0d\u5173\u6ce8\u516c\u5f0f\u539f\u7406 \u5173\u6ce8\u7f51\u7edc\u7684OP\u7ec4\u6210 \u5173\u6ce8\u7f51\u7edc\u7684\u6267\u884c\u6d41\u7a0b ---------------------------------------------\u57fa\u7840 \u8bed\u8a00 \u9a71\u52a8 \u6846\u67b6 ------------- --------------- -------------- C/C++ PCIE TensorFlow Python Cache TVM \u6c47 \u7f16 DMA GCC 2020\u5e7411\u6708\u7684\u73b0\u72b6\u4e0e\u89c4\u5212 \u00b6 \u4e8b\u4e0e\u613f\u8fdd\uff0c\u6709\u65f6\u5019\u8def\u4e0d\u5b8c\u5168\u662f\u81ea\u5df1\u9009\u62e9\u7684\uff0c\u73b0\u5728\u6211\u7684\u4e3b\u8981\u5de5\u4f5c\u662f\u5f00\u53d1SOC\u6a21\u62df\u5668\u3002\u6211\u4e5f\u6709\u4e86\u65b0\u7684\u65b9\u5411\u89c4\u5212 \u5728\u5f00\u53d1SOC\u6a21\u62df\u5668\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u89c9\u5f97\u53ef\u4ee5\u5b66\u4e60\u5f88\u591aCPU\u5fae\u67b6\u6784\u65b9\u9762\u7684\u77e5\u8bc6\u3002\u8fd9\u662f\u5f88\u5b9d\u8d35\u7684\uff0c\u8fd9\u8ba9\u6211\u5728\u5bf9\u4ee3\u7801\u6267\u884c\u7684\u7406\u89e3\u4e0a\u6709\u4e86\u66f4\u6df1\u7684\u5c42\u6b21\u3002 \u6211\u60f3\u76ee\u524d\u9700\u8981\u505a\u7684\u5e94\u8be5\u6709\u5982\u4e0b\u51e0\u70b9 \u719f\u6089\u638c\u63e1\u73b0\u4ee3\u4e3b\u6d41CPU\u5fae\u67b6\u6784 \u7ed3\u5408\u5fae\u67b6\u6784\uff0c\u52a0\u6df1\u5bf9\u4ee3\u7801\u7684\u7406\u89e3 \u719f\u6089\u4e86\u89e3\u7f16\u8bd1\u5668\u7684\u539f\u7406 \u589e\u52a0\u5bf9linux\u5185\u6838\u91cd\u70b9\u6a21\u5757\u7684\u5b66\u4e60 \u5206\u6790freeRTOS\u7684\u539f\u7406\u4e0e\u5b9e\u73b0 \u5fc5\u987b\u6e05\u695a\u7684\u8ba4\u8bc6\u5230\uff0c\u5b66\u4e60\u5fae\u67b6\u6784\u662f\u4e3a\u4e86\u66f4\u597d\u7684\u5f00\u53d1\u8f6f\u4ef6\uff0c\u800c\u7f16\u8bd1\u5668\u662f\u8f6f\u4ef6\u4e0e\u6700\u7ec8\u6267\u884c\u7a0b\u5e8f\u7684\u7ebd\u5e26\uff0c\u8fd9\u4e2d\u95f4\u6709\u5f88\u591a\u5904\u7406\uff0c\u6709\u5fc5\u8981\u4e86\u89e3\u3002 \u56de\u5230\u6839\u672c\uff0c\u5fc5\u987b\u5c06linux\u5185\u6838\u4f5c\u4e3a\u4e00\u4e2a\u7acb\u8db3\u70b9\u3002 \u603b\u7ed3\u4e00\u4e0b\uff0c\u9700\u8981\u6293\u4f4fCPU\u5fae\u67b6\u6784\uff0clinux\u5185\u6838\uff0c\u8bbe\u5907\u9a71\u52a8\u8fd9\u4e09\u4e2a\u7acb\u8db3\u70b9\uff0c\u5728c++,python\uff0c\u7f16\u8bd1\u5668\uff0c\u795e\u7ecf\u7f51\u7edc\u7b49\u7ec6\u8282\u9886\u57df\u4fdd\u6301\u5f00\u57a6\uff0c\u9010\u6e10\u5f62\u6210\u8f83\u4e3a\u5bbd\u9614\u7684\u77e5\u8bc6\u9762\uff0c\u540c\u65f6\u9009\u62e9\u4e00\u4e2a\u6838\u5fc3\u7ade\u4e89\u529b\u3002 2020.11.26 \u589e\u52a0\u4e00\u4e2a\u76ee\u6807 \u00b6 \u4ece\u5185\u6838\u63a5\u53e3\u51fa\u53d1\uff0c\u7ed3\u5408\u6c47\u7f16\u6307\u4ee4\u548c\u5de5\u5177\u94fe\uff0c\u5206\u6790CPU\u5b9e\u73b0\u3002\u5b8c\u6210\u4ece\u7cfb\u7edf\u5230\u6307\u4ee4\u5230CPU\u786c\u4ef6\u7684\u8d2f\u7a7f\uff0c\u6bd4\u5982\u5185\u5b58\u5c4f\u969c\uff0c\u81ea\u65cb\u9501\uff0c\u539f\u5b50\u64cd\u4f5c\u7b49\uff0c\u90fd\u53ef\u4ee5\u8d2f\u7a7f\u6574\u4e2a\u6d41\u7a0b\u6765\u5206\u6790\u3002 2021.2 \u6280\u672f\u65b9\u5411\u7684\u601d\u8003 \u00b6 \u795e\u7ecf\u7f51\u7edc\u5e94\u7528 \u00b6 \u76ee\u524d\u5404\u5927\u4e92\u8054\u7f51\u516c\u90fd\u6709\u8fd9\u65b9\u9762\u7684\u9700\u6c42\uff0c\u4e3b\u8981\u5173\u6ce8\u795e\u7ecf\u7f51\u7edc\u7684\u5e94\u7528\uff0c \u9700\u8981\u719f\u7ec3\u7684\u638c\u63e1\u5404\u79cd\u795e\u7ecf\u7f51\u7edc\uff0c\u4ee5\u53catensorflow\u7b49\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff0c\u53ef\u80fd\u4f1a\u6d89\u53ca\u5230 \u7f51\u7edc\u4f18\u5316\uff0c\u884c\u4e1a\u5185\u5bb9\u65e5\u65b0\u6708\u5f02\uff0c\u9700\u8981\u65f6\u523b\u62e5\u62b1\u53d8\u5316\u3002 \u8fd9\u4e2a\u9886\u57df\u6700\u5927\u7684\u5438\u5f15\u529b\u5728\u4e8e\u80fd\u591f\u4e0e\u5b9e\u9645\u95ee\u9898\u7d27\u5bc6\u7ed3\u5408\uff0c\u7531\u4e8e\u653f\u7b56\u5f15\u5bfc\uff0c\u76ee\u524d\u5404\u5927 \u4f20\u7edf\u4e1a\u52a1\u90fd\u6709\u8f6c\u5411AI\u5904\u7406\u7684\u9700\u6c42\uff0c\u6bd4\u8f83\u5bb9\u6613\u4ea7\u751f\u5408\u4f5c\u673a\u4f1a\u3002 \u6280\u672f\u65b9\u9762\uff0c\u76ee\u524d\u6280\u672f\u79ef\u7d2f\u4e0d\u591a\uff0c\u7f51\u7edc\u4f18\u5316\u662f\u96be\u70b9\uff0c\u81ea\u8eab\u6c34\u5e73\u4e0d\u592a\u5bb9\u6613\u8fbe\u5230\u80fd\u591f\u4f18\u5316 \u7f51\u7edc\u7684\u7a0b\u5ea6\u3002\u8fdb\u5165\u8fd9\u4e2a\u9886\u57df\u540e\uff0c\u57fa\u672c\u4f1a\u629b\u5f03\u6389\u4e4b\u524d\u79ef\u7d2f\u7684\u5e95\u5c42\u6280\u672f\uff0c\u5b8c\u5168\u8f6c\u6362\u5230\u5e94\u7528\u7aef\uff0c \u597d\u5728\u8fd1\u51e0\u5e74\u79ef\u7d2f\u4e86Python\u548cC++\u57fa\u7840\u3002\u5f88\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u80fd\u529b\u4e0d\u8db3\u5f71\u54cd\u8fdb\u9636\u7684\u95ee\u9898\u3002 \u8fd9\u4e2a\u65b9\u5411\uff0c\u597d\u7684\u673a\u4f1a\u53ef\u9047\u800c\u4e0d\u53ef\u6c42\uff0c\u56e0\u4e3a\u5728\u8fd9\u4e2a\u9886\u57df\u76ee\u524d\u6ca1\u6709\u592a\u591a\u79ef\u7d2f\uff0c\u6ca1\u6709\u4efb\u4f55\u6280\u672f\u548c \u7ecf\u9a8c\u4f18\u52bf\uff0c\u9700\u8981\u673a\u9047\u4e5f\u9762\u4e34\u6311\u6218\u3002 \u6280\u672f\u9700\u6c42\uff1a \u5404\u79cd\u795e\u7ecf\u7f51\u7edc TVM\u7b49\u7f16\u8bd1\u5668\u6846\u67b6 tensorflow\u3001pytorch\u7b49\u795e\u7ecf\u7f51\u7edc\u6846\u67b6 \u4f20\u7edf\u7f16\u8bd1\u5668\u7406\u8bba RISCV\u6307\u4ee4\u96c6\u4e0e\u5fae\u67b6\u6784\u65b9\u5411 \u00b6 \u76ee\u524d\u82af\u7247\u884c\u4e1a\u4e5f\u662f\u70ed\u95e8\u884c\u4e1a\uff0c\u957f\u671f\u770b\u597d\uff0c\u76ee\u524d\u653f\u7b56\u652f\u6301\uff0criscv\u7684\u70ed\u5ea6\u4f30\u8ba1\u4f1a\u6301\u7eed\u3002\u505a riscv\u76f8\u5173\u7684\u82af\u7247\u516c\u53f8\u4e5f\u8d8a\u6765\u8d8a\u591a\uff0c\u673a\u4f1a\u8d8a\u6765\u8d8a\u591a\u3002\u884c\u4e1a\u5185\u5bb9\u672c\u8eab\u76f8\u5bf9\u7a33\u5b9a\uff0c\u53ef\u4ee5\u6301\u7eed\u3002 \u8fd9\u4e2a\u9886\u57df\u7684\u5438\u5f15\u529b\u5728\u4e8e\u62a5\u916c\u4e0d\u4f4e\u5e76\u4e14\u6280\u672f\u80fd\u591f\u5f97\u5230\u5ef6\u7eed\u3002 \u4ece\u5fae\u67b6\u6784\u548c\u6307\u4ee4\u96c6\u5230uboot\uff0clinux\u90fd\u53ef\u4ee5\u56f4\u7ed5\u8fd9riscv\u6765\u64cd\u4f5c\uff0c\u4e4b\u524d\u79ef\u7d2f\u7684\u6280\u672f\u80fd\u591f\u6301\u7eed\u53d1\u6325\u4f5c\u7528\u3002 \u7ecf\u9a8c\u4f18\u52bf\u80fd\u591f\u5f97\u5230\u53d1\u6325\uff0c\u5e74\u8001\u4f53\u8870\u4ecd\u7136\u80fd\u591f\u6709\u4e00\u5e2d\u4e4b\u5730\u3002 \u6280\u672f\u65b9\u9762\uff0c\u80fd\u591f\u5145\u5206\u53d1\u6325\u81ea\u8eab\u903b\u8f91\u6e05\u6670\u7684\u6280\u672f\u7279\u70b9\uff0c\u800c\u4e14\u57fa\u672c\u4e0d\u4f1a\u51fa\u73b0\u80fd\u529b\u4e0d\u8db3\u7684\u95ee\u9898\uff0c \u5f53\u7136\uff0c\u6280\u672f\u5e7f\u5ea6\u9700\u8981\u6269\u5c55\uff0c\u6df1\u5ea6\u9700\u8981\u63d0\u9ad8\uff0c\u4f46\u7ec8\u5f52\u4e0d\u4f1a\u56e0\u4e3a\u6f5c\u529b\u4e0d\u8db3\u800c\u5f71\u54cd\u8fdb\u9636\u3002 \u8fd9\u4e2a\u65b9\u5411\uff0c\u81ea\u8eab\u6709\u4e00\u5b9a\u7684\u7ecf\u9a8c\u4f18\u52bf\u548c\u6280\u672f\u79ef\u7d2f\uff0c\u9700\u8981\u8f83\u597d\u7684\u673a\u4f1a\uff0c\u540c\u65f6\u9700\u8981\u8b66\u60d5\u6280\u672f\u5e7f\u5ea6\u53d8\u7a84\u3002 \u6280\u672f\u9700\u6c42\uff1a RISCV\u67b6\u6784 \u5fae\u67b6\u6784 \u786c\u4ef6\u63cf\u8ff0\u8bed\u8a00 \u9a71\u52a8\u4e0e\u5185\u6838\u65b9\u5411 \u00b6 \u4f20\u7edf\u65b9\u5411\uff0c\u884c\u4e1a\u901a\u5403\uff0c\u4e07\u91d1\u6cb9\u7684\u6280\u672f\u65b9\u5411\u4e5f\u610f\u5473\u7740\u4e0d\u7ba1\u53bb\u54ea\u4e2a\u884c\u4e1a\uff0c\u90fd\u5c5e\u4e8e\u8fb9\u7f18\u90e8\u95e8\u3002 \u884c\u4e1a\u9700\u6c42\u7a33\u5b9a\uff0c\u53ef\u4ee5\u8e6d\u65b0\u578b\u70ed\u95e8\u884c\u4e1a\u7ea2\u5229\u3002 \u8fd9\u4e2a\u9886\u57df\u6700\u5927\u7684\u5438\u5f15\u529b\u5728\u4e8e\u8212\u9002\uff0c\u6311\u6218\u6027\u76f8\u5bf9\u8f83\u5c0f\uff0c\u7ecf\u9a8c\u4f18\u52bf\u80fd\u591f\u5f97\u5230\u5145\u5206\u53d1\u6325\u3002 \u6280\u672f\u65b9\u9762\uff0c\u4ecd\u7136\u9700\u8981\u62d3\u5c55\u548c\u8fdb\u9636\uff0c\u4f46\u4e0d\u4f1a\u51fa\u73b0\u56e0\u80fd\u529b\u4e0d\u8db3\u5f71\u54cd\u8fdb\u9636\u7684\u60c5\u51b5\u3002\u4f46\u8fd9\u4e0d\u662f\u4e00\u4e2a\u597d \u9009\u62e9\uff0c\u4e0d\u5230\u4e07\u4e0d\u5f97\u5df2\u4e0d\u4f1a\u8003\u8651\u56de\u5f52\u8fd9\u4e2a\u65b9\u5411\u3002 \u6280\u672f\u9700\u6c42\uff1a \u91cd\u70b9\u6a21\u5757\u9a71\u52a8 linux\u5185\u6838\u91cd\u70b9\u673a\u5236 \u82af\u7247\u9886\u57df\u6a21\u62df\u5668\u65b9\u5411 \u00b6 \u8fd9\u662f\u4e00\u4e2a\u5f88\u5c0f\u7684\u9886\u57df\uff0c\u6d89\u53ca\u5230\u82af\u7247\u5fae\u67b6\u6784\u548c\u6307\u4ee4\u96c6\u67b6\u6784\uff0c\u540c\u65f6\u53c8\u9700\u8981\u786c\u4ef6\u57fa\u7840\uff0c\u9884\u4f30\u884c\u4e1a\u62a5\u916c\u4e0d\u4f4e\uff0c \u4f46\u9700\u8981\u6709IC\u8bbe\u8ba1\u65b9\u9762\u7684\u6280\u672f\u79ef\u7d2f\u3002\u5c0f\u4f17\u4f46\u80fd\u638c\u63e1\u82af\u7247\u6838\u5fc3\uff0c\u9700\u6c42\u91cf\u8f83\u5c0f\u3002 \u8fd9\u4e2a\u9886\u57df\u6700\u5927\u7684\u5438\u5f15\u529b\u5728\u4e8e\u4e0e\u73b0\u5728\u7684\u5de5\u4f5c\u5b8c\u5168\u63a5\u5408\uff0c\u53ef\u4ee5\u51ed\u501f\u7ecf\u9a8c\u4f18\u52bf\u7d22\u8981\u8f83\u9ad8\u62a5\u916c\u3002 \u6280\u672f\u5c42\u9762\uff0c\u9700\u8981\u5b66\u4e60\u76ee\u524d\u4e3b\u6d41\u6a21\u62df\u5668\u8bed\u8a00\uff0c\u6bd4\u5982shisel\uff0csystemc\u3002\u800c\u4e14\u9700\u8981\u8865\u5145IC\u76f8\u5173\u77e5\u8bc6 \u8fd9\u4e2a\u65b9\u5411\u5f88\u5c0f\u4f17\uff0c\u800c\u4e14\u5f88\u96be\u4e0e\u5e94\u7528\u6302\u94a9\uff0c\u540e\u7eed\u53d1\u5c55\u7a7a\u95f4\u53ef\u80fd\u6bd4\u8f83\u5c40\u9650 \u6280\u672f\u9700\u6c42\uff1a \u4e3b\u6d41\u6a21\u62df\u5668\u8bed\u8a00 IC\u76f8\u5173\u7406\u8bba 2021\u5e749\u6708\u6280\u672f\u65b9\u5411\u7684\u601d\u8003 \u00b6 \u4ee5\u67b6\u6784\u8bbe\u8ba1\u548c\u5206\u6790\u4e3a\u76ee\u6807\uff0c\u4ee5\u6a21\u62df\u5668\u4e3a\u57fa\u672c\u80fd\u529b\uff0c\u4ee5RTL coding\u4e3a\u9644\u52a0\u80fd\u529b\uff0c\u6210\u4e3a\u719f\u7ec3\u638c\u63e1\u6574\u4e2aCPU\u8f6f\u786c\u4ef6\u7cfb\u7edf\u7684\u5168\u80fd\u9009\u624b \u80fd\u529b\u7f57\u5217\uff1a \u638c\u63e1\u4e3b\u6d41CPU\u67b6\u6784\u548c\u5fae\u67b6\u6784\u76f8\u5173\u77e5\u8bc6 \u638c\u63e1IC\u4ea7\u4e1a\u76f8\u5173\u77e5\u8bc6 \u638c\u63e1\u4e71\u5e8f\u591a\u53d1\u5c04CPU\u7684\u5404\u4e2a\u8981\u7d20 \u638c\u63e1\u4ee5gem5\u4e3a\u6838\u5fc3\u7684\u6a21\u62df\u5668\u5f00\u53d1\u80fd\u529b \u638c\u63e1\u4ee5RISCV\u6307\u4ee4\u96c6\u67b6\u6784\u4e3a\u6838\u5fc3\uff0c\u4ee5ARM\u5fae\u67b6\u6784\u4e3a\u53c2\u8003\u67b6\u6784\u7684\u57fa\u7840\u77e5\u8bc6 \u638c\u63e1\u5173\u952e\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0eCPU\u7684\u8054\u7cfb\uff0c\u6bd4\u5982\u5185\u5b58\u7ba1\u7406\uff0c\u8fdb\u7a0b\u8c03\u5ea6\uff0c\u591a\u6838\u901a\u4fe1\uff0c\u4e2d\u65ad\u63a7\u5236\u7b49\u91cd\u70b9\u6a21\u5757 \u638c\u63e1RTL\u5f00\u53d1\u57fa\u7840\uff0c\u638c\u63e1\u57fa\u672c\u7684Verilog,chisel\u7f16\u5199\u8c03\u8bd5\u80fd\u529b","title":"My Road Map"},{"location":"misc/roadmap.html#my-road-map","text":"\u672a\u6765\u4e00\u6bb5\u65f6\u95f4\u7684\u89c4\u5212","title":"My Road Map"},{"location":"misc/roadmap.html#map","text":"\u7b97\u6cd5 ( \u4e0d\u5173\u5fc3 ) ---------------------------------------------\u4e0a\u5c42 \u795e\u7ecf\u7f51\u7edc ( \u6838\u5fc3\u9886\u57df ) Lenet Resnet Bert LSTM ---------------------------------------------\u4e0b\u5c42 \u5173\u6ce8\u70b9 \u5173\u6ce8\u7f51\u7edc\u7ed3\u6784\uff0c\u4e0d\u5173\u6ce8\u516c\u5f0f\u539f\u7406 \u5173\u6ce8\u7f51\u7edc\u7684OP\u7ec4\u6210 \u5173\u6ce8\u7f51\u7edc\u7684\u6267\u884c\u6d41\u7a0b ---------------------------------------------\u57fa\u7840 \u8bed\u8a00 \u9a71\u52a8 \u6846\u67b6 ------------- --------------- -------------- C/C++ PCIE TensorFlow Python Cache TVM \u6c47 \u7f16 DMA GCC","title":"map"},{"location":"misc/roadmap.html#202011","text":"\u4e8b\u4e0e\u613f\u8fdd\uff0c\u6709\u65f6\u5019\u8def\u4e0d\u5b8c\u5168\u662f\u81ea\u5df1\u9009\u62e9\u7684\uff0c\u73b0\u5728\u6211\u7684\u4e3b\u8981\u5de5\u4f5c\u662f\u5f00\u53d1SOC\u6a21\u62df\u5668\u3002\u6211\u4e5f\u6709\u4e86\u65b0\u7684\u65b9\u5411\u89c4\u5212 \u5728\u5f00\u53d1SOC\u6a21\u62df\u5668\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u89c9\u5f97\u53ef\u4ee5\u5b66\u4e60\u5f88\u591aCPU\u5fae\u67b6\u6784\u65b9\u9762\u7684\u77e5\u8bc6\u3002\u8fd9\u662f\u5f88\u5b9d\u8d35\u7684\uff0c\u8fd9\u8ba9\u6211\u5728\u5bf9\u4ee3\u7801\u6267\u884c\u7684\u7406\u89e3\u4e0a\u6709\u4e86\u66f4\u6df1\u7684\u5c42\u6b21\u3002 \u6211\u60f3\u76ee\u524d\u9700\u8981\u505a\u7684\u5e94\u8be5\u6709\u5982\u4e0b\u51e0\u70b9 \u719f\u6089\u638c\u63e1\u73b0\u4ee3\u4e3b\u6d41CPU\u5fae\u67b6\u6784 \u7ed3\u5408\u5fae\u67b6\u6784\uff0c\u52a0\u6df1\u5bf9\u4ee3\u7801\u7684\u7406\u89e3 \u719f\u6089\u4e86\u89e3\u7f16\u8bd1\u5668\u7684\u539f\u7406 \u589e\u52a0\u5bf9linux\u5185\u6838\u91cd\u70b9\u6a21\u5757\u7684\u5b66\u4e60 \u5206\u6790freeRTOS\u7684\u539f\u7406\u4e0e\u5b9e\u73b0 \u5fc5\u987b\u6e05\u695a\u7684\u8ba4\u8bc6\u5230\uff0c\u5b66\u4e60\u5fae\u67b6\u6784\u662f\u4e3a\u4e86\u66f4\u597d\u7684\u5f00\u53d1\u8f6f\u4ef6\uff0c\u800c\u7f16\u8bd1\u5668\u662f\u8f6f\u4ef6\u4e0e\u6700\u7ec8\u6267\u884c\u7a0b\u5e8f\u7684\u7ebd\u5e26\uff0c\u8fd9\u4e2d\u95f4\u6709\u5f88\u591a\u5904\u7406\uff0c\u6709\u5fc5\u8981\u4e86\u89e3\u3002 \u56de\u5230\u6839\u672c\uff0c\u5fc5\u987b\u5c06linux\u5185\u6838\u4f5c\u4e3a\u4e00\u4e2a\u7acb\u8db3\u70b9\u3002 \u603b\u7ed3\u4e00\u4e0b\uff0c\u9700\u8981\u6293\u4f4fCPU\u5fae\u67b6\u6784\uff0clinux\u5185\u6838\uff0c\u8bbe\u5907\u9a71\u52a8\u8fd9\u4e09\u4e2a\u7acb\u8db3\u70b9\uff0c\u5728c++,python\uff0c\u7f16\u8bd1\u5668\uff0c\u795e\u7ecf\u7f51\u7edc\u7b49\u7ec6\u8282\u9886\u57df\u4fdd\u6301\u5f00\u57a6\uff0c\u9010\u6e10\u5f62\u6210\u8f83\u4e3a\u5bbd\u9614\u7684\u77e5\u8bc6\u9762\uff0c\u540c\u65f6\u9009\u62e9\u4e00\u4e2a\u6838\u5fc3\u7ade\u4e89\u529b\u3002","title":"2020\u5e7411\u6708\u7684\u73b0\u72b6\u4e0e\u89c4\u5212"},{"location":"misc/roadmap.html#20201126","text":"\u4ece\u5185\u6838\u63a5\u53e3\u51fa\u53d1\uff0c\u7ed3\u5408\u6c47\u7f16\u6307\u4ee4\u548c\u5de5\u5177\u94fe\uff0c\u5206\u6790CPU\u5b9e\u73b0\u3002\u5b8c\u6210\u4ece\u7cfb\u7edf\u5230\u6307\u4ee4\u5230CPU\u786c\u4ef6\u7684\u8d2f\u7a7f\uff0c\u6bd4\u5982\u5185\u5b58\u5c4f\u969c\uff0c\u81ea\u65cb\u9501\uff0c\u539f\u5b50\u64cd\u4f5c\u7b49\uff0c\u90fd\u53ef\u4ee5\u8d2f\u7a7f\u6574\u4e2a\u6d41\u7a0b\u6765\u5206\u6790\u3002","title":"2020.11.26 \u589e\u52a0\u4e00\u4e2a\u76ee\u6807"},{"location":"misc/roadmap.html#20212","text":"","title":"2021.2 \u6280\u672f\u65b9\u5411\u7684\u601d\u8003"},{"location":"misc/roadmap.html#_1","text":"\u76ee\u524d\u5404\u5927\u4e92\u8054\u7f51\u516c\u90fd\u6709\u8fd9\u65b9\u9762\u7684\u9700\u6c42\uff0c\u4e3b\u8981\u5173\u6ce8\u795e\u7ecf\u7f51\u7edc\u7684\u5e94\u7528\uff0c \u9700\u8981\u719f\u7ec3\u7684\u638c\u63e1\u5404\u79cd\u795e\u7ecf\u7f51\u7edc\uff0c\u4ee5\u53catensorflow\u7b49\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff0c\u53ef\u80fd\u4f1a\u6d89\u53ca\u5230 \u7f51\u7edc\u4f18\u5316\uff0c\u884c\u4e1a\u5185\u5bb9\u65e5\u65b0\u6708\u5f02\uff0c\u9700\u8981\u65f6\u523b\u62e5\u62b1\u53d8\u5316\u3002 \u8fd9\u4e2a\u9886\u57df\u6700\u5927\u7684\u5438\u5f15\u529b\u5728\u4e8e\u80fd\u591f\u4e0e\u5b9e\u9645\u95ee\u9898\u7d27\u5bc6\u7ed3\u5408\uff0c\u7531\u4e8e\u653f\u7b56\u5f15\u5bfc\uff0c\u76ee\u524d\u5404\u5927 \u4f20\u7edf\u4e1a\u52a1\u90fd\u6709\u8f6c\u5411AI\u5904\u7406\u7684\u9700\u6c42\uff0c\u6bd4\u8f83\u5bb9\u6613\u4ea7\u751f\u5408\u4f5c\u673a\u4f1a\u3002 \u6280\u672f\u65b9\u9762\uff0c\u76ee\u524d\u6280\u672f\u79ef\u7d2f\u4e0d\u591a\uff0c\u7f51\u7edc\u4f18\u5316\u662f\u96be\u70b9\uff0c\u81ea\u8eab\u6c34\u5e73\u4e0d\u592a\u5bb9\u6613\u8fbe\u5230\u80fd\u591f\u4f18\u5316 \u7f51\u7edc\u7684\u7a0b\u5ea6\u3002\u8fdb\u5165\u8fd9\u4e2a\u9886\u57df\u540e\uff0c\u57fa\u672c\u4f1a\u629b\u5f03\u6389\u4e4b\u524d\u79ef\u7d2f\u7684\u5e95\u5c42\u6280\u672f\uff0c\u5b8c\u5168\u8f6c\u6362\u5230\u5e94\u7528\u7aef\uff0c \u597d\u5728\u8fd1\u51e0\u5e74\u79ef\u7d2f\u4e86Python\u548cC++\u57fa\u7840\u3002\u5f88\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u80fd\u529b\u4e0d\u8db3\u5f71\u54cd\u8fdb\u9636\u7684\u95ee\u9898\u3002 \u8fd9\u4e2a\u65b9\u5411\uff0c\u597d\u7684\u673a\u4f1a\u53ef\u9047\u800c\u4e0d\u53ef\u6c42\uff0c\u56e0\u4e3a\u5728\u8fd9\u4e2a\u9886\u57df\u76ee\u524d\u6ca1\u6709\u592a\u591a\u79ef\u7d2f\uff0c\u6ca1\u6709\u4efb\u4f55\u6280\u672f\u548c \u7ecf\u9a8c\u4f18\u52bf\uff0c\u9700\u8981\u673a\u9047\u4e5f\u9762\u4e34\u6311\u6218\u3002 \u6280\u672f\u9700\u6c42\uff1a \u5404\u79cd\u795e\u7ecf\u7f51\u7edc TVM\u7b49\u7f16\u8bd1\u5668\u6846\u67b6 tensorflow\u3001pytorch\u7b49\u795e\u7ecf\u7f51\u7edc\u6846\u67b6 \u4f20\u7edf\u7f16\u8bd1\u5668\u7406\u8bba","title":"\u795e\u7ecf\u7f51\u7edc\u5e94\u7528"},{"location":"misc/roadmap.html#riscv","text":"\u76ee\u524d\u82af\u7247\u884c\u4e1a\u4e5f\u662f\u70ed\u95e8\u884c\u4e1a\uff0c\u957f\u671f\u770b\u597d\uff0c\u76ee\u524d\u653f\u7b56\u652f\u6301\uff0criscv\u7684\u70ed\u5ea6\u4f30\u8ba1\u4f1a\u6301\u7eed\u3002\u505a riscv\u76f8\u5173\u7684\u82af\u7247\u516c\u53f8\u4e5f\u8d8a\u6765\u8d8a\u591a\uff0c\u673a\u4f1a\u8d8a\u6765\u8d8a\u591a\u3002\u884c\u4e1a\u5185\u5bb9\u672c\u8eab\u76f8\u5bf9\u7a33\u5b9a\uff0c\u53ef\u4ee5\u6301\u7eed\u3002 \u8fd9\u4e2a\u9886\u57df\u7684\u5438\u5f15\u529b\u5728\u4e8e\u62a5\u916c\u4e0d\u4f4e\u5e76\u4e14\u6280\u672f\u80fd\u591f\u5f97\u5230\u5ef6\u7eed\u3002 \u4ece\u5fae\u67b6\u6784\u548c\u6307\u4ee4\u96c6\u5230uboot\uff0clinux\u90fd\u53ef\u4ee5\u56f4\u7ed5\u8fd9riscv\u6765\u64cd\u4f5c\uff0c\u4e4b\u524d\u79ef\u7d2f\u7684\u6280\u672f\u80fd\u591f\u6301\u7eed\u53d1\u6325\u4f5c\u7528\u3002 \u7ecf\u9a8c\u4f18\u52bf\u80fd\u591f\u5f97\u5230\u53d1\u6325\uff0c\u5e74\u8001\u4f53\u8870\u4ecd\u7136\u80fd\u591f\u6709\u4e00\u5e2d\u4e4b\u5730\u3002 \u6280\u672f\u65b9\u9762\uff0c\u80fd\u591f\u5145\u5206\u53d1\u6325\u81ea\u8eab\u903b\u8f91\u6e05\u6670\u7684\u6280\u672f\u7279\u70b9\uff0c\u800c\u4e14\u57fa\u672c\u4e0d\u4f1a\u51fa\u73b0\u80fd\u529b\u4e0d\u8db3\u7684\u95ee\u9898\uff0c \u5f53\u7136\uff0c\u6280\u672f\u5e7f\u5ea6\u9700\u8981\u6269\u5c55\uff0c\u6df1\u5ea6\u9700\u8981\u63d0\u9ad8\uff0c\u4f46\u7ec8\u5f52\u4e0d\u4f1a\u56e0\u4e3a\u6f5c\u529b\u4e0d\u8db3\u800c\u5f71\u54cd\u8fdb\u9636\u3002 \u8fd9\u4e2a\u65b9\u5411\uff0c\u81ea\u8eab\u6709\u4e00\u5b9a\u7684\u7ecf\u9a8c\u4f18\u52bf\u548c\u6280\u672f\u79ef\u7d2f\uff0c\u9700\u8981\u8f83\u597d\u7684\u673a\u4f1a\uff0c\u540c\u65f6\u9700\u8981\u8b66\u60d5\u6280\u672f\u5e7f\u5ea6\u53d8\u7a84\u3002 \u6280\u672f\u9700\u6c42\uff1a RISCV\u67b6\u6784 \u5fae\u67b6\u6784 \u786c\u4ef6\u63cf\u8ff0\u8bed\u8a00","title":"RISCV\u6307\u4ee4\u96c6\u4e0e\u5fae\u67b6\u6784\u65b9\u5411"},{"location":"misc/roadmap.html#_2","text":"\u4f20\u7edf\u65b9\u5411\uff0c\u884c\u4e1a\u901a\u5403\uff0c\u4e07\u91d1\u6cb9\u7684\u6280\u672f\u65b9\u5411\u4e5f\u610f\u5473\u7740\u4e0d\u7ba1\u53bb\u54ea\u4e2a\u884c\u4e1a\uff0c\u90fd\u5c5e\u4e8e\u8fb9\u7f18\u90e8\u95e8\u3002 \u884c\u4e1a\u9700\u6c42\u7a33\u5b9a\uff0c\u53ef\u4ee5\u8e6d\u65b0\u578b\u70ed\u95e8\u884c\u4e1a\u7ea2\u5229\u3002 \u8fd9\u4e2a\u9886\u57df\u6700\u5927\u7684\u5438\u5f15\u529b\u5728\u4e8e\u8212\u9002\uff0c\u6311\u6218\u6027\u76f8\u5bf9\u8f83\u5c0f\uff0c\u7ecf\u9a8c\u4f18\u52bf\u80fd\u591f\u5f97\u5230\u5145\u5206\u53d1\u6325\u3002 \u6280\u672f\u65b9\u9762\uff0c\u4ecd\u7136\u9700\u8981\u62d3\u5c55\u548c\u8fdb\u9636\uff0c\u4f46\u4e0d\u4f1a\u51fa\u73b0\u56e0\u80fd\u529b\u4e0d\u8db3\u5f71\u54cd\u8fdb\u9636\u7684\u60c5\u51b5\u3002\u4f46\u8fd9\u4e0d\u662f\u4e00\u4e2a\u597d \u9009\u62e9\uff0c\u4e0d\u5230\u4e07\u4e0d\u5f97\u5df2\u4e0d\u4f1a\u8003\u8651\u56de\u5f52\u8fd9\u4e2a\u65b9\u5411\u3002 \u6280\u672f\u9700\u6c42\uff1a \u91cd\u70b9\u6a21\u5757\u9a71\u52a8 linux\u5185\u6838\u91cd\u70b9\u673a\u5236","title":"\u9a71\u52a8\u4e0e\u5185\u6838\u65b9\u5411"},{"location":"misc/roadmap.html#_3","text":"\u8fd9\u662f\u4e00\u4e2a\u5f88\u5c0f\u7684\u9886\u57df\uff0c\u6d89\u53ca\u5230\u82af\u7247\u5fae\u67b6\u6784\u548c\u6307\u4ee4\u96c6\u67b6\u6784\uff0c\u540c\u65f6\u53c8\u9700\u8981\u786c\u4ef6\u57fa\u7840\uff0c\u9884\u4f30\u884c\u4e1a\u62a5\u916c\u4e0d\u4f4e\uff0c \u4f46\u9700\u8981\u6709IC\u8bbe\u8ba1\u65b9\u9762\u7684\u6280\u672f\u79ef\u7d2f\u3002\u5c0f\u4f17\u4f46\u80fd\u638c\u63e1\u82af\u7247\u6838\u5fc3\uff0c\u9700\u6c42\u91cf\u8f83\u5c0f\u3002 \u8fd9\u4e2a\u9886\u57df\u6700\u5927\u7684\u5438\u5f15\u529b\u5728\u4e8e\u4e0e\u73b0\u5728\u7684\u5de5\u4f5c\u5b8c\u5168\u63a5\u5408\uff0c\u53ef\u4ee5\u51ed\u501f\u7ecf\u9a8c\u4f18\u52bf\u7d22\u8981\u8f83\u9ad8\u62a5\u916c\u3002 \u6280\u672f\u5c42\u9762\uff0c\u9700\u8981\u5b66\u4e60\u76ee\u524d\u4e3b\u6d41\u6a21\u62df\u5668\u8bed\u8a00\uff0c\u6bd4\u5982shisel\uff0csystemc\u3002\u800c\u4e14\u9700\u8981\u8865\u5145IC\u76f8\u5173\u77e5\u8bc6 \u8fd9\u4e2a\u65b9\u5411\u5f88\u5c0f\u4f17\uff0c\u800c\u4e14\u5f88\u96be\u4e0e\u5e94\u7528\u6302\u94a9\uff0c\u540e\u7eed\u53d1\u5c55\u7a7a\u95f4\u53ef\u80fd\u6bd4\u8f83\u5c40\u9650 \u6280\u672f\u9700\u6c42\uff1a \u4e3b\u6d41\u6a21\u62df\u5668\u8bed\u8a00 IC\u76f8\u5173\u7406\u8bba","title":"\u82af\u7247\u9886\u57df\u6a21\u62df\u5668\u65b9\u5411"},{"location":"misc/roadmap.html#20219","text":"\u4ee5\u67b6\u6784\u8bbe\u8ba1\u548c\u5206\u6790\u4e3a\u76ee\u6807\uff0c\u4ee5\u6a21\u62df\u5668\u4e3a\u57fa\u672c\u80fd\u529b\uff0c\u4ee5RTL coding\u4e3a\u9644\u52a0\u80fd\u529b\uff0c\u6210\u4e3a\u719f\u7ec3\u638c\u63e1\u6574\u4e2aCPU\u8f6f\u786c\u4ef6\u7cfb\u7edf\u7684\u5168\u80fd\u9009\u624b \u80fd\u529b\u7f57\u5217\uff1a \u638c\u63e1\u4e3b\u6d41CPU\u67b6\u6784\u548c\u5fae\u67b6\u6784\u76f8\u5173\u77e5\u8bc6 \u638c\u63e1IC\u4ea7\u4e1a\u76f8\u5173\u77e5\u8bc6 \u638c\u63e1\u4e71\u5e8f\u591a\u53d1\u5c04CPU\u7684\u5404\u4e2a\u8981\u7d20 \u638c\u63e1\u4ee5gem5\u4e3a\u6838\u5fc3\u7684\u6a21\u62df\u5668\u5f00\u53d1\u80fd\u529b \u638c\u63e1\u4ee5RISCV\u6307\u4ee4\u96c6\u67b6\u6784\u4e3a\u6838\u5fc3\uff0c\u4ee5ARM\u5fae\u67b6\u6784\u4e3a\u53c2\u8003\u67b6\u6784\u7684\u57fa\u7840\u77e5\u8bc6 \u638c\u63e1\u5173\u952e\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0eCPU\u7684\u8054\u7cfb\uff0c\u6bd4\u5982\u5185\u5b58\u7ba1\u7406\uff0c\u8fdb\u7a0b\u8c03\u5ea6\uff0c\u591a\u6838\u901a\u4fe1\uff0c\u4e2d\u65ad\u63a7\u5236\u7b49\u91cd\u70b9\u6a21\u5757 \u638c\u63e1RTL\u5f00\u53d1\u57fa\u7840\uff0c\u638c\u63e1\u57fa\u672c\u7684Verilog,chisel\u7f16\u5199\u8c03\u8bd5\u80fd\u529b","title":"2021\u5e749\u6708\u6280\u672f\u65b9\u5411\u7684\u601d\u8003"},{"location":"misc/shell.html","text":"shell \u5c0f\u70b9\u603b\u7ed3 \u00b6 shell \u5c0f\u70b9\u603b\u7ed3 \u67e5\u770b\u5f53\u524dshell\u89e3\u6790\u5668 \u53d8\u91cf\u5b9a\u4e49 Command substitution \u5173\u4e8e\u5355\u53cc\u5f15\u53f7 $\u7684\u7279\u6b8a\u7ec4\u5408 \"$!\" \"$$\" \u7b97\u6570\u8fd0\u7b97 shift \u81ea\u52a8\u4ea4\u4e92 ftp debug \u603b\u7ed3\u8fd1\u671f\u7528\u5230\u7684shell\u547d\u4ee4\uff0c\u53ca\u5bf9shell\u7684\u7406\u89e3\uff0cshell\u662f\u4e00\u79cdlinux\u63d0\u4f9b\u7684\u811a\u672c\u8bed\u8a00\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7script\u7684\u5f62\u5f0f\u6765\u7ec4\u7ec7shell\uff0cshell\u7684\u89e3\u6790\u5668\u6709\u591a\u79cd\uff0cbash, csh, ksh, tcsh, \u5176\u4e2dbash\u662f\u5f00\u6e90\u7684\uff0c\u6211\u4eec\u7528\u7684\u4e5f\u6bd4\u8f83\u591a bash\u5b98\u7f51: https://www.gnu.org/software/bash/ \u5173\u4e8eshell\u672c\u8eab\u7684\u5b98\u65b9\u7f51\u7ad9\u76ee\u524d\u4e5f\u6ca1\u6709\u627e\u5230\uff0c\u53ea\u662f\u5728\u4e00\u4e9b\u7f51\u7ad9\u4e0a\u627e\u5230\u4e86\u4e00\u4e9b\u6587\u6863\u8bf4\u660e\uff0c\u770b\u5177\u4f53\u5185\u5bb9\uff0c\u5177\u6709\u4e00\u5b9a\u53c2\u8003\u6027\uff0c \u4f46\u4e5f\u4e0d\u662f\u592a\u5168\u3002\u5728bash\u7684\u5b98\u65b9\u6587\u6863\u4e2d\u4e5f\u6709\u4e00\u4e9b\u4ecb\u7ecd\u3002 shell \u6587\u6863../books/shell.pdf \u67e5\u770b\u5f53\u524dshell\u89e3\u6790\u5668 \u00b6 \u53ef\u4ee5\u901a\u8fc7\u67e5\u770bSHELL\u73af\u5883\u53d8\u91cf\u6765\u786e\u8ba4\u5f53\u524d\u9ed8\u8ba4\u7684shell\u89e3\u6790\u5668 chsgcxy@chsgcxy-TM1703:~/workspace/messy_notes$ echo $SHELL /bin/bash \u53d8\u91cf\u5b9a\u4e49 \u00b6 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u53d8\u91cf\u5b9a\u4e49\u201c=\u201d\u4e24\u4fa7\u4e0d\u80fd\u52a0\u7a7a\u683c\uff0c\u800c\u4e14\u53d8\u91cf\u540d\u533a\u5206\u5927\u5c0f\u5199 Command substitution \u00b6 \u547d\u4ee4\u66ff\u4ee3\uff08\u5148\u5b8c\u6210\u547d\u4ee4\uff0c\u518d\u628a\u547d\u4ee4\u7ed3\u679c\u66ff\u6362\uff09\u4e00\u5171\u6709\u4e24\u79cd\u65b9\u5f0f command echo \u201cToday\u2019s date is date \u201d Today\u2019s date is Thu 7 Jul 2016 16:53:20 BST $( .... ) in bash only echo \u201cToday\u2019s date is $(date)\u201d Today\u2019s date is Thu 7 Jul 2016 16:53:31 BST \u5176\u4e2d\u62ec\u53f7\u7684\u65b9\u5f0f\u53ea\u6709bash\u652f\u6301\uff0c\u901a\u7528\u6027\u6b20\u7f3a\u4e00\u4e9b\uff0c\u4f46\u662f``\u5728\u5d4c\u5957\u4f7f\u7528\u65f6\u9700\u8981\u8f6c\u4e49 \u5173\u4e8e\u5355\u53cc\u5f15\u53f7 \u00b6 Single forward quote All characters enclosed between a pair of single forward quotes are shielded - apart from the ' character itself! Double quotes All the characters enclosed between a pair of double quotes are shielded except for $ ` \\ and \" chsgcxy@chsgcxy-TM1703:~/workspace/Demo$ cat a.sh #! /bin/bash name = \"chsgcxy\" test1 = '$name' test2 = \" $name \" test3 = '`ls`' test4 = \"`ls`\" echo $test1 echo $test2 echo $test3 echo $test4 chsgcxy@chsgcxy-TM1703:~/workspace/Demo$ ./a.sh $name chsgcxy ` ls ` a.sh bash b.sh Demo.iml src \u5373\u5355\u5f15\u53f7\u4e0d\u4f1a\u505a\u89e3\u6790\uff0c\u53cc\u5f15\u53f7\u4f1a\u5bf9\u53d8\u91cf\u548c\u547d\u4ee4\u66ff\u6362\u505a\u89e3\u6790 $\u7684\u7279\u6b8a\u7ec4\u5408 \u00b6 \"$!\" \u00b6 ($!) Expands to the process id of the job most recently placed into the back- ground If a command is terminated by the control operator \u2018&\u2019, the shell executes the command asynchronously in a subshell. \u53c2\u8003\u81ea shell.pdf 3.4.2 Special Parameters \"$$\" \u00b6 ($$) Expands to the process id of the shell. In a () subshell, it expands to the process id of the invoking shell, not the subshell \u7b97\u6570\u8fd0\u7b97 \u00b6 \u9700\u8981\u4f7f\u7528expr\u6765\u8fdb\u884c\u7b97\u6570\u8fd0\u7b97\uff0c\u4f7f\u7528(()) \u4e24\u5c42\u62ec\u53f7\u4e5f\u53ef\u4ee5\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cexpr\u662fLinux\u7684\u5185\u7f6e\u8f6f\u4ef6\uff0c\u5e76\u4e0d\u662fshell\u8bed\u8a00\u7684\u5173\u952e\u5b57 chsgcxy@chsgcxy-TM1703:~/workspace/Demo$ cat a.sh #! /bin/bash a = ` expr 3 + 2 ` echo $a b = 3 +2 echo $b c = $(( 3 + 2 )) echo $c chsgcxy@chsgcxy-TM1703:~/workspace/Demo$ ./a.sh 5 3 +2 5 shift \u00b6 shift [n] Shift the positional parameters to the left by n. The positional parameters from n+1 . . . $# are renamed to $1 . . . $#-n. Parameters represented by the numbers $# to $#-n+1 are unset. n must be a non-negative number less than or equal to $#. If n is zero or greater than $#, the positional parameters are not changed. If n is not supplied, it is assumed to be 1. The return status is zero unless n is greater than $# or less than zero, non-zero otherwise. \u53ef\u4ee5\u7528\u6765\u505a\u53c2\u6570\u89e3\u6790\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u8003\u8651\u53c2\u6570\u987a\u5e8f for arg in \" $@ \" ; do case $arg in -h | --help ) printf \"Usage:\" exit 0 ;; -n | --num ) num = \" $2 \" shift shift ;; -c ) option = \"creat\" shift ;; * ) dir = \" $1 \" ;; esac done \u81ea\u52a8\u4ea4\u4e92 \u00b6 \u4f7f\u7528\u5982\u4e0b\u7684\u683c\u5f0f\u5b8c\u6210\u81ea\u52a8\u4ea4\u4e92\uff0c\u7ed3\u5c3e\u7684delimiter\u8981\u9876\u683c\u5199\uff0c\u524d\u9762\u4e0d\u80fd\u6709\u4efb\u4f55\u5b57\u7b26\uff0c\u540e\u9762\u4e5f\u4e0d\u80fd\u6709\u4efb\u4f55\u5b57\u7b26\uff0c\u5305\u62ec\u7a7a\u683c\u548c tab \u7f29\u8fdb; \u5f00\u59cb\u7684delimiter\u524d\u540e\u7684\u7a7a\u683c\u4f1a\u88ab\u5ffd\u7565\u6389 command << delimiter document delimiter \u5b9e\u4f8b\u5982\u4e0b ftp -n -p 172 .16.10.103 << EOF user chsgcxy 123456 cd xxxx lcd xxxx put xxxx close bye EOF ftp \u00b6 ftp \u8981\u6ce8\u610f\u4e3b\u52a8\u6a21\u5f0f\u548c\u88ab\u52a8\u6a21\u5f0f\uff08-p\u9009\u9879\uff09 \u5982\u679c\u628aFTP\u670d\u52a1\u5668\u90e8\u7f72\u5728\u9632\u706b\u5899\u6216\u8005NAT\u670d\u52a1\u5668\u7684\u80cc \u540e\uff0c\u5219\u91c7\u7528\u4e3b\u52a8\u64cd\u4f5c\u6a21\u5f0f\u7684\u5ba2\u6237\u7aef\u53ea\u80fd\u591f\u5efa\u7acb\u547d\u4ee4\u8fde\u63a5\u800c\u65e0\u6cd5\u8fdb\u884c\u6587\u4ef6\u4f20\u8f93\u3002\u5982\u679c\u90e8\u7f72\u5b8cFTP\u670d\u52a1\u5668\u540e\uff0c\u7cfb\u7edf\u7ba1\u7406\u5458\u53d1\u73b0\u7528\u6237\u53ef\u4ee5\u8fde\u63a5\u4e0aFTP\u670d\u52a1\u5668\uff0c\u53ef\u4ee5\u67e5\u770b \u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\uff0c\u4f46\u662f\u5374\u65e0\u6cd5\u4e0b\u8f7d\u6216\u8005\u4e0a\u4f20\u6587\u4ef6\uff0c\u5982\u679c\u6392\u9664\u6743\u9650\u65b9\u9762\u7684\u9650\u5236\u5916\uff0c\u90a3\u4e48\u5f88\u6709\u53ef\u80fd\u5c31\u662f\u8fd9\u4e2a\u64cd\u4f5c\u6a21\u5f0f\u9009\u62e9\u9519\u8bef debug \u00b6 Shell Debugging Options -x print commands and args as executed -v print shell input as read -n don't run the script but check its syntax -u treat unset variables as errors The shell options, ( eg -x -v -n and -u ) can be invoked be in several ways - in a known area which can be enclosed within set commands to turn on and off the option ( set + will turn the option off set -e \u53ef\u4ee5\u4f7fshell\u811a\u672c\u5728\u53d1\u751f\u9519\u8bef\u7684\u65f6\u5019\u9000\u51fa","title":"shell \u5c0f\u70b9\u603b\u7ed3"},{"location":"misc/shell.html#shell","text":"shell \u5c0f\u70b9\u603b\u7ed3 \u67e5\u770b\u5f53\u524dshell\u89e3\u6790\u5668 \u53d8\u91cf\u5b9a\u4e49 Command substitution \u5173\u4e8e\u5355\u53cc\u5f15\u53f7 $\u7684\u7279\u6b8a\u7ec4\u5408 \"$!\" \"$$\" \u7b97\u6570\u8fd0\u7b97 shift \u81ea\u52a8\u4ea4\u4e92 ftp debug \u603b\u7ed3\u8fd1\u671f\u7528\u5230\u7684shell\u547d\u4ee4\uff0c\u53ca\u5bf9shell\u7684\u7406\u89e3\uff0cshell\u662f\u4e00\u79cdlinux\u63d0\u4f9b\u7684\u811a\u672c\u8bed\u8a00\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7script\u7684\u5f62\u5f0f\u6765\u7ec4\u7ec7shell\uff0cshell\u7684\u89e3\u6790\u5668\u6709\u591a\u79cd\uff0cbash, csh, ksh, tcsh, \u5176\u4e2dbash\u662f\u5f00\u6e90\u7684\uff0c\u6211\u4eec\u7528\u7684\u4e5f\u6bd4\u8f83\u591a bash\u5b98\u7f51: https://www.gnu.org/software/bash/ \u5173\u4e8eshell\u672c\u8eab\u7684\u5b98\u65b9\u7f51\u7ad9\u76ee\u524d\u4e5f\u6ca1\u6709\u627e\u5230\uff0c\u53ea\u662f\u5728\u4e00\u4e9b\u7f51\u7ad9\u4e0a\u627e\u5230\u4e86\u4e00\u4e9b\u6587\u6863\u8bf4\u660e\uff0c\u770b\u5177\u4f53\u5185\u5bb9\uff0c\u5177\u6709\u4e00\u5b9a\u53c2\u8003\u6027\uff0c \u4f46\u4e5f\u4e0d\u662f\u592a\u5168\u3002\u5728bash\u7684\u5b98\u65b9\u6587\u6863\u4e2d\u4e5f\u6709\u4e00\u4e9b\u4ecb\u7ecd\u3002 shell \u6587\u6863../books/shell.pdf","title":"shell \u5c0f\u70b9\u603b\u7ed3"},{"location":"misc/shell.html#shell_1","text":"\u53ef\u4ee5\u901a\u8fc7\u67e5\u770bSHELL\u73af\u5883\u53d8\u91cf\u6765\u786e\u8ba4\u5f53\u524d\u9ed8\u8ba4\u7684shell\u89e3\u6790\u5668 chsgcxy@chsgcxy-TM1703:~/workspace/messy_notes$ echo $SHELL /bin/bash","title":"\u67e5\u770b\u5f53\u524dshell\u89e3\u6790\u5668"},{"location":"misc/shell.html#_1","text":"\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u53d8\u91cf\u5b9a\u4e49\u201c=\u201d\u4e24\u4fa7\u4e0d\u80fd\u52a0\u7a7a\u683c\uff0c\u800c\u4e14\u53d8\u91cf\u540d\u533a\u5206\u5927\u5c0f\u5199","title":"\u53d8\u91cf\u5b9a\u4e49"},{"location":"misc/shell.html#command-substitution","text":"\u547d\u4ee4\u66ff\u4ee3\uff08\u5148\u5b8c\u6210\u547d\u4ee4\uff0c\u518d\u628a\u547d\u4ee4\u7ed3\u679c\u66ff\u6362\uff09\u4e00\u5171\u6709\u4e24\u79cd\u65b9\u5f0f command echo \u201cToday\u2019s date is date \u201d Today\u2019s date is Thu 7 Jul 2016 16:53:20 BST $( .... ) in bash only echo \u201cToday\u2019s date is $(date)\u201d Today\u2019s date is Thu 7 Jul 2016 16:53:31 BST \u5176\u4e2d\u62ec\u53f7\u7684\u65b9\u5f0f\u53ea\u6709bash\u652f\u6301\uff0c\u901a\u7528\u6027\u6b20\u7f3a\u4e00\u4e9b\uff0c\u4f46\u662f``\u5728\u5d4c\u5957\u4f7f\u7528\u65f6\u9700\u8981\u8f6c\u4e49","title":"Command substitution"},{"location":"misc/shell.html#_2","text":"Single forward quote All characters enclosed between a pair of single forward quotes are shielded - apart from the ' character itself! Double quotes All the characters enclosed between a pair of double quotes are shielded except for $ ` \\ and \" chsgcxy@chsgcxy-TM1703:~/workspace/Demo$ cat a.sh #! /bin/bash name = \"chsgcxy\" test1 = '$name' test2 = \" $name \" test3 = '`ls`' test4 = \"`ls`\" echo $test1 echo $test2 echo $test3 echo $test4 chsgcxy@chsgcxy-TM1703:~/workspace/Demo$ ./a.sh $name chsgcxy ` ls ` a.sh bash b.sh Demo.iml src \u5373\u5355\u5f15\u53f7\u4e0d\u4f1a\u505a\u89e3\u6790\uff0c\u53cc\u5f15\u53f7\u4f1a\u5bf9\u53d8\u91cf\u548c\u547d\u4ee4\u66ff\u6362\u505a\u89e3\u6790","title":"\u5173\u4e8e\u5355\u53cc\u5f15\u53f7"},{"location":"misc/shell.html#_3","text":"","title":"$\u7684\u7279\u6b8a\u7ec4\u5408"},{"location":"misc/shell.html#_4","text":"($!) Expands to the process id of the job most recently placed into the back- ground If a command is terminated by the control operator \u2018&\u2019, the shell executes the command asynchronously in a subshell. \u53c2\u8003\u81ea shell.pdf 3.4.2 Special Parameters","title":"\"$!\""},{"location":"misc/shell.html#_5","text":"($$) Expands to the process id of the shell. In a () subshell, it expands to the process id of the invoking shell, not the subshell","title":"\"$$\""},{"location":"misc/shell.html#_6","text":"\u9700\u8981\u4f7f\u7528expr\u6765\u8fdb\u884c\u7b97\u6570\u8fd0\u7b97\uff0c\u4f7f\u7528(()) \u4e24\u5c42\u62ec\u53f7\u4e5f\u53ef\u4ee5\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cexpr\u662fLinux\u7684\u5185\u7f6e\u8f6f\u4ef6\uff0c\u5e76\u4e0d\u662fshell\u8bed\u8a00\u7684\u5173\u952e\u5b57 chsgcxy@chsgcxy-TM1703:~/workspace/Demo$ cat a.sh #! /bin/bash a = ` expr 3 + 2 ` echo $a b = 3 +2 echo $b c = $(( 3 + 2 )) echo $c chsgcxy@chsgcxy-TM1703:~/workspace/Demo$ ./a.sh 5 3 +2 5","title":"\u7b97\u6570\u8fd0\u7b97"},{"location":"misc/shell.html#shift","text":"shift [n] Shift the positional parameters to the left by n. The positional parameters from n+1 . . . $# are renamed to $1 . . . $#-n. Parameters represented by the numbers $# to $#-n+1 are unset. n must be a non-negative number less than or equal to $#. If n is zero or greater than $#, the positional parameters are not changed. If n is not supplied, it is assumed to be 1. The return status is zero unless n is greater than $# or less than zero, non-zero otherwise. \u53ef\u4ee5\u7528\u6765\u505a\u53c2\u6570\u89e3\u6790\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u8003\u8651\u53c2\u6570\u987a\u5e8f for arg in \" $@ \" ; do case $arg in -h | --help ) printf \"Usage:\" exit 0 ;; -n | --num ) num = \" $2 \" shift shift ;; -c ) option = \"creat\" shift ;; * ) dir = \" $1 \" ;; esac done","title":"shift"},{"location":"misc/shell.html#_7","text":"\u4f7f\u7528\u5982\u4e0b\u7684\u683c\u5f0f\u5b8c\u6210\u81ea\u52a8\u4ea4\u4e92\uff0c\u7ed3\u5c3e\u7684delimiter\u8981\u9876\u683c\u5199\uff0c\u524d\u9762\u4e0d\u80fd\u6709\u4efb\u4f55\u5b57\u7b26\uff0c\u540e\u9762\u4e5f\u4e0d\u80fd\u6709\u4efb\u4f55\u5b57\u7b26\uff0c\u5305\u62ec\u7a7a\u683c\u548c tab \u7f29\u8fdb; \u5f00\u59cb\u7684delimiter\u524d\u540e\u7684\u7a7a\u683c\u4f1a\u88ab\u5ffd\u7565\u6389 command << delimiter document delimiter \u5b9e\u4f8b\u5982\u4e0b ftp -n -p 172 .16.10.103 << EOF user chsgcxy 123456 cd xxxx lcd xxxx put xxxx close bye EOF","title":"\u81ea\u52a8\u4ea4\u4e92"},{"location":"misc/shell.html#ftp","text":"ftp \u8981\u6ce8\u610f\u4e3b\u52a8\u6a21\u5f0f\u548c\u88ab\u52a8\u6a21\u5f0f\uff08-p\u9009\u9879\uff09 \u5982\u679c\u628aFTP\u670d\u52a1\u5668\u90e8\u7f72\u5728\u9632\u706b\u5899\u6216\u8005NAT\u670d\u52a1\u5668\u7684\u80cc \u540e\uff0c\u5219\u91c7\u7528\u4e3b\u52a8\u64cd\u4f5c\u6a21\u5f0f\u7684\u5ba2\u6237\u7aef\u53ea\u80fd\u591f\u5efa\u7acb\u547d\u4ee4\u8fde\u63a5\u800c\u65e0\u6cd5\u8fdb\u884c\u6587\u4ef6\u4f20\u8f93\u3002\u5982\u679c\u90e8\u7f72\u5b8cFTP\u670d\u52a1\u5668\u540e\uff0c\u7cfb\u7edf\u7ba1\u7406\u5458\u53d1\u73b0\u7528\u6237\u53ef\u4ee5\u8fde\u63a5\u4e0aFTP\u670d\u52a1\u5668\uff0c\u53ef\u4ee5\u67e5\u770b \u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\uff0c\u4f46\u662f\u5374\u65e0\u6cd5\u4e0b\u8f7d\u6216\u8005\u4e0a\u4f20\u6587\u4ef6\uff0c\u5982\u679c\u6392\u9664\u6743\u9650\u65b9\u9762\u7684\u9650\u5236\u5916\uff0c\u90a3\u4e48\u5f88\u6709\u53ef\u80fd\u5c31\u662f\u8fd9\u4e2a\u64cd\u4f5c\u6a21\u5f0f\u9009\u62e9\u9519\u8bef","title":"ftp"},{"location":"misc/shell.html#debug","text":"Shell Debugging Options -x print commands and args as executed -v print shell input as read -n don't run the script but check its syntax -u treat unset variables as errors The shell options, ( eg -x -v -n and -u ) can be invoked be in several ways - in a known area which can be enclosed within set commands to turn on and off the option ( set + will turn the option off set -e \u53ef\u4ee5\u4f7fshell\u811a\u672c\u5728\u53d1\u751f\u9519\u8bef\u7684\u65f6\u5019\u9000\u51fa","title":"debug"},{"location":"misc/skiing.html","text":"Skiing \u00b6 Skiing \u63a8\u5761 \u843d\u53f6\u98d8 \u6d77\u6d6a\u98d8 J\u5f2f\u7ec3\u4e60 C\u5f2f \u8fde\u63a5C\u5f2f\u5b8c\u6210\u6362\u5203 \u6ed1\u96ea\u7684\u8bad\u7ec3\u987a\u5e8f \u63a8\u5761 \u00b6 \u524d\u5203\u63a8\u5761 \u540e\u5203\u63a8\u5761 \u843d\u53f6\u98d8 \u00b6 \u524d\u5203\u843d\u53f6\u98d8 \u540e\u5203\u843d\u53f6\u98d8 \u677f\u5934\u5411\u4e0b\u7684\u89d2\u5ea6\u9010\u6e10\u52a0\u5927\uff0c\u53cd\u590d\u7ec3\u4e60 \u6d77\u6d6a\u98d8 \u00b6 \u524d\u5203\u6d77\u6d6a\u98d8 \u540e\u5203\u6d77\u6d6a\u98d8 \u53cd\u590d\u7ec3\u4e60 J\u5f2f\u7ec3\u4e60 \u00b6 \u540e\u5203J\u5f2f\uff1a\u540e\u5203\u8d77\u59cb\uff0c\u677f\u5934\u5b8c\u5168\u5411\u5c71\u4e0b\uff0c\u91cd\u5fc3\u79fb\u5230\u524d\u811a\uff0c\u5de6\u53f3\u811a\u4e00\u8d77\u7ec3\uff0c\u4e00\u4e0b\u5de6\u811a\uff0c\u4e00\u4e0b\u53f3\u811a\u3002\u5239\u4f4f\u518d\u8fdb\u884c\u4e0b\u4e00\u6b21 \u524d\u5203J\u5f2f\uff1a\u524d\u5203\u8d77\u59cb\uff0c\u677f\u5934\u5b8c\u5168\u5411\u5c71\u4e0b\uff0c\u91cd\u5fc3\u79fb\u5230\u524d\u811a\uff0c\u5de6\u53f3\u811a\u4e00\u8d77\u7ec3\uff0c\u4e00\u4e0b\u5de6\u811a\uff0c\u4e00\u4e0b\u53f3\u811a\u3002\u5239\u4f4f\u518d\u8fdb\u884c\u4e0b\u4e00\u6b21 J\u5f2f\u548c\u6d77\u6d6a\u6e7e\u7684\u533a\u522b\u5728\u4e8e\uff0c\u6d77\u6d6a\u6e7e\u677f\u5934\u4e0d\u9700\u8981\u5b8c\u5168\u5411\u5c71\u4e0b\u3002\u6ed1\u7684\u65f6\u5019\u5c3d\u91cf\u53ea\u7528\u540c\u4e00\u4fa7\u7684\u5203\uff0c \u5982\u679c\u80fd\u505a\u5230\u5b8c\u5168\u53ea\u7528\u540c\u4e00\u4fa7\u7684\u5203\u505a\u51fa\u52a8\u4f5c\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u7ec3\u4e60\u6bd4\u8f83\u5145\u5206\u4e86\u3002 C\u5f2f \u00b6 \u524d\u5203\u6362\u540e\u5203C\u5f2f \u540e\u5203\u6362\u524d\u5203C\u5f2f \u6ce8\u610f\u89c6\u7ebf\u5f15\u5bfc\uff0c\u80a9\u8180\uff0c\u9acb\u5173\u8282\uff0c\u819d\u76d6\uff0c\u677f\u5b50\uff0c\u56db\u8f74\u4fdd\u6301\u5e73\u884c\u9501\u5b9a\uff0c\u4e0a\u534a\u8eab\u6765\u5f15\u5bfc\u3002 \u91cd\u5fc3\u5728\u542f\u52a8\u540e\u7acb\u9a6c\u79fb\u5230\u524d\u811a\uff0c\u540e\u811a\u6ce8\u610f\u6413\u677f\u3002 \u524d\u819d\u76d6\u5148\u52a8\uff0c\u5e26\u52a8\u540e\u819d\u76d6\uff0c\u5373\u62e7\u677f\u52a8\u4f5c\u3002 \u8fde\u63a5C\u5f2f\u5b8c\u6210\u6362\u5203 \u00b6 \u4e00\u5f00\u59cb\u7ec3\u4e60\u6ce8\u610f\u63a7\u5236\u901f\u5ea6\uff0c\u6bcf\u6b21\u8f6c\u6362C\u5f2f\u7684\u65f6\u5019\u505a\u4e00\u4e2a\u68c0\u67e5\u3002 \u9010\u6e10\u5730\u4e0d\u7528\u6bcf\u6b21\u90fd\u5c06\u677f\u5e73\u884c\u5c71\u4e0b\uff0c\u53ef\u4ee5\u4fdd\u6301\u7a0d\u5fae\u6709\u4e00\u4e2a\u89d2\u5ea6\u3002 \u627e\u5230\u5760\u843d\u5230\u4e0b\u4e00\u4e2a\u5f2f\u7684\u611f\u89c9\u3002 \u6362\u5203\u719f\u7ec3\u540e\u6162\u6162\u5730\u628a\u677f\u592a\u9ad8\uff0c\u7ec3\u4e60\u8d70\u5203\u3002","title":"Skiing"},{"location":"misc/skiing.html#skiing","text":"Skiing \u63a8\u5761 \u843d\u53f6\u98d8 \u6d77\u6d6a\u98d8 J\u5f2f\u7ec3\u4e60 C\u5f2f \u8fde\u63a5C\u5f2f\u5b8c\u6210\u6362\u5203 \u6ed1\u96ea\u7684\u8bad\u7ec3\u987a\u5e8f","title":"Skiing"},{"location":"misc/skiing.html#_1","text":"\u524d\u5203\u63a8\u5761 \u540e\u5203\u63a8\u5761","title":"\u63a8\u5761"},{"location":"misc/skiing.html#_2","text":"\u524d\u5203\u843d\u53f6\u98d8 \u540e\u5203\u843d\u53f6\u98d8 \u677f\u5934\u5411\u4e0b\u7684\u89d2\u5ea6\u9010\u6e10\u52a0\u5927\uff0c\u53cd\u590d\u7ec3\u4e60","title":"\u843d\u53f6\u98d8"},{"location":"misc/skiing.html#_3","text":"\u524d\u5203\u6d77\u6d6a\u98d8 \u540e\u5203\u6d77\u6d6a\u98d8 \u53cd\u590d\u7ec3\u4e60","title":"\u6d77\u6d6a\u98d8"},{"location":"misc/skiing.html#j","text":"\u540e\u5203J\u5f2f\uff1a\u540e\u5203\u8d77\u59cb\uff0c\u677f\u5934\u5b8c\u5168\u5411\u5c71\u4e0b\uff0c\u91cd\u5fc3\u79fb\u5230\u524d\u811a\uff0c\u5de6\u53f3\u811a\u4e00\u8d77\u7ec3\uff0c\u4e00\u4e0b\u5de6\u811a\uff0c\u4e00\u4e0b\u53f3\u811a\u3002\u5239\u4f4f\u518d\u8fdb\u884c\u4e0b\u4e00\u6b21 \u524d\u5203J\u5f2f\uff1a\u524d\u5203\u8d77\u59cb\uff0c\u677f\u5934\u5b8c\u5168\u5411\u5c71\u4e0b\uff0c\u91cd\u5fc3\u79fb\u5230\u524d\u811a\uff0c\u5de6\u53f3\u811a\u4e00\u8d77\u7ec3\uff0c\u4e00\u4e0b\u5de6\u811a\uff0c\u4e00\u4e0b\u53f3\u811a\u3002\u5239\u4f4f\u518d\u8fdb\u884c\u4e0b\u4e00\u6b21 J\u5f2f\u548c\u6d77\u6d6a\u6e7e\u7684\u533a\u522b\u5728\u4e8e\uff0c\u6d77\u6d6a\u6e7e\u677f\u5934\u4e0d\u9700\u8981\u5b8c\u5168\u5411\u5c71\u4e0b\u3002\u6ed1\u7684\u65f6\u5019\u5c3d\u91cf\u53ea\u7528\u540c\u4e00\u4fa7\u7684\u5203\uff0c \u5982\u679c\u80fd\u505a\u5230\u5b8c\u5168\u53ea\u7528\u540c\u4e00\u4fa7\u7684\u5203\u505a\u51fa\u52a8\u4f5c\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u7ec3\u4e60\u6bd4\u8f83\u5145\u5206\u4e86\u3002","title":"J\u5f2f\u7ec3\u4e60"},{"location":"misc/skiing.html#c","text":"\u524d\u5203\u6362\u540e\u5203C\u5f2f \u540e\u5203\u6362\u524d\u5203C\u5f2f \u6ce8\u610f\u89c6\u7ebf\u5f15\u5bfc\uff0c\u80a9\u8180\uff0c\u9acb\u5173\u8282\uff0c\u819d\u76d6\uff0c\u677f\u5b50\uff0c\u56db\u8f74\u4fdd\u6301\u5e73\u884c\u9501\u5b9a\uff0c\u4e0a\u534a\u8eab\u6765\u5f15\u5bfc\u3002 \u91cd\u5fc3\u5728\u542f\u52a8\u540e\u7acb\u9a6c\u79fb\u5230\u524d\u811a\uff0c\u540e\u811a\u6ce8\u610f\u6413\u677f\u3002 \u524d\u819d\u76d6\u5148\u52a8\uff0c\u5e26\u52a8\u540e\u819d\u76d6\uff0c\u5373\u62e7\u677f\u52a8\u4f5c\u3002","title":"C\u5f2f"},{"location":"misc/skiing.html#c_1","text":"\u4e00\u5f00\u59cb\u7ec3\u4e60\u6ce8\u610f\u63a7\u5236\u901f\u5ea6\uff0c\u6bcf\u6b21\u8f6c\u6362C\u5f2f\u7684\u65f6\u5019\u505a\u4e00\u4e2a\u68c0\u67e5\u3002 \u9010\u6e10\u5730\u4e0d\u7528\u6bcf\u6b21\u90fd\u5c06\u677f\u5e73\u884c\u5c71\u4e0b\uff0c\u53ef\u4ee5\u4fdd\u6301\u7a0d\u5fae\u6709\u4e00\u4e2a\u89d2\u5ea6\u3002 \u627e\u5230\u5760\u843d\u5230\u4e0b\u4e00\u4e2a\u5f2f\u7684\u611f\u89c9\u3002 \u6362\u5203\u719f\u7ec3\u540e\u6162\u6162\u5730\u628a\u677f\u592a\u9ad8\uff0c\u7ec3\u4e60\u8d70\u5203\u3002","title":"\u8fde\u63a5C\u5f2f\u5b8c\u6210\u6362\u5203"},{"location":"misc/vlog.html","text":"Vlog \u00b6 Vlog \u666f\u522b \u8fdc\u666f \u5168\u666f \u4e2d\u666f \u8fd1\u666f \u7279\u5199 \u4e2d\u7279 \u5927\u7279 \u6444\u6cd5 \u5e0c\u533a\u67ef\u514b\u5f0f\u53d8\u7126 \u7b80\u4ecb \u539f\u7406 \u5b9e\u73b0 \u4e13\u4e1a\u62cd\u6444 PR\u540e\u671f\u5b9e\u73b0 \u79fb\u52a8\u53d8\u7126\u5b9e\u73b0 \u666f\u522b \u00b6 \u666f\u522b\u662f\u6307\u7531\u4e8e\u6444\u5f71\u673a\u4e0e\u88ab\u6444\u4f53\u7684\u8ddd\u79bb\u4e0d\u540c\uff0c\u800c\u9020\u6210\u88ab\u6444\u4f53\u5728\u753b\u9762\u4e2d\u6240\u5448\u73b0\u51fa\u7684\u8303\u56f4\u5927\u5c0f\u7684\u533a\u522b\u3002 \u666f\u522b\u7684\u5212\u5206\uff0c\u4e00\u822c\u53ef\u5206\u4e3a\u4e94\u79cd\uff0c\u7531\u8fd1\u81f3\u8fdc\u5206\u522b\u4e3a\u7279\u5199\u3001\u8fd1\u666f\u3001\u4e2d\u666f\u3001\u5168\u666f\u3001\u8fdc\u666f\u3002 \u8fdc\u666f \u00b6 \u8fdc\u666f\u662f\u666f\u522b\u4e2d\u89c6\u8ddd\u6700\u8fdc\u3001\u8868\u73b0\u7a7a\u95f4\u8303\u56f4\u6700\u5927\u7684\u4e00\u79cd\u666f\u522b\u3002\u8fdc\u666f\u89c6\u91ce\u6df1\u8fdc\u3001\u5bbd\u9614\uff0c\u4e3b\u8981\u8868\u73b0\u5730\u7406\u73af\u5883\u3001\u81ea\u7136\u98ce\u8c8c\u548c\u5f00\u9614\u7684\u573a\u666f\u548c\u573a\u9762\u3002\u8fdc\u666f\u4e0d\u592a\u5bb9\u6613\u6709\u89c6\u89c9\u7684\u4e2d\u5fc3\uff0c\u66f4\u591a\u7684\u662f\u8868\u73b0\u5e7f\u9614\uff0c\u58ee\u89c2\uff0c\u4eba\u5728\u8fdc\u666f\u4e2d\u5b58\u5728\u7684\u4e0d\u7a81\u51fa \u5168\u666f \u00b6 \u5168\u666f\u62cd\u6444\u7684\u62cd\u6444\u8303\u56f4\u4f1a\u6bd4\u8fdc\u666f\u7565\u5fae\u5c0f\u4e00\u4e9b\u3002 \u5168\u666f\u4e3b\u8981\u662f\u7a81\u51fa\u753b\u9762\u4e3b\u4f53\u7684\u5168\u90e8\u9762\u8c8c\u3002\u5c55\u73b0\u4eba\u7684\u8fd0\u52a8\u7b49\u53ef\u4ee5\u7528\u5230\uff0c\u9664\u4e86\u6709\u660e\u786e\u7684\u4e3b\u4f53\uff0c\u8fd8\u4ea4\u4ee3\u4e86\u73af\u5883\u3002\u9700\u8981\u6ce8\u610f\u4e3b\u4f53\u5728\u73af\u5883\u4e2d\u7684\u4f4d\u7f6e\u3002 \u5168\u666f\u4e2d\uff0c\u4eba\u7684\u5934\u9876\u4ee5\u4e0a\u548c\u811a\u5e95\u4ee5\u4e0b\u7559\u51fa\u4e86\u5145\u5206\u7684\u7a7a\u95f4\uff0c\u753b\u9762\u7684\u4fe1\u606f\u5f88\u591a\uff0c\u5305\u62ec\u7a7a\u95f4\u7ed3\u6784\uff0c\u6f14\u5458\u7684\u5927\u5e45\u5ea6\u52a8\u4f5c\u7b49\uff0c\u5e76\u4e14\u76f8\u5bf9\u5f00\u9614\u7684\u7a7a\u95f4\u4e5f\u53ef\u4ee5\u8ba9\u591a\u4e2a\u6f14\u5458\u540c\u65f6\u51fa\u73b0\u5728\u955c\u5934\u4e2d\u3002 \u4e2d\u5168\u666f\u662f\u4ecb\u4e8e\u5168\u666f\u548c\u4e2d\u666f\u4e4b\u95f4\uff0c\u548c\u5168\u666f\u4e0d\u540c\uff0c\u4eba\u7269\u5934\u9876\u4f9d\u7136\u7559\u6709\u7a7a\u95f4\uff0c\u800c\u753b\u9762\u4e0b\u65b9\u5219\u662f\u53d6\u5230\u819d\u76d6\u4e0a\u65b9\u4e00\u70b9\u70b9\uff0c\u529f\u80fd\u7c7b\u4f3c\u5168\u666f\uff0c\u53ea\u662f\u53d6\u666f\u8303\u56f4\u76f8\u5bf9\u5c0f\u4e00\u70b9 \u4e2d\u666f \u00b6 \u53d6\u666f\u7684\u8303\u56f4\u521a\u597d\u5728\u8170\u90e8\u4ee5\u4e0b\u5927\u817f\u5904\u7684\u4f4d\u7f6e\u3002\u9700\u8981\u6ce8\u610f\u4e3b\u4f53\u5934\u90e8\u4f9d\u7136\u7559\u6709\u7a7a\u95f4\uff0c\u7740\u91cd\u8868\u73b0\u4eba\u7269\u4e0a\u80a2\u52a8\u4f5c \u8fd1\u666f \u00b6 \u4eba\u7269\u7684\u80f8\u90e8\u4ee5\u4e0a\uff0c\u5934\u90e8\u4e0d\u518d\u7559\u6709\u7a7a\u95f4 \u7279\u5199 \u00b6 \u80a9\u90e8\u4ee5\u4e0a\uff0c\u5934\u90e8\u4e0d\u518d\u7559\u6709\u7a7a\u95f4 \u4e2d\u7279 \u00b6 \u773c\u775b\u6700\u597d\u5904\u4e8e\u753b\u9762\u4e0a\u65b9\u7684\u4e09\u5206\u4e4b\u4e00\u5904\uff0c\u5934\u9876\u53ef\u4ee5\u88c1\u6389\u4e00\u90e8\u5206\u5934\u53d1\uff0c\u800c\u4e0b\u5df4\u4e00\u4e0b\u9700\u8981\u7559\u51fa\u90e8\u5206\u7a7a\u95f4\uff0c\u53e6\u5916\u8fd8\u5305\u542b\u4e00\u70b9\u70b9\u80a9\u8180\u3002 \u5927\u7279 \u00b6 \u5927\u7279\u5199\u65f6\uff0c\u5934\u90e8\u4e0a\u65b9\u88c1\u6389\u4e86\u66f4\u591a\uff0c\u800c\u4e0b\u5df4\u5219\u548c\u753b\u9762\u5e95\u90e8\u6709\u9002\u5f53\u7684\u95f4\u9699\uff0c\u8fd9\u4e2a\u666f\u522b\u53ef\u4ee5\u66f4\u52a0\u6df1\u5165\u5730\u4f53\u4f1a\u6f14\u5458\u7684\u5185\u5fc3\u6d3b\u52a8 \u6444\u6cd5 \u00b6 \u5e0c\u533a\u67ef\u514b\u5f0f\u53d8\u7126 \u00b6 \u7b80\u4ecb \u00b6 \u5e0c\u533a\u67ef\u514b\u5f0f\u53d8\u7126\u4e5f\u88ab\u79f0\u4f5c\u6ed1\u52a8\uff08\u79fb\u52a8\uff09\u53d8\u7126\uff0c\u662f\u5e0c\u533a\u67ef\u514b\u4e0e\u6444\u5f71\u5e08\u7f57\u4f2f\u7279\u00b7\u4f2f\u514b\u65af\u5728\u7535\u5f71\u300a\u8ff7\u9b42\u8bb0/Vertigo\u300b\u4e2d\u9996\u521b\uff0c\u540d\u4e3aDolly Zoom\uff08\u79fb\u52a8\u53d8\u7126\u3001\u6ed1\u52a8\u53d8\u7126\uff09 \u8981\u9886\u4e3a\u5728\u62cd\u6444\u4e2d\u524d\u8fdb\u6216\u8005\u540e\u9000\u7684\u540c\u65f6\uff0c\u53cd\u5411\u6539\u53d8\u7126\u8ddd\uff0c\u8fd9\u79cd\u53d8\u5316\u5c06\u4f1a\u6539\u53d8\u900f\u89c6\u5173\u7cfb\uff0c\u5448\u73b0\u51fa\u4e00\u79cd\u79d1\u5e7b\uff0c\u70ab\u9177\uff0c\u7d27\u5f20\uff0c\u5177\u6709\u51b2\u51fb\u529b\u7684\u955c\u5934\u611f\u3002 \u539f\u7406 \u00b6 \u5728\u62cd\u6444\u65f6\uff0c\u8981\u4fdd\u6301\u62cd\u6444\u7684\u4e3b\u4f53\u5927\u5c0f\u4e0d\u53d8\uff0c\u8fdb\u884c\u80cc\u666f\u7684\u5927\u5c0f\u53d8\u5316\uff1a \u7531\u8fdc\u53ca\u8fd1\uff0c\u9760\u8fd1\u4e3b\u4f53\u65f6\uff0c\u51cf\u5c0f\u7126\u8ddd\uff08\u7f29\u5c0f\u753b\u9762\uff09\uff0c\u4f7f\u89c6\u89d2\u53d8\u5927\uff0c\u4fdd\u6301\u4e3b\u4f53\u5927\u5c0f\u4e0d\u53d8\uff0c\u80cc\u666f\u4e2d\u7684\u5185\u5bb9\u53d8\u591a\u3002 \u7531\u8fd1\u53ca\u8fdc\uff0c\u8fdc\u79bb\u4e3b\u4f53\u65f6\uff0c\u589e\u5927\u7126\u8ddd\uff08\u653e\u5927\u753b\u9762\uff09\uff0c\u4f7f\u89c6\u89d2\u53d8\u5c0f\uff0c\u4fdd\u6301\u4e3b\u4f53\u5927\u5c0f\u4e0d\u53d8\uff0c\u80cc\u666f\u4e2d\u7684\u5185\u5bb9\u53d8\u5c11\u3002 \u5b9e\u73b0 \u00b6 \u62cd\u6444\u65f6\u4e3b\u4f53\u8981\u7a81\u51fa \u4e13\u4e1a\u62cd\u6444 \u00b6 \u4f7f\u7528\u53d8\u7126\u955c\u5934\u548c\u79fb\u52a8\u6ed1\u8f68\u540c\u6b65\u79fb\u52a8\u4ea7\u751f\u89c6\u89c9\u9519\u89c9 PR\u540e\u671f\u5b9e\u73b0 \u00b6 \u9996\u5148\u62cd\u6444\u4e00\u6bb5\u5bf9\u7740\u4e3b\u4f53\u76f4\u7ebf\u5f80\u524d\u7684\u89c6\u9891\uff0c\u6ce8\u610f\u62cd\u6444\u65f6\u52a1\u5fc5\u8c03\u8282\u5206\u8fa8\u7387\u81f3\u6700\u9ad8\uff0c\u4e14\u901f\u5ea6\u5747\u5300\uff0c \u5728PR\u540e\u671f\u4e2d\uff0c\u653e\u5927\u9996\u90e8\u5173\u952e\u5e27\uff0c\u7f29\u5c0f\u5c3e\u90e8\u5173\u952e\u5e27\uff0c\u5373\u53ef\u3002 \u8fd9\u4e5f\u662f\u6700\u7b80\u5355\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u53ea\u9700\u8981\u524d\u671f\u753b\u9762\u7a33\u5b9a\uff0c\u8d28\u91cf\u9ad8\uff0c\u653e\u5927\u6bd4\u4f8b\u4e0d\u80fd\u592a\u5927\u3002 \u79fb\u52a8\u53d8\u7126\u5b9e\u73b0 \u00b6 \u624b\u52a8\u6539\u53d8\u955c\u5934\u4f4d\u7f6e\uff0c\u6bcf\u79fb\u52a8\u4e00\u6b21\u6539\u53d8\u4e00\u6b21\u7126\u8ddd\uff0c\u5b8c\u6210\u4e00\u4e2a\u624b\u52a8\u5ef6\u8fdf\u6444\u5f71","title":"Vlog"},{"location":"misc/vlog.html#vlog","text":"Vlog \u666f\u522b \u8fdc\u666f \u5168\u666f \u4e2d\u666f \u8fd1\u666f \u7279\u5199 \u4e2d\u7279 \u5927\u7279 \u6444\u6cd5 \u5e0c\u533a\u67ef\u514b\u5f0f\u53d8\u7126 \u7b80\u4ecb \u539f\u7406 \u5b9e\u73b0 \u4e13\u4e1a\u62cd\u6444 PR\u540e\u671f\u5b9e\u73b0 \u79fb\u52a8\u53d8\u7126\u5b9e\u73b0","title":"Vlog"},{"location":"misc/vlog.html#_1","text":"\u666f\u522b\u662f\u6307\u7531\u4e8e\u6444\u5f71\u673a\u4e0e\u88ab\u6444\u4f53\u7684\u8ddd\u79bb\u4e0d\u540c\uff0c\u800c\u9020\u6210\u88ab\u6444\u4f53\u5728\u753b\u9762\u4e2d\u6240\u5448\u73b0\u51fa\u7684\u8303\u56f4\u5927\u5c0f\u7684\u533a\u522b\u3002 \u666f\u522b\u7684\u5212\u5206\uff0c\u4e00\u822c\u53ef\u5206\u4e3a\u4e94\u79cd\uff0c\u7531\u8fd1\u81f3\u8fdc\u5206\u522b\u4e3a\u7279\u5199\u3001\u8fd1\u666f\u3001\u4e2d\u666f\u3001\u5168\u666f\u3001\u8fdc\u666f\u3002","title":"\u666f\u522b"},{"location":"misc/vlog.html#_2","text":"\u8fdc\u666f\u662f\u666f\u522b\u4e2d\u89c6\u8ddd\u6700\u8fdc\u3001\u8868\u73b0\u7a7a\u95f4\u8303\u56f4\u6700\u5927\u7684\u4e00\u79cd\u666f\u522b\u3002\u8fdc\u666f\u89c6\u91ce\u6df1\u8fdc\u3001\u5bbd\u9614\uff0c\u4e3b\u8981\u8868\u73b0\u5730\u7406\u73af\u5883\u3001\u81ea\u7136\u98ce\u8c8c\u548c\u5f00\u9614\u7684\u573a\u666f\u548c\u573a\u9762\u3002\u8fdc\u666f\u4e0d\u592a\u5bb9\u6613\u6709\u89c6\u89c9\u7684\u4e2d\u5fc3\uff0c\u66f4\u591a\u7684\u662f\u8868\u73b0\u5e7f\u9614\uff0c\u58ee\u89c2\uff0c\u4eba\u5728\u8fdc\u666f\u4e2d\u5b58\u5728\u7684\u4e0d\u7a81\u51fa","title":"\u8fdc\u666f"},{"location":"misc/vlog.html#_3","text":"\u5168\u666f\u62cd\u6444\u7684\u62cd\u6444\u8303\u56f4\u4f1a\u6bd4\u8fdc\u666f\u7565\u5fae\u5c0f\u4e00\u4e9b\u3002 \u5168\u666f\u4e3b\u8981\u662f\u7a81\u51fa\u753b\u9762\u4e3b\u4f53\u7684\u5168\u90e8\u9762\u8c8c\u3002\u5c55\u73b0\u4eba\u7684\u8fd0\u52a8\u7b49\u53ef\u4ee5\u7528\u5230\uff0c\u9664\u4e86\u6709\u660e\u786e\u7684\u4e3b\u4f53\uff0c\u8fd8\u4ea4\u4ee3\u4e86\u73af\u5883\u3002\u9700\u8981\u6ce8\u610f\u4e3b\u4f53\u5728\u73af\u5883\u4e2d\u7684\u4f4d\u7f6e\u3002 \u5168\u666f\u4e2d\uff0c\u4eba\u7684\u5934\u9876\u4ee5\u4e0a\u548c\u811a\u5e95\u4ee5\u4e0b\u7559\u51fa\u4e86\u5145\u5206\u7684\u7a7a\u95f4\uff0c\u753b\u9762\u7684\u4fe1\u606f\u5f88\u591a\uff0c\u5305\u62ec\u7a7a\u95f4\u7ed3\u6784\uff0c\u6f14\u5458\u7684\u5927\u5e45\u5ea6\u52a8\u4f5c\u7b49\uff0c\u5e76\u4e14\u76f8\u5bf9\u5f00\u9614\u7684\u7a7a\u95f4\u4e5f\u53ef\u4ee5\u8ba9\u591a\u4e2a\u6f14\u5458\u540c\u65f6\u51fa\u73b0\u5728\u955c\u5934\u4e2d\u3002 \u4e2d\u5168\u666f\u662f\u4ecb\u4e8e\u5168\u666f\u548c\u4e2d\u666f\u4e4b\u95f4\uff0c\u548c\u5168\u666f\u4e0d\u540c\uff0c\u4eba\u7269\u5934\u9876\u4f9d\u7136\u7559\u6709\u7a7a\u95f4\uff0c\u800c\u753b\u9762\u4e0b\u65b9\u5219\u662f\u53d6\u5230\u819d\u76d6\u4e0a\u65b9\u4e00\u70b9\u70b9\uff0c\u529f\u80fd\u7c7b\u4f3c\u5168\u666f\uff0c\u53ea\u662f\u53d6\u666f\u8303\u56f4\u76f8\u5bf9\u5c0f\u4e00\u70b9","title":"\u5168\u666f"},{"location":"misc/vlog.html#_4","text":"\u53d6\u666f\u7684\u8303\u56f4\u521a\u597d\u5728\u8170\u90e8\u4ee5\u4e0b\u5927\u817f\u5904\u7684\u4f4d\u7f6e\u3002\u9700\u8981\u6ce8\u610f\u4e3b\u4f53\u5934\u90e8\u4f9d\u7136\u7559\u6709\u7a7a\u95f4\uff0c\u7740\u91cd\u8868\u73b0\u4eba\u7269\u4e0a\u80a2\u52a8\u4f5c","title":"\u4e2d\u666f"},{"location":"misc/vlog.html#_5","text":"\u4eba\u7269\u7684\u80f8\u90e8\u4ee5\u4e0a\uff0c\u5934\u90e8\u4e0d\u518d\u7559\u6709\u7a7a\u95f4","title":"\u8fd1\u666f"},{"location":"misc/vlog.html#_6","text":"\u80a9\u90e8\u4ee5\u4e0a\uff0c\u5934\u90e8\u4e0d\u518d\u7559\u6709\u7a7a\u95f4","title":"\u7279\u5199"},{"location":"misc/vlog.html#_7","text":"\u773c\u775b\u6700\u597d\u5904\u4e8e\u753b\u9762\u4e0a\u65b9\u7684\u4e09\u5206\u4e4b\u4e00\u5904\uff0c\u5934\u9876\u53ef\u4ee5\u88c1\u6389\u4e00\u90e8\u5206\u5934\u53d1\uff0c\u800c\u4e0b\u5df4\u4e00\u4e0b\u9700\u8981\u7559\u51fa\u90e8\u5206\u7a7a\u95f4\uff0c\u53e6\u5916\u8fd8\u5305\u542b\u4e00\u70b9\u70b9\u80a9\u8180\u3002","title":"\u4e2d\u7279"},{"location":"misc/vlog.html#_8","text":"\u5927\u7279\u5199\u65f6\uff0c\u5934\u90e8\u4e0a\u65b9\u88c1\u6389\u4e86\u66f4\u591a\uff0c\u800c\u4e0b\u5df4\u5219\u548c\u753b\u9762\u5e95\u90e8\u6709\u9002\u5f53\u7684\u95f4\u9699\uff0c\u8fd9\u4e2a\u666f\u522b\u53ef\u4ee5\u66f4\u52a0\u6df1\u5165\u5730\u4f53\u4f1a\u6f14\u5458\u7684\u5185\u5fc3\u6d3b\u52a8","title":"\u5927\u7279"},{"location":"misc/vlog.html#_9","text":"","title":"\u6444\u6cd5"},{"location":"misc/vlog.html#_10","text":"","title":"\u5e0c\u533a\u67ef\u514b\u5f0f\u53d8\u7126"},{"location":"misc/vlog.html#_11","text":"\u5e0c\u533a\u67ef\u514b\u5f0f\u53d8\u7126\u4e5f\u88ab\u79f0\u4f5c\u6ed1\u52a8\uff08\u79fb\u52a8\uff09\u53d8\u7126\uff0c\u662f\u5e0c\u533a\u67ef\u514b\u4e0e\u6444\u5f71\u5e08\u7f57\u4f2f\u7279\u00b7\u4f2f\u514b\u65af\u5728\u7535\u5f71\u300a\u8ff7\u9b42\u8bb0/Vertigo\u300b\u4e2d\u9996\u521b\uff0c\u540d\u4e3aDolly Zoom\uff08\u79fb\u52a8\u53d8\u7126\u3001\u6ed1\u52a8\u53d8\u7126\uff09 \u8981\u9886\u4e3a\u5728\u62cd\u6444\u4e2d\u524d\u8fdb\u6216\u8005\u540e\u9000\u7684\u540c\u65f6\uff0c\u53cd\u5411\u6539\u53d8\u7126\u8ddd\uff0c\u8fd9\u79cd\u53d8\u5316\u5c06\u4f1a\u6539\u53d8\u900f\u89c6\u5173\u7cfb\uff0c\u5448\u73b0\u51fa\u4e00\u79cd\u79d1\u5e7b\uff0c\u70ab\u9177\uff0c\u7d27\u5f20\uff0c\u5177\u6709\u51b2\u51fb\u529b\u7684\u955c\u5934\u611f\u3002","title":"\u7b80\u4ecb"},{"location":"misc/vlog.html#_12","text":"\u5728\u62cd\u6444\u65f6\uff0c\u8981\u4fdd\u6301\u62cd\u6444\u7684\u4e3b\u4f53\u5927\u5c0f\u4e0d\u53d8\uff0c\u8fdb\u884c\u80cc\u666f\u7684\u5927\u5c0f\u53d8\u5316\uff1a \u7531\u8fdc\u53ca\u8fd1\uff0c\u9760\u8fd1\u4e3b\u4f53\u65f6\uff0c\u51cf\u5c0f\u7126\u8ddd\uff08\u7f29\u5c0f\u753b\u9762\uff09\uff0c\u4f7f\u89c6\u89d2\u53d8\u5927\uff0c\u4fdd\u6301\u4e3b\u4f53\u5927\u5c0f\u4e0d\u53d8\uff0c\u80cc\u666f\u4e2d\u7684\u5185\u5bb9\u53d8\u591a\u3002 \u7531\u8fd1\u53ca\u8fdc\uff0c\u8fdc\u79bb\u4e3b\u4f53\u65f6\uff0c\u589e\u5927\u7126\u8ddd\uff08\u653e\u5927\u753b\u9762\uff09\uff0c\u4f7f\u89c6\u89d2\u53d8\u5c0f\uff0c\u4fdd\u6301\u4e3b\u4f53\u5927\u5c0f\u4e0d\u53d8\uff0c\u80cc\u666f\u4e2d\u7684\u5185\u5bb9\u53d8\u5c11\u3002","title":"\u539f\u7406"},{"location":"misc/vlog.html#_13","text":"\u62cd\u6444\u65f6\u4e3b\u4f53\u8981\u7a81\u51fa","title":"\u5b9e\u73b0"},{"location":"misc/vlog.html#_14","text":"\u4f7f\u7528\u53d8\u7126\u955c\u5934\u548c\u79fb\u52a8\u6ed1\u8f68\u540c\u6b65\u79fb\u52a8\u4ea7\u751f\u89c6\u89c9\u9519\u89c9","title":"\u4e13\u4e1a\u62cd\u6444"},{"location":"misc/vlog.html#pr","text":"\u9996\u5148\u62cd\u6444\u4e00\u6bb5\u5bf9\u7740\u4e3b\u4f53\u76f4\u7ebf\u5f80\u524d\u7684\u89c6\u9891\uff0c\u6ce8\u610f\u62cd\u6444\u65f6\u52a1\u5fc5\u8c03\u8282\u5206\u8fa8\u7387\u81f3\u6700\u9ad8\uff0c\u4e14\u901f\u5ea6\u5747\u5300\uff0c \u5728PR\u540e\u671f\u4e2d\uff0c\u653e\u5927\u9996\u90e8\u5173\u952e\u5e27\uff0c\u7f29\u5c0f\u5c3e\u90e8\u5173\u952e\u5e27\uff0c\u5373\u53ef\u3002 \u8fd9\u4e5f\u662f\u6700\u7b80\u5355\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u53ea\u9700\u8981\u524d\u671f\u753b\u9762\u7a33\u5b9a\uff0c\u8d28\u91cf\u9ad8\uff0c\u653e\u5927\u6bd4\u4f8b\u4e0d\u80fd\u592a\u5927\u3002","title":"PR\u540e\u671f\u5b9e\u73b0"},{"location":"misc/vlog.html#_15","text":"\u624b\u52a8\u6539\u53d8\u955c\u5934\u4f4d\u7f6e\uff0c\u6bcf\u79fb\u52a8\u4e00\u6b21\u6539\u53d8\u4e00\u6b21\u7126\u8ddd\uff0c\u5b8c\u6210\u4e00\u4e2a\u624b\u52a8\u5ef6\u8fdf\u6444\u5f71","title":"\u79fb\u52a8\u53d8\u7126\u5b9e\u73b0"},{"location":"misc/words.html","text":"Words \u00b6 English chinese implementation/implementations \u5c65\u884c/\u5b9e\u73b0 interpreter \u7ffb\u8bd1\u5458/\u89e3\u91ca\u5668 unique \u72ec\u7279 substantially \u57fa\u672c\u4e0a alter/altered \u6539\u53d8 landscape \u6c5f\u5c71/\u98ce\u666f tutorials \u6559\u7a0b relay \u4e2d\u7ee7/\u8f6c\u64ad primitives \u539f\u51fd\u6570 demonstrate \u6f14\u793a iteration \u8fed\u4ee3 prefix \u5b57\u9996 demand \u9700\u6c42 divergence \u5dee\u5f02 accelerator \u52a0\u901f\u5668 exploit \u5229\u7528 explicitly \u660e\u786e\u7684 deployment \u90e8\u7f72 categories \u7c7b\u522b sustainable \u53ef\u6301\u7eed\u53d1\u5c55 decoupled \u89e3\u8026 denote \u8868\u793a transparent \u900f\u660e illustrate \u8bf4\u660e terminology \u672f\u8bed aspects \u65b9\u9762 mechanism \u673a\u5236 nest \u5d4c\u5957 glues \u80f6\u6c34 underlying \u5e95\u5c42 tradeoff \u6298\u4e2d penalty \u60e9\u7f5a","title":"Words"},{"location":"misc/words.html#words","text":"English chinese implementation/implementations \u5c65\u884c/\u5b9e\u73b0 interpreter \u7ffb\u8bd1\u5458/\u89e3\u91ca\u5668 unique \u72ec\u7279 substantially \u57fa\u672c\u4e0a alter/altered \u6539\u53d8 landscape \u6c5f\u5c71/\u98ce\u666f tutorials \u6559\u7a0b relay \u4e2d\u7ee7/\u8f6c\u64ad primitives \u539f\u51fd\u6570 demonstrate \u6f14\u793a iteration \u8fed\u4ee3 prefix \u5b57\u9996 demand \u9700\u6c42 divergence \u5dee\u5f02 accelerator \u52a0\u901f\u5668 exploit \u5229\u7528 explicitly \u660e\u786e\u7684 deployment \u90e8\u7f72 categories \u7c7b\u522b sustainable \u53ef\u6301\u7eed\u53d1\u5c55 decoupled \u89e3\u8026 denote \u8868\u793a transparent \u900f\u660e illustrate \u8bf4\u660e terminology \u672f\u8bed aspects \u65b9\u9762 mechanism \u673a\u5236 nest \u5d4c\u5957 glues \u80f6\u6c34 underlying \u5e95\u5c42 tradeoff \u6298\u4e2d penalty \u60e9\u7f5a","title":"Words"},{"location":"misc/work-201904-202102.html","text":"\u5de5\u4f5c\u603b\u7ed32019.04\uff5e2021.04 \u00b6 \u4e3a\u4e86\u660e\u786e\u4e0b\u4e00\u6b65\u7684\u6280\u672f\u65b9\u5411\u548c\u804c\u4e1a\u89c4\u5212\uff0c\u9636\u6bb5\u6027\u56de\u987e\u8fd1\u4e24\u5e74\u5de5\u4f5c\u5185\u5bb9\uff0c\u7f57\u5217\u6280\u672f\u8981\u70b9\uff0c\u67e5\u6f0f\u8865\u7f3a\u3002 RISCV\u6307\u4ee4\u96c6\u67b6\u6784 \u00b6 RISCV IMAFCV\u6307\u4ee4\u96c6 RISCV\u6c47\u7f16\u4ee3\u7801 RISCV\u5fae\u67b6\u6784 \u00b6","title":"\u5de5\u4f5c\u603b\u7ed32019.04\uff5e2021.04"},{"location":"misc/work-201904-202102.html#201904202104","text":"\u4e3a\u4e86\u660e\u786e\u4e0b\u4e00\u6b65\u7684\u6280\u672f\u65b9\u5411\u548c\u804c\u4e1a\u89c4\u5212\uff0c\u9636\u6bb5\u6027\u56de\u987e\u8fd1\u4e24\u5e74\u5de5\u4f5c\u5185\u5bb9\uff0c\u7f57\u5217\u6280\u672f\u8981\u70b9\uff0c\u67e5\u6f0f\u8865\u7f3a\u3002","title":"\u5de5\u4f5c\u603b\u7ed32019.04\uff5e2021.04"},{"location":"misc/work-201904-202102.html#riscv","text":"RISCV IMAFCV\u6307\u4ee4\u96c6 RISCV\u6c47\u7f16\u4ee3\u7801","title":"RISCV\u6307\u4ee4\u96c6\u67b6\u6784"},{"location":"misc/work-201904-202102.html#riscv_1","text":"","title":"RISCV\u5fae\u67b6\u6784"},{"location":"misc/xmr.html","text":"XMR \u00b6 [ https://github.com/tevador/RandomX ]","title":"XMR"},{"location":"misc/xmr.html#xmr","text":"[ https://github.com/tevador/RandomX ]","title":"XMR"},{"location":"python/env_requirement.html","text":"python \u865a\u62df\u73af\u5883\u53ca\u4f9d\u8d56 \u00b6 \u5f53\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u5f00\u53d1python\u8f6f\u4ef6\u65f6\uff0c\u6709\u65f6\u5019\u4f1a\u9047\u5230\u591a\u4e2a\u8f6f\u4ef6\u7528\u7684\u540c\u4e00python\u5e93\u7684\u4e0d\u540c\u7248\u672c\uff0c\u8fd9\u65f6\u5019\u5c31\u4f1a\u5f88\u9ebb\u70e6\u3002 \u800c\u4e14\uff0c\u6211\u5f80\u5f80\u5728\u8c03\u8bd5\u65f6\u4f1a\u6839\u636e\u9700\u8981\u5355\u72ec\u7684\u5b89\u88c5\u4e00\u4e9b\u4f9d\u8d56\u5e93\uff0c\u5f53\u522b\u4eba\u4f7f\u7528\u65f6\u6216\u8005\u90e8\u7f72\u5728\u65b0\u73af\u5883\u4e2d\u65f6\uff0c\u5c31\u4f1a\u5f88\u9ebb\u70e6\uff0c\u9700\u8981 \u4e00\u4e2a\u4e2a\u5e93\u7684\u8fdb\u884c\u5b89\u88c5\u3002python\u7684requirement.txt \u548c virtual env \u89e3\u51b3\u4e86\u8fd9\u4e00\u95ee\u9898\u3002 \u5207\u6362\u955c\u50cf\u6e90 \u00b6 mkdir ~/.pip cd ~/.pip gedit ./pip.conf [ global ] index-url = http://mirrors.aliyun.com/pypi/simple/ [ install ] trusted-host = mirrors.aliyun.com \u865a\u62dfenv \u00b6 pip3 install virtualenv python3 -m virtualenv .isatest ( \u60f3\u8981\u521b\u5efa\u7684env\u7684\u540d\u79f0 ) source .isatest/bin/activate requirement \u00b6 \u751f\u6210\u4f9d\u8d56\u6587\u4ef6 pip3 freeze > requirements.txt \u4ec5\u751f\u6210\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u4f9d\u8d56 pip3 install pipreqs pipreqs ./ \u5b89\u88c5\u4f9d\u8d56\u6587\u4ef6\u4e2d\u6307\u5b9a\u7684\u5305 pip3 install -r requirement.txt","title":"python \u865a\u62df\u73af\u5883\u53ca\u4f9d\u8d56"},{"location":"python/env_requirement.html#python","text":"\u5f53\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u5f00\u53d1python\u8f6f\u4ef6\u65f6\uff0c\u6709\u65f6\u5019\u4f1a\u9047\u5230\u591a\u4e2a\u8f6f\u4ef6\u7528\u7684\u540c\u4e00python\u5e93\u7684\u4e0d\u540c\u7248\u672c\uff0c\u8fd9\u65f6\u5019\u5c31\u4f1a\u5f88\u9ebb\u70e6\u3002 \u800c\u4e14\uff0c\u6211\u5f80\u5f80\u5728\u8c03\u8bd5\u65f6\u4f1a\u6839\u636e\u9700\u8981\u5355\u72ec\u7684\u5b89\u88c5\u4e00\u4e9b\u4f9d\u8d56\u5e93\uff0c\u5f53\u522b\u4eba\u4f7f\u7528\u65f6\u6216\u8005\u90e8\u7f72\u5728\u65b0\u73af\u5883\u4e2d\u65f6\uff0c\u5c31\u4f1a\u5f88\u9ebb\u70e6\uff0c\u9700\u8981 \u4e00\u4e2a\u4e2a\u5e93\u7684\u8fdb\u884c\u5b89\u88c5\u3002python\u7684requirement.txt \u548c virtual env \u89e3\u51b3\u4e86\u8fd9\u4e00\u95ee\u9898\u3002","title":"python \u865a\u62df\u73af\u5883\u53ca\u4f9d\u8d56"},{"location":"python/env_requirement.html#_1","text":"mkdir ~/.pip cd ~/.pip gedit ./pip.conf [ global ] index-url = http://mirrors.aliyun.com/pypi/simple/ [ install ] trusted-host = mirrors.aliyun.com","title":"\u5207\u6362\u955c\u50cf\u6e90"},{"location":"python/env_requirement.html#env","text":"pip3 install virtualenv python3 -m virtualenv .isatest ( \u60f3\u8981\u521b\u5efa\u7684env\u7684\u540d\u79f0 ) source .isatest/bin/activate","title":"\u865a\u62dfenv"},{"location":"python/env_requirement.html#requirement","text":"\u751f\u6210\u4f9d\u8d56\u6587\u4ef6 pip3 freeze > requirements.txt \u4ec5\u751f\u6210\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u4f9d\u8d56 pip3 install pipreqs pipreqs ./ \u5b89\u88c5\u4f9d\u8d56\u6587\u4ef6\u4e2d\u6307\u5b9a\u7684\u5305 pip3 install -r requirement.txt","title":"requirement"},{"location":"python/numpy_softfloat.html","text":"numpy \u4f7f\u7528softfloat\u7684\u65b9\u6cd5 \u00b6 numpy \u4f7f\u7528softfloat\u7684\u65b9\u6cd5 \u7b80\u8ff0 softfloat python\u63a5\u53e3\u7684softfloat \u4ee3\u7801\u5c55\u793a \u5c0f\u5b9e\u9a8c \u8ba1\u7b97\u7ed3\u679c\u5bf9\u6bd4 \u7b80\u8ff0 \u00b6 numpy\u672c\u8eab\u6ca1\u6709softfloat\u6570\u636e\u7c7b\u578b\uff0c\u4f46\u662fnumpy\u672c\u8eab\u662f\u4e00\u4e2a\u7c7b\u578b\u65e0\u5173\u7684\u5e93\uff0c\u5c31\u50cfEigen\u5e93\u4e00\u6837\uff0c\u672c\u8eab\u80fd\u591f\u505a\u5230\u4e0e\u6570\u636e\u7c7b\u578b\u65e0\u5173\uff08\u4e0d\u5f97\u4e0d\u8bf4\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u771f\u597d\uff01\uff01\uff01\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u4f7f\u7528numpy\u7ed3\u5408softfloat\u5e93\u5c31\u80fd\u505a\u5230softfloat\u6570\u636e\u7684\u77e9\u9635\u8fd0\u7b97 softfloat \u00b6 \u76ee\u524dsoftfloat\u53ea\u6709\u4e00\u4e2a\u6807\u51c6\u5b9e\u73b0\u7248\u672c\uff0c\u5373\u4e3aBerkeley SoftFloat\uff0c \u8fd9\u662f\u7b26\u5408IEEE\u6807\u51c6\u7684\u4e00\u4e2asoftfloat\u5e93\uff0cEigen\u5e93\u4e2d\u5305\u542b\u4e86\u67d0\u4e00\u7248\u672c\u7684softfloat. \u8fd9\u4e2a\u5e93\u672c\u8eab\u7528C\u8bed\u8a00\u5b9e\u73b0\uff0c\u7b26\u5408ISO/ANSI C\u6807\u51c6 \u5b98\u65b9\u7f51\u7ad9 http://www.jhauser.us/arithmetic/SoftFloat.html github\u4ed3\u5e93 https://github.com/ucb-bar/berkeley-softfloat-3 python\u63a5\u53e3\u7684softfloat \u00b6 \u76ee\u524d\u6709\u4e24\u4e2a\u6bd4\u8f83\u5bb9\u6613\u641c\u7d22\u5230\u7684python\u63a5\u53e3\u7684softfloat\u5e93 sfpy softfloat \u8fd9\u4e24\u4e2a\u597d\u574f\u4e0d\u8bba\uff08\u5176\u5b9e\u662f\u6ca1\u53bb\u7ec6\u770b\uff09, \u90fd\u53ef\u4ee5\u4f7f\u7528\uff0c\u6211\u5b89\u88c5\u7684\u662fsfpy\uff0c\u53ea\u662f\u56e0\u4e3a\u5b83\u7684\u7248\u672c\u53f7\u770b\u8d77\u6765\u6bd4softfloat\u5927\u4e00\u4e9b \u4ee3\u7801\u5c55\u793a \u00b6 \u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u5982\u4f55\u7ed3\u5408numpy\u5b8c\u6210softfloat16\u7684\u77e9\u9635\u70b9\u4e58\u8fd0\u7b97 >>> m1_array = np . arange ( 12 ) >>> m1_array = m1_array / 10 >>> m1_array = [ sfpy . Float16 ( i ) for i in m1_array ] >>> m1_array = np . array ( m1_array ) . reshape ( 3 , 4 ) >>> m1_array array ([[ Float16 ( 0.0 ), Float16 ( 0.0999755859375 ), Float16 ( 0.199951171875 ), Float16 ( 0.300048828125 )], [ Float16 ( 0.39990234375 ), Float16 ( 0.5 ), Float16 ( 0.60009765625 ), Float16 ( 0.7001953125 )], [ Float16 ( 0.7998046875 ), Float16 ( 0.89990234375 ), Float16 ( 1.0 ), Float16 ( 1.099609375 )]], dtype = object ) >>> m2_array = np . arange ( 20 ) >>> m2_array = m2_array / 100 >>> m2_array = [ sfpy . Float16 ( i ) for i in m2_array ] >>> m2_array = np . array ( m2_array ) . reshape ( 4 , 5 ) >>> m2_array array ([[ Float16 ( 0.0 ), Float16 ( 0.01000213623046875 ), Float16 ( 0.0200042724609375 ), Float16 ( 0.029998779296875 ), Float16 ( 0.040008544921875 )], [ Float16 ( 0.04998779296875 ), Float16 ( 0.05999755859375 ), Float16 ( 0.07000732421875 ), Float16 ( 0.08001708984375 ), Float16 ( 0.09002685546875 )], [ Float16 ( 0.0999755859375 ), Float16 ( 0.1099853515625 ), Float16 ( 0.1199951171875 ), Float16 ( 0.1300048828125 ), Float16 ( 0.1400146484375 )], [ Float16 ( 0.1500244140625 ), Float16 ( 0.1600341796875 ), Float16 ( 0.1700439453125 ), Float16 ( 0.1800537109375 ), Float16 ( 0.18994140625 )]], dtype = object ) >>> res = np . dot ( m1_array , m2_array ) array ([[ Float16 ( 0.07000732421875 ), Float16 ( 0.07598876953125 ), Float16 ( 0.08203125 ), Float16 ( 0.0880126953125 ), Float16 ( 0.093994140625 )], [ Float16 ( 0.18994140625 ), Float16 ( 0.2120361328125 ), Float16 ( 0.234130859375 ), Float16 ( 0.256103515625 ), Float16 ( 0.278076171875 )], [ Float16 ( 0.31005859375 ), Float16 ( 0.34814453125 ), Float16 ( 0.385986328125 ), Float16 ( 0.424072265625 ), Float16 ( 0.4619140625 )]], dtype = object ) >>> res_str = [ hex ( i . bits ) for i in res . flatten ()] >>> res_str [ '0x2c7b' , '0x2cdd' , '0x2d40' , '0x2da2' , '0x2e04' , '0x3214' , '0x32c9' , '0x337e' , '0x3419' , '0x3473' , '0x34f6' , '0x3592' , '0x362d' , '0x36c9' , '0x3764' ] \u5c0f\u5b9e\u9a8c \u00b6 \u6211\u4eec\u77e5\u9053\uff0cnumpy\u672c\u8eab\u63d0\u4f9b\u4e86np.float16\u6570\u636e\u7c7b\u578b\uff0c\u5b83\u5185\u90e8\u7684\u8ba1\u7b97\u5b9e\u9645\u4e0a\u8fd8\u662ffloat32,\u90a3\u4e48\u6211\u4eec\u8fd9\u4e48\u5199\u786e\u5b9a\u662f\u4f7f\u7528softfloat\u5e93\u4e2d\u7684float16\u8fdb\u884c\u8ba1\u7b97\u7684\u5417\uff1f \u4e3a\u4e86\u8bf4\u660e\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u81ea\u5df1\u5199\u4e2a\u5c0f\u7a0b\u5e8f\u6d4b\u8bd5\u4e00\u4e0b \u5199\u4e00\u4e2a\u6211\u4eec\u81ea\u5b9a\u4e49\u7684fp16,\u8fd9\u4e2a\u7c7b\u4f3c\u4e8esfpy\u4e2d\u7684\u5c01\u88c5\u65b9\u5f0f,\u4fdd\u5b58\u6210 myfp.py class MyFp16 (): def __init__ ( self , val ): self . val = val def __mul__ ( self , other ): print ( \"call mul......\" ) return MyFp16 ( self . val * other . val ) def __add__ ( self , other ): print ( \"call add......\" ) return MyFp16 ( self . val + other . val ) \u91c7\u7528\u547d\u4ee4\u884c\u76f4\u63a5\u8fdb\u884c\u6d4b\u8bd5 >>> import myfp as mp >>> import numpy as np >>> a = np . arange ( 5 ) >>> a = a / 10 >>> a = [ mp . MyFp16 ( i ) for i in a ] >>> np . array ( a ) array ([ < myfp . MyFp16 object at 0x7fc4cb756390 > , < myfp . MyFp16 object at 0x7fc4ab195d68 > , < myfp . MyFp16 object at 0x7fc4ab195cf8 > , < myfp . MyFp16 object at 0x7fc4ab195da0 > , < myfp . MyFp16 object at 0x7fc4ab195e80 > ], dtype = object ) >>> a = _ >>> np . sum ( a ) call add ...... call add ...... call add ...... call add ...... < myfp . MyFp16 object at 0x7fc4ab195cc0 > \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5b9e\u9645\u4e0a\u8c03\u7528\u4e86__add__\u65b9\u6cd5\uff0c\u5e76\u4e14\u7ed3\u679c\u4e3amyfp.MyFp16 object \u7c7b\u578b\uff0c \u8fd9\u6837\u5c31\u80fd\u8bf4\u660e\uff0c\u5b9e\u9645\u4e0a\u8ba1\u7b97\u65f6\u662f\u8c03\u7528\u4e86softfloat\u8fdb\u884c\u8ba1\u7b97\u7684 \u8ba1\u7b97\u7ed3\u679c\u5bf9\u6bd4 \u00b6 \u5728\u5bf9\u6bd4\u8ba1\u7b97\u7ed3\u679c\u65f6\uff0c\u53d1\u73b0numpy\u548csoftfloat\u8ba1\u7b97\u7684\u7ed3\u679c\u5728\u76f4\u63a5\u4f7f\u7528\u4e58\u6cd5\u6216\u8005\u52a0\u6cd5\u7684\u65f6\u5019\u5b8c\u5168\u4e00\u81f4\uff0c\u4f46\u4f7f\u7528np.sum\u6216\u8005np.dot\u65f6\uff0c\u7ed3\u679c\u4e0d\u4e00\u81f4 \u5bf9\u6b64\uff0c\u8fdb\u884c\u4e86\u8fdb\u4e00\u6b65\u7684\u6d4b\u8bd5 \u56fa\u5b9a\u6570\u7ec4\u957f\u5ea6\u4e3a10\uff0c calc0\u91c7\u7528np.sum\u7684\u8ba1\u7b97\u65b9\u5f0f\uff0ccalc1\u91c7\u7528\u76f4\u63a5\u76f8\u52a0\u7684\u8ba1\u7b97\u65b9\u5f0f(\u4e3a\u4e86\u4ee5\u9632\u4e07\u4e00\uff0c\u6211\u4eec\u91c7\u7528\u624b\u52a8\u628a10\u4e2a\u6570\u76f8\u52a0\u7684\u65b9\u5f0f), \u5206\u522b\u6d4b\u8bd5 import sfpy import numpy as np import misc def calc0 ( llist ): l0 = llist [ 0 ] new_list = llist [ 1 :] for n in new_list : #n_sum = n[0] + n[1] + n[2] + n[3] + n[4] + n[5] + n[6] + n[7] + n[8] + n[9] n_sum = np . sum ( n ) l0 = l0 * n + n_sum return l0 def calc1 ( llist ): l0 = llist [ 0 ] new_list = llist [ 1 :] for n in new_list : n_sum = n [ 0 ] + n [ 1 ] + n [ 2 ] + n [ 3 ] + n [ 4 ] + n [ 5 ] + n [ 6 ] + n [ 7 ] + n [ 8 ] + n [ 9 ] #n_sum = np.sum(n) l0 = l0 * n + n_sum return l0 list_src = [] for i in range ( 12 ): list_src . append ( misc . creat_matrix (( 10 ,))) list_np = [] list_sfp = [] for src in list_src : list_np . append ( np . array ( src )) list_sfp . append ( np . array ([ sfpy . float . Float16 ( i ) for i in src ])) np0 = calc0 ( list_np ) sfp0 = calc0 ( list_sfp ) np1 = calc1 ( list_np ) sfp1 = calc1 ( list_sfp ) np_res = [ hex ( misc . half_to_u16 ( i )) for i in np0 ] print ( \"numpy result use np.sum: \" , np_res ) np_res = [ hex ( misc . half_to_u16 ( i )) for i in np1 ] print ( \"numpy result use +: \" , np_res ) sfp_res = [ hex ( i . bits ) for i in sfp0 ] print ( \"softfloat result use np.sum: \" , sfp_res ) sfp_res = [ hex ( i . bits ) for i in sfp1 ] print ( \"softfloat result use +: \" , sfp_res ) \u8ba1\u7b97\u7ed3\u679c\u4e3a numpy result use np.sum: [ '0xbabe' , '0xbba3' , '0xbd50' , '0xbcca' , '0xb8f5' , '0xbc3a' , '0xbbf7' , '0xbc3c' , '0xbc17' , '0xbbc5' ] numpy result use +: [ '0xbabf' , '0xbba4' , '0xbd51' , '0xbccb' , '0xb8f6' , '0xbc3a' , '0xbbf8' , '0xbc3c' , '0xbc18' , '0xbbc6' ] softfloat result use np.sum: [ '0xbabf' , '0xbba4' , '0xbd51' , '0xbccb' , '0xb8f6' , '0xbc3a' , '0xbbf8' , '0xbc3c' , '0xbc18' , '0xbbc6' ] softfloat result use +: [ '0xbabf' , '0xbba4' , '0xbd51' , '0xbccb' , '0xb8f6' , '0xbc3a' , '0xbbf8' , '0xbc3c' , '0xbc18' , '0xbbc6' ] \u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u5bf9\u4e8esoftfloat\u6765\u8bb2\uff0c\u65e0\u8bba\u662f\u4f7f\u7528np.sum\u8fd8\u662f\u91c7\u7528\u76f4\u63a5\u76f8\u52a0\u7684\u65b9\u5f0f\uff0c\u7ed3\u679c\u4e0d\u53d8\uff1b\u4f46\u5bf9\u4e8enumpy\u7684\u5185\u5efa\u6570\u636e\u7c7b\u578bnp.float16\u6765\u8bb2\uff0c\u5728\u4f7f\u7528np.sum\u548c\u76f4\u63a5\u76f8\u52a0\u8fd9\u4e24\u79cd\u65b9\u5f0f\u65f6\uff0c\u8ba1\u7b97\u7ed3\u679c\u4f1a\u6709\u4e0d\u540c\u3002 \u9664\u6b64\u4e4b\u5916\uff0cnp.float16\u76f4\u63a5\u64cd\u4f5c\u7684\u7ed3\u679c\u548csoftfloat\u64cd\u4f5c\u7684\u7ed3\u679c\u662f\u6bd4\u7279\u4e00\u81f4\u7684(\u4e3a\u4ec0\u4e48\u5462\uff1f) \u90a3\u4e48\uff0c\u81f3\u5c11\u6211\u4eec\u80fd\u591f\u786e\u5b9a\uff0c\u95ee\u9898\u51fa\u5728numpy\u5185\u5efa\u6570\u636e\u7c7b\u578b\u7684\u8ba1\u7b97\u4e0a\uff0c\u5e76\u4e0d\u662fsoftfloat\u672c\u8eab\u5b58\u5728\u95ee\u9898\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48numpy\u7684\u5185\u5efa\u6570\u636e\u7c7b\u578b\u4f1a\u5448\u73b0\u51fa\u8fd9\u79cd\u7ed3\u679c\uff0c\u540e\u7eed\u770b\u4e00\u4e9bnumpy\u6e90\u7801\u624d\u80fd\u77e5\u6653","title":"numpy \u4f7f\u7528softfloat\u7684\u65b9\u6cd5"},{"location":"python/numpy_softfloat.html#numpy-softfloat","text":"numpy \u4f7f\u7528softfloat\u7684\u65b9\u6cd5 \u7b80\u8ff0 softfloat python\u63a5\u53e3\u7684softfloat \u4ee3\u7801\u5c55\u793a \u5c0f\u5b9e\u9a8c \u8ba1\u7b97\u7ed3\u679c\u5bf9\u6bd4","title":"numpy \u4f7f\u7528softfloat\u7684\u65b9\u6cd5"},{"location":"python/numpy_softfloat.html#_1","text":"numpy\u672c\u8eab\u6ca1\u6709softfloat\u6570\u636e\u7c7b\u578b\uff0c\u4f46\u662fnumpy\u672c\u8eab\u662f\u4e00\u4e2a\u7c7b\u578b\u65e0\u5173\u7684\u5e93\uff0c\u5c31\u50cfEigen\u5e93\u4e00\u6837\uff0c\u672c\u8eab\u80fd\u591f\u505a\u5230\u4e0e\u6570\u636e\u7c7b\u578b\u65e0\u5173\uff08\u4e0d\u5f97\u4e0d\u8bf4\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u771f\u597d\uff01\uff01\uff01\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u4f7f\u7528numpy\u7ed3\u5408softfloat\u5e93\u5c31\u80fd\u505a\u5230softfloat\u6570\u636e\u7684\u77e9\u9635\u8fd0\u7b97","title":"\u7b80\u8ff0"},{"location":"python/numpy_softfloat.html#softfloat","text":"\u76ee\u524dsoftfloat\u53ea\u6709\u4e00\u4e2a\u6807\u51c6\u5b9e\u73b0\u7248\u672c\uff0c\u5373\u4e3aBerkeley SoftFloat\uff0c \u8fd9\u662f\u7b26\u5408IEEE\u6807\u51c6\u7684\u4e00\u4e2asoftfloat\u5e93\uff0cEigen\u5e93\u4e2d\u5305\u542b\u4e86\u67d0\u4e00\u7248\u672c\u7684softfloat. \u8fd9\u4e2a\u5e93\u672c\u8eab\u7528C\u8bed\u8a00\u5b9e\u73b0\uff0c\u7b26\u5408ISO/ANSI C\u6807\u51c6 \u5b98\u65b9\u7f51\u7ad9 http://www.jhauser.us/arithmetic/SoftFloat.html github\u4ed3\u5e93 https://github.com/ucb-bar/berkeley-softfloat-3","title":"softfloat"},{"location":"python/numpy_softfloat.html#pythonsoftfloat","text":"\u76ee\u524d\u6709\u4e24\u4e2a\u6bd4\u8f83\u5bb9\u6613\u641c\u7d22\u5230\u7684python\u63a5\u53e3\u7684softfloat\u5e93 sfpy softfloat \u8fd9\u4e24\u4e2a\u597d\u574f\u4e0d\u8bba\uff08\u5176\u5b9e\u662f\u6ca1\u53bb\u7ec6\u770b\uff09, \u90fd\u53ef\u4ee5\u4f7f\u7528\uff0c\u6211\u5b89\u88c5\u7684\u662fsfpy\uff0c\u53ea\u662f\u56e0\u4e3a\u5b83\u7684\u7248\u672c\u53f7\u770b\u8d77\u6765\u6bd4softfloat\u5927\u4e00\u4e9b","title":"python\u63a5\u53e3\u7684softfloat"},{"location":"python/numpy_softfloat.html#_2","text":"\u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u5982\u4f55\u7ed3\u5408numpy\u5b8c\u6210softfloat16\u7684\u77e9\u9635\u70b9\u4e58\u8fd0\u7b97 >>> m1_array = np . arange ( 12 ) >>> m1_array = m1_array / 10 >>> m1_array = [ sfpy . Float16 ( i ) for i in m1_array ] >>> m1_array = np . array ( m1_array ) . reshape ( 3 , 4 ) >>> m1_array array ([[ Float16 ( 0.0 ), Float16 ( 0.0999755859375 ), Float16 ( 0.199951171875 ), Float16 ( 0.300048828125 )], [ Float16 ( 0.39990234375 ), Float16 ( 0.5 ), Float16 ( 0.60009765625 ), Float16 ( 0.7001953125 )], [ Float16 ( 0.7998046875 ), Float16 ( 0.89990234375 ), Float16 ( 1.0 ), Float16 ( 1.099609375 )]], dtype = object ) >>> m2_array = np . arange ( 20 ) >>> m2_array = m2_array / 100 >>> m2_array = [ sfpy . Float16 ( i ) for i in m2_array ] >>> m2_array = np . array ( m2_array ) . reshape ( 4 , 5 ) >>> m2_array array ([[ Float16 ( 0.0 ), Float16 ( 0.01000213623046875 ), Float16 ( 0.0200042724609375 ), Float16 ( 0.029998779296875 ), Float16 ( 0.040008544921875 )], [ Float16 ( 0.04998779296875 ), Float16 ( 0.05999755859375 ), Float16 ( 0.07000732421875 ), Float16 ( 0.08001708984375 ), Float16 ( 0.09002685546875 )], [ Float16 ( 0.0999755859375 ), Float16 ( 0.1099853515625 ), Float16 ( 0.1199951171875 ), Float16 ( 0.1300048828125 ), Float16 ( 0.1400146484375 )], [ Float16 ( 0.1500244140625 ), Float16 ( 0.1600341796875 ), Float16 ( 0.1700439453125 ), Float16 ( 0.1800537109375 ), Float16 ( 0.18994140625 )]], dtype = object ) >>> res = np . dot ( m1_array , m2_array ) array ([[ Float16 ( 0.07000732421875 ), Float16 ( 0.07598876953125 ), Float16 ( 0.08203125 ), Float16 ( 0.0880126953125 ), Float16 ( 0.093994140625 )], [ Float16 ( 0.18994140625 ), Float16 ( 0.2120361328125 ), Float16 ( 0.234130859375 ), Float16 ( 0.256103515625 ), Float16 ( 0.278076171875 )], [ Float16 ( 0.31005859375 ), Float16 ( 0.34814453125 ), Float16 ( 0.385986328125 ), Float16 ( 0.424072265625 ), Float16 ( 0.4619140625 )]], dtype = object ) >>> res_str = [ hex ( i . bits ) for i in res . flatten ()] >>> res_str [ '0x2c7b' , '0x2cdd' , '0x2d40' , '0x2da2' , '0x2e04' , '0x3214' , '0x32c9' , '0x337e' , '0x3419' , '0x3473' , '0x34f6' , '0x3592' , '0x362d' , '0x36c9' , '0x3764' ]","title":"\u4ee3\u7801\u5c55\u793a"},{"location":"python/numpy_softfloat.html#_3","text":"\u6211\u4eec\u77e5\u9053\uff0cnumpy\u672c\u8eab\u63d0\u4f9b\u4e86np.float16\u6570\u636e\u7c7b\u578b\uff0c\u5b83\u5185\u90e8\u7684\u8ba1\u7b97\u5b9e\u9645\u4e0a\u8fd8\u662ffloat32,\u90a3\u4e48\u6211\u4eec\u8fd9\u4e48\u5199\u786e\u5b9a\u662f\u4f7f\u7528softfloat\u5e93\u4e2d\u7684float16\u8fdb\u884c\u8ba1\u7b97\u7684\u5417\uff1f \u4e3a\u4e86\u8bf4\u660e\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u81ea\u5df1\u5199\u4e2a\u5c0f\u7a0b\u5e8f\u6d4b\u8bd5\u4e00\u4e0b \u5199\u4e00\u4e2a\u6211\u4eec\u81ea\u5b9a\u4e49\u7684fp16,\u8fd9\u4e2a\u7c7b\u4f3c\u4e8esfpy\u4e2d\u7684\u5c01\u88c5\u65b9\u5f0f,\u4fdd\u5b58\u6210 myfp.py class MyFp16 (): def __init__ ( self , val ): self . val = val def __mul__ ( self , other ): print ( \"call mul......\" ) return MyFp16 ( self . val * other . val ) def __add__ ( self , other ): print ( \"call add......\" ) return MyFp16 ( self . val + other . val ) \u91c7\u7528\u547d\u4ee4\u884c\u76f4\u63a5\u8fdb\u884c\u6d4b\u8bd5 >>> import myfp as mp >>> import numpy as np >>> a = np . arange ( 5 ) >>> a = a / 10 >>> a = [ mp . MyFp16 ( i ) for i in a ] >>> np . array ( a ) array ([ < myfp . MyFp16 object at 0x7fc4cb756390 > , < myfp . MyFp16 object at 0x7fc4ab195d68 > , < myfp . MyFp16 object at 0x7fc4ab195cf8 > , < myfp . MyFp16 object at 0x7fc4ab195da0 > , < myfp . MyFp16 object at 0x7fc4ab195e80 > ], dtype = object ) >>> a = _ >>> np . sum ( a ) call add ...... call add ...... call add ...... call add ...... < myfp . MyFp16 object at 0x7fc4ab195cc0 > \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5b9e\u9645\u4e0a\u8c03\u7528\u4e86__add__\u65b9\u6cd5\uff0c\u5e76\u4e14\u7ed3\u679c\u4e3amyfp.MyFp16 object \u7c7b\u578b\uff0c \u8fd9\u6837\u5c31\u80fd\u8bf4\u660e\uff0c\u5b9e\u9645\u4e0a\u8ba1\u7b97\u65f6\u662f\u8c03\u7528\u4e86softfloat\u8fdb\u884c\u8ba1\u7b97\u7684","title":"\u5c0f\u5b9e\u9a8c"},{"location":"python/numpy_softfloat.html#_4","text":"\u5728\u5bf9\u6bd4\u8ba1\u7b97\u7ed3\u679c\u65f6\uff0c\u53d1\u73b0numpy\u548csoftfloat\u8ba1\u7b97\u7684\u7ed3\u679c\u5728\u76f4\u63a5\u4f7f\u7528\u4e58\u6cd5\u6216\u8005\u52a0\u6cd5\u7684\u65f6\u5019\u5b8c\u5168\u4e00\u81f4\uff0c\u4f46\u4f7f\u7528np.sum\u6216\u8005np.dot\u65f6\uff0c\u7ed3\u679c\u4e0d\u4e00\u81f4 \u5bf9\u6b64\uff0c\u8fdb\u884c\u4e86\u8fdb\u4e00\u6b65\u7684\u6d4b\u8bd5 \u56fa\u5b9a\u6570\u7ec4\u957f\u5ea6\u4e3a10\uff0c calc0\u91c7\u7528np.sum\u7684\u8ba1\u7b97\u65b9\u5f0f\uff0ccalc1\u91c7\u7528\u76f4\u63a5\u76f8\u52a0\u7684\u8ba1\u7b97\u65b9\u5f0f(\u4e3a\u4e86\u4ee5\u9632\u4e07\u4e00\uff0c\u6211\u4eec\u91c7\u7528\u624b\u52a8\u628a10\u4e2a\u6570\u76f8\u52a0\u7684\u65b9\u5f0f), \u5206\u522b\u6d4b\u8bd5 import sfpy import numpy as np import misc def calc0 ( llist ): l0 = llist [ 0 ] new_list = llist [ 1 :] for n in new_list : #n_sum = n[0] + n[1] + n[2] + n[3] + n[4] + n[5] + n[6] + n[7] + n[8] + n[9] n_sum = np . sum ( n ) l0 = l0 * n + n_sum return l0 def calc1 ( llist ): l0 = llist [ 0 ] new_list = llist [ 1 :] for n in new_list : n_sum = n [ 0 ] + n [ 1 ] + n [ 2 ] + n [ 3 ] + n [ 4 ] + n [ 5 ] + n [ 6 ] + n [ 7 ] + n [ 8 ] + n [ 9 ] #n_sum = np.sum(n) l0 = l0 * n + n_sum return l0 list_src = [] for i in range ( 12 ): list_src . append ( misc . creat_matrix (( 10 ,))) list_np = [] list_sfp = [] for src in list_src : list_np . append ( np . array ( src )) list_sfp . append ( np . array ([ sfpy . float . Float16 ( i ) for i in src ])) np0 = calc0 ( list_np ) sfp0 = calc0 ( list_sfp ) np1 = calc1 ( list_np ) sfp1 = calc1 ( list_sfp ) np_res = [ hex ( misc . half_to_u16 ( i )) for i in np0 ] print ( \"numpy result use np.sum: \" , np_res ) np_res = [ hex ( misc . half_to_u16 ( i )) for i in np1 ] print ( \"numpy result use +: \" , np_res ) sfp_res = [ hex ( i . bits ) for i in sfp0 ] print ( \"softfloat result use np.sum: \" , sfp_res ) sfp_res = [ hex ( i . bits ) for i in sfp1 ] print ( \"softfloat result use +: \" , sfp_res ) \u8ba1\u7b97\u7ed3\u679c\u4e3a numpy result use np.sum: [ '0xbabe' , '0xbba3' , '0xbd50' , '0xbcca' , '0xb8f5' , '0xbc3a' , '0xbbf7' , '0xbc3c' , '0xbc17' , '0xbbc5' ] numpy result use +: [ '0xbabf' , '0xbba4' , '0xbd51' , '0xbccb' , '0xb8f6' , '0xbc3a' , '0xbbf8' , '0xbc3c' , '0xbc18' , '0xbbc6' ] softfloat result use np.sum: [ '0xbabf' , '0xbba4' , '0xbd51' , '0xbccb' , '0xb8f6' , '0xbc3a' , '0xbbf8' , '0xbc3c' , '0xbc18' , '0xbbc6' ] softfloat result use +: [ '0xbabf' , '0xbba4' , '0xbd51' , '0xbccb' , '0xb8f6' , '0xbc3a' , '0xbbf8' , '0xbc3c' , '0xbc18' , '0xbbc6' ] \u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u5bf9\u4e8esoftfloat\u6765\u8bb2\uff0c\u65e0\u8bba\u662f\u4f7f\u7528np.sum\u8fd8\u662f\u91c7\u7528\u76f4\u63a5\u76f8\u52a0\u7684\u65b9\u5f0f\uff0c\u7ed3\u679c\u4e0d\u53d8\uff1b\u4f46\u5bf9\u4e8enumpy\u7684\u5185\u5efa\u6570\u636e\u7c7b\u578bnp.float16\u6765\u8bb2\uff0c\u5728\u4f7f\u7528np.sum\u548c\u76f4\u63a5\u76f8\u52a0\u8fd9\u4e24\u79cd\u65b9\u5f0f\u65f6\uff0c\u8ba1\u7b97\u7ed3\u679c\u4f1a\u6709\u4e0d\u540c\u3002 \u9664\u6b64\u4e4b\u5916\uff0cnp.float16\u76f4\u63a5\u64cd\u4f5c\u7684\u7ed3\u679c\u548csoftfloat\u64cd\u4f5c\u7684\u7ed3\u679c\u662f\u6bd4\u7279\u4e00\u81f4\u7684(\u4e3a\u4ec0\u4e48\u5462\uff1f) \u90a3\u4e48\uff0c\u81f3\u5c11\u6211\u4eec\u80fd\u591f\u786e\u5b9a\uff0c\u95ee\u9898\u51fa\u5728numpy\u5185\u5efa\u6570\u636e\u7c7b\u578b\u7684\u8ba1\u7b97\u4e0a\uff0c\u5e76\u4e0d\u662fsoftfloat\u672c\u8eab\u5b58\u5728\u95ee\u9898\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48numpy\u7684\u5185\u5efa\u6570\u636e\u7c7b\u578b\u4f1a\u5448\u73b0\u51fa\u8fd9\u79cd\u7ed3\u679c\uff0c\u540e\u7eed\u770b\u4e00\u4e9bnumpy\u6e90\u7801\u624d\u80fd\u77e5\u6653","title":"\u8ba1\u7b97\u7ed3\u679c\u5bf9\u6bd4"},{"location":"python/python.html","text":"python \u00b6 python _init_.py ubuntu\u4e0b\u9f20\u6807\u53d8\u6210\u52a0\u53f7\u65e0\u6cd5\u70b9\u51fb python\u8c03\u7528c/c++ getattr python\u4e2d*\u4e0e** _ init_ .py \u00b6 _ init_ .py\u6587\u4ef6\u7684\u4f5c\u7528\u662f\u5c06\u6587\u4ef6\u5939\u53d8\u4e3a\u4e00\u4e2aPython\u6a21\u5757,\u6211\u4eec\u5728\u5bfc\u5165\u4e00\u4e2a\u5305\u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u5bfc\u5165\u4e86\u5b83\u7684_ init_ .py\u6587\u4ef6\u3002\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u5728_ init_ .py\u6587\u4ef6\u4e2d\u6279\u91cf\u5bfc\u5165\u6211\u4eec\u6240\u9700\u8981\u7684\u6a21\u5757\uff0c\u800c\u4e0d\u518d\u9700\u8981\u4e00\u4e2a\u4e00\u4e2a\u7684\u5bfc\u5165\u3002 \u53ef\u4ee5\u53c2\u8003 Python _ init_ .py\u4f5c\u7528\u8be6\u89e3 ubuntu\u4e0b\u9f20\u6807\u53d8\u6210\u52a0\u53f7\u65e0\u6cd5\u70b9\u51fb \u00b6 \u539f\u56e0\u662f\u628ashell\u547d\u4ee4\u884c\u7ec8\u7aef\u5f53\u6210\u4e86python\u73af\u5883\uff0c\u8bef\u8f93\u5165\u4e86import\u6307\u4ee4\uff0c\u76f4\u63a5\u6740\u6b7b\u5305\u542bimport\u7684\u8fdb\u7a0b ps -e | grep \"import\" kill -9 xxx python\u8c03\u7528c/c++ \u00b6 \u53ef\u4ee5\u53c2\u8003 Python\u8c03\u7528C++\u7a0b\u5e8f\u7684\u51e0\u79cd\u65b9\u6cd5 getattr \u00b6 def getattr ( object , name , default ) getattr ( object , name [, default ]) -> value Get a named attribute from an object ; getattr ( x , 'y' ) is equivalent to x . y . When a default argument is given , it is returned when the attribute doesn 't exist; without it, an exception is raised in that case. \u53ef\u4ee5\u4ece\u6a21\u5757\u4e2d\u83b7\u5f97\u7c7b\u7684\u5b9e\u4f8b\uff0c\u4e5f\u53ef\u4ee5\u4ece\u7c7b\u4e2d\u83b7\u5f97\u5c5e\u6027\u503c\uff0c\u603b\u4e4b\uff0cgetattr(x, 'y')\u662f\u4e00\u4e2a\u8fd4\u56dex.y\u7684\u529f\u80fd\uff0c\u56e0\u6b64y\u4e2d\u5982\u679c\u5305\u542b\u5b57\u7b26'.'\u4f1a\u88ab\u89e3\u6790\u6210attribute python\u4e2d*\u4e0e** \u00b6 Python\u4e2d*args \u548c**kwargs\u7684\u7528\u6cd5","title":"python"},{"location":"python/python.html#python","text":"python _init_.py ubuntu\u4e0b\u9f20\u6807\u53d8\u6210\u52a0\u53f7\u65e0\u6cd5\u70b9\u51fb python\u8c03\u7528c/c++ getattr python\u4e2d*\u4e0e**","title":"python"},{"location":"python/python.html#_init_py","text":"_ init_ .py\u6587\u4ef6\u7684\u4f5c\u7528\u662f\u5c06\u6587\u4ef6\u5939\u53d8\u4e3a\u4e00\u4e2aPython\u6a21\u5757,\u6211\u4eec\u5728\u5bfc\u5165\u4e00\u4e2a\u5305\u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u5bfc\u5165\u4e86\u5b83\u7684_ init_ .py\u6587\u4ef6\u3002\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u5728_ init_ .py\u6587\u4ef6\u4e2d\u6279\u91cf\u5bfc\u5165\u6211\u4eec\u6240\u9700\u8981\u7684\u6a21\u5757\uff0c\u800c\u4e0d\u518d\u9700\u8981\u4e00\u4e2a\u4e00\u4e2a\u7684\u5bfc\u5165\u3002 \u53ef\u4ee5\u53c2\u8003 Python _ init_ .py\u4f5c\u7528\u8be6\u89e3","title":"_init_.py"},{"location":"python/python.html#ubuntu","text":"\u539f\u56e0\u662f\u628ashell\u547d\u4ee4\u884c\u7ec8\u7aef\u5f53\u6210\u4e86python\u73af\u5883\uff0c\u8bef\u8f93\u5165\u4e86import\u6307\u4ee4\uff0c\u76f4\u63a5\u6740\u6b7b\u5305\u542bimport\u7684\u8fdb\u7a0b ps -e | grep \"import\" kill -9 xxx","title":"ubuntu\u4e0b\u9f20\u6807\u53d8\u6210\u52a0\u53f7\u65e0\u6cd5\u70b9\u51fb"},{"location":"python/python.html#pythoncc","text":"\u53ef\u4ee5\u53c2\u8003 Python\u8c03\u7528C++\u7a0b\u5e8f\u7684\u51e0\u79cd\u65b9\u6cd5","title":"python\u8c03\u7528c/c++"},{"location":"python/python.html#getattr","text":"def getattr ( object , name , default ) getattr ( object , name [, default ]) -> value Get a named attribute from an object ; getattr ( x , 'y' ) is equivalent to x . y . When a default argument is given , it is returned when the attribute doesn 't exist; without it, an exception is raised in that case. \u53ef\u4ee5\u4ece\u6a21\u5757\u4e2d\u83b7\u5f97\u7c7b\u7684\u5b9e\u4f8b\uff0c\u4e5f\u53ef\u4ee5\u4ece\u7c7b\u4e2d\u83b7\u5f97\u5c5e\u6027\u503c\uff0c\u603b\u4e4b\uff0cgetattr(x, 'y')\u662f\u4e00\u4e2a\u8fd4\u56dex.y\u7684\u529f\u80fd\uff0c\u56e0\u6b64y\u4e2d\u5982\u679c\u5305\u542b\u5b57\u7b26'.'\u4f1a\u88ab\u89e3\u6790\u6210attribute","title":"getattr"},{"location":"python/python.html#python_1","text":"Python\u4e2d*args \u548c**kwargs\u7684\u7528\u6cd5","title":"python\u4e2d*\u4e0e**"},{"location":"riscv/RISC-V.html","text":"RISC-V \u00b6 RISC-V \u57fa\u7840\u77e5\u8bc6\u70b9 \u6307\u4ee4\u96c6 ABI \u6c47\u7f16\u5668(\u4f8b\u5982gnu\u7684gas) \u6c47\u7f16\u4ee3\u7801\u4e3e\u4f8b Intrinsic-Function \u533a\u5206exception,trap,interrupt \u5f00\u6e90cpu \u57fa\u7840\u77e5\u8bc6\u70b9 \u00b6 riscv \u7684\u6838\u5fc3\u662f RV32I\u57fa\u7840ISA, \u662f\u6c38\u4e45\u4e0d\u4f1a\u6539\u53d8\u7684 riscv \u662f\u6a21\u5757\u5316\u7684\uff0c\u5b83\u7684\u6a21\u5757\u5316\u4f53\u73b0\u5728\u53ef\u9009\u7684\u6807\u51c6\u6269\u5c55\uff0criscv\u7f16\u8bd1\u5668\u9700\u8981\u77e5\u9053\u5f53\u524d\u786c\u4ef6\u5305\u542b\u7684\u6269\u5c55\uff0c\u628a\u4ee3\u8868\u6269\u5c55\u7684\u5b57\u6bcd\u52a0\u5230\u6307\u4ee4\u96c6\u540d\u79f0\u4e4b\u540e\u4f5c\u4e3a\u6307\u793a\u4f8b\u5982:RV32IMFD.\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f88\u9ad8\u6548\uff0c\u4e0d\u9700\u8981\u652f\u6301\u6d6e\u70b9\u5c31\u4e0d\u652f\u6301\uff0c\u4e0d\u9700\u8981\u652f\u6301\u5411\u91cf\u5c31\u4e0d\u652f\u6301\uff0c\u8fbe\u5230\u5b9a\u5236\u5316\u7684\u76ee\u7684\uff0c\u4e0d\u4f1a\u50cf\u589e\u91cfISA\u90a3\u6837\u6240\u6709\u7684\u6307\u4ee4\u90fd\u662f\u5fc5\u9009\u7684\uff0c\u4e0d\u8981\u90fd\u4e0d\u884c riscv\u4e0d\u63d0\u4f9b\u7279\u6b8a\u7684\u5806\u6808\u6307\u4ee4\uff0c\u5373\u6ca1\u6709push\u548cpop riscv\u9009\u62e9\u5c0f\u7aef\u5b57\u8282\u5e8f(\u9ad8\u5b57\u8282\u9ad8\u5730\u5740\uff0c\u4f4e\u5b57\u8282\u4f4e\u5730\u5740) \u6307\u4ee4\u96c6 \u00b6 RISCV\u6307\u4ee4\u96c6\u5728\u8bbe\u8ba1\u4e0a\u7684\u8ffd\u6c42 \u6210\u672c\uff1a\u6307\u4ee4\u96c6\u8db3\u591f\u7cbe\u7b80\uff0c\u90a3\u4e48\u82af\u7247\u9762\u79ef\u5c31\u5f88\u53ef\u80fd\u5c0f\uff0c\u6210\u672c\u5c31\u4f1a\u4f4e \u7b80\u6d01\uff1a\u5f00\u53d1\u9a8c\u8bc1\u6210\u672c\u5c31\u4f1a\u964d\u4f4e \u6027\u80fd\uff1a\u671f\u671b\u5229\u7528\u9ad8\u4e3b\u9891\uff0c\u4f4e\u5355\u6307\u4ee4\u5468\u671f\u6765\u5f25\u8865RISC\u6307\u4ee4\u96c6\u7f3a\u9677 \u67b6\u6784\u548c\u5177\u4f53\u5b9e\u73b0\u5206\u79bb\uff1a\u8fd9\u4e2a\u6ca1\u592a\u660e\u767d\uff01 \u63d0\u5347\u7a7a\u95f4\uff1a\u4fdd\u7559\u64cd\u4f5c\u7801\u4ee5\u505a\u6269\u5c55\uff0c\u5728\u4e13\u7528\u9886\u57df\u7528\u5b9a\u5236\u6307\u4ee4\u6765\u89e3\u51b3\u95ee\u9898 \u7a0b\u5e8f\u5927\u5c0f\uff1a\u80af\u5b9a\u4e86\u538b\u7f29\u6307\u4ee4\uff0c\u4f46\u89c9\u5f97\u53d8\u957f\u6307\u4ee4\u6ca1\u6709\u610f\u4e49 \u6613\u4e8e\u7f16\u7a0b/\u7f16\u8bd1/\u94fe\u63a5\uff1a\u63d0\u4f9b32\u4e2a\u5bc4\u5b58\u5668\uff0c\u8fd9\u6837\u7f16\u8bd1\u5668\u53ef\u7528\u7684\u5bc4\u5b58\u5668\u5c31\u591a\u4e86\uff0c\u5e76\u4e14\u6307\u4ee4\u64cd\u4f5c\u6570\u4ec5\u80fd\u5728\u5bc4\u5b58\u5668\u4e2d\uff0c\u76f8\u5bf9\u7b80\u5355 RISCV\u6307\u4ee4\u96c6\u7684\u7279\u70b9 RISCV\u6307\u4ee4\u53ea\u67096\u79cd\u683c\u5f0f\uff0c\u5747\u4e3a32\u4f4d\u6307\u4ee4\uff0c\u7cbe\u7b80\u7684\u6307\u4ee4\u683c\u5f0f\u610f\u5473\u7740\u7cbe\u7b80\u7684\u89e3\u7801\u90e8\u4ef6 \u6307\u4ee4\u63d0\u4f9b\u4e09\u4e2a\u5bc4\u5b58\u5668\u64cd\u4f5c\u6570 \u6240\u6709\u6307\u4ee4\u4e2d\u8981\u8bfb\u5199\u7684\u5bc4\u5b58\u5668\u64cd\u4f5c\u7b26\u90fd\u5728\u540c\u4e00\u4f4d\u7f6e\uff0c\u8fd8\u662f\u89e3\u7801\u65b9\u4fbf \u7b26\u53f7\u4f4d\u603b\u662f\u5728\u6307\u4ee4\u6700\u9ad8\u4f4d\uff0c\u89e3\u7801\u65f6\u5e8f\u5e76\u884c\u5ea6\u9ad8 ABI \u00b6 ABI\u662f\u6307\u5bc4\u5b58\u5668\u7684\u4e8c\u8fdb\u5236\u63a5\u53e3\u540d\u79f0\uff0c\u6bd4\u5982\u8bf4RV32I, \u5bc4\u5b58\u5668X0 ABI\u63a5\u53e3\u540d\u4e3azero, X1\u5bc4\u5b58\u5668ABI\u63a5\u53e3\u540d\u4e3aRA\uff0cABI\u662f\u4eba\u4e3a\u89c4\u5b9a\u4e86\u5bc4\u5b58\u5668\u5e94\u8be5\u5982\u4f55\u4f7f\u7528\uff0c\u7f16\u8bd1\u5668\u548c\u7ebf\u6027\u6c47\u7f16\u90fd\u5e94\u8be5\u9075\u5b88\u7684\u63a5\u53e3\u7ea6\u5b9a \u6c47\u7f16\u5668(\u4f8b\u5982gnu\u7684gas) \u00b6 \u6c47\u7f16\u5668\u7684\u4f5c\u7528\u4e0d\u4ec5\u4ec5\u662f\u4ece\u5904\u7406\u5668\u80fd\u591f\u7406\u89e3\u7684\u6307\u4ee4\u4ea7\u751f\u76ee\u6807\u4ee3\u7801,\u8fd8\u80fd\u7ffb\u8bd1\u4e00\u4e9b\u6269\u5c55\u6307\u4ee4,\u8fd9\u4e9b\u6307\u4ee4\u5bf9\u6c47\u7f16\u7a0b\u5e8f\u5458\u6216\u8005\u7f16\u8bd1\u5668\u7684\u7f16\u5199\u8005\u6765\u8bf4\u901a\u5e38\u5f88\u6709\u7528\u3002\u8fd9\u7c7b\u6307\u4ee4\u5728\u5de7\u5999\u914d\u7f6e\u5e38\u89c4\u6307\u4ee4\u7684\u57fa\u7840\u4e0a\u5b9e\u73b0,\u79f0\u4e3a\u4f2a\u6307\u4ee4Intrinsic Function \u5927\u591a\u6570\u7684 RISC-V \u4f2a\u6307\u4ee4\u4f9d\u8d56\u4e8e x0 \u6c47\u7f16\u6307\u793a\u7b26\uff1a\u662f\u6c47\u7f16\u5668\u7684\u547d\u4ee4,\u5177\u6709\u544a\u8bc9\u6c47\u7f16\u5668\u4ee3\u7801\u548c\u6570\u636e\u7684\u4f4d\u7f6e\u3001\u6307\u5b9a\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7684\u7279\u5b9a\u4ee3\u7801\u548c\u6570\u636e\u5e38\u91cf\u7b49\u4f5c\u7528 .text:\u8fdb\u5165\u4ee3\u7801\u6bb5 .align 2:\u540e\u7eed\u4ee3\u7801\u63094\u5b57\u8282\u5bf9\u9f50 .globl main:\u58f0\u660e\u5168\u5c40\u7b26\u53f7\u201cmain\u201d .section .rodata:\u8fdb\u5165\u53ea\u8bfb\u6570\u636e\u6bb5 .balign 4:\u6570\u636e\u6bb5\u6309 4 \u5b57\u8282\u5bf9\u9f50 .string \u201c\u201d:\u521b\u5efa\u7a7a\u5b57\u7b26\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32 riscv\u6c47\u7f16\u5668\u6307\u4ee4\u53ca\u6c47\u7f16\u624b\u518c\u8bf7\u53c2\u8003 riscv-asm.md \u6c47\u7f16\u4ee3\u7801\u4e3e\u4f8b \u00b6 \u5bf9riscv reader \u4e2d\u7684hello world\u793a\u4f8b\u518d\u505a\u4e00\u6b21\u8865\u5145 c \u4ee3\u7801\u5982\u4e0b #include <stdio.h> int main () { printf ( \"Hello, %s \\n \" , \"world\" ); return 0 ; } \u5bf9\u5e94\u6c47\u7f16\u4ee3\u7801\u5982\u4e0b\uff0c\u8be5\u6c47\u7f16\u548c\u6587\u6863\u4e2d\u7684\u6709\u4e9b\u51fa\u5165\uff0c\u8be5\u6c47\u7f16\u662f\u901a\u8fc7gcc\u7f16\u8bd1\u51fa\u6765\u7684\u6c47\u7f16 .file \"test.c\" .option nopic #nopic\u662f\u4ec0\u4e48\u610f\u601d?\u6682\u65f6\u8fd8\u6ca1\u6709\u67e5\u5230 .text #\u4ee3\u7801\u6bb5\u8d77\u59cb #\u8fdb\u5165\u53ea\u8bfb\u6570\u636e\u6bb5\uff0c\u4e0b\u9762\u5b58\u653e\u4e86\u53ea\u8bfb\u6570\u636e\uff0c\u5982\u679c #\u4e0b\u9762\u6ca1\u6709\u53ea\u8bfb\u6570\u636e\uff0c\u5219\u4ecd\u8ba4\u4e3a\u662f\u4ee3\u7801\u6bb5\uff0c\u8fd9\u662f\u548c\u76f4\u63a5\u4f7f\u7528.rodata\u7684\u533a\u522b .section .rodata .align 2 .LC0: .string \"world\" .align 2 .LC1: .string \"Hello, %s\\n\" .text .align 1 #\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u4f1a\u662f2\u5b57\u8282\u5bf9\u9f50\u800c\u4e0d\u662f4\u5b57\u8282\u5bf9\u9f50\uff1f .globl main .type main, @function main: addi sp,sp,-16 #\u5f00\u8f9f16\u5b57\u8282\u6808\u7a7a\u95f4 sw ra,12(sp) #\u5148\u8fdb\u884c\u4e00\u6b21\u8fd4\u56de\u5730\u5740\u538b\u6808\uff0c\u505a\u4e3a\u6574\u4e2a\u7a0b\u5e8f\u8fd4\u56de\u5730\u5740\u7684\u4fdd\u7559 sw s0,8(sp) #\u4fdd\u5b58\u5bc4\u5b58\u56680\u538b\u6808 addi s0,sp,16 # s0\u4fdd\u5b58\u4e86\u6808\u9876 lui a5,%hi(.LC0) addi a1,a5,%lo(.LC0) lui a5,%hi(.LC1) addi a0,a5,%lo(.LC1) call printf li a5,0 mv a0,a5 lw ra,12(sp) lw s0,8(sp) addi sp,sp,16 jr ra .size main, .-main .ident \"GCC: (GNU) 8.3.0\" Intrinsic-Function \u00b6 \u5927\u591a\u6570\u7684\u51fd\u6570\u662f\u5728\u5e93\u4e2d\uff0cIntrinsic Function\u5374\u5185\u5d4c\u5728\u7f16\u8bd1\u5668\u4e2d\u3002Intrinsic Function\u4f5c\u4e3a\u5185\u8054\u51fd\u6570\uff0c\u76f4\u63a5\u5728\u8c03\u7528\u7684\u5730\u65b9\u63d2\u5165\u4ee3\u7801\uff0c\u5373\u907f\u514d\u4e86\u51fd\u6570\u8c03\u7528\u7684\u989d\u5916\u5f00\u9500\uff0c\u53c8\u80fd\u591f\u4f7f\u7528\u6bd4\u8f83\u9ad8\u6548\u7684\u673a\u5668\u6307\u4ee4\u5bf9\u8be5\u51fd\u6570\u8fdb\u884c\u4f18\u5316\u3002\u4f18\u5316\u5668\uff08Optimizer\uff09\u5185\u7f6e\u7684\u4e00\u4e9bIntrinsic Function\u884c\u4e3a\u4fe1\u606f\uff0c\u53ef\u4ee5\u5bf9Intrinsic\u8fdb\u884c\u4e00\u4e9b\u4e0d\u9002\u7528\u4e8e\u5185\u8054\u6c47\u7f16\u7684\u4f18\u5316\uff0c\u6240\u4ee5\u901a\u5e38\u6765\u8bf4Intrinsic Function\u8981\u6bd4\u7b49\u6548\u7684\u5185\u8054\u6c47\u7f16\uff08inline assembly\uff09\u4ee3\u7801\u5feb\u3002\u4f18\u5316\u5668\u80fd\u591f\u6839\u636e\u4e0d\u540c\u7684\u4e0a\u4e0b\u6587\u73af\u5883\u5bf9Intrinsic Function\u8fdb\u884c\u8c03\u6574\uff0c\u4f8b\u5982\uff1a\u4ee5\u4e0d\u540c\u7684\u6307\u4ee4\u5c55\u5f00Intrinsic Function\uff0c\u5c06buffer\u5b58\u653e\u5728\u5408\u9002\u7684\u5bc4\u5b58\u5668\u7b49 \u8f6c\u8f7d\u81ea SSE\u6307\u4ee4\u96c6\u5b66\u4e60\uff1aCompiler Intrinsic \u533a\u5206exception,trap,interrupt \u00b6 exception, trap, interrupt\u6982\u5ff5\u5bb9\u6613\u6df7\u6dc6\uff0c\u7279\u522b\u662fexception\u548ctrap\u3002\u8fd9\u8fd9\u91cc\u660e\u786e\u7684\u533a\u5206\u4e00\u4e0b We use the term exception to refer to an unusual condition occurring at run time associated with an instruction in the current RISC-V hart. We use the term interrupt to refer to an external asynchronous event that may cause a RISC-V hart to experience an unexpected transfer of control. We use the term trap to refer to the transfer of control to a trap handler caused by either an exception or an interrupt. \u4f46\u770b\u8fd9\u4e2a\u5b98\u65b9\u6587\u6863\u4e2d\u7684\u63cf\u8ff0\uff0c\u8fd8\u662f\u5f88\u96be\u76f4\u89c2\u7684\u533a\u5206exception\u548ctrap\u3002\u4ece\u5b57\u9762\u610f\u601d\u4e0a\u770b\uff0cexception\u66f4\u50cf\u662f\u4e00\u4e2a\u72b6\u6001\uff0ctrap\u66f4\u50cf\u662f\u4e00\u4e2a\u8fc7\u7a0b\uff0c\u800ctrap\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u80fd\u662f\u7531\u4e8eexception\u6216\u8005interrupt\u89e6\u53d1\u3002 trap\u53ef\u4ee5\u5206\u4e3a\u56db\u7c7b Contained Trap \u6bd4\u5982\u8bf4\u5728\u7528\u6237\u6a21\u5f0f\u6216\u8005\u7279\u6743\u6a21\u5f0f\u4e0b\uff0c\u4f7f\u7528ecall\u6307\u4ee4 Requested Trap \u6bd4\u5982system call, \u6b63\u5e38\u7684\u6267\u884c\u6d41\u7a0b\u53ef\u80fd\u4f1a\u56e0\u4e3a\u8fd9\u4e2a\u8c03\u7528\u800c\u9000\u51fa\uff0c\u4e5f\u6709\u53ef\u80fd\u6062\u590d\uff08\u8fd9\u4e2a\u4f8b\u5b50\u4f3c\u4e4e\u8fd8\u662f\u592a\u62bd\u8c61\uff09 Invisible Trap \u6bd4\u5982emulating missing instructions\u6216\u8005handling non-resident page faults\uff08\u8fd9\u79cd\u5e94\u8be5\u662f\u8f6f\u4ef6\u65e0\u611f\u7684\uff01\uff1f\uff09 Fatal Trap failing a virtual-memory page-protection check or allowing a watchdog timer to expire\uff08\u8fd9\u79cd\u7b97\u662f\u81f4\u547d\u7684\u5417\uff1f\uff09 \u5f00\u6e90cpu \u00b6 \u76ee\u524driscv\u6709\u4e0d\u5c11\u7684\u5b8c\u5168\u5f00\u6e90\u7684cpu\u8bbe\u8ba1 SiFive E31, E51, E54 \u7f51\u4e0a\u8d44\u6599\u4e0d\u5c11\uff0c\u5b98\u7f51\u8bbf\u95ee\u901f\u5ea6\u8f83\u6162\uff0c\u4f46\u662f\u6709\u4e0d\u5c11\u8bba\u575b\u4f1a\u6709\u76f8\u5173\u8d44\u6599 ibex, \u597d\u8bc4\u5ea6\u5f88\u9ad8\uff0cgithub\u4e0a\u6709\u4ee3\u7801\u6258\u7ba1\uff0c\u5fae\u67b6\u6784\u4ecb\u7ecd\u5f88\u8be6\u7ec6 SweRV EH1\uff0c \u597d\u8bc4\u5ea6\u5f88\u9ad8\uff0c\u8fd8\u6ca1\u5177\u4f53\u770b\uff0c\u770b\u7b80\u4ecb\u6027\u80fd\u5e94\u8be5\u4e0d\u9519\u3002 BOOM\uff0c \u7eaf\u6b63Berkeley\u8840\u7edf\uff0c\u8fd8\u6ca1\u770b","title":"RISC-V"},{"location":"riscv/RISC-V.html#risc-v","text":"RISC-V \u57fa\u7840\u77e5\u8bc6\u70b9 \u6307\u4ee4\u96c6 ABI \u6c47\u7f16\u5668(\u4f8b\u5982gnu\u7684gas) \u6c47\u7f16\u4ee3\u7801\u4e3e\u4f8b Intrinsic-Function \u533a\u5206exception,trap,interrupt \u5f00\u6e90cpu","title":"RISC-V"},{"location":"riscv/RISC-V.html#_1","text":"riscv \u7684\u6838\u5fc3\u662f RV32I\u57fa\u7840ISA, \u662f\u6c38\u4e45\u4e0d\u4f1a\u6539\u53d8\u7684 riscv \u662f\u6a21\u5757\u5316\u7684\uff0c\u5b83\u7684\u6a21\u5757\u5316\u4f53\u73b0\u5728\u53ef\u9009\u7684\u6807\u51c6\u6269\u5c55\uff0criscv\u7f16\u8bd1\u5668\u9700\u8981\u77e5\u9053\u5f53\u524d\u786c\u4ef6\u5305\u542b\u7684\u6269\u5c55\uff0c\u628a\u4ee3\u8868\u6269\u5c55\u7684\u5b57\u6bcd\u52a0\u5230\u6307\u4ee4\u96c6\u540d\u79f0\u4e4b\u540e\u4f5c\u4e3a\u6307\u793a\u4f8b\u5982:RV32IMFD.\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f88\u9ad8\u6548\uff0c\u4e0d\u9700\u8981\u652f\u6301\u6d6e\u70b9\u5c31\u4e0d\u652f\u6301\uff0c\u4e0d\u9700\u8981\u652f\u6301\u5411\u91cf\u5c31\u4e0d\u652f\u6301\uff0c\u8fbe\u5230\u5b9a\u5236\u5316\u7684\u76ee\u7684\uff0c\u4e0d\u4f1a\u50cf\u589e\u91cfISA\u90a3\u6837\u6240\u6709\u7684\u6307\u4ee4\u90fd\u662f\u5fc5\u9009\u7684\uff0c\u4e0d\u8981\u90fd\u4e0d\u884c riscv\u4e0d\u63d0\u4f9b\u7279\u6b8a\u7684\u5806\u6808\u6307\u4ee4\uff0c\u5373\u6ca1\u6709push\u548cpop riscv\u9009\u62e9\u5c0f\u7aef\u5b57\u8282\u5e8f(\u9ad8\u5b57\u8282\u9ad8\u5730\u5740\uff0c\u4f4e\u5b57\u8282\u4f4e\u5730\u5740)","title":"\u57fa\u7840\u77e5\u8bc6\u70b9"},{"location":"riscv/RISC-V.html#_2","text":"RISCV\u6307\u4ee4\u96c6\u5728\u8bbe\u8ba1\u4e0a\u7684\u8ffd\u6c42 \u6210\u672c\uff1a\u6307\u4ee4\u96c6\u8db3\u591f\u7cbe\u7b80\uff0c\u90a3\u4e48\u82af\u7247\u9762\u79ef\u5c31\u5f88\u53ef\u80fd\u5c0f\uff0c\u6210\u672c\u5c31\u4f1a\u4f4e \u7b80\u6d01\uff1a\u5f00\u53d1\u9a8c\u8bc1\u6210\u672c\u5c31\u4f1a\u964d\u4f4e \u6027\u80fd\uff1a\u671f\u671b\u5229\u7528\u9ad8\u4e3b\u9891\uff0c\u4f4e\u5355\u6307\u4ee4\u5468\u671f\u6765\u5f25\u8865RISC\u6307\u4ee4\u96c6\u7f3a\u9677 \u67b6\u6784\u548c\u5177\u4f53\u5b9e\u73b0\u5206\u79bb\uff1a\u8fd9\u4e2a\u6ca1\u592a\u660e\u767d\uff01 \u63d0\u5347\u7a7a\u95f4\uff1a\u4fdd\u7559\u64cd\u4f5c\u7801\u4ee5\u505a\u6269\u5c55\uff0c\u5728\u4e13\u7528\u9886\u57df\u7528\u5b9a\u5236\u6307\u4ee4\u6765\u89e3\u51b3\u95ee\u9898 \u7a0b\u5e8f\u5927\u5c0f\uff1a\u80af\u5b9a\u4e86\u538b\u7f29\u6307\u4ee4\uff0c\u4f46\u89c9\u5f97\u53d8\u957f\u6307\u4ee4\u6ca1\u6709\u610f\u4e49 \u6613\u4e8e\u7f16\u7a0b/\u7f16\u8bd1/\u94fe\u63a5\uff1a\u63d0\u4f9b32\u4e2a\u5bc4\u5b58\u5668\uff0c\u8fd9\u6837\u7f16\u8bd1\u5668\u53ef\u7528\u7684\u5bc4\u5b58\u5668\u5c31\u591a\u4e86\uff0c\u5e76\u4e14\u6307\u4ee4\u64cd\u4f5c\u6570\u4ec5\u80fd\u5728\u5bc4\u5b58\u5668\u4e2d\uff0c\u76f8\u5bf9\u7b80\u5355 RISCV\u6307\u4ee4\u96c6\u7684\u7279\u70b9 RISCV\u6307\u4ee4\u53ea\u67096\u79cd\u683c\u5f0f\uff0c\u5747\u4e3a32\u4f4d\u6307\u4ee4\uff0c\u7cbe\u7b80\u7684\u6307\u4ee4\u683c\u5f0f\u610f\u5473\u7740\u7cbe\u7b80\u7684\u89e3\u7801\u90e8\u4ef6 \u6307\u4ee4\u63d0\u4f9b\u4e09\u4e2a\u5bc4\u5b58\u5668\u64cd\u4f5c\u6570 \u6240\u6709\u6307\u4ee4\u4e2d\u8981\u8bfb\u5199\u7684\u5bc4\u5b58\u5668\u64cd\u4f5c\u7b26\u90fd\u5728\u540c\u4e00\u4f4d\u7f6e\uff0c\u8fd8\u662f\u89e3\u7801\u65b9\u4fbf \u7b26\u53f7\u4f4d\u603b\u662f\u5728\u6307\u4ee4\u6700\u9ad8\u4f4d\uff0c\u89e3\u7801\u65f6\u5e8f\u5e76\u884c\u5ea6\u9ad8","title":"\u6307\u4ee4\u96c6"},{"location":"riscv/RISC-V.html#abi","text":"ABI\u662f\u6307\u5bc4\u5b58\u5668\u7684\u4e8c\u8fdb\u5236\u63a5\u53e3\u540d\u79f0\uff0c\u6bd4\u5982\u8bf4RV32I, \u5bc4\u5b58\u5668X0 ABI\u63a5\u53e3\u540d\u4e3azero, X1\u5bc4\u5b58\u5668ABI\u63a5\u53e3\u540d\u4e3aRA\uff0cABI\u662f\u4eba\u4e3a\u89c4\u5b9a\u4e86\u5bc4\u5b58\u5668\u5e94\u8be5\u5982\u4f55\u4f7f\u7528\uff0c\u7f16\u8bd1\u5668\u548c\u7ebf\u6027\u6c47\u7f16\u90fd\u5e94\u8be5\u9075\u5b88\u7684\u63a5\u53e3\u7ea6\u5b9a","title":"ABI"},{"location":"riscv/RISC-V.html#gnugas","text":"\u6c47\u7f16\u5668\u7684\u4f5c\u7528\u4e0d\u4ec5\u4ec5\u662f\u4ece\u5904\u7406\u5668\u80fd\u591f\u7406\u89e3\u7684\u6307\u4ee4\u4ea7\u751f\u76ee\u6807\u4ee3\u7801,\u8fd8\u80fd\u7ffb\u8bd1\u4e00\u4e9b\u6269\u5c55\u6307\u4ee4,\u8fd9\u4e9b\u6307\u4ee4\u5bf9\u6c47\u7f16\u7a0b\u5e8f\u5458\u6216\u8005\u7f16\u8bd1\u5668\u7684\u7f16\u5199\u8005\u6765\u8bf4\u901a\u5e38\u5f88\u6709\u7528\u3002\u8fd9\u7c7b\u6307\u4ee4\u5728\u5de7\u5999\u914d\u7f6e\u5e38\u89c4\u6307\u4ee4\u7684\u57fa\u7840\u4e0a\u5b9e\u73b0,\u79f0\u4e3a\u4f2a\u6307\u4ee4Intrinsic Function \u5927\u591a\u6570\u7684 RISC-V \u4f2a\u6307\u4ee4\u4f9d\u8d56\u4e8e x0 \u6c47\u7f16\u6307\u793a\u7b26\uff1a\u662f\u6c47\u7f16\u5668\u7684\u547d\u4ee4,\u5177\u6709\u544a\u8bc9\u6c47\u7f16\u5668\u4ee3\u7801\u548c\u6570\u636e\u7684\u4f4d\u7f6e\u3001\u6307\u5b9a\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7684\u7279\u5b9a\u4ee3\u7801\u548c\u6570\u636e\u5e38\u91cf\u7b49\u4f5c\u7528 .text:\u8fdb\u5165\u4ee3\u7801\u6bb5 .align 2:\u540e\u7eed\u4ee3\u7801\u63094\u5b57\u8282\u5bf9\u9f50 .globl main:\u58f0\u660e\u5168\u5c40\u7b26\u53f7\u201cmain\u201d .section .rodata:\u8fdb\u5165\u53ea\u8bfb\u6570\u636e\u6bb5 .balign 4:\u6570\u636e\u6bb5\u6309 4 \u5b57\u8282\u5bf9\u9f50 .string \u201c\u201d:\u521b\u5efa\u7a7a\u5b57\u7b26\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32 riscv\u6c47\u7f16\u5668\u6307\u4ee4\u53ca\u6c47\u7f16\u624b\u518c\u8bf7\u53c2\u8003 riscv-asm.md","title":"\u6c47\u7f16\u5668(\u4f8b\u5982gnu\u7684gas)"},{"location":"riscv/RISC-V.html#_3","text":"\u5bf9riscv reader \u4e2d\u7684hello world\u793a\u4f8b\u518d\u505a\u4e00\u6b21\u8865\u5145 c \u4ee3\u7801\u5982\u4e0b #include <stdio.h> int main () { printf ( \"Hello, %s \\n \" , \"world\" ); return 0 ; } \u5bf9\u5e94\u6c47\u7f16\u4ee3\u7801\u5982\u4e0b\uff0c\u8be5\u6c47\u7f16\u548c\u6587\u6863\u4e2d\u7684\u6709\u4e9b\u51fa\u5165\uff0c\u8be5\u6c47\u7f16\u662f\u901a\u8fc7gcc\u7f16\u8bd1\u51fa\u6765\u7684\u6c47\u7f16 .file \"test.c\" .option nopic #nopic\u662f\u4ec0\u4e48\u610f\u601d?\u6682\u65f6\u8fd8\u6ca1\u6709\u67e5\u5230 .text #\u4ee3\u7801\u6bb5\u8d77\u59cb #\u8fdb\u5165\u53ea\u8bfb\u6570\u636e\u6bb5\uff0c\u4e0b\u9762\u5b58\u653e\u4e86\u53ea\u8bfb\u6570\u636e\uff0c\u5982\u679c #\u4e0b\u9762\u6ca1\u6709\u53ea\u8bfb\u6570\u636e\uff0c\u5219\u4ecd\u8ba4\u4e3a\u662f\u4ee3\u7801\u6bb5\uff0c\u8fd9\u662f\u548c\u76f4\u63a5\u4f7f\u7528.rodata\u7684\u533a\u522b .section .rodata .align 2 .LC0: .string \"world\" .align 2 .LC1: .string \"Hello, %s\\n\" .text .align 1 #\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u4f1a\u662f2\u5b57\u8282\u5bf9\u9f50\u800c\u4e0d\u662f4\u5b57\u8282\u5bf9\u9f50\uff1f .globl main .type main, @function main: addi sp,sp,-16 #\u5f00\u8f9f16\u5b57\u8282\u6808\u7a7a\u95f4 sw ra,12(sp) #\u5148\u8fdb\u884c\u4e00\u6b21\u8fd4\u56de\u5730\u5740\u538b\u6808\uff0c\u505a\u4e3a\u6574\u4e2a\u7a0b\u5e8f\u8fd4\u56de\u5730\u5740\u7684\u4fdd\u7559 sw s0,8(sp) #\u4fdd\u5b58\u5bc4\u5b58\u56680\u538b\u6808 addi s0,sp,16 # s0\u4fdd\u5b58\u4e86\u6808\u9876 lui a5,%hi(.LC0) addi a1,a5,%lo(.LC0) lui a5,%hi(.LC1) addi a0,a5,%lo(.LC1) call printf li a5,0 mv a0,a5 lw ra,12(sp) lw s0,8(sp) addi sp,sp,16 jr ra .size main, .-main .ident \"GCC: (GNU) 8.3.0\"","title":"\u6c47\u7f16\u4ee3\u7801\u4e3e\u4f8b"},{"location":"riscv/RISC-V.html#intrinsic-function","text":"\u5927\u591a\u6570\u7684\u51fd\u6570\u662f\u5728\u5e93\u4e2d\uff0cIntrinsic Function\u5374\u5185\u5d4c\u5728\u7f16\u8bd1\u5668\u4e2d\u3002Intrinsic Function\u4f5c\u4e3a\u5185\u8054\u51fd\u6570\uff0c\u76f4\u63a5\u5728\u8c03\u7528\u7684\u5730\u65b9\u63d2\u5165\u4ee3\u7801\uff0c\u5373\u907f\u514d\u4e86\u51fd\u6570\u8c03\u7528\u7684\u989d\u5916\u5f00\u9500\uff0c\u53c8\u80fd\u591f\u4f7f\u7528\u6bd4\u8f83\u9ad8\u6548\u7684\u673a\u5668\u6307\u4ee4\u5bf9\u8be5\u51fd\u6570\u8fdb\u884c\u4f18\u5316\u3002\u4f18\u5316\u5668\uff08Optimizer\uff09\u5185\u7f6e\u7684\u4e00\u4e9bIntrinsic Function\u884c\u4e3a\u4fe1\u606f\uff0c\u53ef\u4ee5\u5bf9Intrinsic\u8fdb\u884c\u4e00\u4e9b\u4e0d\u9002\u7528\u4e8e\u5185\u8054\u6c47\u7f16\u7684\u4f18\u5316\uff0c\u6240\u4ee5\u901a\u5e38\u6765\u8bf4Intrinsic Function\u8981\u6bd4\u7b49\u6548\u7684\u5185\u8054\u6c47\u7f16\uff08inline assembly\uff09\u4ee3\u7801\u5feb\u3002\u4f18\u5316\u5668\u80fd\u591f\u6839\u636e\u4e0d\u540c\u7684\u4e0a\u4e0b\u6587\u73af\u5883\u5bf9Intrinsic Function\u8fdb\u884c\u8c03\u6574\uff0c\u4f8b\u5982\uff1a\u4ee5\u4e0d\u540c\u7684\u6307\u4ee4\u5c55\u5f00Intrinsic Function\uff0c\u5c06buffer\u5b58\u653e\u5728\u5408\u9002\u7684\u5bc4\u5b58\u5668\u7b49 \u8f6c\u8f7d\u81ea SSE\u6307\u4ee4\u96c6\u5b66\u4e60\uff1aCompiler Intrinsic","title":"Intrinsic-Function"},{"location":"riscv/RISC-V.html#exceptiontrapinterrupt","text":"exception, trap, interrupt\u6982\u5ff5\u5bb9\u6613\u6df7\u6dc6\uff0c\u7279\u522b\u662fexception\u548ctrap\u3002\u8fd9\u8fd9\u91cc\u660e\u786e\u7684\u533a\u5206\u4e00\u4e0b We use the term exception to refer to an unusual condition occurring at run time associated with an instruction in the current RISC-V hart. We use the term interrupt to refer to an external asynchronous event that may cause a RISC-V hart to experience an unexpected transfer of control. We use the term trap to refer to the transfer of control to a trap handler caused by either an exception or an interrupt. \u4f46\u770b\u8fd9\u4e2a\u5b98\u65b9\u6587\u6863\u4e2d\u7684\u63cf\u8ff0\uff0c\u8fd8\u662f\u5f88\u96be\u76f4\u89c2\u7684\u533a\u5206exception\u548ctrap\u3002\u4ece\u5b57\u9762\u610f\u601d\u4e0a\u770b\uff0cexception\u66f4\u50cf\u662f\u4e00\u4e2a\u72b6\u6001\uff0ctrap\u66f4\u50cf\u662f\u4e00\u4e2a\u8fc7\u7a0b\uff0c\u800ctrap\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u80fd\u662f\u7531\u4e8eexception\u6216\u8005interrupt\u89e6\u53d1\u3002 trap\u53ef\u4ee5\u5206\u4e3a\u56db\u7c7b Contained Trap \u6bd4\u5982\u8bf4\u5728\u7528\u6237\u6a21\u5f0f\u6216\u8005\u7279\u6743\u6a21\u5f0f\u4e0b\uff0c\u4f7f\u7528ecall\u6307\u4ee4 Requested Trap \u6bd4\u5982system call, \u6b63\u5e38\u7684\u6267\u884c\u6d41\u7a0b\u53ef\u80fd\u4f1a\u56e0\u4e3a\u8fd9\u4e2a\u8c03\u7528\u800c\u9000\u51fa\uff0c\u4e5f\u6709\u53ef\u80fd\u6062\u590d\uff08\u8fd9\u4e2a\u4f8b\u5b50\u4f3c\u4e4e\u8fd8\u662f\u592a\u62bd\u8c61\uff09 Invisible Trap \u6bd4\u5982emulating missing instructions\u6216\u8005handling non-resident page faults\uff08\u8fd9\u79cd\u5e94\u8be5\u662f\u8f6f\u4ef6\u65e0\u611f\u7684\uff01\uff1f\uff09 Fatal Trap failing a virtual-memory page-protection check or allowing a watchdog timer to expire\uff08\u8fd9\u79cd\u7b97\u662f\u81f4\u547d\u7684\u5417\uff1f\uff09","title":"\u533a\u5206exception,trap,interrupt"},{"location":"riscv/RISC-V.html#cpu","text":"\u76ee\u524driscv\u6709\u4e0d\u5c11\u7684\u5b8c\u5168\u5f00\u6e90\u7684cpu\u8bbe\u8ba1 SiFive E31, E51, E54 \u7f51\u4e0a\u8d44\u6599\u4e0d\u5c11\uff0c\u5b98\u7f51\u8bbf\u95ee\u901f\u5ea6\u8f83\u6162\uff0c\u4f46\u662f\u6709\u4e0d\u5c11\u8bba\u575b\u4f1a\u6709\u76f8\u5173\u8d44\u6599 ibex, \u597d\u8bc4\u5ea6\u5f88\u9ad8\uff0cgithub\u4e0a\u6709\u4ee3\u7801\u6258\u7ba1\uff0c\u5fae\u67b6\u6784\u4ecb\u7ecd\u5f88\u8be6\u7ec6 SweRV EH1\uff0c \u597d\u8bc4\u5ea6\u5f88\u9ad8\uff0c\u8fd8\u6ca1\u5177\u4f53\u770b\uff0c\u770b\u7b80\u4ecb\u6027\u80fd\u5e94\u8be5\u4e0d\u9519\u3002 BOOM\uff0c \u7eaf\u6b63Berkeley\u8840\u7edf\uff0c\u8fd8\u6ca1\u770b","title":"\u5f00\u6e90cpu"},{"location":"riscv/la.html","text":"LA\u6307\u4ee4\u7684\u7406\u89e3 \u00b6 LA\u6307\u4ee4\u7684\u7406\u89e3 \u8d77\u56e0 \u7ecf\u8fc7 \u9ad8\u6f6e \u5c3e\u58f0 \u4ee5\u524d\u4e5f\u5199\u8fc7\u4e0d\u5c11la\u6307\u4ee4\u7684\u4ee3\u7801\uff0c\u4f46\u662f\u90fd\u662f\u4f3c\u61c2\u975e\u61c2\uff0c\u7cca\u91cc\u7cca\u6d82\u7684\u6210\u529f\u4e86\uff0c\u4eca\u5929\u5076\u7136\u7684\u673a\u4f1a\u5173\u6ce8\u4e86\u4e00\u4e0bla\u6307\u4ee4 \u8d77\u56e0 \u00b6 \u8d77\u56e0\u662f\u6211\u9700\u8981\u5199\u4e00\u4e2a\u6d4b\u8bd5case,\u6d4b\u8bd5\u4e00\u4e2a\u81ea\u5b9a\u4e49\u77e9\u9635\u8fd0\u7b97\u6307\u4ee4\uff0c\u9700\u8981\u63d0\u4f9b\u4e09\u4e2a\u77e9\u9635\u57fa\u5730\u5740\u4f5c\u4e3a\u6307\u4ee4\u53c2\u6570\uff0c\u5373\u7c7b\u4f3cmm_add rd, r1, r2 \u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u5c06r1\u548cr2\u6307\u5411\u7684\u77e9\u9635\u6c42\u548c\u5199\u5165rd\u6307\u5411\u7684\u5730\u5740 \u4e8e\u662f\u6211\u662f\u8fd9\u6837\u5b9e\u73b0\u7684 la x23 , l1start +3576 la x4 , l1start +2580 la x19 , l1start +336 add.mm ( x23 ), ( x4 ), ( x19 ) \u5728\u94fe\u63a5\u811a\u672c\u4e2d\u5b9a\u4e49\u4e86\u7b26\u53f7l1start .data : { *(.data) } l1start = 0xC0000000; \u8fd9\u4e2a\u65f6\u5019\u5c31\u5f00\u59cb\u601d\u7ef4\u6df7\u4e71\u4e86\uff0c\u6309\u7167C\u7684\u903b\u8f91\uff0cl1start = 0xC0000000\u5c82\u4e0d\u662f\u8bf4l1start\u503c\u4e3a0xC0000000\uff0c \u90a3l1start\u8fd9\u4e2a\u7b26\u53f7\u7684\u5730\u5740\u662f\uff1f\uff1f\uff1f\u96be\u9053\u6211\u8fd9\u6837\u5199\u4e0d\u5bf9\u5417\uff1f\uff1f\uff1f\uff1f \u7ecf\u8fc7 \u00b6 \u9996\u5148\uff0c\u6839\u636e\u6307\u4ee4\u96c6\u624b\u518c\uff0cla\u662f\u4f2a\u6307\u4ee4 la rd, symbol x[rd] = &symbol \u5730\u5740\u52a0\u8f7d (Load Address). \u4f2a\u6307\u4ee4(Pseudoinstruction), RV32I and RV64I. \u5c06 symbol \u7684\u5730\u5740\u52a0\u8f7d\u5230 x[rd]\u4e2d\u3002\u5f53\u7f16\u8bd1\u4f4d\u7f6e\u65e0\u5173\u7684\u4ee3\u7801\u65f6,\u5b83\u4f1a\u88ab\u6269\u5c55\u4e3a\u5bf9\u5168\u5c40\u504f\u79fb\u91cf\u8868 (Global Offset Table)\u7684\u52a0\u8f7d\u3002\u5bf9\u4e8e RV32I,\u7b49\u540c\u4e8e\u6267\u884c auipc rd, offsetHi,\u7136\u540e\u662f lw rd, offsetLo(rd);\u5bf9\u4e8e RV64I,\u5219\u7b49\u540c\u4e8e auipc rd, offsetHi \u548c ld rd, offsetLo(rd)\u3002\u5982\u679c offset \u8fc7\u5927, \u5f00\u59cb\u7684\u7b97\u52a0\u8f7d\u5730\u5740\u7684\u6307\u4ee4\u4f1a\u53d8\u6210\u4e24\u6761,\u5148\u662f auipc rd, offsetHi \u7136\u540e\u662f addi rd, rd, offsetLo\u3002 auipc rd, immediate x[rd] = pc + sext(immediate[31:12] << 12) PC \u52a0\u7acb\u5373\u6570 (Add Upper Immediate to PC). U-type, RV32I and RV64I. \u628a\u7b26\u53f7\u4f4d\u6269\u5c55\u7684 20 \u4f4d(\u5de6\u79fb 12 \u4f4d)\u7acb\u5373\u6570\u52a0\u5230 pc \u4e0a,\u7ed3\u679c\u5199\u5165 x[rd]\u3002 \u4f7f\u7528spike\u7684debug\u6a21\u5f0f\u5177\u4f53\u770b\u4e00\u4e0b\u8fd9\u4e2a\u6bb5\u4ee3\u7801\u7684\u6267\u884c(\u8fd9\u91cc\u9762\u4ecd\u6709\u7591\u95ee\uff0c\u6211\u7528\u7684\u662friscv32-unknown-elf-gcc\u7f16\u8bd1\u7684\uff0c\u5e76\u6ca1\u6709\u6309\u7167\u624b\u518c\u4e2d\u63cf\u8ff0\u7684RV32I\u7f16\u8bd1\u6210auipc\u548clw, \u800c\u662f\u7f16\u8bd1\u6210\u4e86RV64I\u7684auipc\u548caddi, gcc\u5148\u4e0d\u770b\u4e86\uff0c\u6709\u65f6\u95f4\u518d\u53bb\u770b\u5427......) core 0: 0x00000000000002c4 (0xc0001b97) auipc s7, 0xc0001 : reg 0 s7 0xffffffffc00012c4 core 0: 0x00000000000002c8 (0xb34b8b93) addi s7, s7, -1228 core 0: 0x00000000000002cc (0xc0000217) auipc tp, 0xc0000 core 0: 0x00000000000002d0 (0x74820213) addi tp, tp, 1864 core 0: 0x00000000000002d4 (0xc0000997) auipc s3, 0xc0000 core 0: 0x00000000000002d8 (0xe7c98993) addi s3, s3, -388 core 0: 0x00000000000002dc (0x23326bfb) add.mm s7, tp, s3 \u4ece\u4e2d\u53ef\u4ee5\u770b\u51fa\u5728\u6267\u884cauipc\u6307\u4ee4\u65f6\uff0c0xc0001 \u5de6\u79fb12\u4f4d\u52a0\u4e0a\u5f53\u524dpc\u503c0x2c4\uff0c \u5f97\u51fa\u67650xc00012c4, \u800c\u6211\u94fe\u63a5\u811a\u672c\u4e2d\u7684l1start = 0xC0000000\u786e\u5b9e\u88ab\u7f16\u8bd1\u6210\u4e86\u5730\u5740\uff0c\u4e5f\u5c31\u662f\u8bf4la x23, l1start \u5b9e\u9645\u4e0a\u5c31\u662f\u628a0xc0000000\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668x23\u4e2d \u53bb\u94fe\u63a5\u811a\u672c\u6587\u6863\u4e2d\u627e\u4e00\u4e0b\u6709\u6ca1\u6709\u76f8\u5173\u63cf\u8ff0\uff0c\u5728gnu\u5b98\u7f51\u7684ld\u90e8\u5206\u4e2d\uff0c\u627e\u5230\u4e86\u4e00\u4e9b\u63cf\u8ff0 3.5 Assigning Values to Symbols You may assign a value to a symbol in a linker script. This will define the symbol and place it into the symbol table with a global scope. You may assign to a symbol using any of the C assignment operators: The first case will define symbol to the value of expression. In the other cases, symbol must already be defined, and the value will be adjusted accordingly. floating_point = 0; SECTIONS { .text : { *(.text) _etext = .; } _bdata = (. + 3) & ~ 3; .data : { *(.data) } } In this example, the symbol \u2018floating_point\u2019 will be defined as zero. The symbol \u2018_etext\u2019 will be defined as the address following the last \u2018.text\u2019 input section. The symbol \u2018_bdata\u2019 will be defined as the address following the \u2018.text\u2019 output section aligned upward to a 4 byte boundary. \u8fd9\u6837\u770b\u6765\uff0c\u5f53\u6211\u4eec\u5199l1start = 0xC0000000;\u7684\u65f6\u5019\uff0c\u5b9e\u9645\u4e0a\u662f\u5b9a\u4e49\u4e86l1start\u8fd9\u4e2a\u7b26\u53f7\u7684\u5730\u5740\u4e3a0xC0000000 \u9ad8\u6f6e \u00b6 \u6b64\u65f6\u5df2\u7ecf\u660e\u767d\u4e86\uff0c\u4f46\u7a81\u7136\u53c8\u60f3\u5230\u4e86\u4e4b\u524d\u5199\u7684\u53e6\u4e00\u6bb5\u4ee3\u7801\u6309\u7167\u73b0\u5728\u7684\u7406\u89e3\u4f3c\u4e4e\u6709\u95ee\u9898\uff0c\u4ee3\u7801\u5982\u4e0b la x1 , 327690 csrw xxxxx , x1 \u90a3327690\u7b97\u4ec0\u4e48\uff0c\u7b97\u7b26\u53f7\u8fd8\u662f\u7b97\u6570\u503c\uff1f\u7ecf\u8fc7la x1, 327690\u4e4b\u540ex1\u4e2d\u662f\u4ec0\u4e48\u503c\uff1f \u518d\u53bbdebug\u4e00\u4e0b : until pc 0 108 : core 0: 0x0000000000000108 (0x00a08093) addi ra, ra, 10 : core 0: 0x000000000000010c (0x40009073) csrw xxxxx, ra : reg 0 ra 0x000000000005000a hex(327690) \u5c31\u662f '0x5000a'\uff0c \u7f16\u8bd1\u5668\u7adf\u7136\u628ala\u6307\u4ee4\u7ffb\u8bd1\u6210\u4e86addi, \u628a\u6211\u7684\u9519\u8bef\u7ea0\u6b63\u4e86...... \u5c3e\u58f0 \u00b6 \u770b\u6765\u5bf9\u4e8e\u4f2a\u6307\u4ee4\uff0c\u8fd8\u662f\u5f97\u770b\u7f16\u8bd1\u5668\u7684\u5b9e\u73b0\u662f\u600e\u6837\u7684\uff0c\u6709\u65f6\u5019\u4e5f\u4e0d\u80fd\u5b8c\u5168\u6309\u7167\u6587\u6863\uff0c\u56e0\u4e3a\u603b\u6709\u4eba\u4e0d\u6309\u6587\u6863\uff0c\u4e5f\u603b\u6709\u4e0d\u5b8c\u5584\u7684\u6587\u6863\u3002","title":"LA\u6307\u4ee4\u7684\u7406\u89e3"},{"location":"riscv/la.html#la","text":"LA\u6307\u4ee4\u7684\u7406\u89e3 \u8d77\u56e0 \u7ecf\u8fc7 \u9ad8\u6f6e \u5c3e\u58f0 \u4ee5\u524d\u4e5f\u5199\u8fc7\u4e0d\u5c11la\u6307\u4ee4\u7684\u4ee3\u7801\uff0c\u4f46\u662f\u90fd\u662f\u4f3c\u61c2\u975e\u61c2\uff0c\u7cca\u91cc\u7cca\u6d82\u7684\u6210\u529f\u4e86\uff0c\u4eca\u5929\u5076\u7136\u7684\u673a\u4f1a\u5173\u6ce8\u4e86\u4e00\u4e0bla\u6307\u4ee4","title":"LA\u6307\u4ee4\u7684\u7406\u89e3"},{"location":"riscv/la.html#_1","text":"\u8d77\u56e0\u662f\u6211\u9700\u8981\u5199\u4e00\u4e2a\u6d4b\u8bd5case,\u6d4b\u8bd5\u4e00\u4e2a\u81ea\u5b9a\u4e49\u77e9\u9635\u8fd0\u7b97\u6307\u4ee4\uff0c\u9700\u8981\u63d0\u4f9b\u4e09\u4e2a\u77e9\u9635\u57fa\u5730\u5740\u4f5c\u4e3a\u6307\u4ee4\u53c2\u6570\uff0c\u5373\u7c7b\u4f3cmm_add rd, r1, r2 \u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u5c06r1\u548cr2\u6307\u5411\u7684\u77e9\u9635\u6c42\u548c\u5199\u5165rd\u6307\u5411\u7684\u5730\u5740 \u4e8e\u662f\u6211\u662f\u8fd9\u6837\u5b9e\u73b0\u7684 la x23 , l1start +3576 la x4 , l1start +2580 la x19 , l1start +336 add.mm ( x23 ), ( x4 ), ( x19 ) \u5728\u94fe\u63a5\u811a\u672c\u4e2d\u5b9a\u4e49\u4e86\u7b26\u53f7l1start .data : { *(.data) } l1start = 0xC0000000; \u8fd9\u4e2a\u65f6\u5019\u5c31\u5f00\u59cb\u601d\u7ef4\u6df7\u4e71\u4e86\uff0c\u6309\u7167C\u7684\u903b\u8f91\uff0cl1start = 0xC0000000\u5c82\u4e0d\u662f\u8bf4l1start\u503c\u4e3a0xC0000000\uff0c \u90a3l1start\u8fd9\u4e2a\u7b26\u53f7\u7684\u5730\u5740\u662f\uff1f\uff1f\uff1f\u96be\u9053\u6211\u8fd9\u6837\u5199\u4e0d\u5bf9\u5417\uff1f\uff1f\uff1f\uff1f","title":"\u8d77\u56e0"},{"location":"riscv/la.html#_2","text":"\u9996\u5148\uff0c\u6839\u636e\u6307\u4ee4\u96c6\u624b\u518c\uff0cla\u662f\u4f2a\u6307\u4ee4 la rd, symbol x[rd] = &symbol \u5730\u5740\u52a0\u8f7d (Load Address). \u4f2a\u6307\u4ee4(Pseudoinstruction), RV32I and RV64I. \u5c06 symbol \u7684\u5730\u5740\u52a0\u8f7d\u5230 x[rd]\u4e2d\u3002\u5f53\u7f16\u8bd1\u4f4d\u7f6e\u65e0\u5173\u7684\u4ee3\u7801\u65f6,\u5b83\u4f1a\u88ab\u6269\u5c55\u4e3a\u5bf9\u5168\u5c40\u504f\u79fb\u91cf\u8868 (Global Offset Table)\u7684\u52a0\u8f7d\u3002\u5bf9\u4e8e RV32I,\u7b49\u540c\u4e8e\u6267\u884c auipc rd, offsetHi,\u7136\u540e\u662f lw rd, offsetLo(rd);\u5bf9\u4e8e RV64I,\u5219\u7b49\u540c\u4e8e auipc rd, offsetHi \u548c ld rd, offsetLo(rd)\u3002\u5982\u679c offset \u8fc7\u5927, \u5f00\u59cb\u7684\u7b97\u52a0\u8f7d\u5730\u5740\u7684\u6307\u4ee4\u4f1a\u53d8\u6210\u4e24\u6761,\u5148\u662f auipc rd, offsetHi \u7136\u540e\u662f addi rd, rd, offsetLo\u3002 auipc rd, immediate x[rd] = pc + sext(immediate[31:12] << 12) PC \u52a0\u7acb\u5373\u6570 (Add Upper Immediate to PC). U-type, RV32I and RV64I. \u628a\u7b26\u53f7\u4f4d\u6269\u5c55\u7684 20 \u4f4d(\u5de6\u79fb 12 \u4f4d)\u7acb\u5373\u6570\u52a0\u5230 pc \u4e0a,\u7ed3\u679c\u5199\u5165 x[rd]\u3002 \u4f7f\u7528spike\u7684debug\u6a21\u5f0f\u5177\u4f53\u770b\u4e00\u4e0b\u8fd9\u4e2a\u6bb5\u4ee3\u7801\u7684\u6267\u884c(\u8fd9\u91cc\u9762\u4ecd\u6709\u7591\u95ee\uff0c\u6211\u7528\u7684\u662friscv32-unknown-elf-gcc\u7f16\u8bd1\u7684\uff0c\u5e76\u6ca1\u6709\u6309\u7167\u624b\u518c\u4e2d\u63cf\u8ff0\u7684RV32I\u7f16\u8bd1\u6210auipc\u548clw, \u800c\u662f\u7f16\u8bd1\u6210\u4e86RV64I\u7684auipc\u548caddi, gcc\u5148\u4e0d\u770b\u4e86\uff0c\u6709\u65f6\u95f4\u518d\u53bb\u770b\u5427......) core 0: 0x00000000000002c4 (0xc0001b97) auipc s7, 0xc0001 : reg 0 s7 0xffffffffc00012c4 core 0: 0x00000000000002c8 (0xb34b8b93) addi s7, s7, -1228 core 0: 0x00000000000002cc (0xc0000217) auipc tp, 0xc0000 core 0: 0x00000000000002d0 (0x74820213) addi tp, tp, 1864 core 0: 0x00000000000002d4 (0xc0000997) auipc s3, 0xc0000 core 0: 0x00000000000002d8 (0xe7c98993) addi s3, s3, -388 core 0: 0x00000000000002dc (0x23326bfb) add.mm s7, tp, s3 \u4ece\u4e2d\u53ef\u4ee5\u770b\u51fa\u5728\u6267\u884cauipc\u6307\u4ee4\u65f6\uff0c0xc0001 \u5de6\u79fb12\u4f4d\u52a0\u4e0a\u5f53\u524dpc\u503c0x2c4\uff0c \u5f97\u51fa\u67650xc00012c4, \u800c\u6211\u94fe\u63a5\u811a\u672c\u4e2d\u7684l1start = 0xC0000000\u786e\u5b9e\u88ab\u7f16\u8bd1\u6210\u4e86\u5730\u5740\uff0c\u4e5f\u5c31\u662f\u8bf4la x23, l1start \u5b9e\u9645\u4e0a\u5c31\u662f\u628a0xc0000000\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668x23\u4e2d \u53bb\u94fe\u63a5\u811a\u672c\u6587\u6863\u4e2d\u627e\u4e00\u4e0b\u6709\u6ca1\u6709\u76f8\u5173\u63cf\u8ff0\uff0c\u5728gnu\u5b98\u7f51\u7684ld\u90e8\u5206\u4e2d\uff0c\u627e\u5230\u4e86\u4e00\u4e9b\u63cf\u8ff0 3.5 Assigning Values to Symbols You may assign a value to a symbol in a linker script. This will define the symbol and place it into the symbol table with a global scope. You may assign to a symbol using any of the C assignment operators: The first case will define symbol to the value of expression. In the other cases, symbol must already be defined, and the value will be adjusted accordingly. floating_point = 0; SECTIONS { .text : { *(.text) _etext = .; } _bdata = (. + 3) & ~ 3; .data : { *(.data) } } In this example, the symbol \u2018floating_point\u2019 will be defined as zero. The symbol \u2018_etext\u2019 will be defined as the address following the last \u2018.text\u2019 input section. The symbol \u2018_bdata\u2019 will be defined as the address following the \u2018.text\u2019 output section aligned upward to a 4 byte boundary. \u8fd9\u6837\u770b\u6765\uff0c\u5f53\u6211\u4eec\u5199l1start = 0xC0000000;\u7684\u65f6\u5019\uff0c\u5b9e\u9645\u4e0a\u662f\u5b9a\u4e49\u4e86l1start\u8fd9\u4e2a\u7b26\u53f7\u7684\u5730\u5740\u4e3a0xC0000000","title":"\u7ecf\u8fc7"},{"location":"riscv/la.html#_3","text":"\u6b64\u65f6\u5df2\u7ecf\u660e\u767d\u4e86\uff0c\u4f46\u7a81\u7136\u53c8\u60f3\u5230\u4e86\u4e4b\u524d\u5199\u7684\u53e6\u4e00\u6bb5\u4ee3\u7801\u6309\u7167\u73b0\u5728\u7684\u7406\u89e3\u4f3c\u4e4e\u6709\u95ee\u9898\uff0c\u4ee3\u7801\u5982\u4e0b la x1 , 327690 csrw xxxxx , x1 \u90a3327690\u7b97\u4ec0\u4e48\uff0c\u7b97\u7b26\u53f7\u8fd8\u662f\u7b97\u6570\u503c\uff1f\u7ecf\u8fc7la x1, 327690\u4e4b\u540ex1\u4e2d\u662f\u4ec0\u4e48\u503c\uff1f \u518d\u53bbdebug\u4e00\u4e0b : until pc 0 108 : core 0: 0x0000000000000108 (0x00a08093) addi ra, ra, 10 : core 0: 0x000000000000010c (0x40009073) csrw xxxxx, ra : reg 0 ra 0x000000000005000a hex(327690) \u5c31\u662f '0x5000a'\uff0c \u7f16\u8bd1\u5668\u7adf\u7136\u628ala\u6307\u4ee4\u7ffb\u8bd1\u6210\u4e86addi, \u628a\u6211\u7684\u9519\u8bef\u7ea0\u6b63\u4e86......","title":"\u9ad8\u6f6e"},{"location":"riscv/la.html#_4","text":"\u770b\u6765\u5bf9\u4e8e\u4f2a\u6307\u4ee4\uff0c\u8fd8\u662f\u5f97\u770b\u7f16\u8bd1\u5668\u7684\u5b9e\u73b0\u662f\u600e\u6837\u7684\uff0c\u6709\u65f6\u5019\u4e5f\u4e0d\u80fd\u5b8c\u5168\u6309\u7167\u6587\u6863\uff0c\u56e0\u4e3a\u603b\u6709\u4eba\u4e0d\u6309\u6587\u6863\uff0c\u4e5f\u603b\u6709\u4e0d\u5b8c\u5584\u7684\u6587\u6863\u3002","title":"\u5c3e\u58f0"},{"location":"riscv/opensbi.html","text":"OpenSBI \u00b6 OpenSBI what is OpenSBI SBI \u5de5\u4f5c\u673a\u5236 why it's needed OpenSBI\u7684\u5b9e\u73b0 \u5047\u5982\u6211\u4eec\u8bbe\u8ba1OpenSBI \u5b9e\u73b0 \u53c2\u8003\u8d44\u6599 \u672c\u6587\u5148\u4ecb\u7ecd\u4ec0\u4e48\u662fOpenSBI, \u518d\u8be6\u89e3SBI\u7684\u5de5\u4f5c\u673a\u5236\uff0c\u6700\u540e\u5bf9OpenSBI\u7684\u4ee3\u7801\u6846\u67b6\u8fdb\u884c\u5206\u6790\u3002 what is OpenSBI \u00b6 OpenSBI\u662f\u5f00\u6e90\u7684RISC-V Supervisor Binary Interface \u8f6f\u4ef6\u53c2\u8003\u5b9e\u73b0\u3002\u5b83\u662f\u4e00\u4e2a\u8fd0\u884c\u5728\u66f4\u9ad8\u7279\u6743\u7b49\u7ea7\uff0c\u7528\u6765\u521d\u59cb\u5316\u786c\u4ef6\uff0c\u5e76\u4e14\u5141\u8bb8\u64cd\u4f5c\u7cfb\u7edf\u7b49\u4f4e\u7279\u6743\u7b49\u7ea7\u8f6f\u4ef6\u8c03\u7528\u5b83\u6765\u5b9e\u73b0\u8bbe\u5907\u91cd\u542f\u6216CPU\u6838\u7ba1\u7406\u7b49\u64cd\u4f5c\u7684\u56fa\u4ef6\u3002 \u4e0b\u56fe\u5c55\u793a\u4e86\u4e00\u822c\u7684\u591a\u7ea7\u542f\u52a8\u6a21\u578b\u3002CPU\u4e0a\u7535\u6267\u884cROM\u4e2d\u7684\u4ee3\u7801\uff0cROM\u52a0\u8f7dSPL\u5230\u5185\u90e8SRAM\uff0cSPL\u52a0\u8f7dRUNTIME\uff0cRUNTIME\u518d\u52a0\u8f7dBOOTLOADER\uff0c\u6700\u540e\u7531BOOTLOADER\u52a0\u8f7dOS \u4e0b\u56fe\u5c55\u793a\u4e86RISCV\u7684\u591a\u7ea7\u542f\u52a8\u6a21\u578b\u3002\u53ea\u662f\u4e2d\u95f4\u7684RUNTIME\u53d8\u6210\u4e86OpenSBI\u3002 \u603b\u7ed3\u6765\u770b\uff0c\u5b83\u6709\u70b9\u513f\u50cfARM\u4f53\u7cfb\u4e2d\u7684ATF(Arm Trusted Firmware),\u751a\u81f3\u50cfpc\u9886\u57df\u7684BIOS/UEFI\u3002 SBI \u00b6 The SBI allows supervisor-mode (S-mode or VS-mode) software to be portable across all RISC-V implementations by defining an abstraction for platform (or hypervisor) specific functionality. SBI\u80fd\u591f\u63d0\u9ad8S-mode\u8f6f\u4ef6\u7684\u53ef\u79fb\u690d\u6027\u3002 \u5de5\u4f5c\u673a\u5236 \u00b6 \u5bf9\u4e8e\u975e\u865a\u62df\u5316\u7684\u7cfb\u7edf\uff0c\u7528\u6237\u7a7a\u95f4\u4ee3\u7801\u8fd0\u884c\u5728U-Mode\uff0c\u5185\u6838\u8fd0\u884c\u5728S-Mode\uff0cSBI\u8fd0\u884c\u5728M-Mode\u3002\u4ed6\u4eec\u90fd\u4f7f\u7528system call\u6765\u5b9e\u73b0\u8c03\u7528 1 \u3002\u4ed6\u4eec\u4e4b\u95f4\u662f\u600e\u6837\u5b9e\u73b0\u5c42\u5c42\u8c03\u7528\u7684\u5462\uff1f RISCV\u67b6\u6784\u4e2d\u6709\u5982\u4e0b\u89c4\u5b9a\uff1a By default, all traps at any privilege level are handled in machine mode, though a machine-mode handler can redirect traps back to the appropriate level with the MRET instruction (Section 3.3.2). To increase performance, implementations can provide individual read/write bits within medeleg and mideleg to indicate that certain exceptions and interrupts should be processed directly by a lower privilege level. The machine exception delegation register (medeleg) and machine interrupt delegation register (mideleg) are MXLEN-bit read/write registers. \u4e5f\u5c31\u662f\u8bf4\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u65e0\u8bbaCPU\u5f53\u524d\u5904\u4e8e\u54ea\u79cd\u7279\u6743\u7b49\u7ea7\uff0c\u53d1\u751f\u7684\u5f02\u5e38\u90fd\u4f1a\u8fdb\u5165\u5230machine mode\uff0c\u5373\u8df3\u8f6c\u5230mtvec\u5bc4\u5b58\u5668\u6240\u6307\u5411\u7684\u5f02\u5e38\u5904\u7406\u51fd\u6570\u4e2d\u3002\u4f46\u662f\u4e3a\u4e86\u63d0\u9ad8\u6027\u80fd\uff0c\u5728CPU\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u63d0\u4f9bmedeleg\u548cmideleg\u5bc4\u5b58\u5668\u6765\u628a\u7279\u5b9a\u7684\u5f02\u5e38\u548c\u4e2d\u65ad\u91cd\u5b9a\u5411\u5230\u4f4e\u7279\u6743\u7b49\u7ea7\u3002\u5f53\u5728\u8fd9\u4e24\u4e2a\u5bc4\u5b58\u5668\u8bbe\u7f6e\u4e86\u59d4\u6258\uff0c\u7279\u5b9a\u7684\u5f02\u5e38\u548c\u4e2d\u65ad\u5c31\u4f1a\u76f4\u63a5\u901a\u8fc7\u4f4e\u7279\u6743\u7b49\u7ea7\u7684tvec\u8fdb\u5165\u7279\u5b9a\u7b49\u7ea7\u7684\u5f02\u5e38\u5904\u7406\u51fd\u6570\u3002 \u5185\u6838\u6b63\u662f\u901a\u8fc7\u8fd9\u4e00\u70b9\u6765\u5b9e\u73b0\u5de5\u4f5c\u5728S\u6001\uff0c\u5e76\u63d0\u4f9b\u7cfb\u7edf\u8c03\u7528\uff0c\u7528\u6237App\u624d\u80fd\u591f\u901a\u8fc7ECALL\u6307\u4ee4\u76f4\u63a5\u9677\u5165\u5230\u5185\u6838\uff0c\u8d70\u5185\u6838\u7684\u5f02\u5e38\u5904\u7406\uff0c\u800c\u4e0d\u662f\u8df3\u5230SBI\u4e2d\u3002 OpenSBI\u4e2dlib/sbi/sbi_hart.c\u7684\u4ee3\u7801\u8bf4\u660e\u4e86\u8fd9\u4e00\u70b9,CAUSE_USER_ECALL(\u7528\u6237\u6001\u7684\u7cfb\u7edf\u8c03\u7528)\uff0c\u4ee5\u53caPAGE_FAULT(\u5fc5\u7136\u4e5f\u8981\u6709\u7f3a\u9875\u5f02\u5e38\u4ee5\u521b\u5efa\u65b0\u7684\u9875\u8868)\u90fd\u4f1a\u88ab\u59d4\u6258\u7ed9S-mode\u3002 static int delegate_traps ( struct sbi_scratch * scratch , u32 hartid ) { const struct sbi_platform * plat = sbi_platform_ptr ( scratch ); unsigned long interrupts , exceptions ; if ( ! misa_extension ( 'S' )) /* No delegation possible as mideleg does not exist */ return 0 ; /* Send M-mode interrupts and most exceptions to S-mode */ interrupts = MIP_SSIP | MIP_STIP | MIP_SEIP ; exceptions = ( 1U << CAUSE_MISALIGNED_FETCH ) | ( 1U << CAUSE_BREAKPOINT ) | ( 1U << CAUSE_USER_ECALL ); if ( sbi_platform_has_mfaults_delegation ( plat )) exceptions |= ( 1U << CAUSE_FETCH_PAGE_FAULT ) | ( 1U << CAUSE_LOAD_PAGE_FAULT ) | ( 1U << CAUSE_STORE_PAGE_FAULT ); /* * If hypervisor extension available then we only handle hypervisor * calls (i.e. ecalls from HS-mode) in M-mode. * * The HS-mode will additionally handle supervisor calls (i.e. ecalls * from VS-mode), Guest page faults and Virtual interrupts. */ if ( misa_extension ( 'H' )) { exceptions |= ( 1U << CAUSE_SUPERVISOR_ECALL ); exceptions |= ( 1U << CAUSE_FETCH_GUEST_PAGE_FAULT ); exceptions |= ( 1U << CAUSE_LOAD_GUEST_PAGE_FAULT ); exceptions |= ( 1U << CAUSE_VIRTUAL_INST_FAULT ); exceptions |= ( 1U << CAUSE_STORE_GUEST_PAGE_FAULT ); } csr_write ( CSR_MIDELEG , interrupts ); csr_write ( CSR_MEDELEG , exceptions ); return 0 ; } \u5728\u5185\u6838\u4ee3\u7801arch/riscv/kernel/entry.S\u4e2d\u7684\u5f02\u5e38\u5904\u7406\u51fd\u6570\u4e2d\u4e5f\u80fd\u591f\u770b\u5230\u5bf9\u7cfb\u7edf\u8c03\u7528\u7684\u5904\u7406\uff0cEXC_SYSCALL\u5373\u4e3aCAUSE_USER_ECALL\uff0c pagefault\u7684\u5904\u7406\u88ab\u653e\u5728\u4e86excp_vect_table\u4e2d 1 : la ra , ret_from_exception /* Handle syscalls */ li t0 , EXC_SYSCALL beq s4 , t0 , handle_syscall /* Handle other exceptions */ slli t0 , s4 , RISCV_LGPTR la t1 , excp_vect_table la t2 , excp_vect_table_end move a0 , sp /* pt_regs */ add t0 , t1 , t0 /* Check if exception code lies within bounds */ bgeu t0 , t2 , 1f REG_L t0 , 0 ( t0 ) jr t0 \u901a\u8fc7\u4e0a\u9762\u7684\u63cf\u8ff0\uff0c\u5c31\u7406\u6e05\u695a\u4e86\u5f53\u5185\u6838\u5de5\u4f5c\u5728S\u6a21\u5f0f\uff0c\u7528\u6237App\u4e3a\u4ec0\u4e48\u901a\u8fc7ECALL\u80fd\u591f\u76f4\u63a5\u9677\u5165\u5230\u5185\u6838\u4e2d\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\u7684\u5904\u7406\u3002 \u5728\u5185\u6838\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7SBI\u63a5\u53e3\u6765\u4eab\u53d7SBI\u670d\u52a1\u3002\u5185\u6838\u4e2d\u7684sbi_ecall\u4e5f\u662f\u901a\u8fc7ECALL\u5b9e\u73b0\u7684\u3002 SBI\u4f7f\u7528a7\u6765\u4f20\u9012SBI\u6269\u5c55ID(EID)\uff0c\u4f7f\u7528a6\u6765\u4f20\u9012SBI function ID(FID)\u3002\u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u4e3aEID\u662f\u6a21\u5757ID\uff0c\u6bcf\u4e2a\u6a21\u5757\u4e0b\u9762\u6709\u5f88\u591aFunction,\u901a\u8fc7FID\u6765\u6307\u5b9a\u3002 \u540c\u65f6\uff0c\u4f7f\u7528a0, a1\u6765\u8fd4\u56de\u9519\u8bef\u7801\uff0c ret.error \u548c ret.value\u5c31\u662f\u4ed6\u4eec\u7684\u503c\u3002 struct sbiret sbi_ecall ( int ext , int fid , unsigned long arg0 , unsigned long arg1 , unsigned long arg2 , unsigned long arg3 , unsigned long arg4 , unsigned long arg5 ) { struct sbiret ret ; register uintptr_t a0 asm ( \"a0\" ) = ( uintptr_t )( arg0 ); register uintptr_t a1 asm ( \"a1\" ) = ( uintptr_t )( arg1 ); register uintptr_t a2 asm ( \"a2\" ) = ( uintptr_t )( arg2 ); register uintptr_t a3 asm ( \"a3\" ) = ( uintptr_t )( arg3 ); register uintptr_t a4 asm ( \"a4\" ) = ( uintptr_t )( arg4 ); register uintptr_t a5 asm ( \"a5\" ) = ( uintptr_t )( arg5 ); register uintptr_t a6 asm ( \"a6\" ) = ( uintptr_t )( fid ); register uintptr_t a7 asm ( \"a7\" ) = ( uintptr_t )( ext ); asm volatile ( \"ecall\" : \"+r\" ( a0 ), \"+r\" ( a1 ) : \"r\" ( a2 ), \"r\" ( a3 ), \"r\" ( a4 ), \"r\" ( a5 ), \"r\" ( a6 ), \"r\" ( a7 ) : \"memory\" ); ret . error = a0 ; ret . value = a1 ; return ret ; } EXPORT_SYMBOL ( sbi_ecall ); \u4e0b\u9762\u5217\u51fa\u8fd9\u4e9bEID #ifdef CONFIG_RISCV_SBI enum sbi_ext_id { #ifdef CONFIG_RISCV_SBI_V01 SBI_EXT_0_1_SET_TIMER = 0x0 , SBI_EXT_0_1_CONSOLE_PUTCHAR = 0x1 , SBI_EXT_0_1_CONSOLE_GETCHAR = 0x2 , SBI_EXT_0_1_CLEAR_IPI = 0x3 , SBI_EXT_0_1_SEND_IPI = 0x4 , SBI_EXT_0_1_REMOTE_FENCE_I = 0x5 , SBI_EXT_0_1_REMOTE_SFENCE_VMA = 0x6 , SBI_EXT_0_1_REMOTE_SFENCE_VMA_ASID = 0x7 , SBI_EXT_0_1_SHUTDOWN = 0x8 , #endif SBI_EXT_BASE = 0x10 , SBI_EXT_TIME = 0x54494D45 , SBI_EXT_IPI = 0x735049 , SBI_EXT_RFENCE = 0x52464E43 , SBI_EXT_HSM = 0x48534D , }; \u6bd4\u5982SBI_EXT_BASE\u8fd9\u4e2a\u57fa\u7840\u6a21\u5757\u4e2d\uff0c\u6709\u5982\u4e0bFunction enum sbi_ext_base_fid { SBI_EXT_BASE_GET_SPEC_VERSION = 0 , SBI_EXT_BASE_GET_IMP_ID , SBI_EXT_BASE_GET_IMP_VERSION , SBI_EXT_BASE_PROBE_EXT , SBI_EXT_BASE_GET_MVENDORID , SBI_EXT_BASE_GET_MARCHID , SBI_EXT_BASE_GET_MIMPID , }; \u4e0a\u8ff0\u5b9a\u4e49\u7684\u5185\u6838\u652f\u6301\u7684sbi_ecall, \u4ed6\u4eec\u4f1a\u50cf\u4e0b\u9762\u8fd9\u6837\u8fdb\u884c\u5c01\u88c5 void sbi_console_putchar ( int ch ) { sbi_ecall ( SBI_EXT_0_1_CONSOLE_PUTCHAR , 0 , ch , 0 , 0 , 0 , 0 , 0 ); } EXPORT_SYMBOL ( sbi_console_putchar ); \u867d\u7136\u90fd\u662fECALL\uff0c\u4f46\u662f\u8fd9\u4e2aECALL\u662f\u4eceS-mode\u53d1\u51fa\uff0c\u4f1a\u89e6\u53d1CAUSE_SUPERVISOR_ECALL\uff0c\u8fd9\u4f1a\u4f7fCPU\u9677\u5165M-mode,\u8fdb\u5165\u5230SBI\u8bbe\u7f6e\u7684\u5f02\u5e38\u5904\u7406\u51fd\u6570\u4e2d\u3002\u4fbf\u53ef\u4ee5\u6267\u884cSBI\u4e2d\u7684\u4ee3\u7801\u3002 OpenSBI\u7684firmware/fw_base.S\u4e2d\u5b9e\u73b0\u4e86\u5f02\u5e38\u5904\u7406\uff0c\u5176\u4e2d\u901a\u8fc7\u5982\u4e0b\u4ee3\u7801\u8fdb\u5165sbi_trap_handler call sbi_trap_handler \u5728lib/sbi/sbi_trap.c\u7684sbi_trap_handler\u4e2d\u53c8\u901a\u8fc7\u786e\u8ba4CAUSE_SUPERVISOR_ECALL\u800c\u8fdb\u5165sbi_ecall_handler void sbi_trap_handler ( struct sbi_trap_regs * regs ) { ulong mcause = csr_read ( CSR_MCAUSE ); switch ( mcause ) { case CAUSE_SUPERVISOR_ECALL : case CAUSE_HYPERVISOR_ECALL : rc = sbi_ecall_handler ( regs ); msg = \"ecall handler failed\" ; break ; } } \u5177\u4f53\u7684\u534f\u8bae\u5728lib/sbi/sbi_ecall.c\u7684sbi_ecall_handler\u4e2d\u5b9e\u73b0 int sbi_ecall_handler ( struct sbi_trap_regs * regs ) { int ret = 0 ; struct sbi_ecall_extension * ext ; unsigned long extension_id = regs -> a7 ; unsigned long func_id = regs -> a6 ; struct sbi_trap_info trap = { 0 }; unsigned long out_val = 0 ; bool is_0_1_spec = 0 ; unsigned long args [ 6 ]; args [ 0 ] = regs -> a0 ; args [ 1 ] = regs -> a1 ; args [ 2 ] = regs -> a2 ; args [ 3 ] = regs -> a3 ; args [ 4 ] = regs -> a4 ; args [ 5 ] = regs -> a5 ; ext = sbi_ecall_find_extension ( extension_id ); if ( ext && ext -> handle ) { ret = ext -> handle ( extension_id , func_id , args , & out_val , & trap ); if ( extension_id >= SBI_EXT_0_1_SET_TIMER && extension_id <= SBI_EXT_0_1_SHUTDOWN ) is_0_1_spec = 1 ; } else { ret = SBI_ENOTSUPP ; } return 0 ; } \u5982\u4e0a\u5c31\u662f\u6574\u4e2aSBI\u7684\u5de5\u4f5c\u673a\u5236\u3002 why it's needed \u00b6 \u901a\u8fc7\u4e0a\u8ff0\u7684\u5206\u6790\uff0c\u5df2\u7ecf\u5bf9SBI\u6709\u4e86\u6df1\u5165\u7684\u4e86\u89e3\u3002\u603b\u7ed3\u6765\u770b\uff0c\u56e0\u4e3a\u53c8SBI\u7684\u5b58\u5728\uff0c\u5185\u6838\u4e0d\u518d\u9700\u8981\u5173\u5fc3SBI\u4e2d\u6d89\u53ca\u7684\u8fd9\u4e9b\u5e95\u5c42\u7684\u5b9e\u73b0\uff0c\u53ea\u9700\u8981\u5b9e\u73b0\u4e00\u5957\u63a5\u53e3\u5373\u53ef\u3002 \u5047\u5982\u6ca1\u6709SBI,\u90a3\u4e48\u6bcf\u4e00\u4e2a\u5382\u5bb6\u7684CPU\u90fd\u9700\u8981\u5728\u5185\u6838\u4e2d\u5bf9\u8fd9\u4e9b\u5e95\u5c42\u63a5\u53e3\u505a\u4e0d\u540c\u7684\u5b9e\u73b0\uff0c\u663e\u7136\uff0c\u6ca1\u6709\u4e00\u4e2a\u7edf\u4e00\u7684\u5382\u5546\u7c7b\u578b\u83b7\u53d6\u9014\u5f84\u80fd\u591f\u8ba9\u5185\u6838\u6765\u5224\u65ad\u5f53\u524d\u7684\u8bbe\u5907\u5e94\u8be5\u5339\u914d\u54ea\u4e00\u5957\u5e95\u5c42\u5b9e\u73b0\uff0c\u8fd9\u4fbf\u53ea\u80fd\u8981\u6c42\u6211\u4eec\u7f16\u8bd1\u4e0d\u540c\u7684\u5185\u6838\u7248\u672c\u4ee5\u5339\u914d\u4e0d\u540c\u7684CPU\u3002\u8fd9\u65e0\u7591\u4f1a\u4f7f\u5f97\u5185\u6838\u7248\u672c\u6df7\u4e71\uff0c\u5176\u5b9e\u662f\u8ba9\u5185\u6838\u5173\u5fc3\u4e86\u5b83\u672c\u4e0d\u5e94\u8be5\u5173\u5fc3\u7684\u4e1c\u897f\u3002\u901a\u8fc7\u589e\u52a0\u8fd9\u4e00\u5c42\uff0c\u5185\u6838\u7684\u53ef\u79fb\u690d\u6027\u4fbf\u5f97\u5230\u4e86\u63d0\u9ad8\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u4ece\u5b89\u5168\u6027\u4e0a\u6765\u8bb2\uff0c\u8fd9\u79cd\u65b9\u5f0f\u66f4\u52a0\u5b89\u5168\u3002 OpenSBI\u7684\u5b9e\u73b0 \u00b6 The goal of the OpenSBI project is to provide an open-source reference implementation of the RISC-V SBI specifications for platform-specific firmwares executing in M-mode (case 1 mentioned above). An OpenSBI implementation can be easily extended by RISC-V platform and system-on-chip vendors to fit a particular hardware configuration. \u5047\u5982\u6211\u4eec\u8bbe\u8ba1OpenSBI \u00b6 \u5728\u4e86\u89e3\u4e86what is SBI and why it's needed\u4e4b\u540e\uff0c\u6211\u4eec\u518d\u53bb\u5206\u6790\u4e00\u4e0bOpenSBI\u662f\u5982\u4f55\u505a\u5230\u5b83\u63cf\u8ff0\u4e2d\u6240\u8bb2\u7684\u53ef\u6269\u5c55\u548c\u5b9a\u5236\u6027\u3002\u8fd9\u6d89\u53ca\u5230\u8f6f\u4ef6\u8bbe\u8ba1\u601d\u60f3\u3002\u5728\u5206\u6790OpenSBI\u4ee3\u7801\u4e4b\u524d\uff0c\u601d\u8003\u4e00\u4e2a\u95ee\u9898\uff0c\u5047\u5982\u6211\u4eec\u53bb\u8bbe\u8ba1OpenSBI\uff0c\u6211\u4eec\u5927\u81f4\u4f1a\u600e\u4e48\u505a\uff1f \u5927\u81f4\u7f57\u5217\u5982\u4e0b\u51e0\u70b9\uff1a \u8f6f\u4ef6\u81f3\u5c11\u5e94\u8be5\u5305\u542b\u542f\u52a8\u4ee3\u7801\uff0c\u63a5\u53e3\u7ba1\u7406\u4e3b\u4f53\uff0c\u52a0\u8f7d\u5e76\u6267\u884c\u4e0b\u4e00\u7ea7\u8f6f\u4ef6\u7b49\u529f\u80fd \u4e3a\u4e86\u80fd\u591f\u652f\u6301\u4e0d\u540c\u5382\u5546\uff0c\u5fc5\u7136\u8981\u4e3a\u5382\u5546\u4eec\u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\uff0c\u4e13\u95e8\u5b58\u653e\u4ed6\u4eec\u5b9a\u5236\u7684\u5185\u5bb9 \u4e3a\u4e86\u80fd\u591f\u8ba9\u6bcf\u4e00\u4e2a\u5382\u5546\u90fd\u6bd4\u8f83\u5bb9\u6613\u7684\u6dfb\u52a0\u81ea\u5df1\u7279\u6709\u7684\u5b9e\u73b0\uff0cSBI\u4e2d\u89c4\u5b9a\u7684\u6bcf\u4e00\u4e2a\u63a5\u53e3\u90fd\u5e94\u8be5\u6709\u4e00\u4e2a\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5382\u5546\u90fd\u80fd\u591f\u91cd\u5199\u8fd9\u4e2a\u5b9e\u73b0\u3002 \u5e94\u8be5\u80fd\u591f\u6709\u673a\u5236\u6765\u8bc6\u522b\u5382\u5546\u662f\u5426\u652f\u6301\u67d0\u63a5\u53e3 Makefile\u5e94\u8be5\u8981\u7075\u6d3b\u53ef\u6269\u5c55\uff0c\u5e94\u8be5\u5c3d\u53ef\u80fd\u7684\u4e0d\u9700\u8981\u5382\u5546\u4fee\u6539Makefile\u4e3b\u4f53 \u5e94\u8be5\u80fd\u591f\u5f88\u597d\u7684\u89e3\u8026riscv\u7684\u6269\u5c55\u6307\u4ee4\u96c6 \u628a\u4e0a\u8ff0\u51e0\u70b9\u5b9e\u73b0\uff0c\u731c\u60f3\u5e94\u8be5\u5927\u81f4\u80fd\u591f\u5b9e\u73b0\u4e00\u4e2a\u6ee1\u8db3\u6269\u5c55\u6027\u548c\u5b9a\u5236\u5316\u7684SBI\u6846\u67b6\u3002\u63a5\u4e0b\u6765\u5c31\u5b9e\u9645\u770b\u4e00\u4e0bOpenSBI\u7684\u5b9e\u73b0\uff0c\u4ed6\u4eec\u8bbe\u8ba1\u7684\u9ad8\u660e\u4e4b\u5904\u53c8\u5728\u54ea\u91cc\u3002 \u5b9e\u73b0 \u00b6 \u9996\u5148\u6765\u770b\u4e00\u4e0b\u5927\u81f4\u7684\u76ee\u5f55\u7ed3\u6784\uff0c\u4e00\u4e2abuild\u76ee\u5f55\u7528\u4e8e\u6784\u5efa\uff0c\u4e00\u4e2afirmware\u76ee\u5f55\u5b58\u653e\u4e86\u542f\u52a8\u6587\u4ef6\u4ee5\u53ca\u8fde\u63a5\u811a\u672c\uff0c\u5176\u4e2d\u901a\u8fc7\u540d\u79f0\u8ddf\u529f\u80fd\u5bf9\u5e94\u3002include\u548clib\u662f\u5176\u6838\u5fc3\u5b9e\u73b0\uff0cplatform\u5e94\u8be5\u5c31\u662f\u653e\u7f6e\u5382\u5546\u5b9a\u5236\u5316\u5185\u5bb9\u7684\u76ee\u5f55\u3002 \u6574\u4f53\u4e00\u4e2aMakefile\u641e\u5b9a\uff0c\u6ca1\u6709\u501f\u52a9\u7f16\u8bd1\u6846\u67b6\u3002\u8fd8\u6709\u4e00\u4e2adocs\u76ee\u5f55\u653e\u7f6e\u4e86\u4e00\u4e9b\u8bf4\u660e\u6587\u6863\uff0c\u8fd9\u975e\u5e38\u6709\u5229\u4e8e\u5bf9\u6574\u4e2a\u8f6f\u4ef6\u5173\u952e\u90e8\u5206\u7684\u7406\u89e3\u3002 . \u251c\u2500\u2500 build \u2502 \u251c\u2500\u2500 lib \u2502 \u2514\u2500\u2500 platform \u251c\u2500\u2500 docs \u251c\u2500\u2500 firmware \u2502 \u251c\u2500\u2500 external_deps.mk \u2502 \u251c\u2500\u2500 fw_base.ldS \u2502 \u251c\u2500\u2500 fw_base.S \u2502 \u251c\u2500\u2500 fw_dynamic.elf.ldS \u2502 \u251c\u2500\u2500 fw_dynamic.S \u2502 \u251c\u2500\u2500 fw_jump.elf.ldS \u2502 \u251c\u2500\u2500 fw_jump.S \u2502 \u251c\u2500\u2500 fw_payload.elf.ldS \u2502 \u251c\u2500\u2500 fw_payload.S \u2502 \u251c\u2500\u2500 objects.mk \u2502 \u2514\u2500\u2500 payloads \u251c\u2500\u2500 include \u2502 \u251c\u2500\u2500 sbi \u2502 \u2514\u2500\u2500 sbi_utils \u251c\u2500\u2500 lib \u2502 \u251c\u2500\u2500 sbi \u2502 \u2514\u2500\u2500 utils \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 platform \u2502 \u251c\u2500\u2500 andes \u2502 \u251c\u2500\u2500 generic \u2502 \u251c\u2500\u2500 kendryte \u2502 \u251c\u2500\u2500 sifive \u2502 \u251c\u2500\u2500 template \u2502 \u2514\u2500\u2500 thead OpenSBI\u5728lib\u76ee\u5f55\u4e0b\u5b9e\u73b0\u4e86\u901a\u7528\u7684\u6846\u67b6\uff0c\u5c06\u9700\u8981\u5404\u4e2a\u5e73\u53f0\u5b9a\u5236\u5316\u7684\u4e1c\u897f\u62bd\u8c61\u6210sbi_platform, \u5404\u4e2a\u5e73\u53f0\u9700\u8981\u5b9e\u4f8b\u5316\u8fd9\u4e2a\u7ed3\u6784\u3002libsbi.a \u548c libsbiutil.a \u52a0\u4e0a\u5b9e\u4f8b\u5316\u7684 sbi_platform \u5c31\u662flibplatsbi.a\u3002\u518d\u52a0\u4e0a\u542f\u52a8\u6c47\u7f16\u548c\u94fe\u63a5\u811a\u672c\uff0c\u5c31\u7ec4\u6210\u4e86\u6700\u7ec8\u7684\u56fa\u4ef6\u3002 -------------- ------------------ | libsbi.a | + | libsbiutil.a | platform-independent library -------------- ------------------ | |- andes | --------------------------- created by specific platform |- sifive | + | sbi_platform instance | <-------------------------------|- generic | --------------------------- |- ...... | V ---------------------------------- | libplatsbi.a | ---------------------------------- | | --------------------- | + | firmware | | --------------------- V ----------------------- | final firmware | ----------------------- OpenSBI\u7ef4\u62a4\u4e86\u4e00\u4e2astruct sbi_scratch\uff0c \u5b83\u4f7f\u7528\u63a7\u5236\u72b6\u6001\u5bc4\u5b58\u5668mscratch\u6765\u4fdd\u5b58\u8fd9\u4e2a\u7ed3\u6784\u7684\u5730\u5740\uff0cstruct sbi_platform \u7684\u5730\u5740\u53ef\u4ee5\u5728\u542f\u52a8\u6c47\u7f16\u4e2d\u4fdd\u5b58\u5728sbi_scratch\u4e2d\u3002 \u53c2\u8003\u8d44\u6599 \u00b6 [ https://www.thegoodpenguin.co.uk/blog/an-overview-of-opensbi/ ] \u5b98\u65b9SBI\u7684spec\u6587\u6863\u7684\u524d\u4e24\u7ae0\u5bf9SBI\u505a\u4e86\u6bd4\u8f83\u8be6\u7ec6\u7684\u8bf4\u660e\uff0c\u5269\u4e0b\u7684\u51e0\u7ae0\u4e3a\u6bcf\u4e00\u4e2a\u63a5\u53e3\u7684\u8bf4\u660e\uff0c\u53ef\u4ee5\u7c97\u7565\u901a\u8bfb\uff0c\u7136\u540e\u4f5c\u4e3a\u5de5\u5177\u4e66\u4f7f\u7528\u3002 \u21a9","title":"OpenSBI"},{"location":"riscv/opensbi.html#opensbi","text":"OpenSBI what is OpenSBI SBI \u5de5\u4f5c\u673a\u5236 why it's needed OpenSBI\u7684\u5b9e\u73b0 \u5047\u5982\u6211\u4eec\u8bbe\u8ba1OpenSBI \u5b9e\u73b0 \u53c2\u8003\u8d44\u6599 \u672c\u6587\u5148\u4ecb\u7ecd\u4ec0\u4e48\u662fOpenSBI, \u518d\u8be6\u89e3SBI\u7684\u5de5\u4f5c\u673a\u5236\uff0c\u6700\u540e\u5bf9OpenSBI\u7684\u4ee3\u7801\u6846\u67b6\u8fdb\u884c\u5206\u6790\u3002","title":"OpenSBI"},{"location":"riscv/opensbi.html#what-is-opensbi","text":"OpenSBI\u662f\u5f00\u6e90\u7684RISC-V Supervisor Binary Interface \u8f6f\u4ef6\u53c2\u8003\u5b9e\u73b0\u3002\u5b83\u662f\u4e00\u4e2a\u8fd0\u884c\u5728\u66f4\u9ad8\u7279\u6743\u7b49\u7ea7\uff0c\u7528\u6765\u521d\u59cb\u5316\u786c\u4ef6\uff0c\u5e76\u4e14\u5141\u8bb8\u64cd\u4f5c\u7cfb\u7edf\u7b49\u4f4e\u7279\u6743\u7b49\u7ea7\u8f6f\u4ef6\u8c03\u7528\u5b83\u6765\u5b9e\u73b0\u8bbe\u5907\u91cd\u542f\u6216CPU\u6838\u7ba1\u7406\u7b49\u64cd\u4f5c\u7684\u56fa\u4ef6\u3002 \u4e0b\u56fe\u5c55\u793a\u4e86\u4e00\u822c\u7684\u591a\u7ea7\u542f\u52a8\u6a21\u578b\u3002CPU\u4e0a\u7535\u6267\u884cROM\u4e2d\u7684\u4ee3\u7801\uff0cROM\u52a0\u8f7dSPL\u5230\u5185\u90e8SRAM\uff0cSPL\u52a0\u8f7dRUNTIME\uff0cRUNTIME\u518d\u52a0\u8f7dBOOTLOADER\uff0c\u6700\u540e\u7531BOOTLOADER\u52a0\u8f7dOS \u4e0b\u56fe\u5c55\u793a\u4e86RISCV\u7684\u591a\u7ea7\u542f\u52a8\u6a21\u578b\u3002\u53ea\u662f\u4e2d\u95f4\u7684RUNTIME\u53d8\u6210\u4e86OpenSBI\u3002 \u603b\u7ed3\u6765\u770b\uff0c\u5b83\u6709\u70b9\u513f\u50cfARM\u4f53\u7cfb\u4e2d\u7684ATF(Arm Trusted Firmware),\u751a\u81f3\u50cfpc\u9886\u57df\u7684BIOS/UEFI\u3002","title":"what is OpenSBI"},{"location":"riscv/opensbi.html#sbi","text":"The SBI allows supervisor-mode (S-mode or VS-mode) software to be portable across all RISC-V implementations by defining an abstraction for platform (or hypervisor) specific functionality. SBI\u80fd\u591f\u63d0\u9ad8S-mode\u8f6f\u4ef6\u7684\u53ef\u79fb\u690d\u6027\u3002","title":"SBI"},{"location":"riscv/opensbi.html#_1","text":"\u5bf9\u4e8e\u975e\u865a\u62df\u5316\u7684\u7cfb\u7edf\uff0c\u7528\u6237\u7a7a\u95f4\u4ee3\u7801\u8fd0\u884c\u5728U-Mode\uff0c\u5185\u6838\u8fd0\u884c\u5728S-Mode\uff0cSBI\u8fd0\u884c\u5728M-Mode\u3002\u4ed6\u4eec\u90fd\u4f7f\u7528system call\u6765\u5b9e\u73b0\u8c03\u7528 1 \u3002\u4ed6\u4eec\u4e4b\u95f4\u662f\u600e\u6837\u5b9e\u73b0\u5c42\u5c42\u8c03\u7528\u7684\u5462\uff1f RISCV\u67b6\u6784\u4e2d\u6709\u5982\u4e0b\u89c4\u5b9a\uff1a By default, all traps at any privilege level are handled in machine mode, though a machine-mode handler can redirect traps back to the appropriate level with the MRET instruction (Section 3.3.2). To increase performance, implementations can provide individual read/write bits within medeleg and mideleg to indicate that certain exceptions and interrupts should be processed directly by a lower privilege level. The machine exception delegation register (medeleg) and machine interrupt delegation register (mideleg) are MXLEN-bit read/write registers. \u4e5f\u5c31\u662f\u8bf4\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u65e0\u8bbaCPU\u5f53\u524d\u5904\u4e8e\u54ea\u79cd\u7279\u6743\u7b49\u7ea7\uff0c\u53d1\u751f\u7684\u5f02\u5e38\u90fd\u4f1a\u8fdb\u5165\u5230machine mode\uff0c\u5373\u8df3\u8f6c\u5230mtvec\u5bc4\u5b58\u5668\u6240\u6307\u5411\u7684\u5f02\u5e38\u5904\u7406\u51fd\u6570\u4e2d\u3002\u4f46\u662f\u4e3a\u4e86\u63d0\u9ad8\u6027\u80fd\uff0c\u5728CPU\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u63d0\u4f9bmedeleg\u548cmideleg\u5bc4\u5b58\u5668\u6765\u628a\u7279\u5b9a\u7684\u5f02\u5e38\u548c\u4e2d\u65ad\u91cd\u5b9a\u5411\u5230\u4f4e\u7279\u6743\u7b49\u7ea7\u3002\u5f53\u5728\u8fd9\u4e24\u4e2a\u5bc4\u5b58\u5668\u8bbe\u7f6e\u4e86\u59d4\u6258\uff0c\u7279\u5b9a\u7684\u5f02\u5e38\u548c\u4e2d\u65ad\u5c31\u4f1a\u76f4\u63a5\u901a\u8fc7\u4f4e\u7279\u6743\u7b49\u7ea7\u7684tvec\u8fdb\u5165\u7279\u5b9a\u7b49\u7ea7\u7684\u5f02\u5e38\u5904\u7406\u51fd\u6570\u3002 \u5185\u6838\u6b63\u662f\u901a\u8fc7\u8fd9\u4e00\u70b9\u6765\u5b9e\u73b0\u5de5\u4f5c\u5728S\u6001\uff0c\u5e76\u63d0\u4f9b\u7cfb\u7edf\u8c03\u7528\uff0c\u7528\u6237App\u624d\u80fd\u591f\u901a\u8fc7ECALL\u6307\u4ee4\u76f4\u63a5\u9677\u5165\u5230\u5185\u6838\uff0c\u8d70\u5185\u6838\u7684\u5f02\u5e38\u5904\u7406\uff0c\u800c\u4e0d\u662f\u8df3\u5230SBI\u4e2d\u3002 OpenSBI\u4e2dlib/sbi/sbi_hart.c\u7684\u4ee3\u7801\u8bf4\u660e\u4e86\u8fd9\u4e00\u70b9,CAUSE_USER_ECALL(\u7528\u6237\u6001\u7684\u7cfb\u7edf\u8c03\u7528)\uff0c\u4ee5\u53caPAGE_FAULT(\u5fc5\u7136\u4e5f\u8981\u6709\u7f3a\u9875\u5f02\u5e38\u4ee5\u521b\u5efa\u65b0\u7684\u9875\u8868)\u90fd\u4f1a\u88ab\u59d4\u6258\u7ed9S-mode\u3002 static int delegate_traps ( struct sbi_scratch * scratch , u32 hartid ) { const struct sbi_platform * plat = sbi_platform_ptr ( scratch ); unsigned long interrupts , exceptions ; if ( ! misa_extension ( 'S' )) /* No delegation possible as mideleg does not exist */ return 0 ; /* Send M-mode interrupts and most exceptions to S-mode */ interrupts = MIP_SSIP | MIP_STIP | MIP_SEIP ; exceptions = ( 1U << CAUSE_MISALIGNED_FETCH ) | ( 1U << CAUSE_BREAKPOINT ) | ( 1U << CAUSE_USER_ECALL ); if ( sbi_platform_has_mfaults_delegation ( plat )) exceptions |= ( 1U << CAUSE_FETCH_PAGE_FAULT ) | ( 1U << CAUSE_LOAD_PAGE_FAULT ) | ( 1U << CAUSE_STORE_PAGE_FAULT ); /* * If hypervisor extension available then we only handle hypervisor * calls (i.e. ecalls from HS-mode) in M-mode. * * The HS-mode will additionally handle supervisor calls (i.e. ecalls * from VS-mode), Guest page faults and Virtual interrupts. */ if ( misa_extension ( 'H' )) { exceptions |= ( 1U << CAUSE_SUPERVISOR_ECALL ); exceptions |= ( 1U << CAUSE_FETCH_GUEST_PAGE_FAULT ); exceptions |= ( 1U << CAUSE_LOAD_GUEST_PAGE_FAULT ); exceptions |= ( 1U << CAUSE_VIRTUAL_INST_FAULT ); exceptions |= ( 1U << CAUSE_STORE_GUEST_PAGE_FAULT ); } csr_write ( CSR_MIDELEG , interrupts ); csr_write ( CSR_MEDELEG , exceptions ); return 0 ; } \u5728\u5185\u6838\u4ee3\u7801arch/riscv/kernel/entry.S\u4e2d\u7684\u5f02\u5e38\u5904\u7406\u51fd\u6570\u4e2d\u4e5f\u80fd\u591f\u770b\u5230\u5bf9\u7cfb\u7edf\u8c03\u7528\u7684\u5904\u7406\uff0cEXC_SYSCALL\u5373\u4e3aCAUSE_USER_ECALL\uff0c pagefault\u7684\u5904\u7406\u88ab\u653e\u5728\u4e86excp_vect_table\u4e2d 1 : la ra , ret_from_exception /* Handle syscalls */ li t0 , EXC_SYSCALL beq s4 , t0 , handle_syscall /* Handle other exceptions */ slli t0 , s4 , RISCV_LGPTR la t1 , excp_vect_table la t2 , excp_vect_table_end move a0 , sp /* pt_regs */ add t0 , t1 , t0 /* Check if exception code lies within bounds */ bgeu t0 , t2 , 1f REG_L t0 , 0 ( t0 ) jr t0 \u901a\u8fc7\u4e0a\u9762\u7684\u63cf\u8ff0\uff0c\u5c31\u7406\u6e05\u695a\u4e86\u5f53\u5185\u6838\u5de5\u4f5c\u5728S\u6a21\u5f0f\uff0c\u7528\u6237App\u4e3a\u4ec0\u4e48\u901a\u8fc7ECALL\u80fd\u591f\u76f4\u63a5\u9677\u5165\u5230\u5185\u6838\u4e2d\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\u7684\u5904\u7406\u3002 \u5728\u5185\u6838\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7SBI\u63a5\u53e3\u6765\u4eab\u53d7SBI\u670d\u52a1\u3002\u5185\u6838\u4e2d\u7684sbi_ecall\u4e5f\u662f\u901a\u8fc7ECALL\u5b9e\u73b0\u7684\u3002 SBI\u4f7f\u7528a7\u6765\u4f20\u9012SBI\u6269\u5c55ID(EID)\uff0c\u4f7f\u7528a6\u6765\u4f20\u9012SBI function ID(FID)\u3002\u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u4e3aEID\u662f\u6a21\u5757ID\uff0c\u6bcf\u4e2a\u6a21\u5757\u4e0b\u9762\u6709\u5f88\u591aFunction,\u901a\u8fc7FID\u6765\u6307\u5b9a\u3002 \u540c\u65f6\uff0c\u4f7f\u7528a0, a1\u6765\u8fd4\u56de\u9519\u8bef\u7801\uff0c ret.error \u548c ret.value\u5c31\u662f\u4ed6\u4eec\u7684\u503c\u3002 struct sbiret sbi_ecall ( int ext , int fid , unsigned long arg0 , unsigned long arg1 , unsigned long arg2 , unsigned long arg3 , unsigned long arg4 , unsigned long arg5 ) { struct sbiret ret ; register uintptr_t a0 asm ( \"a0\" ) = ( uintptr_t )( arg0 ); register uintptr_t a1 asm ( \"a1\" ) = ( uintptr_t )( arg1 ); register uintptr_t a2 asm ( \"a2\" ) = ( uintptr_t )( arg2 ); register uintptr_t a3 asm ( \"a3\" ) = ( uintptr_t )( arg3 ); register uintptr_t a4 asm ( \"a4\" ) = ( uintptr_t )( arg4 ); register uintptr_t a5 asm ( \"a5\" ) = ( uintptr_t )( arg5 ); register uintptr_t a6 asm ( \"a6\" ) = ( uintptr_t )( fid ); register uintptr_t a7 asm ( \"a7\" ) = ( uintptr_t )( ext ); asm volatile ( \"ecall\" : \"+r\" ( a0 ), \"+r\" ( a1 ) : \"r\" ( a2 ), \"r\" ( a3 ), \"r\" ( a4 ), \"r\" ( a5 ), \"r\" ( a6 ), \"r\" ( a7 ) : \"memory\" ); ret . error = a0 ; ret . value = a1 ; return ret ; } EXPORT_SYMBOL ( sbi_ecall ); \u4e0b\u9762\u5217\u51fa\u8fd9\u4e9bEID #ifdef CONFIG_RISCV_SBI enum sbi_ext_id { #ifdef CONFIG_RISCV_SBI_V01 SBI_EXT_0_1_SET_TIMER = 0x0 , SBI_EXT_0_1_CONSOLE_PUTCHAR = 0x1 , SBI_EXT_0_1_CONSOLE_GETCHAR = 0x2 , SBI_EXT_0_1_CLEAR_IPI = 0x3 , SBI_EXT_0_1_SEND_IPI = 0x4 , SBI_EXT_0_1_REMOTE_FENCE_I = 0x5 , SBI_EXT_0_1_REMOTE_SFENCE_VMA = 0x6 , SBI_EXT_0_1_REMOTE_SFENCE_VMA_ASID = 0x7 , SBI_EXT_0_1_SHUTDOWN = 0x8 , #endif SBI_EXT_BASE = 0x10 , SBI_EXT_TIME = 0x54494D45 , SBI_EXT_IPI = 0x735049 , SBI_EXT_RFENCE = 0x52464E43 , SBI_EXT_HSM = 0x48534D , }; \u6bd4\u5982SBI_EXT_BASE\u8fd9\u4e2a\u57fa\u7840\u6a21\u5757\u4e2d\uff0c\u6709\u5982\u4e0bFunction enum sbi_ext_base_fid { SBI_EXT_BASE_GET_SPEC_VERSION = 0 , SBI_EXT_BASE_GET_IMP_ID , SBI_EXT_BASE_GET_IMP_VERSION , SBI_EXT_BASE_PROBE_EXT , SBI_EXT_BASE_GET_MVENDORID , SBI_EXT_BASE_GET_MARCHID , SBI_EXT_BASE_GET_MIMPID , }; \u4e0a\u8ff0\u5b9a\u4e49\u7684\u5185\u6838\u652f\u6301\u7684sbi_ecall, \u4ed6\u4eec\u4f1a\u50cf\u4e0b\u9762\u8fd9\u6837\u8fdb\u884c\u5c01\u88c5 void sbi_console_putchar ( int ch ) { sbi_ecall ( SBI_EXT_0_1_CONSOLE_PUTCHAR , 0 , ch , 0 , 0 , 0 , 0 , 0 ); } EXPORT_SYMBOL ( sbi_console_putchar ); \u867d\u7136\u90fd\u662fECALL\uff0c\u4f46\u662f\u8fd9\u4e2aECALL\u662f\u4eceS-mode\u53d1\u51fa\uff0c\u4f1a\u89e6\u53d1CAUSE_SUPERVISOR_ECALL\uff0c\u8fd9\u4f1a\u4f7fCPU\u9677\u5165M-mode,\u8fdb\u5165\u5230SBI\u8bbe\u7f6e\u7684\u5f02\u5e38\u5904\u7406\u51fd\u6570\u4e2d\u3002\u4fbf\u53ef\u4ee5\u6267\u884cSBI\u4e2d\u7684\u4ee3\u7801\u3002 OpenSBI\u7684firmware/fw_base.S\u4e2d\u5b9e\u73b0\u4e86\u5f02\u5e38\u5904\u7406\uff0c\u5176\u4e2d\u901a\u8fc7\u5982\u4e0b\u4ee3\u7801\u8fdb\u5165sbi_trap_handler call sbi_trap_handler \u5728lib/sbi/sbi_trap.c\u7684sbi_trap_handler\u4e2d\u53c8\u901a\u8fc7\u786e\u8ba4CAUSE_SUPERVISOR_ECALL\u800c\u8fdb\u5165sbi_ecall_handler void sbi_trap_handler ( struct sbi_trap_regs * regs ) { ulong mcause = csr_read ( CSR_MCAUSE ); switch ( mcause ) { case CAUSE_SUPERVISOR_ECALL : case CAUSE_HYPERVISOR_ECALL : rc = sbi_ecall_handler ( regs ); msg = \"ecall handler failed\" ; break ; } } \u5177\u4f53\u7684\u534f\u8bae\u5728lib/sbi/sbi_ecall.c\u7684sbi_ecall_handler\u4e2d\u5b9e\u73b0 int sbi_ecall_handler ( struct sbi_trap_regs * regs ) { int ret = 0 ; struct sbi_ecall_extension * ext ; unsigned long extension_id = regs -> a7 ; unsigned long func_id = regs -> a6 ; struct sbi_trap_info trap = { 0 }; unsigned long out_val = 0 ; bool is_0_1_spec = 0 ; unsigned long args [ 6 ]; args [ 0 ] = regs -> a0 ; args [ 1 ] = regs -> a1 ; args [ 2 ] = regs -> a2 ; args [ 3 ] = regs -> a3 ; args [ 4 ] = regs -> a4 ; args [ 5 ] = regs -> a5 ; ext = sbi_ecall_find_extension ( extension_id ); if ( ext && ext -> handle ) { ret = ext -> handle ( extension_id , func_id , args , & out_val , & trap ); if ( extension_id >= SBI_EXT_0_1_SET_TIMER && extension_id <= SBI_EXT_0_1_SHUTDOWN ) is_0_1_spec = 1 ; } else { ret = SBI_ENOTSUPP ; } return 0 ; } \u5982\u4e0a\u5c31\u662f\u6574\u4e2aSBI\u7684\u5de5\u4f5c\u673a\u5236\u3002","title":"\u5de5\u4f5c\u673a\u5236"},{"location":"riscv/opensbi.html#why-its-needed","text":"\u901a\u8fc7\u4e0a\u8ff0\u7684\u5206\u6790\uff0c\u5df2\u7ecf\u5bf9SBI\u6709\u4e86\u6df1\u5165\u7684\u4e86\u89e3\u3002\u603b\u7ed3\u6765\u770b\uff0c\u56e0\u4e3a\u53c8SBI\u7684\u5b58\u5728\uff0c\u5185\u6838\u4e0d\u518d\u9700\u8981\u5173\u5fc3SBI\u4e2d\u6d89\u53ca\u7684\u8fd9\u4e9b\u5e95\u5c42\u7684\u5b9e\u73b0\uff0c\u53ea\u9700\u8981\u5b9e\u73b0\u4e00\u5957\u63a5\u53e3\u5373\u53ef\u3002 \u5047\u5982\u6ca1\u6709SBI,\u90a3\u4e48\u6bcf\u4e00\u4e2a\u5382\u5bb6\u7684CPU\u90fd\u9700\u8981\u5728\u5185\u6838\u4e2d\u5bf9\u8fd9\u4e9b\u5e95\u5c42\u63a5\u53e3\u505a\u4e0d\u540c\u7684\u5b9e\u73b0\uff0c\u663e\u7136\uff0c\u6ca1\u6709\u4e00\u4e2a\u7edf\u4e00\u7684\u5382\u5546\u7c7b\u578b\u83b7\u53d6\u9014\u5f84\u80fd\u591f\u8ba9\u5185\u6838\u6765\u5224\u65ad\u5f53\u524d\u7684\u8bbe\u5907\u5e94\u8be5\u5339\u914d\u54ea\u4e00\u5957\u5e95\u5c42\u5b9e\u73b0\uff0c\u8fd9\u4fbf\u53ea\u80fd\u8981\u6c42\u6211\u4eec\u7f16\u8bd1\u4e0d\u540c\u7684\u5185\u6838\u7248\u672c\u4ee5\u5339\u914d\u4e0d\u540c\u7684CPU\u3002\u8fd9\u65e0\u7591\u4f1a\u4f7f\u5f97\u5185\u6838\u7248\u672c\u6df7\u4e71\uff0c\u5176\u5b9e\u662f\u8ba9\u5185\u6838\u5173\u5fc3\u4e86\u5b83\u672c\u4e0d\u5e94\u8be5\u5173\u5fc3\u7684\u4e1c\u897f\u3002\u901a\u8fc7\u589e\u52a0\u8fd9\u4e00\u5c42\uff0c\u5185\u6838\u7684\u53ef\u79fb\u690d\u6027\u4fbf\u5f97\u5230\u4e86\u63d0\u9ad8\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u4ece\u5b89\u5168\u6027\u4e0a\u6765\u8bb2\uff0c\u8fd9\u79cd\u65b9\u5f0f\u66f4\u52a0\u5b89\u5168\u3002","title":"why it's needed"},{"location":"riscv/opensbi.html#opensbi_1","text":"The goal of the OpenSBI project is to provide an open-source reference implementation of the RISC-V SBI specifications for platform-specific firmwares executing in M-mode (case 1 mentioned above). An OpenSBI implementation can be easily extended by RISC-V platform and system-on-chip vendors to fit a particular hardware configuration.","title":"OpenSBI\u7684\u5b9e\u73b0"},{"location":"riscv/opensbi.html#opensbi_2","text":"\u5728\u4e86\u89e3\u4e86what is SBI and why it's needed\u4e4b\u540e\uff0c\u6211\u4eec\u518d\u53bb\u5206\u6790\u4e00\u4e0bOpenSBI\u662f\u5982\u4f55\u505a\u5230\u5b83\u63cf\u8ff0\u4e2d\u6240\u8bb2\u7684\u53ef\u6269\u5c55\u548c\u5b9a\u5236\u6027\u3002\u8fd9\u6d89\u53ca\u5230\u8f6f\u4ef6\u8bbe\u8ba1\u601d\u60f3\u3002\u5728\u5206\u6790OpenSBI\u4ee3\u7801\u4e4b\u524d\uff0c\u601d\u8003\u4e00\u4e2a\u95ee\u9898\uff0c\u5047\u5982\u6211\u4eec\u53bb\u8bbe\u8ba1OpenSBI\uff0c\u6211\u4eec\u5927\u81f4\u4f1a\u600e\u4e48\u505a\uff1f \u5927\u81f4\u7f57\u5217\u5982\u4e0b\u51e0\u70b9\uff1a \u8f6f\u4ef6\u81f3\u5c11\u5e94\u8be5\u5305\u542b\u542f\u52a8\u4ee3\u7801\uff0c\u63a5\u53e3\u7ba1\u7406\u4e3b\u4f53\uff0c\u52a0\u8f7d\u5e76\u6267\u884c\u4e0b\u4e00\u7ea7\u8f6f\u4ef6\u7b49\u529f\u80fd \u4e3a\u4e86\u80fd\u591f\u652f\u6301\u4e0d\u540c\u5382\u5546\uff0c\u5fc5\u7136\u8981\u4e3a\u5382\u5546\u4eec\u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\uff0c\u4e13\u95e8\u5b58\u653e\u4ed6\u4eec\u5b9a\u5236\u7684\u5185\u5bb9 \u4e3a\u4e86\u80fd\u591f\u8ba9\u6bcf\u4e00\u4e2a\u5382\u5546\u90fd\u6bd4\u8f83\u5bb9\u6613\u7684\u6dfb\u52a0\u81ea\u5df1\u7279\u6709\u7684\u5b9e\u73b0\uff0cSBI\u4e2d\u89c4\u5b9a\u7684\u6bcf\u4e00\u4e2a\u63a5\u53e3\u90fd\u5e94\u8be5\u6709\u4e00\u4e2a\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5382\u5546\u90fd\u80fd\u591f\u91cd\u5199\u8fd9\u4e2a\u5b9e\u73b0\u3002 \u5e94\u8be5\u80fd\u591f\u6709\u673a\u5236\u6765\u8bc6\u522b\u5382\u5546\u662f\u5426\u652f\u6301\u67d0\u63a5\u53e3 Makefile\u5e94\u8be5\u8981\u7075\u6d3b\u53ef\u6269\u5c55\uff0c\u5e94\u8be5\u5c3d\u53ef\u80fd\u7684\u4e0d\u9700\u8981\u5382\u5546\u4fee\u6539Makefile\u4e3b\u4f53 \u5e94\u8be5\u80fd\u591f\u5f88\u597d\u7684\u89e3\u8026riscv\u7684\u6269\u5c55\u6307\u4ee4\u96c6 \u628a\u4e0a\u8ff0\u51e0\u70b9\u5b9e\u73b0\uff0c\u731c\u60f3\u5e94\u8be5\u5927\u81f4\u80fd\u591f\u5b9e\u73b0\u4e00\u4e2a\u6ee1\u8db3\u6269\u5c55\u6027\u548c\u5b9a\u5236\u5316\u7684SBI\u6846\u67b6\u3002\u63a5\u4e0b\u6765\u5c31\u5b9e\u9645\u770b\u4e00\u4e0bOpenSBI\u7684\u5b9e\u73b0\uff0c\u4ed6\u4eec\u8bbe\u8ba1\u7684\u9ad8\u660e\u4e4b\u5904\u53c8\u5728\u54ea\u91cc\u3002","title":"\u5047\u5982\u6211\u4eec\u8bbe\u8ba1OpenSBI"},{"location":"riscv/opensbi.html#_2","text":"\u9996\u5148\u6765\u770b\u4e00\u4e0b\u5927\u81f4\u7684\u76ee\u5f55\u7ed3\u6784\uff0c\u4e00\u4e2abuild\u76ee\u5f55\u7528\u4e8e\u6784\u5efa\uff0c\u4e00\u4e2afirmware\u76ee\u5f55\u5b58\u653e\u4e86\u542f\u52a8\u6587\u4ef6\u4ee5\u53ca\u8fde\u63a5\u811a\u672c\uff0c\u5176\u4e2d\u901a\u8fc7\u540d\u79f0\u8ddf\u529f\u80fd\u5bf9\u5e94\u3002include\u548clib\u662f\u5176\u6838\u5fc3\u5b9e\u73b0\uff0cplatform\u5e94\u8be5\u5c31\u662f\u653e\u7f6e\u5382\u5546\u5b9a\u5236\u5316\u5185\u5bb9\u7684\u76ee\u5f55\u3002 \u6574\u4f53\u4e00\u4e2aMakefile\u641e\u5b9a\uff0c\u6ca1\u6709\u501f\u52a9\u7f16\u8bd1\u6846\u67b6\u3002\u8fd8\u6709\u4e00\u4e2adocs\u76ee\u5f55\u653e\u7f6e\u4e86\u4e00\u4e9b\u8bf4\u660e\u6587\u6863\uff0c\u8fd9\u975e\u5e38\u6709\u5229\u4e8e\u5bf9\u6574\u4e2a\u8f6f\u4ef6\u5173\u952e\u90e8\u5206\u7684\u7406\u89e3\u3002 . \u251c\u2500\u2500 build \u2502 \u251c\u2500\u2500 lib \u2502 \u2514\u2500\u2500 platform \u251c\u2500\u2500 docs \u251c\u2500\u2500 firmware \u2502 \u251c\u2500\u2500 external_deps.mk \u2502 \u251c\u2500\u2500 fw_base.ldS \u2502 \u251c\u2500\u2500 fw_base.S \u2502 \u251c\u2500\u2500 fw_dynamic.elf.ldS \u2502 \u251c\u2500\u2500 fw_dynamic.S \u2502 \u251c\u2500\u2500 fw_jump.elf.ldS \u2502 \u251c\u2500\u2500 fw_jump.S \u2502 \u251c\u2500\u2500 fw_payload.elf.ldS \u2502 \u251c\u2500\u2500 fw_payload.S \u2502 \u251c\u2500\u2500 objects.mk \u2502 \u2514\u2500\u2500 payloads \u251c\u2500\u2500 include \u2502 \u251c\u2500\u2500 sbi \u2502 \u2514\u2500\u2500 sbi_utils \u251c\u2500\u2500 lib \u2502 \u251c\u2500\u2500 sbi \u2502 \u2514\u2500\u2500 utils \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 platform \u2502 \u251c\u2500\u2500 andes \u2502 \u251c\u2500\u2500 generic \u2502 \u251c\u2500\u2500 kendryte \u2502 \u251c\u2500\u2500 sifive \u2502 \u251c\u2500\u2500 template \u2502 \u2514\u2500\u2500 thead OpenSBI\u5728lib\u76ee\u5f55\u4e0b\u5b9e\u73b0\u4e86\u901a\u7528\u7684\u6846\u67b6\uff0c\u5c06\u9700\u8981\u5404\u4e2a\u5e73\u53f0\u5b9a\u5236\u5316\u7684\u4e1c\u897f\u62bd\u8c61\u6210sbi_platform, \u5404\u4e2a\u5e73\u53f0\u9700\u8981\u5b9e\u4f8b\u5316\u8fd9\u4e2a\u7ed3\u6784\u3002libsbi.a \u548c libsbiutil.a \u52a0\u4e0a\u5b9e\u4f8b\u5316\u7684 sbi_platform \u5c31\u662flibplatsbi.a\u3002\u518d\u52a0\u4e0a\u542f\u52a8\u6c47\u7f16\u548c\u94fe\u63a5\u811a\u672c\uff0c\u5c31\u7ec4\u6210\u4e86\u6700\u7ec8\u7684\u56fa\u4ef6\u3002 -------------- ------------------ | libsbi.a | + | libsbiutil.a | platform-independent library -------------- ------------------ | |- andes | --------------------------- created by specific platform |- sifive | + | sbi_platform instance | <-------------------------------|- generic | --------------------------- |- ...... | V ---------------------------------- | libplatsbi.a | ---------------------------------- | | --------------------- | + | firmware | | --------------------- V ----------------------- | final firmware | ----------------------- OpenSBI\u7ef4\u62a4\u4e86\u4e00\u4e2astruct sbi_scratch\uff0c \u5b83\u4f7f\u7528\u63a7\u5236\u72b6\u6001\u5bc4\u5b58\u5668mscratch\u6765\u4fdd\u5b58\u8fd9\u4e2a\u7ed3\u6784\u7684\u5730\u5740\uff0cstruct sbi_platform \u7684\u5730\u5740\u53ef\u4ee5\u5728\u542f\u52a8\u6c47\u7f16\u4e2d\u4fdd\u5b58\u5728sbi_scratch\u4e2d\u3002","title":"\u5b9e\u73b0"},{"location":"riscv/opensbi.html#_3","text":"[ https://www.thegoodpenguin.co.uk/blog/an-overview-of-opensbi/ ] \u5b98\u65b9SBI\u7684spec\u6587\u6863\u7684\u524d\u4e24\u7ae0\u5bf9SBI\u505a\u4e86\u6bd4\u8f83\u8be6\u7ec6\u7684\u8bf4\u660e\uff0c\u5269\u4e0b\u7684\u51e0\u7ae0\u4e3a\u6bcf\u4e00\u4e2a\u63a5\u53e3\u7684\u8bf4\u660e\uff0c\u53ef\u4ee5\u7c97\u7565\u901a\u8bfb\uff0c\u7136\u540e\u4f5c\u4e3a\u5de5\u5177\u4e66\u4f7f\u7528\u3002 \u21a9","title":"\u53c2\u8003\u8d44\u6599"},{"location":"riscv/pma.html","text":"PMA \u00b6 \u672c\u6587\u6765\u4e00\u8d77\u4e86\u89e3\u4e00\u4e0bRISCV\u7684PMA(Physical Memory Attributes)\u8bbe\u8ba1\u3002\u4e3b\u8981\u662f\u57fa\u4e8eriscv-privilege 1.12\u7248\u672c\u5176\u4e2d\u76843.6\u7ae0\u8282\uff0c\u5bf9PMA\u505a\u4e00\u4e2a\u63cf\u8ff0\uff0c\u5206\u6790\u6e05\u695a\u5b83\u7684\u8bbe\u8ba1\u76ee\u7684\u548c\u5b9e\u73b0\u65b9\u6cd5 \u80cc\u666f \u00b6 PMA\u9488\u5bf9\u7684\u662f\u5305\u542b\u4e0d\u540c\u5730\u5740\u8303\u56f4\u7684\u5b8c\u6574\u7684\u7cfb\u7edf\uff0c\u8fd9\u4e9b\u5730\u5740\u8303\u56f4\uff0c\u4e00\u4e9b\u5bf9\u5e94\u5230\u5185\u5b58\u533a\u57df\uff0c\u4e00\u4e9b\u6620\u5c04\u5230\u4e86\u63a7\u5236\u5bc4\u5b58\u5668\uff0c\u8fd8\u6709\u4e00\u4e9b\u662f\u4fdd\u7559\u533a\u57df\u3002\u67d0\u4e9b\u5730\u5740\u8303\u56f4\u4e0d\u652f\u6301\u8bfb\uff0c\u5199\u6216\u8005\u6267\u884c\u3002\u4e00\u4e9b\u6216\u8bb8\u4e0d\u652f\u6301\u5b50\u5b57\u6216\u8005\u5b50\u5757\u8bbf\u95ee\uff0c\u4e00\u4e9b\u6216\u8bb8\u4e0d\u652f\u6301\u539f\u5b50\u64cd\u4f5c\uff0c\u4e00\u4e9b\u6216\u8bb8\u4e0d\u652f\u6301cache\u4e00\u81f4\u6027\u6216\u8005\u6709\u4e0d\u540c\u7684\u5185\u5b58\u6a21\u578b\u3002\u540c\u6837\u7684\uff0c\u5185\u5b58\u6620\u5c04\u63a7\u5236\u5bc4\u5b58\u5668\u5728\u652f\u6301\u7684\u8bbf\u5b58\u5bbd\u5ea6\uff0c\u652f\u6301\u539f\u5b50\u64cd\u4f5c\uff0c\u4ee5\u53ca\u8bfb\u6216\u8005\u5199\u64cd\u4f5c\u662f\u5426\u4f1a\u5e26\u6765\u4e00\u4e9b\u5f71\u54cd\u7b49\u65b9\u9762\u5404\u4e0d\u76f8\u540c\u3002\u56e0\u6b64RISCV\u5f15\u5165\u4e86PMA \u4ec0\u4e48\u662fPMA \u00b6 \u4e0b\u8ff0\u662f\u57fa\u4e8espec\u7684\u76f4\u8bd1\uff0c\u6709\u4e9b\u63cf\u8ff0\u4e4d\u770b\u633a\u96be\u7406\u89e3\u5b83\u5728\u8bf4\u4ec0\u4e48\uff0c\u6240\u4ee5\u6211\u5728\u5176\u4e2d\u52a0\u4e86\u4e2a\u4eba\u7406\u89e3\u7684\u811a\u6ce8\uff0c\u6709\u4e9b\u91cc\u7406\u89e3\u6216\u8bb8\u4f1a\u6709\u5f88\u5927\u504f\u5dee\uff0c\u540e\u7eed\u5e94\u8be5\u4f1a\u6709\u673a\u4f1a\u518d\u6539\u8fdb\u3002 PMA\u662f\u57fa\u7840\u786c\u4ef6\u7684\u56fa\u6709\u7684\u5c5e\u6027\uff0c\u4e00\u65e6SOC\u786e\u5b9a\u4e86\uff0c\u5730\u5740\u7a7a\u95f4\u4e5f\u5c31\u5212\u5206\u597d\u4e86\uff0c\u90a3\u4e48\u4e0d\u540c\u7684\u5730\u5740\u7a7a\u95f4\u7684\u5c5e\u6027\u4e5f\u5c31\u786e\u5b9a\u4e86\uff0c\u56e0\u6b64\u5728\u7cfb\u7edf\u8fd0\u884c\u671f\u95f4\u5f88\u5c11\u4fee\u6539PMA\u3002\u8fd9\u4e5f\u662fPMA\u548cPMP\u7684\u533a\u522b\uff0c\u5b83\u4e0d\u4f1a\u56e0\u4e3a\u6267\u884c\u4e0a\u4e0b\u6587\u4e0d\u540c\u800c\u4e0d\u540c\u3002 1 \u67d0\u4e9b\u5730\u5740\u7a7a\u95f4\u7684PMA\u5728\u82af\u7247\u8bbe\u8ba1\u65f6\u5c31\u56fa\u5b9a\u4e86\uff0c\u6bd4\u5982\u7247\u4e0aROM\u3002\u5176\u4ed6\u7684\u5730\u5740\u7a7a\u95f4\u5728\u6574\u677f\u65b9\u6848\u786e\u5b9a\u65f6\u624d\u80fd\u786e\u8ba4\uff0c\u6bd4\u5982\u5176\u4ed6\u82af\u7247\u8fde\u63a5\u5230\u7247\u5916\u603b\u7ebf\uff0c\u75281G\u5185\u5b58\u548c2G\u5185\u5b58\uff0cPMA\u7684\u914d\u7f6e\u662f\u4e0d\u540c\u7684\u3002\u5f53\u7136\uff0c\u4e5f\u5e76\u4e0d\u662f\u8bf4PMA\u5c31\u4e0d\u80fd\u5728\u8fd0\u884c\u65f6\u4fee\u6539\uff0c\u4e00\u4e9b\u8bbe\u5907\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u4fee\u6539\uff0c\u4ee5\u8fbe\u5230\u4e0d\u540c\u7528\u6237\u4f7f\u7528\u4e0d\u540cPMA\u914d\u7f6e\u7684\u76ee\u7684\u3002\u6bd4\u5982\u4e00\u4e2aSRAM,\u53ef\u4ee5\u5728\u4e00\u4e2a\u5e94\u7528\u4e2d\u88ab\u4e00\u4e2a\u6838\u79c1\u6709\u5e76\u7ecf\u8fc7cache\uff0c\u4e5f\u53ef\u4ee5\u5728\u53e6\u4e00\u4e2a\u5e94\u7528\u4e2d\u5171\u4eab\u5e76\u4e0d\u7ecf\u8fc7cache \u5927\u591a\u6570\u7cfb\u7edf\u5c06\u8981\u6c42\u5728\u6267\u884c\u7684\u6d41\u6c34\u4e2d\u5f53\u77e5\u9053\u7269\u7406\u5730\u5740\u540e\uff0c\u81f3\u5c11\u6709\u4e00\u4e9bPMA\u662f\u52a8\u6001\u68c0\u67e5\u7684\uff0c\u56e0\u4e3a\u5728\u6574\u4e2a\u7269\u7406\u5185\u5b58\u7a7a\u95f4\u4e2d\uff0c\u53ef\u80fd\u4e0d\u652f\u6301\u67d0\u4e9b\u64cd\u4f5c\uff0c\u6709\u4e9b\u64cd\u4f5c\u53ef\u80fd\u9700\u8981\u77e5\u9053\u5f53\u524dPMA\u914d\u7f6e\u3002\u8bb8\u591a\u5176\u4ed6\u7684\u67b6\u6784\u7684PMA\u53ef\u4ee5\u5728\u865a\u62df\u5730\u5740\u4e2d\u5de5\u4f5c\u3002\u901a\u8fc7TLB\u53bb\u544a\u8bc9\u6d41\u6c34\u7ebf\u8fd9\u4e9b\u5c5e\u6027\u3002\u8fd9\u79cd\u5b9e\u73b0\u6ce8\u5b9a\u4f1a\u628a\u5e73\u53f0\u5b9a\u5236\u5316\u4fe1\u606f\u4f20\u9012\u5230\u865a\u62df\u5c42\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7cfb\u7edf\u9519\u8bef\uff0c\u9664\u975e\u5728\u6bcf\u4e2a\u9875\u8868\u9879\u4e2d\u4e3a\u6bcf\u4e2a\u7269\u7406\u5185\u5b58\u533a\u57df\u6b63\u786e\u521d\u59cb\u5316\u5c5e\u6027\u3002\u53e6\u5916\uff0c\u5bf9\u4e8e\u5728\u7269\u7406\u5185\u5b58\u7a7a\u95f4\u4e2d\u6307\u5b9a\u5c5e\u6027\u800c\u8a00\uff0c\u53ef\u7528\u7684\u9875\u9762\u5927\u5c0f\u53ef\u80fd\u4e0d\u662f\u6700\u4f73\u7684\uff0c\u4ece\u800c\u5bfc\u81f4\u5730\u5740\u7a7a\u95f4\u788e\u7247\u5316\u548c\u5bf9\u6602\u8d35\u7684TLB\u6761\u76ee\u7684\u4f4e\u6548\u4f7f\u7528\u3002 RISCV\u628aPMA\u653e\u5230\u4e86\u4e00\u4e2a\u72ec\u7acb\u7684\u5355\u5143\u4e2d\uff0c\u53eb\u505aPMA Checker\u3002\u5728\u8bb8\u591a\u573a\u666f\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u7269\u7406\u5730\u5740\u533a\u57df\u7684\u5c5e\u6027\u5728\u7cfb\u7edf\u8bbe\u8ba1\u9636\u6bb5\u5c31\u77e5\u9053\u4e86\uff0c\u8fd9\u6837\u5c31\u53ef\u80fd\u56fa\u5316\u5230PMA Checker\u4e2d\u3002\u5982\u679c\u5c5e\u6027\u662f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u914d\u7f6e\u7684\uff0c\u90a3\u4e48\u53ef\u4ee5\u63d0\u4f9b\u5e73\u53f0\u5b9a\u5236\u7684\u5185\u5b58\u6620\u5c04\u63a7\u5236\u5bc4\u5b58\u5668\uff0c\u8fd9\u6837\u5c31\u80fd\u4ee5\u4e00\u4e2a\u5408\u9002\u7684\u7c92\u5ea6\u6307\u5b9a\u5e73\u53f0\u7684\u6bcf\u4e00\u4e2a\u533a\u57df\u7684\u5c5e\u6027\u3002(\u4e3e\u4f8b\uff0c\u4e00\u4e2a\u7247\u4e0aSRAM,\u53ef\u4ee5\u88ab\u7075\u6d3b\u7684\u5206\u6210\u8fc7cache\u548c\u4e0d\u8fc7cache\u7684\u533a\u57df) 2 PMA\u68c0\u67e5\u4efb\u4f55\u5bf9\u4e8e\u7269\u7406\u5185\u5b58\u7684\u8bbf\u5b58\uff0c\u4e5f\u5305\u62ec\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\u8f6c\u6362\u8fc7\u7a0b\u4e2d\u7684\u8bbf\u5b58\u3002\u4e3a\u4e86\u534f\u52a9\u7cfb\u7edf\u8c03\u8bd5\uff0c\u5f3a\u70c8\u5efa\u8bae\uff0c\u53ef\u80fd\u7684\u8bdd\uff0c\u5904\u7406\u5668\u80fd\u7cbe\u786e\u7684\u6355\u83b7PMA\u68c0\u67e5\u5931\u8d25\u7684\u7269\u7406\u5185\u5b58\u8bbf\u95ee\u3002\u5f53\u6307\u4ee4\uff0cload, store \u53d1\u751faccess-fault\u5f02\u5e38\u65f6\uff0c\u7cbe\u786e\u7684\u89e6\u53d1PMA\u8fdd\u89c4\u6e05\u5355\uff0c\u8fd9\u533a\u522b\u4e8e\u865a\u62df\u5185\u5b58page-fault \u5f02\u5e38\u3002\u7cbe\u786e\u7684PMA\u5f02\u5e38\u53ef\u80fd\u4e0d\u4f1a\u603b\u662f\u53ef\u7528\uff0c\u4f8b\u5982\uff0c\u5c06access-fault\u4f5c\u4e3a\u53d1\u73b0\u673a\u5236\u7684\u4e00\u90e8\u5206\u7684\u4f20\u7edf\u603b\u7ebf\u67b6\u6784\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u4ece\u8bbe\u5907\u7684\u9519\u8bef\u8fd4\u56de\u5c06\u4f1a\u4ee5\u4e0d\u7cbe\u786e\u7684bus-error\u4e2d\u65ad\u6765\u8fdb\u884c\u4e0a\u62a5\u3002 3 PMA\u4e00\u5b9a\u662f\u8f6f\u4ef6\u53ef\u4ee5\u8bbf\u95ee\u7684\uff0c\u8fd9\u6837\u8f6f\u4ef6\u624d\u80fd\u6b63\u786e\u7684\u8bbf\u95ee\u67d0\u4e2a\u8bbe\u5907\u6216\u8005\u6b63\u786e\u7684\u914d\u7f6e\u5176\u4ed6\u786c\u4ef6\u7ec4\u4ef6\u53bb\u8bbf\u95ee\u5185\u5b58\uff0c\u6bd4\u5982\u8bf4DMA\u63a7\u5236\u5668\u3002\u5f53\u7136PMA\u4e0e\u7ed9\u5b9a\u7684\u7269\u7406\u5e73\u53f0\u7ed3\u6784\u7d27\u7d27\u7684\u7ed1\u5b9a\uff0c\u5f88\u591a\u7ec6\u8282\u662f\u5e73\u53f0\u7279\u6709\u7684\uff0c\u56e0\u6b64\u8f6f\u4ef6\u53ef\u4ee5\u5b66\u4e60PMA\u503c\u4f5c\u4e3a\u4e00\u4e2a\u5e73\u53f0\u3002\u67d0\u4e9b\u5916\u8bbe\uff0c\u7279\u522b\u662f\u4f20\u7edf\u603b\u7ebf\uff0c\u4e0d\u652f\u6301PMA\u53d1\u73b0\uff0c\u5982\u679c\u5c1d\u8bd5\u53d1\u51fa\u4e00\u4e2a\u4e0d\u652f\u6301\u7684\u8bbf\u95ee\uff0c\u5c06\u4f1a\u7ed9\u51fa\u9519\u8bef\u54cd\u5e94\u6216\u8005\u8d85\u65f6\u3002\u5178\u578b\u7684\uff0c\u5e73\u53f0\u7279\u6709\u7684\u673a\u5668\u6a21\u5f0f\u4ee3\u7801\u5c06\u4f1a\u63d0\u53d6PMA\u5e76\u4e14\u7acb\u5373\u628a\u8fd9\u4e2a\u4fe1\u606f\u901a\u8fc7\u4e00\u4e9b\u6807\u51c6\u5b9e\u73b0\u53d1\u9001\u7ed9\u66f4\u9ad8\u5c42\u6b21\u4f4e\u7279\u6743\u7684\u8f6f\u4ef6\u3002 \u5f53\u5e73\u53f0\u652f\u6301\u52a8\u6001\u53ef\u518d\u914d\u7f6ePMA\u65f6\uff0c\u5c06\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u63a5\u53e3\uff0c\u901a\u8fc7\u7ed9\u4e00\u4e2a\u80fd\u6b63\u786e\u518d\u914d\u7f6e\u5e73\u53f0\u7684\u673a\u5668\u6a21\u5f0f\u9a71\u52a8\u53d1\u9001\u8bf7\u6c42\u53bb\u8bbe\u7f6e\u5c5e\u6027\u3002\u4f8b\u5982\uff0c\u5728\u4e00\u4e9b\u5185\u5b58\u533a\u57df\u5207\u6362cacheability\u5c5e\u6027\u4f1a\u5f15\u5165\u5e73\u53f0\u7279\u6b8a\u7684\u64cd\u4f5c\uff0c\u50cfcache flush\uff0c \u53ea\u6709\u5728\u673a\u5668\u6a21\u5f0f\u4e0b\u624d\u80fd\u64cd\u4f5c\u3002 4 \u533a\u57df\u7684\u5212\u5206 \u00b6 \u5185\u5b58\u7a7a\u95f4\u5212\u5206\u4e3a**\u4e3b\u5185\u5b58\u533a\u57df**\uff0c IO\u533a\u57df**\u548c**\u7a7a\u95f2\u533a\u57df \u3002\u4e3b\u5185\u5b58\u533a\u57df\u9700\u8981\u6709\u4e00\u4e9b\u5c5e\u6027\uff0cIO\u8bbe\u5907\u6709\u66f4\u5bbd\u6cdb\u7684\u5c5e\u6027\u8303\u56f4\u3002\u90a3\u4e9b\u4e0d\u662f\u901a\u5e38\u610f\u4e49\u7684\u4e3b\u5185\u5b58\u7684\u5185\u5b58\u533a\u57df\uff0c\u6bd4\u5982\u8bbe\u5907RAM\uff0c\u4e5f\u88ab\u5212\u5206\u4e3aIO\u533a\u57df\u3002\u7a7a\u95f2\u533a\u57df\u4e5f\u88ab\u5212\u5206\u4e3aIO\u533a\u57df\uff0c\u4f46\u643a\u5e26\u4e0d\u80fd\u8bbf\u95ee\u7684\u5c5e\u6027\u3002 PMA\u652f\u6301\u7684\u8bbf\u95ee\u7c7b\u578b \u00b6 \u8bbf\u95ee\u7c7b\u578b\u5305\u542b\u8bbf\u5b58\u5bbd\u5ea6\uff0c\u4ece8-bit\u5230long multi-word burst, \u90fd\u652f\u6301\u3002\u4e5f\u652f\u6301\u6bcf\u79cd\u5bbd\u5ea6\u4e0b\u7684\u5bf9\u9f50\u548c\u975e\u5bf9\u9f50\u8bbf\u95ee\u3002\u4e3b\u5b58\u50a8\u5668\u533a\u57df\u59cb\u7ec8\u652f\u6301\u5bf9\u6240\u8fde\u63a5\u8bbe\u5907\u6240\u9700\u7684\u6240\u6709\u8bbf\u95ee\u5bbd\u5ea6\u7684\u8bfb\u53d6\u548c\u5199\u5165\uff0c\u5e76\u4e14\u53ef\u4ee5\u6307\u5b9a\u662f\u5426\u652f\u6301\u6307\u4ee4\u63d0\u53d6\u3002 I/O \u533a\u57df\u53ef\u4ee5\u9488\u5bf9\u7279\u5b9a\u6570\u636e\u5bbd\u5ea6\uff0c\u8fdb\u884c\u8bfb\u3001\u5199\u3001\u6267\u884caccess\u7684\u7ec4\u5408\u914d\u7f6e\u3002\u57fa\u4e8e\u9875\u7684\u865a\u62df\u5185\u5b58\uff0cIO\u4ee5\u53ca\u5185\u5b58\u533a\u57df\u7684\u7cfb\u7edf\uff0c\u53ef\u4ee5\u6307\u5b9a\u67d0\u4e2a\u9875\u8868\u7684\u8bfb\u6216\u8005\u5199\u7684\u7ec4\u5408\u3002 atomic PMA \u00b6 atomic PMAs \u63cf\u8ff0\u7684\u662f\u5728\u8fd9\u4e2a\u5730\u5740\u533a\u57df\u652f\u6301\u54ea\u4e2a\u539f\u5b50\u6307\u4ee4\u3002\u5bf9\u539f\u5b50\u6307\u4ee4\u7684\u652f\u6301\u88ab\u5212\u5206\u4e3a\u4e24\u7c7b\uff0cLR/SC\u548cAMO\u5185\u5b58\u6307\u4ee4 AMO PMA \u00b6 AMO PMA\u5206\u4e86\u56db\u4e2a\u7b49\u7ea7 \u7b49\u7ea7 \u652f\u6301\u7684\u64cd\u4f5c AMONone None \u4e0d\u652f\u6301\u4efb\u4f55AMO\u6307\u4ee4 AMOSwap \u4ec5\u652f\u6301amoswap AMOLogical \u652f\u6301 above + amoand, amoor, amoxor AMOArithmetic \u652f\u6301above + amoadd, amomin, amomax, amominu, amomaxu \u5bf9\u6bcf\u4e00\u4e2a\u652f\u6301\u7684\u7b49\u7ea7\uff0c\u5982\u679c\u5185\u5b58\u533a\u57df\u652f\u6301\u4e00\u4e2a\u7ed9\u5b9a\u5bbd\u5ea6\u7684\u8bfb\u548c\u5199\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u7ed9\u5b9a\u5bbd\u5ea6\u7684\u5bf9\u9f50\u7684AMO\u6307\u4ee4\u662f\u652f\u6301\u7684\u3002\u4e3b\u5185\u5b58\u548cIO\u533a\u57df\u53ef\u80fd\u53ea\u652f\u6301\u4e00\u4e2a\u5b50\u96c6\u6216\u8005\u4e0d\u652f\u6301\u539f\u5b50\u64cd\u4f5c\u3002 AMOLogical support for I/O regions where possible LR/SC\u539f\u5b50\u64cd\u4f5c \u00b6 LR/SC\u5206\u4e86\u4e09\u4e2a\u7b49\u7ea7 \u7b49\u7ea7 \u8bf4\u660e RsrvNone \u4e0d\u652f\u6301LR/SC\u6307\u4ee4 RsrvNonEventual \u652f\u6301LR/SC\u64cd\u4f5c\uff0c\u4f46\u662f\u7f3a\u5c11\u7279\u6743\u6307\u4ee4\u6587\u6863\u4e2d\u63cf\u8ff0\u7684\u6700\u7ec8\u6210\u529f\u4fdd\u8bc1 RsrvEventual \u652f\u6301LR/SC\u64cd\u4f5c\uff0c\u5e76\u4e14\u63d0\u4f9b\u6700\u7ec8\u6210\u529f\u4fdd\u8bc1 \u5efa\u8bae\u5bf9\u4e3b\u5185\u5b58\u533a\u57df\u652f\u6301RsrvEventual\uff0c\u5927\u591a\u6570IO\u533a\u57df\u4e0d\u652f\u6301LR/SC\u8bbf\u95ee\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u6784\u5efa\u5728cache\u4e00\u81f4\u6027\u7b56\u7565\u7684\u4e0a\u5c42\u6700\u65b9\u4fbf\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u652f\u6301RsrvNonEventual\u6216RsrvEventual\u3002 \u5f53\u5185\u5b58\u533a\u57df\u7684LR/SC\u6807\u8bb0\u4e3aRsrvNonEventual\uff0c \u8f6f\u4ef6\u5e94\u8be5\u63d0\u4f9b\u989d\u5916\u7684\u9519\u8bef\u8fd4\u56de\u673a\u5236\u3002 \u5bf9\u9f50 \u00b6 \u603b\u7ed3 \u00b6 spec\u4e2d\u6ca1\u6709\u5bf9PMA\u8fdb\u884c\u5177\u4f53\u7684\u8bbe\u5b9a\uff0c\u751a\u81f3\u6ca1\u6709\u5bc4\u5b58\u5668\uff0c\u662f\u56e0\u4e3a\u5b83\u4e0e\u6574\u4f53\u8bbe\u8ba1\u7d27\u5bc6\u7ed1\u5b9a\uff0c\u5f88\u96be\u7edf\u4e00\u5417\uff1f\u6240\u8c13\u7684PMA Checker\u5230\u5e95\u8981\u5982\u4f55\u5b9e\u73b0\uff1f PMA\u66f4\u591a\u7684\u662f\u9488\u5bf9\u786c\u4ef6\u7ed3\u6784\uff0c\u4e00\u822c\u4e0d\u9700\u8981\u52a8\u6001\u4fee\u6539PMA\uff0c\u4f46\u53ef\u4ee5\u505a\u6210\u80fd\u591f\u52a8\u6001\u6539\u3002 \u21a9 \u4e5f\u5c31\u662f\u8bf4RISCV\u7684PMA\u548c\u5176\u4ed6\u67b6\u6784\u7684\u4e0d\u592a\u4e00\u6837\uff0c\u5f88\u591a\u5176\u4ed6\u67b6\u6784\u7684PMA\u90fd\u53ef\u4ee5\u7ba1\u7406\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0cRISCV\u7684\u8bbe\u8ba1\u8005\u8ba4\u4e3a\u8fd9\u6837\u5f15\u5165\u4e86\u4e0d\u5fc5\u8981\u7684\u9ebb\u70e6\uff0c\u5e76\u4e14\u5b83\u5c06PMA\u96c6\u6210\u5230\u4e86\u4e00\u4e2a\u53eb\u505aPMAChecker\u7684\u72ec\u7acb\u5355\u5143\u4e2d \u21a9 \u8fd9\u91cc\u8bb2\u7684\u662f\u5efa\u8bae\u80fd\u591f\u7cbe\u786e\u7684\u6355\u83b7PMA\u89e6\u53d1\u7684\u5f02\u5e38\uff0c\u5982\u679c\u901a\u8fc7\u603b\u7ebf\u4e2d\u65ad\u7684\u65b9\u5f0f\u6765\u4e0a\u62a5\uff0c\u5c31\u4e0d\u7cbe\u786e\u4e86\uff0c\u4f46\u6709\u4e9b\u65f6\u5019\u4e5f\u8feb\u4e0d\u5f97\u5df2\uff0c\u8fd9\u91cc\u6240\u8c13\u7684**discovery mechanism**\u662f\u4ec0\u4e48\u610f\u601d\u3002 \u21a9 \u8fd9\u4e00\u6bb5\u662f\u6bd4\u8f83\u522b\u626d\u7684\uff0c\u6211\u8ba4\u4e3a\uff0c\u8bbe\u8ba1\u8005\u60f3\u8868\u8fbe\u7684\u662f\uff0c\u8f6f\u4ef6\u8981\u628aPMA\u505a\u6210\u6a21\u5757\u5316\uff0c\u800c\u4e14\u8981\u505a\u5230\u7279\u6743\u6a21\u5f0f\u4e2d\uff0c\u5e94\u7528\u5c42\u901a\u8fc7\u63d0\u4f9b\u7684\u63a5\u53e3\u6765\u5bf9PMA\u5bc4\u5b58\u5668\u8fdb\u884c\u8bfb\u5199\uff0c\u653e\u5230\u7279\u6743\u6a21\u5f0f\u4e2d\u662f\u56e0\u4e3a\u6709\u4e9b\u64cd\u4f5c\u5fc5\u987b\u5728\u7279\u6743\u6a21\u5f0f\u4e0b\u6267\u884c \u21a9","title":"PMA"},{"location":"riscv/pma.html#pma","text":"\u672c\u6587\u6765\u4e00\u8d77\u4e86\u89e3\u4e00\u4e0bRISCV\u7684PMA(Physical Memory Attributes)\u8bbe\u8ba1\u3002\u4e3b\u8981\u662f\u57fa\u4e8eriscv-privilege 1.12\u7248\u672c\u5176\u4e2d\u76843.6\u7ae0\u8282\uff0c\u5bf9PMA\u505a\u4e00\u4e2a\u63cf\u8ff0\uff0c\u5206\u6790\u6e05\u695a\u5b83\u7684\u8bbe\u8ba1\u76ee\u7684\u548c\u5b9e\u73b0\u65b9\u6cd5","title":"PMA"},{"location":"riscv/pma.html#_1","text":"PMA\u9488\u5bf9\u7684\u662f\u5305\u542b\u4e0d\u540c\u5730\u5740\u8303\u56f4\u7684\u5b8c\u6574\u7684\u7cfb\u7edf\uff0c\u8fd9\u4e9b\u5730\u5740\u8303\u56f4\uff0c\u4e00\u4e9b\u5bf9\u5e94\u5230\u5185\u5b58\u533a\u57df\uff0c\u4e00\u4e9b\u6620\u5c04\u5230\u4e86\u63a7\u5236\u5bc4\u5b58\u5668\uff0c\u8fd8\u6709\u4e00\u4e9b\u662f\u4fdd\u7559\u533a\u57df\u3002\u67d0\u4e9b\u5730\u5740\u8303\u56f4\u4e0d\u652f\u6301\u8bfb\uff0c\u5199\u6216\u8005\u6267\u884c\u3002\u4e00\u4e9b\u6216\u8bb8\u4e0d\u652f\u6301\u5b50\u5b57\u6216\u8005\u5b50\u5757\u8bbf\u95ee\uff0c\u4e00\u4e9b\u6216\u8bb8\u4e0d\u652f\u6301\u539f\u5b50\u64cd\u4f5c\uff0c\u4e00\u4e9b\u6216\u8bb8\u4e0d\u652f\u6301cache\u4e00\u81f4\u6027\u6216\u8005\u6709\u4e0d\u540c\u7684\u5185\u5b58\u6a21\u578b\u3002\u540c\u6837\u7684\uff0c\u5185\u5b58\u6620\u5c04\u63a7\u5236\u5bc4\u5b58\u5668\u5728\u652f\u6301\u7684\u8bbf\u5b58\u5bbd\u5ea6\uff0c\u652f\u6301\u539f\u5b50\u64cd\u4f5c\uff0c\u4ee5\u53ca\u8bfb\u6216\u8005\u5199\u64cd\u4f5c\u662f\u5426\u4f1a\u5e26\u6765\u4e00\u4e9b\u5f71\u54cd\u7b49\u65b9\u9762\u5404\u4e0d\u76f8\u540c\u3002\u56e0\u6b64RISCV\u5f15\u5165\u4e86PMA","title":"\u80cc\u666f"},{"location":"riscv/pma.html#pma_1","text":"\u4e0b\u8ff0\u662f\u57fa\u4e8espec\u7684\u76f4\u8bd1\uff0c\u6709\u4e9b\u63cf\u8ff0\u4e4d\u770b\u633a\u96be\u7406\u89e3\u5b83\u5728\u8bf4\u4ec0\u4e48\uff0c\u6240\u4ee5\u6211\u5728\u5176\u4e2d\u52a0\u4e86\u4e2a\u4eba\u7406\u89e3\u7684\u811a\u6ce8\uff0c\u6709\u4e9b\u91cc\u7406\u89e3\u6216\u8bb8\u4f1a\u6709\u5f88\u5927\u504f\u5dee\uff0c\u540e\u7eed\u5e94\u8be5\u4f1a\u6709\u673a\u4f1a\u518d\u6539\u8fdb\u3002 PMA\u662f\u57fa\u7840\u786c\u4ef6\u7684\u56fa\u6709\u7684\u5c5e\u6027\uff0c\u4e00\u65e6SOC\u786e\u5b9a\u4e86\uff0c\u5730\u5740\u7a7a\u95f4\u4e5f\u5c31\u5212\u5206\u597d\u4e86\uff0c\u90a3\u4e48\u4e0d\u540c\u7684\u5730\u5740\u7a7a\u95f4\u7684\u5c5e\u6027\u4e5f\u5c31\u786e\u5b9a\u4e86\uff0c\u56e0\u6b64\u5728\u7cfb\u7edf\u8fd0\u884c\u671f\u95f4\u5f88\u5c11\u4fee\u6539PMA\u3002\u8fd9\u4e5f\u662fPMA\u548cPMP\u7684\u533a\u522b\uff0c\u5b83\u4e0d\u4f1a\u56e0\u4e3a\u6267\u884c\u4e0a\u4e0b\u6587\u4e0d\u540c\u800c\u4e0d\u540c\u3002 1 \u67d0\u4e9b\u5730\u5740\u7a7a\u95f4\u7684PMA\u5728\u82af\u7247\u8bbe\u8ba1\u65f6\u5c31\u56fa\u5b9a\u4e86\uff0c\u6bd4\u5982\u7247\u4e0aROM\u3002\u5176\u4ed6\u7684\u5730\u5740\u7a7a\u95f4\u5728\u6574\u677f\u65b9\u6848\u786e\u5b9a\u65f6\u624d\u80fd\u786e\u8ba4\uff0c\u6bd4\u5982\u5176\u4ed6\u82af\u7247\u8fde\u63a5\u5230\u7247\u5916\u603b\u7ebf\uff0c\u75281G\u5185\u5b58\u548c2G\u5185\u5b58\uff0cPMA\u7684\u914d\u7f6e\u662f\u4e0d\u540c\u7684\u3002\u5f53\u7136\uff0c\u4e5f\u5e76\u4e0d\u662f\u8bf4PMA\u5c31\u4e0d\u80fd\u5728\u8fd0\u884c\u65f6\u4fee\u6539\uff0c\u4e00\u4e9b\u8bbe\u5907\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u4fee\u6539\uff0c\u4ee5\u8fbe\u5230\u4e0d\u540c\u7528\u6237\u4f7f\u7528\u4e0d\u540cPMA\u914d\u7f6e\u7684\u76ee\u7684\u3002\u6bd4\u5982\u4e00\u4e2aSRAM,\u53ef\u4ee5\u5728\u4e00\u4e2a\u5e94\u7528\u4e2d\u88ab\u4e00\u4e2a\u6838\u79c1\u6709\u5e76\u7ecf\u8fc7cache\uff0c\u4e5f\u53ef\u4ee5\u5728\u53e6\u4e00\u4e2a\u5e94\u7528\u4e2d\u5171\u4eab\u5e76\u4e0d\u7ecf\u8fc7cache \u5927\u591a\u6570\u7cfb\u7edf\u5c06\u8981\u6c42\u5728\u6267\u884c\u7684\u6d41\u6c34\u4e2d\u5f53\u77e5\u9053\u7269\u7406\u5730\u5740\u540e\uff0c\u81f3\u5c11\u6709\u4e00\u4e9bPMA\u662f\u52a8\u6001\u68c0\u67e5\u7684\uff0c\u56e0\u4e3a\u5728\u6574\u4e2a\u7269\u7406\u5185\u5b58\u7a7a\u95f4\u4e2d\uff0c\u53ef\u80fd\u4e0d\u652f\u6301\u67d0\u4e9b\u64cd\u4f5c\uff0c\u6709\u4e9b\u64cd\u4f5c\u53ef\u80fd\u9700\u8981\u77e5\u9053\u5f53\u524dPMA\u914d\u7f6e\u3002\u8bb8\u591a\u5176\u4ed6\u7684\u67b6\u6784\u7684PMA\u53ef\u4ee5\u5728\u865a\u62df\u5730\u5740\u4e2d\u5de5\u4f5c\u3002\u901a\u8fc7TLB\u53bb\u544a\u8bc9\u6d41\u6c34\u7ebf\u8fd9\u4e9b\u5c5e\u6027\u3002\u8fd9\u79cd\u5b9e\u73b0\u6ce8\u5b9a\u4f1a\u628a\u5e73\u53f0\u5b9a\u5236\u5316\u4fe1\u606f\u4f20\u9012\u5230\u865a\u62df\u5c42\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7cfb\u7edf\u9519\u8bef\uff0c\u9664\u975e\u5728\u6bcf\u4e2a\u9875\u8868\u9879\u4e2d\u4e3a\u6bcf\u4e2a\u7269\u7406\u5185\u5b58\u533a\u57df\u6b63\u786e\u521d\u59cb\u5316\u5c5e\u6027\u3002\u53e6\u5916\uff0c\u5bf9\u4e8e\u5728\u7269\u7406\u5185\u5b58\u7a7a\u95f4\u4e2d\u6307\u5b9a\u5c5e\u6027\u800c\u8a00\uff0c\u53ef\u7528\u7684\u9875\u9762\u5927\u5c0f\u53ef\u80fd\u4e0d\u662f\u6700\u4f73\u7684\uff0c\u4ece\u800c\u5bfc\u81f4\u5730\u5740\u7a7a\u95f4\u788e\u7247\u5316\u548c\u5bf9\u6602\u8d35\u7684TLB\u6761\u76ee\u7684\u4f4e\u6548\u4f7f\u7528\u3002 RISCV\u628aPMA\u653e\u5230\u4e86\u4e00\u4e2a\u72ec\u7acb\u7684\u5355\u5143\u4e2d\uff0c\u53eb\u505aPMA Checker\u3002\u5728\u8bb8\u591a\u573a\u666f\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u7269\u7406\u5730\u5740\u533a\u57df\u7684\u5c5e\u6027\u5728\u7cfb\u7edf\u8bbe\u8ba1\u9636\u6bb5\u5c31\u77e5\u9053\u4e86\uff0c\u8fd9\u6837\u5c31\u53ef\u80fd\u56fa\u5316\u5230PMA Checker\u4e2d\u3002\u5982\u679c\u5c5e\u6027\u662f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u914d\u7f6e\u7684\uff0c\u90a3\u4e48\u53ef\u4ee5\u63d0\u4f9b\u5e73\u53f0\u5b9a\u5236\u7684\u5185\u5b58\u6620\u5c04\u63a7\u5236\u5bc4\u5b58\u5668\uff0c\u8fd9\u6837\u5c31\u80fd\u4ee5\u4e00\u4e2a\u5408\u9002\u7684\u7c92\u5ea6\u6307\u5b9a\u5e73\u53f0\u7684\u6bcf\u4e00\u4e2a\u533a\u57df\u7684\u5c5e\u6027\u3002(\u4e3e\u4f8b\uff0c\u4e00\u4e2a\u7247\u4e0aSRAM,\u53ef\u4ee5\u88ab\u7075\u6d3b\u7684\u5206\u6210\u8fc7cache\u548c\u4e0d\u8fc7cache\u7684\u533a\u57df) 2 PMA\u68c0\u67e5\u4efb\u4f55\u5bf9\u4e8e\u7269\u7406\u5185\u5b58\u7684\u8bbf\u5b58\uff0c\u4e5f\u5305\u62ec\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\u8f6c\u6362\u8fc7\u7a0b\u4e2d\u7684\u8bbf\u5b58\u3002\u4e3a\u4e86\u534f\u52a9\u7cfb\u7edf\u8c03\u8bd5\uff0c\u5f3a\u70c8\u5efa\u8bae\uff0c\u53ef\u80fd\u7684\u8bdd\uff0c\u5904\u7406\u5668\u80fd\u7cbe\u786e\u7684\u6355\u83b7PMA\u68c0\u67e5\u5931\u8d25\u7684\u7269\u7406\u5185\u5b58\u8bbf\u95ee\u3002\u5f53\u6307\u4ee4\uff0cload, store \u53d1\u751faccess-fault\u5f02\u5e38\u65f6\uff0c\u7cbe\u786e\u7684\u89e6\u53d1PMA\u8fdd\u89c4\u6e05\u5355\uff0c\u8fd9\u533a\u522b\u4e8e\u865a\u62df\u5185\u5b58page-fault \u5f02\u5e38\u3002\u7cbe\u786e\u7684PMA\u5f02\u5e38\u53ef\u80fd\u4e0d\u4f1a\u603b\u662f\u53ef\u7528\uff0c\u4f8b\u5982\uff0c\u5c06access-fault\u4f5c\u4e3a\u53d1\u73b0\u673a\u5236\u7684\u4e00\u90e8\u5206\u7684\u4f20\u7edf\u603b\u7ebf\u67b6\u6784\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u4ece\u8bbe\u5907\u7684\u9519\u8bef\u8fd4\u56de\u5c06\u4f1a\u4ee5\u4e0d\u7cbe\u786e\u7684bus-error\u4e2d\u65ad\u6765\u8fdb\u884c\u4e0a\u62a5\u3002 3 PMA\u4e00\u5b9a\u662f\u8f6f\u4ef6\u53ef\u4ee5\u8bbf\u95ee\u7684\uff0c\u8fd9\u6837\u8f6f\u4ef6\u624d\u80fd\u6b63\u786e\u7684\u8bbf\u95ee\u67d0\u4e2a\u8bbe\u5907\u6216\u8005\u6b63\u786e\u7684\u914d\u7f6e\u5176\u4ed6\u786c\u4ef6\u7ec4\u4ef6\u53bb\u8bbf\u95ee\u5185\u5b58\uff0c\u6bd4\u5982\u8bf4DMA\u63a7\u5236\u5668\u3002\u5f53\u7136PMA\u4e0e\u7ed9\u5b9a\u7684\u7269\u7406\u5e73\u53f0\u7ed3\u6784\u7d27\u7d27\u7684\u7ed1\u5b9a\uff0c\u5f88\u591a\u7ec6\u8282\u662f\u5e73\u53f0\u7279\u6709\u7684\uff0c\u56e0\u6b64\u8f6f\u4ef6\u53ef\u4ee5\u5b66\u4e60PMA\u503c\u4f5c\u4e3a\u4e00\u4e2a\u5e73\u53f0\u3002\u67d0\u4e9b\u5916\u8bbe\uff0c\u7279\u522b\u662f\u4f20\u7edf\u603b\u7ebf\uff0c\u4e0d\u652f\u6301PMA\u53d1\u73b0\uff0c\u5982\u679c\u5c1d\u8bd5\u53d1\u51fa\u4e00\u4e2a\u4e0d\u652f\u6301\u7684\u8bbf\u95ee\uff0c\u5c06\u4f1a\u7ed9\u51fa\u9519\u8bef\u54cd\u5e94\u6216\u8005\u8d85\u65f6\u3002\u5178\u578b\u7684\uff0c\u5e73\u53f0\u7279\u6709\u7684\u673a\u5668\u6a21\u5f0f\u4ee3\u7801\u5c06\u4f1a\u63d0\u53d6PMA\u5e76\u4e14\u7acb\u5373\u628a\u8fd9\u4e2a\u4fe1\u606f\u901a\u8fc7\u4e00\u4e9b\u6807\u51c6\u5b9e\u73b0\u53d1\u9001\u7ed9\u66f4\u9ad8\u5c42\u6b21\u4f4e\u7279\u6743\u7684\u8f6f\u4ef6\u3002 \u5f53\u5e73\u53f0\u652f\u6301\u52a8\u6001\u53ef\u518d\u914d\u7f6ePMA\u65f6\uff0c\u5c06\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u63a5\u53e3\uff0c\u901a\u8fc7\u7ed9\u4e00\u4e2a\u80fd\u6b63\u786e\u518d\u914d\u7f6e\u5e73\u53f0\u7684\u673a\u5668\u6a21\u5f0f\u9a71\u52a8\u53d1\u9001\u8bf7\u6c42\u53bb\u8bbe\u7f6e\u5c5e\u6027\u3002\u4f8b\u5982\uff0c\u5728\u4e00\u4e9b\u5185\u5b58\u533a\u57df\u5207\u6362cacheability\u5c5e\u6027\u4f1a\u5f15\u5165\u5e73\u53f0\u7279\u6b8a\u7684\u64cd\u4f5c\uff0c\u50cfcache flush\uff0c \u53ea\u6709\u5728\u673a\u5668\u6a21\u5f0f\u4e0b\u624d\u80fd\u64cd\u4f5c\u3002 4","title":"\u4ec0\u4e48\u662fPMA"},{"location":"riscv/pma.html#_2","text":"\u5185\u5b58\u7a7a\u95f4\u5212\u5206\u4e3a**\u4e3b\u5185\u5b58\u533a\u57df**\uff0c IO\u533a\u57df**\u548c**\u7a7a\u95f2\u533a\u57df \u3002\u4e3b\u5185\u5b58\u533a\u57df\u9700\u8981\u6709\u4e00\u4e9b\u5c5e\u6027\uff0cIO\u8bbe\u5907\u6709\u66f4\u5bbd\u6cdb\u7684\u5c5e\u6027\u8303\u56f4\u3002\u90a3\u4e9b\u4e0d\u662f\u901a\u5e38\u610f\u4e49\u7684\u4e3b\u5185\u5b58\u7684\u5185\u5b58\u533a\u57df\uff0c\u6bd4\u5982\u8bbe\u5907RAM\uff0c\u4e5f\u88ab\u5212\u5206\u4e3aIO\u533a\u57df\u3002\u7a7a\u95f2\u533a\u57df\u4e5f\u88ab\u5212\u5206\u4e3aIO\u533a\u57df\uff0c\u4f46\u643a\u5e26\u4e0d\u80fd\u8bbf\u95ee\u7684\u5c5e\u6027\u3002","title":"\u533a\u57df\u7684\u5212\u5206"},{"location":"riscv/pma.html#pma_2","text":"\u8bbf\u95ee\u7c7b\u578b\u5305\u542b\u8bbf\u5b58\u5bbd\u5ea6\uff0c\u4ece8-bit\u5230long multi-word burst, \u90fd\u652f\u6301\u3002\u4e5f\u652f\u6301\u6bcf\u79cd\u5bbd\u5ea6\u4e0b\u7684\u5bf9\u9f50\u548c\u975e\u5bf9\u9f50\u8bbf\u95ee\u3002\u4e3b\u5b58\u50a8\u5668\u533a\u57df\u59cb\u7ec8\u652f\u6301\u5bf9\u6240\u8fde\u63a5\u8bbe\u5907\u6240\u9700\u7684\u6240\u6709\u8bbf\u95ee\u5bbd\u5ea6\u7684\u8bfb\u53d6\u548c\u5199\u5165\uff0c\u5e76\u4e14\u53ef\u4ee5\u6307\u5b9a\u662f\u5426\u652f\u6301\u6307\u4ee4\u63d0\u53d6\u3002 I/O \u533a\u57df\u53ef\u4ee5\u9488\u5bf9\u7279\u5b9a\u6570\u636e\u5bbd\u5ea6\uff0c\u8fdb\u884c\u8bfb\u3001\u5199\u3001\u6267\u884caccess\u7684\u7ec4\u5408\u914d\u7f6e\u3002\u57fa\u4e8e\u9875\u7684\u865a\u62df\u5185\u5b58\uff0cIO\u4ee5\u53ca\u5185\u5b58\u533a\u57df\u7684\u7cfb\u7edf\uff0c\u53ef\u4ee5\u6307\u5b9a\u67d0\u4e2a\u9875\u8868\u7684\u8bfb\u6216\u8005\u5199\u7684\u7ec4\u5408\u3002","title":"PMA\u652f\u6301\u7684\u8bbf\u95ee\u7c7b\u578b"},{"location":"riscv/pma.html#atomic-pma","text":"atomic PMAs \u63cf\u8ff0\u7684\u662f\u5728\u8fd9\u4e2a\u5730\u5740\u533a\u57df\u652f\u6301\u54ea\u4e2a\u539f\u5b50\u6307\u4ee4\u3002\u5bf9\u539f\u5b50\u6307\u4ee4\u7684\u652f\u6301\u88ab\u5212\u5206\u4e3a\u4e24\u7c7b\uff0cLR/SC\u548cAMO\u5185\u5b58\u6307\u4ee4","title":"atomic PMA"},{"location":"riscv/pma.html#amo-pma","text":"AMO PMA\u5206\u4e86\u56db\u4e2a\u7b49\u7ea7 \u7b49\u7ea7 \u652f\u6301\u7684\u64cd\u4f5c AMONone None \u4e0d\u652f\u6301\u4efb\u4f55AMO\u6307\u4ee4 AMOSwap \u4ec5\u652f\u6301amoswap AMOLogical \u652f\u6301 above + amoand, amoor, amoxor AMOArithmetic \u652f\u6301above + amoadd, amomin, amomax, amominu, amomaxu \u5bf9\u6bcf\u4e00\u4e2a\u652f\u6301\u7684\u7b49\u7ea7\uff0c\u5982\u679c\u5185\u5b58\u533a\u57df\u652f\u6301\u4e00\u4e2a\u7ed9\u5b9a\u5bbd\u5ea6\u7684\u8bfb\u548c\u5199\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u7ed9\u5b9a\u5bbd\u5ea6\u7684\u5bf9\u9f50\u7684AMO\u6307\u4ee4\u662f\u652f\u6301\u7684\u3002\u4e3b\u5185\u5b58\u548cIO\u533a\u57df\u53ef\u80fd\u53ea\u652f\u6301\u4e00\u4e2a\u5b50\u96c6\u6216\u8005\u4e0d\u652f\u6301\u539f\u5b50\u64cd\u4f5c\u3002 AMOLogical support for I/O regions where possible","title":"AMO PMA"},{"location":"riscv/pma.html#lrsc","text":"LR/SC\u5206\u4e86\u4e09\u4e2a\u7b49\u7ea7 \u7b49\u7ea7 \u8bf4\u660e RsrvNone \u4e0d\u652f\u6301LR/SC\u6307\u4ee4 RsrvNonEventual \u652f\u6301LR/SC\u64cd\u4f5c\uff0c\u4f46\u662f\u7f3a\u5c11\u7279\u6743\u6307\u4ee4\u6587\u6863\u4e2d\u63cf\u8ff0\u7684\u6700\u7ec8\u6210\u529f\u4fdd\u8bc1 RsrvEventual \u652f\u6301LR/SC\u64cd\u4f5c\uff0c\u5e76\u4e14\u63d0\u4f9b\u6700\u7ec8\u6210\u529f\u4fdd\u8bc1 \u5efa\u8bae\u5bf9\u4e3b\u5185\u5b58\u533a\u57df\u652f\u6301RsrvEventual\uff0c\u5927\u591a\u6570IO\u533a\u57df\u4e0d\u652f\u6301LR/SC\u8bbf\u95ee\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u6784\u5efa\u5728cache\u4e00\u81f4\u6027\u7b56\u7565\u7684\u4e0a\u5c42\u6700\u65b9\u4fbf\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u652f\u6301RsrvNonEventual\u6216RsrvEventual\u3002 \u5f53\u5185\u5b58\u533a\u57df\u7684LR/SC\u6807\u8bb0\u4e3aRsrvNonEventual\uff0c \u8f6f\u4ef6\u5e94\u8be5\u63d0\u4f9b\u989d\u5916\u7684\u9519\u8bef\u8fd4\u56de\u673a\u5236\u3002","title":"LR/SC\u539f\u5b50\u64cd\u4f5c"},{"location":"riscv/pma.html#_3","text":"","title":"\u5bf9\u9f50"},{"location":"riscv/pma.html#_4","text":"spec\u4e2d\u6ca1\u6709\u5bf9PMA\u8fdb\u884c\u5177\u4f53\u7684\u8bbe\u5b9a\uff0c\u751a\u81f3\u6ca1\u6709\u5bc4\u5b58\u5668\uff0c\u662f\u56e0\u4e3a\u5b83\u4e0e\u6574\u4f53\u8bbe\u8ba1\u7d27\u5bc6\u7ed1\u5b9a\uff0c\u5f88\u96be\u7edf\u4e00\u5417\uff1f\u6240\u8c13\u7684PMA Checker\u5230\u5e95\u8981\u5982\u4f55\u5b9e\u73b0\uff1f PMA\u66f4\u591a\u7684\u662f\u9488\u5bf9\u786c\u4ef6\u7ed3\u6784\uff0c\u4e00\u822c\u4e0d\u9700\u8981\u52a8\u6001\u4fee\u6539PMA\uff0c\u4f46\u53ef\u4ee5\u505a\u6210\u80fd\u591f\u52a8\u6001\u6539\u3002 \u21a9 \u4e5f\u5c31\u662f\u8bf4RISCV\u7684PMA\u548c\u5176\u4ed6\u67b6\u6784\u7684\u4e0d\u592a\u4e00\u6837\uff0c\u5f88\u591a\u5176\u4ed6\u67b6\u6784\u7684PMA\u90fd\u53ef\u4ee5\u7ba1\u7406\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0cRISCV\u7684\u8bbe\u8ba1\u8005\u8ba4\u4e3a\u8fd9\u6837\u5f15\u5165\u4e86\u4e0d\u5fc5\u8981\u7684\u9ebb\u70e6\uff0c\u5e76\u4e14\u5b83\u5c06PMA\u96c6\u6210\u5230\u4e86\u4e00\u4e2a\u53eb\u505aPMAChecker\u7684\u72ec\u7acb\u5355\u5143\u4e2d \u21a9 \u8fd9\u91cc\u8bb2\u7684\u662f\u5efa\u8bae\u80fd\u591f\u7cbe\u786e\u7684\u6355\u83b7PMA\u89e6\u53d1\u7684\u5f02\u5e38\uff0c\u5982\u679c\u901a\u8fc7\u603b\u7ebf\u4e2d\u65ad\u7684\u65b9\u5f0f\u6765\u4e0a\u62a5\uff0c\u5c31\u4e0d\u7cbe\u786e\u4e86\uff0c\u4f46\u6709\u4e9b\u65f6\u5019\u4e5f\u8feb\u4e0d\u5f97\u5df2\uff0c\u8fd9\u91cc\u6240\u8c13\u7684**discovery mechanism**\u662f\u4ec0\u4e48\u610f\u601d\u3002 \u21a9 \u8fd9\u4e00\u6bb5\u662f\u6bd4\u8f83\u522b\u626d\u7684\uff0c\u6211\u8ba4\u4e3a\uff0c\u8bbe\u8ba1\u8005\u60f3\u8868\u8fbe\u7684\u662f\uff0c\u8f6f\u4ef6\u8981\u628aPMA\u505a\u6210\u6a21\u5757\u5316\uff0c\u800c\u4e14\u8981\u505a\u5230\u7279\u6743\u6a21\u5f0f\u4e2d\uff0c\u5e94\u7528\u5c42\u901a\u8fc7\u63d0\u4f9b\u7684\u63a5\u53e3\u6765\u5bf9PMA\u5bc4\u5b58\u5668\u8fdb\u884c\u8bfb\u5199\uff0c\u653e\u5230\u7279\u6743\u6a21\u5f0f\u4e2d\u662f\u56e0\u4e3a\u6709\u4e9b\u64cd\u4f5c\u5fc5\u987b\u5728\u7279\u6743\u6a21\u5f0f\u4e0b\u6267\u884c \u21a9","title":"\u603b\u7ed3"},{"location":"riscv/riscv-rvv.html","text":"RISCV\u5411\u91cf\u6269\u5c55\u5b9e\u73b0 \u00b6 [ https://dl.acm.org/doi/fullHtml/10.1145/3422667 ] [ https://github.com/RALC88/gem5/tree/develop ]","title":"RISCV\u5411\u91cf\u6269\u5c55\u5b9e\u73b0"},{"location":"riscv/riscv-rvv.html#riscv","text":"[ https://dl.acm.org/doi/fullHtml/10.1145/3422667 ] [ https://github.com/RALC88/gem5/tree/develop ]","title":"RISCV\u5411\u91cf\u6269\u5c55\u5b9e\u73b0"},{"location":"riscv/riscv-torture.html","text":"riscv-torture \u603b\u7ed3 \u00b6 riscv-torture \u603b\u7ed3 \u7b80\u4ecb \u8f6f\u4ef6\u7ed3\u6784 generator \u540e\u8bb0 \u7b80\u4ecb \u00b6 \u8001\u5916\u8bf4\u8bdd\u6709\u610f\u601d\uff0c\u628a\u6d4b\u8bd5\u5f53\u505a\u4e00\u79cd\u4e25\u5211\u62f7\u6253\u3002riscv-torture\u4f7f\u7528scala\u7f16\u5199\uff0c\u540c\u65f6\u5e26\u6709Makefile\u548c\u94fe\u63a5\u811a\u672c\u7528\u6765\u7f16\u8bd1\u751f\u6210\u7684\u6d4b\u8bd5\u6c47\u7f16\u6587\u4ef6\u3002\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528scala\u5462\uff0c\u539f\u56e0\u662f\u6709\u4eba\u7528scala\u5b9e\u73b0\u4e86\u4e00\u4e2a\u540d\u4e3aChisel\u7684\u5e93\uff0c\u5229\u7528Chisel\u7f16\u8bd1\u51fa.fir\u6587\u4ef6\uff0c\u518d\u901a\u8fc7firrtl\u5de5\u5177\u5c31\u80fd\u8f6c\u6362\u6210verilog\uff0c\u4e5f\u5c31\u662f\u8bf4scala\u80fd\u591f\u76f4\u63a5\u8f6c\u6362\u6210verilog\u3002\u518d\u8bf4\u7684\u76f4\u767d\u4e00\u70b9\u513f\u5c31\u662f\uff0cIC\u56e2\u961f\u5b8c\u5168\u53ef\u4ee5\u4f7f\u7528scala\u6765\u8bbe\u8ba1\u82af\u7247\u3002RISCV\u5f00\u6e90\u793e\u533a\u5c31\u662f\u8fd9\u4e48\u5e72\u7684\uff01\uff1f Rocket Chip\u662f\u4e00\u4e2a\u57fa\u4e8eChisel\u7684\u5f00\u6e90soc\u751f\u6210\u5668\uff0c\u8fd8\u6ca1\u5177\u4f53\u53bb\u4e86\u89e3\uff0c\u76ee\u524d\u770b\u6765\u65e0\u5173\u7d27\u8981\uff0c\u6682\u4e14\u6401\u7f6e\u3002 Scala\u5de5\u7a0b\u4e00\u822c\u57fa\u4e8esbt\u6784\u5efa\uff0cscala\u9700\u8981java\u7684runtime\u3002\u4e2a\u4eba\u8ba4\u4e3ascala\u5c31\u50cf\u4e00\u4e2ajava\u811a\u672c\u8bed\u8a00\u3002 \u8fd9\u4efd\u4ee3\u7801\u76f8\u5173\u8d44\u6599\u5f88\u5c11\uff0c\u4ee3\u7801\u4e2d\u51e0\u4e4e\u662f\u6ca1\u6709\u6ce8\u91ca\u7684\uff0creadme\u4e2d\u4e5f\u4ec5\u6709\u5f88\u5c11\u7684\u4fe1\u606f\u3002\u4e0d\u8fc7\u575a\u6301\u770b\u51e0\u5929\uff0c\u5927\u90e8\u5206\u4ee3\u7801\u90fd\u80fd\u5f04\u6e05\u695a\u4ec0\u4e48\u610f\u601d\uff0c\u8fd9\u5f52\u529f\u4e8e\u81ea\u6ce8\u91ca\u505a\u7684\u4e0d\u9519\u3002\u8f6f\u4ef6\u7684\u8bbe\u8ba1\u4e0a\u6709\u5f88\u591a\u503c\u5f97\u5b66\u4e60\u7684\u70b9\uff0c\u6574\u4f53\u601d\u8def\u5f88\u6e05\u6670\uff0c\u90e8\u5206\u7ec6\u8282\u4ee3\u7801\u4e0a\u4e2a\u4eba\u89c9\u5f97\u903b\u8f91\u4e0d\u662f\u5f88\u6e05\u6670\uff0c\u6709\u4e9b\u7ed5\uff0c\u4f46\u4e0d\u5f71\u54cd\u5b83\u6210\u4e3a\u4e00\u4e2a\u8d28\u91cf\u8f83\u597d\u7684\u5f00\u6e90\u8f6f\u4ef6\u3002 \u8f6f\u4ef6\u7ed3\u6784 \u00b6 riscv-torture\u5305\u542b\u4e09\u90e8\u5206\uff0c\u6bcf\u4e2a\u90e8\u5206\u76f8\u5bf9\u72ec\u7acb\uff0c\u8fd9\u5728readme\u4e2d\u4e5f\u6709\u63d0\u53ca generator \u6839\u636e\u914d\u7f6e\u6587\u4ef6\u751f\u6210riscv\u6c47\u7f16\u6587\u4ef6 testrun \u5c06riscv\u6c47\u7f16\u6587\u4ef6\u8fdb\u884c\u7f16\u8bd1\uff0c\u5e76\u5728\u6a21\u62df\u5668\u4e0a\u8fd0\u884c overnight \u53cd\u590d\u7684\u751f\u6210\u6d4b\u8bd5\u6587\u4ef6\u5e76\u5728\u6a21\u62df\u5668\u4e0a\u8fd0\u884c generator \u00b6 \u4ece\u9762\u5411\u5bf9\u8c61\u7684\u89d2\u5ea6\u6765\u8bb2\uff0ctorture\u65e2\u7136\u8981\u751f\u6210\u6c47\u7f16\u4ee3\u7801\uff0c\u90a3\u4e48\u6700\u57fa\u7840\u7684\u62bd\u8c61\u5e94\u8be5\u5c31\u662f\u6307\u4ee4, \u5982\u679c\u662f\u6211\u53bb\u505a\uff0c\u6211\u80af\u5b9a\u4f1a\u5199\u4e00\u4e2aIns\u7684\u57fa\u7840\u7c7b\u3002torture\u4e5f\u662f\u8fd9\u6837\u505a\u7684\uff0c\u547d\u540d\u4e3aInst\u3002\u4f46\u5b83\u4e3a\u4e86\u5bf9\u53c2\u6570\u4e5f\u505a\u7ba1\u7406\uff0c\u53c8\u5411\u4e0b\u6dfb\u52a0\u4e86\u4e00\u5c42\uff0c\u62bd\u8c61\u51fa\u4e86operands\uff0c\u5373\u6307\u4ee4\u53c2\u6570\uff0c\u8fd9\u662f\u6211\u6240\u6ca1\u6709\u8003\u8651\u5230\u7684\u3002\u6240\u6709\u7684operands\u90fd\u53ef\u4ee5\u5b57\u7b26\u4e32\u5316\uff0c\u8fd9\u6837\u5c31\u80fd\u8f7b\u677e\u7ec4\u5408\u6210\u6587\u672c\u3002\u6709\u4eba\u8bf4\u8fc7\u8ba1\u7b97\u673a\u4e16\u754c\u7684\u95ee\u9898\u90fd\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0\u4e00\u5c42\u6765\u89e3\u51b3\uff0c\u4ee5\u524d\u6211\u7406\u89e3\u6210\u5728\u4e2d\u95f4\u52a0\u4e00\u5c42\uff0c\u73b0\u5728\u624d\u53d1\u73b0\uff0c\u5728\u6700\u5e95\u4e0b\u52a0\u4e5f\u662f\u52a0\u4e00\u5c42\uff0c\u65e0\u8bba\u5728\u54ea\u91cc\u52a0\uff0c\u90fd\u662f\u52a0\u4e00\u5c42\u3002\u5bf9\u4e8e\u6c47\u7f16\u6765\u8bb2\uff0c\u6c47\u7f16\u6307\u4ee4\u53c2\u6570\u7684\u4e3b\u8981\u7ec4\u6210\u90e8\u5206\u5c31\u662f\u5bc4\u5b58\u5668\uff0c\u6240\u4ee5\uff0ctorture\u53c8\u5bf9\u5bc4\u5b58\u5668\u8fdb\u884c\u4e86\u62bd\u8c61\uff0c\u968f\u4e4b\u800c\u6765\u7684\u5c31\u662f\u4e00\u7cfb\u5217\u7684\u5bc4\u5b58\u5668\u7ba1\u7406\u7c7b\uff0c\u5927\u6982\u547d\u540d\u4e3apool\u4e4b\u7c7b\uff0c\u5373\u5404\u79cd\u5404\u6837\u7684\u5bc4\u5b58\u5668\u6c60\u3002\u8fd9\u79cd\u601d\u60f3\u5e94\u8be5\u662f\u6765\u6e90\u4e8e\u7f16\u8bd1\u5668\uff0c\u6709\u65f6\u95f4\u771f\u5e94\u8be5\u53bb\u770b\u770b\u7f16\u8bd1\u539f\u7406\u3002 \u6784\u6210\u6307\u4ee4\u7684\u5143\u7d20\u7ba1\u7406 \u6784\u6210\u6307\u4ee4\u7684\u6240\u6709\u5143\u7d20\u90fd\u7ee7\u627f\u4e8e\u62bd\u8c61\u7c7bOperand class Operand class Reg extends Operand { {field} hwreg {method} def toString } class Imm extends Operand { {method} def toString } class RegImm extends Operand { {method} def toString } class Mem extends Operand { {method} def toString {method} def dumpdata {method} def dumpaddrs } class Label extends Operand { {method} toString } \u5bc4\u5b58\u5668\u7ba1\u7406 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0cVRegsMaster\u5e76\u6ca1\u6709\u4f7f\u7528ScalarRegPool\u63a5\u53e3\uff0c\u4f46\u65b9\u6cd5\u540d\u4fdd\u6301\u4e86\u4e00\u81f4\uff0c\u8fd9\u4e00\u70b9\u662f\u4e0d\u662f\u8bbe\u8ba1\u4e0a\u7684\u758f\u5ffd\uff1f class HWReg { {field} String name {field} Boolean readable {field} Boolean writable {method} def backup() {method} def restore() {method} static def filter_read_zero {method} static def filter_read_any {method} static def filter_write_visible {method} static def alloc_read {method} static def alloc_write {method} static def free_read {method} static def free_write } class HWRegPool { {field} ArrayBuffer[HWReg] hwregs {method} def backup() {method} def restore() } HWReg <-- HWRegPool interface ScalarRegPool extends HWRegPool { def init_regs() def save_regs() def init_regs_data() def output_regs_data() } class FRegsPool extends HWRegPool class VRegsPool extends HWRegPool interface PoolsMaster extends HWRegPool { {method} override def backup() {method} override def restore() } class XRegsPool extends ScalarRegPool { override def save_regs() } class FRegsMaster extends ScalarRegPool class FRegsMaster extends PoolsMaster { FRegsPool s_regpool FRegsPool d_regpool override def init_regs() override def save_regs() } FRegsPool <-- FRegsMaster class VRegsMaster extends PoolsMaster { VRegsPool s_regpool VRegsPool d_regpool def init_regs() def save_regs() def init_regs_data() def output_regs_data() } VRegsPool <-- VRegsMaster XRegsPool\u3001VRegsMaster \u548c FRegsMaster \u62c5\u4efb\u8d77\u4e86\u6700\u7ec8\u7684\u5bc4\u5b58\u5668\u7ba1\u7406\u5de5\u4f5c \u6d41\u7a0b\u8d2f\u7a7f \u5173\u4e8e HWRegPool\u548cXRegsPool\u3001FRegsMaster\u4ee5\u53caVRegsMaster\u7684\u5173\u7cfb\u5df2\u7ecf\u5728\u4e0a\u9762\u63cf\u8ff0\u6e05\u695a\u4e86\uff0c HWRegAllocator \u8d1f\u8d23\u4f7f\u7528\u8fd9\u4e9bHWRegPool\uff0c InstSeq\u6765\u8d1f\u8d23\u5177\u4f53\u7684\u6d4b\u8bd5\u6307\u4ee4\u751f\u6210\uff0c\u6700\u7ec8\u6240\u6709\u7684\u903b\u8f91\u5728Prog\u4e2d\u8fdb\u884c\u8d2f\u7a7f\u3002 class Operand class Reg extends Operand { HWReg hwreg var allocated override def toString } class HWRegAllocator { ArrayBuffer[Reg] regs def reg_fn() def reg_read_zero(hwrp: HWRegPool) def reg_read_any(hwrp: HWRegPool) def reg_write_visible(hwrp: HWRegPool) def reg_write_visible_consec(hwrp: HWRegPool, regs: Int) def allocate_regs() def free_regs() } class Inst { {field} String opcode {field} Array[Operand] operands {method} override def toString {method} def is_branch {method} def is_jmp {method} def is_cmp } class InstSeq extends HWRegAllocator { ArrayBuffer[Inst] insts def next_inst() } Inst <-- InstSeq Inst --> Operand class SeqFPMem extends InstSeq class SeqALU extends InstSeq class SeqMem extends InstSeq class SeqVec extends InstSeq class Prog { name_to_seq XRegsPool xregs FRegsMaster fregs VRegsMaster vregs def seqs_find_active() def gen_seq() def code_body() def header(nseqs: Int) def code_header() def generate() def statistics() } SeqFPMem <-- Prog SeqALU <-- Prog SeqMem <-- Prog SeqVec <-- Prog Prog --> XRegsPool Prog --> FRegsMaster Prog --> VRegsMaster Prog\u7684generate\u65b9\u6cd5\u8d1f\u8d23\u7ec4\u7ec7\u4e00\u5207\u751f\u4ea7\u8d44\u6599\u4ea7\u751f\u6d4b\u8bd5\u6c47\u7f16\u4ee3\u7801\u3002\u540c\u65f6\uff0ctorture\u8ba4\u4e3a\u4ee3\u7801\u7684\u6b63\u6587\u5206\u4e3a\u4ee3\u7801\u5757\u548c\u6570\u636e\u5757\uff0c\u6bcf\u4e2a\u5757\u4e5f\u5927\u6982\u662f\u4e00\u4e2a\u4e09\u6bb5\u4f53\u7ed3\u6784\uff0c\u5177\u4f53\u5982\u4e0b header \u6587\u4ef6\u5934\uff0c\u5305\u542b\u6587\u4ef6\u8bf4\u660e\u7b49 code_header \u4ee3\u7801\u6bb5\u5934\uff0c\u5305\u542b\u5bc4\u5b58\u5668\u521d\u59cb\u5316\u7b49 code_body \u6d4b\u8bd5\u4ee3\u7801\u4e3b\u4f53\uff0c\u5305\u542b\u4e86\u6d4b\u8bd5\u6307\u4ee4 code_footer \u4ee3\u7801\u6bb5\u672b\u5c3e\uff0c\u8fd9\u91cc\u53ef\u4ee5\u9009\u62e9\u91cd\u590d\u6267\u884c\u6d4b\u8bd5\u4ee3\u7801\u4e3b\u4f53N\u6b21\uff0c\u4ee5\u6d4b\u8bd5\u7a33\u5b9a\u6027\uff0c\u5faa\u73af\u5b8c\u6210\u540e\uff0c\u628a\u7528\u5230\u7684\u5bc4\u5b58\u5668\u5168\u90fddump\u5230\u6307\u5b9a\u7684\u5730\u5740\u4e0a\u53bb data_header \u6807\u660e\u6570\u636e\u6bb5\u8d77\u59cb data_input \u5b58\u653e\u4e86\u5bc4\u5b58\u5668\u521d\u59cb\u5316\u6570\u636e data_output \u5bc4\u5b58\u5668\u6700\u7ec8dump\u5230\u8fd9\u91cc\uff0c\u540c\u65f6\u8fd8\u6db5\u76d6\u4e86\u4e00\u5757\u6d4b\u8bd5memory data_footer \u7ed3\u675f \u4e00\u79cdInstSeq\u5305\u542b\u4e86\u540c\u7c7b\u7684\u6307\u4ee4\uff0c\u6307\u4ee4\u5305\u542b\u5728insts\u7684\u5bb9\u5668\u4e2d\uff0c\u4e00\u6761InstSeq\u5305\u542b\u4e86\u81f3\u5c11\u4e00\u6761Inst\u3002Prog\u6839\u636e\u914d\u7f6e\u6587\u4ef6\uff0c\u751f\u6210N\u6761InstSeq\uff0c\u7136\u540e\u904d\u5386\u6240\u6709InstSeq\u3002\u6bcf\u6b21\u904d\u5386\u6309\u987a\u5e8f\u4ece\u6bcf\u4e2aInstSeq\u4e2d\u53d6\u4e00\u6761Inst, \u4ee5\u4fdd\u8bc1\u6bcf\u4e00\u4e2aInstSeq\u7684\u6307\u4ee4\u987a\u5e8f\u3002\u4f46\u591a\u4e2aInstSeq\u7684\u987a\u5e8f\u662f\u4ea4\u9519\u7684\uff0c\u968f\u673a\u7684\u3002\u88ab\u6311\u9009\u51fa\u6765\u7684Inst\u5b58\u653e\u5728ProgSeg\u7684\u5bb9\u5668\u4e2d\uff0c\u6700\u540e\u53d8\u6210\u5b57\u7b26\u4e32\u52a0\u5165\u5230code_body\u4e2d\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0ctorture\u53ef\u4ee5\u52a8\u6001\u7684\u8fdb\u884c\u5bc4\u5b58\u5668\u7ba1\u7406\uff0c\u5373\u5efa\u7acb\u4e86\u5bc4\u5b58\u5668\u52a8\u6001\u7533\u8bf7\u4e0e\u91ca\u653e\u673a\u5236\u3002\u8fd9\u4e2a\u673a\u5236\u4f7f\u5f97Inst\u4e0e\u5177\u4f53\u7684\u5bc4\u5b58\u5668\u5206\u79bb\uff0c\u5728InstSeq\u4e2d\u5b9a\u4e49Inst\uff0c\u4f46\u4e0d\u7533\u8bf7\u5bc4\u5b58\u5668\uff0c\u5728\u7ec4\u5efaProgSeg\u7684\u65f6\u5019\u518d\u53bb\u52a8\u6001\u7684\u7533\u8bf7\u5bc4\u5b58\u5668\uff0c\u8fd9\u6837\u80fd\u591f\u4fdd\u8bc1\u6d4b\u8bd5\u7684\u5145\u5206\u6027\uff0c\u7406\u8bba\u4e0a\u80fd\u591f\u4fdd\u8bc1\u591a\u6761InstSeq\u4e0d\u4f1a\u76f8\u4e92\u5e72\u6270\uff08\u53ea\u8981\u4f60\u628a\u6240\u6709\u7528\u5230\u7684\u5bc4\u5b58\u5668\u90fd\u52a0\u5165\u5230\u5bc4\u5b58\u5668\u7ba1\u7406\u4e2d\uff09\u3002 \u540e\u8bb0 \u00b6 \u5bf9\u4e8etestrun \u548c overnight \u4e0d\u505a\u5177\u4f53\u4ecb\u7ecd\uff0c\u6bd4\u8f83\u7b80\u5355\u3002testrun\u4e2d\u5b9e\u73b0\u4e86\u6a21\u62df\u5668\u7ba1\u7406\uff0c\u5e76\u4e14testrun\u4f1a\u6839\u636e\u53c2\u6570\u51b3\u5b9a\u7533\u8bf7generator\u5b9e\u4f8b\uff0covernight\u4f1a\u7533\u8bf7testrun\u5b9e\u4f8b\u548cgenerator\u5b9e\u4f8b\u3002","title":"riscv-torture \u603b\u7ed3"},{"location":"riscv/riscv-torture.html#riscv-torture","text":"riscv-torture \u603b\u7ed3 \u7b80\u4ecb \u8f6f\u4ef6\u7ed3\u6784 generator \u540e\u8bb0","title":"riscv-torture \u603b\u7ed3"},{"location":"riscv/riscv-torture.html#_1","text":"\u8001\u5916\u8bf4\u8bdd\u6709\u610f\u601d\uff0c\u628a\u6d4b\u8bd5\u5f53\u505a\u4e00\u79cd\u4e25\u5211\u62f7\u6253\u3002riscv-torture\u4f7f\u7528scala\u7f16\u5199\uff0c\u540c\u65f6\u5e26\u6709Makefile\u548c\u94fe\u63a5\u811a\u672c\u7528\u6765\u7f16\u8bd1\u751f\u6210\u7684\u6d4b\u8bd5\u6c47\u7f16\u6587\u4ef6\u3002\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528scala\u5462\uff0c\u539f\u56e0\u662f\u6709\u4eba\u7528scala\u5b9e\u73b0\u4e86\u4e00\u4e2a\u540d\u4e3aChisel\u7684\u5e93\uff0c\u5229\u7528Chisel\u7f16\u8bd1\u51fa.fir\u6587\u4ef6\uff0c\u518d\u901a\u8fc7firrtl\u5de5\u5177\u5c31\u80fd\u8f6c\u6362\u6210verilog\uff0c\u4e5f\u5c31\u662f\u8bf4scala\u80fd\u591f\u76f4\u63a5\u8f6c\u6362\u6210verilog\u3002\u518d\u8bf4\u7684\u76f4\u767d\u4e00\u70b9\u513f\u5c31\u662f\uff0cIC\u56e2\u961f\u5b8c\u5168\u53ef\u4ee5\u4f7f\u7528scala\u6765\u8bbe\u8ba1\u82af\u7247\u3002RISCV\u5f00\u6e90\u793e\u533a\u5c31\u662f\u8fd9\u4e48\u5e72\u7684\uff01\uff1f Rocket Chip\u662f\u4e00\u4e2a\u57fa\u4e8eChisel\u7684\u5f00\u6e90soc\u751f\u6210\u5668\uff0c\u8fd8\u6ca1\u5177\u4f53\u53bb\u4e86\u89e3\uff0c\u76ee\u524d\u770b\u6765\u65e0\u5173\u7d27\u8981\uff0c\u6682\u4e14\u6401\u7f6e\u3002 Scala\u5de5\u7a0b\u4e00\u822c\u57fa\u4e8esbt\u6784\u5efa\uff0cscala\u9700\u8981java\u7684runtime\u3002\u4e2a\u4eba\u8ba4\u4e3ascala\u5c31\u50cf\u4e00\u4e2ajava\u811a\u672c\u8bed\u8a00\u3002 \u8fd9\u4efd\u4ee3\u7801\u76f8\u5173\u8d44\u6599\u5f88\u5c11\uff0c\u4ee3\u7801\u4e2d\u51e0\u4e4e\u662f\u6ca1\u6709\u6ce8\u91ca\u7684\uff0creadme\u4e2d\u4e5f\u4ec5\u6709\u5f88\u5c11\u7684\u4fe1\u606f\u3002\u4e0d\u8fc7\u575a\u6301\u770b\u51e0\u5929\uff0c\u5927\u90e8\u5206\u4ee3\u7801\u90fd\u80fd\u5f04\u6e05\u695a\u4ec0\u4e48\u610f\u601d\uff0c\u8fd9\u5f52\u529f\u4e8e\u81ea\u6ce8\u91ca\u505a\u7684\u4e0d\u9519\u3002\u8f6f\u4ef6\u7684\u8bbe\u8ba1\u4e0a\u6709\u5f88\u591a\u503c\u5f97\u5b66\u4e60\u7684\u70b9\uff0c\u6574\u4f53\u601d\u8def\u5f88\u6e05\u6670\uff0c\u90e8\u5206\u7ec6\u8282\u4ee3\u7801\u4e0a\u4e2a\u4eba\u89c9\u5f97\u903b\u8f91\u4e0d\u662f\u5f88\u6e05\u6670\uff0c\u6709\u4e9b\u7ed5\uff0c\u4f46\u4e0d\u5f71\u54cd\u5b83\u6210\u4e3a\u4e00\u4e2a\u8d28\u91cf\u8f83\u597d\u7684\u5f00\u6e90\u8f6f\u4ef6\u3002","title":"\u7b80\u4ecb"},{"location":"riscv/riscv-torture.html#_2","text":"riscv-torture\u5305\u542b\u4e09\u90e8\u5206\uff0c\u6bcf\u4e2a\u90e8\u5206\u76f8\u5bf9\u72ec\u7acb\uff0c\u8fd9\u5728readme\u4e2d\u4e5f\u6709\u63d0\u53ca generator \u6839\u636e\u914d\u7f6e\u6587\u4ef6\u751f\u6210riscv\u6c47\u7f16\u6587\u4ef6 testrun \u5c06riscv\u6c47\u7f16\u6587\u4ef6\u8fdb\u884c\u7f16\u8bd1\uff0c\u5e76\u5728\u6a21\u62df\u5668\u4e0a\u8fd0\u884c overnight \u53cd\u590d\u7684\u751f\u6210\u6d4b\u8bd5\u6587\u4ef6\u5e76\u5728\u6a21\u62df\u5668\u4e0a\u8fd0\u884c","title":"\u8f6f\u4ef6\u7ed3\u6784"},{"location":"riscv/riscv-torture.html#generator","text":"\u4ece\u9762\u5411\u5bf9\u8c61\u7684\u89d2\u5ea6\u6765\u8bb2\uff0ctorture\u65e2\u7136\u8981\u751f\u6210\u6c47\u7f16\u4ee3\u7801\uff0c\u90a3\u4e48\u6700\u57fa\u7840\u7684\u62bd\u8c61\u5e94\u8be5\u5c31\u662f\u6307\u4ee4, \u5982\u679c\u662f\u6211\u53bb\u505a\uff0c\u6211\u80af\u5b9a\u4f1a\u5199\u4e00\u4e2aIns\u7684\u57fa\u7840\u7c7b\u3002torture\u4e5f\u662f\u8fd9\u6837\u505a\u7684\uff0c\u547d\u540d\u4e3aInst\u3002\u4f46\u5b83\u4e3a\u4e86\u5bf9\u53c2\u6570\u4e5f\u505a\u7ba1\u7406\uff0c\u53c8\u5411\u4e0b\u6dfb\u52a0\u4e86\u4e00\u5c42\uff0c\u62bd\u8c61\u51fa\u4e86operands\uff0c\u5373\u6307\u4ee4\u53c2\u6570\uff0c\u8fd9\u662f\u6211\u6240\u6ca1\u6709\u8003\u8651\u5230\u7684\u3002\u6240\u6709\u7684operands\u90fd\u53ef\u4ee5\u5b57\u7b26\u4e32\u5316\uff0c\u8fd9\u6837\u5c31\u80fd\u8f7b\u677e\u7ec4\u5408\u6210\u6587\u672c\u3002\u6709\u4eba\u8bf4\u8fc7\u8ba1\u7b97\u673a\u4e16\u754c\u7684\u95ee\u9898\u90fd\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0\u4e00\u5c42\u6765\u89e3\u51b3\uff0c\u4ee5\u524d\u6211\u7406\u89e3\u6210\u5728\u4e2d\u95f4\u52a0\u4e00\u5c42\uff0c\u73b0\u5728\u624d\u53d1\u73b0\uff0c\u5728\u6700\u5e95\u4e0b\u52a0\u4e5f\u662f\u52a0\u4e00\u5c42\uff0c\u65e0\u8bba\u5728\u54ea\u91cc\u52a0\uff0c\u90fd\u662f\u52a0\u4e00\u5c42\u3002\u5bf9\u4e8e\u6c47\u7f16\u6765\u8bb2\uff0c\u6c47\u7f16\u6307\u4ee4\u53c2\u6570\u7684\u4e3b\u8981\u7ec4\u6210\u90e8\u5206\u5c31\u662f\u5bc4\u5b58\u5668\uff0c\u6240\u4ee5\uff0ctorture\u53c8\u5bf9\u5bc4\u5b58\u5668\u8fdb\u884c\u4e86\u62bd\u8c61\uff0c\u968f\u4e4b\u800c\u6765\u7684\u5c31\u662f\u4e00\u7cfb\u5217\u7684\u5bc4\u5b58\u5668\u7ba1\u7406\u7c7b\uff0c\u5927\u6982\u547d\u540d\u4e3apool\u4e4b\u7c7b\uff0c\u5373\u5404\u79cd\u5404\u6837\u7684\u5bc4\u5b58\u5668\u6c60\u3002\u8fd9\u79cd\u601d\u60f3\u5e94\u8be5\u662f\u6765\u6e90\u4e8e\u7f16\u8bd1\u5668\uff0c\u6709\u65f6\u95f4\u771f\u5e94\u8be5\u53bb\u770b\u770b\u7f16\u8bd1\u539f\u7406\u3002 \u6784\u6210\u6307\u4ee4\u7684\u5143\u7d20\u7ba1\u7406 \u6784\u6210\u6307\u4ee4\u7684\u6240\u6709\u5143\u7d20\u90fd\u7ee7\u627f\u4e8e\u62bd\u8c61\u7c7bOperand class Operand class Reg extends Operand { {field} hwreg {method} def toString } class Imm extends Operand { {method} def toString } class RegImm extends Operand { {method} def toString } class Mem extends Operand { {method} def toString {method} def dumpdata {method} def dumpaddrs } class Label extends Operand { {method} toString } \u5bc4\u5b58\u5668\u7ba1\u7406 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0cVRegsMaster\u5e76\u6ca1\u6709\u4f7f\u7528ScalarRegPool\u63a5\u53e3\uff0c\u4f46\u65b9\u6cd5\u540d\u4fdd\u6301\u4e86\u4e00\u81f4\uff0c\u8fd9\u4e00\u70b9\u662f\u4e0d\u662f\u8bbe\u8ba1\u4e0a\u7684\u758f\u5ffd\uff1f class HWReg { {field} String name {field} Boolean readable {field} Boolean writable {method} def backup() {method} def restore() {method} static def filter_read_zero {method} static def filter_read_any {method} static def filter_write_visible {method} static def alloc_read {method} static def alloc_write {method} static def free_read {method} static def free_write } class HWRegPool { {field} ArrayBuffer[HWReg] hwregs {method} def backup() {method} def restore() } HWReg <-- HWRegPool interface ScalarRegPool extends HWRegPool { def init_regs() def save_regs() def init_regs_data() def output_regs_data() } class FRegsPool extends HWRegPool class VRegsPool extends HWRegPool interface PoolsMaster extends HWRegPool { {method} override def backup() {method} override def restore() } class XRegsPool extends ScalarRegPool { override def save_regs() } class FRegsMaster extends ScalarRegPool class FRegsMaster extends PoolsMaster { FRegsPool s_regpool FRegsPool d_regpool override def init_regs() override def save_regs() } FRegsPool <-- FRegsMaster class VRegsMaster extends PoolsMaster { VRegsPool s_regpool VRegsPool d_regpool def init_regs() def save_regs() def init_regs_data() def output_regs_data() } VRegsPool <-- VRegsMaster XRegsPool\u3001VRegsMaster \u548c FRegsMaster \u62c5\u4efb\u8d77\u4e86\u6700\u7ec8\u7684\u5bc4\u5b58\u5668\u7ba1\u7406\u5de5\u4f5c \u6d41\u7a0b\u8d2f\u7a7f \u5173\u4e8e HWRegPool\u548cXRegsPool\u3001FRegsMaster\u4ee5\u53caVRegsMaster\u7684\u5173\u7cfb\u5df2\u7ecf\u5728\u4e0a\u9762\u63cf\u8ff0\u6e05\u695a\u4e86\uff0c HWRegAllocator \u8d1f\u8d23\u4f7f\u7528\u8fd9\u4e9bHWRegPool\uff0c InstSeq\u6765\u8d1f\u8d23\u5177\u4f53\u7684\u6d4b\u8bd5\u6307\u4ee4\u751f\u6210\uff0c\u6700\u7ec8\u6240\u6709\u7684\u903b\u8f91\u5728Prog\u4e2d\u8fdb\u884c\u8d2f\u7a7f\u3002 class Operand class Reg extends Operand { HWReg hwreg var allocated override def toString } class HWRegAllocator { ArrayBuffer[Reg] regs def reg_fn() def reg_read_zero(hwrp: HWRegPool) def reg_read_any(hwrp: HWRegPool) def reg_write_visible(hwrp: HWRegPool) def reg_write_visible_consec(hwrp: HWRegPool, regs: Int) def allocate_regs() def free_regs() } class Inst { {field} String opcode {field} Array[Operand] operands {method} override def toString {method} def is_branch {method} def is_jmp {method} def is_cmp } class InstSeq extends HWRegAllocator { ArrayBuffer[Inst] insts def next_inst() } Inst <-- InstSeq Inst --> Operand class SeqFPMem extends InstSeq class SeqALU extends InstSeq class SeqMem extends InstSeq class SeqVec extends InstSeq class Prog { name_to_seq XRegsPool xregs FRegsMaster fregs VRegsMaster vregs def seqs_find_active() def gen_seq() def code_body() def header(nseqs: Int) def code_header() def generate() def statistics() } SeqFPMem <-- Prog SeqALU <-- Prog SeqMem <-- Prog SeqVec <-- Prog Prog --> XRegsPool Prog --> FRegsMaster Prog --> VRegsMaster Prog\u7684generate\u65b9\u6cd5\u8d1f\u8d23\u7ec4\u7ec7\u4e00\u5207\u751f\u4ea7\u8d44\u6599\u4ea7\u751f\u6d4b\u8bd5\u6c47\u7f16\u4ee3\u7801\u3002\u540c\u65f6\uff0ctorture\u8ba4\u4e3a\u4ee3\u7801\u7684\u6b63\u6587\u5206\u4e3a\u4ee3\u7801\u5757\u548c\u6570\u636e\u5757\uff0c\u6bcf\u4e2a\u5757\u4e5f\u5927\u6982\u662f\u4e00\u4e2a\u4e09\u6bb5\u4f53\u7ed3\u6784\uff0c\u5177\u4f53\u5982\u4e0b header \u6587\u4ef6\u5934\uff0c\u5305\u542b\u6587\u4ef6\u8bf4\u660e\u7b49 code_header \u4ee3\u7801\u6bb5\u5934\uff0c\u5305\u542b\u5bc4\u5b58\u5668\u521d\u59cb\u5316\u7b49 code_body \u6d4b\u8bd5\u4ee3\u7801\u4e3b\u4f53\uff0c\u5305\u542b\u4e86\u6d4b\u8bd5\u6307\u4ee4 code_footer \u4ee3\u7801\u6bb5\u672b\u5c3e\uff0c\u8fd9\u91cc\u53ef\u4ee5\u9009\u62e9\u91cd\u590d\u6267\u884c\u6d4b\u8bd5\u4ee3\u7801\u4e3b\u4f53N\u6b21\uff0c\u4ee5\u6d4b\u8bd5\u7a33\u5b9a\u6027\uff0c\u5faa\u73af\u5b8c\u6210\u540e\uff0c\u628a\u7528\u5230\u7684\u5bc4\u5b58\u5668\u5168\u90fddump\u5230\u6307\u5b9a\u7684\u5730\u5740\u4e0a\u53bb data_header \u6807\u660e\u6570\u636e\u6bb5\u8d77\u59cb data_input \u5b58\u653e\u4e86\u5bc4\u5b58\u5668\u521d\u59cb\u5316\u6570\u636e data_output \u5bc4\u5b58\u5668\u6700\u7ec8dump\u5230\u8fd9\u91cc\uff0c\u540c\u65f6\u8fd8\u6db5\u76d6\u4e86\u4e00\u5757\u6d4b\u8bd5memory data_footer \u7ed3\u675f \u4e00\u79cdInstSeq\u5305\u542b\u4e86\u540c\u7c7b\u7684\u6307\u4ee4\uff0c\u6307\u4ee4\u5305\u542b\u5728insts\u7684\u5bb9\u5668\u4e2d\uff0c\u4e00\u6761InstSeq\u5305\u542b\u4e86\u81f3\u5c11\u4e00\u6761Inst\u3002Prog\u6839\u636e\u914d\u7f6e\u6587\u4ef6\uff0c\u751f\u6210N\u6761InstSeq\uff0c\u7136\u540e\u904d\u5386\u6240\u6709InstSeq\u3002\u6bcf\u6b21\u904d\u5386\u6309\u987a\u5e8f\u4ece\u6bcf\u4e2aInstSeq\u4e2d\u53d6\u4e00\u6761Inst, \u4ee5\u4fdd\u8bc1\u6bcf\u4e00\u4e2aInstSeq\u7684\u6307\u4ee4\u987a\u5e8f\u3002\u4f46\u591a\u4e2aInstSeq\u7684\u987a\u5e8f\u662f\u4ea4\u9519\u7684\uff0c\u968f\u673a\u7684\u3002\u88ab\u6311\u9009\u51fa\u6765\u7684Inst\u5b58\u653e\u5728ProgSeg\u7684\u5bb9\u5668\u4e2d\uff0c\u6700\u540e\u53d8\u6210\u5b57\u7b26\u4e32\u52a0\u5165\u5230code_body\u4e2d\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0ctorture\u53ef\u4ee5\u52a8\u6001\u7684\u8fdb\u884c\u5bc4\u5b58\u5668\u7ba1\u7406\uff0c\u5373\u5efa\u7acb\u4e86\u5bc4\u5b58\u5668\u52a8\u6001\u7533\u8bf7\u4e0e\u91ca\u653e\u673a\u5236\u3002\u8fd9\u4e2a\u673a\u5236\u4f7f\u5f97Inst\u4e0e\u5177\u4f53\u7684\u5bc4\u5b58\u5668\u5206\u79bb\uff0c\u5728InstSeq\u4e2d\u5b9a\u4e49Inst\uff0c\u4f46\u4e0d\u7533\u8bf7\u5bc4\u5b58\u5668\uff0c\u5728\u7ec4\u5efaProgSeg\u7684\u65f6\u5019\u518d\u53bb\u52a8\u6001\u7684\u7533\u8bf7\u5bc4\u5b58\u5668\uff0c\u8fd9\u6837\u80fd\u591f\u4fdd\u8bc1\u6d4b\u8bd5\u7684\u5145\u5206\u6027\uff0c\u7406\u8bba\u4e0a\u80fd\u591f\u4fdd\u8bc1\u591a\u6761InstSeq\u4e0d\u4f1a\u76f8\u4e92\u5e72\u6270\uff08\u53ea\u8981\u4f60\u628a\u6240\u6709\u7528\u5230\u7684\u5bc4\u5b58\u5668\u90fd\u52a0\u5165\u5230\u5bc4\u5b58\u5668\u7ba1\u7406\u4e2d\uff09\u3002","title":"generator"},{"location":"riscv/riscv-torture.html#_3","text":"\u5bf9\u4e8etestrun \u548c overnight \u4e0d\u505a\u5177\u4f53\u4ecb\u7ecd\uff0c\u6bd4\u8f83\u7b80\u5355\u3002testrun\u4e2d\u5b9e\u73b0\u4e86\u6a21\u62df\u5668\u7ba1\u7406\uff0c\u5e76\u4e14testrun\u4f1a\u6839\u636e\u53c2\u6570\u51b3\u5b9a\u7533\u8bf7generator\u5b9e\u4f8b\uff0covernight\u4f1a\u7533\u8bf7testrun\u5b9e\u4f8b\u548cgenerator\u5b9e\u4f8b\u3002","title":"\u540e\u8bb0"},{"location":"riscv/virtual_mem_manage.html","text":"RISCV\u865a\u62df\u5185\u5b58\u7ba1\u7406 \u00b6 RISCV\u865a\u62df\u5185\u5b58\u7ba1\u7406 \u8bbe\u8ba1\u63cf\u8ff0 \u5b9e\u73b0\u539f\u7406 \u9875\u548c\u9875\u8868\u548c\u9875\u8868\u9879 \u865a\u62df\u5730\u5740 \u7269\u7406\u5730\u5740 satp\u5bc4\u5b58\u5668 \u8f6c\u6362\u8fc7\u7a0b MMU\u7684\u542f\u52a8\u6761\u4ef6 \u6a21\u62df\u5668\u5b9e\u73b0 \u7ec6\u8282\u63cf\u8ff0 sfence.vma pte\u4e2d\u7684\u6807\u5fd7\u4f4d \u6700\u7ec8\u7684\u7269\u7406\u5730\u5740\u7684\u8ba1\u7b97 \u591a\u5904\u7406\u5668\u7684\u5730\u5740\u7f13\u5b58\u4e00\u81f4\u6027 \u865a\u62df\u5185\u5b58\u7ba1\u7406\u7684\u4e3b\u8981\u5355\u5143\u662fMMU,\u8fd9\u91cc\u5bf9RISCV\u5b98\u65b9spec\u4e2d\u63d0\u5230\u7684S\u6a21\u5f0f\u865a\u62df\u5185\u5b58\u7ba1\u7406\u505a\u4e00\u4e0b\u603b\u7ed3\u3002\u5185\u5bb9\u4f9d\u636eRISCV privileged ArchitectureV1.12 RISCV\u7684S\u6a21\u5f0f\u4f7f\u7528\u5206\u9875\u673a\u5236\u6765\u7ba1\u7406\u5185\u5b58\uff0c\u53ef\u4ee5\u652f\u6301Sv32,Sv39\u7b49\u591a\u79cd\u5206\u9875\u65b9\u5f0f\uff0c\u8fd9\u91cc\u4ee5Sv39\u4e3e\u4f8b\u6765\u8fdb\u884c\u5206\u6790 \u540c\u65f6\uff0c\u8fd9\u91cc\u4e0d\u5bf9H\u6269\u5c55\u6d89\u53ca\u7684\u5185\u5bb9\u505a\u4ecb\u7ecd \u8bbe\u8ba1\u63cf\u8ff0 \u00b6 \u5b9e\u73b0\u539f\u7406 \u00b6 RISCV\u4f7f\u7528\u5206\u9875\u673a\u5236\u6765\u8fdb\u884c\u5185\u5b58\u7ba1\u7406\uff0c\u5206\u9875\u673a\u5236\u7684\u6838\u5fc3\u5728\u4e8e\u591a\u7ea7\u9875\u8868\u3002\u591a\u7ea7\u9875\u8868\uff0c\u901a\u8fc7\u5c06\u865a\u62df\u5730\u5740\u5212\u5206\u4e3a\u591a\u4e2aindex, \u4ece\u800c\u4f7f\u5f97\u9875\u8868\u4e4b\u95f4\u4e0d\u9700\u8981\u8fde\u7eed\uff0c\u8fd9\u6837\u9875\u8868\u7684\u5b58\u653e\u5c31\u4f1a\u7075\u6d3b\u3002\u540c\u65f6\uff0c\u5f53\u8f6f\u4ef6\u9700\u8981\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u5f88\u5c0f\u65f6\uff0c\u8fd9\u5c06\u5927\u5927\u8282\u7701\u9875\u8868\u5bf9\u5185\u5b58\u7684\u5360\u7528\u3002 \u9875\u548c\u9875\u8868\u548c\u9875\u8868\u9879 \u00b6 Sv39\u5c06\u4e00\u4e2a\u7269\u7406\u9875\u8bbe\u8ba1\u4e3a4KB\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u662f\u865a\u62df\u5730\u5740\u7ba1\u7406\u7684\u6700\u5c0f\u5355\u4f4d\u3002 \u9875\u8868\uff0c\u662f\u9875\u8868\u9879\u7ec4\u6210\u7684\u4e00\u4e2a\u8868\uff0c\u9875\u8868\u9879\uff08pte\uff09\u4e2d\u4e3b\u8981\u5b58\u653e\u7684\u662f\u7269\u7406\u9875\u5730\u5740\u3002 PPN\u662f\u6307\u7269\u7406\u9875\u53f7\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u628aPPN[2] ~ PPN[0]\u7406\u89e3\u4e3a\u7269\u7406\u9875\u7684\u57fa\u5730\u5740\uff0c\u8fd9\u5df2\u7ecf\u5360\u7528\u4e8644bit\u7684\u7a7a\u95f4\uff0c\u4e3a\u4e86\u4e00\u4e9b\u6743\u9650\u7ba1\u7406\uff0c\u53c8\u6dfb\u52a0\u4e86\u4e00\u4e9b\u6807\u5fd7\u4f4d\uff0c\u8fd9\u4e9b\u6807\u5fd7\u5728\u6700\u540e\u5c06\u4f1a\u518d\u8be6\u7ec6\u63cf\u8ff0\u3002 \u65e2\u7136\u5728\u7269\u7406\u5730\u5740\u4e0a\u8fdb\u884c\u4e86\u9875\u7684\u5212\u5206\uff0c\u90a3\u4e48\u6211\u4eec\u662f\u4e0d\u662f\u80fd\u5c3d\u53ef\u80fd\u7684\u5728\u8fd9\u4e00\u9875\u4e2d\u6765\u8bbe\u8ba1\u5c3d\u53ef\u80fd\u591a\u7684\u9875\u8868\u8868\u9879\u5462\uff0c\u8fd9\u6837\u7684\u597d\u5904\u662f\u9875\u8868\u672c\u8eab\u4e5f\u5360\u4e00\u4e2a\u7269\u7406\u9875\uff0c\u7ba1\u7406\u65b9\u4fbf\u3002\u663e\u7136\uff0c\u4e00\u4e2a\u9875\u8868\u987932bit\u662f\u4e0d\u591f\u7684\uff0c\u4e3a\u4e86\u5bf9\u9f50\uff0c\u90a3\u4e48\u4e00\u4e2a\u9875\u8868\u9879\u5e94\u8be5\u5360\u752864bit\u3002\u8fd9\u6837\u5728\u4e00\u4e2a4KB\u7684\u9875\u8868\u4e2d\uff0c\u53ea\u80fd\u5b58\u653e512\u4e2a\u9875\u8868\u9879\uff0c\u56e0\u6b64\u5728\u865a\u62df\u5730\u5740\u4e2d\u7684VPN(\u865a\u62df\u9875\u8868\u9879\u53f7)\u9700\u89819bit\u3002 \u865a\u62df\u5730\u5740 \u00b6 \u6240\u8c13Sv39\u4e5f\u5c31\u662f\u53ea\u7528\u4e8639bit\u6765\u8868\u793a\u5730\u5740\u7a7a\u95f4\uff0c\u8fd9\u5df2\u7ecf\u9ad8\u8fbe512GB\u4e86\uff0c\u8db3\u591f\u4f7f\u7528\u3002\uff0cVPN\u5373\u4e3a\u865a\u62df\u9875\u53f7\uff0c\u53ef\u4ee5\u770b\u51fa\u5206\u4e863\u7ea7\u3002\u4ece\u5bf9\u4e8e\u9875\u8868\u9879\u7684\u5206\u6790\u4e2d\u5c31\u5df2\u7ecf\u4e86\u89e3\u5230\uff0c\u6bcf\u4e00\u7ea7\u9875\u8868\u9700\u89819bit\u7684index\u6765\u67e5\u627e\u3002 \u8fd9\u6837\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u865a\u62df\u5730\u5740\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e09\u4e2aVPN\u5bf9\u5e94\u5230\u4e00\u4e2a\u5177\u4f53\u7684PTE\u4e0a\uff0cPTE\u4e2d\u5b58\u653e\u4e86\u7269\u7406\u9875\u53f7\uff0c\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u4e00\u4e2a\u865a\u62df\u9875\u5230\u7269\u7406\u9875\u7684\u5bf9\u5e94\u3002 \u90a3\u4e48\u5206\u7ea7\u7684\u597d\u5904\u4f53\u73b0\u5728\u54ea\u91cc\uff1f\u4ece\u5168\u90e8\u6620\u5c04\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u5206\u7ea7\u82b1\u8d39\u4e86\u66f4\u591a\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5373\u5c06VPN[2], VPN[1], VPN[0]\u5408\u5e76\u6210\u4e00\u4e2a\u5927\u768427bit\u7684VPN\uff0c\u9875\u8868\u5360\u7528\u7684\u7a7a\u95f4\u6700\u5c0f\u3002\u4f46\u8fd9\u6700\u5927\u7684\u7f3a\u70b9\u5728\u4e8e\u8981\u6c42\u9875\u8868\u5730\u5740\u8fde\u7eed\u3002\u5b9e\u9645\u4e0a\uff0c\u6ca1\u6709\u5168\u6620\u5c04\u8fd9\u79cd\u5e94\u7528\u3002\u5f88\u6709\u53ef\u80fd\u4e00\u4e2a64bit\u7684CPU\u53ea\u642d\u914d\u4e86\u4e00\u4e2a2G\u7684\u7269\u7406\u5185\u5b58\uff0c\u52a0\u4e0a\u5176\u4ed6\u5916\u8bbe\u5730\u5740\u7a7a\u95f4\uff0c\u4e5f\u4e0d\u4f1a\u592a\u5927\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c31\u4f53\u73b0\u4e86\u5206\u7ea7\u7684\u597d\u5904\uff0c\u53ef\u4ee5\u505a\u5230\u6309\u9700\u5206\u914d\uff0c\u62d2\u7edd\u6d6a\u8d39\u3002 \u7269\u7406\u5730\u5740 \u00b6 \u7269\u7406\u5730\u5740\u6ca1\u6709\u592a\u591a\u9700\u8981\u89e3\u91ca\u7684\uff0c\u4f46\u5b83\u4e5f\u5212\u5206\u4e86\u4e09\u7ea7\u7269\u7406\u9875\u53f7\u7684\u610f\u4e49\u662f\u4ec0\u4e48\u5462\uff1f \u4e2a\u4eba\u8ba4\u4e3a\uff0c\u8fd9\u662f\u4e3a\u4e86\u5de8\u9875\u800c\u8bbe\u8ba1\u7684\uff0c\u5b83\u4f53\u73b0\u5728IC\u5b9e\u73b0\u4e0a\uff0c\u5f53PPN[2]\u5373\u4e3a\u53f6\u5b50\u8282\u70b9\u65f6\uff0c\u90a3\u4e48PPN[1] = VPN[1], PPN[0] = VPN[0] satp\u5bc4\u5b58\u5668 \u00b6 satp\u5bc4\u5b58\u5668\u6307\u5411\u4e86\u521d\u7ea7\u9875\u8868\uff0c\u5e76\u4e14\u5b83\u63a7\u5236\u4e86MMU\u7684\u5f00\u542f\u548c\u7ba1\u7406\u65b9\u6848\u3002ASID\u4e0eTLB\u6709\u5173\uff0c\u8f6f\u4ef6\u53ef\u4ee5\u7ed9\u4e0d\u540c\u8fdb\u7a0b\u5206\u914d\u4e0d\u540c\u7684ASID, \u66f4\u5177\u4f53\u7684\u4f1a\u5728TLB\u7ae0\u8282\u4e2d\u63cf\u8ff0 \u5173\u4e8esatp\u5bc4\u5b58\u5668\u7684\u5199\u5165\u903b\u8f91 Volume II: RISC-V Privileged Architectures V1.12-draft Note that writing satp does not imply any ordering constraints between page-table updates and subsequent address translations. If the new address space\u2019s page tables have been modified, or if an ASID is reused, it may be necessary to execute an SFENCE.VMA instruction (see Section 4.2.1) after writing satp Not imposing upon implementations to flush address-translation caches upon satp writes reduces the cost of context switches, provided a sufficiently large ASID space. \u901a\u8fc7\u63cf\u8ff0\u6765\u770b\uff0c\u6307\u4ee4\u96c6\u67b6\u6784\u6ca1\u6709\u7ea6\u675f\u5199\u5165satp\u540e\uff0c\u82af\u7247\u8981\u8fdb\u884ctlb_flush\u64cd\u4f5c\uff0c\u8fd9\u91cc\u5efa\u8bae\u4e0d\u5f3a\u5236\u52a0\u5165 tlb_flush,\u4ee5\u52a0\u901f\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u9700\u8981\u65f6\u5e94\u8be5\u4f7f\u7528sfence.vma\u6765\u5237\u65b0tlb\u3002\u4f46\u5b9e\u9645\u4e0a\u7531\u4e8e\u65e0\u6cd5\u5bf9\u8f6f\u4ef6\u505a\u7ea6\u675f\uff0c \u5f88\u591a\u5382\u5546\u9009\u62e9\u5728\u5199\u5165satp\u65f6\u4e3b\u52a8flush TLB \u9664\u6b64\u4e4b\u5916\uff0c\u867d\u7136satp\u662f\u4e00\u4e2aS\u6001\u5bc4\u5b58\u5668\uff0c\u4f46\u6ca1\u6709\u89c4\u5b9aU\u548cM\u6a21\u5f0f\u4e0d\u53ef\u4ee5\u5199\u5165 \u8f6c\u6362\u8fc7\u7a0b \u00b6 \u7565 MMU\u7684\u542f\u52a8\u6761\u4ef6 \u00b6 CPU\u4e0d\u5904\u4e8eM\u6001 satp\u5bc4\u5b58\u5668\u4e2d\u4f7f\u80fd\u4e86MMU \u6a21\u62df\u5668\u5b9e\u73b0 \u00b6 \u9875\u8868\u67e5\u627e\u8fc7\u7a0b\u5f88\u9002\u5408\u9012\u5f52 \u7ec6\u8282\u63cf\u8ff0 \u00b6 sfence.vma \u00b6 \u865a\u62df\u5730\u5740\u5c4f\u969c\u6307\u4ee4,\u9700\u8981\u6ce8\u610fsfence.vma\u548ctlb flush\u4e0d\u5b8c\u5168\u4e00\u6837\uff0csfence.vma\u53ef\u4ee5\u6839\u636e\u53c2\u6570\u6765\u786e\u5b9a\u5177\u4f53\u884c\u4e3a sfence.vma \u6267\u884c\u4f1a\u53d7\u5230\u4e00\u4e9b\u72b6\u6001\u7684\u5f71\u54cd \u4e0d\u5728S\u6001\u65f6\uff0c\u5c06\u4f1a\u89e6\u53d1\u975e\u6cd5\u6307\u4ee4\u5f02\u5e38\uff0c\u8fd9\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u6bd5\u7adf\u662fS\u6a21\u5f0f\u7684\u6307\u4ee4 \u5f53mstatus\u4e2d\u7684TVM\u4f4d\u7f6e\u4f4d\u65f6\uff0c\u5c06\u4f1a\u4ea7\u751f\u975e\u6cd5\u6307\u4ee4\u5f02\u5e38\uff0c\u8fd9\u662f\u4e00\u79cd\u963b\u65ad\u673a\u5236 pte\u4e2d\u7684\u6807\u5fd7\u4f4d \u00b6 V: \u6807\u8bc6pte\u662f\u5426\u6709\u6548 RWX: \u8bfb\u3001\u5199\u3001\u6267\u884c\u6743\u9650\u4f4d\uff0c\u8fd9\u9700\u8981\u6839\u636eaccess\u7c7b\u578b\u6765\u5224\u5b9a\uff0c\u5982\u679c\u8fd9\u4e09\u8005\u5747\u4e3a0\uff0c\u5219\u8fd9\u4e2a\u8868\u9879\u6240\u5bf9\u5e94\u7684\u662f\u4e0b\u4e00\u7ea7\u9875\u8868\uff0c\u4e0d\u7136\u7684\u8bdd\uff0c\u8fd9\u5c31\u662f\u9875\u8868\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u5f88\u663e\u7136\uff0c\u5982\u679cPPN[2]\u6216\u8005PPN[1]\u5982\u679c\u6307\u5411\u4e86\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u4f1a\u6709\u6bd44KB\u66f4\u5927\u7684\u9875\u51fa\u73b0\u3002\u5982\u679c\u6743\u9650\u4e0d\u591f\u5c31\u4f1a\u89e6\u53d1\u5f02\u5e38\uff0cfetch/load/store page-fault exception\u5c06\u4f1a\u6839\u636e\u4e0d\u540c\u6807\u8bc6\u4f4d\u89e6\u53d1\u3002\u53efW\u7684\u9875\u5fc5\u987b\u6807\u8bb0\u4e3a\u53efR U: user\u6a21\u5f0f\u8bbf\u95ee\u6807\u8bc6\uff0cuser\u6a21\u5f0f\u53ea\u80fd\u8bbf\u95eeU\u6807\u8bc6\u7684\u9875\uff0c\u5e76\u4e14\u5728sstatus\u4e2d\u7684SUM\u6ca1\u6709\u7f6e\u4f4d\u7684\u60c5\u51b5\u4e0b\uff0cS\u6a21\u5f0f\u4e0d\u80fd\u8bbf\u95eeU\u6807\u8bc6\u9875\u3002\u5373\u4fbfSUM\u7f6e\u4f4d\uff0cS\u6a21\u5f0f\u4e5f\u4e0d\u80fd\u6267\u884cU\u6807\u8bc6\u7684\u9875\u3002\u4e3a\u5565\u6ca1\u6709\u63d0M\u6a21\u5f0f\uff1fM\u6a21\u5f0f\u4e0d\u542f\u7528MMU G: G\u6807\u8bc6\u4e0eTLB\u6709\u5173\uff0c\u5b83\u6807\u8bc6\u9875\u662f\u5168\u5c40\u7684\uff0c\u6bd4\u5982linux\u5185\u6838\uff0c\u8fd9\u6837\u80fd\u591f\u63d0\u9ad8TLB\u7684\u5229\u7528\u6548\u7387\uff0c\u8fd9\u4e2a\u4f1a\u548cASID\u4e00\u6837\uff0c\u5728TLB\u7ae0\u8282\u4e2d\u8bb2\u8ff0 A: access\u6807\u8bc6\uff0c\u81ea\u4ece\u4e0a\u6b21\u88ab\u6e05\u6389\u4e4b\u540e\uff0c\u5bf9\u5e94\u7269\u7406\u9875\u662f\u5426\u6709\u88ab\u8bfb/\u5199/\u6267\u884c D: dirty\u6807\u8bc6\uff0c\u81ea\u4ece\u4e0a\u6b21\u88ab\u6e05\u6389\u4e4b\u540e\uff0c\u5bf9\u5e94\u7269\u7406\u9875\u6709\u6ca1\u6709\u88ab\u5199 RSW: \u4fdd\u7559\u7ed9\u8f6f\u4ef6\uff0c\u786c\u4ef6\u4f1a\u5ffd\u7565\uff0clinux\u5185\u6838\u7528\u4e86\u5417\uff1f \u5173\u4e8eA\u548cD\u7684\u4f7f\u7528\uff0c\u624b\u518c\u4e2d\u6709\u4e24\u4e2a\u65b9\u6848\uff0c\u6a21\u62df\u5668\u4e2d\u9009\u62e9\u4e86\u540e\u8005 Two schemes to manage the A and D bits are permitted: \u2022 When a virtual page is accessed and the A bit is clear, or is written and the D bit is clear, a page-fault exception is raised. \u2022 When a virtual page is accessed and the A bit is clear, or is written and the D bit is clear, the implementation sets the corresponding bit(s) in the PTE. The PTE update must be atomic with respect to other accesses to the PTE, and must atomically check that the PTE is valid and grants sufficient permissions. The PTE update must be exact (i.e., not speculative), and observed in program order by the local hart. Furthermore, the PTE update must appear in the global memory order no later than the explicit memory access, or any subsequent explicit memory access to that virtual page by the local hart. The ordering on loads and stores provided by FENCE instructions and the acquire/release bits on atomic instructions also orders the PTE updates associated with those loads and stores as observed by remote harts. The PTE update is not required to be atomic with respect to the explicit memory access that caused the update, and the sequence is interruptible. However, the hart must not perform the explicit memory access before the PTE update is globally visible. \u5173\u4e8eA/D\u4f4d\u7684\u8be6\u7ec6\u7528\u6cd5\uff0c\u540e\u7eed\u8fd8\u5e94\u8be5\u8865\u5145 \u6700\u7ec8\u7684\u7269\u7406\u5730\u5740\u7684\u8ba1\u7b97 \u00b6 \u5982\u679cVPN[2] \u6216 VPN[1] \u5bf9\u5e94\u7684\u9875\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u4f1a\u4ea7\u751f\u6bd44KB\u66f4\u5927\u7684\u9875\uff0c\u8fd9\u65f6\uff0c\u5bf9\u4e8e\u6700\u7ec8\u7269\u7406\u5730\u5740\u7684\u8ba1\u7b97\uff0c\u5c31\u8981\u5c06 VPN \u548c PPN \u8fdb\u884c\u5bf9\u5e94 If i > 0, then this is a superpage translation and pa.ppn[i \u27e9 1 : 0] = va.vpn[i \u27e9 1 : 0]. \u591a\u5904\u7406\u5668\u7684\u5730\u5740\u7f13\u5b58\u4e00\u81f4\u6027 \u00b6 sfence.vma \u4ec5\u5f71\u54cd\u6267\u884c\u5f53\u524d\u6307\u4ee4\u7684 hart \u7684\u5730\u5740\u8f6c\u6362\u786c\u4ef6\u3002\u5f53 hart \u66f4\u6539\u4e86\u53e6\u4e00\u4e2a hart \u6b63\u5728\u4f7f \u7528\u7684\u9875\u8868\u65f6,\u524d\u4e00\u4e2a hart \u5fc5\u987b\u7528\u5904\u7406\u5668\u95f4\u4e2d\u65ad\u6765\u901a\u77e5\u540e\u4e00\u4e2ahart,\u4ed6\u5e94\u8be5\u6267\u884c sfence.vma \u6307\u4ee4\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u901a\u5e38\u88ab\u79f0\u4e3a TLB \u51fb\u843d(shutdown)\u3002 \u90a3\u8fd9\u4e2a\u8fc7\u7a0b\u5230\u5e95\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u5462\uff1f \u5c06\u6765\u5355\u5f00\u4e00\u4e2a\u7ae0\u8282\u6765\u63cf\u8ff0","title":"RISCV\u865a\u62df\u5185\u5b58\u7ba1\u7406"},{"location":"riscv/virtual_mem_manage.html#riscv","text":"RISCV\u865a\u62df\u5185\u5b58\u7ba1\u7406 \u8bbe\u8ba1\u63cf\u8ff0 \u5b9e\u73b0\u539f\u7406 \u9875\u548c\u9875\u8868\u548c\u9875\u8868\u9879 \u865a\u62df\u5730\u5740 \u7269\u7406\u5730\u5740 satp\u5bc4\u5b58\u5668 \u8f6c\u6362\u8fc7\u7a0b MMU\u7684\u542f\u52a8\u6761\u4ef6 \u6a21\u62df\u5668\u5b9e\u73b0 \u7ec6\u8282\u63cf\u8ff0 sfence.vma pte\u4e2d\u7684\u6807\u5fd7\u4f4d \u6700\u7ec8\u7684\u7269\u7406\u5730\u5740\u7684\u8ba1\u7b97 \u591a\u5904\u7406\u5668\u7684\u5730\u5740\u7f13\u5b58\u4e00\u81f4\u6027 \u865a\u62df\u5185\u5b58\u7ba1\u7406\u7684\u4e3b\u8981\u5355\u5143\u662fMMU,\u8fd9\u91cc\u5bf9RISCV\u5b98\u65b9spec\u4e2d\u63d0\u5230\u7684S\u6a21\u5f0f\u865a\u62df\u5185\u5b58\u7ba1\u7406\u505a\u4e00\u4e0b\u603b\u7ed3\u3002\u5185\u5bb9\u4f9d\u636eRISCV privileged ArchitectureV1.12 RISCV\u7684S\u6a21\u5f0f\u4f7f\u7528\u5206\u9875\u673a\u5236\u6765\u7ba1\u7406\u5185\u5b58\uff0c\u53ef\u4ee5\u652f\u6301Sv32,Sv39\u7b49\u591a\u79cd\u5206\u9875\u65b9\u5f0f\uff0c\u8fd9\u91cc\u4ee5Sv39\u4e3e\u4f8b\u6765\u8fdb\u884c\u5206\u6790 \u540c\u65f6\uff0c\u8fd9\u91cc\u4e0d\u5bf9H\u6269\u5c55\u6d89\u53ca\u7684\u5185\u5bb9\u505a\u4ecb\u7ecd","title":"RISCV\u865a\u62df\u5185\u5b58\u7ba1\u7406"},{"location":"riscv/virtual_mem_manage.html#_1","text":"","title":"\u8bbe\u8ba1\u63cf\u8ff0"},{"location":"riscv/virtual_mem_manage.html#_2","text":"RISCV\u4f7f\u7528\u5206\u9875\u673a\u5236\u6765\u8fdb\u884c\u5185\u5b58\u7ba1\u7406\uff0c\u5206\u9875\u673a\u5236\u7684\u6838\u5fc3\u5728\u4e8e\u591a\u7ea7\u9875\u8868\u3002\u591a\u7ea7\u9875\u8868\uff0c\u901a\u8fc7\u5c06\u865a\u62df\u5730\u5740\u5212\u5206\u4e3a\u591a\u4e2aindex, \u4ece\u800c\u4f7f\u5f97\u9875\u8868\u4e4b\u95f4\u4e0d\u9700\u8981\u8fde\u7eed\uff0c\u8fd9\u6837\u9875\u8868\u7684\u5b58\u653e\u5c31\u4f1a\u7075\u6d3b\u3002\u540c\u65f6\uff0c\u5f53\u8f6f\u4ef6\u9700\u8981\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u5f88\u5c0f\u65f6\uff0c\u8fd9\u5c06\u5927\u5927\u8282\u7701\u9875\u8868\u5bf9\u5185\u5b58\u7684\u5360\u7528\u3002","title":"\u5b9e\u73b0\u539f\u7406"},{"location":"riscv/virtual_mem_manage.html#_3","text":"Sv39\u5c06\u4e00\u4e2a\u7269\u7406\u9875\u8bbe\u8ba1\u4e3a4KB\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u662f\u865a\u62df\u5730\u5740\u7ba1\u7406\u7684\u6700\u5c0f\u5355\u4f4d\u3002 \u9875\u8868\uff0c\u662f\u9875\u8868\u9879\u7ec4\u6210\u7684\u4e00\u4e2a\u8868\uff0c\u9875\u8868\u9879\uff08pte\uff09\u4e2d\u4e3b\u8981\u5b58\u653e\u7684\u662f\u7269\u7406\u9875\u5730\u5740\u3002 PPN\u662f\u6307\u7269\u7406\u9875\u53f7\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u628aPPN[2] ~ PPN[0]\u7406\u89e3\u4e3a\u7269\u7406\u9875\u7684\u57fa\u5730\u5740\uff0c\u8fd9\u5df2\u7ecf\u5360\u7528\u4e8644bit\u7684\u7a7a\u95f4\uff0c\u4e3a\u4e86\u4e00\u4e9b\u6743\u9650\u7ba1\u7406\uff0c\u53c8\u6dfb\u52a0\u4e86\u4e00\u4e9b\u6807\u5fd7\u4f4d\uff0c\u8fd9\u4e9b\u6807\u5fd7\u5728\u6700\u540e\u5c06\u4f1a\u518d\u8be6\u7ec6\u63cf\u8ff0\u3002 \u65e2\u7136\u5728\u7269\u7406\u5730\u5740\u4e0a\u8fdb\u884c\u4e86\u9875\u7684\u5212\u5206\uff0c\u90a3\u4e48\u6211\u4eec\u662f\u4e0d\u662f\u80fd\u5c3d\u53ef\u80fd\u7684\u5728\u8fd9\u4e00\u9875\u4e2d\u6765\u8bbe\u8ba1\u5c3d\u53ef\u80fd\u591a\u7684\u9875\u8868\u8868\u9879\u5462\uff0c\u8fd9\u6837\u7684\u597d\u5904\u662f\u9875\u8868\u672c\u8eab\u4e5f\u5360\u4e00\u4e2a\u7269\u7406\u9875\uff0c\u7ba1\u7406\u65b9\u4fbf\u3002\u663e\u7136\uff0c\u4e00\u4e2a\u9875\u8868\u987932bit\u662f\u4e0d\u591f\u7684\uff0c\u4e3a\u4e86\u5bf9\u9f50\uff0c\u90a3\u4e48\u4e00\u4e2a\u9875\u8868\u9879\u5e94\u8be5\u5360\u752864bit\u3002\u8fd9\u6837\u5728\u4e00\u4e2a4KB\u7684\u9875\u8868\u4e2d\uff0c\u53ea\u80fd\u5b58\u653e512\u4e2a\u9875\u8868\u9879\uff0c\u56e0\u6b64\u5728\u865a\u62df\u5730\u5740\u4e2d\u7684VPN(\u865a\u62df\u9875\u8868\u9879\u53f7)\u9700\u89819bit\u3002","title":"\u9875\u548c\u9875\u8868\u548c\u9875\u8868\u9879"},{"location":"riscv/virtual_mem_manage.html#_4","text":"\u6240\u8c13Sv39\u4e5f\u5c31\u662f\u53ea\u7528\u4e8639bit\u6765\u8868\u793a\u5730\u5740\u7a7a\u95f4\uff0c\u8fd9\u5df2\u7ecf\u9ad8\u8fbe512GB\u4e86\uff0c\u8db3\u591f\u4f7f\u7528\u3002\uff0cVPN\u5373\u4e3a\u865a\u62df\u9875\u53f7\uff0c\u53ef\u4ee5\u770b\u51fa\u5206\u4e863\u7ea7\u3002\u4ece\u5bf9\u4e8e\u9875\u8868\u9879\u7684\u5206\u6790\u4e2d\u5c31\u5df2\u7ecf\u4e86\u89e3\u5230\uff0c\u6bcf\u4e00\u7ea7\u9875\u8868\u9700\u89819bit\u7684index\u6765\u67e5\u627e\u3002 \u8fd9\u6837\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u865a\u62df\u5730\u5740\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e09\u4e2aVPN\u5bf9\u5e94\u5230\u4e00\u4e2a\u5177\u4f53\u7684PTE\u4e0a\uff0cPTE\u4e2d\u5b58\u653e\u4e86\u7269\u7406\u9875\u53f7\uff0c\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u4e00\u4e2a\u865a\u62df\u9875\u5230\u7269\u7406\u9875\u7684\u5bf9\u5e94\u3002 \u90a3\u4e48\u5206\u7ea7\u7684\u597d\u5904\u4f53\u73b0\u5728\u54ea\u91cc\uff1f\u4ece\u5168\u90e8\u6620\u5c04\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u5206\u7ea7\u82b1\u8d39\u4e86\u66f4\u591a\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5373\u5c06VPN[2], VPN[1], VPN[0]\u5408\u5e76\u6210\u4e00\u4e2a\u5927\u768427bit\u7684VPN\uff0c\u9875\u8868\u5360\u7528\u7684\u7a7a\u95f4\u6700\u5c0f\u3002\u4f46\u8fd9\u6700\u5927\u7684\u7f3a\u70b9\u5728\u4e8e\u8981\u6c42\u9875\u8868\u5730\u5740\u8fde\u7eed\u3002\u5b9e\u9645\u4e0a\uff0c\u6ca1\u6709\u5168\u6620\u5c04\u8fd9\u79cd\u5e94\u7528\u3002\u5f88\u6709\u53ef\u80fd\u4e00\u4e2a64bit\u7684CPU\u53ea\u642d\u914d\u4e86\u4e00\u4e2a2G\u7684\u7269\u7406\u5185\u5b58\uff0c\u52a0\u4e0a\u5176\u4ed6\u5916\u8bbe\u5730\u5740\u7a7a\u95f4\uff0c\u4e5f\u4e0d\u4f1a\u592a\u5927\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c31\u4f53\u73b0\u4e86\u5206\u7ea7\u7684\u597d\u5904\uff0c\u53ef\u4ee5\u505a\u5230\u6309\u9700\u5206\u914d\uff0c\u62d2\u7edd\u6d6a\u8d39\u3002","title":"\u865a\u62df\u5730\u5740"},{"location":"riscv/virtual_mem_manage.html#_5","text":"\u7269\u7406\u5730\u5740\u6ca1\u6709\u592a\u591a\u9700\u8981\u89e3\u91ca\u7684\uff0c\u4f46\u5b83\u4e5f\u5212\u5206\u4e86\u4e09\u7ea7\u7269\u7406\u9875\u53f7\u7684\u610f\u4e49\u662f\u4ec0\u4e48\u5462\uff1f \u4e2a\u4eba\u8ba4\u4e3a\uff0c\u8fd9\u662f\u4e3a\u4e86\u5de8\u9875\u800c\u8bbe\u8ba1\u7684\uff0c\u5b83\u4f53\u73b0\u5728IC\u5b9e\u73b0\u4e0a\uff0c\u5f53PPN[2]\u5373\u4e3a\u53f6\u5b50\u8282\u70b9\u65f6\uff0c\u90a3\u4e48PPN[1] = VPN[1], PPN[0] = VPN[0]","title":"\u7269\u7406\u5730\u5740"},{"location":"riscv/virtual_mem_manage.html#satp","text":"satp\u5bc4\u5b58\u5668\u6307\u5411\u4e86\u521d\u7ea7\u9875\u8868\uff0c\u5e76\u4e14\u5b83\u63a7\u5236\u4e86MMU\u7684\u5f00\u542f\u548c\u7ba1\u7406\u65b9\u6848\u3002ASID\u4e0eTLB\u6709\u5173\uff0c\u8f6f\u4ef6\u53ef\u4ee5\u7ed9\u4e0d\u540c\u8fdb\u7a0b\u5206\u914d\u4e0d\u540c\u7684ASID, \u66f4\u5177\u4f53\u7684\u4f1a\u5728TLB\u7ae0\u8282\u4e2d\u63cf\u8ff0 \u5173\u4e8esatp\u5bc4\u5b58\u5668\u7684\u5199\u5165\u903b\u8f91 Volume II: RISC-V Privileged Architectures V1.12-draft Note that writing satp does not imply any ordering constraints between page-table updates and subsequent address translations. If the new address space\u2019s page tables have been modified, or if an ASID is reused, it may be necessary to execute an SFENCE.VMA instruction (see Section 4.2.1) after writing satp Not imposing upon implementations to flush address-translation caches upon satp writes reduces the cost of context switches, provided a sufficiently large ASID space. \u901a\u8fc7\u63cf\u8ff0\u6765\u770b\uff0c\u6307\u4ee4\u96c6\u67b6\u6784\u6ca1\u6709\u7ea6\u675f\u5199\u5165satp\u540e\uff0c\u82af\u7247\u8981\u8fdb\u884ctlb_flush\u64cd\u4f5c\uff0c\u8fd9\u91cc\u5efa\u8bae\u4e0d\u5f3a\u5236\u52a0\u5165 tlb_flush,\u4ee5\u52a0\u901f\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u9700\u8981\u65f6\u5e94\u8be5\u4f7f\u7528sfence.vma\u6765\u5237\u65b0tlb\u3002\u4f46\u5b9e\u9645\u4e0a\u7531\u4e8e\u65e0\u6cd5\u5bf9\u8f6f\u4ef6\u505a\u7ea6\u675f\uff0c \u5f88\u591a\u5382\u5546\u9009\u62e9\u5728\u5199\u5165satp\u65f6\u4e3b\u52a8flush TLB \u9664\u6b64\u4e4b\u5916\uff0c\u867d\u7136satp\u662f\u4e00\u4e2aS\u6001\u5bc4\u5b58\u5668\uff0c\u4f46\u6ca1\u6709\u89c4\u5b9aU\u548cM\u6a21\u5f0f\u4e0d\u53ef\u4ee5\u5199\u5165","title":"satp\u5bc4\u5b58\u5668"},{"location":"riscv/virtual_mem_manage.html#_6","text":"\u7565","title":"\u8f6c\u6362\u8fc7\u7a0b"},{"location":"riscv/virtual_mem_manage.html#mmu","text":"CPU\u4e0d\u5904\u4e8eM\u6001 satp\u5bc4\u5b58\u5668\u4e2d\u4f7f\u80fd\u4e86MMU","title":"MMU\u7684\u542f\u52a8\u6761\u4ef6"},{"location":"riscv/virtual_mem_manage.html#_7","text":"\u9875\u8868\u67e5\u627e\u8fc7\u7a0b\u5f88\u9002\u5408\u9012\u5f52","title":"\u6a21\u62df\u5668\u5b9e\u73b0"},{"location":"riscv/virtual_mem_manage.html#_8","text":"","title":"\u7ec6\u8282\u63cf\u8ff0"},{"location":"riscv/virtual_mem_manage.html#sfencevma","text":"\u865a\u62df\u5730\u5740\u5c4f\u969c\u6307\u4ee4,\u9700\u8981\u6ce8\u610fsfence.vma\u548ctlb flush\u4e0d\u5b8c\u5168\u4e00\u6837\uff0csfence.vma\u53ef\u4ee5\u6839\u636e\u53c2\u6570\u6765\u786e\u5b9a\u5177\u4f53\u884c\u4e3a sfence.vma \u6267\u884c\u4f1a\u53d7\u5230\u4e00\u4e9b\u72b6\u6001\u7684\u5f71\u54cd \u4e0d\u5728S\u6001\u65f6\uff0c\u5c06\u4f1a\u89e6\u53d1\u975e\u6cd5\u6307\u4ee4\u5f02\u5e38\uff0c\u8fd9\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u6bd5\u7adf\u662fS\u6a21\u5f0f\u7684\u6307\u4ee4 \u5f53mstatus\u4e2d\u7684TVM\u4f4d\u7f6e\u4f4d\u65f6\uff0c\u5c06\u4f1a\u4ea7\u751f\u975e\u6cd5\u6307\u4ee4\u5f02\u5e38\uff0c\u8fd9\u662f\u4e00\u79cd\u963b\u65ad\u673a\u5236","title":"sfence.vma"},{"location":"riscv/virtual_mem_manage.html#pte","text":"V: \u6807\u8bc6pte\u662f\u5426\u6709\u6548 RWX: \u8bfb\u3001\u5199\u3001\u6267\u884c\u6743\u9650\u4f4d\uff0c\u8fd9\u9700\u8981\u6839\u636eaccess\u7c7b\u578b\u6765\u5224\u5b9a\uff0c\u5982\u679c\u8fd9\u4e09\u8005\u5747\u4e3a0\uff0c\u5219\u8fd9\u4e2a\u8868\u9879\u6240\u5bf9\u5e94\u7684\u662f\u4e0b\u4e00\u7ea7\u9875\u8868\uff0c\u4e0d\u7136\u7684\u8bdd\uff0c\u8fd9\u5c31\u662f\u9875\u8868\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u5f88\u663e\u7136\uff0c\u5982\u679cPPN[2]\u6216\u8005PPN[1]\u5982\u679c\u6307\u5411\u4e86\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u4f1a\u6709\u6bd44KB\u66f4\u5927\u7684\u9875\u51fa\u73b0\u3002\u5982\u679c\u6743\u9650\u4e0d\u591f\u5c31\u4f1a\u89e6\u53d1\u5f02\u5e38\uff0cfetch/load/store page-fault exception\u5c06\u4f1a\u6839\u636e\u4e0d\u540c\u6807\u8bc6\u4f4d\u89e6\u53d1\u3002\u53efW\u7684\u9875\u5fc5\u987b\u6807\u8bb0\u4e3a\u53efR U: user\u6a21\u5f0f\u8bbf\u95ee\u6807\u8bc6\uff0cuser\u6a21\u5f0f\u53ea\u80fd\u8bbf\u95eeU\u6807\u8bc6\u7684\u9875\uff0c\u5e76\u4e14\u5728sstatus\u4e2d\u7684SUM\u6ca1\u6709\u7f6e\u4f4d\u7684\u60c5\u51b5\u4e0b\uff0cS\u6a21\u5f0f\u4e0d\u80fd\u8bbf\u95eeU\u6807\u8bc6\u9875\u3002\u5373\u4fbfSUM\u7f6e\u4f4d\uff0cS\u6a21\u5f0f\u4e5f\u4e0d\u80fd\u6267\u884cU\u6807\u8bc6\u7684\u9875\u3002\u4e3a\u5565\u6ca1\u6709\u63d0M\u6a21\u5f0f\uff1fM\u6a21\u5f0f\u4e0d\u542f\u7528MMU G: G\u6807\u8bc6\u4e0eTLB\u6709\u5173\uff0c\u5b83\u6807\u8bc6\u9875\u662f\u5168\u5c40\u7684\uff0c\u6bd4\u5982linux\u5185\u6838\uff0c\u8fd9\u6837\u80fd\u591f\u63d0\u9ad8TLB\u7684\u5229\u7528\u6548\u7387\uff0c\u8fd9\u4e2a\u4f1a\u548cASID\u4e00\u6837\uff0c\u5728TLB\u7ae0\u8282\u4e2d\u8bb2\u8ff0 A: access\u6807\u8bc6\uff0c\u81ea\u4ece\u4e0a\u6b21\u88ab\u6e05\u6389\u4e4b\u540e\uff0c\u5bf9\u5e94\u7269\u7406\u9875\u662f\u5426\u6709\u88ab\u8bfb/\u5199/\u6267\u884c D: dirty\u6807\u8bc6\uff0c\u81ea\u4ece\u4e0a\u6b21\u88ab\u6e05\u6389\u4e4b\u540e\uff0c\u5bf9\u5e94\u7269\u7406\u9875\u6709\u6ca1\u6709\u88ab\u5199 RSW: \u4fdd\u7559\u7ed9\u8f6f\u4ef6\uff0c\u786c\u4ef6\u4f1a\u5ffd\u7565\uff0clinux\u5185\u6838\u7528\u4e86\u5417\uff1f \u5173\u4e8eA\u548cD\u7684\u4f7f\u7528\uff0c\u624b\u518c\u4e2d\u6709\u4e24\u4e2a\u65b9\u6848\uff0c\u6a21\u62df\u5668\u4e2d\u9009\u62e9\u4e86\u540e\u8005 Two schemes to manage the A and D bits are permitted: \u2022 When a virtual page is accessed and the A bit is clear, or is written and the D bit is clear, a page-fault exception is raised. \u2022 When a virtual page is accessed and the A bit is clear, or is written and the D bit is clear, the implementation sets the corresponding bit(s) in the PTE. The PTE update must be atomic with respect to other accesses to the PTE, and must atomically check that the PTE is valid and grants sufficient permissions. The PTE update must be exact (i.e., not speculative), and observed in program order by the local hart. Furthermore, the PTE update must appear in the global memory order no later than the explicit memory access, or any subsequent explicit memory access to that virtual page by the local hart. The ordering on loads and stores provided by FENCE instructions and the acquire/release bits on atomic instructions also orders the PTE updates associated with those loads and stores as observed by remote harts. The PTE update is not required to be atomic with respect to the explicit memory access that caused the update, and the sequence is interruptible. However, the hart must not perform the explicit memory access before the PTE update is globally visible. \u5173\u4e8eA/D\u4f4d\u7684\u8be6\u7ec6\u7528\u6cd5\uff0c\u540e\u7eed\u8fd8\u5e94\u8be5\u8865\u5145","title":"pte\u4e2d\u7684\u6807\u5fd7\u4f4d"},{"location":"riscv/virtual_mem_manage.html#_9","text":"\u5982\u679cVPN[2] \u6216 VPN[1] \u5bf9\u5e94\u7684\u9875\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u4f1a\u4ea7\u751f\u6bd44KB\u66f4\u5927\u7684\u9875\uff0c\u8fd9\u65f6\uff0c\u5bf9\u4e8e\u6700\u7ec8\u7269\u7406\u5730\u5740\u7684\u8ba1\u7b97\uff0c\u5c31\u8981\u5c06 VPN \u548c PPN \u8fdb\u884c\u5bf9\u5e94 If i > 0, then this is a superpage translation and pa.ppn[i \u27e9 1 : 0] = va.vpn[i \u27e9 1 : 0].","title":"\u6700\u7ec8\u7684\u7269\u7406\u5730\u5740\u7684\u8ba1\u7b97"},{"location":"riscv/virtual_mem_manage.html#_10","text":"sfence.vma \u4ec5\u5f71\u54cd\u6267\u884c\u5f53\u524d\u6307\u4ee4\u7684 hart \u7684\u5730\u5740\u8f6c\u6362\u786c\u4ef6\u3002\u5f53 hart \u66f4\u6539\u4e86\u53e6\u4e00\u4e2a hart \u6b63\u5728\u4f7f \u7528\u7684\u9875\u8868\u65f6,\u524d\u4e00\u4e2a hart \u5fc5\u987b\u7528\u5904\u7406\u5668\u95f4\u4e2d\u65ad\u6765\u901a\u77e5\u540e\u4e00\u4e2ahart,\u4ed6\u5e94\u8be5\u6267\u884c sfence.vma \u6307\u4ee4\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u901a\u5e38\u88ab\u79f0\u4e3a TLB \u51fb\u843d(shutdown)\u3002 \u90a3\u8fd9\u4e2a\u8fc7\u7a0b\u5230\u5e95\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u5462\uff1f \u5c06\u6765\u5355\u5f00\u4e00\u4e2a\u7ae0\u8282\u6765\u63cf\u8ff0","title":"\u591a\u5904\u7406\u5668\u7684\u5730\u5740\u7f13\u5b58\u4e00\u81f4\u6027"},{"location":"riscv/wfi.html","text":"wfi\u9047\u5230\u7684\u95ee\u9898 \u00b6 wfi\u9047\u5230\u7684\u95ee\u9898 \u4e0d\u5fcd\u76f4\u89c6\u7684\u89e3\u51b3\u8fc7\u7a0b \u771f\u76f8\u7684\u8f6c\u6298\u70b9 \u771f\u76f8 \u81c6\u60f3\u7684\u89e3\u51b3\u8fc7\u7a0b \u81c6\u60f3\u7684\u89e3\u51b3\u8fc7\u7a0b\u4e00 \u81c6\u60f3\u7684\u89e3\u51b3\u8fc7\u7a0b\u4e8c \u603b\u7ed3 \u4eca\u5929\u5c06riscv-torture\u751f\u6210\u7684code\u8fd0\u884c\u5728spike\u4e0a\uff0c\u6211\u5728code\u4e2d\u52a0\u5165\u4e86wfi\u6307\u4ee4\uff0c\u53d1\u73b0sike\u5728\u8fd0\u884c\u65f6\u4f1aexception\uff0c\u5f00\u542fspike\u7684\u65e5\u5fd7\u529f\u80fd\uff0c\u53d1\u73b0\u5728\u6267\u884cwfi\u6307\u4ee4\u65f6\u4f1a\u62a5\u975e\u6cd5\u6307\u4ee4\u7684trap riscv-torture$ spike -l --ddr-size = 0xc0000000 --isa = RV32IMAFDCV +signature = output/test.spike.sig output/test ...... core 0 : 0x0000000000000508 ( 0x10500073 ) wfi core 0 : exception trap_illegal_instruction, epc 0x0000000000000508 core 0 : tval 0x0000000000000000 ...... \u5982\u4e0a\u5c31\u662f\u9047\u5230\u7684\u95ee\u9898\uff0c\u63a5\u4e0b\u6765\u662f\u6211\u8981\u63cf\u8ff0\u6211\u7684\u5b9e\u9645\u89e3\u51b3\u8fc7\u7a0b\uff0c\u8fd9\u662f\u4e00\u4e2a\u5341\u5206\u8822\u7684\u89e3\u51b3\u8fc7\u7a0b\uff0c\u81ea\u5df1\u56de\u60f3\u8d77\u6765\u90fd\u4e0d\u5fcd\u76f4\u89c6\uff0c\u4e3a\u4e86\u4e2d\u5408\u8fd9\u4e2a\u4e0d\u5fcd\u76f4\u89c6\u7684\u89e3\u51b3\u8fc7\u7a0b\uff0c\u6211\u4f1a\u5728\u6700\u540e\u518d\u7ed9\u51fa\u4e00\u4e2a\u6211\u8ba4\u4e3a\u6bd4\u8f83\u66f4\u9760\u8c31\u7684\u89e3\u51b3\u8fc7\u7a0b\uff08\u81c6\u60f3\u7684\u89e3\u51b3\u8fc7\u7a0b\uff09 \u4e0d\u5fcd\u76f4\u89c6\u7684\u89e3\u51b3\u8fc7\u7a0b \u00b6 \u4e3a\u4ec0\u4e48\u8981\u6dfb\u52a0wfi\u6307\u4ee4\u5462\uff0c\u56e0\u4e3awfi\u6307\u4ee4\u662f\u6211\u4eec\u81ea\u5df1\u5b9e\u73b0\u7684\u4e00\u4e2a\u6a21\u62df\u5668\u5e73\u53f0\u7684\u9000\u51fa\u6761\u4ef6\uff0c\u53d1\u8d77wfi\u6307\u4ee4\uff0c\u6a21\u62df\u5668\u5c06\u4f1a\u9000\u51fa\uff0c\u4e0d\u7136\u6a21\u62df\u5668\u5c06\u65e0\u6cd5\u9000\u51fa\u3002 \u6211\u4f7f\u7528riscv-cmodel_test\u662f\u80fd\u591f\u6b63\u5e38\u6267\u884cwfi\u6307\u4ee4\u7684\uff0c\u56e0\u4e3a\u6211\u53bb\u67e5\u770b\u4e86cmodel-test\u751f\u6210\u7684code\uff0c\u91cc\u9762\u786e\u5b9e\u5305\u542b\u4e86wfi\u6307\u4ee4\uff0c\u5e76\u4e14\u5728spike\u4e0a\u8fd0\u884c\u7684\u65f6\u5019\u4e0d\u4f1a\u62a5\u5f02\u5e38\u3002 \u8fd9\u4e2a\u65f6\u5019\u987a\u7406\u6210\u7ae0\u7684\u60f3\u5230\u6bd4\u5bf9riscv-torture\u548ccmodel-test\u751f\u6210\u7684\u4ee3\u7801\uff0c\u770b\u6709\u54ea\u4e9b\u4e0d\u4e00\u6837\u7684\u5730\u65b9\uff0c\u56e0\u4e3a\u6211\u521d\u6b65\u5224\u65ad\uff0c\u4e0espike\u5e94\u8be5\u5173\u7cfb\u4e0d\u5927\uff0cspike\u660e\u663e\u80fd\u591f\u5904\u7406wfi\u6307\u4ee4 \u901a\u8fc7\u6bd4\u5bf9\uff0c\u53d1\u73b0\u4e24\u8005code\u5728\u521d\u59cb\u5316\u63a7\u5236\u72b6\u6001\u5bc4\u5b58\u5668mstatus\u65f6\uff0c\u521d\u59cb\u5316\u7684\u6709\u4e9b\u5dee\u5f02 \u5176\u4e2dcmodel-test\u5b9e\u73b0\u5982\u4e0b li t0 , MSTATUS_FS | MSTATUS_XS csrs mstatus , t0 riscv-torture\u5b9e\u73b0\u5982\u4e0b li a0 , ( MSTATUS_VS & ( MSTATUS_VS >> 1 )) | ( MSTATUS_FS & ( MSTATUS_FS >> 1 )); csrs mstatus , a0 ; \u4e0d\u7ba1\u4e09\u4e03\u4e8c\u5341\u4e00\uff0c\u5148copy\u6210\u4e00\u6837\u7684\u8bd5\u8bd5\uff0c\u7ed3\u679c\u7136\u5e76\u5375...... \u6b64\u65f6\u624d\u60f3\u5230\u8981\u53bb\u624b\u518c\u91cc\u9762\u770b\u4e00\u4e0b\uff0c\u5230\u5e95\u8fd9\u70b9\u513f\u5dee\u5f02\u662f\u600e\u4e48\u56de\u4e8b\uff0c\u67e5\u770b\u6587\u6863\uff0c\u4e86\u89e3mstatus\u6307\u4ee4\uff0c\u6587\u6863\u4e2d\u63cf\u8ff0\u5982\u4e0b The FS[1:0] read/write field and the XS[1:0] read-only field are used to reduce the cost of context save and restore by setting and tracking the current state of the floating-point unit and any other user-mode extensions respectively. The FS field encodes the status of the floating-point unit, including the CSR fcsr and floating-point data registers f0\u2013f31, while the XS field encodes the status of additional user-mode extensions and associated state. These fields can be checked by a context switch routine to quickly determine whether a state save or restore is required \u8fd9\u4e2a\u4e0e\u6d6e\u70b9\u6269\u5c55\u548c\u5176\u4ed6\u6269\u5c55\u6709\u5173\uff0c\u4f3c\u4e4e\u4e5f\u6ca1wfi\u4ec0\u4e48\u4e8b\u513f\uff0c\u4f46\u4e0e\u6b64\u540c\u65f6\uff0c\u7a81\u53d1\u5947\u60f3\uff0c\u5982\u679c\u4e0d\u662f\u4e0e\u6269\u5c55\u6709\u5173\uff0c\u90a3\u662f\u4e0d\u662f\u4e0e\u7279\u6743\u6a21\u5f0f\u6709\u5173\u5462\uff0c\u8fd9\u4e2amstatus\u91cc\u9762\u7684MPP\u4e0d\u6b63\u662f\u6a21\u5f0f\u63a7\u5236\u5417 \u7ba1\u4ed6\u5462\uff0c\u5148\u8bd5\u4e00\u628a\uff0c\u4e8e\u662f\u6211\u628a\u4ee3\u7801\u6539\u6210\u4e86\u8fd9\u6837 li a0 , MSTATUS_FS | MSTATUS_XS | MSTATUS_MPP ; csrs mstatus , a0 ; \u778e\u732b\u78b0\u4e0a\u4e86\u6b7b\u8017\u5b50\uff0c\u7adf\u7136\u4e0d\u518d\u62a5\u5f02\u5e38\u4e86\uff0c\u95ee\u9898\u89e3\u51b3\u4e86...... \u771f\u76f8\u7684\u8f6c\u6298\u70b9 \u00b6 \u5982\u679c\u771f\u7684\u5c31\u8fd9\u4e48\u7ed3\u675f\u4e86\uff0c\u90a3\u6211\u771f\u7684\u662f\u8822\u5230\u5bb6\u4e86\uff0c\u5e78\u4e8f\u53c8\u662f\u968f\u673a\u7684\u8fdb\u884c\u4e86\u8fdb\u4e00\u6b65\u7684\u601d\u8003 cmodel-test\u751f\u6210\u7684\u4ee3\u7801\u4f3c\u4e4e\u6ca1\u6709\u8bbe\u7f6e\u673a\u5668\u6a21\u5f0f\u5427\uff0c\u641c\u7d22\u4e86\u6574\u4e2acmodel-test\u751f\u6210\u7684\u4ee3\u7801\uff0c\u786e\u5b9e\u6ca1\u6709\u914d\u7f6e\u673a\u5668\u6a21\u5f0f\u3002\u8fd9\u5c31\u5947\u602a\u4e86\uff0c\u540c\u6837\u662f\u6ca1\u6709\u914d\u7f6e\uff0criscv-torture\u751f\u6210\u7684\u4ee3\u7801wfi\u600e\u4e48\u5c31\u662f\u975e\u6cd5\u6307\u4ee4\u5462\uff1f \u518d\u53bb\u770b\u6587\u6863\uff0c\u641c\u7d22MPP\u76f8\u5173\u5185\u5bb9 M-mode is used for low-level access to a hardware platform and is the first mode entered at reset The machine level has the highest privileges and is the only mandatory privilege level for a RISC-V hardware platform. Code run in machine-mode (M-mode) is usually inherently trusted, as it has low-level access to the machine implementation. M-mode can be used to manage secure execution environments on RISC-V. User-mode (U-mode) and supervisor-mode (S-mode) are intended for conventional application and operating system usage respectively. \u901a\u8fc7\u5c06 mstatus.MPP \u8bbe\u7f6e\u4e3a U(\u5982\u56fe 10.5 \u6240\u793a,\u7f16\u7801\u4e3a 0),\u7136\u540e\u6267\u884c mret \u6307\u4ee4,\u8f6f\u4ef6\u53ef\u4ee5 \u4ece M \u6a21\u5f0f\u8fdb\u5165 U \u6a21\u5f0f mret ExceptionReturn(Machine) \u673a\u5668\u6a21\u5f0f\u5f02\u5e38\u8fd4\u56de(Machine-mode Exception Return). R-type, RV32I and RV64I \u7279\u6743\u67b6\u6784 \u4ece\u673a\u5668\u6a21\u5f0f\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u3002\u5c06 pc \u8bbe\u7f6e\u4e3a CSRs[mepc], \u5c06\u7279\u6743\u7ea7\u8bbe\u7f6e\u6210 CSRs[mstatus].MPP, CSRs[mstatus].MIE \u7f6e\u6210 CSRs[mstatus].MPIE, \u5e76\u4e14\u5c06 CSRs[mstatus].MPIE \u4e3a 1;\u5e76\u4e14,\u5982\u679c\u652f\u6301\u7528\u6237\u6a21\u5f0f,\u5219\u5c06 CSR [mstatus].MPP \u8bbe\u7f6e\u4e3a 0 \u604d\u7136\u5927\u609f, cpu\u4e0a\u7535\u590d\u4f4d\u7684\u65f6\u5019\u5c31\u662f\u673a\u5668\u6a21\u5f0f\uff0c\u6211\u4eec\u505a\u5fc5\u8981\u7684\u521d\u59cb\u5316\u4e4b\u540e\uff0c\u4f7f\u7528mret\u9000\u51fa\u673a\u5668\u6a21\u5f0f\uff0c\u8fdb\u5165\u5230\u5176\u4ed6\u7684\u6a21\u5f0f\uff0c\u4ee5\u4ece\u6a21\u5f0f\u4e0a\u4fdd\u8bc1\u7cfb\u7edf\u7684\u5b89\u5168\uff0c\u5f53\u7cfb\u7edf\u53d1\u751f\u5f02\u5e38\u65f6\uff0ccpu\u5207\u6362\u5230\u673a\u5668\u6a21\u5f0f\u6216\u8005\u7279\u6743\u6a21\u5f0f\uff0c\u5904\u7406\u5f02\u5e38\uff0c\u5904\u7406\u5b8c\u6210\u540e\u5207\u6362\u56de\u539f\u6765\u7684\u6a21\u5f0f \u56e0\u6b64\u5f88\u6709\u53ef\u80fdriscv-torture\u4f7f\u7528mret\u8fdb\u5165\u4e86U-mode, \u67e5\u770b\u4ee3\u7801\uff0c\u786e\u5b9e\u5982\u6b64\uff0c\u5728\u521d\u59cb\u5316\u5b8c\u590d\u4f4d\u5411\u91cf\u4e4b\u540e\uff0c\u8c03\u7528\u4e86mret\u9000\u51fa\u4e86\u673a\u5668\u6a21\u5f0f csrw mepc , t0 ; csrr a0 , mhartid ; mret ; \u6240\u4ee5\u731c\u60f3wfi\u53ea\u80fd\u5728\u673a\u5668\u6a21\u5f0f\u4e0b\u8c03\u7528\uff0c\u975e\u673a\u5668\u6a21\u5f0f\u4e0b\u5c31\u4f1a\u629b\u5f02\u5e38\uff1f\u5fc5\u987b\u5f97\u627e\u51fa\u6765\u8bc1\u636e\u624d\u884c\uff0c\u4e0d\u7136\u95ee\u9898\u8fd8\u662f\u4e0d\u5f7b\u5e95\uff08\u667a\u5546\u7ec8\u4e8e\u91cd\u65b0\u5360\u9886\u4e86\u9ad8\u5730......\uff09 \u4e3a\u4ec0\u4e48\u4e0d\u53bb\u770b\u4e00\u4e0bspike\u4ee3\u7801\u5462\uff0c\u6309\u7167\u4e0d\u9760\u8c31\u7684\u5957\u8def\uff0c\u5148\u641c\u4e00\u4e0btrap\u6253\u5370\u7684\u5730\u65b9 riscv-tools/riscv-isa-sim$ grep \", epc \" * -nR riscv/processor.cc:263: fprintf ( stderr, \"core %3d: exception %s, epc 0x%016\" PRIx64 \"\\n\" , void processor_t::take_trap ( trap_t & t , reg_t epc ) { if ( debug ) { fprintf ( stderr , \"core %3d: exception %s, epc 0x%016\" PRIx64 \" \\n \" , id , t . name (), epc ); if ( t . has_tval ()) fprintf ( stderr , \"core %3d: tval 0x%016\" PRIx64 \" \\n \" , id , t . get_tval ()); } \u5f97\u6709\u5730\u65b9\u53d1trap\u624d\u884c, \u641c\u7d22take_trap\u6253\u5370\u7684\u5730\u65b9\uff0c\u5982\u4e0b\u7701\u7565\u4e86step\u51fd\u6570\u4e2d\u7684\u4e00\u4e9b\u903b\u8f91\uff0c\u7559\u4e0b\u7684\u65b9\u4fbf\u6765\u7406\u89e3 void processor_t::step ( size_t n ) { ...... while ( n > 0 ) { ...... try { ...... pc = execute_insn ( this , pc , fetch ); ...... } catch ( trap_t & t ) { take_trap ( t , pc ); ...... } ...... } ...... } \u731c\u60f3trap \u5e94\u8be5\u662f\u901a\u8fc7throw\u53d1\u51fa\u6765\u7684\uff0c \u56e0\u4e3a\u4f7f\u7528catch\u63a5\u4f4f\u4e86trap\uff0c \u8fd9\u65f6\u7a81\u7136\u60f3\u8d77\u6765\uff0cspike\u6bcf\u4e2a\u6307\u4ee4\u90fd\u6709\u4e00\u4e2a\u5355\u72ec\u7684\u6587\u4ef6\u6765\u662f\u5b9e\u73b0\u5176\u903b\u8f91 require_privilege ( get_field ( STATE . mstatus , MSTATUS_TW ) ? PRV_M : PRV_S ); wfi (); // \u5b9a\u4e49\u7684\u5730\u65b9 #define require(x) if (unlikely(!(x))) throw trap_illegal_instruction(0) #define require_privilege(p) require(STATE.prv >= (p)) \u539f\u6765\u662f\u8fd9\u6837\uff0c\u7ec8\u4e8e\u6e05\u6670\u4e00\u4e9b\u4e86 \u771f\u76f8 \u00b6 spike\u5b9e\u73b0\u7684wfi\u6307\u4ee4\uff0c\u5728\u6267\u884c\u4e4b\u524d\u4f1a\u5224\u65admstatus\u5bc4\u5b58\u5668\u7684TW\u4f4d\uff0c\u4f3c\u4e4e\u901a\u8fc7\u8fd9\u4e2a\u5224\u65ad\u51fa\u4e86\u5f53\u524dCPU\u7684\u6743\u9650\u6a21\u5f0f\uff1f\u8fd9\u80af\u5b9a\u662fRISCV\u89c4\u5b9a\u4e86\uff0c\u7ee7\u7eed\u770b\u624b\u518c The TW (Timeout Wait) bit supports intercepting the WFI instruction (see Section 3.2.3). When TW=0, the WFI instruction is permitted in S-mode. When TW=1, if WFI is executed in S- mode, and it does not complete within an implementation-specific, bounded time limit, the WFI instruction causes an illegal instruction trap. The time limit may always be 0, in which case WFI always causes an illegal instruction trap in S-mode when TW=1. TW is hard-wired to 0 when S-mode is not supported. 3.2.3 Wait for Interrupt The Wait for Interrupt instruction (WFI) provides a hint to the implementation that the current hart can be stalled until an interrupt might need servicing. Execution of the WFI instruction can also be used to inform the hardware platform that suitable interrupts should preferentially be routed to this hart. WFI is available in all of the supported S and M privilege modes, and optionally available to U-mode for implementations that support U-mode interrupts. wfi while (noInterruptPending) idle \u7b49\u5f85\u4e2d\u65ad(Wait for Interrupt). R-type, RV32I and RV64I \u7279\u6743\u6307\u4ee4\u3002 \u5982\u679c\u6ca1\u6709\u5f85\u5904\u7406\u7684\u4e2d\u65ad,\u5219\u4f7f\u5904\u7406\u5668\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u3002 \u770b\u5b8c\u4e86\u4e4b\u540e\u53c8\u7cca\u6d82\u4e86\uff0c\u96be\u9053\u662f\u82f1\u6587\u4e0d\u597d\uff1f\uff1f\uff1f \u81c6\u60f3\u7684\u89e3\u51b3\u8fc7\u7a0b \u00b6 \u81c6\u60f3\u7684\u89e3\u51b3\u8fc7\u7a0b\u4e00 \u00b6 \u5148\u5728spike\u4e2d\u8fdb\u884c\u5b9a\u4f4d\uff0c\u5982\u679c\u80fd\u591f\u987a\u5229\u5b9a\u4f4d\u5230\u5728wfi\u6307\u4ee4\u4e2d\u8fdb\u884c\u7684\u5224\u65ad\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u4f1a\u53bb\u770b\u624b\u518c\uff0c\u8fd9\u65f6\u5019\u5c31\u4e86\u89e3\u5230\u6574\u4e2awfi\u6307\u4ee4\u7684\u63cf\u8ff0\uff0c\u81ea\u7136\u5c31\u77e5\u9053\u5e94\u8be5\u5de5\u4f5c\u5728\u673a\u5668\u6a21\u5f0f\uff0c\u7136\u540e\u518d\u53bb\u5206\u6790\u4e3a\u4ec0\u4e48cmodel-test\u751f\u6210\u7684\u4ee3\u7801wfi\u4e0d\u4f1a\u89e6\u53d1trap\uff0c \u8fdb\u800c\u4e86\u89e3\u5230mret\u7684\u95ee\u9898\uff0c\u6574\u4e2a\u95ee\u9898\u89e3\u51b3 \u81c6\u60f3\u7684\u89e3\u51b3\u8fc7\u7a0b\u4e8c \u00b6 \u76f4\u63a5\u53bb\u770b\u624b\u518c\uff0c\u4e86\u89e3\u5230wfi\u662f\u7279\u6743\u6307\u4ee4\uff0c\u518d\u53bb\u5206\u6790cmodel-test\u548criscv-torture\u751f\u6210\u4ee3\u7801\u4e0a\u7684\u5dee\u522b\uff0c\u8fdb\u800c\u4e86\u89e3\u5230mret,\u7136\u540e\u53c8\u4f1a\u5947\u602aspike\u662f\u5982\u4f55\u5224\u65ad\u7684\uff0c\u518d\u53bb\u770bspike\u4ee3\u7801\uff0c\u4e86\u89e3spike\u7684\u5904\u7406\u6d41\u7a0b\uff0c\u6574\u4e2a\u95ee\u9898\u89e3\u51b3 \u603b\u7ed3 \u00b6 \u5728cpu\u67b6\u6784\u65b9\u9762\u4ecd\u6709\u592a\u591a\u7684\u4e1c\u897f\u9700\u8981\u53bb\u4e86\u89e3\uff0c\u5c24\u5176\u662f\u73b0\u5728\u7528\u5230\u7684RISCV\u3002\u8ddf\u8e2a\u4ee3\u7801\uff0c\u5b9a\u4f4d\u95ee\u9898\u4ecd\u7136\u662f\u4e00\u4e2a\u9760\u8fd0\u6c14\u7684\u72b6\u6001\uff0c\u8fd8\u662f\u5e94\u8be5\u4e0d\u65ad\u7684\u8bad\u7ec3\uff0c\u79ef\u7d2f\u7ecf\u9a8c\uff0c\u603b\u7ed3\u51fa\u5b9a\u4f4d\u95ee\u9898\u7684\u4e00\u822c\u65b9\u6cd5\u3002\u503c\u5f97\u80af\u5b9a\u7684\u662f\u5df2\u7ecf\u5f00\u59cb\u80fd\u591f\u4e60\u60ef\u6027\u7684\u8fd0\u7528\u8c03\u8bd5\u624b\u6bb5\u6765\u8f85\u52a9\u5b9a\u4f4d\u95ee\u9898\uff0c\u6bd4\u5982\u5728spike\u5f02\u5e38\u7684\u65f6\u5019\uff0c\u80fd\u591f\u4ee5\u65e5\u5fd7\u6a21\u5f0f\u548cdebug\u6a21\u5f0f\u8fdb\u884c\u8c03\u8bd5\u3002","title":"wfi\u9047\u5230\u7684\u95ee\u9898"},{"location":"riscv/wfi.html#wfi","text":"wfi\u9047\u5230\u7684\u95ee\u9898 \u4e0d\u5fcd\u76f4\u89c6\u7684\u89e3\u51b3\u8fc7\u7a0b \u771f\u76f8\u7684\u8f6c\u6298\u70b9 \u771f\u76f8 \u81c6\u60f3\u7684\u89e3\u51b3\u8fc7\u7a0b \u81c6\u60f3\u7684\u89e3\u51b3\u8fc7\u7a0b\u4e00 \u81c6\u60f3\u7684\u89e3\u51b3\u8fc7\u7a0b\u4e8c \u603b\u7ed3 \u4eca\u5929\u5c06riscv-torture\u751f\u6210\u7684code\u8fd0\u884c\u5728spike\u4e0a\uff0c\u6211\u5728code\u4e2d\u52a0\u5165\u4e86wfi\u6307\u4ee4\uff0c\u53d1\u73b0sike\u5728\u8fd0\u884c\u65f6\u4f1aexception\uff0c\u5f00\u542fspike\u7684\u65e5\u5fd7\u529f\u80fd\uff0c\u53d1\u73b0\u5728\u6267\u884cwfi\u6307\u4ee4\u65f6\u4f1a\u62a5\u975e\u6cd5\u6307\u4ee4\u7684trap riscv-torture$ spike -l --ddr-size = 0xc0000000 --isa = RV32IMAFDCV +signature = output/test.spike.sig output/test ...... core 0 : 0x0000000000000508 ( 0x10500073 ) wfi core 0 : exception trap_illegal_instruction, epc 0x0000000000000508 core 0 : tval 0x0000000000000000 ...... \u5982\u4e0a\u5c31\u662f\u9047\u5230\u7684\u95ee\u9898\uff0c\u63a5\u4e0b\u6765\u662f\u6211\u8981\u63cf\u8ff0\u6211\u7684\u5b9e\u9645\u89e3\u51b3\u8fc7\u7a0b\uff0c\u8fd9\u662f\u4e00\u4e2a\u5341\u5206\u8822\u7684\u89e3\u51b3\u8fc7\u7a0b\uff0c\u81ea\u5df1\u56de\u60f3\u8d77\u6765\u90fd\u4e0d\u5fcd\u76f4\u89c6\uff0c\u4e3a\u4e86\u4e2d\u5408\u8fd9\u4e2a\u4e0d\u5fcd\u76f4\u89c6\u7684\u89e3\u51b3\u8fc7\u7a0b\uff0c\u6211\u4f1a\u5728\u6700\u540e\u518d\u7ed9\u51fa\u4e00\u4e2a\u6211\u8ba4\u4e3a\u6bd4\u8f83\u66f4\u9760\u8c31\u7684\u89e3\u51b3\u8fc7\u7a0b\uff08\u81c6\u60f3\u7684\u89e3\u51b3\u8fc7\u7a0b\uff09","title":"wfi\u9047\u5230\u7684\u95ee\u9898"},{"location":"riscv/wfi.html#_1","text":"\u4e3a\u4ec0\u4e48\u8981\u6dfb\u52a0wfi\u6307\u4ee4\u5462\uff0c\u56e0\u4e3awfi\u6307\u4ee4\u662f\u6211\u4eec\u81ea\u5df1\u5b9e\u73b0\u7684\u4e00\u4e2a\u6a21\u62df\u5668\u5e73\u53f0\u7684\u9000\u51fa\u6761\u4ef6\uff0c\u53d1\u8d77wfi\u6307\u4ee4\uff0c\u6a21\u62df\u5668\u5c06\u4f1a\u9000\u51fa\uff0c\u4e0d\u7136\u6a21\u62df\u5668\u5c06\u65e0\u6cd5\u9000\u51fa\u3002 \u6211\u4f7f\u7528riscv-cmodel_test\u662f\u80fd\u591f\u6b63\u5e38\u6267\u884cwfi\u6307\u4ee4\u7684\uff0c\u56e0\u4e3a\u6211\u53bb\u67e5\u770b\u4e86cmodel-test\u751f\u6210\u7684code\uff0c\u91cc\u9762\u786e\u5b9e\u5305\u542b\u4e86wfi\u6307\u4ee4\uff0c\u5e76\u4e14\u5728spike\u4e0a\u8fd0\u884c\u7684\u65f6\u5019\u4e0d\u4f1a\u62a5\u5f02\u5e38\u3002 \u8fd9\u4e2a\u65f6\u5019\u987a\u7406\u6210\u7ae0\u7684\u60f3\u5230\u6bd4\u5bf9riscv-torture\u548ccmodel-test\u751f\u6210\u7684\u4ee3\u7801\uff0c\u770b\u6709\u54ea\u4e9b\u4e0d\u4e00\u6837\u7684\u5730\u65b9\uff0c\u56e0\u4e3a\u6211\u521d\u6b65\u5224\u65ad\uff0c\u4e0espike\u5e94\u8be5\u5173\u7cfb\u4e0d\u5927\uff0cspike\u660e\u663e\u80fd\u591f\u5904\u7406wfi\u6307\u4ee4 \u901a\u8fc7\u6bd4\u5bf9\uff0c\u53d1\u73b0\u4e24\u8005code\u5728\u521d\u59cb\u5316\u63a7\u5236\u72b6\u6001\u5bc4\u5b58\u5668mstatus\u65f6\uff0c\u521d\u59cb\u5316\u7684\u6709\u4e9b\u5dee\u5f02 \u5176\u4e2dcmodel-test\u5b9e\u73b0\u5982\u4e0b li t0 , MSTATUS_FS | MSTATUS_XS csrs mstatus , t0 riscv-torture\u5b9e\u73b0\u5982\u4e0b li a0 , ( MSTATUS_VS & ( MSTATUS_VS >> 1 )) | ( MSTATUS_FS & ( MSTATUS_FS >> 1 )); csrs mstatus , a0 ; \u4e0d\u7ba1\u4e09\u4e03\u4e8c\u5341\u4e00\uff0c\u5148copy\u6210\u4e00\u6837\u7684\u8bd5\u8bd5\uff0c\u7ed3\u679c\u7136\u5e76\u5375...... \u6b64\u65f6\u624d\u60f3\u5230\u8981\u53bb\u624b\u518c\u91cc\u9762\u770b\u4e00\u4e0b\uff0c\u5230\u5e95\u8fd9\u70b9\u513f\u5dee\u5f02\u662f\u600e\u4e48\u56de\u4e8b\uff0c\u67e5\u770b\u6587\u6863\uff0c\u4e86\u89e3mstatus\u6307\u4ee4\uff0c\u6587\u6863\u4e2d\u63cf\u8ff0\u5982\u4e0b The FS[1:0] read/write field and the XS[1:0] read-only field are used to reduce the cost of context save and restore by setting and tracking the current state of the floating-point unit and any other user-mode extensions respectively. The FS field encodes the status of the floating-point unit, including the CSR fcsr and floating-point data registers f0\u2013f31, while the XS field encodes the status of additional user-mode extensions and associated state. These fields can be checked by a context switch routine to quickly determine whether a state save or restore is required \u8fd9\u4e2a\u4e0e\u6d6e\u70b9\u6269\u5c55\u548c\u5176\u4ed6\u6269\u5c55\u6709\u5173\uff0c\u4f3c\u4e4e\u4e5f\u6ca1wfi\u4ec0\u4e48\u4e8b\u513f\uff0c\u4f46\u4e0e\u6b64\u540c\u65f6\uff0c\u7a81\u53d1\u5947\u60f3\uff0c\u5982\u679c\u4e0d\u662f\u4e0e\u6269\u5c55\u6709\u5173\uff0c\u90a3\u662f\u4e0d\u662f\u4e0e\u7279\u6743\u6a21\u5f0f\u6709\u5173\u5462\uff0c\u8fd9\u4e2amstatus\u91cc\u9762\u7684MPP\u4e0d\u6b63\u662f\u6a21\u5f0f\u63a7\u5236\u5417 \u7ba1\u4ed6\u5462\uff0c\u5148\u8bd5\u4e00\u628a\uff0c\u4e8e\u662f\u6211\u628a\u4ee3\u7801\u6539\u6210\u4e86\u8fd9\u6837 li a0 , MSTATUS_FS | MSTATUS_XS | MSTATUS_MPP ; csrs mstatus , a0 ; \u778e\u732b\u78b0\u4e0a\u4e86\u6b7b\u8017\u5b50\uff0c\u7adf\u7136\u4e0d\u518d\u62a5\u5f02\u5e38\u4e86\uff0c\u95ee\u9898\u89e3\u51b3\u4e86......","title":"\u4e0d\u5fcd\u76f4\u89c6\u7684\u89e3\u51b3\u8fc7\u7a0b"},{"location":"riscv/wfi.html#_2","text":"\u5982\u679c\u771f\u7684\u5c31\u8fd9\u4e48\u7ed3\u675f\u4e86\uff0c\u90a3\u6211\u771f\u7684\u662f\u8822\u5230\u5bb6\u4e86\uff0c\u5e78\u4e8f\u53c8\u662f\u968f\u673a\u7684\u8fdb\u884c\u4e86\u8fdb\u4e00\u6b65\u7684\u601d\u8003 cmodel-test\u751f\u6210\u7684\u4ee3\u7801\u4f3c\u4e4e\u6ca1\u6709\u8bbe\u7f6e\u673a\u5668\u6a21\u5f0f\u5427\uff0c\u641c\u7d22\u4e86\u6574\u4e2acmodel-test\u751f\u6210\u7684\u4ee3\u7801\uff0c\u786e\u5b9e\u6ca1\u6709\u914d\u7f6e\u673a\u5668\u6a21\u5f0f\u3002\u8fd9\u5c31\u5947\u602a\u4e86\uff0c\u540c\u6837\u662f\u6ca1\u6709\u914d\u7f6e\uff0criscv-torture\u751f\u6210\u7684\u4ee3\u7801wfi\u600e\u4e48\u5c31\u662f\u975e\u6cd5\u6307\u4ee4\u5462\uff1f \u518d\u53bb\u770b\u6587\u6863\uff0c\u641c\u7d22MPP\u76f8\u5173\u5185\u5bb9 M-mode is used for low-level access to a hardware platform and is the first mode entered at reset The machine level has the highest privileges and is the only mandatory privilege level for a RISC-V hardware platform. Code run in machine-mode (M-mode) is usually inherently trusted, as it has low-level access to the machine implementation. M-mode can be used to manage secure execution environments on RISC-V. User-mode (U-mode) and supervisor-mode (S-mode) are intended for conventional application and operating system usage respectively. \u901a\u8fc7\u5c06 mstatus.MPP \u8bbe\u7f6e\u4e3a U(\u5982\u56fe 10.5 \u6240\u793a,\u7f16\u7801\u4e3a 0),\u7136\u540e\u6267\u884c mret \u6307\u4ee4,\u8f6f\u4ef6\u53ef\u4ee5 \u4ece M \u6a21\u5f0f\u8fdb\u5165 U \u6a21\u5f0f mret ExceptionReturn(Machine) \u673a\u5668\u6a21\u5f0f\u5f02\u5e38\u8fd4\u56de(Machine-mode Exception Return). R-type, RV32I and RV64I \u7279\u6743\u67b6\u6784 \u4ece\u673a\u5668\u6a21\u5f0f\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u3002\u5c06 pc \u8bbe\u7f6e\u4e3a CSRs[mepc], \u5c06\u7279\u6743\u7ea7\u8bbe\u7f6e\u6210 CSRs[mstatus].MPP, CSRs[mstatus].MIE \u7f6e\u6210 CSRs[mstatus].MPIE, \u5e76\u4e14\u5c06 CSRs[mstatus].MPIE \u4e3a 1;\u5e76\u4e14,\u5982\u679c\u652f\u6301\u7528\u6237\u6a21\u5f0f,\u5219\u5c06 CSR [mstatus].MPP \u8bbe\u7f6e\u4e3a 0 \u604d\u7136\u5927\u609f, cpu\u4e0a\u7535\u590d\u4f4d\u7684\u65f6\u5019\u5c31\u662f\u673a\u5668\u6a21\u5f0f\uff0c\u6211\u4eec\u505a\u5fc5\u8981\u7684\u521d\u59cb\u5316\u4e4b\u540e\uff0c\u4f7f\u7528mret\u9000\u51fa\u673a\u5668\u6a21\u5f0f\uff0c\u8fdb\u5165\u5230\u5176\u4ed6\u7684\u6a21\u5f0f\uff0c\u4ee5\u4ece\u6a21\u5f0f\u4e0a\u4fdd\u8bc1\u7cfb\u7edf\u7684\u5b89\u5168\uff0c\u5f53\u7cfb\u7edf\u53d1\u751f\u5f02\u5e38\u65f6\uff0ccpu\u5207\u6362\u5230\u673a\u5668\u6a21\u5f0f\u6216\u8005\u7279\u6743\u6a21\u5f0f\uff0c\u5904\u7406\u5f02\u5e38\uff0c\u5904\u7406\u5b8c\u6210\u540e\u5207\u6362\u56de\u539f\u6765\u7684\u6a21\u5f0f \u56e0\u6b64\u5f88\u6709\u53ef\u80fdriscv-torture\u4f7f\u7528mret\u8fdb\u5165\u4e86U-mode, \u67e5\u770b\u4ee3\u7801\uff0c\u786e\u5b9e\u5982\u6b64\uff0c\u5728\u521d\u59cb\u5316\u5b8c\u590d\u4f4d\u5411\u91cf\u4e4b\u540e\uff0c\u8c03\u7528\u4e86mret\u9000\u51fa\u4e86\u673a\u5668\u6a21\u5f0f csrw mepc , t0 ; csrr a0 , mhartid ; mret ; \u6240\u4ee5\u731c\u60f3wfi\u53ea\u80fd\u5728\u673a\u5668\u6a21\u5f0f\u4e0b\u8c03\u7528\uff0c\u975e\u673a\u5668\u6a21\u5f0f\u4e0b\u5c31\u4f1a\u629b\u5f02\u5e38\uff1f\u5fc5\u987b\u5f97\u627e\u51fa\u6765\u8bc1\u636e\u624d\u884c\uff0c\u4e0d\u7136\u95ee\u9898\u8fd8\u662f\u4e0d\u5f7b\u5e95\uff08\u667a\u5546\u7ec8\u4e8e\u91cd\u65b0\u5360\u9886\u4e86\u9ad8\u5730......\uff09 \u4e3a\u4ec0\u4e48\u4e0d\u53bb\u770b\u4e00\u4e0bspike\u4ee3\u7801\u5462\uff0c\u6309\u7167\u4e0d\u9760\u8c31\u7684\u5957\u8def\uff0c\u5148\u641c\u4e00\u4e0btrap\u6253\u5370\u7684\u5730\u65b9 riscv-tools/riscv-isa-sim$ grep \", epc \" * -nR riscv/processor.cc:263: fprintf ( stderr, \"core %3d: exception %s, epc 0x%016\" PRIx64 \"\\n\" , void processor_t::take_trap ( trap_t & t , reg_t epc ) { if ( debug ) { fprintf ( stderr , \"core %3d: exception %s, epc 0x%016\" PRIx64 \" \\n \" , id , t . name (), epc ); if ( t . has_tval ()) fprintf ( stderr , \"core %3d: tval 0x%016\" PRIx64 \" \\n \" , id , t . get_tval ()); } \u5f97\u6709\u5730\u65b9\u53d1trap\u624d\u884c, \u641c\u7d22take_trap\u6253\u5370\u7684\u5730\u65b9\uff0c\u5982\u4e0b\u7701\u7565\u4e86step\u51fd\u6570\u4e2d\u7684\u4e00\u4e9b\u903b\u8f91\uff0c\u7559\u4e0b\u7684\u65b9\u4fbf\u6765\u7406\u89e3 void processor_t::step ( size_t n ) { ...... while ( n > 0 ) { ...... try { ...... pc = execute_insn ( this , pc , fetch ); ...... } catch ( trap_t & t ) { take_trap ( t , pc ); ...... } ...... } ...... } \u731c\u60f3trap \u5e94\u8be5\u662f\u901a\u8fc7throw\u53d1\u51fa\u6765\u7684\uff0c \u56e0\u4e3a\u4f7f\u7528catch\u63a5\u4f4f\u4e86trap\uff0c \u8fd9\u65f6\u7a81\u7136\u60f3\u8d77\u6765\uff0cspike\u6bcf\u4e2a\u6307\u4ee4\u90fd\u6709\u4e00\u4e2a\u5355\u72ec\u7684\u6587\u4ef6\u6765\u662f\u5b9e\u73b0\u5176\u903b\u8f91 require_privilege ( get_field ( STATE . mstatus , MSTATUS_TW ) ? PRV_M : PRV_S ); wfi (); // \u5b9a\u4e49\u7684\u5730\u65b9 #define require(x) if (unlikely(!(x))) throw trap_illegal_instruction(0) #define require_privilege(p) require(STATE.prv >= (p)) \u539f\u6765\u662f\u8fd9\u6837\uff0c\u7ec8\u4e8e\u6e05\u6670\u4e00\u4e9b\u4e86","title":"\u771f\u76f8\u7684\u8f6c\u6298\u70b9"},{"location":"riscv/wfi.html#_3","text":"spike\u5b9e\u73b0\u7684wfi\u6307\u4ee4\uff0c\u5728\u6267\u884c\u4e4b\u524d\u4f1a\u5224\u65admstatus\u5bc4\u5b58\u5668\u7684TW\u4f4d\uff0c\u4f3c\u4e4e\u901a\u8fc7\u8fd9\u4e2a\u5224\u65ad\u51fa\u4e86\u5f53\u524dCPU\u7684\u6743\u9650\u6a21\u5f0f\uff1f\u8fd9\u80af\u5b9a\u662fRISCV\u89c4\u5b9a\u4e86\uff0c\u7ee7\u7eed\u770b\u624b\u518c The TW (Timeout Wait) bit supports intercepting the WFI instruction (see Section 3.2.3). When TW=0, the WFI instruction is permitted in S-mode. When TW=1, if WFI is executed in S- mode, and it does not complete within an implementation-specific, bounded time limit, the WFI instruction causes an illegal instruction trap. The time limit may always be 0, in which case WFI always causes an illegal instruction trap in S-mode when TW=1. TW is hard-wired to 0 when S-mode is not supported. 3.2.3 Wait for Interrupt The Wait for Interrupt instruction (WFI) provides a hint to the implementation that the current hart can be stalled until an interrupt might need servicing. Execution of the WFI instruction can also be used to inform the hardware platform that suitable interrupts should preferentially be routed to this hart. WFI is available in all of the supported S and M privilege modes, and optionally available to U-mode for implementations that support U-mode interrupts. wfi while (noInterruptPending) idle \u7b49\u5f85\u4e2d\u65ad(Wait for Interrupt). R-type, RV32I and RV64I \u7279\u6743\u6307\u4ee4\u3002 \u5982\u679c\u6ca1\u6709\u5f85\u5904\u7406\u7684\u4e2d\u65ad,\u5219\u4f7f\u5904\u7406\u5668\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u3002 \u770b\u5b8c\u4e86\u4e4b\u540e\u53c8\u7cca\u6d82\u4e86\uff0c\u96be\u9053\u662f\u82f1\u6587\u4e0d\u597d\uff1f\uff1f\uff1f","title":"\u771f\u76f8"},{"location":"riscv/wfi.html#_4","text":"","title":"\u81c6\u60f3\u7684\u89e3\u51b3\u8fc7\u7a0b"},{"location":"riscv/wfi.html#_5","text":"\u5148\u5728spike\u4e2d\u8fdb\u884c\u5b9a\u4f4d\uff0c\u5982\u679c\u80fd\u591f\u987a\u5229\u5b9a\u4f4d\u5230\u5728wfi\u6307\u4ee4\u4e2d\u8fdb\u884c\u7684\u5224\u65ad\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u4f1a\u53bb\u770b\u624b\u518c\uff0c\u8fd9\u65f6\u5019\u5c31\u4e86\u89e3\u5230\u6574\u4e2awfi\u6307\u4ee4\u7684\u63cf\u8ff0\uff0c\u81ea\u7136\u5c31\u77e5\u9053\u5e94\u8be5\u5de5\u4f5c\u5728\u673a\u5668\u6a21\u5f0f\uff0c\u7136\u540e\u518d\u53bb\u5206\u6790\u4e3a\u4ec0\u4e48cmodel-test\u751f\u6210\u7684\u4ee3\u7801wfi\u4e0d\u4f1a\u89e6\u53d1trap\uff0c \u8fdb\u800c\u4e86\u89e3\u5230mret\u7684\u95ee\u9898\uff0c\u6574\u4e2a\u95ee\u9898\u89e3\u51b3","title":"\u81c6\u60f3\u7684\u89e3\u51b3\u8fc7\u7a0b\u4e00"},{"location":"riscv/wfi.html#_6","text":"\u76f4\u63a5\u53bb\u770b\u624b\u518c\uff0c\u4e86\u89e3\u5230wfi\u662f\u7279\u6743\u6307\u4ee4\uff0c\u518d\u53bb\u5206\u6790cmodel-test\u548criscv-torture\u751f\u6210\u4ee3\u7801\u4e0a\u7684\u5dee\u522b\uff0c\u8fdb\u800c\u4e86\u89e3\u5230mret,\u7136\u540e\u53c8\u4f1a\u5947\u602aspike\u662f\u5982\u4f55\u5224\u65ad\u7684\uff0c\u518d\u53bb\u770bspike\u4ee3\u7801\uff0c\u4e86\u89e3spike\u7684\u5904\u7406\u6d41\u7a0b\uff0c\u6574\u4e2a\u95ee\u9898\u89e3\u51b3","title":"\u81c6\u60f3\u7684\u89e3\u51b3\u8fc7\u7a0b\u4e8c"},{"location":"riscv/wfi.html#_7","text":"\u5728cpu\u67b6\u6784\u65b9\u9762\u4ecd\u6709\u592a\u591a\u7684\u4e1c\u897f\u9700\u8981\u53bb\u4e86\u89e3\uff0c\u5c24\u5176\u662f\u73b0\u5728\u7528\u5230\u7684RISCV\u3002\u8ddf\u8e2a\u4ee3\u7801\uff0c\u5b9a\u4f4d\u95ee\u9898\u4ecd\u7136\u662f\u4e00\u4e2a\u9760\u8fd0\u6c14\u7684\u72b6\u6001\uff0c\u8fd8\u662f\u5e94\u8be5\u4e0d\u65ad\u7684\u8bad\u7ec3\uff0c\u79ef\u7d2f\u7ecf\u9a8c\uff0c\u603b\u7ed3\u51fa\u5b9a\u4f4d\u95ee\u9898\u7684\u4e00\u822c\u65b9\u6cd5\u3002\u503c\u5f97\u80af\u5b9a\u7684\u662f\u5df2\u7ecf\u5f00\u59cb\u80fd\u591f\u4e60\u60ef\u6027\u7684\u8fd0\u7528\u8c03\u8bd5\u624b\u6bb5\u6765\u8f85\u52a9\u5b9a\u4f4d\u95ee\u9898\uff0c\u6bd4\u5982\u5728spike\u5f02\u5e38\u7684\u65f6\u5019\uff0c\u80fd\u591f\u4ee5\u65e5\u5fd7\u6a21\u5f0f\u548cdebug\u6a21\u5f0f\u8fdb\u884c\u8c03\u8bd5\u3002","title":"\u603b\u7ed3"},{"location":"simulator/dramsim_ddr.html","text":"DDR and DRAMSim3 \u00b6 DDR and DRAMSim3 \u76f8\u5173\u77e5\u8bc6 DSU NI700 CI700 AXI ACE CHI DRAM\u7ed3\u6784 storage Capacitor \u8bfb\u53d6\u539f\u7406 \u5199\u5165\u539f\u7406 \u7ec4\u7ec7\u7ed3\u6784 \u65f6\u5e8f\u53c2\u6570 raw access cmd \u903b\u8f91\u72b6\u6001 Reorder DDR \u7c7b\u578b LPDDR4 with LPDDR5 LPDDR5 DDR\u63a7\u5236\u5668 DDR SDRAM Address Mapping Options Maximum Address Space MC Port Interface AXI-Controller Core Interface Placement Logic Address Collision/Data Coherency Violation Source ID Collision Priority Bank Splitting Write-to-Read Splitting Read/Write Grouping select logic High-Priority Command Swapping Command Aging \u5185\u5b58\u8bbf\u95ee\u8c03\u5ea6\u7b97\u6cd5 DDR\u529f\u8017 DRAMSim3 \u914d\u7f6e\u53c2\u6570\u89e3\u6790 \u7edf\u8ba1\u4fe1\u606f\u89e3\u6790 \u5b9e\u73b0\u5206\u6790 \u76f8\u5173\u77e5\u8bc6 \u00b6 DSU \u00b6 A DSU-110 DynamIQ\u2122 cluster consists of between one and 12 cores, with up to four different types of cores in the same cluster The DynamIQ Shared Unit (DSU) comprises the L3 memory system, control logic, and external interfaces to support a DynamIQ cluster Cores can be configured for various performance points during macrocell implementation and run at different frequencies and voltages supports complexes where typically two cores are linked together and share logic NI700 \u00b6 The CoreLink NI\u2011700 Network\u2011on\u2011Chip Interconnect is a highly configurable AMBA\u2011compliant systemlevel interconnect NI\u2011700 supports the AMBA AXI5, ACE5\u2011Lite, AHB5, APB3, and APB4 protocols CI700 \u00b6 AMBA\u00ae 5 CHI.E interconnect with a customizable mesh topology supports 1-8 processor compute clusters Custom interconnect size and device placement Optional System Level Cache (SLC) configurable up to a 12 crosspoint(XP) mesh AXI \u00b6 The AMBA AXI protocol supports high-performance, high-frequency system designs for communication between Manager and Subordinate components five channels: Channel handshake signals Write address channel Write data channel Write response channel Read address channel Read data channel The AXI protocol requires the following relationships to be maintained: A write response must always follow the last write transfer in a write transaction. Read data must always follow the read address of the data. Channel handshakes must conform to the dependencies defined in Dependencies between channel handshake signals. The protocol does not define any other relationship between the channels AXI has the following rules governing the use of bursts: For wrapping bursts, the burst length must be 2, 4, 8, or 16. A burst must not cross a 4KB address boundary. Early termination of bursts is not supported AXI protocol provides response signaling for both read and write transactions: For read transactions, the response information from the Subordinate is signaled on the read For write transactions the response information is signaled on the write response channel ACE \u00b6 AXI Coherency Extensions CHI \u00b6 DRAM\u7ed3\u6784 \u00b6 storage Capacitor \u00b6 DRAM Storage Cell \u4f7f\u7528 Storage Capacitor \u6765\u5b58\u50a8 Bit \u4fe1\u606f\u3002 figure8.3\u662f3t1c\u7684\u5b58\u50a8\u7ed3\u6784\u5355\u5143\uff0c\u5b83\u662f\u6bd4\u8f83\u65e9\u671f\u7684\u8bbe\u8ba1\uff0c\u6709\u7740\u72ec\u7acb\u7684\u8bfb\u5199\u548c\u5b58\u50a8\u6676\u4f53\u7ba1\uff0c\u4f46\u5f88\u660e\u663e\uff0c\u5b83\u4f53\u79ef\u8fc7\u5927\u3002 figure8.2\u662f1t1c\u7684\u6700\u7b80\u5355\u7684\u5b58\u50a8\u7ed3\u6784\u5355\u5143\uff0c\u662f\u6bd4\u8f83\u73b0\u4ee3\u7684\u8bbe\u8ba1\uff0c\u7531\u56db\u90e8\u5206\u7ec4\u6210\uff1a Storage Capacitor \u5b58\u50a8\u7535\u5bb9\uff0c\u7535\u5bb9\u4e24\u7aef\u7535\u538b\u5dee\u7684\u9ad8\u548c\u4f4e\uff0c\u6765\u8868\u793a\u903b\u8f91\u4e0a\u7684 1 \u548c 0\u3002 Access Transistor \u901a\u8fc7\u5bfc\u901a\u548c\u622a\u6b62\uff0c\u51b3\u5b9a\u4e86\u5141\u8bb8\u6216\u7981\u6b62\u5bf9 Storage Capacitor \u6240\u5b58\u50a8\u7684\u4fe1\u606f\u7684\u8bfb\u53d6\u548c\u6539\u5199\u3002 Wordline \u51b3\u5b9a\u4e86 Access Transistor \u7684\u5bfc\u901a\u6216\u8005\u622a\u6b62\u3002 Bitline \u5916\u754c\u8bbf\u95ee Storage Capacitor \u7684\u552f\u4e00\u901a\u9053 \u5f88\u660e\u663e\uff0c\u6839\u636e1T1C\u7ed3\u6784\u56fe\u80fd\u591f\u81ea\u7136\u60f3\u5230\uff0c\u8bfb\u6570\u636e\u65f6\uff0cWordline\u7f6e1\uff0c\u7136\u540e\u8bfb\u53d6Bitline\u4e0a\u7684\u72b6\u6001\u5373\u53ef\uff1b\u5199\u6570\u636e\u65f6\uff0c\u628a\u8981\u5199\u5165\u7684\u7535\u5e73\u72b6\u6001\u8bbe\u5b9a\u5230Bitline\u4e0a\uff0c\u7136\u540eWordline\u7f6e1\uff0c\u7535\u5bb9\u5c31\u80fd\u5145\u7535\u4e86\u3002\u4f46\u5728\u5177\u4f53\u5b9e\u73b0\u4e0a\uff0c\u4f1a\u9047\u5230\u4ee5\u4e0b\u7684\u95ee\u9898\uff1a \u5916\u754c\u7684\u903b\u8f91\u7535\u5e73\u4e0e Storage Capacitor \u7684\u7535\u5e73\u4e0d\u5339\u914d\u3002\u7531\u4e8e Bitline \u7684\u7535\u5bb9\u503c\u6bd4 Storage Capacitor \u8981\u5927\u7684\u591a\uff08\u901a\u5e38\u4e3a 10 \u500d\u4ee5\u4e0a\uff09\uff0c\u5f53 Access Transistor \u5bfc\u901a\u540e\uff0c\u5982\u679c Storage Capacitor \u5b58\u50a8\u7684\u4fe1\u606f\u4e3a 1 \u65f6\uff0cBitline \u7535\u538b\u53d8\u5316\u975e\u5e38\u5c0f\u3002\u5916\u754c\u7535\u8def\u65e0\u6cd5\u76f4\u63a5\u901a\u8fc7 Bitline \u6765\u8bfb\u53d6 Storage Capacitor \u6240\u5b58\u50a8\u7684\u4fe1\u606f\u3002 \u8fdb\u884c\u4e00\u6b21\u8bfb\u53d6\u64cd\u4f5c\u540e\uff0cStorage Capacitor \u5b58\u50a8\u7684\u7535\u8377\u4f1a\u53d8\u5316\u3002\u5728\u8fdb\u884c\u4e00\u6b21\u8bfb\u53d6\u64cd\u4f5c\u7684\u8fc7\u7a0b\u4e2d\uff0cAccess Transistor \u5bfc\u901a\u540e\uff0c\u7531\u4e8e Bitline \u548c Storage Capacitor \u7aef\u7684\u7535\u538b\u4e0d\u4e00\u81f4\uff0c\u4f1a\u5bfc\u81f4 Storage Capacitor \u4e2d\u5b58\u50a8\u7684\u7535\u8377\u91cf\u88ab\u6539\u53d8\u3002\u6700\u7ec8\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5728\u4e0b\u4e00\u6b21\u8bfb\u53d6\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\uff0c\u65e0\u6cd5\u6b63\u786e\u7684\u5224\u65ad Storage Capacitor \u5185\u5b58\u50a8\u7684\u4fe1\u606f\u3002 \u7531\u4e8e Capacitor \u7684\u7269\u7406\u7279\u6027\uff0c\u5373\u4f7f\u4e0d\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\uff0c\u5176\u6240\u5b58\u50a8\u7684\u7535\u8377\u90fd\u4f1a\u6162\u6162\u53d8\u5c11\u3002\u8fd9\u4e2a\u7279\u6027\u8981\u6c42 DRAM \u5728\u6ca1\u6709\u8bfb\u5199\u64cd\u4f5c\u65f6\uff0c\u4e5f\u8981\u4e3b\u52a8\u5bf9 Storage Capacitor \u8fdb\u884c\u7535\u8377\u6062\u590d\u7684\u64cd\u4f5c\u3002 \u4e3a\u89e3\u51b3\u4e0a\u8ff0\u7684\u95ee\u9898\uff0cDRAM \u5728\u8bbe\u8ba1\u4e0a\uff0c\u5f15\u5165\u4e86 Differential Sense Amplifier\u3002 \u8bfb\u53d6\u539f\u7406 \u00b6 \u901a\u8fc7\u8bfb\u53d6\u539f\u7406\uff0c\u6765\u4ecb\u7ecdDifferential Sense Amplifier.Differential Sense Amplifier \u5305\u542b Sensing Circuit \u548c Voltage Equalization Circuit \u4e24\u4e2a\u4e3b\u8981\u90e8\u5206\u3002\u5b83\u4e3b\u8981\u7684\u529f\u80fd\u5c31\u662f\u5c06 Storage Capacitor \u5b58\u50a8\u7684\u4fe1\u606f\u8f6c\u6362\u4e3a\u903b\u8f91 1 \u6216\u8005 0 \u6240\u5bf9\u5e94\u7684\u7535\u538b\uff0c\u5e76\u4e14\u5448\u73b0\u5230 Bitline \u4e0a\u3002\u540c\u65f6\uff0c\u5728\u5b8c\u6210\u4e00\u6b21\u8bfb\u53d6\u64cd\u4f5c\u540e\uff0c\u901a\u8fc7 Bitline \u5c06 Storage Capacitor \u4e2d\u7684\u7535\u8377\u6062\u590d\u5230\u8bfb\u53d6\u4e4b\u524d\u7684\u72b6\u6001\u3002 \u5728\u8fd9\u4e2a\u9636\u6bb5\uff0c\u9996\u5148\u4f1a\u901a\u8fc7\u63a7\u5236 EQ \u4fe1\u53f7\uff0c\u8ba9 Te1\u3001Te2\u3001Te3 \u6676\u4f53\u7ba1\u5904\u4e8e\u5bfc\u901a\u72b6\u6001\uff0c\u5c06 Bitline \u548c /Bitline \u7ebf\u4e0a\u7684\u7535\u538b\u7a33\u5b9a\u5728 Vref \u4e0a, Vref = Vcc/2\u3002\u7136\u540e\u8fdb\u5165\u5230\u4e0b\u4e00\u4e2a\u9636\u6bb5\u3002 \u7ecf\u8fc7 Precharge \u9636\u6bb5\uff0c Bitline \u548c /Bitline \u7ebf\u4e0a\u7684\u7535\u538b\u5df2\u7ecf\u7a33\u5b9a\u5728 Vref \u4e0a\u4e86\uff0c\u6b64\u65f6\uff0c\u901a\u8fc7\u63a7\u5236 Wordline \u4fe1\u53f7\uff0c\u5c06 Ta \u6676\u4f53\u7ba1\u5bfc\u901a\u3002Storage Capacitor \u4e2d\u5b58\u50a8\u6b63\u7535\u8377\u4f1a\u6d41\u5411 Bitline\uff0c\u7ee7\u800c\u5c06 Bitline \u7684\u7535\u538b\u62c9\u5347\u5230 Vref+\u3002\u7136\u540e\u8fdb\u5165\u5230\u4e0b\u4e00\u4e2a\u9636\u6bb5\u3002 \u7531\u4e8e\u5728 Access \u9636\u6bb5\uff0cBitline \u7684\u7535\u538b\u88ab\u62c9\u5347\u5230 Vref+\uff0cTn2 \u4f1a\u6bd4 Tn1 \u66f4\u5177\u5bfc\u901a\u6027\uff0cTp1 \u5219\u4f1a\u6bd4 Tp2 \u66f4\u5177\u5bfc\u901a\u6027\u3002 \u6b64\u65f6\uff0cSAN (Sense-Amplifier N-Fet Control) \u4f1a\u88ab\u8bbe\u5b9a\u4e3a\u903b\u8f91 0 \u7684\u7535\u538b\uff0cSAP (Sense-Amplifier P-Fet Control) \u5219\u4f1a\u88ab\u8bbe\u5b9a\u4e3a\u903b\u8f91 1 \u7684\u7535\u538b\uff0c\u5373 Vcc\u3002\u7531\u4e8e Tn2 \u4f1a\u6bd4 Tn1 \u66f4\u5177\u5bfc\u901a\u6027\uff0c/Bitline \u4e0a\u7684\u7535\u538b\u4f1a\u66f4\u5feb\u88ab SAN \u62c9\u5230\u903b\u8f91 0 \u7535\u538b\uff0c\u540c\u7406\uff0cBitline \u4e0a\u7684\u7535\u538b\u4e5f\u4f1a\u66f4\u5feb\u88ab SAP \u62c9\u5230\u903b\u8f91 1 \u7535\u538b\u3002\u63a5\u7740 Tp1 \u548c Tn2 \u8fdb\u5165\u5bfc\u901a\u72b6\u6001\uff0cTp2 \u548c Tn1 \u8fdb\u5165\u622a\u6b62\u72b6\u6001\u3002 \u6700\u540e\uff0cBitline \u548c /Bitline \u7684\u7535\u538b\u90fd\u8fdb\u5165\u7a33\u5b9a\u72b6\u6001\uff0c\u6b63\u786e\u7684\u5448\u73b0\u4e86 Storage Capacitor \u6240\u5b58\u50a8\u7684\u4fe1\u606f Bit\u3002 \u5728\u5b8c\u6210 Sense \u9636\u6bb5\u7684\u64cd\u4f5c\u540e\uff0cBitline \u7ebf\u5904\u4e8e\u7a33\u5b9a\u7684\u903b\u8f91 1 \u7535\u538b Vcc\uff0c\u6b64\u65f6 Bitline \u4f1a\u5bf9 Storage Capacitor \u8fdb\u884c\u5145\u7535\u3002\u7ecf\u8fc7\u7279\u5b9a\u7684\u65f6\u95f4\u540e\uff0cStorage Capacitor \u7684\u7535\u8377\u5c31\u53ef\u4ee5\u6062\u590d\u5230\u8bfb\u53d6\u64cd\u4f5c\u524d\u7684\u72b6\u6001\u3002 \u6700\u540e\uff0c\u901a\u8fc7 CSL \u4fe1\u53f7\uff0c\u8ba9 Tc1 \u548c Tc2 \u8fdb\u5165\u5bfc\u901a\u72b6\u6001\uff0c\u5916\u754c\u5c31\u53ef\u4ee5\u4ece Bitline \u4e0a\u8bfb\u53d6\u5230\u5177\u4f53\u7684\u4fe1\u606f\u3002 \u5199\u5165\u539f\u7406 \u00b6 \u5199\u64cd\u4f5c\u7684\u524d\u671f\u6d41\u7a0b\u548c\u8bfb\u64cd\u4f5c\u662f\u4e00\u6837\u7684\uff0c\u6267\u884c Precharge\u3001Access\u3001Sense \u548c Restore \u64cd\u4f5c\u3002\u5dee\u5f02\u5728\u4e8e\uff0c\u5728 Restore \u9636\u6bb5\u540e\uff0c\u8fd8\u4f1a\u8fdb\u884c Write Recovery \u64cd\u4f5c\u3002 \u5728 Write Recovery \u9636\u6bb5\u65f6\uff0c\u901a\u8fc7\u63a7\u5236 WE (Write Enable) \u4fe1\u53f7\uff0c\u8ba9 Tw1 \u548c Tw2 \u8fdb\u5165\u5bfc\u901a\u72b6\u6001\u3002\u6b64\u65f6\uff0cBitline \u4f1a\u88ab input \u62c9\u5230\u903b\u8f91 0 \u7535\u5e73\uff0c/Bitline \u5219\u4f1a\u88ab /input \u62c9\u5230\u903b\u8f91 1 \u7535\u5e73\u3002 \u7ecf\u8fc7\u7279\u5b9a\u7684\u65f6\u95f4\u540e\uff0c\u5f53 Storage Capacitor \u7684\u7535\u8377\u88ab Discharge \u5230 0 \u72b6\u6001\u65f6\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236 Wordline\uff0c\u5c06 Storage Capacitor \u7684 Access Transistor \u622a\u6b62\uff0c\u5199\u5165 0 \u7684\u64cd\u4f5c\u5c31\u5b8c\u6210\u4e86\u3002 \u7ec4\u7ec7\u7ed3\u6784 \u00b6 \u56fe8.7\u8868\u793a\u4e86\u4e00\u4e2abank\u7684DRAM\u5b58\u50a8\u5355\u5143\u3002\u884c\u5730\u5740\u88ab\u9001\u5230\u884c\u89e3\u7801\u5668\uff0c cells where the row address is sent to a row decoder, and the row decoder selects one row of cells. A row of cells is formed from one or more wordlines that are driven concurrently to activate one cell on each one of thousands of bitlines. There may be hundreds of cells connected to the same bitline, but only one cell per bitline will share its stored charge with the bitline at any given instance in time. Each bank operates independently of the other banks and contains an array of memory cells that are accessed an entire row at a time. When a row of this memory array is accessed (row activation) the entire row of the memory array is transferred into the bank\u2019s row buffer. After completing the available column accesses, the cached row must be written back to the memory array by an explicit operation (bank precharge) which prepares the bank for a subsequent row activation. A bank cannot be accessed during the precharge/activate latency. A single cycle of high impedance is required on the data pins when switching between read and write column accesses. A single set of address lines is shared by all DRAM operations (bank precharge, row activation, and column access). \u65f6\u5e8f\u53c2\u6570 \u00b6 DRAM\u8bbf\u95ee\u534f\u8bae(DRAM memory-access protocol)\u4e2d\u62bd\u8c61\u7684\u5c06\u6bcf\u4e00\u4e2a\u547d\u4ee4\u7684\u52a8\u4f5c\u548c\u6bcf\u4e00\u4e2a\u52a8\u4f5c\u7684\u65f6\u5e8f\u8981\u6c42\u533a\u5206\u5f00\u6765\u3002\u4e5f\u5c31\u662f\u8bf4\u8fd9\u79cd\u62bd\u8c61\u4f7f\u76f8\u540c\u4e00\u7ec4\u7684DRAM\u547d\u4ee4\u4ea4\u4e92\u80fd\u591f\u5e94\u7528\u5230\u6709\u4e0d\u540c\u7684\u65f6\u5e8f\u53c2\u6570\u7684\u4e0d\u540cDRAM\u5185\u5b58\u7cfb\u7edf\u4e2d\u3002\u901a\u8fc7\u5c06\u534f\u8bae\u7279\u5b9a\u7684\u65f6\u5e8f\u53c2\u6570\u8fdb\u884c\u62bd\u8c61\uff0c\u53ef\u4ee5\u5728\u62bd\u8c61\u5c42\u9762\u63cf\u8ff0DRAM\u547d\u4ee4\u3002\u4e5f\u5c31\u662f\u8bf4\u5728\u5206\u6790\u65f6\u5e8f\u53c2\u6570\u7684\u65f6\u5019\u5fc5\u987b\u7ed3\u5408\u67d0\u4e00\u4e2a\u62bd\u8c61\u7684\u547d\u4ee4 raw access cmd \u00b6 \u884c\u8bbf\u95ee\u547d\u4ee4\u4e5f\u88ab\u79f0\u4e3a\u884c\u6fc0\u6d3b\u547d\u4ee4(row activation command).\u547d\u4ee4\u7684\u76ee\u7684\u662f\u8bb2\u6570\u636e\u4eceDRAM arrays\u7684\u5355\u5143\u4e2d\u642c\u5230\u611f\u77e5\u653e\u5927\u5668\u4e2d\uff0c\u7136\u540e\u5c06\u6570\u636erestore\u56de\u5b58\u50a8\u5355\u5143\u4e2d\u3002 tRCD\u662f\u6307\u884c\u8bbf\u95ee\u547d\u4ee4\u5c06DRAM\u5b58\u50a8\u5355\u5143\u4e2d\u7684\u6570\u636e\u79fb\u52a8\u5230sense amplifiers\u4e2d\u7684\u8fc7\u7a0b\u7684\u5ef6\u8fdf tRP precharge tRCD access + sense tRAS access + sense + restore tWR write Recovery AL = 0 Added Latency to column accesses, used in DDRx SDRAM devices for posted CAS commands tCCD_S = 4 tCCD_L = 6 Column-to-Column Delay. The minimum intra-device column-to-column command timing, determined by internal prefetch length tRRD_S = 8 tRRD_L = 8 Row activation to Row activation Delay. The minimum time interval between two row activation commands to the same DRAM device. tRTP = 12 Read to Precharge. The time interval between a read and a precharge command. Can be approximated by tCAS - tCMD tWTR_S = 8 tWTR_L = 16 Write To Read delay time. The minimum time interval between the end of write data burst and the start of a column read command tRFC = 392 tRFC2 = 268 tRFC4 = 172 Refresh Cycle Time. The time interval between Refresh and Activation commands. tCK = 0.83 CL = 17 CWL = 14 tREFI = 8660 tRPRE = 1 tWPRE = 1 tFAW = 32 tWR2 = 32 tCKE = 6 tCKESR = 7 tXS = 432 tXP = 6 tRTRS = 1 tPPD = 2 \u903b\u8f91\u72b6\u6001 \u00b6 Each DRAM bank has two stable states: IDLE and ACTIVE, as shown in Figure A In the IDLE state, the DRAM is precharged and ready for a row access. Row activation requires 3 cycles, during which no other operations may be issued to that bankDuring that time, however, operations may be issued to other banks of the DRAM. Once the DRAM\u2019s row activation latency has passed, the bank enters the ACTIVE state. Any number of pipelined column accesses may be performed while the bank is in the ACTIVE state. The bank will remain in the ACTIVE state until a precharge operation is issued to return it to the IDLE state. Like row activation, the precharge operation utilizes the bank resource for 3 cycles, during which no new operations may be issued to that bank. Reorder \u00b6 Sequential accesses to different rows within one bank have high latency and cannot be pipelined, while accesses to different banks or different words within a single row have low latency and can be pipelined. Reorder memory operations to exploit the non-uniform access times of the DRAM is similar to how a superscalar processor schedules arithmetic operations out of order. DDR \u7c7b\u578b \u00b6 \u9762\u5411\u4e0d\u540c\u7684\u5e94\u7528\uff0cDDR\u53ef\u4ee5\u5206\u4e3a\u6807\u51c6DDR,\u7528\u4e8e\u624b\u673a\u7b49\u8bbe\u5907\u7684LPDDR, \u7528\u4e8e\u56fe\u5f62\u56fe\u50cf\u7684GDDR,\u5f53\u7136\u5b9e\u9645\u4e0a\u8fd8\u6709HBM\u7b49\u7b49\u3002 LPDDR4 with LPDDR5 \u00b6 LPDDR5\u7684\u6570\u636e\u901f\u7387\u8fbe\u5230\u4e866400Mbps,\u6709\u7740\u66f4\u5927\u7684\u8bbe\u5907\u5bb9\u91cf\uff0c\u66f4\u4f4e\u7684\u7535\u538b \u533a\u522b LPDDR4 LPDDR5 device size 2Gb to 32Gb (per channel); 4, 8, and 16 bank devices; 1k, 2k, and 4k page sizes 2Gb to 16Gb (per channel); 8 bank devices; 2k page sizes speed Up to 6400 Mbps Up to 4266 Mbps voltage 1.8V DRAM array; 1.05V / 0.9V core; 0.5V / 0.3 V I/O 1.8V DRAM array; 1.1V core; 1.1V / 0.6V I/O LPDDR5 \u00b6 LPDDR5\u9ad8\u901f\u540c\u6b65SDRAM,\u652f\u63011\u4e2achannel,\u53ef\u9009\u768416\u62168DQ\u4fe1\u53f7\u3002bank\u67b6\u6784\u662f\u53ef\u4ee5\u9009\u62e9\u7684\uff0c8bank\u6a21\u5f0f\uff0cbank group\u6a21\u5f0f(4banks, 4 bank-groups)\uff0c16bank\u6a21\u5f0f\u3002\u6bcf\u4e00\u79cdbank\u7ed3\u6784\u652f\u6301\u4e0d\u540c\u7684burst\u6a21\u5f0f\uff0c\u53ef\u4ee5\u901a\u8fc7\u6a21\u5f0f\u5bc4\u5b58\u5668\u6765\u914d\u7f6e.\u5bb9\u91cf\u652f\u63012Gb~32Gb \u9664\u4e86\u5728\u9891\u7387\u548c\u7535\u538b\u4e0a\u7684\u533a\u522b\uff0c\u5728\u7ec4\u7ec7\u7ed3\u6784\u4e0aLPDDR5\u548cLPDDR4\u6709\u7740\u6bd4\u8f83\u5927\u7684\u533a\u522b\uff0cLPDDR5\u652f\u6301\u7075\u6d3b\u7684bank\u7ed3\u6784\uff0c\u6709\u4e0d\u540c\u7684\u7a81\u53d1\u957f\u5ea6\u3002 bank-group\u6a21\u5f0f\u652f\u6301\u901f\u5ea6\u8d85\u8fc732Mbps,\u5e76\u4e14\u5141\u8bb816\u621632\u7684burst\u957f\u5ea6\u30028bank\u6a21\u5f0f\u652f\u6301\u6240\u6709\u901f\u5ea6\u4e0b\u768432 burst\u957f\u5ea6\u300216bank\u6a21\u5f0f\u652f\u6301\u4f4e\u4e8e3200Mbps\u7684\u901f\u5ea6\uff0c16\u621632\u7684burst\u957f\u5ea6\u3002 LPDDR5x\u4e0d\u652f\u63018bank\u6a21\u5f0f\uff0c\u4f46LPDDR5\u652f\u6301 DDR\u63a7\u5236\u5668 \u00b6 Example of cadence DDR controller This Cadence DDR Controller contains an internal AXI port which communicates on the AXI bus. The AXI port uses an AXIController Core interface block to connect to the Controller core DDR SDRAM Address Mapping Options \u00b6 The address map for this Cadence DDR Controller is ordered as follows: Chip Index -- Chip Select -- Row -- Bank / Bank Group -- Column -- Datapath The address structure of DDR SDRAM memories contains 6 fields. Each of these fields can be individually addressed when accessing the DRAM. The chip select and chip index fields are always the most significant fields of the address. The column and datapath fields are always the least significant fields. The position of the row and bank/bank group fields are defined at configuration. If the cs_lower_addr_en parameter is set to \u2019b1, the row field is moved to the higher bits of the address map relative to the chip select field and chip index field. This alters the memory map from the original (Chip Index -- Chip Select -- Row -- Bank / Bank Group -- Column -- Datapath) to Row -- Chip Index -- Chip Select -- Bank / Bank Group -- Column -- Datapath Maximum Address Space \u00b6 MaxMemBytes = Chip Selects x Chip Indexes x 2Address x NumBanks x DPWidthBytes For this controller, the maximum values for these fields are as follows: Chip Indexes = 2 Chip Selects = 2 Memory Address = 18 + 12 (Row + Column) Number of Banks Per Chip Select = 16 Memory Datapath Width in Bytes = 8 bytes As a result, the maximum accessible memory area is 2 TB. MC Port Interface \u00b6 The interface block contains FIFOs and an array for commands, read and write data, and process any clock domain crossings, if required. Commands are fed to the command queue of the Controller core. Write and read data is routed directly to the write and read data queues of the Controller core through the data interface. Write data is stored in the port write data array and only transmitted to the Controller core\u2019s write data holding queue when the command is selected for processing. AXI-Controller Core Interface \u00b6 Command FIFO prior to entering the port command FIFO, the AXI-Controller Core interface block converts the AXI transaction into a Controller core transaction. In-Port Arbitration within the port, it is possible that both the read and write command channel of the AXI bus are active concurrently. If this occurs, the port performs a simple arbitration to select the command to pass through to the Controller core. This arbitration is based on the following factors, in order of importance: Order of command acceptance into the port Priority of read commands versus priority of write commands for this port Default Read over Write preference The purpose of the write Array is to allow the AXI bus to off load its write data completely before the data is transferred to the Controller core buffers Write responses will be returned in the same order as the commands were received, regardless of the AXI ID or the type of response requested The register interface is an independent AXI port to the Cadence DDR Controller. This port converts the AXI register addresses to Controller core register addresses Placement Logic \u00b6 Address Collision/Data Coherency Violation \u00b6 To avoid address collisions, reads or writes that access the same range of the same chip select, bank and row as a command already in the command queue will be inserted into the command queue after the original command, even if the new command is of a higher priority. This rule is ignored when comparing a new read command to an existing read. Controller utilizes micro page masking for address collision checking to provide a finer granularity for collision. Address collision checking may be enabled/disabled through the addr_cmp_en parameter. Source ID Collision \u00b6 The port is assigned a specific source ID that is based on the thread ID information and identifies the source uniquely. In general, read commands from the same source ID will be placed in the command queue in order. Write command conflicts will be dependent on the programming of the wr_order_req parameter. The behavior of commands of different types from the same source ID is dependent on the user configuration. If there are no address conflicts, a read command could be executed ahead of a write command with the same source ID, and likewise a write command could be executed ahead of a read command with the same source ID. Source ID collision checking will always be enabled. Priority \u00b6 For the parameters, a value of 0 is the highest priority and a value of 15 is the lowest priority. For the signals, a value of 15 is the highest priority and a value of 0 is the lowest priority. Controller will invert this signal inside the Controller core and use 0 as the highest priority and 15 as the lowest priority. The placement algorithm will attempt to place higher priority commands ahead of lower priority commands, as long as they have no source ID or address collisions. Priority checking is enabled through the priority_en parameter. Bank Splitting \u00b6 \u5982\u679c\u4e00\u4e2a\u65b0\u7684\u547d\u4ee4\u8bbf\u95ee\u7684\u5730\u5740\u548c\u547d\u4ee4\u961f\u5217\u4e2d\u7684\u547d\u4ee4\u843d\u5728\u540c\u4e00\u4e2a\u7247\u9009\uff0c\u540c\u4e00\u4e2abank\uff0c\u4f46\u4e0d\u540c\u7684\u884c\uff0c\u8fd9\u4e9b\u547d\u4ee4\u5c31\u4f1a\u88ab\u8ba4\u4e3a\u6709bank\u51b2\u7a81 Before accesses can be made to two different rows within the same bank, the first active row must be closed (pre-charged) and the new row must be opened (activated) Bank splitting is enabled through the bank_split_en parameter. Write-to-Read Splitting \u00b6 When a read command follows a write command to the same chip select, there is some timing overhead to switch command types. Write-to-read splitting is enabled through the w2r_split_en parameter. Read/Write Grouping \u00b6 The memory suffers a small timing overhead when switching from read to write mode. Placement logic will attempt to place a new read command sequentially with other read commands in the command queue, or a new write command sequentially with other write commands in the command queue. Read/write grouping is enabled through the rw_same_en parameter. Bank Conflicts and Read/Write Grouping Chip Select Grouping with Read/Write Grouping Page Grouping with Read/Write Grouping select logic \u00b6 On each clock cycle, the selection logic will scan the top 16 entries of the command queue to determine which command to execute. High-Priority Command Swapping \u00b6 placement algorithm \u5728\u51b3\u5b9a\u547d\u4ee4\u5728queue\u4e2d\u7684\u987a\u5e8f\u7684\u65f6\u5019\u5df2\u7ecf\u8003\u8651\u4e86\u4f18\u5148\u7ea7\uff0c\u4f46\u4ecd\u7136\u4f1a\u6709\u9ad8\u4f18\u5148\u7ea7\u7684\u547d\u4ee4\u5728commmand queue\u4e2d\u7b49\u5f85\u4e00\u4e2a\u4f4e\u4f18\u5148\u7ea7\u7684\u6b63\u5728\u5904\u7406\u7684\u547d\u4ee4\u3002 \u9ad8\u4f18\u5148\u7ea7\u8f6c\u6362\u7279\u6027\u5141\u8bb8\u65b0\u7684\u9ad8\u4f18\u5148\u7ea7\u7684\u547d\u4ee4\u66f4\u5feb\u7684\u6267\u884c\u3002 \u5982\u679c\u9009\u62e9\u7684command queue\u4e2d\u7684\u547d\u4ee4\u6709\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7\uff0c\u5e76\u4e14\u8ddf\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u547d\u4ee4\u7684ID\u4e0d\u4e00\u6837\uff0c\u4e5f\u6ca1\u6709\u5730\u5740\u548csource ID\u51b2\u7a81\uff0c\u90a3\u4e48\u6b63\u5728\u6267\u884c\u7684\u6307\u4ee4\u5c06\u4f1a\u88ab\u4e2d\u65ad\u3002 \u5982\u679c\u8981\u4e2d\u65ad\u5f53\u524d\u6267\u884c\u7684\u547d\u4ee4\uff0c\u5b83\u4f1a\u5728\u6267\u884c\u5b8c\u5f53\u524d\u7684burst\u4e4b\u540e\u88ab\u6302\u8d77\uff0c\u7136\u540e\u4fdd\u5b58\u5728\u547d\u4ee4\u961f\u5217\u7684\u9876\u90e8\uff0c\u7136\u540e\u65b0\u7684\u547d\u4ee4\u5c06\u4f1a\u88ab\u6267\u884c\u3002 Command Aging \u00b6 \u56e0\u4e3a\u53ef\u4ee5\u5728\u5df2\u7ecf\u5b58\u5728\u7684\u547d\u4ee4\u4e0a\u9762\u63d2\u5165\u65b0\u7684\u547d\u4ee4\uff0c\u6240\u4ee5\u53ef\u80fd\u53d1\u751f\u4e00\u4e2a\u4f4e\u4f18\u5148\u7ea7\u7684\u547d\u4ee4\u4e00\u76f4\u5728command queue\u7684\u5e95\u90e8\u7684\u60c5\u51b5\u3002\u4e3a\u4e86\u907f\u514d\u8fd9\u79cdlockout\u7684\u60c5\u51b5\uff0c\u589e\u52a0\u4e86age\u8ba1\u6570\u5668\u3002\u5982\u679c\u4e00\u4e2a\u547d\u4ee4\u7684age\u8ba1\u6570\u5668\u8fbe\u5230\u4e86\u6700\u5927\u503c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u547d\u4ee4\u7684\u4f18\u5148\u7ea7\u4f1a\u88ab\u52a01\uff0c\u4f46\u4e0d\u4f1a\u79fb\u52a8\u8fd9\u4e2a\u547d\u4ee4\u5728command queue\u4e2d\u7684\u4f4d\u7f6e\uff0c\u5b83\u4f1a\u5f71\u54cd\u65b0\u7684\u547d\u4ee4\u7684placing\u3002\u8fd9\u4e2a\u529f\u80fd\u65e0\u6cd5\u5173\u95ed\u3002 \u5185\u5b58\u8bbf\u95ee\u8c03\u5ea6\u7b97\u6cd5 \u00b6 \u300amemory access scheduling\u300b DDR\u529f\u8017 \u00b6 [ https://www.micron.com/support/tools-and-utilities/power-calc?login ] \u4ee5\u9541\u5149DDR\u4e3e\u4f8b\uff0c\u9541\u5149\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5de5\u5177\u6765\u5bf9DDR\u7684\u529f\u8017\u8fdb\u884c\u8bc4\u4f30\uff0c\u4e5f\u6709\u76f8\u5173\u7684\u6587\u6863\u63cf\u8ff0\u4ed6\u4eec\u7684\u4e00\u4e9b\u8bc4\u4f30\u7ed3\u679c DRAMSim3 \u00b6 \u914d\u7f6e\u53c2\u6570\u89e3\u6790 \u00b6 \u7edf\u8ba1\u4fe1\u606f\u89e3\u6790 \u00b6 \u5b9e\u73b0\u5206\u6790 \u00b6","title":"DDR and DRAMSim3"},{"location":"simulator/dramsim_ddr.html#ddr-and-dramsim3","text":"DDR and DRAMSim3 \u76f8\u5173\u77e5\u8bc6 DSU NI700 CI700 AXI ACE CHI DRAM\u7ed3\u6784 storage Capacitor \u8bfb\u53d6\u539f\u7406 \u5199\u5165\u539f\u7406 \u7ec4\u7ec7\u7ed3\u6784 \u65f6\u5e8f\u53c2\u6570 raw access cmd \u903b\u8f91\u72b6\u6001 Reorder DDR \u7c7b\u578b LPDDR4 with LPDDR5 LPDDR5 DDR\u63a7\u5236\u5668 DDR SDRAM Address Mapping Options Maximum Address Space MC Port Interface AXI-Controller Core Interface Placement Logic Address Collision/Data Coherency Violation Source ID Collision Priority Bank Splitting Write-to-Read Splitting Read/Write Grouping select logic High-Priority Command Swapping Command Aging \u5185\u5b58\u8bbf\u95ee\u8c03\u5ea6\u7b97\u6cd5 DDR\u529f\u8017 DRAMSim3 \u914d\u7f6e\u53c2\u6570\u89e3\u6790 \u7edf\u8ba1\u4fe1\u606f\u89e3\u6790 \u5b9e\u73b0\u5206\u6790","title":"DDR and DRAMSim3"},{"location":"simulator/dramsim_ddr.html#_1","text":"","title":"\u76f8\u5173\u77e5\u8bc6"},{"location":"simulator/dramsim_ddr.html#dsu","text":"A DSU-110 DynamIQ\u2122 cluster consists of between one and 12 cores, with up to four different types of cores in the same cluster The DynamIQ Shared Unit (DSU) comprises the L3 memory system, control logic, and external interfaces to support a DynamIQ cluster Cores can be configured for various performance points during macrocell implementation and run at different frequencies and voltages supports complexes where typically two cores are linked together and share logic","title":"DSU"},{"location":"simulator/dramsim_ddr.html#ni700","text":"The CoreLink NI\u2011700 Network\u2011on\u2011Chip Interconnect is a highly configurable AMBA\u2011compliant systemlevel interconnect NI\u2011700 supports the AMBA AXI5, ACE5\u2011Lite, AHB5, APB3, and APB4 protocols","title":"NI700"},{"location":"simulator/dramsim_ddr.html#ci700","text":"AMBA\u00ae 5 CHI.E interconnect with a customizable mesh topology supports 1-8 processor compute clusters Custom interconnect size and device placement Optional System Level Cache (SLC) configurable up to a 12 crosspoint(XP) mesh","title":"CI700"},{"location":"simulator/dramsim_ddr.html#axi","text":"The AMBA AXI protocol supports high-performance, high-frequency system designs for communication between Manager and Subordinate components five channels: Channel handshake signals Write address channel Write data channel Write response channel Read address channel Read data channel The AXI protocol requires the following relationships to be maintained: A write response must always follow the last write transfer in a write transaction. Read data must always follow the read address of the data. Channel handshakes must conform to the dependencies defined in Dependencies between channel handshake signals. The protocol does not define any other relationship between the channels AXI has the following rules governing the use of bursts: For wrapping bursts, the burst length must be 2, 4, 8, or 16. A burst must not cross a 4KB address boundary. Early termination of bursts is not supported AXI protocol provides response signaling for both read and write transactions: For read transactions, the response information from the Subordinate is signaled on the read For write transactions the response information is signaled on the write response channel","title":"AXI"},{"location":"simulator/dramsim_ddr.html#ace","text":"AXI Coherency Extensions","title":"ACE"},{"location":"simulator/dramsim_ddr.html#chi","text":"","title":"CHI"},{"location":"simulator/dramsim_ddr.html#dram","text":"","title":"DRAM\u7ed3\u6784"},{"location":"simulator/dramsim_ddr.html#storage-capacitor","text":"DRAM Storage Cell \u4f7f\u7528 Storage Capacitor \u6765\u5b58\u50a8 Bit \u4fe1\u606f\u3002 figure8.3\u662f3t1c\u7684\u5b58\u50a8\u7ed3\u6784\u5355\u5143\uff0c\u5b83\u662f\u6bd4\u8f83\u65e9\u671f\u7684\u8bbe\u8ba1\uff0c\u6709\u7740\u72ec\u7acb\u7684\u8bfb\u5199\u548c\u5b58\u50a8\u6676\u4f53\u7ba1\uff0c\u4f46\u5f88\u660e\u663e\uff0c\u5b83\u4f53\u79ef\u8fc7\u5927\u3002 figure8.2\u662f1t1c\u7684\u6700\u7b80\u5355\u7684\u5b58\u50a8\u7ed3\u6784\u5355\u5143\uff0c\u662f\u6bd4\u8f83\u73b0\u4ee3\u7684\u8bbe\u8ba1\uff0c\u7531\u56db\u90e8\u5206\u7ec4\u6210\uff1a Storage Capacitor \u5b58\u50a8\u7535\u5bb9\uff0c\u7535\u5bb9\u4e24\u7aef\u7535\u538b\u5dee\u7684\u9ad8\u548c\u4f4e\uff0c\u6765\u8868\u793a\u903b\u8f91\u4e0a\u7684 1 \u548c 0\u3002 Access Transistor \u901a\u8fc7\u5bfc\u901a\u548c\u622a\u6b62\uff0c\u51b3\u5b9a\u4e86\u5141\u8bb8\u6216\u7981\u6b62\u5bf9 Storage Capacitor \u6240\u5b58\u50a8\u7684\u4fe1\u606f\u7684\u8bfb\u53d6\u548c\u6539\u5199\u3002 Wordline \u51b3\u5b9a\u4e86 Access Transistor \u7684\u5bfc\u901a\u6216\u8005\u622a\u6b62\u3002 Bitline \u5916\u754c\u8bbf\u95ee Storage Capacitor \u7684\u552f\u4e00\u901a\u9053 \u5f88\u660e\u663e\uff0c\u6839\u636e1T1C\u7ed3\u6784\u56fe\u80fd\u591f\u81ea\u7136\u60f3\u5230\uff0c\u8bfb\u6570\u636e\u65f6\uff0cWordline\u7f6e1\uff0c\u7136\u540e\u8bfb\u53d6Bitline\u4e0a\u7684\u72b6\u6001\u5373\u53ef\uff1b\u5199\u6570\u636e\u65f6\uff0c\u628a\u8981\u5199\u5165\u7684\u7535\u5e73\u72b6\u6001\u8bbe\u5b9a\u5230Bitline\u4e0a\uff0c\u7136\u540eWordline\u7f6e1\uff0c\u7535\u5bb9\u5c31\u80fd\u5145\u7535\u4e86\u3002\u4f46\u5728\u5177\u4f53\u5b9e\u73b0\u4e0a\uff0c\u4f1a\u9047\u5230\u4ee5\u4e0b\u7684\u95ee\u9898\uff1a \u5916\u754c\u7684\u903b\u8f91\u7535\u5e73\u4e0e Storage Capacitor \u7684\u7535\u5e73\u4e0d\u5339\u914d\u3002\u7531\u4e8e Bitline \u7684\u7535\u5bb9\u503c\u6bd4 Storage Capacitor \u8981\u5927\u7684\u591a\uff08\u901a\u5e38\u4e3a 10 \u500d\u4ee5\u4e0a\uff09\uff0c\u5f53 Access Transistor \u5bfc\u901a\u540e\uff0c\u5982\u679c Storage Capacitor \u5b58\u50a8\u7684\u4fe1\u606f\u4e3a 1 \u65f6\uff0cBitline \u7535\u538b\u53d8\u5316\u975e\u5e38\u5c0f\u3002\u5916\u754c\u7535\u8def\u65e0\u6cd5\u76f4\u63a5\u901a\u8fc7 Bitline \u6765\u8bfb\u53d6 Storage Capacitor \u6240\u5b58\u50a8\u7684\u4fe1\u606f\u3002 \u8fdb\u884c\u4e00\u6b21\u8bfb\u53d6\u64cd\u4f5c\u540e\uff0cStorage Capacitor \u5b58\u50a8\u7684\u7535\u8377\u4f1a\u53d8\u5316\u3002\u5728\u8fdb\u884c\u4e00\u6b21\u8bfb\u53d6\u64cd\u4f5c\u7684\u8fc7\u7a0b\u4e2d\uff0cAccess Transistor \u5bfc\u901a\u540e\uff0c\u7531\u4e8e Bitline \u548c Storage Capacitor \u7aef\u7684\u7535\u538b\u4e0d\u4e00\u81f4\uff0c\u4f1a\u5bfc\u81f4 Storage Capacitor \u4e2d\u5b58\u50a8\u7684\u7535\u8377\u91cf\u88ab\u6539\u53d8\u3002\u6700\u7ec8\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5728\u4e0b\u4e00\u6b21\u8bfb\u53d6\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\uff0c\u65e0\u6cd5\u6b63\u786e\u7684\u5224\u65ad Storage Capacitor \u5185\u5b58\u50a8\u7684\u4fe1\u606f\u3002 \u7531\u4e8e Capacitor \u7684\u7269\u7406\u7279\u6027\uff0c\u5373\u4f7f\u4e0d\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\uff0c\u5176\u6240\u5b58\u50a8\u7684\u7535\u8377\u90fd\u4f1a\u6162\u6162\u53d8\u5c11\u3002\u8fd9\u4e2a\u7279\u6027\u8981\u6c42 DRAM \u5728\u6ca1\u6709\u8bfb\u5199\u64cd\u4f5c\u65f6\uff0c\u4e5f\u8981\u4e3b\u52a8\u5bf9 Storage Capacitor \u8fdb\u884c\u7535\u8377\u6062\u590d\u7684\u64cd\u4f5c\u3002 \u4e3a\u89e3\u51b3\u4e0a\u8ff0\u7684\u95ee\u9898\uff0cDRAM \u5728\u8bbe\u8ba1\u4e0a\uff0c\u5f15\u5165\u4e86 Differential Sense Amplifier\u3002","title":"storage Capacitor"},{"location":"simulator/dramsim_ddr.html#_2","text":"\u901a\u8fc7\u8bfb\u53d6\u539f\u7406\uff0c\u6765\u4ecb\u7ecdDifferential Sense Amplifier.Differential Sense Amplifier \u5305\u542b Sensing Circuit \u548c Voltage Equalization Circuit \u4e24\u4e2a\u4e3b\u8981\u90e8\u5206\u3002\u5b83\u4e3b\u8981\u7684\u529f\u80fd\u5c31\u662f\u5c06 Storage Capacitor \u5b58\u50a8\u7684\u4fe1\u606f\u8f6c\u6362\u4e3a\u903b\u8f91 1 \u6216\u8005 0 \u6240\u5bf9\u5e94\u7684\u7535\u538b\uff0c\u5e76\u4e14\u5448\u73b0\u5230 Bitline \u4e0a\u3002\u540c\u65f6\uff0c\u5728\u5b8c\u6210\u4e00\u6b21\u8bfb\u53d6\u64cd\u4f5c\u540e\uff0c\u901a\u8fc7 Bitline \u5c06 Storage Capacitor \u4e2d\u7684\u7535\u8377\u6062\u590d\u5230\u8bfb\u53d6\u4e4b\u524d\u7684\u72b6\u6001\u3002 \u5728\u8fd9\u4e2a\u9636\u6bb5\uff0c\u9996\u5148\u4f1a\u901a\u8fc7\u63a7\u5236 EQ \u4fe1\u53f7\uff0c\u8ba9 Te1\u3001Te2\u3001Te3 \u6676\u4f53\u7ba1\u5904\u4e8e\u5bfc\u901a\u72b6\u6001\uff0c\u5c06 Bitline \u548c /Bitline \u7ebf\u4e0a\u7684\u7535\u538b\u7a33\u5b9a\u5728 Vref \u4e0a, Vref = Vcc/2\u3002\u7136\u540e\u8fdb\u5165\u5230\u4e0b\u4e00\u4e2a\u9636\u6bb5\u3002 \u7ecf\u8fc7 Precharge \u9636\u6bb5\uff0c Bitline \u548c /Bitline \u7ebf\u4e0a\u7684\u7535\u538b\u5df2\u7ecf\u7a33\u5b9a\u5728 Vref \u4e0a\u4e86\uff0c\u6b64\u65f6\uff0c\u901a\u8fc7\u63a7\u5236 Wordline \u4fe1\u53f7\uff0c\u5c06 Ta \u6676\u4f53\u7ba1\u5bfc\u901a\u3002Storage Capacitor \u4e2d\u5b58\u50a8\u6b63\u7535\u8377\u4f1a\u6d41\u5411 Bitline\uff0c\u7ee7\u800c\u5c06 Bitline \u7684\u7535\u538b\u62c9\u5347\u5230 Vref+\u3002\u7136\u540e\u8fdb\u5165\u5230\u4e0b\u4e00\u4e2a\u9636\u6bb5\u3002 \u7531\u4e8e\u5728 Access \u9636\u6bb5\uff0cBitline \u7684\u7535\u538b\u88ab\u62c9\u5347\u5230 Vref+\uff0cTn2 \u4f1a\u6bd4 Tn1 \u66f4\u5177\u5bfc\u901a\u6027\uff0cTp1 \u5219\u4f1a\u6bd4 Tp2 \u66f4\u5177\u5bfc\u901a\u6027\u3002 \u6b64\u65f6\uff0cSAN (Sense-Amplifier N-Fet Control) \u4f1a\u88ab\u8bbe\u5b9a\u4e3a\u903b\u8f91 0 \u7684\u7535\u538b\uff0cSAP (Sense-Amplifier P-Fet Control) \u5219\u4f1a\u88ab\u8bbe\u5b9a\u4e3a\u903b\u8f91 1 \u7684\u7535\u538b\uff0c\u5373 Vcc\u3002\u7531\u4e8e Tn2 \u4f1a\u6bd4 Tn1 \u66f4\u5177\u5bfc\u901a\u6027\uff0c/Bitline \u4e0a\u7684\u7535\u538b\u4f1a\u66f4\u5feb\u88ab SAN \u62c9\u5230\u903b\u8f91 0 \u7535\u538b\uff0c\u540c\u7406\uff0cBitline \u4e0a\u7684\u7535\u538b\u4e5f\u4f1a\u66f4\u5feb\u88ab SAP \u62c9\u5230\u903b\u8f91 1 \u7535\u538b\u3002\u63a5\u7740 Tp1 \u548c Tn2 \u8fdb\u5165\u5bfc\u901a\u72b6\u6001\uff0cTp2 \u548c Tn1 \u8fdb\u5165\u622a\u6b62\u72b6\u6001\u3002 \u6700\u540e\uff0cBitline \u548c /Bitline \u7684\u7535\u538b\u90fd\u8fdb\u5165\u7a33\u5b9a\u72b6\u6001\uff0c\u6b63\u786e\u7684\u5448\u73b0\u4e86 Storage Capacitor \u6240\u5b58\u50a8\u7684\u4fe1\u606f Bit\u3002 \u5728\u5b8c\u6210 Sense \u9636\u6bb5\u7684\u64cd\u4f5c\u540e\uff0cBitline \u7ebf\u5904\u4e8e\u7a33\u5b9a\u7684\u903b\u8f91 1 \u7535\u538b Vcc\uff0c\u6b64\u65f6 Bitline \u4f1a\u5bf9 Storage Capacitor \u8fdb\u884c\u5145\u7535\u3002\u7ecf\u8fc7\u7279\u5b9a\u7684\u65f6\u95f4\u540e\uff0cStorage Capacitor \u7684\u7535\u8377\u5c31\u53ef\u4ee5\u6062\u590d\u5230\u8bfb\u53d6\u64cd\u4f5c\u524d\u7684\u72b6\u6001\u3002 \u6700\u540e\uff0c\u901a\u8fc7 CSL \u4fe1\u53f7\uff0c\u8ba9 Tc1 \u548c Tc2 \u8fdb\u5165\u5bfc\u901a\u72b6\u6001\uff0c\u5916\u754c\u5c31\u53ef\u4ee5\u4ece Bitline \u4e0a\u8bfb\u53d6\u5230\u5177\u4f53\u7684\u4fe1\u606f\u3002","title":"\u8bfb\u53d6\u539f\u7406"},{"location":"simulator/dramsim_ddr.html#_3","text":"\u5199\u64cd\u4f5c\u7684\u524d\u671f\u6d41\u7a0b\u548c\u8bfb\u64cd\u4f5c\u662f\u4e00\u6837\u7684\uff0c\u6267\u884c Precharge\u3001Access\u3001Sense \u548c Restore \u64cd\u4f5c\u3002\u5dee\u5f02\u5728\u4e8e\uff0c\u5728 Restore \u9636\u6bb5\u540e\uff0c\u8fd8\u4f1a\u8fdb\u884c Write Recovery \u64cd\u4f5c\u3002 \u5728 Write Recovery \u9636\u6bb5\u65f6\uff0c\u901a\u8fc7\u63a7\u5236 WE (Write Enable) \u4fe1\u53f7\uff0c\u8ba9 Tw1 \u548c Tw2 \u8fdb\u5165\u5bfc\u901a\u72b6\u6001\u3002\u6b64\u65f6\uff0cBitline \u4f1a\u88ab input \u62c9\u5230\u903b\u8f91 0 \u7535\u5e73\uff0c/Bitline \u5219\u4f1a\u88ab /input \u62c9\u5230\u903b\u8f91 1 \u7535\u5e73\u3002 \u7ecf\u8fc7\u7279\u5b9a\u7684\u65f6\u95f4\u540e\uff0c\u5f53 Storage Capacitor \u7684\u7535\u8377\u88ab Discharge \u5230 0 \u72b6\u6001\u65f6\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236 Wordline\uff0c\u5c06 Storage Capacitor \u7684 Access Transistor \u622a\u6b62\uff0c\u5199\u5165 0 \u7684\u64cd\u4f5c\u5c31\u5b8c\u6210\u4e86\u3002","title":"\u5199\u5165\u539f\u7406"},{"location":"simulator/dramsim_ddr.html#_4","text":"\u56fe8.7\u8868\u793a\u4e86\u4e00\u4e2abank\u7684DRAM\u5b58\u50a8\u5355\u5143\u3002\u884c\u5730\u5740\u88ab\u9001\u5230\u884c\u89e3\u7801\u5668\uff0c cells where the row address is sent to a row decoder, and the row decoder selects one row of cells. A row of cells is formed from one or more wordlines that are driven concurrently to activate one cell on each one of thousands of bitlines. There may be hundreds of cells connected to the same bitline, but only one cell per bitline will share its stored charge with the bitline at any given instance in time. Each bank operates independently of the other banks and contains an array of memory cells that are accessed an entire row at a time. When a row of this memory array is accessed (row activation) the entire row of the memory array is transferred into the bank\u2019s row buffer. After completing the available column accesses, the cached row must be written back to the memory array by an explicit operation (bank precharge) which prepares the bank for a subsequent row activation. A bank cannot be accessed during the precharge/activate latency. A single cycle of high impedance is required on the data pins when switching between read and write column accesses. A single set of address lines is shared by all DRAM operations (bank precharge, row activation, and column access).","title":"\u7ec4\u7ec7\u7ed3\u6784"},{"location":"simulator/dramsim_ddr.html#_5","text":"DRAM\u8bbf\u95ee\u534f\u8bae(DRAM memory-access protocol)\u4e2d\u62bd\u8c61\u7684\u5c06\u6bcf\u4e00\u4e2a\u547d\u4ee4\u7684\u52a8\u4f5c\u548c\u6bcf\u4e00\u4e2a\u52a8\u4f5c\u7684\u65f6\u5e8f\u8981\u6c42\u533a\u5206\u5f00\u6765\u3002\u4e5f\u5c31\u662f\u8bf4\u8fd9\u79cd\u62bd\u8c61\u4f7f\u76f8\u540c\u4e00\u7ec4\u7684DRAM\u547d\u4ee4\u4ea4\u4e92\u80fd\u591f\u5e94\u7528\u5230\u6709\u4e0d\u540c\u7684\u65f6\u5e8f\u53c2\u6570\u7684\u4e0d\u540cDRAM\u5185\u5b58\u7cfb\u7edf\u4e2d\u3002\u901a\u8fc7\u5c06\u534f\u8bae\u7279\u5b9a\u7684\u65f6\u5e8f\u53c2\u6570\u8fdb\u884c\u62bd\u8c61\uff0c\u53ef\u4ee5\u5728\u62bd\u8c61\u5c42\u9762\u63cf\u8ff0DRAM\u547d\u4ee4\u3002\u4e5f\u5c31\u662f\u8bf4\u5728\u5206\u6790\u65f6\u5e8f\u53c2\u6570\u7684\u65f6\u5019\u5fc5\u987b\u7ed3\u5408\u67d0\u4e00\u4e2a\u62bd\u8c61\u7684\u547d\u4ee4","title":"\u65f6\u5e8f\u53c2\u6570"},{"location":"simulator/dramsim_ddr.html#raw-access-cmd","text":"\u884c\u8bbf\u95ee\u547d\u4ee4\u4e5f\u88ab\u79f0\u4e3a\u884c\u6fc0\u6d3b\u547d\u4ee4(row activation command).\u547d\u4ee4\u7684\u76ee\u7684\u662f\u8bb2\u6570\u636e\u4eceDRAM arrays\u7684\u5355\u5143\u4e2d\u642c\u5230\u611f\u77e5\u653e\u5927\u5668\u4e2d\uff0c\u7136\u540e\u5c06\u6570\u636erestore\u56de\u5b58\u50a8\u5355\u5143\u4e2d\u3002 tRCD\u662f\u6307\u884c\u8bbf\u95ee\u547d\u4ee4\u5c06DRAM\u5b58\u50a8\u5355\u5143\u4e2d\u7684\u6570\u636e\u79fb\u52a8\u5230sense amplifiers\u4e2d\u7684\u8fc7\u7a0b\u7684\u5ef6\u8fdf tRP precharge tRCD access + sense tRAS access + sense + restore tWR write Recovery AL = 0 Added Latency to column accesses, used in DDRx SDRAM devices for posted CAS commands tCCD_S = 4 tCCD_L = 6 Column-to-Column Delay. The minimum intra-device column-to-column command timing, determined by internal prefetch length tRRD_S = 8 tRRD_L = 8 Row activation to Row activation Delay. The minimum time interval between two row activation commands to the same DRAM device. tRTP = 12 Read to Precharge. The time interval between a read and a precharge command. Can be approximated by tCAS - tCMD tWTR_S = 8 tWTR_L = 16 Write To Read delay time. The minimum time interval between the end of write data burst and the start of a column read command tRFC = 392 tRFC2 = 268 tRFC4 = 172 Refresh Cycle Time. The time interval between Refresh and Activation commands. tCK = 0.83 CL = 17 CWL = 14 tREFI = 8660 tRPRE = 1 tWPRE = 1 tFAW = 32 tWR2 = 32 tCKE = 6 tCKESR = 7 tXS = 432 tXP = 6 tRTRS = 1 tPPD = 2","title":"raw access cmd"},{"location":"simulator/dramsim_ddr.html#_6","text":"Each DRAM bank has two stable states: IDLE and ACTIVE, as shown in Figure A In the IDLE state, the DRAM is precharged and ready for a row access. Row activation requires 3 cycles, during which no other operations may be issued to that bankDuring that time, however, operations may be issued to other banks of the DRAM. Once the DRAM\u2019s row activation latency has passed, the bank enters the ACTIVE state. Any number of pipelined column accesses may be performed while the bank is in the ACTIVE state. The bank will remain in the ACTIVE state until a precharge operation is issued to return it to the IDLE state. Like row activation, the precharge operation utilizes the bank resource for 3 cycles, during which no new operations may be issued to that bank.","title":"\u903b\u8f91\u72b6\u6001"},{"location":"simulator/dramsim_ddr.html#reorder","text":"Sequential accesses to different rows within one bank have high latency and cannot be pipelined, while accesses to different banks or different words within a single row have low latency and can be pipelined. Reorder memory operations to exploit the non-uniform access times of the DRAM is similar to how a superscalar processor schedules arithmetic operations out of order.","title":"Reorder"},{"location":"simulator/dramsim_ddr.html#ddr","text":"\u9762\u5411\u4e0d\u540c\u7684\u5e94\u7528\uff0cDDR\u53ef\u4ee5\u5206\u4e3a\u6807\u51c6DDR,\u7528\u4e8e\u624b\u673a\u7b49\u8bbe\u5907\u7684LPDDR, \u7528\u4e8e\u56fe\u5f62\u56fe\u50cf\u7684GDDR,\u5f53\u7136\u5b9e\u9645\u4e0a\u8fd8\u6709HBM\u7b49\u7b49\u3002","title":"DDR \u7c7b\u578b"},{"location":"simulator/dramsim_ddr.html#lpddr4-with-lpddr5","text":"LPDDR5\u7684\u6570\u636e\u901f\u7387\u8fbe\u5230\u4e866400Mbps,\u6709\u7740\u66f4\u5927\u7684\u8bbe\u5907\u5bb9\u91cf\uff0c\u66f4\u4f4e\u7684\u7535\u538b \u533a\u522b LPDDR4 LPDDR5 device size 2Gb to 32Gb (per channel); 4, 8, and 16 bank devices; 1k, 2k, and 4k page sizes 2Gb to 16Gb (per channel); 8 bank devices; 2k page sizes speed Up to 6400 Mbps Up to 4266 Mbps voltage 1.8V DRAM array; 1.05V / 0.9V core; 0.5V / 0.3 V I/O 1.8V DRAM array; 1.1V core; 1.1V / 0.6V I/O","title":"LPDDR4 with LPDDR5"},{"location":"simulator/dramsim_ddr.html#lpddr5","text":"LPDDR5\u9ad8\u901f\u540c\u6b65SDRAM,\u652f\u63011\u4e2achannel,\u53ef\u9009\u768416\u62168DQ\u4fe1\u53f7\u3002bank\u67b6\u6784\u662f\u53ef\u4ee5\u9009\u62e9\u7684\uff0c8bank\u6a21\u5f0f\uff0cbank group\u6a21\u5f0f(4banks, 4 bank-groups)\uff0c16bank\u6a21\u5f0f\u3002\u6bcf\u4e00\u79cdbank\u7ed3\u6784\u652f\u6301\u4e0d\u540c\u7684burst\u6a21\u5f0f\uff0c\u53ef\u4ee5\u901a\u8fc7\u6a21\u5f0f\u5bc4\u5b58\u5668\u6765\u914d\u7f6e.\u5bb9\u91cf\u652f\u63012Gb~32Gb \u9664\u4e86\u5728\u9891\u7387\u548c\u7535\u538b\u4e0a\u7684\u533a\u522b\uff0c\u5728\u7ec4\u7ec7\u7ed3\u6784\u4e0aLPDDR5\u548cLPDDR4\u6709\u7740\u6bd4\u8f83\u5927\u7684\u533a\u522b\uff0cLPDDR5\u652f\u6301\u7075\u6d3b\u7684bank\u7ed3\u6784\uff0c\u6709\u4e0d\u540c\u7684\u7a81\u53d1\u957f\u5ea6\u3002 bank-group\u6a21\u5f0f\u652f\u6301\u901f\u5ea6\u8d85\u8fc732Mbps,\u5e76\u4e14\u5141\u8bb816\u621632\u7684burst\u957f\u5ea6\u30028bank\u6a21\u5f0f\u652f\u6301\u6240\u6709\u901f\u5ea6\u4e0b\u768432 burst\u957f\u5ea6\u300216bank\u6a21\u5f0f\u652f\u6301\u4f4e\u4e8e3200Mbps\u7684\u901f\u5ea6\uff0c16\u621632\u7684burst\u957f\u5ea6\u3002 LPDDR5x\u4e0d\u652f\u63018bank\u6a21\u5f0f\uff0c\u4f46LPDDR5\u652f\u6301","title":"LPDDR5"},{"location":"simulator/dramsim_ddr.html#ddr_1","text":"Example of cadence DDR controller This Cadence DDR Controller contains an internal AXI port which communicates on the AXI bus. The AXI port uses an AXIController Core interface block to connect to the Controller core","title":"DDR\u63a7\u5236\u5668"},{"location":"simulator/dramsim_ddr.html#ddr-sdram-address-mapping-options","text":"The address map for this Cadence DDR Controller is ordered as follows: Chip Index -- Chip Select -- Row -- Bank / Bank Group -- Column -- Datapath The address structure of DDR SDRAM memories contains 6 fields. Each of these fields can be individually addressed when accessing the DRAM. The chip select and chip index fields are always the most significant fields of the address. The column and datapath fields are always the least significant fields. The position of the row and bank/bank group fields are defined at configuration. If the cs_lower_addr_en parameter is set to \u2019b1, the row field is moved to the higher bits of the address map relative to the chip select field and chip index field. This alters the memory map from the original (Chip Index -- Chip Select -- Row -- Bank / Bank Group -- Column -- Datapath) to Row -- Chip Index -- Chip Select -- Bank / Bank Group -- Column -- Datapath","title":"DDR SDRAM Address Mapping Options"},{"location":"simulator/dramsim_ddr.html#maximum-address-space","text":"MaxMemBytes = Chip Selects x Chip Indexes x 2Address x NumBanks x DPWidthBytes For this controller, the maximum values for these fields are as follows: Chip Indexes = 2 Chip Selects = 2 Memory Address = 18 + 12 (Row + Column) Number of Banks Per Chip Select = 16 Memory Datapath Width in Bytes = 8 bytes As a result, the maximum accessible memory area is 2 TB.","title":"Maximum Address Space"},{"location":"simulator/dramsim_ddr.html#mc-port-interface","text":"The interface block contains FIFOs and an array for commands, read and write data, and process any clock domain crossings, if required. Commands are fed to the command queue of the Controller core. Write and read data is routed directly to the write and read data queues of the Controller core through the data interface. Write data is stored in the port write data array and only transmitted to the Controller core\u2019s write data holding queue when the command is selected for processing.","title":"MC Port Interface"},{"location":"simulator/dramsim_ddr.html#axi-controller-core-interface","text":"Command FIFO prior to entering the port command FIFO, the AXI-Controller Core interface block converts the AXI transaction into a Controller core transaction. In-Port Arbitration within the port, it is possible that both the read and write command channel of the AXI bus are active concurrently. If this occurs, the port performs a simple arbitration to select the command to pass through to the Controller core. This arbitration is based on the following factors, in order of importance: Order of command acceptance into the port Priority of read commands versus priority of write commands for this port Default Read over Write preference The purpose of the write Array is to allow the AXI bus to off load its write data completely before the data is transferred to the Controller core buffers Write responses will be returned in the same order as the commands were received, regardless of the AXI ID or the type of response requested The register interface is an independent AXI port to the Cadence DDR Controller. This port converts the AXI register addresses to Controller core register addresses","title":"AXI-Controller Core Interface"},{"location":"simulator/dramsim_ddr.html#placement-logic","text":"","title":"Placement Logic"},{"location":"simulator/dramsim_ddr.html#address-collisiondata-coherency-violation","text":"To avoid address collisions, reads or writes that access the same range of the same chip select, bank and row as a command already in the command queue will be inserted into the command queue after the original command, even if the new command is of a higher priority. This rule is ignored when comparing a new read command to an existing read. Controller utilizes micro page masking for address collision checking to provide a finer granularity for collision. Address collision checking may be enabled/disabled through the addr_cmp_en parameter.","title":"Address Collision/Data Coherency Violation"},{"location":"simulator/dramsim_ddr.html#source-id-collision","text":"The port is assigned a specific source ID that is based on the thread ID information and identifies the source uniquely. In general, read commands from the same source ID will be placed in the command queue in order. Write command conflicts will be dependent on the programming of the wr_order_req parameter. The behavior of commands of different types from the same source ID is dependent on the user configuration. If there are no address conflicts, a read command could be executed ahead of a write command with the same source ID, and likewise a write command could be executed ahead of a read command with the same source ID. Source ID collision checking will always be enabled.","title":"Source ID Collision"},{"location":"simulator/dramsim_ddr.html#priority","text":"For the parameters, a value of 0 is the highest priority and a value of 15 is the lowest priority. For the signals, a value of 15 is the highest priority and a value of 0 is the lowest priority. Controller will invert this signal inside the Controller core and use 0 as the highest priority and 15 as the lowest priority. The placement algorithm will attempt to place higher priority commands ahead of lower priority commands, as long as they have no source ID or address collisions. Priority checking is enabled through the priority_en parameter.","title":"Priority"},{"location":"simulator/dramsim_ddr.html#bank-splitting","text":"\u5982\u679c\u4e00\u4e2a\u65b0\u7684\u547d\u4ee4\u8bbf\u95ee\u7684\u5730\u5740\u548c\u547d\u4ee4\u961f\u5217\u4e2d\u7684\u547d\u4ee4\u843d\u5728\u540c\u4e00\u4e2a\u7247\u9009\uff0c\u540c\u4e00\u4e2abank\uff0c\u4f46\u4e0d\u540c\u7684\u884c\uff0c\u8fd9\u4e9b\u547d\u4ee4\u5c31\u4f1a\u88ab\u8ba4\u4e3a\u6709bank\u51b2\u7a81 Before accesses can be made to two different rows within the same bank, the first active row must be closed (pre-charged) and the new row must be opened (activated) Bank splitting is enabled through the bank_split_en parameter.","title":"Bank Splitting"},{"location":"simulator/dramsim_ddr.html#write-to-read-splitting","text":"When a read command follows a write command to the same chip select, there is some timing overhead to switch command types. Write-to-read splitting is enabled through the w2r_split_en parameter.","title":"Write-to-Read Splitting"},{"location":"simulator/dramsim_ddr.html#readwrite-grouping","text":"The memory suffers a small timing overhead when switching from read to write mode. Placement logic will attempt to place a new read command sequentially with other read commands in the command queue, or a new write command sequentially with other write commands in the command queue. Read/write grouping is enabled through the rw_same_en parameter. Bank Conflicts and Read/Write Grouping Chip Select Grouping with Read/Write Grouping Page Grouping with Read/Write Grouping","title":"Read/Write Grouping"},{"location":"simulator/dramsim_ddr.html#select-logic","text":"On each clock cycle, the selection logic will scan the top 16 entries of the command queue to determine which command to execute.","title":"select logic"},{"location":"simulator/dramsim_ddr.html#high-priority-command-swapping","text":"placement algorithm \u5728\u51b3\u5b9a\u547d\u4ee4\u5728queue\u4e2d\u7684\u987a\u5e8f\u7684\u65f6\u5019\u5df2\u7ecf\u8003\u8651\u4e86\u4f18\u5148\u7ea7\uff0c\u4f46\u4ecd\u7136\u4f1a\u6709\u9ad8\u4f18\u5148\u7ea7\u7684\u547d\u4ee4\u5728commmand queue\u4e2d\u7b49\u5f85\u4e00\u4e2a\u4f4e\u4f18\u5148\u7ea7\u7684\u6b63\u5728\u5904\u7406\u7684\u547d\u4ee4\u3002 \u9ad8\u4f18\u5148\u7ea7\u8f6c\u6362\u7279\u6027\u5141\u8bb8\u65b0\u7684\u9ad8\u4f18\u5148\u7ea7\u7684\u547d\u4ee4\u66f4\u5feb\u7684\u6267\u884c\u3002 \u5982\u679c\u9009\u62e9\u7684command queue\u4e2d\u7684\u547d\u4ee4\u6709\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7\uff0c\u5e76\u4e14\u8ddf\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u547d\u4ee4\u7684ID\u4e0d\u4e00\u6837\uff0c\u4e5f\u6ca1\u6709\u5730\u5740\u548csource ID\u51b2\u7a81\uff0c\u90a3\u4e48\u6b63\u5728\u6267\u884c\u7684\u6307\u4ee4\u5c06\u4f1a\u88ab\u4e2d\u65ad\u3002 \u5982\u679c\u8981\u4e2d\u65ad\u5f53\u524d\u6267\u884c\u7684\u547d\u4ee4\uff0c\u5b83\u4f1a\u5728\u6267\u884c\u5b8c\u5f53\u524d\u7684burst\u4e4b\u540e\u88ab\u6302\u8d77\uff0c\u7136\u540e\u4fdd\u5b58\u5728\u547d\u4ee4\u961f\u5217\u7684\u9876\u90e8\uff0c\u7136\u540e\u65b0\u7684\u547d\u4ee4\u5c06\u4f1a\u88ab\u6267\u884c\u3002","title":"High-Priority Command Swapping"},{"location":"simulator/dramsim_ddr.html#command-aging","text":"\u56e0\u4e3a\u53ef\u4ee5\u5728\u5df2\u7ecf\u5b58\u5728\u7684\u547d\u4ee4\u4e0a\u9762\u63d2\u5165\u65b0\u7684\u547d\u4ee4\uff0c\u6240\u4ee5\u53ef\u80fd\u53d1\u751f\u4e00\u4e2a\u4f4e\u4f18\u5148\u7ea7\u7684\u547d\u4ee4\u4e00\u76f4\u5728command queue\u7684\u5e95\u90e8\u7684\u60c5\u51b5\u3002\u4e3a\u4e86\u907f\u514d\u8fd9\u79cdlockout\u7684\u60c5\u51b5\uff0c\u589e\u52a0\u4e86age\u8ba1\u6570\u5668\u3002\u5982\u679c\u4e00\u4e2a\u547d\u4ee4\u7684age\u8ba1\u6570\u5668\u8fbe\u5230\u4e86\u6700\u5927\u503c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u547d\u4ee4\u7684\u4f18\u5148\u7ea7\u4f1a\u88ab\u52a01\uff0c\u4f46\u4e0d\u4f1a\u79fb\u52a8\u8fd9\u4e2a\u547d\u4ee4\u5728command queue\u4e2d\u7684\u4f4d\u7f6e\uff0c\u5b83\u4f1a\u5f71\u54cd\u65b0\u7684\u547d\u4ee4\u7684placing\u3002\u8fd9\u4e2a\u529f\u80fd\u65e0\u6cd5\u5173\u95ed\u3002","title":"Command Aging"},{"location":"simulator/dramsim_ddr.html#_7","text":"\u300amemory access scheduling\u300b","title":"\u5185\u5b58\u8bbf\u95ee\u8c03\u5ea6\u7b97\u6cd5"},{"location":"simulator/dramsim_ddr.html#ddr_2","text":"[ https://www.micron.com/support/tools-and-utilities/power-calc?login ] \u4ee5\u9541\u5149DDR\u4e3e\u4f8b\uff0c\u9541\u5149\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5de5\u5177\u6765\u5bf9DDR\u7684\u529f\u8017\u8fdb\u884c\u8bc4\u4f30\uff0c\u4e5f\u6709\u76f8\u5173\u7684\u6587\u6863\u63cf\u8ff0\u4ed6\u4eec\u7684\u4e00\u4e9b\u8bc4\u4f30\u7ed3\u679c","title":"DDR\u529f\u8017"},{"location":"simulator/dramsim_ddr.html#dramsim3","text":"","title":"DRAMSim3"},{"location":"simulator/dramsim_ddr.html#_8","text":"","title":"\u914d\u7f6e\u53c2\u6570\u89e3\u6790"},{"location":"simulator/dramsim_ddr.html#_9","text":"","title":"\u7edf\u8ba1\u4fe1\u606f\u89e3\u6790"},{"location":"simulator/dramsim_ddr.html#_10","text":"","title":"\u5b9e\u73b0\u5206\u6790"},{"location":"simulator/gem5-se.html","text":"gem5\u7684SE\u6a21\u5f0f \u00b6 todo...","title":"gem5\u7684SE\u6a21\u5f0f"},{"location":"simulator/gem5-se.html#gem5se","text":"todo...","title":"gem5\u7684SE\u6a21\u5f0f"},{"location":"simulator/gem5.html","text":"GEM5 \u8bbe\u8ba1\u4e0e\u5b9e\u73b0\u5206\u6790 \u00b6 GEM5 \u8bbe\u8ba1\u4e0e\u5b9e\u73b0\u5206\u6790 \u524d\u8a00 \u5206\u6790\u70b9 \u7b80\u4ecb \u7406\u89e3gem5\u7684\u6a21\u5757\u5316 \u7406\u89e3gem5\u4e8b\u4ef6\u673a\u5236 TimeBuffer \u673a\u5236 \u673a\u5236\u4ecb\u7ecd \u4ee3\u7801\u5206\u6790 TimerBuffer\u603b\u7ed3 misc \u4eceboard\u5c42\u9762\u7406\u89e3gem5 \u4ecesoc\u5c42\u9762\u7406\u89e3gem5 \u4ececpu\u5fae\u67b6\u6784\u5c42\u9762\u7406\u89e3gem5 \u4e8b\u4ef6\u9a71\u52a8\u6a21\u578b simobject isa\u5b9a\u5236\u8bed\u6cd5 \u5185\u5b58\u7cfb\u7edf memory & port Python\u4e0eC++\u7684\u53c2\u6570\u4f20\u9012 \u6dfb\u52a0\u53c2\u6570\u7684\u65b9\u6cd5 \u6dfb\u52a0\u7b80\u5355SimObject \u6dfb\u52a0event \u5173\u4e8e\u7f16\u8bd1 O3 CPU\u7684ROB\u6a21\u5757\u5206\u6790 ROB\u4f5c\u7528\u673a\u5236 ROB\u4ee3\u7801\u7ed3\u6784\u5206\u6790 ROB\u64cd\u4f5c \u6307\u4ee4\u52a0\u5165ROB \u6307\u4ee4\u79fb\u51faROB squash\u7684\u64cd\u4f5c O3CPU\u7684Commit\u9636\u6bb5\u5206\u6790 commit\u9636\u6bb5\u6570\u636e\u7ed3\u6784 commit\u9636\u6bb5\u6d41\u7a0b \u4e00\u6b21ppt\u6c47\u62a5 gem5\u6d45\u6790 \u524d\u8a00 \u00b6 gem5\u662f\u4e00\u6b3e\u53ef\u4ee5\u5b9e\u73b0\u65f6\u949f\u7cbe\u786e\u4eff\u771f\u7684SOC\u6a21\u62df\u5668\u3002\u5b83\u672c\u8eab\u7684\u76ee\u7684\u5e76\u4e0d\u662f\u5e2e\u52a9\u4ea7\u54c1\u5f00\u53d1\uff0c\u5b83\u66f4\u504f\u5411\u4e8e\u6559\u80b2\u548c\u67b6\u6784\u63a2\u7d22\u3002 \u4f46\u662f\u7814\u7a76\u5b83\u4ecd\u7136\u662f\u6709\u610f\u4e49\u7684\uff0c\u5b83\u7684\u610f\u4e49\u5728\u4e8e\u80fd\u591f\u8ba9\u4f60\u5b66\u4e60\u5230\u4e00\u6b3e\u65f6\u949f\u7ea7\u6a21\u62df\u5668\u7684\u6784\u5efa\u601d\u8def\u3002 \u5b98\u7f51\uff1a[ http://www.gem5.org ] \u5b66\u4e60\u6307\u5bfc\uff1a[ http://www.gem5.org/documentation/learning_gem5/introduction ] \u76f8\u5173\u8d44\u6599\uff1a[ http://daystrom.m5sim.org/Main_Page ] \u5206\u6790\u70b9 \u00b6 \u5355\u5143\u7684\u8bbe\u8ba1\u601d\u8def \u5982\u4f55\u89e3\u51b3\u5bc4\u5b58\u5668\u51b2\u7a81 \u6d41\u6c34\u7ebf\u7684\u5b9e\u73b0\u65b9\u5f0f \u65f6\u949f\u5982\u4f55\u7edf\u4e00 \u591a\u6838\u8bbe\u8ba1 \u603b\u7ebf\uff0c\u7aef\u53e3\u7684\u62bd\u8c61 debug\u5982\u4f55\u652f\u6301 \u5730\u5740\u6620\u5c04\u7684\u5904\u7406\u65b9\u6cd5 \u7b80\u4ecb \u00b6 gem5\u662f\u4e00\u4e2a\u6a21\u5757\u5316\u7684\u8ba1\u7b97\u673a\u7cfb\u7edf\uff08computer-system\uff09\u6a21\u62df\u5668\uff0c\u5b83\u7ed3\u5408\u4e86M5(\u591a\u5904\u7406\u5668\u6a21\u62df\u5668)\u548cGEMS\uff08\u5b58\u50a8\u5c42\u6b21\u6a21\u62df\u5668\uff09\u4e2d\u6700\u4f18\u79c0\u7684\u90e8\u5206\uff0c\u6700\u521d\u7528\u4e8e\u8ba1\u7b97\u673a\u67b6\u6784\u4ee5\u53ca\u5fae\u5904\u7406\u5668\u67b6\u6784\u63a2\u7d22\uff0c\u5f53\u7136\u5728\u7814\u7a76\u884c\u4e1a\uff0c\u6559\u5b66\u884c\u4e1a\u4e5f\u6709\u63a8\u5e7f\u3002 \u4f46\u603b\u4f53\u6765\u8bb2\uff0cgem5\u662f\u504f\u5411\u4e8e\u5b66\u672f\u7684\u4e00\u6b3e\u6a21\u5757\u5316\u6a21\u62df\u5668\u5e73\u53f0\u3002 gem5\u76ee\u524d\u8fd8\u5728\u53d1\u5c55\uff0c\u652f\u6301\u7684CPU\u7c7b\u578b\u6709\uff1aAlpha, ARM, MIPS, Power, SPARC, RISC-V \u4ee5\u53ca 64 bit x86\u3002 \u5982\u4e0a\u662f\u5bf9\u4e8egem5\u5b98\u7f51\u63cf\u8ff0\u7684\u6982\u62ec\uff0c\u5176\u4e2d\u6700\u5173\u952e\u7684\u5e94\u8be5\u5c31\u662f\u6a21\u5757\u5316\u3002gem5\u53ef\u4ee5\u505a\u5230\u65f6\u949f\u7cbe\u786e\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u5229\u7528\u5b83\u7684\u6a21\u5757\u5316\uff0c\u5ffd\u7565\u6389\u4e00\u4e9b\u6a21\u5757\u7684latency\u3002\u672c\u6587\u4e3b\u8981\u4fa7\u91cd\u7684\u662fRISC-V\u67b6\u6784\u3002\u5bf9\u4e8eRISC-V, \u76ee\u524dgem5\u4e3b\u7ebf\u8fd8\u4e0d\u652f\u6301vector\u6269\u5c55\uff0c\u4f46amf\u6269\u5c55\u90fd\u5df2\u7ecf\u652f\u6301\u3002 gem5\u80fd\u591f\u6a21\u62df\u51fa\u4e00\u5757\u5177\u4f53\u7684\u677f\u5361\uff0c\u5305\u542b\u7531\u5404\u4e2a\u6a21\u5757\u7ec4\u6210\u7684SOC\u3001DDR\u4ee5\u53ca\u90e8\u5206\u5916\u8bbe\u7684\u5177\u4f53\u677f\u5361\uff0c\u4f46\u5b83\u6a21\u62df\u7684\u6838\u5fc3\u4ecd\u5728\u4e8eSOC\u5185\u90e8\u3002 gem5\u4e5f\u80fd\u8fd0\u884clinux\u7cfb\u7edf \u7406\u89e3gem5\u7684\u6a21\u5757\u5316 \u00b6 linux\u7cfb\u7edf\u63d0\u4f9b\u4e86\u8bbe\u5907\u6811\uff0c\u8ba9\u5f00\u53d1\u8005\u901a\u8fc7\u7ec4\u5408\u7cfb\u7edf\u786c\u4ef6\u7684\u4e00\u7cfb\u5217\u6a21\u5757\uff0c\u4ece\u800c\u5339\u914d\u81ea\u5df1\u7684\u677f\u5361\u3002gem5\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u5b83\u6709\u5f88\u591a\u6a21\u5757\u90fd\u6709\u591a\u79cd\u5b9e\u73b0\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a\u5177\u4f53\u7684\u67d0\u4e00\u79cd\u5b9e\u73b0\u6765\u7ec4\u5408\u51fa\u4f60\u60f3\u6a21\u62df\u7684\u7cfb\u7edf\u3002 gem5\u7684\u6838\u5fc3\u5185\u5bb9\uff08\u5404\u4e2a\u6a21\u5757\u548c\u673a\u5236\u7684\u5177\u4f53\u5b9e\u73b0\uff09\u4f7f\u7528c++\u7f16\u5199\uff0c\u5185\u90e8\u96c6\u6210\u4e86python2.7\u89e3\u6790\u5668\u3002\u8fd9\u4e9b\u6a21\u5757\u5b9e\u73b0\u5b8c\u6210\u4e4b\u540e\u5c31\u50cflinux\u5185\u6838\u4e2d\u5b9e\u73b0\u7684\u4e00\u4e2a\u4e2adevice\uff0c\u6bd4\u5982\uff1acpu,cache,memory,power,process,tlb\u7b49\u7b49\u3002python\u89e3\u6790\u5668\u4f1a\u89e3\u6790\u5916\u90e8\u8f93\u5165\u7684\u914d\u7f6e\u6587\u4ef6\uff08python\u811a\u672c)\uff0c\u8fd9\u4e2a\u811a\u672c\u5c31\u50cf\u8bbe\u5907\u6811\u4e00\u6837\uff0c\u63cf\u8ff0\u4e86\u6574\u4e2a\u7cfb\u7edf\u662f\u5982\u4f55\u7531\u8fd9\u4e9bdevice\u7ec4\u5408\u8d77\u6765\u7684\uff0c\u5e76\u4e14\u5b9a\u4e49\u4e86\u8fd9\u4e9bdevice\u7684\u4e00\u4e9b\u5fc5\u4e0d\u53ef\u5c11\u7684\u53c2\u6570\u3002\u5728\u7cfb\u7edf\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u6839\u636e\u914d\u7f6e\u6587\u4ef6\u7684\u63cf\u8ff0\uff0c\u5bf9\u76f8\u5e94\u7684c++\u7c7b\u8fdb\u884c\u5b9e\u4f8b\u5316\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5177\u4f53\u7684\u7cfb\u7edf\u3002 \u6709\u4e9b\u6a21\u5757\u662f\u901a\u8fc7\u9759\u6001\u7f16\u8bd1\u7ed1\u5b9a\u7cfb\u7edf\u7684\uff0c\u6709\u4e9b\u6a21\u5757\u662f\u901a\u8fc7\u89e3\u6790\u914d\u7f6e\u811a\u672c\u52a8\u6001\u7ed1\u5b9a\u7684\u3002\u6bd4\u5982ARCH\u76f8\u5173\u7684\u5c31\u662f\u901a\u8fc7\u9759\u6001\u7f16\u8bd1\u7ed1\u5b9a\u7684\uff0c\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u6307\u5b9a\u8981\u7f16\u8bd1\u7684ARCH\uff0c\u800ccpu\u7c7b\u578b\u6211\u4eec\u53ef\u4ee5\u5728 \u914d\u7f6e\u811a\u672c\u4e2d\u6307\u5b9a\u3002 \u5f53\u7136\u4e86\uff0c\u5c31\u50cf\u4e50\u9ad8\u73a9\u5177\u4e00\u6837\uff0c\u7a7a\u6709\u4e00\u5806\u96f6\u4ef6\uff0c\u6ca1\u6709\u56fe\u7eb8\uff0c\u4e5f\u5f88\u96be\u505a\u51fa\u6765\u50cf\u6837\u7684\u73a9\u5177\uff08\u5929\u624d\u53ef\u80fd\u9664\u5916\uff09\u3002\u5982\u679c\u8ba9\u6211\u4eec\u4ece0\u5f00\u59cb\u7ec4\u5408\u8fd9\u4e9b\u6a21\u5757\uff0c\u662f\u5f88\u56f0\u96be\u7684\u4e00\u4ef6\u4e8b\u60c5\uff0c\u4f46\u597d\u5728gem5\u63d0\u4f9b\u4e86\u4e00\u4e9bdemo\u7684config\u6587\u4ef6\uff0c\u5e76\u4e14tests\u4e2d\u4e5f\u63d0\u4f9b\u4e86\u4e00\u4e9bconfig\u6587\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u6a21\u6539\u8fd9\u4e9b\u6587\u4ef6\u5b9e\u73b0\u81ea\u5df1\u7684\u7cfb\u7edf\u3002 \u793e\u533a\u6b63\u5728\u5f00\u53d1\u57fa\u4e8e\u56fe\u5f62\u62d6\u62fd\u5c31\u80fd\u751f\u6210config\u6587\u4ef6\u7684\u529f\u80fd\uff0c\u8fd9\u4f1a\u4f7f\u5b83\u7684config\u6587\u4ef6\u5199\u8d77\u6765\u66f4\u76f4\u89c2\u3002 \u7406\u89e3gem5\u4e8b\u4ef6\u673a\u5236 \u00b6 gem5\u7684\u8fd0\u884c\u662f\u9760\u4e8b\u4ef6\u673a\u5236\u6765\u5b8c\u6210\u7684\uff0c\u4e8b\u4ef6\u6309\u7167tick\u548c\u4f18\u5148\u7ea7\u8fdb\u884c\u6392\u5e8f\uff0c\u540c\u4e00tick\u548c\u4f18\u5148\u7ea7\u7684\u4e8b\u4ef6\u88ab\u79f0\u4e3a\u201cInBin\u201d, \u6309\u7167\u6808\u7684\u65b9\u5f0f\u6765\u7ba1\u7406 \u4e8b\u4ef6\u7ba1\u7406\u7684\u6838\u5fc3\u4ee3\u7801\u5728src/sim/eventq.cc\u53caeventq.hh\u4e2d Event\u53caEventQueue\u662f\u6838\u5fc3\u7684\u6570\u636e\u7ed3\u6784\uff0c\u663e\u7136\uff0cEvent\u5b9e\u73b0\u4e86\u5bf9\u4e8b\u4ef6\u7684\u62bd\u8c61\uff0cEventQueue\u5b9e\u73b0\u4e86\u5bf9\u4e8b\u4ef6\u7684\u5c01\u88c5\u548c\u7ba1\u7406 class Event : public EventBase , public Serializable { friend class EventQueue ; private : Event * nextBin ; Event * nextInBin ; Tick _when ; //!< timestamp when event should be processed Priority _priority ; //!< event priority } class EventQueue { private : Event * head ; Tick _curTick ; } \u4e0a\u8ff0\u4ee3\u7801\u7f57\u5217\u4e86Event\u7684\u51e0\u4e2a\u91cd\u8981\u5b57\u6bb5\uff0c\u5176\u4e2dnextBin\u6307\u5411\u4e0b\u4e00\u4e2aEvent\uff0c\u5e76\u4e14\u4e0b\u4e00\u4e2aEvent\u4e00\u5b9a\u4e0e\u5f53\u524dEvent\u7684in bin\u4e0d\u540c(\u4e0d\u540cwhen\u6216\u8005\u4e0d\u540cpriority)\u3002 nextInBin\u662f\u6307\u5411\u4e0b\u4e00\u4e2a\u540cwhen\u540cpriority\u7684Event, nextInBin\u8fd9\u4e2a\u94fe\u8868\u88ab\u4f5c\u4e3a\u6808\u7684\u903b\u8f91\u6765\u7ba1\u7406\u3002 \u4e0a\u8ff0\u4e24\u70b9\u90fd\u662f\u7531Event\u7684\u63d2\u5165\u7b56\u7565\uff08insertBefore\uff09\u51b3\u5b9a\u7684\u3002 EventQueue\u4fdd\u5b58\u4e86Event\u94fe\u8868\u7684\u8868\u5934\uff0c\u8fd9\u662f\u904d\u5386\u7684\u8d77\u70b9\uff0c_curTick\u4fdd\u5b58\u4e86\u5f53\u524d\u7684\u5468\u671f\u65f6\u95f4\uff0c\u8fd9\u4e2a\u65f6\u95f4\u603b\u662f\u88ab\u8bbe\u7f6e\u4e3ahead\u7684_when,\u8fd9\u662f\u5728\u6267\u884c\u7684\u65f6\u5019\u51b3\u5b9a\u7684\u3002 \u663e\u7136\uff0cEventQueue\u4fdd\u5b58\u4e86\u4e00\u4e2a\u4e8b\u4ef6\u961f\u5217\uff0c\u8fd9\u4e2a\u961f\u5217\u662f\u4e00\u4e2a\u5355\u5411\u94fe\u8868\uff0c\u4f7f\u7528nextBin\u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2aEvent,\u4ee5_when+_priority\u7684\u65b9\u5f0f\u8fdb\u884c\u63d2\u5165\u3002 \u540c\u65f6\uff0c\u8fd9\u4e2a\u5355\u5411\u94fe\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2aEvent\u90fd\u662f\u5f53\u524d\u76f8\u540c_when + _priority\u7684Event\u7684\u6808\u9876\uff0c\u6bcf\u63d2\u5165\u4e00\u4e2a\u76f8\u540c_when + _priority\u7684Event\uff0c\u5f53\u524d\u8fd9\u4e2aEvent\u5c31\u4f1a\u88ab\u538b\u6808\uff0c\u4f7f\u7528nextInBin\u8fdb\u884c\u7ba1\u7406\uff0c\u65b0\u7684Event\u66ff\u4ee3\u539f\u6709Event\u7684\u4f4d\u7f6e\uff0c\u8fd9\u662f\u63d2\u5165\u65b9\u6cd5insertBefore\u51b3\u5b9a\u7684\u3002 Event * Event::insertBefore ( Event * event , Event * curr ) { // Either way, event will be the top element in the 'in bin' list // which is the pointer we need in order to look into the list, so // we need to insert that into the bin list. if ( ! curr || * event < * curr ) { // Insert the event before the current list since it is in the future. event -> nextBin = curr ; event -> nextInBin = NULL ; } else { // Since we're on the correct list, we need to point to the next list event -> nextBin = curr -> nextBin ; // curr->nextBin can now become stale // Insert event at the top of the stack event -> nextInBin = curr ; } return event ; } insertBefore\u8d1f\u8d23\u63d2\u5165\u5f85\u6267\u884c\u7684\u4e8b\u4ef6\uff0c\u4e00\u822c\u7531schedule\u89e6\u53d1\u3002 serviceOne\u8d1f\u8d23\u6267\u884c\u5f53\u524dEventQueue\u4e2d\u7684\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u4e3a\u4e86\u66f4\u65b9\u4fbf\u7406\u89e3\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u505a\u4e86\u4e00\u4e9b\u5220\u51cf\u3002 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u6bcf\u6b21\u90fd\u662f\u6267\u884c\u5934\u8282\u70b9\uff0c\u800c\u4e14\u5982\u679c\u5f53\u524d\u5934\u8282\u70b9\u6709\u76f8\u540c_when + _priority\u7684\u4e8b\u4ef6\uff0c\u90a3\u4e48\u6309\u7167 \u51fa\u6808\u7684\u987a\u5e8f\u4f9d\u6b21\u6267\u884c\u4e8b\u4ef6\uff0c\u76f4\u5230\u5f53\u524d\u76f8\u540c_when + _priority\u6267\u884c\u5b8c\u6210\u540e\uff0c\u518d\u901a\u8fc7setCurTick(event->when())\u6765 \u4fee\u6539\u5f53\u524d\u7cfb\u7edf\u7684\u65f6\u95f4\uff0c\u6700\u7ec8event->process()\u6267\u884cEvent\u56de\u8c03\u51fd\u6570\u3002 Event * EventQueue::serviceOne () { Event * event = head ; Event * next = head -> nextInBin ; if ( next ) { // update the next bin pointer since it could be stale next -> nextBin = head -> nextBin ; // pop the stack head = next ; } else { // this was the only element on the 'in bin' list, so get rid of // the 'in bin' list and point to the next bin list head = head -> nextBin ; } setCurTick ( event -> when ()); event -> process (); event -> release (); return NULL ; } \u4ece\u603b\u5165\u53e3\u4e0a\u770b\u6765\uff0c\u6574\u4e2a\u4e8b\u4ef6\u673a\u5236\u7684\u8fd0\u884c\u5c31\u662f\u5728\u4e00\u4e2a\u5927while\u5faa\u73af\u4e2d\uff0c\u4e0d\u65ad\u8c03\u7528eventQueue\u7684serviceOne doSimLoop ( EventQueue * eventq ) { while ( 1 ) { Event * exit_event = eventq -> serviceOne (); if ( exit_event != NULL ) { return exit_event ; } } } TimeBuffer \u673a\u5236 \u00b6 \u673a\u5236\u4ecb\u7ecd \u00b6 TimeBuffer\u662fgem5\u5b9e\u73b0\u7684\u4e00\u4e2a\u5faa\u73afbuffer\uff0c\u8fd9\u4e2a\u5faa\u73afbuffer\u53ef\u4ee5\u6309\u7167tick\u6765\u63a8\u8fdb\uff0c\u6bcfadvance()\u4e00\u6b21\uff0cbuffer\u7684\u6307\u9488\u5c31\u524d\u8fdb\u4e00\u4e2a\u3002 TimeBuffer\u901a\u8fc7\u6a21\u677f\u53c2\u6570\u53ef\u4ee5\u7528\u6765\u5b58\u653e\u4efb\u4f55\u60f3\u8981\u5b58\u653e\u7684\u6570\u636e\uff0c\u7279\u522b\u9002\u5408\u5728\u6d41\u6c34\u524d\u540e\u4f20\u9012\u6570\u636e\uff0c\u80fd\u591f\u4f53\u73b0\u51fa\u6d41\u6c34\u7684\u5ef6\u65f6\u3002 TimeBuffer\u63d0\u4f9b\u4e86\u4e00\u4e2apast\u548cfuture\u7684\u6982\u5ff5\u3002 past/future past2 past1 past0 current future0 future1 data 0 1 2 3 4 5 index 0 1 2 3 4 5 \u4ece\u65f6\u95f4(tick)\u7684\u89d2\u5ea6,\u57fa\u4e8e\u5f53\u524d\uff0c\u5f80\u524d\u63a8\uff0c\u6709\u591a\u4e2atick\u7684\u5ef6\u8fdf\uff0c\u5c31\u53ef\u4ee5\u8bbe\u7f6epast\u503c\u4e3a\u591a\u5c11\u3002\u6bd4\u5982\u5f53\u524d\u662ffetch\u9636\u6bb5,\u4e0b\u4e00\u9636\u6bb5\u4e3adecode\u9636\u6bb5\uff0c\u6307\u4ee4\u4ecefetch\u6d41\u5230decode\u9700\u8981\u4e00\u4e2atick\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u81f3\u5c11\u8bbe\u7f6epast\u4e3a1\u3002\u540c\u7406future\u3002 \u5faa\u73afbuffer\u4f1a\u4ecefuture0\u5f00\u59cb\u88ab\u5237\u65b0\uff0c\u968f\u7740\u6bcf\u6b21advance(), \u4ecefuture0\u5f00\u59cb\uff0cdata\u4e2d\u7684\u6570\u636e\u4f1a\u88ab\u6790\u6784\u5e76\u91cd\u65b0\u6784\u9020\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u5185\u90e8\u540d\u4e3abase\u7684\u6570\u636e\u6307\u9488\u4e5f\u4f1a\u5faa\u73af\u589e\u52a0\u3002 \u5047\u8bbe\u6211\u4eec\u5b9e\u4f8b\u4e86\u4e00\u4e2aTimeBuffer, past=3, future=3,\u90a3\u4e48\u968f\u7740tick\u7684\u8fdb\u884c\uff0c\u5927\u81f4\u4f1a\u6709\u5982\u4e0b\u7684\u5173\u7cfb TimeBuffer \u63d0\u4f9b\u4e86wire\u6765\u5b9e\u73b0\u5bf9Buffer\u6570\u636e\u7684\u95f4\u63a5\u8bbf\u95ee\u3002\u5728\u5b9e\u73b0\u8fd9\u4e2a\u8bbf\u95ee\u63a5\u53e3\u7684\u65f6\u5019\uff0c\u9700\u8981\u63d0\u4f9b\u4e00\u4e2aindex\uff0c\u8fd9\u4e2aindex\u662f\u4e00\u4e2atick\u7684\u6982\u5ff5\u3002\u6bd4\u5982\u6211\u4eec\u5b9e\u4f8b\u4e24\u4e2awire\uff0cwire0\u7684index\u4e3a0, wire1\u7684index\u4e3a-2, \u90a3\u4e48\u5c31\u610f\u5473\u7740wire0\u6539\u5199\u7684buffer\u5355\u5143\u5728\u4e24\u4e2atick\u4e4b\u540e\uff0cwire1\u624d\u80fd\u8bbf\u95ee\u5230\u3002 tick 0 1 2 3 4 5 6 7 8 9 base 0 1 2 3 4 5 6 0 1 2 ptr 4 5 6 0 1 2 3 4 5 wire0 0 1 2 3 4 5 6 0 1 2 wire1 5 6 0 1 2 3 4 5 6 0 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5728tick0\u65f6\uff0cwire0\u53ef\u4ee5\u8bbf\u95eedata0, wire1\u53ef\u4ee5\u8bbf\u95eedata5\u3002\u5f53t\u7cfb\u7edftick\u8d70\u52301\u65f6\uff0c\u8c03\u7528advance(), \u6b64\u65f6TimeBuffer\u5185\u90e8\u6307\u9488base\u53d8\u4e3a1, TimeBuffer\u91cd\u6784\u4e86ptr\u6240\u6307\u5411\u7684data4\uff08ptr = future + base)\uff0c\u6b64\u65f6wire0\u80fd\u591f\u8bbf\u95eedata1, wire1\u80fd\u591f\u8bbf\u95eedata6\u3002 \u52a0\u5165\u5728tick2, wire0\u66f4\u65b0\u4e86data2, \u90a3\u4e48\u5728tick4, wire1\u624d\u80fd\u62ff\u5230\u66f4\u65b0\u540e\u7684data2, \u4f53\u73b0\u51fa\u4e86\u5ef6\u8fdf2\u4e2atick\u3002 \u4ee3\u7801\u5206\u6790 \u00b6 template < class T > class TimeBuffer { protected : int past ; int future ; unsigned size ; char * data ; std :: vector < char *> index ; unsigned base ; public : TimeBuffer ( int p , int f ) : past ( p ), future ( f ), size ( past + future + 1 ), data ( new char [ size * sizeof ( T )]), index ( size ), base ( 0 ) { assert ( past >= 0 && future >= 0 ); char * ptr = data ; for ( unsigned i = 0 ; i < size ; i ++ ) { index [ i ] = ptr ; std :: memset ( ptr , 0 , sizeof ( T )); new ( ptr ) T ; ptr += sizeof ( T ); } } TimeBuffer\u901a\u8fc7new char[size * sizeof(T)]\u4e00\u6b21\u6027\u7684\u4e3a\u6240\u6709\u5143\u7d20\u5f00\u8f9f\u5b58\u50a8\u7a7a\u95f4\u3002\u901a\u8fc7palcement new\u6765\u5b9e\u73b0\u5728\u5df2\u7ecf\u5f00\u8f9f\u7684\u7a7a\u95f4\u4e0a\u5bf9buffer\u5bf9\u8c61\u7684\u6784\u9020\u3002\u540c\u65f6\uff0c\u4e3a\u4e86\u8bbf\u95ee\u7684\u65b9\u4fbf\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2aindex\u7684\u6307\u9488\u5411\u91cf\u6307\u5411buffer\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u3002 void advance () { if ( ++ base >= size ) base = 0 ; int ptr = base + future ; if ( ptr >= ( int ) size ) ptr -= size ; ( reinterpret_cast < T *> ( index [ ptr ])) ->~ T (); std :: memset ( index [ ptr ], 0 , sizeof ( T )); new ( index [ ptr ]) T ; } \u6bcf\u6b21advance\u90fd\u53bb\u66f4\u65b0base\uff0c base\u901a\u8fc7size\u63a7\u5236\u6765\u5b9e\u73b0\u5faa\u73af\uff0c\u8fdb\u800c\u5b9e\u73b0\u5faa\u73afbuffer\u3002\u6bcf\u6b21advance\u90fd\u4f1a\u6790\u6784\u5e76\u91cd\u6784\u5f53\u524dbase\u5bf9\u5e94\u7684future\u6570\u636e\u3002 class wire { TimeBuffer < T > * buffer ; int index ; wire ( TimeBuffer < T > * buf , int i ) : buffer ( buf ), index ( i ) { } T & operator * () const { return * buffer -> access ( index ); } T * operator -> () const { return buffer -> access ( index ); } } class TimeBuffer { inline int calculateVectorIndex ( int idx ) const { int vector_index = idx + base ; if ( vector_index >= ( int ) size ) { vector_index -= size ; } else if ( vector_index < 0 ) { vector_index += size ; } return vector_index ; } T * access ( int idx ) { int vector_index = calculateVectorIndex ( idx ); return reinterpret_cast < T *> ( index [ vector_index ]); } } wire\u901a\u8fc7\u4e0d\u540c\u7684index\u6765\u5b9e\u73b0\u5bf9timebuffer\u4e2d\u4e0d\u540c\u7684\u5143\u7d20\u7684\u8bbf\u95ee\uff0c\u5176\u4e2dcalculateVectorIndex\u4ecd\u7136\u662f\u4e3a\u4e86\u5b9e\u73b0\u5faa\u73afbuffer\u3002\u5f53\u7136\uff0cwire\u7684\u5b57\u6bb5index\u7684\u547d\u540d\u5bb9\u6613\u5f15\u53d1\u6b67\u4e49\uff0c\u6216\u8bb8\u53ef\u4ee5\u7528\u4e00\u4e2a\u66f4\u4e0d\u5bb9\u6613\u6df7\u6dc6\u7684\u540d\u5b57\u3002 TimerBuffer\u603b\u7ed3 \u00b6 \u5c3d\u7ba1TimeBuffer\u7684\u6838\u5fc3\u662f\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u7ec4\uff0c\u6570\u636e\u5728buffer\u4e2d\u5b9e\u9645\u4e0a\u662f\u4e0d\u52a8\u7684\u3002\u4f46\u5b83\u901a\u8fc7base\u53ca\u4e00\u4e9b\u8f85\u52a9\u8ba1\u6570\uff0c\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u961f\u5217\u7684\u529f\u80fd\uff0c\u800c\u4e14\uff0c\u6570\u636e\u79fb\u51fa\u961f\u5217\u5c31\u4f1a\u6d88\u5931\u3002 \u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u5176\u4e2d\u7684\u6570\u636e\u662f\u6309\u7167tick\u8fdb\u884c\u6d41\u52a8\u7684\uff0c\u800c\u4e14\u901a\u8fc7wire\u8bbf\u95ee\u7684\u65b9\u5f0f\uff0c\u5b9e\u73b0\u4e86\u4fe1\u53f7\u4f20\u9012\u53ca\u6570\u636e\u6d41\u52a8\u7684\u5ef6\u8fdf\u3002 misc \u00b6 gem5\u80fd\u591f\u6a21\u62df\u4e00\u5757\u677f\u5361 \u4e0a\u56fe\u662f\u4e00\u4e2a\u8f83\u4e3a\u590d\u6742\u7684\u5f00\u53d1\u677f\u7cfb\u7edf\u6846\u56fe\uff0c\u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u5230\uff0csoc\u901a\u8fc7\u5b83\u7684\u5916\u90e8\u63a5\u53e3\u8fde\u63a5\u4e86\u677f\u4e0a\u7684\u5404\u4e2a\u5916\u8bbe\u3002\u6bd4\u5982\u901a\u8fc7DDR4\u63a5\u53e3\u8fde\u63a5\u5916\u90e8DDR,\u901a\u8fc7PCIE\u63a5\u53e3\u8fde\u63a5\u5916\u90e8PCIE\u8bbe\u5907\uff0c\u901a\u8fc7USB\u63a5\u53e3\u94fe\u63a54G\u6a21\u5757\u7b49\u7b49\u3002 gem5\u80fd\u591f\u6a21\u62df\u51fa\u7c7b\u4f3c\u4e0a\u56fe\u7684\u4e00\u5757\u677f\u5361\uff0c\u5305\u62ecSOC\u4ee5\u53ca\u90e8\u5206\u5916\u8bbe\u3002\u4f46\u662f\uff0c\u6709\u4e24\u70b9\u9700\u8981\u6ce8\u610f gem5\u7684\u6838\u5fc3\u4efb\u52a1\u8fd8\u662f\u6a21\u62dfSOC\u5185\u90e8\u884c\u4e3a\uff0c\u76ee\u524d\u5b9e\u73b0\u7684\u5916\u8bbe\u6bd4\u8f83\u5c11 gem5\u7684\u5916\u8bbe\u529f\u80fd\u662f\u5728\u63a7\u5236\u5668\u4fa7\u505a\u7684\u3002 \u5047\u5982\u6211\u4eec\u8981\u505a\u4e00\u4e2a\u6a21\u62df\u5668\uff0c\u8981\u5b9e\u73b0SOC\u8bbf\u95ee\u5916\u90e8TMP75\u6e29\u5ea6\u4f20\u611f\u5668\u7684\u6a21\u62df\u3002\u5047\u5982\u6211\u4eec\u7684\u91cd\u70b9\u662f\u5728SOC\u5185\u90e8\uff0c\u90a3\u6211\u4eec\u53ef\u80fd\u4f1a\u60f3\u7740\u53bb\u5b9e\u73b0\u8fd9\u4e2aTMP75\u4f20\u611f\u5668\uff0c\u5e76\u4e14\u5b9e\u73b0\u8fd9\u4e2a\u603b\u7ebf\u8fde\u63a5\u3002 \u4f46\u8fd9\u6837\u5b58\u5728\u7684\u95ee\u9898\u662f\uff0c\u4f1a\u8ba9\u5b9e\u73b0\u5f88\u590d\u6742\uff0c\u540c\u65f6\u4f1a\u8ba9\u5de5\u4f5c\u7684\u91cd\u5fc3\u4eceCPU\u8f6c\u5230\u4e86\u5916\u8bbe\u4e0a\uff0c\u5df2\u7ecf\u8131\u79bb\u4e86\u4f5c\u4e3a\u4e00\u6b3eCPU\u6a21\u62df\u5668\u6700\u6838\u5fc3\u7684\u4e1c\u897f\u3002\u8fd9\u5f88\u6ca1\u6709\u6027\u4ef7\u6bd4\u3002gem5\u7684\u5b9e\u73b0\u662f\u5728\u63a7\u5236\u5668\u4e0a\u505a\u6587\u7ae0\uff0c\u6bd4\u5982\u540c\u6837\u8981\u5b9e\u73b0\u901a\u8fc7I2C\u8bbf\u95eeTMP75\u4f20\u611f\u5668\uff0c\u5b83\u4f1a\u76f4\u63a5\u5728I2C\u63a7\u5236\u5668\u4e0a\u5b9e\u73b0TMP75\u4f20\u611f\u5668\u7684\u529f\u80fd\uff0c\u5e76\u4e14\u53ea\u9700\u8981\u8bbe\u7f6e\u597d\u6570\u636e\u8fd4\u56de\u7684latency\uff0c\u5c31\u5b8c\u5168\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u6a21\u62df\uff0c\u5e76\u4e14\u4fdd\u8bc1\u4e00\u5b9a\u7684\u65f6\u949f\u7cbe\u786e\u3002\uff08\u5f53\u7136\u8fd9\u4e2a\u4f8b\u5b50\u5728gem5\u4e2d\u6ca1\u6709\u5b9e\u73b0\uff09 gem5\u7684\u5185\u5b58\u7cfb\u7edf\u652f\u6301DDR\uff0c\u540c\u6837\u7684\uff0cgem5\u5728DDR\u63a7\u5236\u5668\u4e0a\u505a\u6587\u7ae0\uff0c\u53ea\u9700\u8981\u8bbe\u7f6eDDR\u63a7\u5236\u5668\u7684\u4e00\u4e9bLatency\u53c2\u6570\uff0c\u5c31\u53ef\u4ee5\u5728DDR\u8bbf\u95ee\u7684\u6027\u80fd\u65b9\u9762\u505a\u5230\u7c7b\u4f3c\u771f\u5b9e\u7684DDR\uff0c\u800c\u4e0d\u9700\u8981\u771f\u5b9e\u7684\u53bb\u6a21\u62df\u51fa\u6765\u4e00\u4e2aDDR\u82af\u7247\u5e76\u4e14\u518d\u8bbe\u8ba1DDR\u603b\u7ebf\u8fde\u63a5SOC\u548cDDR\u82af\u7247\u3002 \u53c2\u8003gem5\u5b98\u7f51\u7684\u6587\u6863\uff0c\u5927\u81f4\u6709\u4e0b\u9762\u51e0\u4e2a\u6838\u5fc3\u673a\u5236\u9700\u8981\u7406\u89e3 gem5\u662f\u57fa\u4e8e\u4e8b\u4ef6\u9a71\u52a8\u6a21\u578b\u800c\u8bbe\u8ba1\u7684\uff0c\u90a3\u4e48\u4e8b\u4ef6\u9a71\u52a8\u6a21\u578b\u662f\u5982\u4f55\u5b9e\u73b0\u4e0e\u8fd0\u884c\u7684\uff1f \u5927\u591a\u6570\u6a21\u5757\u7684\u57fa\u7c7b\u90fd\u662fSimObject\uff0cgem5\u662f\u5982\u4f55\u7ba1\u7406\u8fd9\u4e9bSimObject\u7684\uff0c\u8fd9\u4e9bSimObject\u53c8\u662f\u5982\u4f55\u7ec4\u6210\u7cfb\u7edf\u7684\uff1f gem5\u7684isa\u5b9e\u73b0\u53ef\u4ee5\u7406\u89e3\u4e3a\u81ea\u521b\u4e86\u4e00\u5957\u8bed\u6cd5\uff0c\u5e76\u4e14\u5b9e\u73b0\u4e86isa_parser\u7684\u89e3\u6790\u5668\u3002\u89e3\u6790\u5668\u89e3\u6790\u56fa\u5b9a\u8bed\u6cd5\u7684ias\u63cf\u8ff0\u6587\u4ef6\uff0c\u751f\u6210isa\u5b9e\u73b0\u7684c++\u4ee3\u7801\uff0c\u5e76\u53c2\u4e0e\u7f16\u8bd1\u3002 gem5\u5982\u4f55\u5b9e\u73b0\u5185\u5b58\u7cfb\u7edf \u4e0a\u8ff0\u8fd9\u4e9b\uff0c\u90fd\u53ef\u4ee5\u5728gem5\u5b98\u7f51\u4e2d\u627e\u5230\u86db\u4e1d\u9a6c\u8ff9\u3002 \u4f46\u6362\u4e00\u4e2a\u89d2\u5ea6\uff0c\u4ece\u66f4\u9ad8\u7684\u5c42\u9762\u6765\u770bgem5\u3002gem5\u662f\u5982\u4f55\u62bd\u8c61\u677f\u5361\uff08board\uff09, soc, cpu\u5b50\u7cfb\u7edf\u7684\uff1f \u4f3c\u4e4e\u8fd9\u4e2a\u95ee\u9898\u5728\u5b98\u7f51\u4e2d\u5e76\u65e0\u6cd5\u76f4\u63a5\u627e\u5230\u7b54\u6848\uff0c\u7136\u800c\u8fd9\u6070\u6070\u662f\u6211\u8ba4\u4e3a\u7406\u89e3gem5\u6700\u91cd\u8981\u7684\u90e8\u5206\u3002 \u5bf9\u4e8e\u4e0a\u9762\u63d0\u5230\u7684\u51e0\u70b9\uff0c\u6211\u4eec\u7a0d\u540e\u518d\u5206\u6790\u3002\u9996\u5148\u6211\u4eec**\u7ad9\u5728gem5\u8bbe\u8ba1\u8005\u7684\u89d2\u5ea6\uff0c\u5206\u522b\u4eceboard,soc,cpu\u5fae\u67b6\u6784\u4e09\u4e2a\u5c42\u9762\u6765\u7406\u89e3\u5b83\u7684\u8bbe\u8ba1** \u4eceboard\u5c42\u9762\u7406\u89e3gem5 \u00b6 \u4ecesoc\u5c42\u9762\u7406\u89e3gem5 \u00b6 \u4e0a\u56fe\u662fSiFive\u7684RISCV\u67b6\u6784FE310_G000 SOC\uff0c\u53ef\u4ee5\u770b\u5230\u5b83\u6709\u4e00\u4e2aE31\u6838\uff0c\u865a\u7ebf\u6846\u662f\u6838\u5185\u5fae\u67b6\u6784\uff0c\u5b83\u662f\u4e00\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684MCU\u6838\u3002 E31\u6838\u901a\u8fc7P-Bus\u603b\u7ebf\u8fde\u63a5\u4e00\u4e9b\u5916\u8bbe\u63a7\u5236\u5668\u3002\u7406\u8bba\u4e0a\uff0c\u4f7f\u7528gem5\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u4e0e\u4e0a\u56fe\u51e0\u4e4e\u4e00\u6837\u7684SOC\u6a21\u578b\u3002 \u4e0d\u5173\u6ce8CPU\u5185\u90e8\u5fae\u67b6\u6784\uff0c\u4ece\u5927\u7684\u6a21\u5757\u4e0a\u6765\u8bb2\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0CPU\u6838\uff0c\u603b\u7ebf\uff0c\u5916\u8bbe\u63a7\u5236\u5668\u3002\u5e76\u4e14\u8ba9\u4ed6\u4eec\u80fd\u591f\u8fde\u63a5\u8d77\u6765\u7ec4\u6210\u4e00\u4e2aSOC\u3002\u90a3\u4e48gem5\u662f\u5982\u4f55\u5b9e\u73b0\u8fd9\u4e9b\u7684\u5462\uff1f \u4e0a\u56fe\u662f\u901a\u8fc7graphviz\u4f9d\u636econfig.ini\u6587\u4ef6\u751f\u6210\u7684\u4e00\u4e2a\u7b80\u5355\u7cfb\u7edf\u6846\u56fe\uff0c\u5b83\u8db3\u4ee5\u8bf4\u660egem5\u7684\u8bbe\u8ba1\u601d\u8def\u3002 system\u62bd\u8c61\u4e86\u6574\u4e2aSOC\u7cfb\u7edf\uff0csystem\u4e2d\u5305\u542b\u4e00\u7cfb\u5217\u7684\u57fa\u4e8eSimObject\u7684\u6a21\u5757\uff0c\u5f53\u7136root\u548csystem\u672c\u8eab\u4e5f\u662f\u4e00\u4e2aSimObject\u3002DerivO3CPU, membus, memctrl\u8fd9\u4e09\u5927\u6a21\u5757\u90fd\u662fSimObject\u3002\u6d89\u53ca\u5230\u6570\u636e\u4f20\u8f93\u7684\u6a21\u5757\u90fd\u6709port\uff0c\u5206\u4e3amaster\u548cslave\u4e24\u79cd\u7c7b\u578b\uff0cmaster\u548cslave\u53ef\u4ee5\u8fdb\u884c\u8fde\u63a5\u3002\u4ece\u800c\u4f7f\u5f97\u6a21\u5757\u76f8\u8fde\u3002 \u8981\u60f3\u5c06\u8fd9\u79cd\u8fde\u63a5\u65b9\u5f0f\u505a\u7684\u901a\u7528\uff0c\u5c31\u9700\u8981\u628aport\u8bbe\u8ba1\u7684\u901a\u7528 \u4ececpu\u5fae\u67b6\u6784\u5c42\u9762\u7406\u89e3gem5 \u00b6 \u4e8b\u4ef6\u9a71\u52a8\u6a21\u578b \u00b6 simobject \u00b6 isa\u5b9a\u5236\u8bed\u6cd5 \u00b6 \u5185\u5b58\u7cfb\u7edf \u00b6 memory & port \u00b6 \u6240\u6709\u5185\u5b58\u5bf9\u8c61\u90fd\u662f\u901a\u8fc7port\u8fde\u63a5\u8d77\u6765\u7684\uff0cport\u5b9e\u73b0\u4e86\u4e09\u79cd\u4e0d\u540c\u7684\u5185\u5b58\u6a21\u5f0f atomic timing functional timing\u6a21\u5f0f\u662f\u552f\u4e00\u4e00\u4e2a\u80fd\u4ea7\u751f\u6b63\u786e\u7684\u4eff\u771f\u7ed3\u679c\u7684\u6a21\u5f0f; atomic\u6a21\u5f0f\u662f\u4e00\u4e2a\u5feb\u901f\u4eff\u771f\u6a21\u5f0f; functional\u6a21\u5f0f\u662f\u4e00\u4e2adebug\u6a21\u5f0f\uff0c\u652f\u6301\u4ecehost\u7aef\u8bfb\u5165\u5185\u5b58\u6570\u636e port\u5305\u542bmaster ports \u548c slave ports\u4e24\u79cd\uff0cport\u4f20\u9012\u7684\u662fpackets, Python\u4e0eC++\u7684\u53c2\u6570\u4f20\u9012 \u00b6 gem5\u5b98\u7f51Documentation\u7684\u4f5c\u8005\u8ba4\u4e3a\uff0cgem5\u7684python\u63a5\u53e3\u7684\u4eae\u70b9\u5728\u4e8e\u80fd\u591f\u5411C++\u4f20\u9012\u53c2\u6570\u3002\uff08tvm\u4e5f\u80fd\u591f\u5b9e\u73b0C++\u4e0ePython\u7684\u6570\u636e\u4e92\u4f20\uff0c\u8fd9\u4e00\u70b9\u6211\u89c9\u5f97\u53ef\u4ee5\u5bf9\u6bd4\u7740\u5206\u6790\u4e24\u8005\u7684\u5b9e\u73b0\uff09 \u6dfb\u52a0\u53c2\u6570\u7684\u65b9\u6cd5 \u00b6 \u5728src\u7684.py\u6587\u4ef6\u4e2d\u6dfb\u52a0python\u53c2\u6570\u7684\u5b9a\u4e49\uff0c\u8fd9\u4e2a\u53c2\u6570\u53ef\u4ee5\u5728config\u6587\u4ef6\u4e2d\u8d4b\u503c \u5728src\u7684.cc\u6587\u4ef6\u4e2d\uff0c\u5728\u7c7b\u4e2d\u6dfb\u52a0\u53c2\u6570\u5b57\u6bb5 \u5728src\u7684.cc\u6587\u4ef6\u4e2d\uff0c\u5728\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4e2d\u6dfb\u52a0\u53c2\u6570\u5b57\u6bb5\u7684\u8d4b\u503c\uff0c\u53c2\u6570\u7531python\u4f20\u5165 \u5728config\u6587\u4ef6\u4e2d\u6dfb\u52a0\u5fc5\u8981\u7684\u53c2\u6570\u8d4b\u503c \u6dfb\u52a0\u7b80\u5355SimObject \u00b6 \u5728src\u76ee\u5f55\u4e2d\u6dfb\u52a0demo.py, demo.cc, demo.hh \u5728demo.py\u4e2d\u6dfb\u52a0Demo\u7c7b \u5728demo.hh\u4e2d\u6dfb\u52a0Demo\u7c7b \u5728demo.cc\u4e2d\u6dfb\u52a0Demo\u7c7b\u6784\u9020\u51fd\u6570\uff0c\u5fc5\u8981\u65b9\u6cd5\uff0c\u6784\u9020\u51fd\u6570\u9700\u8981\u6709\u9ed8\u8ba4\u53c2\u6570DemoParams \u5728src\u76ee\u5f55\u4e0b\u7684Sconscript\u4e2d\u6dfb\u52a0\u6587\u4ef6\u7f16\u8bd1\u548c\u5fc5\u8981\u7684debug flag \u5728config\u6587\u4ef6\u4e2d\u4f7f\u7528\u65b0\u6dfb\u52a0\u7684Demo\u5b9e\u4f8b \u6dfb\u52a0event \u00b6 \u6dfb\u52a0EventFunctionWrapper\u7c7b\u578b\u7684event\u5b57\u6bb5\u5230Demo\u7c7b\u4e2d \u6dfb\u52a0processEvent \u65b9\u6cd5\u7528\u6765\u505aevent\u56de\u8c03\u51fd\u6570 \u5728\u6784\u9020\u51fd\u6570\u4e2d\uff0c\u521d\u59cb\u5316event\u4e3aprocessEvent \u521b\u5efastartup\u65b9\u6cd5\uff0c\u5728\u8be5\u65b9\u6cd5\u4e2d\u6dfb\u52a0event\u7684schedule\uff0c\u7528\u4e8e\u5728\u542f\u52a8\u65f6\u89e6\u53d1event \u5173\u4e8e\u7f16\u8bd1 \u00b6 gem5\u4f7f\u7528Scons\u6765\u7ec4\u7ec7\u7f16\u8bd1\uff0cScons\u7c7b\u4f3c\u4e8emake\u3002 Scons\u9700\u8981\u4f7f\u7528\u540d\u4e3aSConstruct\u7684\u6587\u4ef6\u6765\u7ec4\u7ec7\u7f16\u8bd1, Scons\u8fd8\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7684API\uff0c\u7528\u4e8e\u5728SConstruct\u4e2d\u65b9\u4fbf\u7684\u5b9a\u5236\u6784\u5efa\u89c4\u5219\u3002 \u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\uff0cScons\u662fmake\u7684\u5347\u7ea7\u7248\uff0c\u5b83\u80fd\u66f4\u7b80\u5355\uff0c\u66f4\u5bb9\u6613\u7684\u5b9e\u73b0make\u5b9e\u73b0\u7684\u529f\u80fd\uff0cScons\u4f7f\u7528Python\u811a\u672c\u6765\u7ec4\u7ec7\u6784\u5efa,\u6709\u826f\u597d\u7684\u8de8\u5e73\u53f0\u6027\u3002 O3 CPU\u7684ROB\u6a21\u5757\u5206\u6790 \u00b6 ROB\u4f5c\u7528\u673a\u5236 \u00b6 \u5728\u4e71\u5e8fCPU\u4e2d\uff0c\u6307\u4ee4\u5728\u6d41\u6c34\u7ebf\u4e2d\u6267\u884c\u7684\u65f6\u5019\u662f\u4e71\u5e8f\u7684\u3002\u4f46\u4ece\u7a0b\u5e8f\u5458\u7684\u89d2\u5ea6\uff0c\u662f\u4e0d\u5141\u8bb8\u8fd9\u79cd\u4e71\u5e8f\u53d1\u751f\u7684\uff0c\u5728\u7a0b\u5e8f\u5458\u770b\u6765\uff0c\u6307\u4ee4\u4e00\u5b9a\u8981\u987a\u5e8f\u7684\u6267\u884c\u3002\u56e0\u6b64\u4ea7\u751f\u4e86ROB\u6a21\u5757\uff0cROB\u4f7f\u5f97\u5728\u6d41\u6c34\u7ebf\u4e2d\u4e71\u5e8f\u6267\u884c\u7684\u6307\u4ee4\u5728\u7a0b\u5e8f\u5458\u770b\u6765\u662f\u987a\u5e8f\u7684\uff0c\u5373\u5c06\u4e71\u5e8f\u7684\u6307\u4ee4\u7ed3\u679c\u201c\u91cd\u6392\u5e8f\u201d\u3002 \u663e\u7136\uff0cROB\u6a21\u5757\u5fc5\u987b\u6709\u4e00\u4e2a\u6307\u4ee4\u987a\u5e8f\u7684\u8bb0\u5f55\u529f\u80fd\uff0c\u5728\u4e71\u5e8f\u6267\u884c\u4e4b\u524d\u5e94\u8be5\u505a\u987a\u5e8f\u8bb0\u5f55\uff0c\u4e71\u5e8f\u6267\u884c\u540e\uff0c\u5e94\u8be5\u6309\u7167\u8bb0\u5f55\u7684\u987a\u5e8f\u5b8c\u6210\u6307\u4ee4\u7684\u6700\u7ec8\u63d0\u4ea4\u3002\u53ea\u6709\u8fd9\u6837\uff0c\u624d\u80fd\u4fdd\u8bc1\u5728\u7a0b\u5e8f\u5458\u770b\u6765\uff0c\u6307\u4ee4\u4ecd\u7136\u662f\u987a\u5e8f\u6267\u884c\u7684\u3002 \u5982\u4e0a\u56fe\uff0c\u5728\u4e71\u5e8fCPU\u7684pipeline\u4e2d\uff0cRename\u53ca\u4ee5\u524d\u7684\u6d41\u6c34\u90fd\u53ef\u4ee5\u8ba4\u4e3a\u662f\u987a\u5e8f\u7684\uff0c\u5c3d\u7ba1\u5b83\u5b9e\u9645\u4e0a\u53ef\u4ee5\u5728\u4e00\u4e2a\u5468\u671f\u5904\u7406\u591a\u6761\u6307\u4ee4\uff0c\u4f46\u591a\u6761\u4ecd\u7136\u662f\u987a\u5e8f\u7684\u3002\u4f46\u5728Execute\u9636\u6bb5\u5c31\u5f00\u59cb\u4e71\u5e8f\u4e86\uff0c\u6240\u4ee5\uff0c\u8981\u5728Rename\u4e4b\u540e\uff0c\u5c06\u6307\u4ee4\u987a\u5e8f\u8bb0\u5f55\u5728ROB\u4e2d\u3002WriteBack\u9636\u6bb5\u5b8c\u6210\u540e\uff0c\u6211\u4eec\u57fa\u672c\u53ef\u4ee5\u8ba4\u4e3a\u6307\u4ee4\u5df2\u7ecf\u6267\u884c\u5b8c\u6210\uff0c\u90a3\u4e48\u5728Commit\u9636\u6bb5\uff0c\u5c31\u9700\u8981\u6309\u7167ROB\u4e2d\u8bb0\u5f55\u7684\u6307\u4ee4\u7684\u987a\u5e8f\u6765\u63d0\u4ea4\u6307\u4ee4\uff0c\u8fd9\u6837\u5c31\u65e2\u52a0\u901f\u4e86\u6307\u4ee4\u7684\u8fd0\u884c\uff0c\u63d0\u9ad8\u4e86\u6d41\u6c34\u7ebf\u7684\u5229\u7528\u7387\uff0c\u53c8\u4fdd\u8bc1\u6307\u4ee4\u7684\u987a\u5e8f\u662f\u6b63\u786e\u7684\u3002 \u5728gem5\u7684\u5b9e\u73b0\u4e2d\uff0c\u662f\u5728commit\u7684\u4ee3\u7801\u4e2d\u5c06\u6307\u4ee4\u6dfb\u52a0\u5230ROB\uff0c\u4e4d\u770b\u8d77\u6765\u6709\u4e9b\u8d39\u89e3\uff0c\u4f46\u5b9e\u9645\u4e0a\u4ecd\u7136\u662f\u57fa\u4e8eRename\u4f20\u9012\u7684\u6307\u4ee4\u961f\u5217\uff0c\u5bf9\u6574\u4f53\u6548\u679c\u6ca1\u6709\u5f71\u54cd ROB\u4ee3\u7801\u7ed3\u6784\u5206\u6790 \u00b6 ROB\u7684\u5b9e\u73b0\u652f\u6301\u591a\u786c\u7ebf\u7a0b(\u4ee3\u7801\u4e2d\u5e94\u8be5\u628a\u786c\u7ebf\u7a0b\u505a\u62bd\u8c61)\u3002\u4ece\u786c\u4ef6\u7ebf\u7a0b\u7684\u89d2\u5ea6\u6765\u5206\u6790\uff0cROB\u7ed3\u6784\u5c31\u6bd4\u8f83\u597d\u7406\u89e3 \u4ee3\u7801\u5b9e\u73b0\u7684\u6838\u5fc3\u662f\u5bf9list\\ \u7684\u8bbf\u95ee\uff0c \u731c\u6d4brobStatus\u7684\u672c\u610f\u662fROB\u4e2d\u5f53\u524d\u786c\u4ef6\u7ebf\u7a0b\u7684\u72b6\u6001\u673a\uff0c\u4f46\u5b9e\u9645\u4e0a\u7528doneSquashing\u6765\u8868\u793a\u4e86\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b9e\u9645\u4e0aROB\u53ea\u6709\u4e24\u4e2a\u72b6\u6001\uff0cSquashing(\u56e0\u4e3aSquashing\u64cd\u4f5c\u6709\u5bbd\u5ea6\u9650\u5236\uff0c\u53ef\u80fd\u4e0d\u80fd\u5728\u4e00\u4e2atick\u5b8c\u6210)\u548crunning\u3002\u901a\u5e38\u6765\u8bb2\uff0c\u5f53ROB\u7684\u6307\u4ee4list\u6ee1\u4e86\u4e4b\u540e\uff0c\u4e5f\u5e94\u8be5\u6709\u4e00\u4e2a\u72b6\u6001\uff0c\u4e0d\u8fc7\uff0cROB\u4ee3\u7801\u7684\u5b9e\u73b0\u5c06\u8fd9\u4e2a\u72b6\u6001\u7684\u5224\u65ad\u4ea4\u7ed9\u4e86ROB\u4f7f\u7528\u8005\u3002Rename\u6a21\u5757\u9700\u8981\u901a\u8fc7maxEntries\u548cthreadEntries\u6765\u5224\u5b9aROB\u662f\u5426\u5df2\u7ecf\u6ee1\u4e86\uff0c\u4e0d\u80fd\u518d\u586b\u5165\u3002\u8fd9\u770b\u8d77\u6765\u6709\u4e9b\u5947\u602a\u3002 \u5b9e\u8d28\u4e0a\uff0cROB\u6a21\u5757\u5728gem5\u4e2d\u7684\u5b9e\u73b0\u5c31\u662f\u5bf9\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u7684\u5c01\u88c5 ROB\u64cd\u4f5c \u00b6 ROB\u7684\u4ee3\u7801\u5b9e\u8d28\u662f\u53cc\u5411\u94fe\u8868\uff0c\u5bf9\u4e8eROB\u7684\u64cd\u4f5c\uff0c\u5168\u90e8\u5728Commit\u4ee3\u7801\u4e2d\u5b8c\u6210\uff0c\u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u5b83\u786c\u4ef6\u5bf9ROB\u7684\u64cd\u4f5c\u90fd\u662f\u5728Commit\u9636\u6bb5\u5b8c\u6210\u7684\u3002\u8f6f\u4ef6\u53ea\u9700\u8981\u4fdd\u8bc1\u6700\u7ec8\u6548\u679c\u57fa\u672c\u4e00\u81f4\u5373\u53ef\u3002 \u8fd9\u662f\u6a21\u62df\u5668\u5b9e\u73b0\u548c\u771f\u5b9e\u786c\u4ef6\u903b\u8f91\u7684\u533a\u522b \u6307\u4ee4\u52a0\u5165ROB \u00b6 \u5982\u4e0a\u56fe\u6240\u793a\uff0cROB\u6307\u4ee4\u6765\u6e90\u4e3aRename\u4e4b\u540e\u7684\u6307\u4ee4\uff0cgem5\u4e2d\u5b9e\u73b0\u4e3a\u4e00\u4e2a\u540d\u4e3aRenameQueue\u7684TimeBuffer\uff0c\u5e76\u4e14\u9ed8\u8ba4Rename\u7684\u4e0b\u4e00\u4e2atick\u5373\u53ef\u62ff\u5230Rename\u540e\u7684\u6307\u4ee4\u3002 RenameQueue\u4e2d\u7684\u6307\u4ee4\u5728Commit->tick()\u4e2d\u52a0\u5165\u5230ROB(\u901a\u8fc7insertInst()\u52a0\u5165\u5230InstList\u7684\u5c3e\u90e8)\uff0c\u8fd9\u867d\u7136\u4e0d\u7b26\u5408\u786c\u4ef6\u903b\u8f91\uff0c\u4f46Rename\u6a21\u5757\u64cd\u4f5cRenameQueue\u662f\u901a\u8fc7wire(0), Commit\u6a21\u5757\u64cd\u4f5cRenameQueue\u662f\u901a\u8fc7Wire(-1)\u3002\u6240\u4ee5\uff0c\u5728Commit\u4e2d\u8c03\u7528insertInst()\u5e76\u4e0d\u5f71\u54cd\u6d41\u6c34\u7ebf\u6548\u679c\uff0c\u8fd9\u4e5f\u7b80\u5316\u4e86\u8f6f\u4ef6\u7684\u5b9e\u73b0\u3002\u8fd9\u662f\u6307\u4ee4\u52a0\u5165ROB\u7684\u552f\u4e00\u65b9\u5f0f\u3002 \u6307\u4ee4\u79fb\u51faROB \u00b6 \u5728Commit\u9636\u6bb5\uff0c\u901a\u8fc7\u8c03\u7528retireHead()\u6765\u5c06\u6307\u4ee4\u79fb\u51faROB\u5e76\u5b8c\u6210\u63d0\u4ea4\u3002\u5f53\u7136\uff0c\u662f\u5426\u80fd\u591f\u79fb\u51fa\u7684\u5224\u65ad\u903b\u8f91\u662f\u5728Commit\u4e2d\u505a\u7684\uff0c\u5177\u4f53\u903b\u8f91\u53ef\u4ee5\u5728Commit\u7ae0\u8282\u4e2d\u770b\u5230\u3002\u8fd9\u662f\u6307\u4ee4\u79fb\u51faROB\u7684\u552f\u4e00\u65b9\u5f0f\u3002 squash\u7684\u64cd\u4f5c \u00b6 \u5982\u679c\u53d1\u751f\u4e2d\u65ad\u3001\u5f02\u5e38\u6216\u5206\u652f\u9884\u6d4b\u5931\u8d25\uff0c\u90a3\u4e48ROB\u4e2d\u7684\u8bb0\u5f55\u5f53\u7136\u4e5f\u9700\u8981\u88ab\u5237\u65b0\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u88ab\u6210\u4e3asquash\uff08\u8fd9\u4f3c\u4e4e\u662f\u4e00\u4e2a\u4e1a\u754c\u901a\u7528\u672f\u8bed\uff09\u3002ROB\u63d0\u4f9b\u4e86squash()\u65b9\u6cd5\u6765\u652f\u6301\u8fd9\u4e2a\u529f\u80fd\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f**squash()\u64cd\u4f5c\u53ea\u662f\u5bf9\u6307\u4ee4\u72b6\u6001\u8fdb\u884c\u6807\u8bb0\uff0c\u5c06\u6307\u4ee4\u6807\u8bb0\u4e3aSquashed\u4e14CanCommit\u3002\u771f\u6b63\u7684\u79fb\u51fa\u64cd\u4f5c\u4ecd\u7136\u662fCommit\u9636\u6bb5\u901a\u8fc7\u5224\u65ad\u6307\u4ee4\u72b6\u6001\u8c03\u7528retireHead()\u6765\u5b8c\u6210\u7684**\u3002 \u7531\u4e8e\u6ca1\u6709\u57fa\u4e8e\u771f\u5b9e\u786c\u4ef6\u505a\u5206\u6790\uff0c\u4e2a\u4eba\u8ba4\u4e3a\uff0c\u8fd9\u53ea\u662f\u8f6f\u4ef6\u7684\u4e00\u4e2a\u8ba8\u5de7\u7684\u64cd\u4f5c\u3002\u56e0\u4e3a\u5728\u4ee3\u7801\u7684\u5b9e\u73b0\u903b\u8f91\u4e2d\uff0c\u6807\u8bb0\u6307\u4ee4\u72b6\u6001\u65f6\uff0c\u7531\u4e8e\u6709squash\u5bbd\u5ea6\u7684\u9650\u5236\uff0c\u53ef\u80fd\u5728\u4e00\u4e2atick\u65e0\u6cd5\u5b8c\u6210squash\u64cd\u4f5c\uff0c\u5c31\u9700\u8981\u6807\u8bb0ROB\u4e3asquashing\u72b6\u6001\uff0c\u5f53ROB\u5904\u4e8esquashing\u72b6\u6001\u65f6\uff0c\u56fe\u4e2d\u6307\u4ee49\u662f\u4e0d\u4f1a\u88abcommit\u7684\u3002 squash()\u7684\u53c2\u6570squash_num\u5b9e\u9645\u4e0a\u662f\u6307\u4ee4\u7684\u4e00\u4e2a\u552f\u4e00\u7684seqNum(gem5\u4e2d\u901a\u8fc7\u4e00\u4e2a\u987a\u5e8f\u589e\u957f\u7684uint64\u53d8\u91cf\u4e3a\u6bcf\u4e00\u6761\u6307\u4ee4\u5206\u914d\u4e00\u4e2a\u53f7\u7801\uff0c\u771f\u5b9e\u786c\u4ef6\u4e5f\u6709\u7c7b\u4f3c\u5b9e\u73b0\u5417\uff1f)\u8fd9\u4e2aseqNum\u88ab\u8bb0\u5f55\u5728squashedSeqNum\u4e2d\uff0c\u8fd9\u4e2anumber\u6807\u8bc6\u7684\u6307\u4ee4\u53ca\u5176\u4e4b\u540e\u52a0\u5165ROB\u7684\u6307\u4ee4\u90fd\u4f1a\u88ab\u6807\u8bb0\u4e3aSquash/CanCommit\u3002 template < class Impl > void ROB < Impl >:: squash ( InstSeqNum squash_num , ThreadID tid ) { doneSquashing [ tid ] = false ; squashedSeqNum [ tid ] = squash_num ; if ( ! instList [ tid ]. empty ()) { InstIt tail_thread = instList [ tid ]. end (); tail_thread -- ; squashIt [ tid ] = tail_thread ; doSquash ( tid ); } } template < class Impl > void ROB < Impl >:: doSquash ( ThreadID tid ) { for ( int numSquashed = 0 ; numSquashed < squashWidth && squashIt [ tid ] != instList [ tid ]. end () && ( * squashIt [ tid ]) -> seqNum > squashedSeqNum [ tid ]; ++ numSquashed ) { ( * squashIt [ tid ]) -> setSquashed (); ( * squashIt [ tid ]) -> setCanCommit (); } } \u5982\u4e0a\u4e3a\u622a\u53d6squash()\u5904\u7406\uff0c\u8fd9\u91ccsquashIt\u7528\u6765\u63a7\u5236squash\u8fdb\u5ea6\u3002\u90a3\u4e48\u8fd9\u91cc\u6709\u4e00\u4e2a\u7591\u95ee\uff0c\u5f53\u5df2\u7ecf\u6709\u4e00\u4e2asquash\u53d1\u751f\uff0c\u4f46\u5728\u4e00\u4e2atick\u4e2dsquash\u6ca1\u6709\u5b8c\u6210\uff0c\u90a3\u4e48\u4e0b\u4e00\u4e2atick\u4f1a\u8c03\u7528doSquash\u7ee7\u7eed\u8fdb\u884csquash\u64cd\u4f5c\u3002\u6b64\u65f6\u5982\u679c\u6709\u65b0\u7684squash()\u8c03\u7528\uff0c\u90a3\u4e48\u53ef\u80fd\u4e0a\u4e00\u4e2atick\u4e2d\u7684squash\u64cd\u4f5c\u5c31\u6d6a\u8d39\u6389\u4e86\uff0cdoSquash\u53c8\u4f1a\u91cd\u65b0\u8fdb\u884csquash\u6807\u8bb0\u3002\u53ef\u80fd\u4f1a\u5bfc\u81f4squash\u7684\u5468\u671f\u6570\u4e0e\u5b9e\u9645\u786c\u4ef6\u4e0d\u4e00\u81f4\uff0c\u4f46\u771f\u662f\u786c\u4ef6\u7684\u5904\u7406\u903b\u8f91\u662f\u600e\u6837\u7684\u5462\uff1f O3CPU\u7684Commit\u9636\u6bb5\u5206\u6790 \u00b6 \u5f53\u5df2\u7ecf\u4e86\u89e3TimeBuffer\u673a\u5236\uff0cRename\u673a\u5236\u53caROB\u673a\u5236\u4e4b\u540e\uff0c\u518d\u6765\u7406\u89e3O3CPU\u7684Commit\u9636\u6bb5\u5c31\u76f8\u5bf9\u5bb9\u6613\u4e86 Commit\u9636\u6bb5\u4e3b\u8981\u662f\u5b8c\u6210\u53ef\u4ee5\u63d0\u4ea4\u7684\u6307\u4ee4\uff0c\u4ece\u7a0b\u5e8f\u5458\u7684\u89d2\u5ea6\uff0c\u8fd9\u8868\u793a\u6307\u4ee4\u6267\u884c\u7684\u6700\u7ec8\u5b8c\u6210\u3002 commit\u9636\u6bb5\u6570\u636e\u7ed3\u6784 \u00b6 commit\u5185\u90e8\u4ecd\u7136\u652f\u6301\u591a\u786c\u4ef6\u7ebf\u7a0b\u3002\u6bcf\u4e2a\u786c\u4ef6\u7ebf\u7a0b\u90fd\u6709\u81ea\u5df1\u7684\u4e00\u4e9b\u8fd0\u884c\u72b6\u6001\u4e0e\u8ba1\u6570\uff0ccommit\u6839\u636e\u786c\u4ef6\u7ebf\u7a0b\u8c03\u5ea6\u7b56\u7565\u6765\u6267\u884c\u76f8\u5e94\u7684\u786c\u4ef6\u7ebf\u7a0b\uff0c\u5f53\u7136\uff0c\u5f88\u591a\u65f6\u5019\uff0c\u786c\u4ef6\u7ebf\u7a0b\u662f\u5e76\u884c\u8fd0\u884c\u7684\u3002 \u5bf9\u4e8e\u5355\u4e2a\u786c\u4ef6\u7ebf\u7a0b\u6765\u8bb2\uff0c\u5b83\u5305\u542b\u4e86trapSquash\uff0ctcSquash\u8fd9\u6837\u7684squash\u6807\u8bb0\uff0c\u5f53\u6536\u5230\u8fd9\u6837\u7684\u4fe1\u53f7\u4e4b\u540e\uff0c\u4f1a\u9a71\u52a8ROB\u53ca\u81ea\u8eab\u8fdb\u884csquashing\u64cd\u4f5c\u3002 commitStatus\u6807\u8bc6\u4e86\u8be5\u7ebf\u7a0b\u5728commit\u9636\u6bb5\u7684\u72b6\u6001\uff0c\u540c\u65f6\u901a\u8fc7pc\u6765\u4fdd\u5b58\u53ca\u4f20\u9012\u7cfb\u7edfpc\u72b6\u6001\u3002\u540c\u65f6\u81ea\u8eab\u8fd8\u62e5\u6709status\u53canextstatus\u72b6\u6001\uff0c\u7528\u6765\u6807\u8bc6\u81ea\u8eab\u8fd0\u884c\u72b6\u6001\u3002 youngestSeqNum\u8ba1\u6570\u548clastCommitedSeqNum\u8ba1\u6570\u7528\u6765\u8f85\u52a9\u63a7\u5236ROB\u7684squash\u64cd\u4f5c\u53ca\u63d0\u4ea4\u64cd\u4f5c\u3002 \u540c\u65f6\uff0c\u8fd8\u6709\u5927\u91cf\u7684\u7edf\u8ba1\u4fe1\u606f\u7528\u6765\u67e5\u770b\u53cadebug\u3002 commit\u9700\u8981iew\u9636\u6bb5\u7684\u4e00\u4e9b\u72b6\u6001\uff0c\u901a\u8fc7\u4fdd\u7559\u7684iewStage\u6307\u9488\u5b9e\u73b0\u3002\u591a\u4e2aTimeBuffer\u7684wire\u63a5\u53e3\uff0c\u7528\u6765\u5b9e\u73b0\u4e0e\u5176\u4ed6\u6a21\u5757\u7684\u6570\u636e\u4ea4\u4e92\u3002 ROB\u6a21\u5757\u5728commit\u7684\u63a7\u5236\u4e0b\u8fd0\u884c\u3002 commit\u9636\u6bb5\u6d41\u7a0b \u00b6 \u4e3a\u4e86\u66f4\u65b9\u4fbf\u6392\u7248\uff0c\u5c06commit\u7684\u6d41\u7a0b\u5206\u4e3a\u4e86\u4e24\u5927\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u5305\u542b\u5bf9squash\u72b6\u6001\u7684\u5904\u7406\uff0c\u53e6\u4e00\u90e8\u5206\u5305\u542b\u6307\u4ee4\u6dfb\u52a0\u5230ROB\u4ee5\u53ca\u6307\u4ee4\u7684\u63d0\u4ea4 \u63a5\u4e0a \u4e0a\u9762\u7684\u6d41\u7a0b\u56fe\u6d89\u53ca\u4e86commit\u9636\u6bb5\u7684\u7edd\u5927\u90e8\u5206\u5185\u5bb9\uff0c\u4f46\u5bf9\u4e8e\u4e00\u4e9b\u5fae\u5c0f\u7ec6\u8282\uff0c\u6bd4\u5982\u5bf9\u4e8estore\u6307\u4ee4\u7684\u7279\u6b8a\u5904\u7406\uff0c\u786c\u4ef6\u7ebf\u7a0b\u7684\u8c03\u5ea6\u7b56\u7565\u7b49\uff0c\u6ca1\u6709\u6d89\u53ca\u3002 store\u6307\u4ee4\u7684\u63d0\u4ea4\u5b9e\u9645\u4e0a\u5728LSQ\u4e2d\u5b9e\u73b0\uff0c\u8fd9\u4f1a\u5728IEW\u53caLSQ\u7684\u7ae0\u8282\u4e2d\u8be6\u7ec6\u63cf\u8ff0\u3002 \u53e6\u5916\uff0c\u5173\u4e8etrap\u7684\u5904\u7406\uff0c\u662f\u6bd4\u8f83\u503c\u5f97\u5173\u6ce8\u7684\u7ec6\u8282\u3002\u4e3a\u4e86\u4fdd\u6301\u4e3b\u4f53\u6d41\u7a0b\u56fe\u80fd\u591f\u6e05\u6670\u6613\u61c2\uff0c\u8fd9\u90e8\u5206\u7ec6\u8282\u6ca1\u6709\u6dfb\u52a0\u5230\u6d41\u7a0b\u56fe\u4e2d\uff0c\u8fd9\u90e8\u5206\u66f4\u5408\u9002\u5728\u4e86\u89e3 \u4e3b\u4f53\u6d41\u7a0b\u4e4b\u540e\u5355\u72ec\u7406\u89e3\u3002\u4e0b\u9762\u7684\u51e0\u4e2a\u5f15\u7528\u7684\u4ee3\u7801\u90fd\u505a\u4e86\u6216\u591a\u6216\u5c11\u7684\u7279\u6b8a\u5904\u7406\uff0c\u5305\u542b\u4e00\u4e9b\u5bf9\u7406\u89e3\u6d41\u7a0b\u66f4\u65b9\u4fbf\u7684\u5c55\u5f00\u3001\u62fc\u51d1\u548c\u5220\u9664\u5904\u7406\u3002\u4f46\u5b8c\u5168\u53ef\u4ee5\u5728\u6e90\u4ee3\u7801\u4e2d\u627e\u5230\u4e0b\u9762\u7684\u5bf9\u5e94\u3002 DefaultCommit < Impl >:: commit () { if ( cpu -> checkInterrupts ( cpu -> tcBase ( 0 ))) { if ( commitStatus [ 0 ] == TrapPending || interrupt || trapSquash [ 0 ] || tcSquash [ 0 ] || drainImminent ) return ; interrupt = cpu -> getInterrupts (); if ( interrupt != NoFault ) toIEW -> commitInfo [ 0 ]. interruptPending = true ; } } } \u6216\u8bb8\u5c06\u5224\u65ad\u4e2d\u65ad\u72b6\u6001\u653e\u5728commit\u51fd\u6570\u4e2d\u8ba9\u4eba\u8d39\u89e3\uff0c\u4f46\u4e0d\u5fc5\u8f83\u771f\u3002interrupt \u4fdd\u5b58\u4e86\u66f4\u65b0\u7684\u4e2d\u65ad\u72b6\u6001\u3002\u4e2d\u65ad\u72b6\u6001\u7684\u7c7b\u578b\u662fFault\uff0c\u8fd9\u4e5f\u80fd\u89e3\u91ca\u7684\u901a\uff0c\u6216\u8bb8\u4ed6\u4eec\u8ba4\u4e3a\u4e2d\u65ad\u53ef\u4ee5\u7406\u89e3\u6210\u6b63\u5e38\u6d41\u7a0b\u4e2d\u7684\u9519\u8bef\u3002\u5982\u679c\u6709\u4e2d\u65ad\uff0c\u90a3\u4e48\u5c31\u4f1a\u901a\u8fc7TimeStruct\u4f20\u9012\u51fa\u53bb\u3002 DefaultCommit < Impl >:: getInsts () { if ( ! inst -> isSquashed () && commitStatus [ tid ] != ROBSquashing && commitStatus [ tid ] != TrapPending ) { rob -> insertInst ( inst ); } } \u4e00\u4f46\u4ea7\u751fTrapPending\u72b6\u6001\uff0c\u4fbf\u4e0d\u4f1a\u518d\u5411ROB\u4e2d\u6dfb\u52a0\u6307\u4ee4\uff0c\u8fd9\u662f\u6302\u8d77\u7684\u542b\u4e49\u4e4b\u4e00\u3002\u90a3\u4e48\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a\u7531interrupt\u5230TrapPending\u8f6c\u6362,\u770b\u4e0b\u9762\u7684\u4ee3\u7801\uff0c \u5728\u63d0\u4ea4\u6307\u4ee4\u7684\u5904\u7406\u4e2d\uff0c\u9996\u5148\u5bf9interrupt\u8fdb\u884c\u4e86\u5904\u7406\uff0c\u8f6c\u6362\u6210\u4e86TrapPending\uff0c\u5e76\u4e14\u53d1\u9001\u4e86\u4e00\u4e2a\u5305\u542b trapSquash[tid] = true\u7684schedule, \u5ef6\u8fdf\u4e3atrapLatency\uff0c\u8fd9\u4e5f\u5c31\u610f\u5473\u7740\u5728\u5ef6\u8fdftrapLatency\u4e2acycle\u540e\uff0ctrapSquash\u88ab\u7f6e\u4f4d\uff0c\u6b64\u65f6\u518d\u7ed3\u5408\u524d\u9762\u6d41\u7a0b\u56fe\u4e2d\u8bb2\u8ff0\u7684squash\u5904\u7406\u6d41\u7a0b\uff0c\u5c31\u80fd\u5b8c\u5168\u7406\u89e3\u5bf9\u4e8etrap\u662f\u5982\u4f55\u8fdb\u884c\u5904\u7406\u7684\u3002\u5f53\u7136\uff0c\u63d0\u4ea4\u6307\u4ee4\u7684\u64cd\u4f5c\u4e5f\u4f1a\u88ab\u6302\u8d77\uff0c\u8fd9\u4e5f\u662f\u6302\u8d77\u7684\u542b\u4e49\u4e4b\u4e00\u3002\u5f53\u7136\uff0c\u8fd9\u90e8\u5206\u4ee3\u7801\u662f\u5728\u53ef\u63d0\u4ea4\u7ebf\u7a0b\u7684\u67e5\u627e\u4e2d\u5904\u7406\u7684\u3002 DefaultCommit < Impl >:: commitInsts () { // \u53d1\u9001trap if ( interrupt != NoFault ) { commitStatus [ 0 ] = TrapPending ; EventFunctionWrapper * trap = new EventFunctionWrapper ( [ this , tid ]{ trapSquash [ tid ] = true ; }, \"Trap\" , true , Event :: CPU_Tick_Pri ); cpu -> schedule ( trap , cpu -> clockEdge ( trapLatency )); } // \u6302\u8d77\u4e5f\u4e0d\u4f1a\u518d\u63d0\u4ea4\u6307\u4ee4 if ( ! rob -> isEmpty ( tid ) && ( commitStatus [ tid ] == Running || commitStatus [ tid ] == Idle || commitStatus [ tid ] == FetchTrapPending )) { bool commit_success = commitHead ( head_inst , num_committed ); } } tcSquash\u4e5f\u662f\u7c7b\u4f3c\u7684\u5904\u7406\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002","title":"GEM5 \u8bbe\u8ba1\u4e0e\u5b9e\u73b0\u5206\u6790"},{"location":"simulator/gem5.html#gem5","text":"GEM5 \u8bbe\u8ba1\u4e0e\u5b9e\u73b0\u5206\u6790 \u524d\u8a00 \u5206\u6790\u70b9 \u7b80\u4ecb \u7406\u89e3gem5\u7684\u6a21\u5757\u5316 \u7406\u89e3gem5\u4e8b\u4ef6\u673a\u5236 TimeBuffer \u673a\u5236 \u673a\u5236\u4ecb\u7ecd \u4ee3\u7801\u5206\u6790 TimerBuffer\u603b\u7ed3 misc \u4eceboard\u5c42\u9762\u7406\u89e3gem5 \u4ecesoc\u5c42\u9762\u7406\u89e3gem5 \u4ececpu\u5fae\u67b6\u6784\u5c42\u9762\u7406\u89e3gem5 \u4e8b\u4ef6\u9a71\u52a8\u6a21\u578b simobject isa\u5b9a\u5236\u8bed\u6cd5 \u5185\u5b58\u7cfb\u7edf memory & port Python\u4e0eC++\u7684\u53c2\u6570\u4f20\u9012 \u6dfb\u52a0\u53c2\u6570\u7684\u65b9\u6cd5 \u6dfb\u52a0\u7b80\u5355SimObject \u6dfb\u52a0event \u5173\u4e8e\u7f16\u8bd1 O3 CPU\u7684ROB\u6a21\u5757\u5206\u6790 ROB\u4f5c\u7528\u673a\u5236 ROB\u4ee3\u7801\u7ed3\u6784\u5206\u6790 ROB\u64cd\u4f5c \u6307\u4ee4\u52a0\u5165ROB \u6307\u4ee4\u79fb\u51faROB squash\u7684\u64cd\u4f5c O3CPU\u7684Commit\u9636\u6bb5\u5206\u6790 commit\u9636\u6bb5\u6570\u636e\u7ed3\u6784 commit\u9636\u6bb5\u6d41\u7a0b \u4e00\u6b21ppt\u6c47\u62a5 gem5\u6d45\u6790","title":"GEM5 \u8bbe\u8ba1\u4e0e\u5b9e\u73b0\u5206\u6790"},{"location":"simulator/gem5.html#_1","text":"gem5\u662f\u4e00\u6b3e\u53ef\u4ee5\u5b9e\u73b0\u65f6\u949f\u7cbe\u786e\u4eff\u771f\u7684SOC\u6a21\u62df\u5668\u3002\u5b83\u672c\u8eab\u7684\u76ee\u7684\u5e76\u4e0d\u662f\u5e2e\u52a9\u4ea7\u54c1\u5f00\u53d1\uff0c\u5b83\u66f4\u504f\u5411\u4e8e\u6559\u80b2\u548c\u67b6\u6784\u63a2\u7d22\u3002 \u4f46\u662f\u7814\u7a76\u5b83\u4ecd\u7136\u662f\u6709\u610f\u4e49\u7684\uff0c\u5b83\u7684\u610f\u4e49\u5728\u4e8e\u80fd\u591f\u8ba9\u4f60\u5b66\u4e60\u5230\u4e00\u6b3e\u65f6\u949f\u7ea7\u6a21\u62df\u5668\u7684\u6784\u5efa\u601d\u8def\u3002 \u5b98\u7f51\uff1a[ http://www.gem5.org ] \u5b66\u4e60\u6307\u5bfc\uff1a[ http://www.gem5.org/documentation/learning_gem5/introduction ] \u76f8\u5173\u8d44\u6599\uff1a[ http://daystrom.m5sim.org/Main_Page ]","title":"\u524d\u8a00"},{"location":"simulator/gem5.html#_2","text":"\u5355\u5143\u7684\u8bbe\u8ba1\u601d\u8def \u5982\u4f55\u89e3\u51b3\u5bc4\u5b58\u5668\u51b2\u7a81 \u6d41\u6c34\u7ebf\u7684\u5b9e\u73b0\u65b9\u5f0f \u65f6\u949f\u5982\u4f55\u7edf\u4e00 \u591a\u6838\u8bbe\u8ba1 \u603b\u7ebf\uff0c\u7aef\u53e3\u7684\u62bd\u8c61 debug\u5982\u4f55\u652f\u6301 \u5730\u5740\u6620\u5c04\u7684\u5904\u7406\u65b9\u6cd5","title":"\u5206\u6790\u70b9"},{"location":"simulator/gem5.html#_3","text":"gem5\u662f\u4e00\u4e2a\u6a21\u5757\u5316\u7684\u8ba1\u7b97\u673a\u7cfb\u7edf\uff08computer-system\uff09\u6a21\u62df\u5668\uff0c\u5b83\u7ed3\u5408\u4e86M5(\u591a\u5904\u7406\u5668\u6a21\u62df\u5668)\u548cGEMS\uff08\u5b58\u50a8\u5c42\u6b21\u6a21\u62df\u5668\uff09\u4e2d\u6700\u4f18\u79c0\u7684\u90e8\u5206\uff0c\u6700\u521d\u7528\u4e8e\u8ba1\u7b97\u673a\u67b6\u6784\u4ee5\u53ca\u5fae\u5904\u7406\u5668\u67b6\u6784\u63a2\u7d22\uff0c\u5f53\u7136\u5728\u7814\u7a76\u884c\u4e1a\uff0c\u6559\u5b66\u884c\u4e1a\u4e5f\u6709\u63a8\u5e7f\u3002 \u4f46\u603b\u4f53\u6765\u8bb2\uff0cgem5\u662f\u504f\u5411\u4e8e\u5b66\u672f\u7684\u4e00\u6b3e\u6a21\u5757\u5316\u6a21\u62df\u5668\u5e73\u53f0\u3002 gem5\u76ee\u524d\u8fd8\u5728\u53d1\u5c55\uff0c\u652f\u6301\u7684CPU\u7c7b\u578b\u6709\uff1aAlpha, ARM, MIPS, Power, SPARC, RISC-V \u4ee5\u53ca 64 bit x86\u3002 \u5982\u4e0a\u662f\u5bf9\u4e8egem5\u5b98\u7f51\u63cf\u8ff0\u7684\u6982\u62ec\uff0c\u5176\u4e2d\u6700\u5173\u952e\u7684\u5e94\u8be5\u5c31\u662f\u6a21\u5757\u5316\u3002gem5\u53ef\u4ee5\u505a\u5230\u65f6\u949f\u7cbe\u786e\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u5229\u7528\u5b83\u7684\u6a21\u5757\u5316\uff0c\u5ffd\u7565\u6389\u4e00\u4e9b\u6a21\u5757\u7684latency\u3002\u672c\u6587\u4e3b\u8981\u4fa7\u91cd\u7684\u662fRISC-V\u67b6\u6784\u3002\u5bf9\u4e8eRISC-V, \u76ee\u524dgem5\u4e3b\u7ebf\u8fd8\u4e0d\u652f\u6301vector\u6269\u5c55\uff0c\u4f46amf\u6269\u5c55\u90fd\u5df2\u7ecf\u652f\u6301\u3002 gem5\u80fd\u591f\u6a21\u62df\u51fa\u4e00\u5757\u5177\u4f53\u7684\u677f\u5361\uff0c\u5305\u542b\u7531\u5404\u4e2a\u6a21\u5757\u7ec4\u6210\u7684SOC\u3001DDR\u4ee5\u53ca\u90e8\u5206\u5916\u8bbe\u7684\u5177\u4f53\u677f\u5361\uff0c\u4f46\u5b83\u6a21\u62df\u7684\u6838\u5fc3\u4ecd\u5728\u4e8eSOC\u5185\u90e8\u3002 gem5\u4e5f\u80fd\u8fd0\u884clinux\u7cfb\u7edf","title":"\u7b80\u4ecb"},{"location":"simulator/gem5.html#gem5_1","text":"linux\u7cfb\u7edf\u63d0\u4f9b\u4e86\u8bbe\u5907\u6811\uff0c\u8ba9\u5f00\u53d1\u8005\u901a\u8fc7\u7ec4\u5408\u7cfb\u7edf\u786c\u4ef6\u7684\u4e00\u7cfb\u5217\u6a21\u5757\uff0c\u4ece\u800c\u5339\u914d\u81ea\u5df1\u7684\u677f\u5361\u3002gem5\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u5b83\u6709\u5f88\u591a\u6a21\u5757\u90fd\u6709\u591a\u79cd\u5b9e\u73b0\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a\u5177\u4f53\u7684\u67d0\u4e00\u79cd\u5b9e\u73b0\u6765\u7ec4\u5408\u51fa\u4f60\u60f3\u6a21\u62df\u7684\u7cfb\u7edf\u3002 gem5\u7684\u6838\u5fc3\u5185\u5bb9\uff08\u5404\u4e2a\u6a21\u5757\u548c\u673a\u5236\u7684\u5177\u4f53\u5b9e\u73b0\uff09\u4f7f\u7528c++\u7f16\u5199\uff0c\u5185\u90e8\u96c6\u6210\u4e86python2.7\u89e3\u6790\u5668\u3002\u8fd9\u4e9b\u6a21\u5757\u5b9e\u73b0\u5b8c\u6210\u4e4b\u540e\u5c31\u50cflinux\u5185\u6838\u4e2d\u5b9e\u73b0\u7684\u4e00\u4e2a\u4e2adevice\uff0c\u6bd4\u5982\uff1acpu,cache,memory,power,process,tlb\u7b49\u7b49\u3002python\u89e3\u6790\u5668\u4f1a\u89e3\u6790\u5916\u90e8\u8f93\u5165\u7684\u914d\u7f6e\u6587\u4ef6\uff08python\u811a\u672c)\uff0c\u8fd9\u4e2a\u811a\u672c\u5c31\u50cf\u8bbe\u5907\u6811\u4e00\u6837\uff0c\u63cf\u8ff0\u4e86\u6574\u4e2a\u7cfb\u7edf\u662f\u5982\u4f55\u7531\u8fd9\u4e9bdevice\u7ec4\u5408\u8d77\u6765\u7684\uff0c\u5e76\u4e14\u5b9a\u4e49\u4e86\u8fd9\u4e9bdevice\u7684\u4e00\u4e9b\u5fc5\u4e0d\u53ef\u5c11\u7684\u53c2\u6570\u3002\u5728\u7cfb\u7edf\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u6839\u636e\u914d\u7f6e\u6587\u4ef6\u7684\u63cf\u8ff0\uff0c\u5bf9\u76f8\u5e94\u7684c++\u7c7b\u8fdb\u884c\u5b9e\u4f8b\u5316\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5177\u4f53\u7684\u7cfb\u7edf\u3002 \u6709\u4e9b\u6a21\u5757\u662f\u901a\u8fc7\u9759\u6001\u7f16\u8bd1\u7ed1\u5b9a\u7cfb\u7edf\u7684\uff0c\u6709\u4e9b\u6a21\u5757\u662f\u901a\u8fc7\u89e3\u6790\u914d\u7f6e\u811a\u672c\u52a8\u6001\u7ed1\u5b9a\u7684\u3002\u6bd4\u5982ARCH\u76f8\u5173\u7684\u5c31\u662f\u901a\u8fc7\u9759\u6001\u7f16\u8bd1\u7ed1\u5b9a\u7684\uff0c\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u6307\u5b9a\u8981\u7f16\u8bd1\u7684ARCH\uff0c\u800ccpu\u7c7b\u578b\u6211\u4eec\u53ef\u4ee5\u5728 \u914d\u7f6e\u811a\u672c\u4e2d\u6307\u5b9a\u3002 \u5f53\u7136\u4e86\uff0c\u5c31\u50cf\u4e50\u9ad8\u73a9\u5177\u4e00\u6837\uff0c\u7a7a\u6709\u4e00\u5806\u96f6\u4ef6\uff0c\u6ca1\u6709\u56fe\u7eb8\uff0c\u4e5f\u5f88\u96be\u505a\u51fa\u6765\u50cf\u6837\u7684\u73a9\u5177\uff08\u5929\u624d\u53ef\u80fd\u9664\u5916\uff09\u3002\u5982\u679c\u8ba9\u6211\u4eec\u4ece0\u5f00\u59cb\u7ec4\u5408\u8fd9\u4e9b\u6a21\u5757\uff0c\u662f\u5f88\u56f0\u96be\u7684\u4e00\u4ef6\u4e8b\u60c5\uff0c\u4f46\u597d\u5728gem5\u63d0\u4f9b\u4e86\u4e00\u4e9bdemo\u7684config\u6587\u4ef6\uff0c\u5e76\u4e14tests\u4e2d\u4e5f\u63d0\u4f9b\u4e86\u4e00\u4e9bconfig\u6587\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u6a21\u6539\u8fd9\u4e9b\u6587\u4ef6\u5b9e\u73b0\u81ea\u5df1\u7684\u7cfb\u7edf\u3002 \u793e\u533a\u6b63\u5728\u5f00\u53d1\u57fa\u4e8e\u56fe\u5f62\u62d6\u62fd\u5c31\u80fd\u751f\u6210config\u6587\u4ef6\u7684\u529f\u80fd\uff0c\u8fd9\u4f1a\u4f7f\u5b83\u7684config\u6587\u4ef6\u5199\u8d77\u6765\u66f4\u76f4\u89c2\u3002","title":"\u7406\u89e3gem5\u7684\u6a21\u5757\u5316"},{"location":"simulator/gem5.html#gem5_2","text":"gem5\u7684\u8fd0\u884c\u662f\u9760\u4e8b\u4ef6\u673a\u5236\u6765\u5b8c\u6210\u7684\uff0c\u4e8b\u4ef6\u6309\u7167tick\u548c\u4f18\u5148\u7ea7\u8fdb\u884c\u6392\u5e8f\uff0c\u540c\u4e00tick\u548c\u4f18\u5148\u7ea7\u7684\u4e8b\u4ef6\u88ab\u79f0\u4e3a\u201cInBin\u201d, \u6309\u7167\u6808\u7684\u65b9\u5f0f\u6765\u7ba1\u7406 \u4e8b\u4ef6\u7ba1\u7406\u7684\u6838\u5fc3\u4ee3\u7801\u5728src/sim/eventq.cc\u53caeventq.hh\u4e2d Event\u53caEventQueue\u662f\u6838\u5fc3\u7684\u6570\u636e\u7ed3\u6784\uff0c\u663e\u7136\uff0cEvent\u5b9e\u73b0\u4e86\u5bf9\u4e8b\u4ef6\u7684\u62bd\u8c61\uff0cEventQueue\u5b9e\u73b0\u4e86\u5bf9\u4e8b\u4ef6\u7684\u5c01\u88c5\u548c\u7ba1\u7406 class Event : public EventBase , public Serializable { friend class EventQueue ; private : Event * nextBin ; Event * nextInBin ; Tick _when ; //!< timestamp when event should be processed Priority _priority ; //!< event priority } class EventQueue { private : Event * head ; Tick _curTick ; } \u4e0a\u8ff0\u4ee3\u7801\u7f57\u5217\u4e86Event\u7684\u51e0\u4e2a\u91cd\u8981\u5b57\u6bb5\uff0c\u5176\u4e2dnextBin\u6307\u5411\u4e0b\u4e00\u4e2aEvent\uff0c\u5e76\u4e14\u4e0b\u4e00\u4e2aEvent\u4e00\u5b9a\u4e0e\u5f53\u524dEvent\u7684in bin\u4e0d\u540c(\u4e0d\u540cwhen\u6216\u8005\u4e0d\u540cpriority)\u3002 nextInBin\u662f\u6307\u5411\u4e0b\u4e00\u4e2a\u540cwhen\u540cpriority\u7684Event, nextInBin\u8fd9\u4e2a\u94fe\u8868\u88ab\u4f5c\u4e3a\u6808\u7684\u903b\u8f91\u6765\u7ba1\u7406\u3002 \u4e0a\u8ff0\u4e24\u70b9\u90fd\u662f\u7531Event\u7684\u63d2\u5165\u7b56\u7565\uff08insertBefore\uff09\u51b3\u5b9a\u7684\u3002 EventQueue\u4fdd\u5b58\u4e86Event\u94fe\u8868\u7684\u8868\u5934\uff0c\u8fd9\u662f\u904d\u5386\u7684\u8d77\u70b9\uff0c_curTick\u4fdd\u5b58\u4e86\u5f53\u524d\u7684\u5468\u671f\u65f6\u95f4\uff0c\u8fd9\u4e2a\u65f6\u95f4\u603b\u662f\u88ab\u8bbe\u7f6e\u4e3ahead\u7684_when,\u8fd9\u662f\u5728\u6267\u884c\u7684\u65f6\u5019\u51b3\u5b9a\u7684\u3002 \u663e\u7136\uff0cEventQueue\u4fdd\u5b58\u4e86\u4e00\u4e2a\u4e8b\u4ef6\u961f\u5217\uff0c\u8fd9\u4e2a\u961f\u5217\u662f\u4e00\u4e2a\u5355\u5411\u94fe\u8868\uff0c\u4f7f\u7528nextBin\u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2aEvent,\u4ee5_when+_priority\u7684\u65b9\u5f0f\u8fdb\u884c\u63d2\u5165\u3002 \u540c\u65f6\uff0c\u8fd9\u4e2a\u5355\u5411\u94fe\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2aEvent\u90fd\u662f\u5f53\u524d\u76f8\u540c_when + _priority\u7684Event\u7684\u6808\u9876\uff0c\u6bcf\u63d2\u5165\u4e00\u4e2a\u76f8\u540c_when + _priority\u7684Event\uff0c\u5f53\u524d\u8fd9\u4e2aEvent\u5c31\u4f1a\u88ab\u538b\u6808\uff0c\u4f7f\u7528nextInBin\u8fdb\u884c\u7ba1\u7406\uff0c\u65b0\u7684Event\u66ff\u4ee3\u539f\u6709Event\u7684\u4f4d\u7f6e\uff0c\u8fd9\u662f\u63d2\u5165\u65b9\u6cd5insertBefore\u51b3\u5b9a\u7684\u3002 Event * Event::insertBefore ( Event * event , Event * curr ) { // Either way, event will be the top element in the 'in bin' list // which is the pointer we need in order to look into the list, so // we need to insert that into the bin list. if ( ! curr || * event < * curr ) { // Insert the event before the current list since it is in the future. event -> nextBin = curr ; event -> nextInBin = NULL ; } else { // Since we're on the correct list, we need to point to the next list event -> nextBin = curr -> nextBin ; // curr->nextBin can now become stale // Insert event at the top of the stack event -> nextInBin = curr ; } return event ; } insertBefore\u8d1f\u8d23\u63d2\u5165\u5f85\u6267\u884c\u7684\u4e8b\u4ef6\uff0c\u4e00\u822c\u7531schedule\u89e6\u53d1\u3002 serviceOne\u8d1f\u8d23\u6267\u884c\u5f53\u524dEventQueue\u4e2d\u7684\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u4e3a\u4e86\u66f4\u65b9\u4fbf\u7406\u89e3\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u505a\u4e86\u4e00\u4e9b\u5220\u51cf\u3002 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u6bcf\u6b21\u90fd\u662f\u6267\u884c\u5934\u8282\u70b9\uff0c\u800c\u4e14\u5982\u679c\u5f53\u524d\u5934\u8282\u70b9\u6709\u76f8\u540c_when + _priority\u7684\u4e8b\u4ef6\uff0c\u90a3\u4e48\u6309\u7167 \u51fa\u6808\u7684\u987a\u5e8f\u4f9d\u6b21\u6267\u884c\u4e8b\u4ef6\uff0c\u76f4\u5230\u5f53\u524d\u76f8\u540c_when + _priority\u6267\u884c\u5b8c\u6210\u540e\uff0c\u518d\u901a\u8fc7setCurTick(event->when())\u6765 \u4fee\u6539\u5f53\u524d\u7cfb\u7edf\u7684\u65f6\u95f4\uff0c\u6700\u7ec8event->process()\u6267\u884cEvent\u56de\u8c03\u51fd\u6570\u3002 Event * EventQueue::serviceOne () { Event * event = head ; Event * next = head -> nextInBin ; if ( next ) { // update the next bin pointer since it could be stale next -> nextBin = head -> nextBin ; // pop the stack head = next ; } else { // this was the only element on the 'in bin' list, so get rid of // the 'in bin' list and point to the next bin list head = head -> nextBin ; } setCurTick ( event -> when ()); event -> process (); event -> release (); return NULL ; } \u4ece\u603b\u5165\u53e3\u4e0a\u770b\u6765\uff0c\u6574\u4e2a\u4e8b\u4ef6\u673a\u5236\u7684\u8fd0\u884c\u5c31\u662f\u5728\u4e00\u4e2a\u5927while\u5faa\u73af\u4e2d\uff0c\u4e0d\u65ad\u8c03\u7528eventQueue\u7684serviceOne doSimLoop ( EventQueue * eventq ) { while ( 1 ) { Event * exit_event = eventq -> serviceOne (); if ( exit_event != NULL ) { return exit_event ; } } }","title":"\u7406\u89e3gem5\u4e8b\u4ef6\u673a\u5236"},{"location":"simulator/gem5.html#timebuffer","text":"","title":"TimeBuffer \u673a\u5236"},{"location":"simulator/gem5.html#_4","text":"TimeBuffer\u662fgem5\u5b9e\u73b0\u7684\u4e00\u4e2a\u5faa\u73afbuffer\uff0c\u8fd9\u4e2a\u5faa\u73afbuffer\u53ef\u4ee5\u6309\u7167tick\u6765\u63a8\u8fdb\uff0c\u6bcfadvance()\u4e00\u6b21\uff0cbuffer\u7684\u6307\u9488\u5c31\u524d\u8fdb\u4e00\u4e2a\u3002 TimeBuffer\u901a\u8fc7\u6a21\u677f\u53c2\u6570\u53ef\u4ee5\u7528\u6765\u5b58\u653e\u4efb\u4f55\u60f3\u8981\u5b58\u653e\u7684\u6570\u636e\uff0c\u7279\u522b\u9002\u5408\u5728\u6d41\u6c34\u524d\u540e\u4f20\u9012\u6570\u636e\uff0c\u80fd\u591f\u4f53\u73b0\u51fa\u6d41\u6c34\u7684\u5ef6\u65f6\u3002 TimeBuffer\u63d0\u4f9b\u4e86\u4e00\u4e2apast\u548cfuture\u7684\u6982\u5ff5\u3002 past/future past2 past1 past0 current future0 future1 data 0 1 2 3 4 5 index 0 1 2 3 4 5 \u4ece\u65f6\u95f4(tick)\u7684\u89d2\u5ea6,\u57fa\u4e8e\u5f53\u524d\uff0c\u5f80\u524d\u63a8\uff0c\u6709\u591a\u4e2atick\u7684\u5ef6\u8fdf\uff0c\u5c31\u53ef\u4ee5\u8bbe\u7f6epast\u503c\u4e3a\u591a\u5c11\u3002\u6bd4\u5982\u5f53\u524d\u662ffetch\u9636\u6bb5,\u4e0b\u4e00\u9636\u6bb5\u4e3adecode\u9636\u6bb5\uff0c\u6307\u4ee4\u4ecefetch\u6d41\u5230decode\u9700\u8981\u4e00\u4e2atick\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u81f3\u5c11\u8bbe\u7f6epast\u4e3a1\u3002\u540c\u7406future\u3002 \u5faa\u73afbuffer\u4f1a\u4ecefuture0\u5f00\u59cb\u88ab\u5237\u65b0\uff0c\u968f\u7740\u6bcf\u6b21advance(), \u4ecefuture0\u5f00\u59cb\uff0cdata\u4e2d\u7684\u6570\u636e\u4f1a\u88ab\u6790\u6784\u5e76\u91cd\u65b0\u6784\u9020\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u5185\u90e8\u540d\u4e3abase\u7684\u6570\u636e\u6307\u9488\u4e5f\u4f1a\u5faa\u73af\u589e\u52a0\u3002 \u5047\u8bbe\u6211\u4eec\u5b9e\u4f8b\u4e86\u4e00\u4e2aTimeBuffer, past=3, future=3,\u90a3\u4e48\u968f\u7740tick\u7684\u8fdb\u884c\uff0c\u5927\u81f4\u4f1a\u6709\u5982\u4e0b\u7684\u5173\u7cfb TimeBuffer \u63d0\u4f9b\u4e86wire\u6765\u5b9e\u73b0\u5bf9Buffer\u6570\u636e\u7684\u95f4\u63a5\u8bbf\u95ee\u3002\u5728\u5b9e\u73b0\u8fd9\u4e2a\u8bbf\u95ee\u63a5\u53e3\u7684\u65f6\u5019\uff0c\u9700\u8981\u63d0\u4f9b\u4e00\u4e2aindex\uff0c\u8fd9\u4e2aindex\u662f\u4e00\u4e2atick\u7684\u6982\u5ff5\u3002\u6bd4\u5982\u6211\u4eec\u5b9e\u4f8b\u4e24\u4e2awire\uff0cwire0\u7684index\u4e3a0, wire1\u7684index\u4e3a-2, \u90a3\u4e48\u5c31\u610f\u5473\u7740wire0\u6539\u5199\u7684buffer\u5355\u5143\u5728\u4e24\u4e2atick\u4e4b\u540e\uff0cwire1\u624d\u80fd\u8bbf\u95ee\u5230\u3002 tick 0 1 2 3 4 5 6 7 8 9 base 0 1 2 3 4 5 6 0 1 2 ptr 4 5 6 0 1 2 3 4 5 wire0 0 1 2 3 4 5 6 0 1 2 wire1 5 6 0 1 2 3 4 5 6 0 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5728tick0\u65f6\uff0cwire0\u53ef\u4ee5\u8bbf\u95eedata0, wire1\u53ef\u4ee5\u8bbf\u95eedata5\u3002\u5f53t\u7cfb\u7edftick\u8d70\u52301\u65f6\uff0c\u8c03\u7528advance(), \u6b64\u65f6TimeBuffer\u5185\u90e8\u6307\u9488base\u53d8\u4e3a1, TimeBuffer\u91cd\u6784\u4e86ptr\u6240\u6307\u5411\u7684data4\uff08ptr = future + base)\uff0c\u6b64\u65f6wire0\u80fd\u591f\u8bbf\u95eedata1, wire1\u80fd\u591f\u8bbf\u95eedata6\u3002 \u52a0\u5165\u5728tick2, wire0\u66f4\u65b0\u4e86data2, \u90a3\u4e48\u5728tick4, wire1\u624d\u80fd\u62ff\u5230\u66f4\u65b0\u540e\u7684data2, \u4f53\u73b0\u51fa\u4e86\u5ef6\u8fdf2\u4e2atick\u3002","title":"\u673a\u5236\u4ecb\u7ecd"},{"location":"simulator/gem5.html#_5","text":"template < class T > class TimeBuffer { protected : int past ; int future ; unsigned size ; char * data ; std :: vector < char *> index ; unsigned base ; public : TimeBuffer ( int p , int f ) : past ( p ), future ( f ), size ( past + future + 1 ), data ( new char [ size * sizeof ( T )]), index ( size ), base ( 0 ) { assert ( past >= 0 && future >= 0 ); char * ptr = data ; for ( unsigned i = 0 ; i < size ; i ++ ) { index [ i ] = ptr ; std :: memset ( ptr , 0 , sizeof ( T )); new ( ptr ) T ; ptr += sizeof ( T ); } } TimeBuffer\u901a\u8fc7new char[size * sizeof(T)]\u4e00\u6b21\u6027\u7684\u4e3a\u6240\u6709\u5143\u7d20\u5f00\u8f9f\u5b58\u50a8\u7a7a\u95f4\u3002\u901a\u8fc7palcement new\u6765\u5b9e\u73b0\u5728\u5df2\u7ecf\u5f00\u8f9f\u7684\u7a7a\u95f4\u4e0a\u5bf9buffer\u5bf9\u8c61\u7684\u6784\u9020\u3002\u540c\u65f6\uff0c\u4e3a\u4e86\u8bbf\u95ee\u7684\u65b9\u4fbf\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2aindex\u7684\u6307\u9488\u5411\u91cf\u6307\u5411buffer\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u3002 void advance () { if ( ++ base >= size ) base = 0 ; int ptr = base + future ; if ( ptr >= ( int ) size ) ptr -= size ; ( reinterpret_cast < T *> ( index [ ptr ])) ->~ T (); std :: memset ( index [ ptr ], 0 , sizeof ( T )); new ( index [ ptr ]) T ; } \u6bcf\u6b21advance\u90fd\u53bb\u66f4\u65b0base\uff0c base\u901a\u8fc7size\u63a7\u5236\u6765\u5b9e\u73b0\u5faa\u73af\uff0c\u8fdb\u800c\u5b9e\u73b0\u5faa\u73afbuffer\u3002\u6bcf\u6b21advance\u90fd\u4f1a\u6790\u6784\u5e76\u91cd\u6784\u5f53\u524dbase\u5bf9\u5e94\u7684future\u6570\u636e\u3002 class wire { TimeBuffer < T > * buffer ; int index ; wire ( TimeBuffer < T > * buf , int i ) : buffer ( buf ), index ( i ) { } T & operator * () const { return * buffer -> access ( index ); } T * operator -> () const { return buffer -> access ( index ); } } class TimeBuffer { inline int calculateVectorIndex ( int idx ) const { int vector_index = idx + base ; if ( vector_index >= ( int ) size ) { vector_index -= size ; } else if ( vector_index < 0 ) { vector_index += size ; } return vector_index ; } T * access ( int idx ) { int vector_index = calculateVectorIndex ( idx ); return reinterpret_cast < T *> ( index [ vector_index ]); } } wire\u901a\u8fc7\u4e0d\u540c\u7684index\u6765\u5b9e\u73b0\u5bf9timebuffer\u4e2d\u4e0d\u540c\u7684\u5143\u7d20\u7684\u8bbf\u95ee\uff0c\u5176\u4e2dcalculateVectorIndex\u4ecd\u7136\u662f\u4e3a\u4e86\u5b9e\u73b0\u5faa\u73afbuffer\u3002\u5f53\u7136\uff0cwire\u7684\u5b57\u6bb5index\u7684\u547d\u540d\u5bb9\u6613\u5f15\u53d1\u6b67\u4e49\uff0c\u6216\u8bb8\u53ef\u4ee5\u7528\u4e00\u4e2a\u66f4\u4e0d\u5bb9\u6613\u6df7\u6dc6\u7684\u540d\u5b57\u3002","title":"\u4ee3\u7801\u5206\u6790"},{"location":"simulator/gem5.html#timerbuffer","text":"\u5c3d\u7ba1TimeBuffer\u7684\u6838\u5fc3\u662f\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u7ec4\uff0c\u6570\u636e\u5728buffer\u4e2d\u5b9e\u9645\u4e0a\u662f\u4e0d\u52a8\u7684\u3002\u4f46\u5b83\u901a\u8fc7base\u53ca\u4e00\u4e9b\u8f85\u52a9\u8ba1\u6570\uff0c\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u961f\u5217\u7684\u529f\u80fd\uff0c\u800c\u4e14\uff0c\u6570\u636e\u79fb\u51fa\u961f\u5217\u5c31\u4f1a\u6d88\u5931\u3002 \u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u5176\u4e2d\u7684\u6570\u636e\u662f\u6309\u7167tick\u8fdb\u884c\u6d41\u52a8\u7684\uff0c\u800c\u4e14\u901a\u8fc7wire\u8bbf\u95ee\u7684\u65b9\u5f0f\uff0c\u5b9e\u73b0\u4e86\u4fe1\u53f7\u4f20\u9012\u53ca\u6570\u636e\u6d41\u52a8\u7684\u5ef6\u8fdf\u3002","title":"TimerBuffer\u603b\u7ed3"},{"location":"simulator/gem5.html#misc","text":"gem5\u80fd\u591f\u6a21\u62df\u4e00\u5757\u677f\u5361 \u4e0a\u56fe\u662f\u4e00\u4e2a\u8f83\u4e3a\u590d\u6742\u7684\u5f00\u53d1\u677f\u7cfb\u7edf\u6846\u56fe\uff0c\u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u5230\uff0csoc\u901a\u8fc7\u5b83\u7684\u5916\u90e8\u63a5\u53e3\u8fde\u63a5\u4e86\u677f\u4e0a\u7684\u5404\u4e2a\u5916\u8bbe\u3002\u6bd4\u5982\u901a\u8fc7DDR4\u63a5\u53e3\u8fde\u63a5\u5916\u90e8DDR,\u901a\u8fc7PCIE\u63a5\u53e3\u8fde\u63a5\u5916\u90e8PCIE\u8bbe\u5907\uff0c\u901a\u8fc7USB\u63a5\u53e3\u94fe\u63a54G\u6a21\u5757\u7b49\u7b49\u3002 gem5\u80fd\u591f\u6a21\u62df\u51fa\u7c7b\u4f3c\u4e0a\u56fe\u7684\u4e00\u5757\u677f\u5361\uff0c\u5305\u62ecSOC\u4ee5\u53ca\u90e8\u5206\u5916\u8bbe\u3002\u4f46\u662f\uff0c\u6709\u4e24\u70b9\u9700\u8981\u6ce8\u610f gem5\u7684\u6838\u5fc3\u4efb\u52a1\u8fd8\u662f\u6a21\u62dfSOC\u5185\u90e8\u884c\u4e3a\uff0c\u76ee\u524d\u5b9e\u73b0\u7684\u5916\u8bbe\u6bd4\u8f83\u5c11 gem5\u7684\u5916\u8bbe\u529f\u80fd\u662f\u5728\u63a7\u5236\u5668\u4fa7\u505a\u7684\u3002 \u5047\u5982\u6211\u4eec\u8981\u505a\u4e00\u4e2a\u6a21\u62df\u5668\uff0c\u8981\u5b9e\u73b0SOC\u8bbf\u95ee\u5916\u90e8TMP75\u6e29\u5ea6\u4f20\u611f\u5668\u7684\u6a21\u62df\u3002\u5047\u5982\u6211\u4eec\u7684\u91cd\u70b9\u662f\u5728SOC\u5185\u90e8\uff0c\u90a3\u6211\u4eec\u53ef\u80fd\u4f1a\u60f3\u7740\u53bb\u5b9e\u73b0\u8fd9\u4e2aTMP75\u4f20\u611f\u5668\uff0c\u5e76\u4e14\u5b9e\u73b0\u8fd9\u4e2a\u603b\u7ebf\u8fde\u63a5\u3002 \u4f46\u8fd9\u6837\u5b58\u5728\u7684\u95ee\u9898\u662f\uff0c\u4f1a\u8ba9\u5b9e\u73b0\u5f88\u590d\u6742\uff0c\u540c\u65f6\u4f1a\u8ba9\u5de5\u4f5c\u7684\u91cd\u5fc3\u4eceCPU\u8f6c\u5230\u4e86\u5916\u8bbe\u4e0a\uff0c\u5df2\u7ecf\u8131\u79bb\u4e86\u4f5c\u4e3a\u4e00\u6b3eCPU\u6a21\u62df\u5668\u6700\u6838\u5fc3\u7684\u4e1c\u897f\u3002\u8fd9\u5f88\u6ca1\u6709\u6027\u4ef7\u6bd4\u3002gem5\u7684\u5b9e\u73b0\u662f\u5728\u63a7\u5236\u5668\u4e0a\u505a\u6587\u7ae0\uff0c\u6bd4\u5982\u540c\u6837\u8981\u5b9e\u73b0\u901a\u8fc7I2C\u8bbf\u95eeTMP75\u4f20\u611f\u5668\uff0c\u5b83\u4f1a\u76f4\u63a5\u5728I2C\u63a7\u5236\u5668\u4e0a\u5b9e\u73b0TMP75\u4f20\u611f\u5668\u7684\u529f\u80fd\uff0c\u5e76\u4e14\u53ea\u9700\u8981\u8bbe\u7f6e\u597d\u6570\u636e\u8fd4\u56de\u7684latency\uff0c\u5c31\u5b8c\u5168\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u6a21\u62df\uff0c\u5e76\u4e14\u4fdd\u8bc1\u4e00\u5b9a\u7684\u65f6\u949f\u7cbe\u786e\u3002\uff08\u5f53\u7136\u8fd9\u4e2a\u4f8b\u5b50\u5728gem5\u4e2d\u6ca1\u6709\u5b9e\u73b0\uff09 gem5\u7684\u5185\u5b58\u7cfb\u7edf\u652f\u6301DDR\uff0c\u540c\u6837\u7684\uff0cgem5\u5728DDR\u63a7\u5236\u5668\u4e0a\u505a\u6587\u7ae0\uff0c\u53ea\u9700\u8981\u8bbe\u7f6eDDR\u63a7\u5236\u5668\u7684\u4e00\u4e9bLatency\u53c2\u6570\uff0c\u5c31\u53ef\u4ee5\u5728DDR\u8bbf\u95ee\u7684\u6027\u80fd\u65b9\u9762\u505a\u5230\u7c7b\u4f3c\u771f\u5b9e\u7684DDR\uff0c\u800c\u4e0d\u9700\u8981\u771f\u5b9e\u7684\u53bb\u6a21\u62df\u51fa\u6765\u4e00\u4e2aDDR\u82af\u7247\u5e76\u4e14\u518d\u8bbe\u8ba1DDR\u603b\u7ebf\u8fde\u63a5SOC\u548cDDR\u82af\u7247\u3002 \u53c2\u8003gem5\u5b98\u7f51\u7684\u6587\u6863\uff0c\u5927\u81f4\u6709\u4e0b\u9762\u51e0\u4e2a\u6838\u5fc3\u673a\u5236\u9700\u8981\u7406\u89e3 gem5\u662f\u57fa\u4e8e\u4e8b\u4ef6\u9a71\u52a8\u6a21\u578b\u800c\u8bbe\u8ba1\u7684\uff0c\u90a3\u4e48\u4e8b\u4ef6\u9a71\u52a8\u6a21\u578b\u662f\u5982\u4f55\u5b9e\u73b0\u4e0e\u8fd0\u884c\u7684\uff1f \u5927\u591a\u6570\u6a21\u5757\u7684\u57fa\u7c7b\u90fd\u662fSimObject\uff0cgem5\u662f\u5982\u4f55\u7ba1\u7406\u8fd9\u4e9bSimObject\u7684\uff0c\u8fd9\u4e9bSimObject\u53c8\u662f\u5982\u4f55\u7ec4\u6210\u7cfb\u7edf\u7684\uff1f gem5\u7684isa\u5b9e\u73b0\u53ef\u4ee5\u7406\u89e3\u4e3a\u81ea\u521b\u4e86\u4e00\u5957\u8bed\u6cd5\uff0c\u5e76\u4e14\u5b9e\u73b0\u4e86isa_parser\u7684\u89e3\u6790\u5668\u3002\u89e3\u6790\u5668\u89e3\u6790\u56fa\u5b9a\u8bed\u6cd5\u7684ias\u63cf\u8ff0\u6587\u4ef6\uff0c\u751f\u6210isa\u5b9e\u73b0\u7684c++\u4ee3\u7801\uff0c\u5e76\u53c2\u4e0e\u7f16\u8bd1\u3002 gem5\u5982\u4f55\u5b9e\u73b0\u5185\u5b58\u7cfb\u7edf \u4e0a\u8ff0\u8fd9\u4e9b\uff0c\u90fd\u53ef\u4ee5\u5728gem5\u5b98\u7f51\u4e2d\u627e\u5230\u86db\u4e1d\u9a6c\u8ff9\u3002 \u4f46\u6362\u4e00\u4e2a\u89d2\u5ea6\uff0c\u4ece\u66f4\u9ad8\u7684\u5c42\u9762\u6765\u770bgem5\u3002gem5\u662f\u5982\u4f55\u62bd\u8c61\u677f\u5361\uff08board\uff09, soc, cpu\u5b50\u7cfb\u7edf\u7684\uff1f \u4f3c\u4e4e\u8fd9\u4e2a\u95ee\u9898\u5728\u5b98\u7f51\u4e2d\u5e76\u65e0\u6cd5\u76f4\u63a5\u627e\u5230\u7b54\u6848\uff0c\u7136\u800c\u8fd9\u6070\u6070\u662f\u6211\u8ba4\u4e3a\u7406\u89e3gem5\u6700\u91cd\u8981\u7684\u90e8\u5206\u3002 \u5bf9\u4e8e\u4e0a\u9762\u63d0\u5230\u7684\u51e0\u70b9\uff0c\u6211\u4eec\u7a0d\u540e\u518d\u5206\u6790\u3002\u9996\u5148\u6211\u4eec**\u7ad9\u5728gem5\u8bbe\u8ba1\u8005\u7684\u89d2\u5ea6\uff0c\u5206\u522b\u4eceboard,soc,cpu\u5fae\u67b6\u6784\u4e09\u4e2a\u5c42\u9762\u6765\u7406\u89e3\u5b83\u7684\u8bbe\u8ba1**","title":"misc"},{"location":"simulator/gem5.html#boardgem5","text":"","title":"\u4eceboard\u5c42\u9762\u7406\u89e3gem5"},{"location":"simulator/gem5.html#socgem5","text":"\u4e0a\u56fe\u662fSiFive\u7684RISCV\u67b6\u6784FE310_G000 SOC\uff0c\u53ef\u4ee5\u770b\u5230\u5b83\u6709\u4e00\u4e2aE31\u6838\uff0c\u865a\u7ebf\u6846\u662f\u6838\u5185\u5fae\u67b6\u6784\uff0c\u5b83\u662f\u4e00\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684MCU\u6838\u3002 E31\u6838\u901a\u8fc7P-Bus\u603b\u7ebf\u8fde\u63a5\u4e00\u4e9b\u5916\u8bbe\u63a7\u5236\u5668\u3002\u7406\u8bba\u4e0a\uff0c\u4f7f\u7528gem5\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u4e0e\u4e0a\u56fe\u51e0\u4e4e\u4e00\u6837\u7684SOC\u6a21\u578b\u3002 \u4e0d\u5173\u6ce8CPU\u5185\u90e8\u5fae\u67b6\u6784\uff0c\u4ece\u5927\u7684\u6a21\u5757\u4e0a\u6765\u8bb2\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0CPU\u6838\uff0c\u603b\u7ebf\uff0c\u5916\u8bbe\u63a7\u5236\u5668\u3002\u5e76\u4e14\u8ba9\u4ed6\u4eec\u80fd\u591f\u8fde\u63a5\u8d77\u6765\u7ec4\u6210\u4e00\u4e2aSOC\u3002\u90a3\u4e48gem5\u662f\u5982\u4f55\u5b9e\u73b0\u8fd9\u4e9b\u7684\u5462\uff1f \u4e0a\u56fe\u662f\u901a\u8fc7graphviz\u4f9d\u636econfig.ini\u6587\u4ef6\u751f\u6210\u7684\u4e00\u4e2a\u7b80\u5355\u7cfb\u7edf\u6846\u56fe\uff0c\u5b83\u8db3\u4ee5\u8bf4\u660egem5\u7684\u8bbe\u8ba1\u601d\u8def\u3002 system\u62bd\u8c61\u4e86\u6574\u4e2aSOC\u7cfb\u7edf\uff0csystem\u4e2d\u5305\u542b\u4e00\u7cfb\u5217\u7684\u57fa\u4e8eSimObject\u7684\u6a21\u5757\uff0c\u5f53\u7136root\u548csystem\u672c\u8eab\u4e5f\u662f\u4e00\u4e2aSimObject\u3002DerivO3CPU, membus, memctrl\u8fd9\u4e09\u5927\u6a21\u5757\u90fd\u662fSimObject\u3002\u6d89\u53ca\u5230\u6570\u636e\u4f20\u8f93\u7684\u6a21\u5757\u90fd\u6709port\uff0c\u5206\u4e3amaster\u548cslave\u4e24\u79cd\u7c7b\u578b\uff0cmaster\u548cslave\u53ef\u4ee5\u8fdb\u884c\u8fde\u63a5\u3002\u4ece\u800c\u4f7f\u5f97\u6a21\u5757\u76f8\u8fde\u3002 \u8981\u60f3\u5c06\u8fd9\u79cd\u8fde\u63a5\u65b9\u5f0f\u505a\u7684\u901a\u7528\uff0c\u5c31\u9700\u8981\u628aport\u8bbe\u8ba1\u7684\u901a\u7528","title":"\u4ecesoc\u5c42\u9762\u7406\u89e3gem5"},{"location":"simulator/gem5.html#cpugem5","text":"","title":"\u4ececpu\u5fae\u67b6\u6784\u5c42\u9762\u7406\u89e3gem5"},{"location":"simulator/gem5.html#_6","text":"","title":"\u4e8b\u4ef6\u9a71\u52a8\u6a21\u578b"},{"location":"simulator/gem5.html#simobject","text":"","title":"simobject"},{"location":"simulator/gem5.html#isa","text":"","title":"isa\u5b9a\u5236\u8bed\u6cd5"},{"location":"simulator/gem5.html#_7","text":"","title":"\u5185\u5b58\u7cfb\u7edf"},{"location":"simulator/gem5.html#memory-port","text":"\u6240\u6709\u5185\u5b58\u5bf9\u8c61\u90fd\u662f\u901a\u8fc7port\u8fde\u63a5\u8d77\u6765\u7684\uff0cport\u5b9e\u73b0\u4e86\u4e09\u79cd\u4e0d\u540c\u7684\u5185\u5b58\u6a21\u5f0f atomic timing functional timing\u6a21\u5f0f\u662f\u552f\u4e00\u4e00\u4e2a\u80fd\u4ea7\u751f\u6b63\u786e\u7684\u4eff\u771f\u7ed3\u679c\u7684\u6a21\u5f0f; atomic\u6a21\u5f0f\u662f\u4e00\u4e2a\u5feb\u901f\u4eff\u771f\u6a21\u5f0f; functional\u6a21\u5f0f\u662f\u4e00\u4e2adebug\u6a21\u5f0f\uff0c\u652f\u6301\u4ecehost\u7aef\u8bfb\u5165\u5185\u5b58\u6570\u636e port\u5305\u542bmaster ports \u548c slave ports\u4e24\u79cd\uff0cport\u4f20\u9012\u7684\u662fpackets,","title":"memory &amp; port"},{"location":"simulator/gem5.html#pythonc","text":"gem5\u5b98\u7f51Documentation\u7684\u4f5c\u8005\u8ba4\u4e3a\uff0cgem5\u7684python\u63a5\u53e3\u7684\u4eae\u70b9\u5728\u4e8e\u80fd\u591f\u5411C++\u4f20\u9012\u53c2\u6570\u3002\uff08tvm\u4e5f\u80fd\u591f\u5b9e\u73b0C++\u4e0ePython\u7684\u6570\u636e\u4e92\u4f20\uff0c\u8fd9\u4e00\u70b9\u6211\u89c9\u5f97\u53ef\u4ee5\u5bf9\u6bd4\u7740\u5206\u6790\u4e24\u8005\u7684\u5b9e\u73b0\uff09","title":"Python\u4e0eC++\u7684\u53c2\u6570\u4f20\u9012"},{"location":"simulator/gem5.html#_8","text":"\u5728src\u7684.py\u6587\u4ef6\u4e2d\u6dfb\u52a0python\u53c2\u6570\u7684\u5b9a\u4e49\uff0c\u8fd9\u4e2a\u53c2\u6570\u53ef\u4ee5\u5728config\u6587\u4ef6\u4e2d\u8d4b\u503c \u5728src\u7684.cc\u6587\u4ef6\u4e2d\uff0c\u5728\u7c7b\u4e2d\u6dfb\u52a0\u53c2\u6570\u5b57\u6bb5 \u5728src\u7684.cc\u6587\u4ef6\u4e2d\uff0c\u5728\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4e2d\u6dfb\u52a0\u53c2\u6570\u5b57\u6bb5\u7684\u8d4b\u503c\uff0c\u53c2\u6570\u7531python\u4f20\u5165 \u5728config\u6587\u4ef6\u4e2d\u6dfb\u52a0\u5fc5\u8981\u7684\u53c2\u6570\u8d4b\u503c","title":"\u6dfb\u52a0\u53c2\u6570\u7684\u65b9\u6cd5"},{"location":"simulator/gem5.html#simobject_1","text":"\u5728src\u76ee\u5f55\u4e2d\u6dfb\u52a0demo.py, demo.cc, demo.hh \u5728demo.py\u4e2d\u6dfb\u52a0Demo\u7c7b \u5728demo.hh\u4e2d\u6dfb\u52a0Demo\u7c7b \u5728demo.cc\u4e2d\u6dfb\u52a0Demo\u7c7b\u6784\u9020\u51fd\u6570\uff0c\u5fc5\u8981\u65b9\u6cd5\uff0c\u6784\u9020\u51fd\u6570\u9700\u8981\u6709\u9ed8\u8ba4\u53c2\u6570DemoParams \u5728src\u76ee\u5f55\u4e0b\u7684Sconscript\u4e2d\u6dfb\u52a0\u6587\u4ef6\u7f16\u8bd1\u548c\u5fc5\u8981\u7684debug flag \u5728config\u6587\u4ef6\u4e2d\u4f7f\u7528\u65b0\u6dfb\u52a0\u7684Demo\u5b9e\u4f8b","title":"\u6dfb\u52a0\u7b80\u5355SimObject"},{"location":"simulator/gem5.html#event","text":"\u6dfb\u52a0EventFunctionWrapper\u7c7b\u578b\u7684event\u5b57\u6bb5\u5230Demo\u7c7b\u4e2d \u6dfb\u52a0processEvent \u65b9\u6cd5\u7528\u6765\u505aevent\u56de\u8c03\u51fd\u6570 \u5728\u6784\u9020\u51fd\u6570\u4e2d\uff0c\u521d\u59cb\u5316event\u4e3aprocessEvent \u521b\u5efastartup\u65b9\u6cd5\uff0c\u5728\u8be5\u65b9\u6cd5\u4e2d\u6dfb\u52a0event\u7684schedule\uff0c\u7528\u4e8e\u5728\u542f\u52a8\u65f6\u89e6\u53d1event","title":"\u6dfb\u52a0event"},{"location":"simulator/gem5.html#_9","text":"gem5\u4f7f\u7528Scons\u6765\u7ec4\u7ec7\u7f16\u8bd1\uff0cScons\u7c7b\u4f3c\u4e8emake\u3002 Scons\u9700\u8981\u4f7f\u7528\u540d\u4e3aSConstruct\u7684\u6587\u4ef6\u6765\u7ec4\u7ec7\u7f16\u8bd1, Scons\u8fd8\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7684API\uff0c\u7528\u4e8e\u5728SConstruct\u4e2d\u65b9\u4fbf\u7684\u5b9a\u5236\u6784\u5efa\u89c4\u5219\u3002 \u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\uff0cScons\u662fmake\u7684\u5347\u7ea7\u7248\uff0c\u5b83\u80fd\u66f4\u7b80\u5355\uff0c\u66f4\u5bb9\u6613\u7684\u5b9e\u73b0make\u5b9e\u73b0\u7684\u529f\u80fd\uff0cScons\u4f7f\u7528Python\u811a\u672c\u6765\u7ec4\u7ec7\u6784\u5efa,\u6709\u826f\u597d\u7684\u8de8\u5e73\u53f0\u6027\u3002","title":"\u5173\u4e8e\u7f16\u8bd1"},{"location":"simulator/gem5.html#o3-cpurob","text":"","title":"O3 CPU\u7684ROB\u6a21\u5757\u5206\u6790"},{"location":"simulator/gem5.html#rob","text":"\u5728\u4e71\u5e8fCPU\u4e2d\uff0c\u6307\u4ee4\u5728\u6d41\u6c34\u7ebf\u4e2d\u6267\u884c\u7684\u65f6\u5019\u662f\u4e71\u5e8f\u7684\u3002\u4f46\u4ece\u7a0b\u5e8f\u5458\u7684\u89d2\u5ea6\uff0c\u662f\u4e0d\u5141\u8bb8\u8fd9\u79cd\u4e71\u5e8f\u53d1\u751f\u7684\uff0c\u5728\u7a0b\u5e8f\u5458\u770b\u6765\uff0c\u6307\u4ee4\u4e00\u5b9a\u8981\u987a\u5e8f\u7684\u6267\u884c\u3002\u56e0\u6b64\u4ea7\u751f\u4e86ROB\u6a21\u5757\uff0cROB\u4f7f\u5f97\u5728\u6d41\u6c34\u7ebf\u4e2d\u4e71\u5e8f\u6267\u884c\u7684\u6307\u4ee4\u5728\u7a0b\u5e8f\u5458\u770b\u6765\u662f\u987a\u5e8f\u7684\uff0c\u5373\u5c06\u4e71\u5e8f\u7684\u6307\u4ee4\u7ed3\u679c\u201c\u91cd\u6392\u5e8f\u201d\u3002 \u663e\u7136\uff0cROB\u6a21\u5757\u5fc5\u987b\u6709\u4e00\u4e2a\u6307\u4ee4\u987a\u5e8f\u7684\u8bb0\u5f55\u529f\u80fd\uff0c\u5728\u4e71\u5e8f\u6267\u884c\u4e4b\u524d\u5e94\u8be5\u505a\u987a\u5e8f\u8bb0\u5f55\uff0c\u4e71\u5e8f\u6267\u884c\u540e\uff0c\u5e94\u8be5\u6309\u7167\u8bb0\u5f55\u7684\u987a\u5e8f\u5b8c\u6210\u6307\u4ee4\u7684\u6700\u7ec8\u63d0\u4ea4\u3002\u53ea\u6709\u8fd9\u6837\uff0c\u624d\u80fd\u4fdd\u8bc1\u5728\u7a0b\u5e8f\u5458\u770b\u6765\uff0c\u6307\u4ee4\u4ecd\u7136\u662f\u987a\u5e8f\u6267\u884c\u7684\u3002 \u5982\u4e0a\u56fe\uff0c\u5728\u4e71\u5e8fCPU\u7684pipeline\u4e2d\uff0cRename\u53ca\u4ee5\u524d\u7684\u6d41\u6c34\u90fd\u53ef\u4ee5\u8ba4\u4e3a\u662f\u987a\u5e8f\u7684\uff0c\u5c3d\u7ba1\u5b83\u5b9e\u9645\u4e0a\u53ef\u4ee5\u5728\u4e00\u4e2a\u5468\u671f\u5904\u7406\u591a\u6761\u6307\u4ee4\uff0c\u4f46\u591a\u6761\u4ecd\u7136\u662f\u987a\u5e8f\u7684\u3002\u4f46\u5728Execute\u9636\u6bb5\u5c31\u5f00\u59cb\u4e71\u5e8f\u4e86\uff0c\u6240\u4ee5\uff0c\u8981\u5728Rename\u4e4b\u540e\uff0c\u5c06\u6307\u4ee4\u987a\u5e8f\u8bb0\u5f55\u5728ROB\u4e2d\u3002WriteBack\u9636\u6bb5\u5b8c\u6210\u540e\uff0c\u6211\u4eec\u57fa\u672c\u53ef\u4ee5\u8ba4\u4e3a\u6307\u4ee4\u5df2\u7ecf\u6267\u884c\u5b8c\u6210\uff0c\u90a3\u4e48\u5728Commit\u9636\u6bb5\uff0c\u5c31\u9700\u8981\u6309\u7167ROB\u4e2d\u8bb0\u5f55\u7684\u6307\u4ee4\u7684\u987a\u5e8f\u6765\u63d0\u4ea4\u6307\u4ee4\uff0c\u8fd9\u6837\u5c31\u65e2\u52a0\u901f\u4e86\u6307\u4ee4\u7684\u8fd0\u884c\uff0c\u63d0\u9ad8\u4e86\u6d41\u6c34\u7ebf\u7684\u5229\u7528\u7387\uff0c\u53c8\u4fdd\u8bc1\u6307\u4ee4\u7684\u987a\u5e8f\u662f\u6b63\u786e\u7684\u3002 \u5728gem5\u7684\u5b9e\u73b0\u4e2d\uff0c\u662f\u5728commit\u7684\u4ee3\u7801\u4e2d\u5c06\u6307\u4ee4\u6dfb\u52a0\u5230ROB\uff0c\u4e4d\u770b\u8d77\u6765\u6709\u4e9b\u8d39\u89e3\uff0c\u4f46\u5b9e\u9645\u4e0a\u4ecd\u7136\u662f\u57fa\u4e8eRename\u4f20\u9012\u7684\u6307\u4ee4\u961f\u5217\uff0c\u5bf9\u6574\u4f53\u6548\u679c\u6ca1\u6709\u5f71\u54cd","title":"ROB\u4f5c\u7528\u673a\u5236"},{"location":"simulator/gem5.html#rob_1","text":"ROB\u7684\u5b9e\u73b0\u652f\u6301\u591a\u786c\u7ebf\u7a0b(\u4ee3\u7801\u4e2d\u5e94\u8be5\u628a\u786c\u7ebf\u7a0b\u505a\u62bd\u8c61)\u3002\u4ece\u786c\u4ef6\u7ebf\u7a0b\u7684\u89d2\u5ea6\u6765\u5206\u6790\uff0cROB\u7ed3\u6784\u5c31\u6bd4\u8f83\u597d\u7406\u89e3 \u4ee3\u7801\u5b9e\u73b0\u7684\u6838\u5fc3\u662f\u5bf9list\\ \u7684\u8bbf\u95ee\uff0c \u731c\u6d4brobStatus\u7684\u672c\u610f\u662fROB\u4e2d\u5f53\u524d\u786c\u4ef6\u7ebf\u7a0b\u7684\u72b6\u6001\u673a\uff0c\u4f46\u5b9e\u9645\u4e0a\u7528doneSquashing\u6765\u8868\u793a\u4e86\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b9e\u9645\u4e0aROB\u53ea\u6709\u4e24\u4e2a\u72b6\u6001\uff0cSquashing(\u56e0\u4e3aSquashing\u64cd\u4f5c\u6709\u5bbd\u5ea6\u9650\u5236\uff0c\u53ef\u80fd\u4e0d\u80fd\u5728\u4e00\u4e2atick\u5b8c\u6210)\u548crunning\u3002\u901a\u5e38\u6765\u8bb2\uff0c\u5f53ROB\u7684\u6307\u4ee4list\u6ee1\u4e86\u4e4b\u540e\uff0c\u4e5f\u5e94\u8be5\u6709\u4e00\u4e2a\u72b6\u6001\uff0c\u4e0d\u8fc7\uff0cROB\u4ee3\u7801\u7684\u5b9e\u73b0\u5c06\u8fd9\u4e2a\u72b6\u6001\u7684\u5224\u65ad\u4ea4\u7ed9\u4e86ROB\u4f7f\u7528\u8005\u3002Rename\u6a21\u5757\u9700\u8981\u901a\u8fc7maxEntries\u548cthreadEntries\u6765\u5224\u5b9aROB\u662f\u5426\u5df2\u7ecf\u6ee1\u4e86\uff0c\u4e0d\u80fd\u518d\u586b\u5165\u3002\u8fd9\u770b\u8d77\u6765\u6709\u4e9b\u5947\u602a\u3002 \u5b9e\u8d28\u4e0a\uff0cROB\u6a21\u5757\u5728gem5\u4e2d\u7684\u5b9e\u73b0\u5c31\u662f\u5bf9\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u7684\u5c01\u88c5","title":"ROB\u4ee3\u7801\u7ed3\u6784\u5206\u6790"},{"location":"simulator/gem5.html#rob_2","text":"ROB\u7684\u4ee3\u7801\u5b9e\u8d28\u662f\u53cc\u5411\u94fe\u8868\uff0c\u5bf9\u4e8eROB\u7684\u64cd\u4f5c\uff0c\u5168\u90e8\u5728Commit\u4ee3\u7801\u4e2d\u5b8c\u6210\uff0c\u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u5b83\u786c\u4ef6\u5bf9ROB\u7684\u64cd\u4f5c\u90fd\u662f\u5728Commit\u9636\u6bb5\u5b8c\u6210\u7684\u3002\u8f6f\u4ef6\u53ea\u9700\u8981\u4fdd\u8bc1\u6700\u7ec8\u6548\u679c\u57fa\u672c\u4e00\u81f4\u5373\u53ef\u3002 \u8fd9\u662f\u6a21\u62df\u5668\u5b9e\u73b0\u548c\u771f\u5b9e\u786c\u4ef6\u903b\u8f91\u7684\u533a\u522b","title":"ROB\u64cd\u4f5c"},{"location":"simulator/gem5.html#rob_3","text":"\u5982\u4e0a\u56fe\u6240\u793a\uff0cROB\u6307\u4ee4\u6765\u6e90\u4e3aRename\u4e4b\u540e\u7684\u6307\u4ee4\uff0cgem5\u4e2d\u5b9e\u73b0\u4e3a\u4e00\u4e2a\u540d\u4e3aRenameQueue\u7684TimeBuffer\uff0c\u5e76\u4e14\u9ed8\u8ba4Rename\u7684\u4e0b\u4e00\u4e2atick\u5373\u53ef\u62ff\u5230Rename\u540e\u7684\u6307\u4ee4\u3002 RenameQueue\u4e2d\u7684\u6307\u4ee4\u5728Commit->tick()\u4e2d\u52a0\u5165\u5230ROB(\u901a\u8fc7insertInst()\u52a0\u5165\u5230InstList\u7684\u5c3e\u90e8)\uff0c\u8fd9\u867d\u7136\u4e0d\u7b26\u5408\u786c\u4ef6\u903b\u8f91\uff0c\u4f46Rename\u6a21\u5757\u64cd\u4f5cRenameQueue\u662f\u901a\u8fc7wire(0), Commit\u6a21\u5757\u64cd\u4f5cRenameQueue\u662f\u901a\u8fc7Wire(-1)\u3002\u6240\u4ee5\uff0c\u5728Commit\u4e2d\u8c03\u7528insertInst()\u5e76\u4e0d\u5f71\u54cd\u6d41\u6c34\u7ebf\u6548\u679c\uff0c\u8fd9\u4e5f\u7b80\u5316\u4e86\u8f6f\u4ef6\u7684\u5b9e\u73b0\u3002\u8fd9\u662f\u6307\u4ee4\u52a0\u5165ROB\u7684\u552f\u4e00\u65b9\u5f0f\u3002","title":"\u6307\u4ee4\u52a0\u5165ROB"},{"location":"simulator/gem5.html#rob_4","text":"\u5728Commit\u9636\u6bb5\uff0c\u901a\u8fc7\u8c03\u7528retireHead()\u6765\u5c06\u6307\u4ee4\u79fb\u51faROB\u5e76\u5b8c\u6210\u63d0\u4ea4\u3002\u5f53\u7136\uff0c\u662f\u5426\u80fd\u591f\u79fb\u51fa\u7684\u5224\u65ad\u903b\u8f91\u662f\u5728Commit\u4e2d\u505a\u7684\uff0c\u5177\u4f53\u903b\u8f91\u53ef\u4ee5\u5728Commit\u7ae0\u8282\u4e2d\u770b\u5230\u3002\u8fd9\u662f\u6307\u4ee4\u79fb\u51faROB\u7684\u552f\u4e00\u65b9\u5f0f\u3002","title":"\u6307\u4ee4\u79fb\u51faROB"},{"location":"simulator/gem5.html#squash","text":"\u5982\u679c\u53d1\u751f\u4e2d\u65ad\u3001\u5f02\u5e38\u6216\u5206\u652f\u9884\u6d4b\u5931\u8d25\uff0c\u90a3\u4e48ROB\u4e2d\u7684\u8bb0\u5f55\u5f53\u7136\u4e5f\u9700\u8981\u88ab\u5237\u65b0\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u88ab\u6210\u4e3asquash\uff08\u8fd9\u4f3c\u4e4e\u662f\u4e00\u4e2a\u4e1a\u754c\u901a\u7528\u672f\u8bed\uff09\u3002ROB\u63d0\u4f9b\u4e86squash()\u65b9\u6cd5\u6765\u652f\u6301\u8fd9\u4e2a\u529f\u80fd\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f**squash()\u64cd\u4f5c\u53ea\u662f\u5bf9\u6307\u4ee4\u72b6\u6001\u8fdb\u884c\u6807\u8bb0\uff0c\u5c06\u6307\u4ee4\u6807\u8bb0\u4e3aSquashed\u4e14CanCommit\u3002\u771f\u6b63\u7684\u79fb\u51fa\u64cd\u4f5c\u4ecd\u7136\u662fCommit\u9636\u6bb5\u901a\u8fc7\u5224\u65ad\u6307\u4ee4\u72b6\u6001\u8c03\u7528retireHead()\u6765\u5b8c\u6210\u7684**\u3002 \u7531\u4e8e\u6ca1\u6709\u57fa\u4e8e\u771f\u5b9e\u786c\u4ef6\u505a\u5206\u6790\uff0c\u4e2a\u4eba\u8ba4\u4e3a\uff0c\u8fd9\u53ea\u662f\u8f6f\u4ef6\u7684\u4e00\u4e2a\u8ba8\u5de7\u7684\u64cd\u4f5c\u3002\u56e0\u4e3a\u5728\u4ee3\u7801\u7684\u5b9e\u73b0\u903b\u8f91\u4e2d\uff0c\u6807\u8bb0\u6307\u4ee4\u72b6\u6001\u65f6\uff0c\u7531\u4e8e\u6709squash\u5bbd\u5ea6\u7684\u9650\u5236\uff0c\u53ef\u80fd\u5728\u4e00\u4e2atick\u65e0\u6cd5\u5b8c\u6210squash\u64cd\u4f5c\uff0c\u5c31\u9700\u8981\u6807\u8bb0ROB\u4e3asquashing\u72b6\u6001\uff0c\u5f53ROB\u5904\u4e8esquashing\u72b6\u6001\u65f6\uff0c\u56fe\u4e2d\u6307\u4ee49\u662f\u4e0d\u4f1a\u88abcommit\u7684\u3002 squash()\u7684\u53c2\u6570squash_num\u5b9e\u9645\u4e0a\u662f\u6307\u4ee4\u7684\u4e00\u4e2a\u552f\u4e00\u7684seqNum(gem5\u4e2d\u901a\u8fc7\u4e00\u4e2a\u987a\u5e8f\u589e\u957f\u7684uint64\u53d8\u91cf\u4e3a\u6bcf\u4e00\u6761\u6307\u4ee4\u5206\u914d\u4e00\u4e2a\u53f7\u7801\uff0c\u771f\u5b9e\u786c\u4ef6\u4e5f\u6709\u7c7b\u4f3c\u5b9e\u73b0\u5417\uff1f)\u8fd9\u4e2aseqNum\u88ab\u8bb0\u5f55\u5728squashedSeqNum\u4e2d\uff0c\u8fd9\u4e2anumber\u6807\u8bc6\u7684\u6307\u4ee4\u53ca\u5176\u4e4b\u540e\u52a0\u5165ROB\u7684\u6307\u4ee4\u90fd\u4f1a\u88ab\u6807\u8bb0\u4e3aSquash/CanCommit\u3002 template < class Impl > void ROB < Impl >:: squash ( InstSeqNum squash_num , ThreadID tid ) { doneSquashing [ tid ] = false ; squashedSeqNum [ tid ] = squash_num ; if ( ! instList [ tid ]. empty ()) { InstIt tail_thread = instList [ tid ]. end (); tail_thread -- ; squashIt [ tid ] = tail_thread ; doSquash ( tid ); } } template < class Impl > void ROB < Impl >:: doSquash ( ThreadID tid ) { for ( int numSquashed = 0 ; numSquashed < squashWidth && squashIt [ tid ] != instList [ tid ]. end () && ( * squashIt [ tid ]) -> seqNum > squashedSeqNum [ tid ]; ++ numSquashed ) { ( * squashIt [ tid ]) -> setSquashed (); ( * squashIt [ tid ]) -> setCanCommit (); } } \u5982\u4e0a\u4e3a\u622a\u53d6squash()\u5904\u7406\uff0c\u8fd9\u91ccsquashIt\u7528\u6765\u63a7\u5236squash\u8fdb\u5ea6\u3002\u90a3\u4e48\u8fd9\u91cc\u6709\u4e00\u4e2a\u7591\u95ee\uff0c\u5f53\u5df2\u7ecf\u6709\u4e00\u4e2asquash\u53d1\u751f\uff0c\u4f46\u5728\u4e00\u4e2atick\u4e2dsquash\u6ca1\u6709\u5b8c\u6210\uff0c\u90a3\u4e48\u4e0b\u4e00\u4e2atick\u4f1a\u8c03\u7528doSquash\u7ee7\u7eed\u8fdb\u884csquash\u64cd\u4f5c\u3002\u6b64\u65f6\u5982\u679c\u6709\u65b0\u7684squash()\u8c03\u7528\uff0c\u90a3\u4e48\u53ef\u80fd\u4e0a\u4e00\u4e2atick\u4e2d\u7684squash\u64cd\u4f5c\u5c31\u6d6a\u8d39\u6389\u4e86\uff0cdoSquash\u53c8\u4f1a\u91cd\u65b0\u8fdb\u884csquash\u6807\u8bb0\u3002\u53ef\u80fd\u4f1a\u5bfc\u81f4squash\u7684\u5468\u671f\u6570\u4e0e\u5b9e\u9645\u786c\u4ef6\u4e0d\u4e00\u81f4\uff0c\u4f46\u771f\u662f\u786c\u4ef6\u7684\u5904\u7406\u903b\u8f91\u662f\u600e\u6837\u7684\u5462\uff1f","title":"squash\u7684\u64cd\u4f5c"},{"location":"simulator/gem5.html#o3cpucommit","text":"\u5f53\u5df2\u7ecf\u4e86\u89e3TimeBuffer\u673a\u5236\uff0cRename\u673a\u5236\u53caROB\u673a\u5236\u4e4b\u540e\uff0c\u518d\u6765\u7406\u89e3O3CPU\u7684Commit\u9636\u6bb5\u5c31\u76f8\u5bf9\u5bb9\u6613\u4e86 Commit\u9636\u6bb5\u4e3b\u8981\u662f\u5b8c\u6210\u53ef\u4ee5\u63d0\u4ea4\u7684\u6307\u4ee4\uff0c\u4ece\u7a0b\u5e8f\u5458\u7684\u89d2\u5ea6\uff0c\u8fd9\u8868\u793a\u6307\u4ee4\u6267\u884c\u7684\u6700\u7ec8\u5b8c\u6210\u3002","title":"O3CPU\u7684Commit\u9636\u6bb5\u5206\u6790"},{"location":"simulator/gem5.html#commit","text":"commit\u5185\u90e8\u4ecd\u7136\u652f\u6301\u591a\u786c\u4ef6\u7ebf\u7a0b\u3002\u6bcf\u4e2a\u786c\u4ef6\u7ebf\u7a0b\u90fd\u6709\u81ea\u5df1\u7684\u4e00\u4e9b\u8fd0\u884c\u72b6\u6001\u4e0e\u8ba1\u6570\uff0ccommit\u6839\u636e\u786c\u4ef6\u7ebf\u7a0b\u8c03\u5ea6\u7b56\u7565\u6765\u6267\u884c\u76f8\u5e94\u7684\u786c\u4ef6\u7ebf\u7a0b\uff0c\u5f53\u7136\uff0c\u5f88\u591a\u65f6\u5019\uff0c\u786c\u4ef6\u7ebf\u7a0b\u662f\u5e76\u884c\u8fd0\u884c\u7684\u3002 \u5bf9\u4e8e\u5355\u4e2a\u786c\u4ef6\u7ebf\u7a0b\u6765\u8bb2\uff0c\u5b83\u5305\u542b\u4e86trapSquash\uff0ctcSquash\u8fd9\u6837\u7684squash\u6807\u8bb0\uff0c\u5f53\u6536\u5230\u8fd9\u6837\u7684\u4fe1\u53f7\u4e4b\u540e\uff0c\u4f1a\u9a71\u52a8ROB\u53ca\u81ea\u8eab\u8fdb\u884csquashing\u64cd\u4f5c\u3002 commitStatus\u6807\u8bc6\u4e86\u8be5\u7ebf\u7a0b\u5728commit\u9636\u6bb5\u7684\u72b6\u6001\uff0c\u540c\u65f6\u901a\u8fc7pc\u6765\u4fdd\u5b58\u53ca\u4f20\u9012\u7cfb\u7edfpc\u72b6\u6001\u3002\u540c\u65f6\u81ea\u8eab\u8fd8\u62e5\u6709status\u53canextstatus\u72b6\u6001\uff0c\u7528\u6765\u6807\u8bc6\u81ea\u8eab\u8fd0\u884c\u72b6\u6001\u3002 youngestSeqNum\u8ba1\u6570\u548clastCommitedSeqNum\u8ba1\u6570\u7528\u6765\u8f85\u52a9\u63a7\u5236ROB\u7684squash\u64cd\u4f5c\u53ca\u63d0\u4ea4\u64cd\u4f5c\u3002 \u540c\u65f6\uff0c\u8fd8\u6709\u5927\u91cf\u7684\u7edf\u8ba1\u4fe1\u606f\u7528\u6765\u67e5\u770b\u53cadebug\u3002 commit\u9700\u8981iew\u9636\u6bb5\u7684\u4e00\u4e9b\u72b6\u6001\uff0c\u901a\u8fc7\u4fdd\u7559\u7684iewStage\u6307\u9488\u5b9e\u73b0\u3002\u591a\u4e2aTimeBuffer\u7684wire\u63a5\u53e3\uff0c\u7528\u6765\u5b9e\u73b0\u4e0e\u5176\u4ed6\u6a21\u5757\u7684\u6570\u636e\u4ea4\u4e92\u3002 ROB\u6a21\u5757\u5728commit\u7684\u63a7\u5236\u4e0b\u8fd0\u884c\u3002","title":"commit\u9636\u6bb5\u6570\u636e\u7ed3\u6784"},{"location":"simulator/gem5.html#commit_1","text":"\u4e3a\u4e86\u66f4\u65b9\u4fbf\u6392\u7248\uff0c\u5c06commit\u7684\u6d41\u7a0b\u5206\u4e3a\u4e86\u4e24\u5927\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u5305\u542b\u5bf9squash\u72b6\u6001\u7684\u5904\u7406\uff0c\u53e6\u4e00\u90e8\u5206\u5305\u542b\u6307\u4ee4\u6dfb\u52a0\u5230ROB\u4ee5\u53ca\u6307\u4ee4\u7684\u63d0\u4ea4 \u63a5\u4e0a \u4e0a\u9762\u7684\u6d41\u7a0b\u56fe\u6d89\u53ca\u4e86commit\u9636\u6bb5\u7684\u7edd\u5927\u90e8\u5206\u5185\u5bb9\uff0c\u4f46\u5bf9\u4e8e\u4e00\u4e9b\u5fae\u5c0f\u7ec6\u8282\uff0c\u6bd4\u5982\u5bf9\u4e8estore\u6307\u4ee4\u7684\u7279\u6b8a\u5904\u7406\uff0c\u786c\u4ef6\u7ebf\u7a0b\u7684\u8c03\u5ea6\u7b56\u7565\u7b49\uff0c\u6ca1\u6709\u6d89\u53ca\u3002 store\u6307\u4ee4\u7684\u63d0\u4ea4\u5b9e\u9645\u4e0a\u5728LSQ\u4e2d\u5b9e\u73b0\uff0c\u8fd9\u4f1a\u5728IEW\u53caLSQ\u7684\u7ae0\u8282\u4e2d\u8be6\u7ec6\u63cf\u8ff0\u3002 \u53e6\u5916\uff0c\u5173\u4e8etrap\u7684\u5904\u7406\uff0c\u662f\u6bd4\u8f83\u503c\u5f97\u5173\u6ce8\u7684\u7ec6\u8282\u3002\u4e3a\u4e86\u4fdd\u6301\u4e3b\u4f53\u6d41\u7a0b\u56fe\u80fd\u591f\u6e05\u6670\u6613\u61c2\uff0c\u8fd9\u90e8\u5206\u7ec6\u8282\u6ca1\u6709\u6dfb\u52a0\u5230\u6d41\u7a0b\u56fe\u4e2d\uff0c\u8fd9\u90e8\u5206\u66f4\u5408\u9002\u5728\u4e86\u89e3 \u4e3b\u4f53\u6d41\u7a0b\u4e4b\u540e\u5355\u72ec\u7406\u89e3\u3002\u4e0b\u9762\u7684\u51e0\u4e2a\u5f15\u7528\u7684\u4ee3\u7801\u90fd\u505a\u4e86\u6216\u591a\u6216\u5c11\u7684\u7279\u6b8a\u5904\u7406\uff0c\u5305\u542b\u4e00\u4e9b\u5bf9\u7406\u89e3\u6d41\u7a0b\u66f4\u65b9\u4fbf\u7684\u5c55\u5f00\u3001\u62fc\u51d1\u548c\u5220\u9664\u5904\u7406\u3002\u4f46\u5b8c\u5168\u53ef\u4ee5\u5728\u6e90\u4ee3\u7801\u4e2d\u627e\u5230\u4e0b\u9762\u7684\u5bf9\u5e94\u3002 DefaultCommit < Impl >:: commit () { if ( cpu -> checkInterrupts ( cpu -> tcBase ( 0 ))) { if ( commitStatus [ 0 ] == TrapPending || interrupt || trapSquash [ 0 ] || tcSquash [ 0 ] || drainImminent ) return ; interrupt = cpu -> getInterrupts (); if ( interrupt != NoFault ) toIEW -> commitInfo [ 0 ]. interruptPending = true ; } } } \u6216\u8bb8\u5c06\u5224\u65ad\u4e2d\u65ad\u72b6\u6001\u653e\u5728commit\u51fd\u6570\u4e2d\u8ba9\u4eba\u8d39\u89e3\uff0c\u4f46\u4e0d\u5fc5\u8f83\u771f\u3002interrupt \u4fdd\u5b58\u4e86\u66f4\u65b0\u7684\u4e2d\u65ad\u72b6\u6001\u3002\u4e2d\u65ad\u72b6\u6001\u7684\u7c7b\u578b\u662fFault\uff0c\u8fd9\u4e5f\u80fd\u89e3\u91ca\u7684\u901a\uff0c\u6216\u8bb8\u4ed6\u4eec\u8ba4\u4e3a\u4e2d\u65ad\u53ef\u4ee5\u7406\u89e3\u6210\u6b63\u5e38\u6d41\u7a0b\u4e2d\u7684\u9519\u8bef\u3002\u5982\u679c\u6709\u4e2d\u65ad\uff0c\u90a3\u4e48\u5c31\u4f1a\u901a\u8fc7TimeStruct\u4f20\u9012\u51fa\u53bb\u3002 DefaultCommit < Impl >:: getInsts () { if ( ! inst -> isSquashed () && commitStatus [ tid ] != ROBSquashing && commitStatus [ tid ] != TrapPending ) { rob -> insertInst ( inst ); } } \u4e00\u4f46\u4ea7\u751fTrapPending\u72b6\u6001\uff0c\u4fbf\u4e0d\u4f1a\u518d\u5411ROB\u4e2d\u6dfb\u52a0\u6307\u4ee4\uff0c\u8fd9\u662f\u6302\u8d77\u7684\u542b\u4e49\u4e4b\u4e00\u3002\u90a3\u4e48\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a\u7531interrupt\u5230TrapPending\u8f6c\u6362,\u770b\u4e0b\u9762\u7684\u4ee3\u7801\uff0c \u5728\u63d0\u4ea4\u6307\u4ee4\u7684\u5904\u7406\u4e2d\uff0c\u9996\u5148\u5bf9interrupt\u8fdb\u884c\u4e86\u5904\u7406\uff0c\u8f6c\u6362\u6210\u4e86TrapPending\uff0c\u5e76\u4e14\u53d1\u9001\u4e86\u4e00\u4e2a\u5305\u542b trapSquash[tid] = true\u7684schedule, \u5ef6\u8fdf\u4e3atrapLatency\uff0c\u8fd9\u4e5f\u5c31\u610f\u5473\u7740\u5728\u5ef6\u8fdftrapLatency\u4e2acycle\u540e\uff0ctrapSquash\u88ab\u7f6e\u4f4d\uff0c\u6b64\u65f6\u518d\u7ed3\u5408\u524d\u9762\u6d41\u7a0b\u56fe\u4e2d\u8bb2\u8ff0\u7684squash\u5904\u7406\u6d41\u7a0b\uff0c\u5c31\u80fd\u5b8c\u5168\u7406\u89e3\u5bf9\u4e8etrap\u662f\u5982\u4f55\u8fdb\u884c\u5904\u7406\u7684\u3002\u5f53\u7136\uff0c\u63d0\u4ea4\u6307\u4ee4\u7684\u64cd\u4f5c\u4e5f\u4f1a\u88ab\u6302\u8d77\uff0c\u8fd9\u4e5f\u662f\u6302\u8d77\u7684\u542b\u4e49\u4e4b\u4e00\u3002\u5f53\u7136\uff0c\u8fd9\u90e8\u5206\u4ee3\u7801\u662f\u5728\u53ef\u63d0\u4ea4\u7ebf\u7a0b\u7684\u67e5\u627e\u4e2d\u5904\u7406\u7684\u3002 DefaultCommit < Impl >:: commitInsts () { // \u53d1\u9001trap if ( interrupt != NoFault ) { commitStatus [ 0 ] = TrapPending ; EventFunctionWrapper * trap = new EventFunctionWrapper ( [ this , tid ]{ trapSquash [ tid ] = true ; }, \"Trap\" , true , Event :: CPU_Tick_Pri ); cpu -> schedule ( trap , cpu -> clockEdge ( trapLatency )); } // \u6302\u8d77\u4e5f\u4e0d\u4f1a\u518d\u63d0\u4ea4\u6307\u4ee4 if ( ! rob -> isEmpty ( tid ) && ( commitStatus [ tid ] == Running || commitStatus [ tid ] == Idle || commitStatus [ tid ] == FetchTrapPending )) { bool commit_success = commitHead ( head_inst , num_committed ); } } tcSquash\u4e5f\u662f\u7c7b\u4f3c\u7684\u5904\u7406\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002","title":"commit\u9636\u6bb5\u6d41\u7a0b"},{"location":"simulator/gem5_introduction.html","text":"Gem5 Introduction \u00b6 gem5_introduction_part1 gem5_introduction_part2 gem5_introduction_part3","title":"Gem5 Introduction"},{"location":"simulator/gem5_introduction.html#gem5-introduction","text":"gem5_introduction_part1 gem5_introduction_part2 gem5_introduction_part3","title":"Gem5 Introduction"},{"location":"simulator/gem5_isa.html","text":"Gem5\u6307\u4ee4\u96c6\u6846\u67b6\u89e3\u6790 \u00b6 Gem5\u5b9e\u73b0\u4e86\u4e00\u5957\u6307\u4ee4\u96c6\u63cf\u8ff0\u8bed\u8a00\uff0c\u6216\u8005\u79f0\u4e3a\u6307\u4ee4\u96c6\u63cf\u8ff0\u6846\u67b6\u3002\u4e3b\u8981\u662f\u501f\u52a9ply(python\u7248\u672c\u7684lex,yacc)\u6765\u5b9e\u73b0\u7684\u8bed\u6cd5\u5b9a\u4e49\u548c\u5206\u6790 lex(Lexical Analyzar), \u8bcd\u6cd5\u5206\u6790\u751f\u6210\u5668 yacc(Yet Another Compiler Compiler), \u7f16\u8bd1\u5668\u4ee3\u7801\u751f\u6210\u5668 \u5b9e\u9645\u4e0a\u770b\u8d77\u6765\uff0c.isa\u7684\u8bed\u6cd5\u6709\u70b9\u513f\u50cfpython,\u751a\u81f3\u53ef\u4ee5\u7406\u89e3\u4e3apython \u6587\u4ef6\u7ed3\u6784 \u00b6 src/arch/isa_parser \u76ee\u5f55\u4e0b\u5b58\u653e\u4e86\u4e0e\u67b6\u6784\u76f8\u5173\u7684\u7f16\u8bd1\u5668\u6587\u4ef6 build_tools \u76ee\u5f55\u4e0b\u6709\u4e00\u4e9b\u7f16\u8bd1\u5668\u57fa\u7840\u6587\u4ef6 src/arch/arm \u4e0b\u9762\u653e\u4e86\u6307\u4ee4\u96c6\u63cf\u8ff0\u6e90\u6587\u4ef6\uff0c\u4e0d\u540c\u7684\u67b6\u6784\u76ee\u5f55\u4e0d\u540c \u7f16\u8bd1\u539f\u7406 \u00b6 Lex \u00b6 \u80fd\u6839\u636e\u5b9a\u4e49\u7684\u6b63\u5219\u8868\u8fbe\uff0c\u5c06\u6587\u672c\u4e2d\u7684\u8bcd\u8fdb\u884c\u5339\u914d\uff0c\u751f\u6210\u4e00\u4e2a\u4e2aToken\u5b9e\u4f8b\u3002\u4ee5isa_parser.py\u4e2d\u4e3e\u4f8b\uff0c\u5177\u4f53\u4f7f\u7528\u65f6\u9700\u8981\u6709\u5982\u4e0b\u5b9a\u4e49 \u9996\u5148\u8981\u5b9a\u4e49token\u7684\u5173\u952e\u8bcd,\u8fd9\u76f8\u5f53\u4e8etoken\u7c7b\u578b\u7684\u58f0\u660e # List of tokens. The lex module requires this. tokens = reserved + ( # identifier 'ID' , # integer literal 'INTLIT' , # string literal 'STRLIT' , # code literal 'CODELIT' , # ( ) [ ] { } < > , ; . : :: * 'LPAREN' , 'RPAREN' , 'LBRACKET' , 'RBRACKET' , 'LBRACE' , 'RBRACE' , 'LESS' , 'GREATER' , 'EQUALS' , 'COMMA' , 'SEMI' , 'DOT' , 'COLON' , 'DBLCOLON' , 'ASTERISK' , # C preprocessor directives 'CPPDIRECTIVE' ) \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u5b9a\u4e49\u5339\u914d\u89c4\u5219\u3002\u5339\u914d\u89c4\u5219\u6709\u4e24\u79cd\u5b9a\u4e49\u65b9\u6cd5\uff0c\u5b57\u7b26\u4e32\u548c\u51fd\u6570\u3002 \u51fd\u6570\u4f18\u5148\u7ea7\u9ad8\u4e8e\u5b57\u7b26\u4e32\uff0c\u800c\u4e14\u6309\u7167\u51fd\u6570\u7f16\u5199\u7684\u4f18\u5148\u7ea7\u6765\u5b9a\u4e49\u5339\u914d\u7684\u4f18\u5148\u7ea7\uff0c\u5b57\u7b26\u4e32\u5219\u6309\u7167\u5339\u914d\u957f\u5ea6\u6765\u5b9a\u4e49\u4f18\u5148\u7ea7\uff0c\u957f\u7684\u4f18\u5148 \u603b\u7ed3\u8d77\u6765\uff0c\u6709\u5982\u4e0b\u4f18\u5148\u7ea7\u89c4\u5219\uff1a \u5982\u679c\u7528\u5b57\u7b26\u4e32\u65b9\u5f0f\u5b9a\u4e49\uff0c\u90a3\u4e48\u7528\u4e8e\u5339\u914d\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u8d8a\u957f\u5219\u5339\u914d\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff1b \u5982\u679c\u7528\u51fd\u6570\u65b9\u5f0f\u5b9a\u4e49\uff0c\u51fd\u6570\u5728\u4ee3\u7801\u4e2d\u51fa\u73b0\u7684\u4f4d\u7f6e\u8d8a\u9760\u524d\u5219\u5339\u914d\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff1b \u7528\u51fd\u6570\u65b9\u5f0f\u5b9a\u4e49\u7684\u5339\u914d\u89c4\u5219\u4f18\u5148\u7ea7\u6c38\u8fdc\u9ad8\u4e8e\u7528\u5b57\u7b26\u4e32\u5b9a\u4e49\u7684 LPAREN\u662f\u901a\u8fc7\u5b57\u7b26\u4e32\u7684\u65b9\u5f0f\u5b9a\u4e49\u7684\uff0cINTLIT\u662f\u901a\u8fc7\u51fd\u6570\u5b9a\u4e49\u7684\uff0c\u65e0\u8bba\u662f\u5b57\u7b26\u4e32\u8fd8\u662f\u51fd\u6570\uff0c\u90fd\u5e94\u8be5\u52a0\u4e0a\u524d\u7f00 t_ \u51fd\u6570\u8fd8\u5e94\u8be5\u663e\u5f0f\u7684return t # Regular expressions for token matching t_LPAREN = r '\\(' t_RPAREN = r '\\)' t_LBRACKET = r '\\[' def t_ID ( self , t ): r '[A-Za-z_]\\w*' t . type = self . reserved_map . get ( t . value , 'ID' ) return t # Integer literal def t_INTLIT ( self , t ): r '-?(0x[\\da-fA-F]+)|\\d+' try : t . value = int ( t . value , 0 ) except ValueError : error ( t . lexer . lineno , 'Integer value \" %s \" too large' % t . value ) t . value = 0 return t yacc \u00b6","title":"Gem5\u6307\u4ee4\u96c6\u6846\u67b6\u89e3\u6790"},{"location":"simulator/gem5_isa.html#gem5","text":"Gem5\u5b9e\u73b0\u4e86\u4e00\u5957\u6307\u4ee4\u96c6\u63cf\u8ff0\u8bed\u8a00\uff0c\u6216\u8005\u79f0\u4e3a\u6307\u4ee4\u96c6\u63cf\u8ff0\u6846\u67b6\u3002\u4e3b\u8981\u662f\u501f\u52a9ply(python\u7248\u672c\u7684lex,yacc)\u6765\u5b9e\u73b0\u7684\u8bed\u6cd5\u5b9a\u4e49\u548c\u5206\u6790 lex(Lexical Analyzar), \u8bcd\u6cd5\u5206\u6790\u751f\u6210\u5668 yacc(Yet Another Compiler Compiler), \u7f16\u8bd1\u5668\u4ee3\u7801\u751f\u6210\u5668 \u5b9e\u9645\u4e0a\u770b\u8d77\u6765\uff0c.isa\u7684\u8bed\u6cd5\u6709\u70b9\u513f\u50cfpython,\u751a\u81f3\u53ef\u4ee5\u7406\u89e3\u4e3apython","title":"Gem5\u6307\u4ee4\u96c6\u6846\u67b6\u89e3\u6790"},{"location":"simulator/gem5_isa.html#_1","text":"src/arch/isa_parser \u76ee\u5f55\u4e0b\u5b58\u653e\u4e86\u4e0e\u67b6\u6784\u76f8\u5173\u7684\u7f16\u8bd1\u5668\u6587\u4ef6 build_tools \u76ee\u5f55\u4e0b\u6709\u4e00\u4e9b\u7f16\u8bd1\u5668\u57fa\u7840\u6587\u4ef6 src/arch/arm \u4e0b\u9762\u653e\u4e86\u6307\u4ee4\u96c6\u63cf\u8ff0\u6e90\u6587\u4ef6\uff0c\u4e0d\u540c\u7684\u67b6\u6784\u76ee\u5f55\u4e0d\u540c","title":"\u6587\u4ef6\u7ed3\u6784"},{"location":"simulator/gem5_isa.html#_2","text":"","title":"\u7f16\u8bd1\u539f\u7406"},{"location":"simulator/gem5_isa.html#lex","text":"\u80fd\u6839\u636e\u5b9a\u4e49\u7684\u6b63\u5219\u8868\u8fbe\uff0c\u5c06\u6587\u672c\u4e2d\u7684\u8bcd\u8fdb\u884c\u5339\u914d\uff0c\u751f\u6210\u4e00\u4e2a\u4e2aToken\u5b9e\u4f8b\u3002\u4ee5isa_parser.py\u4e2d\u4e3e\u4f8b\uff0c\u5177\u4f53\u4f7f\u7528\u65f6\u9700\u8981\u6709\u5982\u4e0b\u5b9a\u4e49 \u9996\u5148\u8981\u5b9a\u4e49token\u7684\u5173\u952e\u8bcd,\u8fd9\u76f8\u5f53\u4e8etoken\u7c7b\u578b\u7684\u58f0\u660e # List of tokens. The lex module requires this. tokens = reserved + ( # identifier 'ID' , # integer literal 'INTLIT' , # string literal 'STRLIT' , # code literal 'CODELIT' , # ( ) [ ] { } < > , ; . : :: * 'LPAREN' , 'RPAREN' , 'LBRACKET' , 'RBRACKET' , 'LBRACE' , 'RBRACE' , 'LESS' , 'GREATER' , 'EQUALS' , 'COMMA' , 'SEMI' , 'DOT' , 'COLON' , 'DBLCOLON' , 'ASTERISK' , # C preprocessor directives 'CPPDIRECTIVE' ) \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u5b9a\u4e49\u5339\u914d\u89c4\u5219\u3002\u5339\u914d\u89c4\u5219\u6709\u4e24\u79cd\u5b9a\u4e49\u65b9\u6cd5\uff0c\u5b57\u7b26\u4e32\u548c\u51fd\u6570\u3002 \u51fd\u6570\u4f18\u5148\u7ea7\u9ad8\u4e8e\u5b57\u7b26\u4e32\uff0c\u800c\u4e14\u6309\u7167\u51fd\u6570\u7f16\u5199\u7684\u4f18\u5148\u7ea7\u6765\u5b9a\u4e49\u5339\u914d\u7684\u4f18\u5148\u7ea7\uff0c\u5b57\u7b26\u4e32\u5219\u6309\u7167\u5339\u914d\u957f\u5ea6\u6765\u5b9a\u4e49\u4f18\u5148\u7ea7\uff0c\u957f\u7684\u4f18\u5148 \u603b\u7ed3\u8d77\u6765\uff0c\u6709\u5982\u4e0b\u4f18\u5148\u7ea7\u89c4\u5219\uff1a \u5982\u679c\u7528\u5b57\u7b26\u4e32\u65b9\u5f0f\u5b9a\u4e49\uff0c\u90a3\u4e48\u7528\u4e8e\u5339\u914d\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u8d8a\u957f\u5219\u5339\u914d\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff1b \u5982\u679c\u7528\u51fd\u6570\u65b9\u5f0f\u5b9a\u4e49\uff0c\u51fd\u6570\u5728\u4ee3\u7801\u4e2d\u51fa\u73b0\u7684\u4f4d\u7f6e\u8d8a\u9760\u524d\u5219\u5339\u914d\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff1b \u7528\u51fd\u6570\u65b9\u5f0f\u5b9a\u4e49\u7684\u5339\u914d\u89c4\u5219\u4f18\u5148\u7ea7\u6c38\u8fdc\u9ad8\u4e8e\u7528\u5b57\u7b26\u4e32\u5b9a\u4e49\u7684 LPAREN\u662f\u901a\u8fc7\u5b57\u7b26\u4e32\u7684\u65b9\u5f0f\u5b9a\u4e49\u7684\uff0cINTLIT\u662f\u901a\u8fc7\u51fd\u6570\u5b9a\u4e49\u7684\uff0c\u65e0\u8bba\u662f\u5b57\u7b26\u4e32\u8fd8\u662f\u51fd\u6570\uff0c\u90fd\u5e94\u8be5\u52a0\u4e0a\u524d\u7f00 t_ \u51fd\u6570\u8fd8\u5e94\u8be5\u663e\u5f0f\u7684return t # Regular expressions for token matching t_LPAREN = r '\\(' t_RPAREN = r '\\)' t_LBRACKET = r '\\[' def t_ID ( self , t ): r '[A-Za-z_]\\w*' t . type = self . reserved_map . get ( t . value , 'ID' ) return t # Integer literal def t_INTLIT ( self , t ): r '-?(0x[\\da-fA-F]+)|\\d+' try : t . value = int ( t . value , 0 ) except ValueError : error ( t . lexer . lineno , 'Integer value \" %s \" too large' % t . value ) t . value = 0 return t","title":"Lex"},{"location":"simulator/gem5_isa.html#yacc","text":"","title":"yacc"},{"location":"simulator/gem5_o3cpu.html","text":"O3CPU \u4ee3\u7801\u5206\u6790 \u00b6 \u8fd0\u884c\u8bf4\u660e \u00b6 build Gem5 \u00b6 can use a -j param to enable compile in parallel scons build/ARM/gem5.debug -j4 run Gem5 \u00b6 chlxy@LAPTOP-SMLPH2RJ:~/workspace/gem5$ ./build/ARM/gem5.debug --debug-flags = Exec configs/example/fs.py --cpu-type = ArmO3CPU --caches --machine-type = VExpress_GEM5_V2 -n1 --bare-metal --kernel ../tests/aarch64/dhrystone/dhrystone.elf stop Gem5 \u00b6 dhrystone will write a EOT to inform system to stop at the end of the test #define TUBE_ADDRESS ((volatile uint32_t *) 0x13000000u) static void benchmark_finish () { \u200b\u200b char p [] = \"** TEST PASSED OK ** \\n \" ; char * c = p ; while ( * c ) { \u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b * TUBE_ADDRESS = * c ; c ++ ; } \u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b * TUBE_ADDRESS = 0x4 ; } so, we set UART0.pio=0x13000000 , and enable EOT Pl011 ( pio_addr = 0x13000000 , interrupt = ArmSPI ( num = 37 ), end_on_eot = True ) we use VExpress_GEM5_V2 platform for our soc structure, you can find memorymap and other information in file src/dev/arm/RealView.py fetch \u00b6 fetch a cache line and not hit \u00b6 \u6ca1\u6709\u5f00\u542fmmu\uff0c\u56e0\u6b64\u5f53\u62cd\u5c31\u80fd\u5f97\u5230\u7269\u7406\u5730\u5740\uff0c\u7136\u540e\u67e5cache\u662f\u5426\u547d\u4e2d 1000: system.cpu.fetch: [tid:0] Attempting to translate and read instruction, starting at PC (0=>0x4).(0=>1). 1000: system.cpu.fetch: [tid:0] Fetching cache line 0 for addr 0 cache\u672a\u547d\u4e2d\uff0c\u5411\u4e0b\u4e00\u7ea7\u7f13\u5b58\u53d6\u6307\u4ee4\uff0c\u572843000\u4e2atick\uff0ccache miss\u7684\u6570\u636e\u56de\u586b\uff0c\u518d\u8fc73\u4e2acycle,\u6570\u636e\u88ab\u76f4\u63a5\u653e\u5728fetchbuffer\u4e2d\u3002 43000: system.cpu.icache: recvTimingResp: Handling response ReadResp [0:f] (s) IF UC 44500: system.cpu.icache_port: Fetch unit received timing macroOp \u00b6 macroOp fetch\u8fc7\u7a0b\u6709\u5982\u4e0b\u7279\u70b9\uff1a \u4e0d\u652f\u6301\u8de8cacheLine \u4e0d\u652f\u6301fetchbuffer\u62fc\u63a5 \u5f53\u62cd\u5904\u7406\u5b8cfetchbuffer\uff0c\u53ef\u4ee5\u76f4\u63a5\u53d1\u8d77\u65b0\u7684cache\u8bf7\u6c42 \u5b58\u5728\u4e00\u4e2amicroOp\u7684\u7f13\u5b58 \u4ece\u6307\u4ee4\u6d41log\u4e2d\u53ef\u4ee5\u770b\u5230macro\u6307\u4ee4 stp\u88ab\u62c6\u5206\u6210\u4e86\u4e09\u6761micro\u6307\u4ee4 2457000: system.cpu: A0 T0 : 0x6220 @_malloc_r+640 : adrp x1, #73728 : IntAlu : D=0x0000000000018000 FetchSeq=1364 CPSeq=902 flags=(IsInteger) 2457000: system.cpu: A0 T0 : 0x6224 @_malloc_r+644 : stp 2457000: system.cpu: A0 T0 : 0x6224 @_malloc_r+644. 0 : addxi_uop ureg0, sp, #80 : IntAlu : D=0x0000000000014f30 FetchSeq=1365 CPSeq=903 flags=(IsInteger|IsMicroop|IsDelayedCommit|IsFirstMicroop) 2457000: system.cpu: A0 T0 : 0x6224 @_malloc_r+644. 1 : strxi_uop x27, [ureg0] : MemWrite : D=0x0000000000000000 A=0x14f30 FetchSeq=1366 CPSeq=904 flags=(IsInteger|IsStore|IsMicroop|IsDelayedCommit) 2457500: system.cpu: A0 T0 : 0x6224 @_malloc_r+644. 2 : strxi_uop x28, [ureg0, #8] : MemWrite : D=0x0000000000000000 A=0x14f38 FetchSeq=1367 CPSeq=905 flags=(IsInteger|IsStore|IsMicroop|IsLastMicroop) 2457500: system.cpu: A0 T0 : 0x6228 @_malloc_r+648 : adrp x27, #61440 : IntAlu : D=0x0000000000015000 FetchSeq=1368 CPSeq=906 flags=(IsInteger) 2457500: system.cpu: A0 T0 : 0x622c @_malloc_r+652 : ldr x1, [x1, #2432] : MemRead : D=0x0000000000000000 A=0x18980 FetchSeq=1369 CPSeq=907 flags=(IsInteger|IsLoad) 2458000: system.cpu: A0 T0 : 0x6230 @_malloc_r+656 : movz x3, #4127, #0 : IntAlu : D=0x000000000000101f FetchSeq=1370 CPSeq=908 flags=(IsInteger) 2458000: system.cpu: A0 T0 : 0x6234 @_malloc_r+660 : ldr x2, [x27, #3936] : MemRead : D=0xffffffffffffffff A=0x15f60 FetchSeq=1371 CPSeq=909 flags=(IsInteger|IsLoad) \u6267\u884clog\u4e2d,\u53ef\u4ee5\u770b\u5230\u57282457000\u4e2atick\u65f6\uff0cfetch\u4e00\u5171\u5904\u7406\u4e86\u4e09\u6761\u6307\u4ee4\uff0cadrp\u548cstp\u7684\u524d\u4e24\u6761micro\u6307\u4ee4 2457000: system.cpu.fetch: [tid:0] Instruction PC (0x6220=>0x6224).(0=>1) created [sn:1364]. 2457000: system.cpu.fetch: [tid:0] Instruction is: adrp x1, #73728 2457000: system.cpu.decoder: Decode: Decoded stp instruction: 0x4a90573fb 2457000: system.cpu.fetch: [tid:0] Instruction PC (0x6224=>0x6228).(0=>1) created [sn:1365]. 2457000: system.cpu.fetch: [tid:0] Instruction is: addxi_uop ureg0, sp, #80 2457000: system.cpu.fetch: [tid:0] Instruction PC (0x6224=>0x6228).(1=>2) created [sn:1366]. 2457000: system.cpu.fetch: [tid:0] Instruction is: strxi_uop x27, [ureg0] 2457000: system.cpu.fetch: [tid:0] Done fetching, reached fetch bandwidth for this cycle. 2457000: system.cpu.fetch: [tid:0] [sn:1364] Sending instruction to decode from fetch queue. Fetch queue size: 3. 2457000: system.cpu.fetch: [tid:0] [sn:1365] Sending instruction to decode from fetch queue. Fetch queue size: 2. 2457000: system.cpu.fetch: [tid:0] [sn:1366] Sending instruction to decode from fetch queue. Fetch queue size: 1. \u5728\u4e0b\u4e00\u4e2acycle,\u9664\u4e86stp\u5269\u4f59\u7684\u4e00\u6761\u6307\u4ee4\uff0c\u8fd8\u53ef\u4ee5\u5904\u7406\u989d\u5916\u7684\u4e24\u6761\u6307\u4ee4 2457500: system.cpu.fetch: [tid:0] Instruction PC (0x6224=>0x6228).(2=>3) created [sn:1367]. 2457500: system.cpu.fetch: [tid:0] Instruction is: strxi_uop x28, [ureg0, #8] 2457500: system.cpu.fetch: [tid:0] Instruction PC (0x6228=>0x622c).(0=>1) created [sn:1368]. 2457500: system.cpu.fetch: [tid:0] Instruction is: adrp x27, #61440 2457500: system.cpu.fetch: [tid:0] Instruction PC (0x622c=>0x6230).(0=>1) created [sn:1369]. 2457500: system.cpu.fetch: [tid:0] Instruction is: ldr x1, [x1, #2432] 2457500: system.cpu.fetch: [tid:0] Done fetching, reached fetch bandwidth for this cycle. \u5206\u652f\u9884\u6d4b \u00b6 \u5982\u679c\u5206\u652f\u9884\u6d4b\u8df3\u8f6c\uff0c\u5c31\u4f1a\u7ed3\u675f\u5f53\u524dfetch\u64cd\u4f5c\uff0c\u5206\u652f\u6307\u4ee4\u4e4b\u524d\u7684\u6307\u4ee4\u53ef\u4ee5\u7ee7\u7eed\u8fdb\u5165fetchQueue\u3002\u540c\u65f6\u53ef\u4ee5\u76f4\u63a5\u53d1\u8d77\u65b0\u7684cache\u8bf7\u6c42 2600000: system.cpu.fetch: [tid:0] Instruction PC (0x1514=>0x1518).(0=>1) created [sn:1413]. 2600000: system.cpu.fetch: [tid:0] Instruction is: ret 2600000: system.cpu.fetch: [tid:0] [sn:1413] Branch at PC 0x1514 predicted to be taken to (0x6260=>0x6264).(0=>1) 2600000: system.cpu.fetch: [tid:0] Done fetching, predicted branch instruction encountered. 2600000: system.cpu.fetch: [tid:0] Issuing a pipelined I-cache access, starting at PC (0x6260=>0x6264).(0=>1). 2600000: system.cpu.fetch: [tid:0] Fetching cache line 0x6260 for addr 0x6260 2600000: system.cpu.fetch: [tid:0] [sn:1412] Sending instruction to decode from fetch queue. Fetch queue size: 2. 2600000: system.cpu.fetch: [tid:0] [sn:1413] Sending instruction to decode from fetch queue. Fetch queue size: 1. quiesce \u7c7b\u6307\u4ee4\u7684\u5904\u7406 \u00b6 quiesce\u7c7b\u6307\u4ee4\uff1a wfe wfet(Gem5 \u4e0d\u652f\u6301) wfi wfit(Gem5 \u4e0d\u652f\u6301) \u4ee5wfi\u6307\u4ee4\u4e3e\u4f8b 1376000: system.cpu.fetch: [tid:0] Instruction PC (0x1c4=>0x1c8).(0=>1) created [sn:119]. 1376000: system.cpu.fetch: [tid:0] Instruction is: wfi 1376000: system.cpu.fetch: Quiesce instruction encountered, halting fetch! // \u4e0b\u4e00\u62cd\uff0cfetch \u5f00\u59cb\u5904\u4e8epending\u7684\u72b6\u6001 1376500: system.cpu.fetch: There are no more threads available to fetch from. 1376500: system.cpu.fetch: [tid:0] Fetch is waiting for a pending quiesce instruction! // \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cwfi\u6307\u4ee4\u5904\u4e8e\u5206\u652f\u9519\u8bef\u7684\u8def\u5f84\u4e0a\uff0c\u6700\u7ec8\u6267\u884csquash\u6062\u590d\u4e86\u8fd0\u884c 1380000: system.cpu.commit: [tid:0] Squashing due to branch mispred PC:0x1c0 [sn:118] 1380000: system.cpu.commit: [tid:0] Redirecting to PC (0x1cc=>0x1d0).(0=>1) 1380500: system.cpu.fetch: [tid:0] Squashing instructions due to squash from commit. 1380500: system.cpu.fetch: [tid:0] Squash from commit. 1381000: system.cpu.fetch: [tid:0] Done squashing, switching to running. 1381000: system.cpu.fetch: Running stage. squash \u00b6 squash \u4e3b\u8981\u6267\u884c\u5982\u4e0b\u64cd\u4f5c \u5c06PC\u8bbe\u7f6e\u4e3aCommit stage \u8fd4\u56de\u7684PC \u590d\u4f4d\u4e0efetch buffer\u76f8\u5173\u7684reg \u5982\u679c\u6709\u8fdb\u884c\u4e2d\u7684icache\u8bf7\u6c42\uff0c\u6807\u8bb0\u8bf7\u6c42\u65e0\u6548 \u5982\u679c\u6709\u8fdb\u884c\u4e2d\u7684itlb\u8bf7\u6c42\uff0c\u6807\u8bb0\u8bf7\u6c42\u65e0\u6548 \u5982\u679c\u6709\u8fdb\u884c\u4e2d\u7684icache retry\u8bf7\u6c42\uff0c\u6807\u8bb0\u8bf7\u6c42\u65e0\u6548 \u6e05\u7a7afetchQueue stall \u00b6 \u6765\u81ea\u4e8edecode\u7684stall\u4e0d\u4f1a\u5f71\u54cdfetch\u5c06\u6307\u4ee4\u5b58\u5165fetchQueue\uff0c\u4f1astall\u4ecefetchQueue\u5411decode\u53d1\u9001\u6307\u4ee4\u3002 decode \u00b6 decode squash \u00b6 \u5206\u652f\u9884\u6d4b\u9519\u8bef\u5f15\u8d77\u7684squash \u00b6 decode stage \u4f1a\u5224\u65ad\u975e\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\u662f\u5426\u5206\u652f\u9884\u6d4b\u9519\u8bef\u3002 \u5982\u679c\u53d1\u73b0\u975e\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\u5206\u652f\u9884\u6d4b\u9519\u8bef\uff0c\u90a3\u4e48\u4f1a\u5728\u5f53\u62cd\u6267\u884csquash\u64cd\u4f5c\uff0c\u5047\u8bbedecode\u5bbd\u5ea6\u662f4\uff0c\u8df3\u8f6c\u6307\u4ee4\u662f\u7b2c\u4e09\u6761\uff0c\u90a3\u4e48\u524d\u4e09\u6761\u6307\u4ee4\u90fd\u80fd\u6b63\u5e38decode\uff0c\u5e76\u4e14\u53d1\u9001\u5230rename\uff0c\u6b64\u65f6decode\u8f6c\u5165squashing\u7684\u72b6\u6001\uff0c\u6e05\u9664\u6389skidbuffer\u4e2d\u7684\u6240\u6709\u6307\u4ee4\u3002 \u5982\u679c\u4e0b\u4e00\u4e2acycle\u6ca1\u6709\u6536\u5230squash\u4fe1\u53f7\u6216\u8005stall\u4fe1\u53f7\uff0cdecode\u5c06\u518d\u6b21\u8f6c\u4e3arunning\u72b6\u6001\u3002 \u5f53\u524dcycle fetch\u5230\u4e86 b 0x1570 \u6307\u4ee4\uff0c\u5e76\u4e14\u7ed9\u901a\u8fc7\u5206\u652f\u9884\u6d4b\u5668\u83b7\u53d6\u4e86\u4e0d\u8df3\u8f6c\u7684\u5206\u652f\u4fe1\u606f\uff0c\u4e0b\u4e00\u6761\u6307\u4ee4\u5730\u5740\u4e3a 0x1d4 668000: system.cpu.fetch: [tid:0] Instruction PC (0x1cc=>0x1d0).(0=>1) created [sn:126]. 668000: system.cpu.fetch: [tid:0] Instruction is: b 0x1570 668000: system.cpu.fetch: [tid:0] [sn:126] Branch at PC 0x1cc predicted to be not taken 668000: system.cpu.fetch: [tid:0] [sn:126] Branch at PC 0x1cc predicted to go to (0x1d0=>0x1d4).(0=>1) // 126 ~ 133 \u7684\u6307\u4ee4\u88ab\u4f20\u5165\u5230fetchqueue 668000: system.cpu.fetch: [tid:0] [sn:126] Sending instruction to decode from fetch queue. Fetch queue size: 8. 668000: system.cpu.fetch: [tid:0] [sn:127] Sending instruction to decode from fetch queue. Fetch queue size: 7. 668000: system.cpu.fetch: [tid:0] [sn:128] Sending instruction to decode from fetch queue. Fetch queue size: 6. 668000: system.cpu.fetch: [tid:0] [sn:129] Sending instruction to decode from fetch queue. Fetch queue size: 5. 668000: system.cpu.fetch: [tid:0] [sn:130] Sending instruction to decode from fetch queue. Fetch queue size: 4. 668000: system.cpu.fetch: [tid:0] [sn:131] Sending instruction to decode from fetch queue. Fetch queue size: 3. 668000: system.cpu.fetch: [tid:0] [sn:132] Sending instruction to decode from fetch queue. Fetch queue size: 2. 668000: system.cpu.fetch: [tid:0] [sn:133] Sending instruction to decode from fetch queue. Fetch queue size: 1. \u4e0b\u4e00\u4e2acycle\uff0c decode\u89e3\u6790\u51fa\u6765\u7684\u6307\u4ee4\u8df3\u8f6c\u5730\u5740\u4e3a0x1570\uff0c\u56e0\u6b64\u4ea7\u751fsquash\u4fe1\u53f7 \u7531\u4e8e\u662f8\u6761\u6307\u4ee4\u4e2d\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u51fa\u73b0\u4e86\u5206\u652f\u9884\u6d4b\u9519\u8bef\uff0c\u56e0\u6b64\u6ca1\u6709\u4efb\u4f55\u6307\u4ee4\u80fd\u591f\u4f20\u7ed9rename 668500: system.cpu.decode: [tid:0] Processing instruction [sn:126] with PC (0x1cc=>0x1d0).(0=>1) 668500: system.cpu.decode: [tid:0] [sn:126] Squashing due to incorrect branch prediction detected at decode. 668500: system.cpu.decode: [tid:0] [sn:126] Updating predictions: Wrong predicted target: (0x1d0=>0x1d4).(0=>1) PredPC: (0x1570=>0x1574).(0=>1) 668500: system.cpu.rename: [tid:0] Not blocked, so attempting to run stage. 668500: system.cpu.rename: [tid:0] Nothing to do, breaking out early. decode\u9700\u8981\u901a\u77e5fetch\u8fdb\u884csquash\u64cd\u4f5c,\u540c\u65f6\u5c06fetch\u4e0edecode\u4e4b\u95f4\u9501\u5b58\u7684\u6307\u4ee4\u4e5f\u6e05\u9664\u6389\u3002\u540c\u65f6\uff0c\u5982\u679cdecode\u5f53\u524d\u5904\u4e8eblocked\u6216\u8005unblocking\u72b6\u6001\uff0c\u9700\u8981\u901a\u77e5fetch\u6b64\u72b6\u6001\u89e3\u9664\u3002 squash \u4ee3\u7801\u903b\u8f91 \u00b6 fetch.cc \u6dfb\u52a0\u6307\u4ee4\u5230\u5168\u5c40\u6307\u4ee4\u5217\u8868 // Add instruction to the CPU's list of instructions. instruction->setInstListIt(cpu->addInst(instruction)); decode.cc \u5728squash\u65f6\uff0c\u7ed9\u8981squash\u7684\u6307\u4ee4\u6dfb\u52a0 squashed \u6807\u8bb0 // Squash instructions up until this one cpu->removeInstsUntil(squash_seq_num, tid); \u5728decode\u6307\u4ee4\u65f6\uff0c\u5982\u679c\u6807\u8bb0\u4e86squashed\uff0c \u76f4\u63a5\u8df3\u8fc7 if (inst->isSquashed()) {\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b DPRINTF(Decode, \"[tid:%i] Instruction %i with PC %s is \" \"squashed, skipping.\\n\", tid, inst->seqNum, inst->pcState()); ++stats.squashedInsts; --insts_available; continue; }\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b \u6240\u4ee5\uff0cflash \u4e2d\u95f4\u8fc7\u7a0b\u7684\u6307\u4ee4\u6ca1\u6709\u989d\u5916\u7684\u8017\u8d39cycle \u6765\u81ea\u4e8ecommit\u7684squash \u00b6 \u5982\u679cdecode\u5904\u4e8eblock\u6216\u8005unbloking\u72b6\u6001\uff0c\u901a\u77e5fetch\u8be5\u72b6\u6001\u5df2\u89e3\u9664\u3002\u56e0\u4e3a\u4f1a\u5237\u6389skidbuffer \u6e05\u9664\u6389skidbuffer\uff0c\u548c\u6765\u81ea\u4e8efetch\u7684\u6307\u4ee4 fetch \u5230 decode\u4e4b\u95f4on the fly\u7684\u6307\u4ee4\u5728fetch\u7684squash\u5904\u7406\u4e2d\u5b8c\u6210 fetch.cc // Tell the CPU to remove any instructions that are not in the ROB. cpu->removeInstsNotInROB(tid); decode stall \u00b6 \u5982\u679crename block, \u4f1a\u53d1\u9001stall\u4fe1\u53f7\u7ed9decode, decode\u6536\u5230stall\u4fe1\u53f7\uff0c\u8f6c\u4e3ablock\u72b6\u6001\uff0c\u5f53\u62cd\u4e0d\u6267\u884c\u4efb\u4f55decode\u64cd\u4f5c\u3002\u5e76\u4e14\u4f1a\u5c06stall\u4fe1\u53f7\u4f20\u9012\u7ed9fetch\u3002 rename\u89e3\u9664block\u540e\uff0cdecode\u8fdb\u5165unblocking\u72b6\u6001\uff0c\u4eceskidbuffer\u4e2d\u53d6\u6307\u4ee4\uff0cskidbuffer\u7a7a\u4e86\u4e4b\u540e\uff0c\u8f6c\u5165running\u72b6\u6001 unblocking \u00b6 \u5982\u679c\u6536\u5230rename\u53d1\u9001\u7684\u89e3\u9664stall\u4fe1\u53f7\uff0crename\u8fdb\u5165unblocking\u72b6\u6001\uff0c\u4eceskidbuffer\u4e2d\u53d6\u6307\u4ee4\u8fdb\u884cdecode\u3002 \u5f53skidbuffer\u4e2d\u6ca1\u6709\u6307\u4ee4\u65f6\uff0c\u53d1\u9001\u89e3\u9664stall\u4fe1\u53f7\u7ed9fetch stage Rename \u00b6 rename squash \u00b6 Rename stage \u4f1a\u54cd\u5e94\u6765\u81ea\u4e8ecommit stage\u7684squash\u4fe1\u53f7\uff0c\u63a5\u6536\u5230squashing\u4fe1\u53f7\u65f6\uff0cRename\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c \u5982\u679c\u5f53\u524drename\u5904\u4e8eblocked\u6216\u8005unblocking\u7684\u72b6\u6001\uff0c\u53d1\u9001unblock\u4fe1\u53f7\u7ed9decode stage \u5982\u679c\u5f53\u524drename\u5904\u4e8eserializeStall\u72b6\u6001\uff0c\u68c0\u67e5squash\u7684\u6307\u4ee4\u662f\u4e0d\u662f\u66f4older,\u5982\u679c\u662f\uff0c\u6e05\u9664\u6389serialize\u72b6\u6001\uff0c\u53d1\u9001unblock\u4fe1\u53f7\u7ed9decode\uff1b\u5982\u679c\u4e0d\u662f\uff0c\u4fdd\u7559serializeStall\u6807\u8bb0,\u4e0b\u4e00\u62cd\u6062\u590dserializeStall \u6e05\u9664\u6389\u6765\u81ea\u4e8edecode\u7684\u6307\u4ee4 \u6e05\u9664\u6389skidbuffer\u4e2d\u7684\u6307\u4ee4 \u4e00\u6b21\u6027\u6062\u590dRAT(\u4ece\u65f6\u5e8f\u884c\u4e3a\u4e0a\u6765\u770b\u4ecd\u7136\u662fROB walk\u7684\u5f62\u5f0f) rename\u7684squash\u8fc7\u7a0b\u4e0eiew\u548ccommit\u6709\u8f83\u5927\u5173\u8054\uff0c\u5177\u4f53\u884c\u4e3a\u53ef\u4ee5\u7ed3\u5408commit stage\u7684squash\u8fc7\u7a0b\u8fdb\u884c\u5206\u6790 rename stall \u00b6 rename stall \u7684\u6e90\u6bd4\u8f83\u591a\uff0c\u6709\u5982\u4e0b\u51e0\u4e2a REW stage block(dispatch) no free ROB entries no free LSU entries no free IQ entries no free Phy Regs in freelist serializeStall \u5f53\u53d1\u751fstall\u65f6\uff0crename stage\u6709\u5982\u4e0b\u884c\u4e3a \u5c06decode\u4f20\u5165\u7684\u6307\u4ee4\u5b58\u5165skidbuffer \u5982\u679c\u5f53\u524d\u4e0d\u5728blocked\u6216unblocking\u72b6\u6001\uff0c\u5411decode\u53d1\u9001stall\u4fe1\u53f7 \u5982\u679c\u4e0d\u5904\u4e8eserializeStall \u72b6\u6001\uff0c\u6807\u8bb0\u81ea\u5df1\u4e3ablocked\u72b6\u6001 rename unblocking \u00b6 \u5982\u679c\u6536\u5230\u4e86dispatch \u53d1\u9001\u7684\u89e3\u9664stall\u4fe1\u53f7\uff0crename\u53ef\u80fd\u8fdb\u5165unblocking\u72b6\u6001\uff0c\u4eceskidbuffer\u4e2d\u53d6\u6307\u4ee4\u8fdb\u884crename\u64cd\u4f5c\u3002\u5f53skidbuffer\u4e2d\u6ca1\u6709\u6307\u4ee4\u65f6\uff0c\u53d1\u9001\u89e3\u9664stall\u4fe1\u53f7\u7ed9decode stage serilizeBefore and serilizeAfter \u00b6 serializeBefore makes the instruction wait in rename until the ROB is empty. serializeAfter marks the next instruction as serializeBefore serializeBefore\u7c7b\u6307\u4ee4\uff1a mrs fetch\u5230mrs\u6307\u4ee4\uff0c\u5206\u914did=52 561000: system.cpu.fetch: [tid:0] Instruction PC (0xcc=>0xd0).(0=>1) created [sn:52]. 561000: system.cpu.fetch: [tid:0] Instruction is: mrs x0, id_aa64pfr0_el1 \u56e0\u4e3a fetch -> decode \u7684\u5ef6\u8fdf\u4e3a3\uff0cdecode -> rename \u5ef6\u8fdf\u4e3a2\uff0c \u6240\u4ee55\u4e2acycle\u4e4b\u540e\uff0crename\u6536\u5230mrs\u6307\u4ee4 \u5224\u65ad\u6307\u4ee4\u643a\u5e26IsSerializeBefore\u6807\u8bb0,\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c \u4e0d\u5bf9\u8be5\u6307\u4ee4\u8fdb\u884crename\u64cd\u4f5c\u3002 \u72b6\u6001\u673a\u8f6c\u4e3aSerializeStall\u72b6\u6001 \u8be5\u6307\u4ee4\u4e4b\u524d\u7684\u6307\u4ee4\u53d1\u9001\u7ed9dispatch \u5269\u4f59\u7684\u6307\u4ee4\u5b58\u5165skidbuffer \u53cd\u538bstall\u4fe1\u53f7\u7ed9decode 563500: system.cpu.rename: [tid:0] Processing instruction [sn:52] with PC (0xcc=>0xd0).(0=>1). 563500: system.cpu.rename: Serialize before instruction encountered. 563500: system.cpu.rename: [tid:0] Blocking. \u63a5\u4e0b\u6765\uff0c\u4f1a\u4e00\u76f4\u7b49\u5f85ROB empty(\u5b9e\u9645\u4e0a\u8981no on the fly && ROB empty) 564500: system.cpu.rename: [tid:0] Stall: Serialize stall and ROB is not empty. 564500: system.cpu.rename: [tid:0] Blocking. \u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e\uff0c\u6307\u4ee451\u63d0\u4ea4\u4e86\uff0c\u610f\u5473\u7740mrs\u6307\u4ee4\u4e4b\u524d\u7684\u6307\u4ee4\u90fd\u63d0\u4ea4\u4e86\uff0c\u56e0\u6b64ROB\u6b64\u65f6\u5904\u4e8eempty\u72b6\u6001 567000: system.cpu.commit: [tid:0] [sn:51] Committing instruction with PC (0xc8=>0xcc).(0=>1) 567000: system.cpu.rob: [tid:0] Retiring head instruction, instruction PC (0xc8=>0xcc).(0=>1), [sn:51] \u6240\u4ee5\u4e0b\u4e00\u4e2acycle,rename\u8fdb\u5165unblocking\u72b6\u6001\uff0c\u7ee7\u7eed\u8fdb\u884crename 567500: system.cpu.rename: [tid:0] Done with serialize stall, switching to unblocking. 567500: system.cpu.rename: [tid:0] Trying to unblock. 567500: system.cpu.rename: [tid:0] Processing instruction [52] with PC (0xcc=>0xd0).(0=>1). serilizeAfter\u7c7b\u6307\u4ee4\uff1a rfe(return from exception) only arch32 support? svc(supervisor call to EL1) hvc(supervisor call to EL2) smc(secure monitor call to EL3) hlt(halt) eret(exception return) msr(move to system registers) wfe(wait for exception) wfi(wait for interrupt) mcr( arch32 only?) setend(arch32 only?) dsb(Data Synchronization Barrier) cps(change pe status) arch32 only? brk(breakpoint) msr\u6307\u4ee4\u4e3e\u4f8b\uff0cid=43,\u5b83\u7684\u4e0b\u4e00\u6761\u662fadr\u6307\u4ee4\uff0cid=44 474500: system.cpu.fetch: [tid:0] Instruction PC (0xa8=>0xac).(0=>1) created [sn:43]. 474500: system.cpu.fetch: [tid:0] Instruction is: msr vbar_el3, x1 475000: system.cpu.fetch: [tid:0] Instruction PC (0xac=>0xb0).(0=>1) created [sn:44]. 475000: system.cpu.fetch: [tid:0] Instruction is: adr x1, #85840 \u82e5\u5e72cycle\u4e4b\u540e\uff0crename\u5904\u7406msr\u6307\u4ee4\uff0c\u8bc6\u522b\u4e3aserializeAfter\u6307\u4ee4,43\u53f7\u6307\u4ee4\u6b63\u5e38\u8fdb\u884crename\uff0c\u5e76\u4e14\u53d1\u7ed9IEW, \u540e\u9762\u768444\u53f7\u6307\u4ee4 480500: system.cpu.rename: [tid:0] Processing instruction [sn:43] with PC (0xa8=>0xac).(0=>1). 480500: system.cpu.rename: Serialize after instruction encountered. 480500: system.cpu.rename: [tid:0] [sn:43] Adding instruction to history buffer (size=3). 480500: system.cpu.rename: [tid:0] Sending instructions to IEW. 480500: system.cpu.rename: [tid:0] Removing [sn:44] PC:(0xac=>0xb0).(0=>1) from rename skidBuffer 480500: system.cpu.rename: [tid:0] Processing instruction [sn:44] with PC (0xac=>0xb0).(0=>1). 480500: system.cpu.rename: Serialize before instruction encountered. 480500: system.cpu.rename: [tid:0] Blocking. 43\u53f7\u6307\u4ee4\u63d0\u4ea4\u4e86 485500: system.cpu.commit: [tid:0] [sn:43] Committing instruction with PC (0xa8=>0xac).(0=>1) 485500: system.cpu.rob: [tid:0] Retiring head instruction, instruction PC (0xa8=>0xac).(0=>1), [sn:43] \u4e0b\u4e00\u4e2acycle,44\u53f7\u6307\u4ee4\u53ef\u4ee5\u7ee7\u7eedrename 486000: system.cpu.rename: [tid:0] Done with serialize stall, switching to unblocking. 486000: system.cpu.rename: [tid:0] Trying to unblock. 486000: system.cpu.rename: [tid:0] Processing instruction [44] with PC (0xac=>0xb0).(0=>1). 486000: system.cpu.rename: [tid:0] Instruction must be processed by rename. Adding to front of list. 486000: system.cpu.rename: [tid:0] Sending instructions to IEW. 486000: system.cpu.rename: [tid:0] Processing instruction [sn:44] with PC (0xac=>0xb0).(0=>1). IEW \u00b6 IEW stage \u6df7\u5408\u4e86dispatch,issue,execute,writeback\u7684\u64cd\u4f5c\u3002\u5b83\u662f\u591a\u4e2astage\u5408\u5e76\u5728\u4e86\u4e00\u8d77\u3002 dispath\u5b9e\u73b0\u4e86\u5c06rename\u4e4b\u540e\u7684\u6307\u4ee4\u653e\u5230issueQueue\u4e2d\u7684\u64cd\u4f5c\uff0cO3CPU\u4e2d\uff0c\u5b9e\u73b0\u4e86InstQueue,LoadQueue,StoreQueue,\u4e09\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u8fd9\u4e0d\u610f\u5473\u7740\u5b83\u6240\u6a21\u62df\u7684\u786c\u4ef6\u53ea\u6709\u4e09\u4e2a\u961f\u5217\uff0c\u8981\u4ece\u6574\u4f53\u6548\u679c\u4e0a\u5206\u6790\u3002 \u4e00\u822c\u6d41\u7a0b \u00b6 \u4e3e\u4f8b\u4e00\u6bb5\u987a\u5e8f\u6307\u4ee4\uff0c\u53ef\u4ee5\u770b\u51fa\uff0c\u5bf9\u4e8e\u6267\u884c\u5468\u671f\u4e3a1\u7684\u6307\u4ee4\uff0c\u6307\u4ee4\u53ef\u4ee5\u80cc\u9760\u80cc\u6267\u884c\u3002\u5982\u679c\u6307\u4ee4\u6240\u6709\u7684\u6e90\u90fdready,\u90a3\u4e48\u5728dispath\u7684\u540c\u65f6\u5c31\u80fd\u8fdb\u884c\u4ef2\u88c1\u3002\u6267\u884c\u4e4b\u540e\u6709\u4e00\u4e2a\u53ef\u4ee5\u8ba4\u4e3a\u662fwriteback\u7684\u8fc7\u7a0b\uff0c\u5b9e\u9645\u4e0a\u7684\u5524\u9192\u64cd\u4f5c\u5728\u6267\u884c\u7684\u6700\u540e\u4e00\u4e2acycle\u5c31\u8fdb\u884c\u4e86 atomic\u7c7b\u6307\u4ee4 \u00b6 \u539f\u5b50\u6bd4\u8f83\u4ea4\u6362 \u00b6 CAS,CASA,CASL,CASAL CASB,CASAB,CASLB,CASALB CASH,CASAH,CASLH,CASALH CASP,CASPA,CASPL,CASPAL \u539f\u5b50\u4ea4\u6362 \u00b6 SWP, SWPA, SWPAL, SWPL SWPB, SWPAB, SWPALB, SWPLB, SWPH, SWPAH, SWPALH, SWPLH \u539f\u5b50\u7d2f\u52a0 \u00b6 LDADD,LDADDA,LDADDAL,LDADDL, LDADDH,LDADDAH,LDADDALH,LDADDLH, LDADDB,LDADDAB,LDADDALB,LDADDLB STADD, STADDL, STADDB, STADDLB, STADDH, STADDLH \u539f\u5b50\u4f4d\u64cd\u4f5c \u00b6 LDCLR,LDCLRA,LDCLRAL,LDCLRL LDCLRB, LDCLRAB, LDCLRALB, LDCLRLB, LDCLRH, LDCLRAH, LDCLRALH, LDCLRLH STCLR, STCLRL, STCLRB, STCLRLB, STCLRH, STCLRLH LDEOR, LDEORA, LDEORAL, LDEORL LDEORB, LDEORAB, LDEORALB, LDEORLB, LDEORH, LDEORAH, LDEORALH, LDEORLH STEOR, STEORL, STEORB, STEORLB, STEORH, STEORLH LDSET, LDSETA, LDSETAL, LDSETL LDSETB, LDSETAB, LDSETALB, LDSETLB, LDSETH, LDSETAH, LDSETALH, LDSETLH STSET, STSETL, STSETB, STSETLB, STSETH, STSETLH \u539f\u5b50\u6bd4\u8f83 \u00b6 LDSMAX, LDSMAXA, LDSMAXAL, LDSMAXL LDUMAX, LDUMAXA, LDUMAXAL, LDUMAXL LDSMAXB, LDSMAXAB, LDSMAXALB, LDSMAXLB LDUMAXB, LDUMAXAB, LDUMAXALB, LDUMAXLB LDSMAXH, LDSMAXAH, LDSMAXALH, LDSMAXLH LDUMAXH, LDUMAXAH, LDUMAXALH, LDUMAXLH STSMAX, STSMAXL, STSMAXB, STSMAXLB, STSMAXH, STSMAXLH STUMAX, STUMAXL, STUMAXB, STUMAXLB, STUMAXH, STUMAXLH LDSMIN, LDSMINA, LDSMINAL, LDSMINL LDUMIN, LDUMINA, LDUMINAL, LDUMINL LDSMINB, LDSMINAB, LDSMINALB, LDSMINLB LDUMINB, LDUMINAB, LDUMINALB, LDUMINLB LDSMINH, LDSMINAH, LDSMINALH, LDSMINLH LDUMINH, LDUMINAH, LDUMINALH, LDUMINLH STSMIN, STSMINL, STSMINB, STSMINLB, STSMINH, STSMINLH STUMIN, STUMINL, STUMINB, STUMINLB, STUMINH, STUMINLH iew squash \u00b6 todo... \u4e0d\u80fd\u5192\u9669\u6267\u884c\u7684\u6307\u4ee4 \u00b6 \u5bf9\u4e8e\u4e0d\u80fd\u5192\u9669\u6267\u884c\u7684\u6307\u4ee4\uff0c\u5728Gem5\u7684\u4e71\u5e8fCPU\u6a21\u578b\u4e2d\uff0c\u4f1a\u5c06\u8fd9\u7c7b\u6307\u4ee4\u5355\u72ec\u8bb0\u5f55\u5728\u4e00\u4e2a\u8868\u4e2d\uff0c\u5e76\u4e14\u8bbe\u7f6e\u8fd9\u7c7b\u6307\u4ee4\u4e3aCanCommit, \u8fd9\u6837\uff0c\u5728commit stage, \u5982\u679c\u5904\u7406\u5230\u8fd9\u6761\u6307\u4ee4\uff0c\u5c31\u4f1a\u53bb\u5c1d\u8bd5\u63d0\u4ea4\uff0c\u4f46\u5728\u63d0\u4ea4\u7684\u65f6\u5019\u4f1a\u53d1\u73b0\uff0c\u8fd9\u6761\u6307\u4ee4\u6ca1\u6709\u6267\u884c\uff0c\u7f3a\u5c11isExecuted\u6807\u8bb0\uff0c\u5c31\u80fd\u8bc6\u522b\u51fa\u8fd9\u662f\u4e0d\u80fd\u5192\u9669\u6267\u884c\u7684\u6307\u4ee4\uff0c\u4e00\u76f4\u7b49\u5230\u6240\u6709\u7684store\u6307\u4ee4\u90fd\u5df2\u7ecf\u5199\u56de\uff0ccommit\u4f1a\u4f20\u9012\u53ef\u4ee5\u6267\u884c\u4fe1\u53f7\u7ed9\u53d1\u5c04stage,\u8fd9\u6761\u6307\u4ee4\u624d\u4f1a\u53bb\u6267\u884c\u3002 \u4ee5\u4e0b\u7c7b\u522b\u7684\u6307\u4ee4\u90fd\u662f\u4e0d\u80fd\u5192\u9669\u6267\u884c\u7684\u6307\u4ee4 atomic StoreConditional stlxr, stlxrh, stlxrb, stxr, stxrb, stxrh, stlxp, stxp, strex, strexh, strexb, strexd, stlex, stlexb, stlexh, stlexd ReadBarrier stlr, stlrb, stlrh, hlt, dmb, dsb, ... WriteBarrier NonSpeculative sev, svc, hlt, smc, ... \u8fd9\u7c7b\u6307\u4ee4\u7684\u5904\u7406\u6d41\u7a0b\u5982\u4e0b\uff1a 46\u53f7\u6307\u4ee4\u662fldadd\u6307\u4ee4\uff0c\u662f\u4e00\u6761atomic\u6307\u4ee4\uff0c \u5b83\u524d\u9762\u768445\u53f7\u6307\u4ee4\u662f\u4e00\u6761store\u6307\u4ee4 517500: system.cpu.fetch: [tid:0] Instruction PC (0xb0=>0xb4).(0=>1) created [sn:45]. 517500: system.cpu.fetch: [tid:0] Instruction is: str x4, [x7] 517500: system.cpu.fetch: [tid:0] Instruction PC (0xb4=>0xb8).(0=>1) created [sn:46]. 517500: system.cpu.fetch: [tid:0] Instruction is: ldadd64 x8, x1, [x6] \u5728dispatch\u65f6\uff0c\u5c06\u8fd9\u6761\u6307\u4ee4\u989d\u5916\u7684\u8bb0\u5f55\u5728\u4e86\u4e00\u4e2a\u540d\u4e3anonSpecInsts\u7684\u7ed3\u6784\u4e2d\uff0c\u5e76\u4e14atomic\u6307\u4ee4\u4f1a\u5b58\u653e\u5728\u53d1\u5c04\u961f\u5217\u7684StoreQueue\u4e2d\uff0c\u5e76\u4e14\u8fd9\u6761\u6307\u4ee4\u4e5f\u88ab\u8bb0\u5f55\u5728\u4e86ROB\u4e2d\uff0c\u5e76\u4e14\u4e0d\u662fROB\u7684\u5934 520500: system.cpu.iew: [tid:0] Issue: Adding PC (0xb4=>0xb8).(0=>1) [sn:46] [tid:0] to IQ. 520500: system.cpu.iew: [tid:0] Issue: Memory instruction encountered, adding to LSQ. 520500: system.cpu.iew.lsq.thread0: Inserting store PC (0xb4=>0xb8).(0=>1), idx:3 [sn:46] 520500: system.cpu.iq: Adding non-speculative instruction [sn:46] PC (0xb4=>0xb8).(0=>1) to the IQ. 520500: memdepentry: Memory dependency entry created. memdep_count=2 (0xb4=>0xb8).(0=>1) 520500: system.cpu.memDep0: Inserting store/atomic PC (0xb4=>0xb8).(0=>1) [sn:46]. 520500: system.cpu.commit: [tid:0] [sn:46] Inserting PC (0xb4=>0xb8).(0=>1) into ROB. 520500: system.cpu.rob: Adding inst PC (0xb4=>0xb8).(0=>1) to the ROB. 520500: system.cpu.rob: [tid:0] Now has 2 instructions. 45\u53f7\u6307\u4ee4\u80fd\u591f\u63d0\u4ea4\uff0c\u8fd9\u65f6\u53d1\u73b0\u540e\u9762\u768446\u53f7\u6307\u4ee4\u662f\u4e00\u6761nonSpec\u6307\u4ee4\uff0c\u5b83\u8981\u7b49\u5230\u524d\u9762\u6240\u6709\u7684\u6307\u4ee4\u90fd\u63d0\u4ea4,\u5e76\u4e14\u6240\u6709\u7684store\u6307\u4ee4\u90fd\u5b8c\u6210\u5199\u56de\u3002\u56e0\u6b64commit\u4f1a\u4e00\u76f4\u5361\u5728\u8fd9\u6761\u6307\u4ee4 522500: system.cpu.commit: Trying to commit head instruction, [tid:0] [sn:45] 522500: system.cpu.commit: [tid:0] [sn:45] Committing instruction with PC (0xb0=>0xb4).(0=>1) 522500: system.cpu.rob: [tid:0] Retiring head instruction, instruction PC (0xb0=>0xb4).(0=>1), [sn:45] 522500: system.cpu: Removing committed instruction [tid:0] PC (0xb0=>0xb4).(0=>1) [sn:45] 522500: system.cpu.commit: Trying to commit head instruction, [tid:0] [sn:46] 522500: system.cpu.commit: Encountered a barrier or non-speculative instruction [tid:0] [sn:46] at the head of the ROB, PC (0xb4=>0xb8).(0=>1). 522500: system.cpu.commit: [tid:0] [sn:46] Waiting for all stores to writeback. 522500: system.cpu.commit: Unable to commit head instruction PC:(0xb4=>0xb8).(0=>1) [tid:0] [sn:46]. \u8fc7\u4e86\u5f88\u957f\u65f6\u95f4\uff0c\u524d\u9762\u7684store\u6307\u4ee4\u5199\u56de\u4e86\uff0c\u5728\u4e0b\u4e00\u4e2acycle,commit\u53d1\u9001\u4e00\u7ec4nonSpecSeqNum\u4fe1\u53f7\u7ed9\u53d1\u5c04\u961f\u5217\u4ef2\u88c1\u903b\u8f91 567000: system.cpu.commit: Trying to commit instructions in the ROB. 567000: system.cpu.commit: Trying to commit head instruction, [tid:0] [sn:46] 567000: system.cpu.commit: Encountered a barrier or non-speculative instruction [tid:0] [sn:46] at the head of the ROB, PC (0xb4=>0xb8).(0=>1). 567000: system.cpu.commit: Unable to commit head instruction PC:(0xb4=>0xb8).(0=>1) [tid:0] [sn:46]. 567000: system.cpu.commit: [tid:0] Can't commit, Instruction [sn:46] PC (0xb4=>0xb8).(0=>1) is head of ROB and not ready \u4e0b\u4e00\u4e2acycle, \u53d1\u5c04\u961f\u5217\u7684\u4ef2\u88c1\u903b\u8f91\u6536\u5230nonSpecSeqNum\u4fe1\u53f7\uff0c\u6807\u8bb046\u53f7\u6307\u4ee4ready 567500: system.cpu.iq: Marking nonspeculative instruction [sn:46] as ready to execute. 567500: system.cpu.memDep0: Marking non speculative instruction PC (0xb4=>0xb8).(0=>1) as ready [sn:46]. 567500: system.cpu.memDep0: Adding instruction [sn:46] to the ready list. 567500: system.cpu.iq: Instruction is ready to issue, putting it onto the ready list, PC (0xb4=>0xb8).(0=>1) opclass:48 [sn:46]. \u4e0b\u4e00\u4e2acycle, \u5c0646\u53f7\u6307\u4ee4\u53d1\u5c04\u51fa\u53bb 568000: system.cpu.iq: Thread 0: Issuing instruction PC (0xb4=>0xb8).(0=>1) [sn:46] 568000: system.cpu.memDep0: Issuing instruction PC 0xb4 [sn:46]. \u4e24\u4e2acycle\u4e4b\u540e,\u6307\u4ee4\u771f\u6b63\u7684\u6267\u884c 569000: system.cpu.iew: Execute: Processing PC (0xb4=>0xb8).(0=>1), [tid:0] [sn:46]. 569000: system.cpu.iew: Execute: Calculating address for memory reference. 569000: system.cpu.iew.lsq.thread0: Executing store PC (0xb4=>0xb8).(0=>1) [sn:46] 569000: global: RegFile: Access to int register 78, has data 0x140 569000: global: RegFile: Access to int register 50, has data 0 569000: global: RegFile: Access to int register 77, has data 0x2 569000: system.cpu.iew.lsq.thread0: Doing write to store idx 3, addr 0x140 | storeHead:3 [sn:46] 569000: system.cpu: Activity: 6 569000: system.cpu.iq: Attempting to schedule ready instructions from the IQ. 569000: system.cpu.iq: Not able to schedule any instructions. 569000: system.cpu.iew.lsq: [tid:0] Writing back stores. 1 stores available for Writeback. 569000: system.cpu.iew.lsq.thread0: D-Cache: Writing back store idx:4 PC:(0xb4=>0xb8).(0=>1) to Addr:0x140, data:0 [sn:46] 569000: system.cpu.iew.lsq.thread0: Memory request (pkt: SwapReq [140:147] (s) UC) from inst [sn:46] was sent (cache is blocked: 0, cache_got_blocked: 0) \u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e\uff0c\u6307\u4ee4\u6267\u884c\u5b8c\u6210,LSU\u6807\u8bb0\u6307\u4ee4\u5b8c\u6210 613000: system.cpu.iew.lsq.thread0: Completing store [sn:46], idx:3, store head idx:4 613000: system.cpu.iew: Sending instructions to commit, [sn:46] PC (0xb4=>0xb8).(0=>1). 613000: system.cpu.iq: Waking dependents of completed instruction. 613000: system.cpu.memDep0: Completed mem instruction PC (0xb4=>0xb8).(0=>1) [sn:46]. 613000: memdepentry: Memory dependency entry deleted. memdep_count=5 (0xb4=>0xb8).(0=>1) 613000: system.cpu.iq: Completing mem instruction PC: (0xb4=>0xb8).(0=>1) [sn:46] \u4e0b\u4e00\u4e2acycle,ROB\u6807\u8bb0\u6307\u4ee4\u53ef\u4ee5\u63d0\u4ea4 613500: system.cpu.commit: [tid:0] Marking PC (0xb4=>0xb8).(0=>1), [sn:46] ready within ROB. 613500: system.cpu.commit: [tid:0] Instruction [sn:46] PC (0xb4=>0xb8).(0=>1) is head of ROB and ready to commit \u4e0b\u4e00\u4e2acycle, \u6307\u4ee4retire 614000: system.cpu.commit: Trying to commit head instruction, [tid:0] [sn:46] 614000: system.cpu.commit: [tid:0] [sn:46] Committing instruction with PC (0xb4=>0xb8).(0=>1) 614000: system.cpu.rob: [tid:0] Retiring head instruction, instruction PC (0xb4=>0xb8).(0=>1), [sn:46] \u53d1\u5c04\u961f\u5217\u4ef2\u88c1\u903b\u8f91 \u00b6 \u4ece\u6574\u4f53\u903b\u8f91\u4e0a\u770b\uff0cGem5\u5b9e\u73b0\u7684\u53d1\u5c04\u961f\u5217\u662f\u5b8c\u5168\u7684age\u4f18\u5148\u7684\u903b\u8f91\uff0c\u800c\u4e14\u4f3c\u4e4e\u662f\u975e\u5b58\u50a8\u6307\u4ee4\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5927\u961f\u5217\uff0c\u8fd9\u4e2a\u961f\u5217\u652f\u6301issue_width\u7684\u4ef2\u88c1\uff0c\u80fd\u591f\u4f18\u5148\u6311\u9009\u51faoldest\u7684\u591a\u6761\u6307\u4ee4 \u5176\u4e2ddependGraph\u5904\u7406\u975e\u5b58\u50a8\u6307\u4ee4\u7684\u5bc4\u5b58\u5668\u4f9d\u8d56\uff0c\u4ee5\u7269\u7406\u5bc4\u5b58\u5668\u7f16\u53f7\u8fdb\u884c\u5bfb\u5740\uff0caddToProducers()\u63a5\u53e3\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u6307\u4ee4\uff0c\u5730\u5740\u4e3a\u8fd9\u4e2a\u6307\u4ee4\u7684\u76ee\u7684\u5bc4\u5b58\u5668\u7f16\u53f7\u3002 addToDependents()\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u6307\u4ee4\uff0c\u5730\u5740\u4e3a\u8fd9\u4e2a\u6307\u4ee4\u7684\u6e90\u7269\u7406\u5bc4\u5b58\u5668\u7f16\u53f7\uff0c\u5982\u679c\u4e00\u6761\u6307\u4ee4\u6709\u591a\u4e2a\u6e90\uff0c\u90a3\u4e48\u4f1a\u6dfb\u52a0\u5230\u591a\u6761\u4f9d\u8d56\u94fe\u4e0a\uff0c\u540c\u4e00\u6761\u4f9d\u8d56\u94fe\u4e0a\u7684\u6307\u4ee4\u4ee5\u94fe\u8868\u7684\u5f62\u5f0f\u7ba1\u7406\u3002 readyInst\u5b58\u653e\u4e86\u76ee\u524d\u6240\u6709\u7684\u5df2\u7ecfready\u7684\u6307\u4ee4\uff0c\u6309\u7167opclass\u7f16\u53f7\u8fdb\u884c\u5bfb\u5740\u3002\u6bcf\u4e00\u4e2aopclass\u4e2d\u6700\u8001\u7684\u6307\u4ee4\u88ab\u653e\u5728\u4e86\u4e00\u4e2a\u540d\u4e3alistorder\u7684\u6309\u7167age\u6392\u5e8f\u7684\u6709\u5e8f\u961f\u5217\u4e2d\uff0c\u53d1\u5c04\u6307\u4ee4\u65f6\uff0c\u4ecelistorder\u4e2d\u6309\u7167\u987a\u5e8f\u8fdb\u884c\u53d1\u5c04\uff0c\u5982\u679c\u67d0\u4e00\u4e2aopclass\u7684\u6307\u4ee4\u88ab\u53d1\u5c04\u4e86\uff0c\u90a3\u4e48\u4f1a\u4ece\u90a3\u4e2aopclass\u7684readylist\u4e2d\u627e\u5230yonger\u7684\u6307\u4ee4\u7ee7\u7eed\u6dfb\u52a0\u5230listorder\u4e2d \u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5b8c\u5168age\u4f18\u5148\u7684\u4ef2\u88c1\u903b\u8f91 \u6267\u884c\u8fc7\u7a0b\u7684\u6d41\u6c34\u7ebf \u00b6 Gem5\u4f7f\u7528FU\u62bd\u8c61\u6765\u7ba1\u7406\u8ba1\u7b97\u5355\u5143\uff0c\u5bf9\u4e8e\u4e00\u822c\u7684\u6307\u4ee4\uff0c\u6267\u884c\u65f6\u95f4\u90fd\u662f\u786e\u5b9a\u7684\uff0c\u901a\u8fc7\u6ce8\u518cFUCompletion\u4e8b\u4ef6\u6765\u5b9e\u73b0\u6a21\u62df\u6307\u4ee4\u5728\u8fd0\u7b97\u5355\u5143\u4e2d\u82b1\u8d39\u7684\u5468\u671f\uff0c\u4e8b\u4ef6\u5b8c\u6210\u4f1a\u5728\u4e0b\u4e00\u62cd\u91ca\u653e\u5360\u7528\u7684FU. \u540d\u4e3aissueToExecQueue\u7684\u961f\u5217\u5b58\u653e\u4e86\u5728\u4e0b\u4e00\u62cd\u5c31\u80fd\u6267\u884c\u5b8c\u7684\u6307\u4ee4\uff0c\u5728\u4e0b\u4e00\u4e2a\u5468\u671f\uff0cexec stage\u5904\u7406\u961f\u5217\u4e2d\u7684\u6307\u4ee4\uff0c\u8c03\u7528\u6307\u4ee4\u7684\u6267\u884c\u51fd\u6570\uff0c\u5c06\u5904\u7406\u5b8c\u7684\u6307\u4ee4\u653e\u5230iewQueue\u4e2d\uff0c\u540c\u65f6\u8fdb\u884cwriteback\u64cd\u4f5c. \u6267\u884c\u8fc7\u7a0b\u4e2d\u7684\u5206\u652f\u9884\u6d4b\u9519\u8bef \u00b6 LSU \u00b6 todo... commit \u00b6 \u5206\u652f\u9884\u6d4b\u5f15\u8d77\u7684squash \u00b6 sn:1639 \u662f\u4e00\u6761b.eq\u6307\u4ee4 3021500: system.cpu.fetch: [tid:0] Instruction PC (0x6008=>0x600c).(0=>1) created [sn:1639]. 3021500: system.cpu.fetch: [tid:0] Instruction is: b.eq 0x61ec 3021500: system.cpu.fetch: [tid:0] Fetch queue entry created (3/32). 3021500: system.cpu.fetch: [tid:0] [sn:1639] Branch at PC 0x6008 predicted to be not taken 3021500: system.cpu.fetch: [tid:0] [sn:1639] Branch at PC 0x6008 predicted to go to (0x600c=>0x6010).(0=>1) \u6267\u884c\u65f6\u53d1\u73b0\u5206\u652f\u9884\u6d4b\u9519\u8bef(cycle0) 3027500: system.cpu.iew: [tid:0] [sn:1639] Execute: Branch mispredict detected. 3027500: system.cpu.iew: [tid:0] [sn:1639] Predicted target was PC: (0x600c=>0x6010).(0=>1) 3027500: system.cpu.iew: [tid:0] [sn:1639] Execute: Redirecting fetch to PC: (0x6008=>0x61ec).(0=>1) \u4e0b\u4e00\u4e2acycle(cycle1)\uff0ccommit\u54cd\u5e94\u5206\u652f\u9884\u6d4b\u9519\u8bef\uff0c\u53d1\u8d77squash\u64cd\u4f5c,squash\u5bbd\u5ea6\u4e3a8\uff0c\u56e0\u6b64\u53ea\u80fdsquash\u52301641\u53f7\u6307\u4ee4 3028000: system.cpu.commit: [tid:0] Squashing due to branch mispred PC:0x6008 [sn:1639] 3028000: system.cpu.commit: [tid:0] Redirecting to PC (0x61ec=>0x61f0).(0=>1) 3028000: system.cpu.rob: Starting to squash within the ROB. 3028000: system.cpu.rob: [tid:0] Squashing instructions until [sn:1639]. 3028000: system.cpu.rob: [tid:0] Squashing instruction PC (0x6038=>0x603c).(0=>1), seq num 1653. 3028000: system.cpu.rob: [tid:0] Squashing instruction PC (0x6034=>0x6038).(0=>1), seq num 1652. 3028000: system.cpu.rob: [tid:0] Squashing instruction PC (0x6030=>0x6034).(0=>1), seq num 1651. 3028000: system.cpu.rob: [tid:0] Squashing instruction PC (0x602c=>0x6030).(0=>1), seq num 1650. 3028000: system.cpu.rob: [tid:0] Squashing instruction PC (0x6028=>0x602c).(0=>1), seq num 1649. 3028000: system.cpu.rob: [tid:0] Squashing instruction PC (0x6024=>0x6028).(0=>1), seq num 1648. 3028000: system.cpu.rob: [tid:0] Squashing instruction PC (0x6020=>0x6024).(2=>3), seq num 1647. 3028000: system.cpu.rob: [tid:0] Squashing instruction PC (0x6020=>0x6024).(1=>2), seq num 1646. \u4e0b\u4e00\u4e2acycle(cycle2)\uff0crename stage\u6536\u5230squash\u4fe1\u53f7\uff0c\u5229\u7528 history buffer \u6062\u590d RAT, \u4e00\u62cd\u5185\u5b8c\u6210\u6062\u590d 3028500: system.cpu.rename: [tid:0] Squashing instructions due to squash from commit. 3028500: system.cpu.rename: [tid:0] [squash sn:1639] Squashing instructions. 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1657 (archReg: 0, newPhysReg: 27, prevPhysReg: 14). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1656 (archReg: 3, newPhysReg: 31, prevPhysReg: 80). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1655 (archReg: 0, newPhysReg: 14, prevPhysReg: 112). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1654 (archReg: 2, newPhysReg: 125, prevPhysReg: 118). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1653 (archReg: 0, newPhysReg: 112, prevPhysReg: 107). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1652 (archReg: 1, newPhysReg: 71, prevPhysReg: 108). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1651 (archReg: 2, newPhysReg: 118, prevPhysReg: 122). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1649 (archReg: 1, newPhysReg: 605, prevPhysReg: 602). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1649 (archReg: 2, newPhysReg: 604, prevPhysReg: 601). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1649 (archReg: 0, newPhysReg: 603, prevPhysReg: 600). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1649 (archReg: 0, newPhysReg: 65535, prevPhysReg: 65535). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1645 (archReg: 35, newPhysReg: 117, prevPhysReg: 46). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1643 (archReg: 1, newPhysReg: 602, prevPhysReg: 599). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1643 (archReg: 2, newPhysReg: 601, prevPhysReg: 598). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1643 (archReg: 0, newPhysReg: 600, prevPhysReg: 597). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1643 (archReg: 0, newPhysReg: 65535, prevPhysReg: 65535). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1642 (archReg: 3, newPhysReg: 80, prevPhysReg: 127). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1641 (archReg: 1, newPhysReg: 108, prevPhysReg: 11). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1640 (archReg: 1, newPhysReg: 11, prevPhysReg: 64). issue stage \u6536\u5230commit\u53d1\u6765\u7684squash\u4fe1\u53f7\uff0c\u8fdb\u5165squash\u72b6\u6001\uff0c\u6e05\u9664queue\u4e2d\u9700\u8981squash\u7684\u6307\u4ee4 3028500: system.cpu.iew: [tid:0] Squashing all instructions. 3028500: system.cpu.iq: [tid:0] Starting to squash instructions in the IQ. 3028500: system.cpu.iq: [tid:0] Squashing until sequence number 1639! 3028500: system.cpu.iq: [tid:0] Instruction [sn:1654] PC (0x603c=>0x6040).(0=>1) squashed. 3028500: system.cpu.iq: [tid:0] Instruction [sn:1653] PC (0x6038=>0x603c).(0=>1) squashed. 3028500: system.cpu.iq: [tid:0] Instruction [sn:1651] PC (0x6030=>0x6034).(0=>1) squashed. 3028500: system.cpu.iq: [tid:0] Instruction [sn:1650] PC (0x602c=>0x6030).(0=>1) squashed. 3028500: system.cpu.iq: [tid:0] Instruction [sn:1649] PC (0x6028=>0x602c).(0=>1) squashed. 3028500: system.cpu.iq: [tid:0] Instruction [sn:1648] PC (0x6024=>0x6028).(0=>1) squashed. 3028500: system.cpu.iq: [tid:0] Instruction [sn:1647] PC (0x6020=>0x6024).(2=>3) squashed. 3028500: system.cpu.iq: [tid:0] Instruction [sn:1646] PC (0x6020=>0x6024).(1=>2) squashed. 3028500: system.cpu.iq: [tid:0] Instruction [sn:1644] PC (0x601c=>0x6020).(0=>1) squashed. 3028500: system.cpu.iq: [tid:0] Instruction [sn:1643] PC (0x6018=>0x601c).(0=>1) squashed. 3028500: system.cpu.iq: [tid:0] Instruction [sn:1642] PC (0x6014=>0x6018).(0=>1) squashed. 3028500: system.cpu.iq: [tid:0] Instruction [sn:1641] PC (0x6010=>0x6014).(0=>1) squashed. 3028500: system.cpu.iq: [tid:0] Instruction [sn:1640] PC (0x600c=>0x6010).(0=>1) squashed. commit stage\u7ee7\u7eedsquash \u6307\u4ee4\uff0c\u5e76\u4e14\u5411issue \u53d1\u9001 robsquashing \u4fe1\u53f7 3028500: system.cpu.commit: [tid:0] Still Squashing, cannot commit any insts this cycle. 3028500: system.cpu.rob: [tid:0] Squashing instructions until [sn:1639]. 3028500: system.cpu.rob: [tid:0] Squashing instruction PC (0x6020=>0x6024).(0=>1), seq num 1645. 3028500: system.cpu.rob: [tid:0] Squashing instruction PC (0x601c=>0x6020).(0=>1), seq num 1644. 3028500: system.cpu.rob: [tid:0] Squashing instruction PC (0x6018=>0x601c).(0=>1), seq num 1643. 3028500: system.cpu.rob: [tid:0] Squashing instruction PC (0x6014=>0x6018).(0=>1), seq num 1642. 3028500: system.cpu.rob: [tid:0] Squashing instruction PC (0x6010=>0x6014).(0=>1), seq num 1641. 3028500: system.cpu.rob: [tid:0] Squashing instruction PC (0x600c=>0x6010).(0=>1), seq num 1640. \u4e0b\u4e00\u4e2acycle(cycle3)\uff0ccommit\u7ee7\u7eed\u5f00\u59cb\u63d0\u4ea4\u6307\u4ee4 3029000: system.cpu.commit: Trying to commit instructions in the ROB. 3029000: system.cpu.commit: Trying to commit head instruction, [tid:0] [sn:1635] 3029000: system.cpu.commit: [tid:0] [sn:1635] Committing instruction with PC (0x5ff8=>0x5ffc).(0=>1) 3029000: system.cpu.commit: [tid:0] [sn:1636] Committing instruction with PC (0x5ffc=>0x6000).(0=>1) 3029000: system.cpu.commit: [tid:0] [sn:1637] Committing instruction with PC (0x6000=>0x6004).(0=>1) 3029000: system.cpu.commit: [tid:0] [sn:1638] Committing instruction with PC (0x6004=>0x6008).(0=>1) 3029000: system.cpu.commit: [tid:0] [sn:1639] Committing instruction with PC (0x6008=>0x61ec).(0=>1) dispatch \u548c issue stage \u56e0\u4e3a\u6536\u5230commit\u7684robsquashing\u4fe1\u53f7\uff0c\u8fdb\u5165blocking(stall)\u72b6\u6001,\u5e76\u4e14\u5c06\u81ea\u8eab\u7684stall\u72b6\u6001\u4f20\u9012\u5230rename stage 3029000: system.cpu.iew: [tid:0] ROB is still squashing. 3029000: system.cpu.iew: [tid:0] Removing incoming rename instructions 3029000: system.cpu.iew: [tid:0] Stall from Commit stage detected. 3029000: system.cpu.iew: [tid:0] Blocking. \u4e0b\u4e00\u4e2acycle(cycle4), rename\u63a5\u6536\u5230dispatch\u53d1\u9001\u7684stall\u4fe1\u53f7\uff0c\u8fdb\u5165blocking\u72b6\u6001 3029500: system.cpu.rename: [tid:0] Stall from IEW stage detected. 3029500: system.cpu.rename: [tid:0] Blocking. dispatch \u8fdb\u5165unblocking\u72b6\u6001\uff0c\u53d1\u73b0skidbuffer\u4e2d\u6ca1\u6709\u6307\u4ee4\uff0c\u8f6c\u5165running\u72b6\u6001 3029500: system.cpu.iew: [tid:0] Done blocking, switching to unblocking. 3029500: system.cpu.iew: [tid:0] Reading instructions out of the skid buffer 0. 3029500: system.cpu.iew: [tid:0] Done unblocking. 3029500: system.cpu.iew: [tid:0] Not blocked, so attempting to run dispatch. 3029500: system.cpu.iq: Attempting to schedule ready instructions from the IQ. 3029500: system.cpu.iq: Not able to schedule any instructions. \u4e0b\u4e00\u4e2acycle(cycle5), decode stage \u56e0\u4e3arename stall \u7684\u53cd\u538b\u8fdb\u5165blocking\u72b6\u6001 3030000: system.cpu.decode: [tid:0] Stall fom Rename stage detected. 3030000: system.cpu.decode: [tid:0] Blocking. \u518d\u4e0b\u4e00\u4e2acycle(cycle6), fetch stage \u6536\u5230decode\u7684stall\u4fe1\u53f7\uff0c\u4e0d\u4f1a\u4ecefetchqueue\u4e2d\u5c06\u6307\u4ee4\u9001\u7ed9decode stage \u6c47\u603b\u7684\u5404\u4e2astage\u72b6\u6001\u5982\u4e0b\u8868\u6240\u793a stage |cycle0 | cycle1 | cycle2 | cycle3 | cycle4 | cycle5 | cycle6 ---|---|---|---|---|---|---|---| fetch | running | running | squashing | running | running | running |running decode | running | running | squashing | running | running | block | unblocking rename | running |running | squashing | running | block | unblocking | running dispatch | running | running | squashing | block | unblocking | running | running issue | running | running | squashing | block | unblocking | running |running E & W | branch | mispred | - | - | - | - | - | running commit | running | squashing | squashing | running | running | running | running \u4ece\u884c\u4e3a\u4e0a\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u5206\u652f\u9884\u6d4b\u9519\u8bef\u7684\u56de\u6eda\u662f\u4f7f\u7528ROB walk\u7684\u65b9\u5f0f\u8fdb\u884c\u7684\uff0c\u4e00\u62cd\u80fd\u591f\u56de\u6eda\u7684\u6307\u4ee4\u4e2a\u6570\u53ef\u4ee5\u7531squshwidth\u6307\u5b9a","title":"O3CPU \u4ee3\u7801\u5206\u6790"},{"location":"simulator/gem5_o3cpu.html#o3cpu","text":"","title":"O3CPU \u4ee3\u7801\u5206\u6790"},{"location":"simulator/gem5_o3cpu.html#_1","text":"","title":"\u8fd0\u884c\u8bf4\u660e"},{"location":"simulator/gem5_o3cpu.html#build-gem5","text":"can use a -j param to enable compile in parallel scons build/ARM/gem5.debug -j4","title":"build Gem5"},{"location":"simulator/gem5_o3cpu.html#run-gem5","text":"chlxy@LAPTOP-SMLPH2RJ:~/workspace/gem5$ ./build/ARM/gem5.debug --debug-flags = Exec configs/example/fs.py --cpu-type = ArmO3CPU --caches --machine-type = VExpress_GEM5_V2 -n1 --bare-metal --kernel ../tests/aarch64/dhrystone/dhrystone.elf","title":"run Gem5"},{"location":"simulator/gem5_o3cpu.html#stop-gem5","text":"dhrystone will write a EOT to inform system to stop at the end of the test #define TUBE_ADDRESS ((volatile uint32_t *) 0x13000000u) static void benchmark_finish () { \u200b\u200b char p [] = \"** TEST PASSED OK ** \\n \" ; char * c = p ; while ( * c ) { \u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b * TUBE_ADDRESS = * c ; c ++ ; } \u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b * TUBE_ADDRESS = 0x4 ; } so, we set UART0.pio=0x13000000 , and enable EOT Pl011 ( pio_addr = 0x13000000 , interrupt = ArmSPI ( num = 37 ), end_on_eot = True ) we use VExpress_GEM5_V2 platform for our soc structure, you can find memorymap and other information in file src/dev/arm/RealView.py","title":"stop Gem5"},{"location":"simulator/gem5_o3cpu.html#fetch","text":"","title":"fetch"},{"location":"simulator/gem5_o3cpu.html#fetch-a-cache-line-and-not-hit","text":"\u6ca1\u6709\u5f00\u542fmmu\uff0c\u56e0\u6b64\u5f53\u62cd\u5c31\u80fd\u5f97\u5230\u7269\u7406\u5730\u5740\uff0c\u7136\u540e\u67e5cache\u662f\u5426\u547d\u4e2d 1000: system.cpu.fetch: [tid:0] Attempting to translate and read instruction, starting at PC (0=>0x4).(0=>1). 1000: system.cpu.fetch: [tid:0] Fetching cache line 0 for addr 0 cache\u672a\u547d\u4e2d\uff0c\u5411\u4e0b\u4e00\u7ea7\u7f13\u5b58\u53d6\u6307\u4ee4\uff0c\u572843000\u4e2atick\uff0ccache miss\u7684\u6570\u636e\u56de\u586b\uff0c\u518d\u8fc73\u4e2acycle,\u6570\u636e\u88ab\u76f4\u63a5\u653e\u5728fetchbuffer\u4e2d\u3002 43000: system.cpu.icache: recvTimingResp: Handling response ReadResp [0:f] (s) IF UC 44500: system.cpu.icache_port: Fetch unit received timing","title":"fetch a cache line and not hit"},{"location":"simulator/gem5_o3cpu.html#macroop","text":"macroOp fetch\u8fc7\u7a0b\u6709\u5982\u4e0b\u7279\u70b9\uff1a \u4e0d\u652f\u6301\u8de8cacheLine \u4e0d\u652f\u6301fetchbuffer\u62fc\u63a5 \u5f53\u62cd\u5904\u7406\u5b8cfetchbuffer\uff0c\u53ef\u4ee5\u76f4\u63a5\u53d1\u8d77\u65b0\u7684cache\u8bf7\u6c42 \u5b58\u5728\u4e00\u4e2amicroOp\u7684\u7f13\u5b58 \u4ece\u6307\u4ee4\u6d41log\u4e2d\u53ef\u4ee5\u770b\u5230macro\u6307\u4ee4 stp\u88ab\u62c6\u5206\u6210\u4e86\u4e09\u6761micro\u6307\u4ee4 2457000: system.cpu: A0 T0 : 0x6220 @_malloc_r+640 : adrp x1, #73728 : IntAlu : D=0x0000000000018000 FetchSeq=1364 CPSeq=902 flags=(IsInteger) 2457000: system.cpu: A0 T0 : 0x6224 @_malloc_r+644 : stp 2457000: system.cpu: A0 T0 : 0x6224 @_malloc_r+644. 0 : addxi_uop ureg0, sp, #80 : IntAlu : D=0x0000000000014f30 FetchSeq=1365 CPSeq=903 flags=(IsInteger|IsMicroop|IsDelayedCommit|IsFirstMicroop) 2457000: system.cpu: A0 T0 : 0x6224 @_malloc_r+644. 1 : strxi_uop x27, [ureg0] : MemWrite : D=0x0000000000000000 A=0x14f30 FetchSeq=1366 CPSeq=904 flags=(IsInteger|IsStore|IsMicroop|IsDelayedCommit) 2457500: system.cpu: A0 T0 : 0x6224 @_malloc_r+644. 2 : strxi_uop x28, [ureg0, #8] : MemWrite : D=0x0000000000000000 A=0x14f38 FetchSeq=1367 CPSeq=905 flags=(IsInteger|IsStore|IsMicroop|IsLastMicroop) 2457500: system.cpu: A0 T0 : 0x6228 @_malloc_r+648 : adrp x27, #61440 : IntAlu : D=0x0000000000015000 FetchSeq=1368 CPSeq=906 flags=(IsInteger) 2457500: system.cpu: A0 T0 : 0x622c @_malloc_r+652 : ldr x1, [x1, #2432] : MemRead : D=0x0000000000000000 A=0x18980 FetchSeq=1369 CPSeq=907 flags=(IsInteger|IsLoad) 2458000: system.cpu: A0 T0 : 0x6230 @_malloc_r+656 : movz x3, #4127, #0 : IntAlu : D=0x000000000000101f FetchSeq=1370 CPSeq=908 flags=(IsInteger) 2458000: system.cpu: A0 T0 : 0x6234 @_malloc_r+660 : ldr x2, [x27, #3936] : MemRead : D=0xffffffffffffffff A=0x15f60 FetchSeq=1371 CPSeq=909 flags=(IsInteger|IsLoad) \u6267\u884clog\u4e2d,\u53ef\u4ee5\u770b\u5230\u57282457000\u4e2atick\u65f6\uff0cfetch\u4e00\u5171\u5904\u7406\u4e86\u4e09\u6761\u6307\u4ee4\uff0cadrp\u548cstp\u7684\u524d\u4e24\u6761micro\u6307\u4ee4 2457000: system.cpu.fetch: [tid:0] Instruction PC (0x6220=>0x6224).(0=>1) created [sn:1364]. 2457000: system.cpu.fetch: [tid:0] Instruction is: adrp x1, #73728 2457000: system.cpu.decoder: Decode: Decoded stp instruction: 0x4a90573fb 2457000: system.cpu.fetch: [tid:0] Instruction PC (0x6224=>0x6228).(0=>1) created [sn:1365]. 2457000: system.cpu.fetch: [tid:0] Instruction is: addxi_uop ureg0, sp, #80 2457000: system.cpu.fetch: [tid:0] Instruction PC (0x6224=>0x6228).(1=>2) created [sn:1366]. 2457000: system.cpu.fetch: [tid:0] Instruction is: strxi_uop x27, [ureg0] 2457000: system.cpu.fetch: [tid:0] Done fetching, reached fetch bandwidth for this cycle. 2457000: system.cpu.fetch: [tid:0] [sn:1364] Sending instruction to decode from fetch queue. Fetch queue size: 3. 2457000: system.cpu.fetch: [tid:0] [sn:1365] Sending instruction to decode from fetch queue. Fetch queue size: 2. 2457000: system.cpu.fetch: [tid:0] [sn:1366] Sending instruction to decode from fetch queue. Fetch queue size: 1. \u5728\u4e0b\u4e00\u4e2acycle,\u9664\u4e86stp\u5269\u4f59\u7684\u4e00\u6761\u6307\u4ee4\uff0c\u8fd8\u53ef\u4ee5\u5904\u7406\u989d\u5916\u7684\u4e24\u6761\u6307\u4ee4 2457500: system.cpu.fetch: [tid:0] Instruction PC (0x6224=>0x6228).(2=>3) created [sn:1367]. 2457500: system.cpu.fetch: [tid:0] Instruction is: strxi_uop x28, [ureg0, #8] 2457500: system.cpu.fetch: [tid:0] Instruction PC (0x6228=>0x622c).(0=>1) created [sn:1368]. 2457500: system.cpu.fetch: [tid:0] Instruction is: adrp x27, #61440 2457500: system.cpu.fetch: [tid:0] Instruction PC (0x622c=>0x6230).(0=>1) created [sn:1369]. 2457500: system.cpu.fetch: [tid:0] Instruction is: ldr x1, [x1, #2432] 2457500: system.cpu.fetch: [tid:0] Done fetching, reached fetch bandwidth for this cycle.","title":"macroOp"},{"location":"simulator/gem5_o3cpu.html#_2","text":"\u5982\u679c\u5206\u652f\u9884\u6d4b\u8df3\u8f6c\uff0c\u5c31\u4f1a\u7ed3\u675f\u5f53\u524dfetch\u64cd\u4f5c\uff0c\u5206\u652f\u6307\u4ee4\u4e4b\u524d\u7684\u6307\u4ee4\u53ef\u4ee5\u7ee7\u7eed\u8fdb\u5165fetchQueue\u3002\u540c\u65f6\u53ef\u4ee5\u76f4\u63a5\u53d1\u8d77\u65b0\u7684cache\u8bf7\u6c42 2600000: system.cpu.fetch: [tid:0] Instruction PC (0x1514=>0x1518).(0=>1) created [sn:1413]. 2600000: system.cpu.fetch: [tid:0] Instruction is: ret 2600000: system.cpu.fetch: [tid:0] [sn:1413] Branch at PC 0x1514 predicted to be taken to (0x6260=>0x6264).(0=>1) 2600000: system.cpu.fetch: [tid:0] Done fetching, predicted branch instruction encountered. 2600000: system.cpu.fetch: [tid:0] Issuing a pipelined I-cache access, starting at PC (0x6260=>0x6264).(0=>1). 2600000: system.cpu.fetch: [tid:0] Fetching cache line 0x6260 for addr 0x6260 2600000: system.cpu.fetch: [tid:0] [sn:1412] Sending instruction to decode from fetch queue. Fetch queue size: 2. 2600000: system.cpu.fetch: [tid:0] [sn:1413] Sending instruction to decode from fetch queue. Fetch queue size: 1.","title":"\u5206\u652f\u9884\u6d4b"},{"location":"simulator/gem5_o3cpu.html#quiesce","text":"quiesce\u7c7b\u6307\u4ee4\uff1a wfe wfet(Gem5 \u4e0d\u652f\u6301) wfi wfit(Gem5 \u4e0d\u652f\u6301) \u4ee5wfi\u6307\u4ee4\u4e3e\u4f8b 1376000: system.cpu.fetch: [tid:0] Instruction PC (0x1c4=>0x1c8).(0=>1) created [sn:119]. 1376000: system.cpu.fetch: [tid:0] Instruction is: wfi 1376000: system.cpu.fetch: Quiesce instruction encountered, halting fetch! // \u4e0b\u4e00\u62cd\uff0cfetch \u5f00\u59cb\u5904\u4e8epending\u7684\u72b6\u6001 1376500: system.cpu.fetch: There are no more threads available to fetch from. 1376500: system.cpu.fetch: [tid:0] Fetch is waiting for a pending quiesce instruction! // \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cwfi\u6307\u4ee4\u5904\u4e8e\u5206\u652f\u9519\u8bef\u7684\u8def\u5f84\u4e0a\uff0c\u6700\u7ec8\u6267\u884csquash\u6062\u590d\u4e86\u8fd0\u884c 1380000: system.cpu.commit: [tid:0] Squashing due to branch mispred PC:0x1c0 [sn:118] 1380000: system.cpu.commit: [tid:0] Redirecting to PC (0x1cc=>0x1d0).(0=>1) 1380500: system.cpu.fetch: [tid:0] Squashing instructions due to squash from commit. 1380500: system.cpu.fetch: [tid:0] Squash from commit. 1381000: system.cpu.fetch: [tid:0] Done squashing, switching to running. 1381000: system.cpu.fetch: Running stage.","title":"quiesce \u7c7b\u6307\u4ee4\u7684\u5904\u7406"},{"location":"simulator/gem5_o3cpu.html#squash","text":"squash \u4e3b\u8981\u6267\u884c\u5982\u4e0b\u64cd\u4f5c \u5c06PC\u8bbe\u7f6e\u4e3aCommit stage \u8fd4\u56de\u7684PC \u590d\u4f4d\u4e0efetch buffer\u76f8\u5173\u7684reg \u5982\u679c\u6709\u8fdb\u884c\u4e2d\u7684icache\u8bf7\u6c42\uff0c\u6807\u8bb0\u8bf7\u6c42\u65e0\u6548 \u5982\u679c\u6709\u8fdb\u884c\u4e2d\u7684itlb\u8bf7\u6c42\uff0c\u6807\u8bb0\u8bf7\u6c42\u65e0\u6548 \u5982\u679c\u6709\u8fdb\u884c\u4e2d\u7684icache retry\u8bf7\u6c42\uff0c\u6807\u8bb0\u8bf7\u6c42\u65e0\u6548 \u6e05\u7a7afetchQueue","title":"squash"},{"location":"simulator/gem5_o3cpu.html#stall","text":"\u6765\u81ea\u4e8edecode\u7684stall\u4e0d\u4f1a\u5f71\u54cdfetch\u5c06\u6307\u4ee4\u5b58\u5165fetchQueue\uff0c\u4f1astall\u4ecefetchQueue\u5411decode\u53d1\u9001\u6307\u4ee4\u3002","title":"stall"},{"location":"simulator/gem5_o3cpu.html#decode","text":"","title":"decode"},{"location":"simulator/gem5_o3cpu.html#decode-squash","text":"","title":"decode squash"},{"location":"simulator/gem5_o3cpu.html#squash_1","text":"decode stage \u4f1a\u5224\u65ad\u975e\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\u662f\u5426\u5206\u652f\u9884\u6d4b\u9519\u8bef\u3002 \u5982\u679c\u53d1\u73b0\u975e\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\u5206\u652f\u9884\u6d4b\u9519\u8bef\uff0c\u90a3\u4e48\u4f1a\u5728\u5f53\u62cd\u6267\u884csquash\u64cd\u4f5c\uff0c\u5047\u8bbedecode\u5bbd\u5ea6\u662f4\uff0c\u8df3\u8f6c\u6307\u4ee4\u662f\u7b2c\u4e09\u6761\uff0c\u90a3\u4e48\u524d\u4e09\u6761\u6307\u4ee4\u90fd\u80fd\u6b63\u5e38decode\uff0c\u5e76\u4e14\u53d1\u9001\u5230rename\uff0c\u6b64\u65f6decode\u8f6c\u5165squashing\u7684\u72b6\u6001\uff0c\u6e05\u9664\u6389skidbuffer\u4e2d\u7684\u6240\u6709\u6307\u4ee4\u3002 \u5982\u679c\u4e0b\u4e00\u4e2acycle\u6ca1\u6709\u6536\u5230squash\u4fe1\u53f7\u6216\u8005stall\u4fe1\u53f7\uff0cdecode\u5c06\u518d\u6b21\u8f6c\u4e3arunning\u72b6\u6001\u3002 \u5f53\u524dcycle fetch\u5230\u4e86 b 0x1570 \u6307\u4ee4\uff0c\u5e76\u4e14\u7ed9\u901a\u8fc7\u5206\u652f\u9884\u6d4b\u5668\u83b7\u53d6\u4e86\u4e0d\u8df3\u8f6c\u7684\u5206\u652f\u4fe1\u606f\uff0c\u4e0b\u4e00\u6761\u6307\u4ee4\u5730\u5740\u4e3a 0x1d4 668000: system.cpu.fetch: [tid:0] Instruction PC (0x1cc=>0x1d0).(0=>1) created [sn:126]. 668000: system.cpu.fetch: [tid:0] Instruction is: b 0x1570 668000: system.cpu.fetch: [tid:0] [sn:126] Branch at PC 0x1cc predicted to be not taken 668000: system.cpu.fetch: [tid:0] [sn:126] Branch at PC 0x1cc predicted to go to (0x1d0=>0x1d4).(0=>1) // 126 ~ 133 \u7684\u6307\u4ee4\u88ab\u4f20\u5165\u5230fetchqueue 668000: system.cpu.fetch: [tid:0] [sn:126] Sending instruction to decode from fetch queue. Fetch queue size: 8. 668000: system.cpu.fetch: [tid:0] [sn:127] Sending instruction to decode from fetch queue. Fetch queue size: 7. 668000: system.cpu.fetch: [tid:0] [sn:128] Sending instruction to decode from fetch queue. Fetch queue size: 6. 668000: system.cpu.fetch: [tid:0] [sn:129] Sending instruction to decode from fetch queue. Fetch queue size: 5. 668000: system.cpu.fetch: [tid:0] [sn:130] Sending instruction to decode from fetch queue. Fetch queue size: 4. 668000: system.cpu.fetch: [tid:0] [sn:131] Sending instruction to decode from fetch queue. Fetch queue size: 3. 668000: system.cpu.fetch: [tid:0] [sn:132] Sending instruction to decode from fetch queue. Fetch queue size: 2. 668000: system.cpu.fetch: [tid:0] [sn:133] Sending instruction to decode from fetch queue. Fetch queue size: 1. \u4e0b\u4e00\u4e2acycle\uff0c decode\u89e3\u6790\u51fa\u6765\u7684\u6307\u4ee4\u8df3\u8f6c\u5730\u5740\u4e3a0x1570\uff0c\u56e0\u6b64\u4ea7\u751fsquash\u4fe1\u53f7 \u7531\u4e8e\u662f8\u6761\u6307\u4ee4\u4e2d\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u51fa\u73b0\u4e86\u5206\u652f\u9884\u6d4b\u9519\u8bef\uff0c\u56e0\u6b64\u6ca1\u6709\u4efb\u4f55\u6307\u4ee4\u80fd\u591f\u4f20\u7ed9rename 668500: system.cpu.decode: [tid:0] Processing instruction [sn:126] with PC (0x1cc=>0x1d0).(0=>1) 668500: system.cpu.decode: [tid:0] [sn:126] Squashing due to incorrect branch prediction detected at decode. 668500: system.cpu.decode: [tid:0] [sn:126] Updating predictions: Wrong predicted target: (0x1d0=>0x1d4).(0=>1) PredPC: (0x1570=>0x1574).(0=>1) 668500: system.cpu.rename: [tid:0] Not blocked, so attempting to run stage. 668500: system.cpu.rename: [tid:0] Nothing to do, breaking out early. decode\u9700\u8981\u901a\u77e5fetch\u8fdb\u884csquash\u64cd\u4f5c,\u540c\u65f6\u5c06fetch\u4e0edecode\u4e4b\u95f4\u9501\u5b58\u7684\u6307\u4ee4\u4e5f\u6e05\u9664\u6389\u3002\u540c\u65f6\uff0c\u5982\u679cdecode\u5f53\u524d\u5904\u4e8eblocked\u6216\u8005unblocking\u72b6\u6001\uff0c\u9700\u8981\u901a\u77e5fetch\u6b64\u72b6\u6001\u89e3\u9664\u3002","title":"\u5206\u652f\u9884\u6d4b\u9519\u8bef\u5f15\u8d77\u7684squash"},{"location":"simulator/gem5_o3cpu.html#squash_2","text":"fetch.cc \u6dfb\u52a0\u6307\u4ee4\u5230\u5168\u5c40\u6307\u4ee4\u5217\u8868 // Add instruction to the CPU's list of instructions. instruction->setInstListIt(cpu->addInst(instruction)); decode.cc \u5728squash\u65f6\uff0c\u7ed9\u8981squash\u7684\u6307\u4ee4\u6dfb\u52a0 squashed \u6807\u8bb0 // Squash instructions up until this one cpu->removeInstsUntil(squash_seq_num, tid); \u5728decode\u6307\u4ee4\u65f6\uff0c\u5982\u679c\u6807\u8bb0\u4e86squashed\uff0c \u76f4\u63a5\u8df3\u8fc7 if (inst->isSquashed()) {\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b DPRINTF(Decode, \"[tid:%i] Instruction %i with PC %s is \" \"squashed, skipping.\\n\", tid, inst->seqNum, inst->pcState()); ++stats.squashedInsts; --insts_available; continue; }\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b \u6240\u4ee5\uff0cflash \u4e2d\u95f4\u8fc7\u7a0b\u7684\u6307\u4ee4\u6ca1\u6709\u989d\u5916\u7684\u8017\u8d39cycle","title":"squash \u4ee3\u7801\u903b\u8f91"},{"location":"simulator/gem5_o3cpu.html#commitsquash","text":"\u5982\u679cdecode\u5904\u4e8eblock\u6216\u8005unbloking\u72b6\u6001\uff0c\u901a\u77e5fetch\u8be5\u72b6\u6001\u5df2\u89e3\u9664\u3002\u56e0\u4e3a\u4f1a\u5237\u6389skidbuffer \u6e05\u9664\u6389skidbuffer\uff0c\u548c\u6765\u81ea\u4e8efetch\u7684\u6307\u4ee4 fetch \u5230 decode\u4e4b\u95f4on the fly\u7684\u6307\u4ee4\u5728fetch\u7684squash\u5904\u7406\u4e2d\u5b8c\u6210 fetch.cc // Tell the CPU to remove any instructions that are not in the ROB. cpu->removeInstsNotInROB(tid);","title":"\u6765\u81ea\u4e8ecommit\u7684squash"},{"location":"simulator/gem5_o3cpu.html#decode-stall","text":"\u5982\u679crename block, \u4f1a\u53d1\u9001stall\u4fe1\u53f7\u7ed9decode, decode\u6536\u5230stall\u4fe1\u53f7\uff0c\u8f6c\u4e3ablock\u72b6\u6001\uff0c\u5f53\u62cd\u4e0d\u6267\u884c\u4efb\u4f55decode\u64cd\u4f5c\u3002\u5e76\u4e14\u4f1a\u5c06stall\u4fe1\u53f7\u4f20\u9012\u7ed9fetch\u3002 rename\u89e3\u9664block\u540e\uff0cdecode\u8fdb\u5165unblocking\u72b6\u6001\uff0c\u4eceskidbuffer\u4e2d\u53d6\u6307\u4ee4\uff0cskidbuffer\u7a7a\u4e86\u4e4b\u540e\uff0c\u8f6c\u5165running\u72b6\u6001","title":"decode stall"},{"location":"simulator/gem5_o3cpu.html#unblocking","text":"\u5982\u679c\u6536\u5230rename\u53d1\u9001\u7684\u89e3\u9664stall\u4fe1\u53f7\uff0crename\u8fdb\u5165unblocking\u72b6\u6001\uff0c\u4eceskidbuffer\u4e2d\u53d6\u6307\u4ee4\u8fdb\u884cdecode\u3002 \u5f53skidbuffer\u4e2d\u6ca1\u6709\u6307\u4ee4\u65f6\uff0c\u53d1\u9001\u89e3\u9664stall\u4fe1\u53f7\u7ed9fetch stage","title":"unblocking"},{"location":"simulator/gem5_o3cpu.html#rename","text":"","title":"Rename"},{"location":"simulator/gem5_o3cpu.html#rename-squash","text":"Rename stage \u4f1a\u54cd\u5e94\u6765\u81ea\u4e8ecommit stage\u7684squash\u4fe1\u53f7\uff0c\u63a5\u6536\u5230squashing\u4fe1\u53f7\u65f6\uff0cRename\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c \u5982\u679c\u5f53\u524drename\u5904\u4e8eblocked\u6216\u8005unblocking\u7684\u72b6\u6001\uff0c\u53d1\u9001unblock\u4fe1\u53f7\u7ed9decode stage \u5982\u679c\u5f53\u524drename\u5904\u4e8eserializeStall\u72b6\u6001\uff0c\u68c0\u67e5squash\u7684\u6307\u4ee4\u662f\u4e0d\u662f\u66f4older,\u5982\u679c\u662f\uff0c\u6e05\u9664\u6389serialize\u72b6\u6001\uff0c\u53d1\u9001unblock\u4fe1\u53f7\u7ed9decode\uff1b\u5982\u679c\u4e0d\u662f\uff0c\u4fdd\u7559serializeStall\u6807\u8bb0,\u4e0b\u4e00\u62cd\u6062\u590dserializeStall \u6e05\u9664\u6389\u6765\u81ea\u4e8edecode\u7684\u6307\u4ee4 \u6e05\u9664\u6389skidbuffer\u4e2d\u7684\u6307\u4ee4 \u4e00\u6b21\u6027\u6062\u590dRAT(\u4ece\u65f6\u5e8f\u884c\u4e3a\u4e0a\u6765\u770b\u4ecd\u7136\u662fROB walk\u7684\u5f62\u5f0f) rename\u7684squash\u8fc7\u7a0b\u4e0eiew\u548ccommit\u6709\u8f83\u5927\u5173\u8054\uff0c\u5177\u4f53\u884c\u4e3a\u53ef\u4ee5\u7ed3\u5408commit stage\u7684squash\u8fc7\u7a0b\u8fdb\u884c\u5206\u6790","title":"rename squash"},{"location":"simulator/gem5_o3cpu.html#rename-stall","text":"rename stall \u7684\u6e90\u6bd4\u8f83\u591a\uff0c\u6709\u5982\u4e0b\u51e0\u4e2a REW stage block(dispatch) no free ROB entries no free LSU entries no free IQ entries no free Phy Regs in freelist serializeStall \u5f53\u53d1\u751fstall\u65f6\uff0crename stage\u6709\u5982\u4e0b\u884c\u4e3a \u5c06decode\u4f20\u5165\u7684\u6307\u4ee4\u5b58\u5165skidbuffer \u5982\u679c\u5f53\u524d\u4e0d\u5728blocked\u6216unblocking\u72b6\u6001\uff0c\u5411decode\u53d1\u9001stall\u4fe1\u53f7 \u5982\u679c\u4e0d\u5904\u4e8eserializeStall \u72b6\u6001\uff0c\u6807\u8bb0\u81ea\u5df1\u4e3ablocked\u72b6\u6001","title":"rename stall"},{"location":"simulator/gem5_o3cpu.html#rename-unblocking","text":"\u5982\u679c\u6536\u5230\u4e86dispatch \u53d1\u9001\u7684\u89e3\u9664stall\u4fe1\u53f7\uff0crename\u53ef\u80fd\u8fdb\u5165unblocking\u72b6\u6001\uff0c\u4eceskidbuffer\u4e2d\u53d6\u6307\u4ee4\u8fdb\u884crename\u64cd\u4f5c\u3002\u5f53skidbuffer\u4e2d\u6ca1\u6709\u6307\u4ee4\u65f6\uff0c\u53d1\u9001\u89e3\u9664stall\u4fe1\u53f7\u7ed9decode stage","title":"rename unblocking"},{"location":"simulator/gem5_o3cpu.html#serilizebefore-and-serilizeafter","text":"serializeBefore makes the instruction wait in rename until the ROB is empty. serializeAfter marks the next instruction as serializeBefore serializeBefore\u7c7b\u6307\u4ee4\uff1a mrs fetch\u5230mrs\u6307\u4ee4\uff0c\u5206\u914did=52 561000: system.cpu.fetch: [tid:0] Instruction PC (0xcc=>0xd0).(0=>1) created [sn:52]. 561000: system.cpu.fetch: [tid:0] Instruction is: mrs x0, id_aa64pfr0_el1 \u56e0\u4e3a fetch -> decode \u7684\u5ef6\u8fdf\u4e3a3\uff0cdecode -> rename \u5ef6\u8fdf\u4e3a2\uff0c \u6240\u4ee55\u4e2acycle\u4e4b\u540e\uff0crename\u6536\u5230mrs\u6307\u4ee4 \u5224\u65ad\u6307\u4ee4\u643a\u5e26IsSerializeBefore\u6807\u8bb0,\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c \u4e0d\u5bf9\u8be5\u6307\u4ee4\u8fdb\u884crename\u64cd\u4f5c\u3002 \u72b6\u6001\u673a\u8f6c\u4e3aSerializeStall\u72b6\u6001 \u8be5\u6307\u4ee4\u4e4b\u524d\u7684\u6307\u4ee4\u53d1\u9001\u7ed9dispatch \u5269\u4f59\u7684\u6307\u4ee4\u5b58\u5165skidbuffer \u53cd\u538bstall\u4fe1\u53f7\u7ed9decode 563500: system.cpu.rename: [tid:0] Processing instruction [sn:52] with PC (0xcc=>0xd0).(0=>1). 563500: system.cpu.rename: Serialize before instruction encountered. 563500: system.cpu.rename: [tid:0] Blocking. \u63a5\u4e0b\u6765\uff0c\u4f1a\u4e00\u76f4\u7b49\u5f85ROB empty(\u5b9e\u9645\u4e0a\u8981no on the fly && ROB empty) 564500: system.cpu.rename: [tid:0] Stall: Serialize stall and ROB is not empty. 564500: system.cpu.rename: [tid:0] Blocking. \u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e\uff0c\u6307\u4ee451\u63d0\u4ea4\u4e86\uff0c\u610f\u5473\u7740mrs\u6307\u4ee4\u4e4b\u524d\u7684\u6307\u4ee4\u90fd\u63d0\u4ea4\u4e86\uff0c\u56e0\u6b64ROB\u6b64\u65f6\u5904\u4e8eempty\u72b6\u6001 567000: system.cpu.commit: [tid:0] [sn:51] Committing instruction with PC (0xc8=>0xcc).(0=>1) 567000: system.cpu.rob: [tid:0] Retiring head instruction, instruction PC (0xc8=>0xcc).(0=>1), [sn:51] \u6240\u4ee5\u4e0b\u4e00\u4e2acycle,rename\u8fdb\u5165unblocking\u72b6\u6001\uff0c\u7ee7\u7eed\u8fdb\u884crename 567500: system.cpu.rename: [tid:0] Done with serialize stall, switching to unblocking. 567500: system.cpu.rename: [tid:0] Trying to unblock. 567500: system.cpu.rename: [tid:0] Processing instruction [52] with PC (0xcc=>0xd0).(0=>1). serilizeAfter\u7c7b\u6307\u4ee4\uff1a rfe(return from exception) only arch32 support? svc(supervisor call to EL1) hvc(supervisor call to EL2) smc(secure monitor call to EL3) hlt(halt) eret(exception return) msr(move to system registers) wfe(wait for exception) wfi(wait for interrupt) mcr( arch32 only?) setend(arch32 only?) dsb(Data Synchronization Barrier) cps(change pe status) arch32 only? brk(breakpoint) msr\u6307\u4ee4\u4e3e\u4f8b\uff0cid=43,\u5b83\u7684\u4e0b\u4e00\u6761\u662fadr\u6307\u4ee4\uff0cid=44 474500: system.cpu.fetch: [tid:0] Instruction PC (0xa8=>0xac).(0=>1) created [sn:43]. 474500: system.cpu.fetch: [tid:0] Instruction is: msr vbar_el3, x1 475000: system.cpu.fetch: [tid:0] Instruction PC (0xac=>0xb0).(0=>1) created [sn:44]. 475000: system.cpu.fetch: [tid:0] Instruction is: adr x1, #85840 \u82e5\u5e72cycle\u4e4b\u540e\uff0crename\u5904\u7406msr\u6307\u4ee4\uff0c\u8bc6\u522b\u4e3aserializeAfter\u6307\u4ee4,43\u53f7\u6307\u4ee4\u6b63\u5e38\u8fdb\u884crename\uff0c\u5e76\u4e14\u53d1\u7ed9IEW, \u540e\u9762\u768444\u53f7\u6307\u4ee4 480500: system.cpu.rename: [tid:0] Processing instruction [sn:43] with PC (0xa8=>0xac).(0=>1). 480500: system.cpu.rename: Serialize after instruction encountered. 480500: system.cpu.rename: [tid:0] [sn:43] Adding instruction to history buffer (size=3). 480500: system.cpu.rename: [tid:0] Sending instructions to IEW. 480500: system.cpu.rename: [tid:0] Removing [sn:44] PC:(0xac=>0xb0).(0=>1) from rename skidBuffer 480500: system.cpu.rename: [tid:0] Processing instruction [sn:44] with PC (0xac=>0xb0).(0=>1). 480500: system.cpu.rename: Serialize before instruction encountered. 480500: system.cpu.rename: [tid:0] Blocking. 43\u53f7\u6307\u4ee4\u63d0\u4ea4\u4e86 485500: system.cpu.commit: [tid:0] [sn:43] Committing instruction with PC (0xa8=>0xac).(0=>1) 485500: system.cpu.rob: [tid:0] Retiring head instruction, instruction PC (0xa8=>0xac).(0=>1), [sn:43] \u4e0b\u4e00\u4e2acycle,44\u53f7\u6307\u4ee4\u53ef\u4ee5\u7ee7\u7eedrename 486000: system.cpu.rename: [tid:0] Done with serialize stall, switching to unblocking. 486000: system.cpu.rename: [tid:0] Trying to unblock. 486000: system.cpu.rename: [tid:0] Processing instruction [44] with PC (0xac=>0xb0).(0=>1). 486000: system.cpu.rename: [tid:0] Instruction must be processed by rename. Adding to front of list. 486000: system.cpu.rename: [tid:0] Sending instructions to IEW. 486000: system.cpu.rename: [tid:0] Processing instruction [sn:44] with PC (0xac=>0xb0).(0=>1).","title":"serilizeBefore and serilizeAfter"},{"location":"simulator/gem5_o3cpu.html#iew","text":"IEW stage \u6df7\u5408\u4e86dispatch,issue,execute,writeback\u7684\u64cd\u4f5c\u3002\u5b83\u662f\u591a\u4e2astage\u5408\u5e76\u5728\u4e86\u4e00\u8d77\u3002 dispath\u5b9e\u73b0\u4e86\u5c06rename\u4e4b\u540e\u7684\u6307\u4ee4\u653e\u5230issueQueue\u4e2d\u7684\u64cd\u4f5c\uff0cO3CPU\u4e2d\uff0c\u5b9e\u73b0\u4e86InstQueue,LoadQueue,StoreQueue,\u4e09\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u8fd9\u4e0d\u610f\u5473\u7740\u5b83\u6240\u6a21\u62df\u7684\u786c\u4ef6\u53ea\u6709\u4e09\u4e2a\u961f\u5217\uff0c\u8981\u4ece\u6574\u4f53\u6548\u679c\u4e0a\u5206\u6790\u3002","title":"IEW"},{"location":"simulator/gem5_o3cpu.html#_3","text":"\u4e3e\u4f8b\u4e00\u6bb5\u987a\u5e8f\u6307\u4ee4\uff0c\u53ef\u4ee5\u770b\u51fa\uff0c\u5bf9\u4e8e\u6267\u884c\u5468\u671f\u4e3a1\u7684\u6307\u4ee4\uff0c\u6307\u4ee4\u53ef\u4ee5\u80cc\u9760\u80cc\u6267\u884c\u3002\u5982\u679c\u6307\u4ee4\u6240\u6709\u7684\u6e90\u90fdready,\u90a3\u4e48\u5728dispath\u7684\u540c\u65f6\u5c31\u80fd\u8fdb\u884c\u4ef2\u88c1\u3002\u6267\u884c\u4e4b\u540e\u6709\u4e00\u4e2a\u53ef\u4ee5\u8ba4\u4e3a\u662fwriteback\u7684\u8fc7\u7a0b\uff0c\u5b9e\u9645\u4e0a\u7684\u5524\u9192\u64cd\u4f5c\u5728\u6267\u884c\u7684\u6700\u540e\u4e00\u4e2acycle\u5c31\u8fdb\u884c\u4e86","title":"\u4e00\u822c\u6d41\u7a0b"},{"location":"simulator/gem5_o3cpu.html#atomic","text":"","title":"atomic\u7c7b\u6307\u4ee4"},{"location":"simulator/gem5_o3cpu.html#_4","text":"CAS,CASA,CASL,CASAL CASB,CASAB,CASLB,CASALB CASH,CASAH,CASLH,CASALH CASP,CASPA,CASPL,CASPAL","title":"\u539f\u5b50\u6bd4\u8f83\u4ea4\u6362"},{"location":"simulator/gem5_o3cpu.html#_5","text":"SWP, SWPA, SWPAL, SWPL SWPB, SWPAB, SWPALB, SWPLB, SWPH, SWPAH, SWPALH, SWPLH","title":"\u539f\u5b50\u4ea4\u6362"},{"location":"simulator/gem5_o3cpu.html#_6","text":"LDADD,LDADDA,LDADDAL,LDADDL, LDADDH,LDADDAH,LDADDALH,LDADDLH, LDADDB,LDADDAB,LDADDALB,LDADDLB STADD, STADDL, STADDB, STADDLB, STADDH, STADDLH","title":"\u539f\u5b50\u7d2f\u52a0"},{"location":"simulator/gem5_o3cpu.html#_7","text":"LDCLR,LDCLRA,LDCLRAL,LDCLRL LDCLRB, LDCLRAB, LDCLRALB, LDCLRLB, LDCLRH, LDCLRAH, LDCLRALH, LDCLRLH STCLR, STCLRL, STCLRB, STCLRLB, STCLRH, STCLRLH LDEOR, LDEORA, LDEORAL, LDEORL LDEORB, LDEORAB, LDEORALB, LDEORLB, LDEORH, LDEORAH, LDEORALH, LDEORLH STEOR, STEORL, STEORB, STEORLB, STEORH, STEORLH LDSET, LDSETA, LDSETAL, LDSETL LDSETB, LDSETAB, LDSETALB, LDSETLB, LDSETH, LDSETAH, LDSETALH, LDSETLH STSET, STSETL, STSETB, STSETLB, STSETH, STSETLH","title":"\u539f\u5b50\u4f4d\u64cd\u4f5c"},{"location":"simulator/gem5_o3cpu.html#_8","text":"LDSMAX, LDSMAXA, LDSMAXAL, LDSMAXL LDUMAX, LDUMAXA, LDUMAXAL, LDUMAXL LDSMAXB, LDSMAXAB, LDSMAXALB, LDSMAXLB LDUMAXB, LDUMAXAB, LDUMAXALB, LDUMAXLB LDSMAXH, LDSMAXAH, LDSMAXALH, LDSMAXLH LDUMAXH, LDUMAXAH, LDUMAXALH, LDUMAXLH STSMAX, STSMAXL, STSMAXB, STSMAXLB, STSMAXH, STSMAXLH STUMAX, STUMAXL, STUMAXB, STUMAXLB, STUMAXH, STUMAXLH LDSMIN, LDSMINA, LDSMINAL, LDSMINL LDUMIN, LDUMINA, LDUMINAL, LDUMINL LDSMINB, LDSMINAB, LDSMINALB, LDSMINLB LDUMINB, LDUMINAB, LDUMINALB, LDUMINLB LDSMINH, LDSMINAH, LDSMINALH, LDSMINLH LDUMINH, LDUMINAH, LDUMINALH, LDUMINLH STSMIN, STSMINL, STSMINB, STSMINLB, STSMINH, STSMINLH STUMIN, STUMINL, STUMINB, STUMINLB, STUMINH, STUMINLH","title":"\u539f\u5b50\u6bd4\u8f83"},{"location":"simulator/gem5_o3cpu.html#iew-squash","text":"todo...","title":"iew squash"},{"location":"simulator/gem5_o3cpu.html#_9","text":"\u5bf9\u4e8e\u4e0d\u80fd\u5192\u9669\u6267\u884c\u7684\u6307\u4ee4\uff0c\u5728Gem5\u7684\u4e71\u5e8fCPU\u6a21\u578b\u4e2d\uff0c\u4f1a\u5c06\u8fd9\u7c7b\u6307\u4ee4\u5355\u72ec\u8bb0\u5f55\u5728\u4e00\u4e2a\u8868\u4e2d\uff0c\u5e76\u4e14\u8bbe\u7f6e\u8fd9\u7c7b\u6307\u4ee4\u4e3aCanCommit, \u8fd9\u6837\uff0c\u5728commit stage, \u5982\u679c\u5904\u7406\u5230\u8fd9\u6761\u6307\u4ee4\uff0c\u5c31\u4f1a\u53bb\u5c1d\u8bd5\u63d0\u4ea4\uff0c\u4f46\u5728\u63d0\u4ea4\u7684\u65f6\u5019\u4f1a\u53d1\u73b0\uff0c\u8fd9\u6761\u6307\u4ee4\u6ca1\u6709\u6267\u884c\uff0c\u7f3a\u5c11isExecuted\u6807\u8bb0\uff0c\u5c31\u80fd\u8bc6\u522b\u51fa\u8fd9\u662f\u4e0d\u80fd\u5192\u9669\u6267\u884c\u7684\u6307\u4ee4\uff0c\u4e00\u76f4\u7b49\u5230\u6240\u6709\u7684store\u6307\u4ee4\u90fd\u5df2\u7ecf\u5199\u56de\uff0ccommit\u4f1a\u4f20\u9012\u53ef\u4ee5\u6267\u884c\u4fe1\u53f7\u7ed9\u53d1\u5c04stage,\u8fd9\u6761\u6307\u4ee4\u624d\u4f1a\u53bb\u6267\u884c\u3002 \u4ee5\u4e0b\u7c7b\u522b\u7684\u6307\u4ee4\u90fd\u662f\u4e0d\u80fd\u5192\u9669\u6267\u884c\u7684\u6307\u4ee4 atomic StoreConditional stlxr, stlxrh, stlxrb, stxr, stxrb, stxrh, stlxp, stxp, strex, strexh, strexb, strexd, stlex, stlexb, stlexh, stlexd ReadBarrier stlr, stlrb, stlrh, hlt, dmb, dsb, ... WriteBarrier NonSpeculative sev, svc, hlt, smc, ... \u8fd9\u7c7b\u6307\u4ee4\u7684\u5904\u7406\u6d41\u7a0b\u5982\u4e0b\uff1a 46\u53f7\u6307\u4ee4\u662fldadd\u6307\u4ee4\uff0c\u662f\u4e00\u6761atomic\u6307\u4ee4\uff0c \u5b83\u524d\u9762\u768445\u53f7\u6307\u4ee4\u662f\u4e00\u6761store\u6307\u4ee4 517500: system.cpu.fetch: [tid:0] Instruction PC (0xb0=>0xb4).(0=>1) created [sn:45]. 517500: system.cpu.fetch: [tid:0] Instruction is: str x4, [x7] 517500: system.cpu.fetch: [tid:0] Instruction PC (0xb4=>0xb8).(0=>1) created [sn:46]. 517500: system.cpu.fetch: [tid:0] Instruction is: ldadd64 x8, x1, [x6] \u5728dispatch\u65f6\uff0c\u5c06\u8fd9\u6761\u6307\u4ee4\u989d\u5916\u7684\u8bb0\u5f55\u5728\u4e86\u4e00\u4e2a\u540d\u4e3anonSpecInsts\u7684\u7ed3\u6784\u4e2d\uff0c\u5e76\u4e14atomic\u6307\u4ee4\u4f1a\u5b58\u653e\u5728\u53d1\u5c04\u961f\u5217\u7684StoreQueue\u4e2d\uff0c\u5e76\u4e14\u8fd9\u6761\u6307\u4ee4\u4e5f\u88ab\u8bb0\u5f55\u5728\u4e86ROB\u4e2d\uff0c\u5e76\u4e14\u4e0d\u662fROB\u7684\u5934 520500: system.cpu.iew: [tid:0] Issue: Adding PC (0xb4=>0xb8).(0=>1) [sn:46] [tid:0] to IQ. 520500: system.cpu.iew: [tid:0] Issue: Memory instruction encountered, adding to LSQ. 520500: system.cpu.iew.lsq.thread0: Inserting store PC (0xb4=>0xb8).(0=>1), idx:3 [sn:46] 520500: system.cpu.iq: Adding non-speculative instruction [sn:46] PC (0xb4=>0xb8).(0=>1) to the IQ. 520500: memdepentry: Memory dependency entry created. memdep_count=2 (0xb4=>0xb8).(0=>1) 520500: system.cpu.memDep0: Inserting store/atomic PC (0xb4=>0xb8).(0=>1) [sn:46]. 520500: system.cpu.commit: [tid:0] [sn:46] Inserting PC (0xb4=>0xb8).(0=>1) into ROB. 520500: system.cpu.rob: Adding inst PC (0xb4=>0xb8).(0=>1) to the ROB. 520500: system.cpu.rob: [tid:0] Now has 2 instructions. 45\u53f7\u6307\u4ee4\u80fd\u591f\u63d0\u4ea4\uff0c\u8fd9\u65f6\u53d1\u73b0\u540e\u9762\u768446\u53f7\u6307\u4ee4\u662f\u4e00\u6761nonSpec\u6307\u4ee4\uff0c\u5b83\u8981\u7b49\u5230\u524d\u9762\u6240\u6709\u7684\u6307\u4ee4\u90fd\u63d0\u4ea4,\u5e76\u4e14\u6240\u6709\u7684store\u6307\u4ee4\u90fd\u5b8c\u6210\u5199\u56de\u3002\u56e0\u6b64commit\u4f1a\u4e00\u76f4\u5361\u5728\u8fd9\u6761\u6307\u4ee4 522500: system.cpu.commit: Trying to commit head instruction, [tid:0] [sn:45] 522500: system.cpu.commit: [tid:0] [sn:45] Committing instruction with PC (0xb0=>0xb4).(0=>1) 522500: system.cpu.rob: [tid:0] Retiring head instruction, instruction PC (0xb0=>0xb4).(0=>1), [sn:45] 522500: system.cpu: Removing committed instruction [tid:0] PC (0xb0=>0xb4).(0=>1) [sn:45] 522500: system.cpu.commit: Trying to commit head instruction, [tid:0] [sn:46] 522500: system.cpu.commit: Encountered a barrier or non-speculative instruction [tid:0] [sn:46] at the head of the ROB, PC (0xb4=>0xb8).(0=>1). 522500: system.cpu.commit: [tid:0] [sn:46] Waiting for all stores to writeback. 522500: system.cpu.commit: Unable to commit head instruction PC:(0xb4=>0xb8).(0=>1) [tid:0] [sn:46]. \u8fc7\u4e86\u5f88\u957f\u65f6\u95f4\uff0c\u524d\u9762\u7684store\u6307\u4ee4\u5199\u56de\u4e86\uff0c\u5728\u4e0b\u4e00\u4e2acycle,commit\u53d1\u9001\u4e00\u7ec4nonSpecSeqNum\u4fe1\u53f7\u7ed9\u53d1\u5c04\u961f\u5217\u4ef2\u88c1\u903b\u8f91 567000: system.cpu.commit: Trying to commit instructions in the ROB. 567000: system.cpu.commit: Trying to commit head instruction, [tid:0] [sn:46] 567000: system.cpu.commit: Encountered a barrier or non-speculative instruction [tid:0] [sn:46] at the head of the ROB, PC (0xb4=>0xb8).(0=>1). 567000: system.cpu.commit: Unable to commit head instruction PC:(0xb4=>0xb8).(0=>1) [tid:0] [sn:46]. 567000: system.cpu.commit: [tid:0] Can't commit, Instruction [sn:46] PC (0xb4=>0xb8).(0=>1) is head of ROB and not ready \u4e0b\u4e00\u4e2acycle, \u53d1\u5c04\u961f\u5217\u7684\u4ef2\u88c1\u903b\u8f91\u6536\u5230nonSpecSeqNum\u4fe1\u53f7\uff0c\u6807\u8bb046\u53f7\u6307\u4ee4ready 567500: system.cpu.iq: Marking nonspeculative instruction [sn:46] as ready to execute. 567500: system.cpu.memDep0: Marking non speculative instruction PC (0xb4=>0xb8).(0=>1) as ready [sn:46]. 567500: system.cpu.memDep0: Adding instruction [sn:46] to the ready list. 567500: system.cpu.iq: Instruction is ready to issue, putting it onto the ready list, PC (0xb4=>0xb8).(0=>1) opclass:48 [sn:46]. \u4e0b\u4e00\u4e2acycle, \u5c0646\u53f7\u6307\u4ee4\u53d1\u5c04\u51fa\u53bb 568000: system.cpu.iq: Thread 0: Issuing instruction PC (0xb4=>0xb8).(0=>1) [sn:46] 568000: system.cpu.memDep0: Issuing instruction PC 0xb4 [sn:46]. \u4e24\u4e2acycle\u4e4b\u540e,\u6307\u4ee4\u771f\u6b63\u7684\u6267\u884c 569000: system.cpu.iew: Execute: Processing PC (0xb4=>0xb8).(0=>1), [tid:0] [sn:46]. 569000: system.cpu.iew: Execute: Calculating address for memory reference. 569000: system.cpu.iew.lsq.thread0: Executing store PC (0xb4=>0xb8).(0=>1) [sn:46] 569000: global: RegFile: Access to int register 78, has data 0x140 569000: global: RegFile: Access to int register 50, has data 0 569000: global: RegFile: Access to int register 77, has data 0x2 569000: system.cpu.iew.lsq.thread0: Doing write to store idx 3, addr 0x140 | storeHead:3 [sn:46] 569000: system.cpu: Activity: 6 569000: system.cpu.iq: Attempting to schedule ready instructions from the IQ. 569000: system.cpu.iq: Not able to schedule any instructions. 569000: system.cpu.iew.lsq: [tid:0] Writing back stores. 1 stores available for Writeback. 569000: system.cpu.iew.lsq.thread0: D-Cache: Writing back store idx:4 PC:(0xb4=>0xb8).(0=>1) to Addr:0x140, data:0 [sn:46] 569000: system.cpu.iew.lsq.thread0: Memory request (pkt: SwapReq [140:147] (s) UC) from inst [sn:46] was sent (cache is blocked: 0, cache_got_blocked: 0) \u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e\uff0c\u6307\u4ee4\u6267\u884c\u5b8c\u6210,LSU\u6807\u8bb0\u6307\u4ee4\u5b8c\u6210 613000: system.cpu.iew.lsq.thread0: Completing store [sn:46], idx:3, store head idx:4 613000: system.cpu.iew: Sending instructions to commit, [sn:46] PC (0xb4=>0xb8).(0=>1). 613000: system.cpu.iq: Waking dependents of completed instruction. 613000: system.cpu.memDep0: Completed mem instruction PC (0xb4=>0xb8).(0=>1) [sn:46]. 613000: memdepentry: Memory dependency entry deleted. memdep_count=5 (0xb4=>0xb8).(0=>1) 613000: system.cpu.iq: Completing mem instruction PC: (0xb4=>0xb8).(0=>1) [sn:46] \u4e0b\u4e00\u4e2acycle,ROB\u6807\u8bb0\u6307\u4ee4\u53ef\u4ee5\u63d0\u4ea4 613500: system.cpu.commit: [tid:0] Marking PC (0xb4=>0xb8).(0=>1), [sn:46] ready within ROB. 613500: system.cpu.commit: [tid:0] Instruction [sn:46] PC (0xb4=>0xb8).(0=>1) is head of ROB and ready to commit \u4e0b\u4e00\u4e2acycle, \u6307\u4ee4retire 614000: system.cpu.commit: Trying to commit head instruction, [tid:0] [sn:46] 614000: system.cpu.commit: [tid:0] [sn:46] Committing instruction with PC (0xb4=>0xb8).(0=>1) 614000: system.cpu.rob: [tid:0] Retiring head instruction, instruction PC (0xb4=>0xb8).(0=>1), [sn:46]","title":"\u4e0d\u80fd\u5192\u9669\u6267\u884c\u7684\u6307\u4ee4"},{"location":"simulator/gem5_o3cpu.html#_10","text":"\u4ece\u6574\u4f53\u903b\u8f91\u4e0a\u770b\uff0cGem5\u5b9e\u73b0\u7684\u53d1\u5c04\u961f\u5217\u662f\u5b8c\u5168\u7684age\u4f18\u5148\u7684\u903b\u8f91\uff0c\u800c\u4e14\u4f3c\u4e4e\u662f\u975e\u5b58\u50a8\u6307\u4ee4\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5927\u961f\u5217\uff0c\u8fd9\u4e2a\u961f\u5217\u652f\u6301issue_width\u7684\u4ef2\u88c1\uff0c\u80fd\u591f\u4f18\u5148\u6311\u9009\u51faoldest\u7684\u591a\u6761\u6307\u4ee4 \u5176\u4e2ddependGraph\u5904\u7406\u975e\u5b58\u50a8\u6307\u4ee4\u7684\u5bc4\u5b58\u5668\u4f9d\u8d56\uff0c\u4ee5\u7269\u7406\u5bc4\u5b58\u5668\u7f16\u53f7\u8fdb\u884c\u5bfb\u5740\uff0caddToProducers()\u63a5\u53e3\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u6307\u4ee4\uff0c\u5730\u5740\u4e3a\u8fd9\u4e2a\u6307\u4ee4\u7684\u76ee\u7684\u5bc4\u5b58\u5668\u7f16\u53f7\u3002 addToDependents()\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u6307\u4ee4\uff0c\u5730\u5740\u4e3a\u8fd9\u4e2a\u6307\u4ee4\u7684\u6e90\u7269\u7406\u5bc4\u5b58\u5668\u7f16\u53f7\uff0c\u5982\u679c\u4e00\u6761\u6307\u4ee4\u6709\u591a\u4e2a\u6e90\uff0c\u90a3\u4e48\u4f1a\u6dfb\u52a0\u5230\u591a\u6761\u4f9d\u8d56\u94fe\u4e0a\uff0c\u540c\u4e00\u6761\u4f9d\u8d56\u94fe\u4e0a\u7684\u6307\u4ee4\u4ee5\u94fe\u8868\u7684\u5f62\u5f0f\u7ba1\u7406\u3002 readyInst\u5b58\u653e\u4e86\u76ee\u524d\u6240\u6709\u7684\u5df2\u7ecfready\u7684\u6307\u4ee4\uff0c\u6309\u7167opclass\u7f16\u53f7\u8fdb\u884c\u5bfb\u5740\u3002\u6bcf\u4e00\u4e2aopclass\u4e2d\u6700\u8001\u7684\u6307\u4ee4\u88ab\u653e\u5728\u4e86\u4e00\u4e2a\u540d\u4e3alistorder\u7684\u6309\u7167age\u6392\u5e8f\u7684\u6709\u5e8f\u961f\u5217\u4e2d\uff0c\u53d1\u5c04\u6307\u4ee4\u65f6\uff0c\u4ecelistorder\u4e2d\u6309\u7167\u987a\u5e8f\u8fdb\u884c\u53d1\u5c04\uff0c\u5982\u679c\u67d0\u4e00\u4e2aopclass\u7684\u6307\u4ee4\u88ab\u53d1\u5c04\u4e86\uff0c\u90a3\u4e48\u4f1a\u4ece\u90a3\u4e2aopclass\u7684readylist\u4e2d\u627e\u5230yonger\u7684\u6307\u4ee4\u7ee7\u7eed\u6dfb\u52a0\u5230listorder\u4e2d \u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5b8c\u5168age\u4f18\u5148\u7684\u4ef2\u88c1\u903b\u8f91","title":"\u53d1\u5c04\u961f\u5217\u4ef2\u88c1\u903b\u8f91"},{"location":"simulator/gem5_o3cpu.html#_11","text":"Gem5\u4f7f\u7528FU\u62bd\u8c61\u6765\u7ba1\u7406\u8ba1\u7b97\u5355\u5143\uff0c\u5bf9\u4e8e\u4e00\u822c\u7684\u6307\u4ee4\uff0c\u6267\u884c\u65f6\u95f4\u90fd\u662f\u786e\u5b9a\u7684\uff0c\u901a\u8fc7\u6ce8\u518cFUCompletion\u4e8b\u4ef6\u6765\u5b9e\u73b0\u6a21\u62df\u6307\u4ee4\u5728\u8fd0\u7b97\u5355\u5143\u4e2d\u82b1\u8d39\u7684\u5468\u671f\uff0c\u4e8b\u4ef6\u5b8c\u6210\u4f1a\u5728\u4e0b\u4e00\u62cd\u91ca\u653e\u5360\u7528\u7684FU. \u540d\u4e3aissueToExecQueue\u7684\u961f\u5217\u5b58\u653e\u4e86\u5728\u4e0b\u4e00\u62cd\u5c31\u80fd\u6267\u884c\u5b8c\u7684\u6307\u4ee4\uff0c\u5728\u4e0b\u4e00\u4e2a\u5468\u671f\uff0cexec stage\u5904\u7406\u961f\u5217\u4e2d\u7684\u6307\u4ee4\uff0c\u8c03\u7528\u6307\u4ee4\u7684\u6267\u884c\u51fd\u6570\uff0c\u5c06\u5904\u7406\u5b8c\u7684\u6307\u4ee4\u653e\u5230iewQueue\u4e2d\uff0c\u540c\u65f6\u8fdb\u884cwriteback\u64cd\u4f5c.","title":"\u6267\u884c\u8fc7\u7a0b\u7684\u6d41\u6c34\u7ebf"},{"location":"simulator/gem5_o3cpu.html#_12","text":"","title":"\u6267\u884c\u8fc7\u7a0b\u4e2d\u7684\u5206\u652f\u9884\u6d4b\u9519\u8bef"},{"location":"simulator/gem5_o3cpu.html#lsu","text":"todo...","title":"LSU"},{"location":"simulator/gem5_o3cpu.html#commit","text":"","title":"commit"},{"location":"simulator/gem5_o3cpu.html#squash_3","text":"sn:1639 \u662f\u4e00\u6761b.eq\u6307\u4ee4 3021500: system.cpu.fetch: [tid:0] Instruction PC (0x6008=>0x600c).(0=>1) created [sn:1639]. 3021500: system.cpu.fetch: [tid:0] Instruction is: b.eq 0x61ec 3021500: system.cpu.fetch: [tid:0] Fetch queue entry created (3/32). 3021500: system.cpu.fetch: [tid:0] [sn:1639] Branch at PC 0x6008 predicted to be not taken 3021500: system.cpu.fetch: [tid:0] [sn:1639] Branch at PC 0x6008 predicted to go to (0x600c=>0x6010).(0=>1) \u6267\u884c\u65f6\u53d1\u73b0\u5206\u652f\u9884\u6d4b\u9519\u8bef(cycle0) 3027500: system.cpu.iew: [tid:0] [sn:1639] Execute: Branch mispredict detected. 3027500: system.cpu.iew: [tid:0] [sn:1639] Predicted target was PC: (0x600c=>0x6010).(0=>1) 3027500: system.cpu.iew: [tid:0] [sn:1639] Execute: Redirecting fetch to PC: (0x6008=>0x61ec).(0=>1) \u4e0b\u4e00\u4e2acycle(cycle1)\uff0ccommit\u54cd\u5e94\u5206\u652f\u9884\u6d4b\u9519\u8bef\uff0c\u53d1\u8d77squash\u64cd\u4f5c,squash\u5bbd\u5ea6\u4e3a8\uff0c\u56e0\u6b64\u53ea\u80fdsquash\u52301641\u53f7\u6307\u4ee4 3028000: system.cpu.commit: [tid:0] Squashing due to branch mispred PC:0x6008 [sn:1639] 3028000: system.cpu.commit: [tid:0] Redirecting to PC (0x61ec=>0x61f0).(0=>1) 3028000: system.cpu.rob: Starting to squash within the ROB. 3028000: system.cpu.rob: [tid:0] Squashing instructions until [sn:1639]. 3028000: system.cpu.rob: [tid:0] Squashing instruction PC (0x6038=>0x603c).(0=>1), seq num 1653. 3028000: system.cpu.rob: [tid:0] Squashing instruction PC (0x6034=>0x6038).(0=>1), seq num 1652. 3028000: system.cpu.rob: [tid:0] Squashing instruction PC (0x6030=>0x6034).(0=>1), seq num 1651. 3028000: system.cpu.rob: [tid:0] Squashing instruction PC (0x602c=>0x6030).(0=>1), seq num 1650. 3028000: system.cpu.rob: [tid:0] Squashing instruction PC (0x6028=>0x602c).(0=>1), seq num 1649. 3028000: system.cpu.rob: [tid:0] Squashing instruction PC (0x6024=>0x6028).(0=>1), seq num 1648. 3028000: system.cpu.rob: [tid:0] Squashing instruction PC (0x6020=>0x6024).(2=>3), seq num 1647. 3028000: system.cpu.rob: [tid:0] Squashing instruction PC (0x6020=>0x6024).(1=>2), seq num 1646. \u4e0b\u4e00\u4e2acycle(cycle2)\uff0crename stage\u6536\u5230squash\u4fe1\u53f7\uff0c\u5229\u7528 history buffer \u6062\u590d RAT, \u4e00\u62cd\u5185\u5b8c\u6210\u6062\u590d 3028500: system.cpu.rename: [tid:0] Squashing instructions due to squash from commit. 3028500: system.cpu.rename: [tid:0] [squash sn:1639] Squashing instructions. 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1657 (archReg: 0, newPhysReg: 27, prevPhysReg: 14). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1656 (archReg: 3, newPhysReg: 31, prevPhysReg: 80). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1655 (archReg: 0, newPhysReg: 14, prevPhysReg: 112). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1654 (archReg: 2, newPhysReg: 125, prevPhysReg: 118). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1653 (archReg: 0, newPhysReg: 112, prevPhysReg: 107). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1652 (archReg: 1, newPhysReg: 71, prevPhysReg: 108). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1651 (archReg: 2, newPhysReg: 118, prevPhysReg: 122). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1649 (archReg: 1, newPhysReg: 605, prevPhysReg: 602). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1649 (archReg: 2, newPhysReg: 604, prevPhysReg: 601). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1649 (archReg: 0, newPhysReg: 603, prevPhysReg: 600). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1649 (archReg: 0, newPhysReg: 65535, prevPhysReg: 65535). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1645 (archReg: 35, newPhysReg: 117, prevPhysReg: 46). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1643 (archReg: 1, newPhysReg: 602, prevPhysReg: 599). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1643 (archReg: 2, newPhysReg: 601, prevPhysReg: 598). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1643 (archReg: 0, newPhysReg: 600, prevPhysReg: 597). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1643 (archReg: 0, newPhysReg: 65535, prevPhysReg: 65535). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1642 (archReg: 3, newPhysReg: 80, prevPhysReg: 127). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1641 (archReg: 1, newPhysReg: 108, prevPhysReg: 11). 3028500: system.cpu.rename: [tid:0] Removing history entry with sequence number 1640 (archReg: 1, newPhysReg: 11, prevPhysReg: 64). issue stage \u6536\u5230commit\u53d1\u6765\u7684squash\u4fe1\u53f7\uff0c\u8fdb\u5165squash\u72b6\u6001\uff0c\u6e05\u9664queue\u4e2d\u9700\u8981squash\u7684\u6307\u4ee4 3028500: system.cpu.iew: [tid:0] Squashing all instructions. 3028500: system.cpu.iq: [tid:0] Starting to squash instructions in the IQ. 3028500: system.cpu.iq: [tid:0] Squashing until sequence number 1639! 3028500: system.cpu.iq: [tid:0] Instruction [sn:1654] PC (0x603c=>0x6040).(0=>1) squashed. 3028500: system.cpu.iq: [tid:0] Instruction [sn:1653] PC (0x6038=>0x603c).(0=>1) squashed. 3028500: system.cpu.iq: [tid:0] Instruction [sn:1651] PC (0x6030=>0x6034).(0=>1) squashed. 3028500: system.cpu.iq: [tid:0] Instruction [sn:1650] PC (0x602c=>0x6030).(0=>1) squashed. 3028500: system.cpu.iq: [tid:0] Instruction [sn:1649] PC (0x6028=>0x602c).(0=>1) squashed. 3028500: system.cpu.iq: [tid:0] Instruction [sn:1648] PC (0x6024=>0x6028).(0=>1) squashed. 3028500: system.cpu.iq: [tid:0] Instruction [sn:1647] PC (0x6020=>0x6024).(2=>3) squashed. 3028500: system.cpu.iq: [tid:0] Instruction [sn:1646] PC (0x6020=>0x6024).(1=>2) squashed. 3028500: system.cpu.iq: [tid:0] Instruction [sn:1644] PC (0x601c=>0x6020).(0=>1) squashed. 3028500: system.cpu.iq: [tid:0] Instruction [sn:1643] PC (0x6018=>0x601c).(0=>1) squashed. 3028500: system.cpu.iq: [tid:0] Instruction [sn:1642] PC (0x6014=>0x6018).(0=>1) squashed. 3028500: system.cpu.iq: [tid:0] Instruction [sn:1641] PC (0x6010=>0x6014).(0=>1) squashed. 3028500: system.cpu.iq: [tid:0] Instruction [sn:1640] PC (0x600c=>0x6010).(0=>1) squashed. commit stage\u7ee7\u7eedsquash \u6307\u4ee4\uff0c\u5e76\u4e14\u5411issue \u53d1\u9001 robsquashing \u4fe1\u53f7 3028500: system.cpu.commit: [tid:0] Still Squashing, cannot commit any insts this cycle. 3028500: system.cpu.rob: [tid:0] Squashing instructions until [sn:1639]. 3028500: system.cpu.rob: [tid:0] Squashing instruction PC (0x6020=>0x6024).(0=>1), seq num 1645. 3028500: system.cpu.rob: [tid:0] Squashing instruction PC (0x601c=>0x6020).(0=>1), seq num 1644. 3028500: system.cpu.rob: [tid:0] Squashing instruction PC (0x6018=>0x601c).(0=>1), seq num 1643. 3028500: system.cpu.rob: [tid:0] Squashing instruction PC (0x6014=>0x6018).(0=>1), seq num 1642. 3028500: system.cpu.rob: [tid:0] Squashing instruction PC (0x6010=>0x6014).(0=>1), seq num 1641. 3028500: system.cpu.rob: [tid:0] Squashing instruction PC (0x600c=>0x6010).(0=>1), seq num 1640. \u4e0b\u4e00\u4e2acycle(cycle3)\uff0ccommit\u7ee7\u7eed\u5f00\u59cb\u63d0\u4ea4\u6307\u4ee4 3029000: system.cpu.commit: Trying to commit instructions in the ROB. 3029000: system.cpu.commit: Trying to commit head instruction, [tid:0] [sn:1635] 3029000: system.cpu.commit: [tid:0] [sn:1635] Committing instruction with PC (0x5ff8=>0x5ffc).(0=>1) 3029000: system.cpu.commit: [tid:0] [sn:1636] Committing instruction with PC (0x5ffc=>0x6000).(0=>1) 3029000: system.cpu.commit: [tid:0] [sn:1637] Committing instruction with PC (0x6000=>0x6004).(0=>1) 3029000: system.cpu.commit: [tid:0] [sn:1638] Committing instruction with PC (0x6004=>0x6008).(0=>1) 3029000: system.cpu.commit: [tid:0] [sn:1639] Committing instruction with PC (0x6008=>0x61ec).(0=>1) dispatch \u548c issue stage \u56e0\u4e3a\u6536\u5230commit\u7684robsquashing\u4fe1\u53f7\uff0c\u8fdb\u5165blocking(stall)\u72b6\u6001,\u5e76\u4e14\u5c06\u81ea\u8eab\u7684stall\u72b6\u6001\u4f20\u9012\u5230rename stage 3029000: system.cpu.iew: [tid:0] ROB is still squashing. 3029000: system.cpu.iew: [tid:0] Removing incoming rename instructions 3029000: system.cpu.iew: [tid:0] Stall from Commit stage detected. 3029000: system.cpu.iew: [tid:0] Blocking. \u4e0b\u4e00\u4e2acycle(cycle4), rename\u63a5\u6536\u5230dispatch\u53d1\u9001\u7684stall\u4fe1\u53f7\uff0c\u8fdb\u5165blocking\u72b6\u6001 3029500: system.cpu.rename: [tid:0] Stall from IEW stage detected. 3029500: system.cpu.rename: [tid:0] Blocking. dispatch \u8fdb\u5165unblocking\u72b6\u6001\uff0c\u53d1\u73b0skidbuffer\u4e2d\u6ca1\u6709\u6307\u4ee4\uff0c\u8f6c\u5165running\u72b6\u6001 3029500: system.cpu.iew: [tid:0] Done blocking, switching to unblocking. 3029500: system.cpu.iew: [tid:0] Reading instructions out of the skid buffer 0. 3029500: system.cpu.iew: [tid:0] Done unblocking. 3029500: system.cpu.iew: [tid:0] Not blocked, so attempting to run dispatch. 3029500: system.cpu.iq: Attempting to schedule ready instructions from the IQ. 3029500: system.cpu.iq: Not able to schedule any instructions. \u4e0b\u4e00\u4e2acycle(cycle5), decode stage \u56e0\u4e3arename stall \u7684\u53cd\u538b\u8fdb\u5165blocking\u72b6\u6001 3030000: system.cpu.decode: [tid:0] Stall fom Rename stage detected. 3030000: system.cpu.decode: [tid:0] Blocking. \u518d\u4e0b\u4e00\u4e2acycle(cycle6), fetch stage \u6536\u5230decode\u7684stall\u4fe1\u53f7\uff0c\u4e0d\u4f1a\u4ecefetchqueue\u4e2d\u5c06\u6307\u4ee4\u9001\u7ed9decode stage \u6c47\u603b\u7684\u5404\u4e2astage\u72b6\u6001\u5982\u4e0b\u8868\u6240\u793a stage |cycle0 | cycle1 | cycle2 | cycle3 | cycle4 | cycle5 | cycle6 ---|---|---|---|---|---|---|---| fetch | running | running | squashing | running | running | running |running decode | running | running | squashing | running | running | block | unblocking rename | running |running | squashing | running | block | unblocking | running dispatch | running | running | squashing | block | unblocking | running | running issue | running | running | squashing | block | unblocking | running |running E & W | branch | mispred | - | - | - | - | - | running commit | running | squashing | squashing | running | running | running | running \u4ece\u884c\u4e3a\u4e0a\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u5206\u652f\u9884\u6d4b\u9519\u8bef\u7684\u56de\u6eda\u662f\u4f7f\u7528ROB walk\u7684\u65b9\u5f0f\u8fdb\u884c\u7684\uff0c\u4e00\u62cd\u80fd\u591f\u56de\u6eda\u7684\u6307\u4ee4\u4e2a\u6570\u53ef\u4ee5\u7531squshwidth\u6307\u5b9a","title":"\u5206\u652f\u9884\u6d4b\u5f15\u8d77\u7684squash"},{"location":"simulator/gem5_random.html","text":"\u5355\u6838\u53cc\u53d1\u5c045\u7ea7\u6d41\u6c34CPU\u7684IPC\u6027\u80fd\u5206\u6790 \u00b6 \u5206\u6790\u7ed3\u8bba \u00b6 \u5355\u6838\u53cc\u53d1\u5c045\u7ea7\u6d41\u6c34\u7684CPU\uff0c \u8dd1\u968f\u673a\u6307\u4ee4\u7684IPC \u5927\u7ea6\u4e3a0.06 CPU\u6a21\u578b\u8bf4\u660e \u00b6 Cpu\u6a21\u578b\u91c7\u7528gem5\u4e2d\u7684minorCPU, RISCV64\u67b6\u6784\u3002\u8fd9\u662f\u4e00\u4e2a\u987a\u5e8f\u4e94\u7ea7\u6d41\u6c34\u7684\u53cc\u53d1\u5c04CPU\u3002 \u6574\u4e2a\u4eff\u771f\u7cfb\u7edf\u4e3b\u8981\u7531CPU\uff0cIcache, Dcache, itlb, dtlb, membus, memctrls, DDR3 \u6784\u6210\u3002 \u91cd\u70b9\u53c2\u6570\u5982\u4e0b\uff1a L1 Dcache : 256KB\u7f13\u5b58\uff0c8\u8def\u7ec4\u76f8\u8054\uff0ccache line 64\u5b57\u8282 BPU\uff1a \u9759\u6001\u975etoken\u5206\u652f\u9884\u6d4b\u5668 FU: IntFU x 2, IntMulFU x 1, IntDivFU x 1, FloatSimdFU x 1, PredFU x 1, MemFU x 1 \u6d4b\u8bd5case\u8bf4\u660e \u00b6 \u6839\u636eRandomX\u7b97\u6cd5\u7684\u8bf4\u660e, \u53c2\u8003RandomX specs\u6587\u6863\uff0c\u6709\u5982\u4e0b\u7edf\u8ba1 \u6307\u4ee4\u7c7b\u578b \u6761\u6570\u5360\u6bd4 \u6bd4\u4f8b Integer instructions 120/256 46% Floating point instructions 92/256 36% Control instructions 26/256 10% Store instruction 16/256 6% \u6d4b\u8bd5case\u4f7f\u7528\u968f\u673a\u6307\u4ee4\u751f\u6210\u5668\u6839\u636eXMR\u7279\u6027\u8fdb\u884c\u751f\u6210\u3002\u914d\u7f6e\u968f\u673a\u6307\u4ee4\u53d1\u751f\u5668\uff0c\u4f7f\u5176\u4ea7\u751f\u7684case\u4e2d\u5404\u79cd\u6307\u4ee4\u7684\u6bd4\u91cd\u63a5\u8fd1\u4e8eRandomX \u7684\u5404\u79cd\u6307\u4ee4\u5360\u6bd4\u3002 \u6d4b\u8bd5case\u4e2d\u7684\u6307\u4ee4\u6709\u5982\u4e0b\u7279\u70b9\uff1a \u8bbf\u5b58\u7269\u7406\u5730\u5740\u8303\u56f4\u5927\u5c0f\u4e3a4MB \u6307\u4ee4\u7c7b\u578b\u6240\u5360\u6bd4\u4f8b\u4e0eRandomX\u5dee\u8ddd\u4e0d\u5927\uff0c\u4f46\u7ec6\u5206\u7c7b\u578b\u6709\u51fa\u5165\uff08\u4ece\u8be6\u7ec6\u7edf\u8ba1\u4e2d\u80fd\u591f\u770b\u51fa\uff09 \u6d4b\u8bd5\u7ed3\u679c \u00b6 \u6839\u636egem5\u7684\u7edf\u8ba1\uff0c \u6307\u4ee4\u5171\u8ba11873\u6761,\u82b1\u8d3929392\u4e2acycle , case\u4e2d\u5404\u79cd\u6307\u4ee4\u6bd4\u4f8b\u5982\u4e0b\uff1a \u7edf\u8ba1\u7c7b \u7edf\u8ba1\u503c \u6bd4\u4f8b Integer 840 44.84% Floating 611 32.62% control 215 11.48% memory 204 10.89% \u5982\u4e0b\u4e3a\u8be6\u7ec6\u7edf\u8ba1\uff1a \u5177\u4f53\u7c7b\u578b \u6761\u6570 \u6bd4\u4f8b system.cpu.numCycles 29392 system.cpu.numInsts 1873 system.cpu.numOps 1873 system.cpu.numDiscardedOps 231 system.cpu.numFetchSuspends 0 system.cpu.cpi 15.692472 system.cpu.ipc 0.063725 system.cpu.committedInstType_0::No_OpClass 3 0.16% system.cpu.committedInstType_0::IntAlu 1055 56.33% system.cpu.committedInstType_0::IntMult 0 0.00% system.cpu.committedInstType_0::IntDiv 0 0.00% system.cpu.committedInstType_0::FloatAdd 108 5.77% system.cpu.committedInstType_0::FloatCmp 128 6.83% system.cpu.committedInstType_0::FloatCvt 0 0.00% system.cpu.committedInstType_0::FloatMult 49 2.62% system.cpu.committedInstType_0::FloatMultAcc 225 12.01% system.cpu.committedInstType_0::FloatDiv 52 2.78% system.cpu.committedInstType_0::FloatMisc 0 0.00% system.cpu.committedInstType_0::FloatSqrt 49 2.62% system.cpu.committedInstType_0::SimdAdd 0 0.00% system.cpu.committedInstType_0::SimdAddAcc 0 0.00% system.cpu.committedInstType_0::SimdAlu 0 0.00% system.cpu.committedInstType_0::SimdCmp 0 0.00% system.cpu.committedInstType_0::SimdCvt 0 0.00% system.cpu.committedInstType_0::SimdMisc 0 0.00% system.cpu.committedInstType_0::SimdMult 0 0.00% system.cpu.committedInstType_0::SimdMultAcc 0 0.00% system.cpu.committedInstType_0::SimdShift 0 0.00% system.cpu.committedInstType_0::SimdShiftAcc 0 0.00% system.cpu.committedInstType_0::SimdDiv 0 0.00% system.cpu.committedInstType_0::SimdSqrt 0 0.00% system.cpu.committedInstType_0::SimdFloatAdd 0 0.00% system.cpu.committedInstType_0::SimdFloatAlu 0 0.00% system.cpu.committedInstType_0::SimdFloatCmp 0 0.00% system.cpu.committedInstType_0::SimdFloatCvt 0 0.00% system.cpu.committedInstType_0::SimdFloatDiv 0 0.00% system.cpu.committedInstType_0::SimdFloatMisc 0 0.00% system.cpu.committedInstType_0::SimdFloatMult 0 0.00% system.cpu.committedInstType_0::SimdFloatMultAcc 0 0.00% system.cpu.committedInstType_0::SimdFloatSqrt 0 0.00% system.cpu.committedInstType_0::SimdReduceAdd 0 0.00% system.cpu.committedInstType_0::SimdReduceAlu 0 0.00% system.cpu.committedInstType_0::SimdReduceCmp 0 0.00% system.cpu.committedInstType_0::SimdFloatReduceAdd 0 0.00% system.cpu.committedInstType_0::SimdFloatReduceCmp 0 0.00% system.cpu.committedInstType_0::SimdAes 0 0.00% system.cpu.committedInstType_0::SimdAesMix 0 0.00% system.cpu.committedInstType_0::SimdSha1Hash 0 0.00% system.cpu.committedInstType_0::SimdSha1Hash2 0 0.00% system.cpu.committedInstType_0::SimdSha256Hash 0 0.00% system.cpu.committedInstType_0::SimdSha256Hash2 0 0.00% system.cpu.committedInstType_0::SimdShaSigma2 0 0.00% system.cpu.committedInstType_0::SimdShaSigma3 0 0.00% system.cpu.committedInstType_0::SimdPredAlu 0 0.00% system.cpu.committedInstType_0::MemRead 165 8.81% system.cpu.committedInstType_0::MemWrite 39 2.08% system.cpu.committedInstType_0::FloatMemRead 0 0.00% system.cpu.committedInstType_0::FloatMemWrite 0 0.00%","title":"\u5355\u6838\u53cc\u53d1\u5c045\u7ea7\u6d41\u6c34CPU\u7684IPC\u6027\u80fd\u5206\u6790"},{"location":"simulator/gem5_random.html#5cpuipc","text":"","title":"\u5355\u6838\u53cc\u53d1\u5c045\u7ea7\u6d41\u6c34CPU\u7684IPC\u6027\u80fd\u5206\u6790"},{"location":"simulator/gem5_random.html#_1","text":"\u5355\u6838\u53cc\u53d1\u5c045\u7ea7\u6d41\u6c34\u7684CPU\uff0c \u8dd1\u968f\u673a\u6307\u4ee4\u7684IPC \u5927\u7ea6\u4e3a0.06","title":"\u5206\u6790\u7ed3\u8bba"},{"location":"simulator/gem5_random.html#cpu","text":"Cpu\u6a21\u578b\u91c7\u7528gem5\u4e2d\u7684minorCPU, RISCV64\u67b6\u6784\u3002\u8fd9\u662f\u4e00\u4e2a\u987a\u5e8f\u4e94\u7ea7\u6d41\u6c34\u7684\u53cc\u53d1\u5c04CPU\u3002 \u6574\u4e2a\u4eff\u771f\u7cfb\u7edf\u4e3b\u8981\u7531CPU\uff0cIcache, Dcache, itlb, dtlb, membus, memctrls, DDR3 \u6784\u6210\u3002 \u91cd\u70b9\u53c2\u6570\u5982\u4e0b\uff1a L1 Dcache : 256KB\u7f13\u5b58\uff0c8\u8def\u7ec4\u76f8\u8054\uff0ccache line 64\u5b57\u8282 BPU\uff1a \u9759\u6001\u975etoken\u5206\u652f\u9884\u6d4b\u5668 FU: IntFU x 2, IntMulFU x 1, IntDivFU x 1, FloatSimdFU x 1, PredFU x 1, MemFU x 1","title":"CPU\u6a21\u578b\u8bf4\u660e"},{"location":"simulator/gem5_random.html#case","text":"\u6839\u636eRandomX\u7b97\u6cd5\u7684\u8bf4\u660e, \u53c2\u8003RandomX specs\u6587\u6863\uff0c\u6709\u5982\u4e0b\u7edf\u8ba1 \u6307\u4ee4\u7c7b\u578b \u6761\u6570\u5360\u6bd4 \u6bd4\u4f8b Integer instructions 120/256 46% Floating point instructions 92/256 36% Control instructions 26/256 10% Store instruction 16/256 6% \u6d4b\u8bd5case\u4f7f\u7528\u968f\u673a\u6307\u4ee4\u751f\u6210\u5668\u6839\u636eXMR\u7279\u6027\u8fdb\u884c\u751f\u6210\u3002\u914d\u7f6e\u968f\u673a\u6307\u4ee4\u53d1\u751f\u5668\uff0c\u4f7f\u5176\u4ea7\u751f\u7684case\u4e2d\u5404\u79cd\u6307\u4ee4\u7684\u6bd4\u91cd\u63a5\u8fd1\u4e8eRandomX \u7684\u5404\u79cd\u6307\u4ee4\u5360\u6bd4\u3002 \u6d4b\u8bd5case\u4e2d\u7684\u6307\u4ee4\u6709\u5982\u4e0b\u7279\u70b9\uff1a \u8bbf\u5b58\u7269\u7406\u5730\u5740\u8303\u56f4\u5927\u5c0f\u4e3a4MB \u6307\u4ee4\u7c7b\u578b\u6240\u5360\u6bd4\u4f8b\u4e0eRandomX\u5dee\u8ddd\u4e0d\u5927\uff0c\u4f46\u7ec6\u5206\u7c7b\u578b\u6709\u51fa\u5165\uff08\u4ece\u8be6\u7ec6\u7edf\u8ba1\u4e2d\u80fd\u591f\u770b\u51fa\uff09","title":"\u6d4b\u8bd5case\u8bf4\u660e"},{"location":"simulator/gem5_random.html#_2","text":"\u6839\u636egem5\u7684\u7edf\u8ba1\uff0c \u6307\u4ee4\u5171\u8ba11873\u6761,\u82b1\u8d3929392\u4e2acycle , case\u4e2d\u5404\u79cd\u6307\u4ee4\u6bd4\u4f8b\u5982\u4e0b\uff1a \u7edf\u8ba1\u7c7b \u7edf\u8ba1\u503c \u6bd4\u4f8b Integer 840 44.84% Floating 611 32.62% control 215 11.48% memory 204 10.89% \u5982\u4e0b\u4e3a\u8be6\u7ec6\u7edf\u8ba1\uff1a \u5177\u4f53\u7c7b\u578b \u6761\u6570 \u6bd4\u4f8b system.cpu.numCycles 29392 system.cpu.numInsts 1873 system.cpu.numOps 1873 system.cpu.numDiscardedOps 231 system.cpu.numFetchSuspends 0 system.cpu.cpi 15.692472 system.cpu.ipc 0.063725 system.cpu.committedInstType_0::No_OpClass 3 0.16% system.cpu.committedInstType_0::IntAlu 1055 56.33% system.cpu.committedInstType_0::IntMult 0 0.00% system.cpu.committedInstType_0::IntDiv 0 0.00% system.cpu.committedInstType_0::FloatAdd 108 5.77% system.cpu.committedInstType_0::FloatCmp 128 6.83% system.cpu.committedInstType_0::FloatCvt 0 0.00% system.cpu.committedInstType_0::FloatMult 49 2.62% system.cpu.committedInstType_0::FloatMultAcc 225 12.01% system.cpu.committedInstType_0::FloatDiv 52 2.78% system.cpu.committedInstType_0::FloatMisc 0 0.00% system.cpu.committedInstType_0::FloatSqrt 49 2.62% system.cpu.committedInstType_0::SimdAdd 0 0.00% system.cpu.committedInstType_0::SimdAddAcc 0 0.00% system.cpu.committedInstType_0::SimdAlu 0 0.00% system.cpu.committedInstType_0::SimdCmp 0 0.00% system.cpu.committedInstType_0::SimdCvt 0 0.00% system.cpu.committedInstType_0::SimdMisc 0 0.00% system.cpu.committedInstType_0::SimdMult 0 0.00% system.cpu.committedInstType_0::SimdMultAcc 0 0.00% system.cpu.committedInstType_0::SimdShift 0 0.00% system.cpu.committedInstType_0::SimdShiftAcc 0 0.00% system.cpu.committedInstType_0::SimdDiv 0 0.00% system.cpu.committedInstType_0::SimdSqrt 0 0.00% system.cpu.committedInstType_0::SimdFloatAdd 0 0.00% system.cpu.committedInstType_0::SimdFloatAlu 0 0.00% system.cpu.committedInstType_0::SimdFloatCmp 0 0.00% system.cpu.committedInstType_0::SimdFloatCvt 0 0.00% system.cpu.committedInstType_0::SimdFloatDiv 0 0.00% system.cpu.committedInstType_0::SimdFloatMisc 0 0.00% system.cpu.committedInstType_0::SimdFloatMult 0 0.00% system.cpu.committedInstType_0::SimdFloatMultAcc 0 0.00% system.cpu.committedInstType_0::SimdFloatSqrt 0 0.00% system.cpu.committedInstType_0::SimdReduceAdd 0 0.00% system.cpu.committedInstType_0::SimdReduceAlu 0 0.00% system.cpu.committedInstType_0::SimdReduceCmp 0 0.00% system.cpu.committedInstType_0::SimdFloatReduceAdd 0 0.00% system.cpu.committedInstType_0::SimdFloatReduceCmp 0 0.00% system.cpu.committedInstType_0::SimdAes 0 0.00% system.cpu.committedInstType_0::SimdAesMix 0 0.00% system.cpu.committedInstType_0::SimdSha1Hash 0 0.00% system.cpu.committedInstType_0::SimdSha1Hash2 0 0.00% system.cpu.committedInstType_0::SimdSha256Hash 0 0.00% system.cpu.committedInstType_0::SimdSha256Hash2 0 0.00% system.cpu.committedInstType_0::SimdShaSigma2 0 0.00% system.cpu.committedInstType_0::SimdShaSigma3 0 0.00% system.cpu.committedInstType_0::SimdPredAlu 0 0.00% system.cpu.committedInstType_0::MemRead 165 8.81% system.cpu.committedInstType_0::MemWrite 39 2.08% system.cpu.committedInstType_0::FloatMemRead 0 0.00% system.cpu.committedInstType_0::FloatMemWrite 0 0.00%","title":"\u6d4b\u8bd5\u7ed3\u679c"},{"location":"simulator/simplesim.html","text":"simpleScalar\u89e3\u6790 \u00b6 \u5b98\u65b9\u7f51\u7ad9[ http://www.simplescalar.com ] SimpleScalar simultor \u662f\u4e00\u6b3e\u7b80\u7ea6\u7684\u6a21\u62df\u5668\u6846\u67b6,\u7ed9\u4eba\u4e00\u79cd\u9ebb\u96c0\u867d\u5c0f\u4e94\u810f\u4ff1\u5168\u7684\u611f\u89c9\u3002\u6700\u540e\u4e00\u7248\u662f2003\u5e748\u6708\u4efdrelease\u52303V0d\u7248\u672c,\u73b0\u5728\u5e94\u8be5\u5df2\u7ecf\u6ca1\u4eba\u7ee7\u7eed\u7ef4\u62a4\u4e86\u3002simplescalar\u7684\u63cf\u8ff0\u4e2d\u63d0\u5230\u4e86\uff0c\u5b83\u4e0d\u662f\u514d\u8d39\u7684\uff0c\u9700\u8981\u8d2d\u4e70license,\u4f46\u5b9e\u9645\u4e0a\u4ee3\u7801\u662f\u80fd\u5b8c\u6574\u62ff\u5230\u7684\u3002 \u6982\u8ff0 \u00b6 simplesaclar\u4e2d\u5b9e\u73b0\u4e86\u4e24\u4e2aarch\uff0calpha\u548cpisa\uff0c\u5b9e\u73b0\u4e867\u4e2aCPU,\u603b\u6587\u4ef6\u5927\u5c0f\u53ea\u67093.18MB, \u7528\u4e864600\u884c\u5c31\u5b9e\u73b0\u4e86\u4e00\u4e2aoutorder CPU\u3002\u6240\u4ee5simplescalar\u662f\u4e00\u4e2a\u5f88\u7cbe\u7b80\u7684CPU\u6a21\u62df\u5668\uff0c\u5b83\u5f88\u9002\u5408\u505a\u4e00\u4e9b\u65f6\u95f4\u7d27\uff0c\u4efb\u52a1\u91cd\uff0c\u5fae\u67b6\u6784\u53c8\u4e0d\u6807\u51c6\u7684CPU\u6a21\u62df\u5668\u5f00\u53d1\u3002 -------------------- ------------------ ------------------- | target-alpha | | target-pisa | | target .... | -------------------- ------------------ | custom define | | | ------------------- | | | |----------------------------> | <----------------------------| | each arch must implement these interfaces V ---------------------------- | ecoff.h | define elf file fmt | loader.c | for load elf file | machine.c/.h | about arch | machine.def | insts define | symbol.c | for analyze symbol in elf file | syscall.c | for system call ---------------------------- | ---------------------------------------|----------------------------------------------------------------------------- | | | | | | | V V V V V V V -------------- -------------- ------------- ---------------- ---------------- ---------------- ------------ | sim-bpred | | sim-cache | | sim-eio | | sim-fast | | sim-outorder | | sim-profile | | sim-safe | -------------- -------------- ------------- ---------------- ---------------- ---------------- ------------ ********************************************************************************************************************************** important module ================= ================== =================== ================= ================= | Dlite | | Memory | | option | | statistic | | register | ================= ================== =================== ================= ================= \u4e0a\u9762\u662fSimpleScalar\u7684\u7b80\u8981\u6846\u56fe\uff0c \u5173\u4e8e\u5b83\u7684\u6587\u6863\uff0c\u5728\u4ee3\u7801\u5305\u4e2d\u4e5f\u6709\u300ahack_guide.pdf\u300b\u5bf9\u6574\u4e2a\u4ee3\u7801\u67b6\u6784\u505a\u8be6\u7ec6\u7684\u63cf\u8ff0\u3002 simpleScalar\u51e0\u4e4e\u5177\u5907\u4e86\u4e0a\u9762\u5217\u51fa\u7684\u6240\u6709\u6a21\u62df\u5668\u8981\u70b9\uff0c\u867d\u7136\u5f88\u591a\u8981\u70b9\u5b9e\u73b0\u7684\u6ca1\u6709gem5\u90a3\u4e48\u5b8c\u5584\uff0c\u4f46\u4ee3\u7801\u8db3\u591f\u7b80\u5355\u6613\u61c2\uff0c\u6574\u4e2a\u5f00\u53d1\u5468\u671f\u4e0d\u4f1a\u592a\u957f\u3002 \u5b83\u6ca1\u6709\u5b9e\u73b0\u4e00\u4e2a\u7edf\u4e00\u7684log\u7cfb\u7edf\uff0c\u4f46\u5b9e\u73b0\u4e86\u4e00\u7cfb\u5217\u7684xxx_dump()\u51fd\u6570\u6765\u8f93\u51fa\u5404\u4e2a\u6a21\u5757\u7684\u72b6\u6001log\u3002\u603b\u800c\u8a00\u4e4b\uff0c\u9ebb\u96c0\u867d\u5c0f\uff0c\u4e94\u810f\u4ff1\u5168\u3002 \u6a21\u5757\u89e3\u6790 \u00b6 \u4e00\u6b3e\u6210\u719f\u7684\u6a21\u62df\u5668\u6846\u67b6\uff0c\u5e94\u8be5\u5177\u5907\u5982\u4e0b\u7684\u529f\u80fd\u70b9 \u6307\u4ee4\u96c6\u7ba1\u7406\u7cfb\u7edf(\u89e3\u7801\uff0c\u884c\u4e3a\uff0c\u53cd\u6c47\u7f16\uff0c \u5f02\u5e38) \u5bc4\u5b58\u5668\u7ba1\u7406\u7cfb\u7edf \u591a\u6307\u4ee4\u96c6\u67b6\u6784\u652f\u6301(\u5e94\u8be5\u8981\u4fdd\u6301\u6307\u4ee4\u96c6\u67b6\u6784\u4e0eCPU\u7684\u5206\u79bb) \u591a\u79cdCPU\u5b9e\u73b0 \u591a\u79cd\u5fae\u7ed3\u6784\u5b9e\u73b0(\u6216\u5fae\u7ed3\u6784\u53c2\u6570\u5316) \u5355\u6b65\u548c\u4ea4\u4e92\u8c03\u8bd5\u6a21\u5f0f log\u53catrace\u7cfb\u7edf \u6a21\u62df\u5668\u53c2\u6570\u89e3\u6790\u7ba1\u7406\u7cfb\u7edf \u8ba1\u6570\u5668\u7ba1\u7406\u7cfb\u7edf \u603b\u7ebf\u53ca\u5185\u5b58\u7ba1\u7406\u7cfb\u7edf \u7cfb\u7edf\u8c03\u7528\u652f\u6301 \u6307\u4ee4\u96c6\u7ba1\u7406 \u00b6 #define LDA_IMPL {SET_GPR(RA, GPR(RB) + SEXT(OFS));} DEFINST ( LDA , 0x08 , \"lda\" , \"a,o(b)\" , IntALU , F_ICOMP , DGPR ( RA ), DNA , DNA , DGPR ( RB ), DNA ) \u5982\u4e0a\u7b80\u5355\u7684\u63cf\u8ff0\u5c31\u5b9a\u4e49\u4e86\u4e00\u6761\u6307\u4ee4\u3002\u5305\u542b\u4e86\u6307\u4ee4\u7684\u884c\u4e3a\uff0cdecode, \u53cd\u6c47\u7f16\uff0c\u8fd0\u7b97\u5355\u5143\u7684\u6307\u5b9a\uff0c\u6307\u4ee4flag\uff0c\u5bc4\u5b58\u5668\u4f9d\u8d56\u3002 \u56de\u60f3\u4e00\u4e0b\uff0cspike\u8981\u6dfb\u52a0\u4e00\u6761\u6307\u4ee4\uff0c\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u6307\u4ee4\u884c\u4e3a\u6587\u4ef6\uff0c\u6dfb\u52a0\u6307\u4ee4\u7f16\u7801\u5230encoding\u6587\u4ef6\uff0c\u6dfb\u52a0\u53cd\u6c47\u7f16\u4fe1\u606f\u5230\u53cd\u6c47\u7f16\u6587\u4ef6\uff0cgem5\u6dfb\u52a0\u4e00\u6761\u6307\u4ee4\uff0c\u8981\u7b26\u5408\u6a21\u677f\uff0c\u5982\u679c\u4e0d\u7b26\u5408\u6a21\u677f\u5de5\u4f5c\u91cf\u4e5f\u4f1a\u6bd4\u8f83\u5927\u3002 \u76f8\u6bd4\u4e4b\u4e0b\uff0csimpleScalar\u8fd9\u79cd\u6307\u4ee4\u7ba1\u7406\u65b9\u5f0f\u6700\u4e3a\u7b80\u5355\u76f4\u63a5\u3002 \u5bc4\u5b58\u5668\u7ba1\u7406 \u00b6 simpleScalar\u5728\u5bc4\u5b58\u5668\u7ba1\u7406\u65b9\u9762\u6ca1\u6709\u505a\u592a\u591a\u5de5\u4f5c\uff0c\u5bc4\u5b58\u5668\u7684\u4f7f\u7528\u4e5f\u5f88\u76f4\u63a5\u3002 \u540c\u6837\u4e00\u4e2aGeneral purpose register, \u9700\u8981\u5728\u4e0d\u540c\u7684CPU\u5b9e\u73b0\u91cc\u53bb\u5bf9\u8be5\u5bc4\u5b58\u5668\u7684\u4f7f\u7528\u505a\u4e00\u4e9b\u5c01\u88c5 sim-outorder\u5bf9GPR\u7684\u5c01\u88c5 #define GPR(N) (BITMAP_SET_P(use_spec_R, R_BMAP_SZ, (N)) \\ ? spec_regs_R[N] \\ : regs.regs_R[N]) sim-safe\u5bf9GPR\u7684\u5c01\u88c5 #define GPR(N) (regs.regs_R[N]) \u591a\u6307\u4ee4\u96c6\u67b6\u6784\u652f\u6301 \u00b6 simpleScalar \u652f\u6301alpha\u548cpisa\u67b6\u6784\uff0c\u652f\u6301\u5176\u4ed6\u67b6\u6784\u9700\u8981\u81ea\u5df1\u6dfb\u52a0\u548c\u8c03\u8bd5\uff0c\u8fd9\u6b21\u4f7f\u7528\u65f6\uff0c\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u7684\u6307\u4ee4\u96c6\u67b6\u6784\uff0c\u6574\u4e2a\u8fc7\u7a0b\u8fdb\u5ea6\u5f88\u5feb\u3002 \u5b9e\u73b0\u65f6\u57fa\u672c\u53ea\u9700\u8981\u6dfb\u52a0\u4e09\u4e2a\u90e8\u5206\u5c31\u80fd\u652f\u6301\u4e00\u5957\u65b0\u7684\u6307\u4ee4\u96c6\u67b6\u6784 \u589e\u52a0target-xxxx\u76ee\u5f55\uff0c\u5e76\u5b9e\u73b0\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6 \u5728\u60f3\u8981\u8c03\u8bd5\u7684CPU\u6587\u4ef6\u4e2d\u6dfb\u52a0\u5bc4\u5b58\u5668\u548c\u5185\u5b58\u8bbf\u95ee\u5b8f\u5b9a\u4e49 \u5728makefile\u4e2d\u6dfb\u52a0\u76f8\u5e94\u7684\u7f16\u8bd1\u89c4\u5219 \u591a\u79cdCPU\u5b9e\u73b0 \u00b6 simpleScalar\u5b9e\u73b0\u4e867\u4e2aCPU\uff0c\u5176\u4e2dsim-safe, sim-fast\u662f\u529f\u80fd\u6a21\u578b\uff0csim-outorder\u662f\u4e71\u5e8f\u591a\u53d1\u5c04CPU\uff0c \u540e\u7eed\u4e5f\u4f1a\u4e3b\u8981\u9488\u5bf9sim-outorder\u8fdb\u884c\u5206\u6790\u3002 \u591a\u79cd\u5fae\u67b6\u6784\u5b9e\u73b0 \u00b6 sim-outorder\u5b9e\u73b0\u4e86\u4e3b\u8981\u5fae\u7ed3\u6784\u7684\u53c2\u6570\u5316\uff0c\u8fd9\u662f\u57fa\u4e8e\u5176config\u5b50\u7cfb\u7edf\u5b9e\u73b0\u7684\u3002\u914d\u7f6e\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u6216\u8005\u914d\u7f6e\u6587\u4ef6\u7684\u5f62\u5f0f\u8f93\u5165\u5230\u6a21\u578b\u4e2d\u3002\u5f97\u76ca\u4e8e\u7edf\u4e00\u7684\u914d\u7f6e\u53c2\u6570 \u6a21\u5757\uff0c\u6240\u6709\u6ce8\u518c\u7684\u53c2\u6570\u90fd\u80fd\u5728\u547d\u4ee4\u884c\u4e0b\u770b\u5230\u3002 \u5355\u6b65\u548c\u4ea4\u4e92\u8c03\u8bd5 \u00b6 \u5355\u6b65\u548c\u4ea4\u4e92\u8c03\u8bd5\u5bf9\u4e8e\u529f\u80fd\u6a21\u578b\u6765\u8bb2\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u529f\u80fd\uff0c\u5b83\u80fd\u591f\u6709\u6548\u7684\u5e2e\u52a9\u8c03\u8bd5\u6307\u4ee4\u6d41\u3002\u5c31\u50cfspike\u4e5f\u652f\u6301-d\u6a21\u5f0f\u4e00\u6837\u3002 log\u53catrace\u7cfb\u7edf \u00b6 \u6bd4\u5982sim-outorder\u5b9e\u73b0\u4e86\u4e00\u7cfb\u5217\u7684xxx_dump()\u51fd\u6570\u6765\u8f93\u51fa\u5404\u4e2a\u6a21\u5757\u7684\u72b6\u6001,\u80fd\u591f\u901a\u8fc7pipeview.pl\u6709\u4e00\u4e2a\u6bd4\u8f83\u76f4\u89c2\u7684\u6d41\u6c34\u7ebf\u7b80\u56fe\u3002\u4f46\u76ee\u524d\u6211\u8ba4\u4e3a\uff0c\u901a\u8fc7\u89e3\u6790log\uff0c\u751f\u6210 google trace\u80fd\u591f\u8bc6\u522b\u7684json\u6587\u4ef6\u662f\u4e00\u79cd\u66f4\u52a0\u76f4\u89c2\u7684\u65b9\u5f0f\u3002 \u6a21\u62df\u5668\u53c2\u6570\u7ba1\u7406\u7cfb\u7edf \u00b6 \u901a\u8fc7opt_reg_xxx()\u53ef\u4ee5\u6ce8\u518c\u7cfb\u7edf\u53c2\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u90fd\u5728options.c/h \u4e2d \u8ba1\u6570\u5668\u7ba1\u7406\u7cfb\u7edf \u00b6 log\u548c\u8ba1\u6570\u5668\u662f\u6a21\u62df\u5668\u7684\u4e24\u5927\u8f93\u51fa\u70b9\uff0c\u901a\u8fc7log\u53ef\u4ee5\u5206\u6790\u6d41\u6c34\u7ebf\uff0c\u901a\u8fc7\u8ba1\u6570\u5668\u53ef\u4ee5\u83b7\u5f97\u6027\u80fd\u6307\u6807\u3002stats.c/h\u4e2d\u5b9e\u73b0\u4e86\u6ce8\u518c\u8ba1\u6570\u5668\u7684\u51fd\u6570 \u603b\u7ebf\u53ca\u5185\u5b58\u7ba1\u7406 \u00b6 simpleScalar\u4e0d\u652f\u6301\u603b\u7ebf\uff0c\u53ea\u6709\u4e00\u4e2amemory\u7ba1\u7406\uff0c\u5176\u4f7f\u7528\u4e86\u57fa\u4e8e\u4e00\u7ea7\u9875\u8868\u7684memory\u7ba1\u7406\u65b9\u5f0f\u3002\u8fd9\u79cd\u65b9\u6cd5\u4e5f\u633a\u7b80\u6d01\u9ad8\u6548\uff0c\u7f3a\u70b9\u662f\u4e0d\u652f\u6301\u5916\u8bbe\u3002 \u5e76\u5728\u540c\u4e00\u4e2aindex\uff0c\u4e0d\u540ctag\u7684\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u94fe\u8868\u6765\u7ba1\u7406\u540c\u4e00\u4e2aindex\u7684\u9875\uff0c\u5e76\u901a\u8fc7\u6539\u53d8\u94fe\u8868\u987a\u5e8f\u6765\u63d0\u9ad8\u4e00\u4e9b\u6548\u7387\u3002 -------------------------------------------------------------------------- | tag | index | PAGE | -------------------------------------------------------------------------- 63 26 12 0 outorder CPU \u00b6 \u91cd\u70b9\u5206\u6790\u4e00\u4e0b\u4e71\u5e8fCPU\u6a21\u578b \u6574\u4e2asimplescalar\u7684\u4e71\u5e8f\u6a21\u578b\u90fd\u662f\u56f4\u7ed5RUU(Register Update Unit)\u8fdb\u884c\u7684\uff0c\u8fd9\u4e5f\u7b26\u5408\u5b9e\u9645\u7684\u4e71\u5e8fCPU\u8bbe\u8ba1\u6838\u5fc3: \u53ea\u6709\u63a7\u5236\u4f4f\u4e86\u5bc4\u5b58\u5668\u4f9d\u8d56\uff0c\u624d\u80fd\u4fdd\u8bc1\u6700\u7ec8\u7ed3\u679c\u7684\u6b63\u786e\u3002 simpleScalar\u5b9e\u73b0\u7684\u4e71\u5e8fCPU\uff0c\u4ecd\u7136\u662f\u4ee5\u8ba1\u7b97\u8282\u62cd\u4e3a\u4e3b\u8981\u624b\u6bb5\u7684\u6a21\u62df\u5668\u3002\u50cfgem5\u7684O3 CPU, \u53ef\u4ee5\u8ba4\u4e3a\u6267\u884c\u662f\u771f\u7684\u5728FU\u4e2d\u8fdb\u884c\u6267\u884c\u7684\uff0c\u4f46simplescalar\u662f\u5728dispatch\u9636\u6bb5\u5c31\u5b8c\u6210\u4e86\u6307\u4ee4\u7684\u6267\u884c\u3002 simplescalar\u8fd9\u79cd\u505a\u6cd5\u5f88\u663e\u7136\u964d\u4f4e\u4e86\u5b9e\u73b0\u96be\u5ea6\uff0c\u7cbe\u5ea6\u4e5f\u4f1a\u5dee\u4e00\u4e9b\uff0c\u4e5f\u6ca1\u6cd5\u901a\u8fc7\u6307\u4ee4\u6267\u884c\u7ed3\u679c\u6765\u63a8\u65ad\u4e71\u5e8f\u5b9e\u73b0\u7684\u65b9\u6848\u662f\u5426\u53ef\u9760\u3002 ________________ | | \u7531\u4e8e\u91c7\u7528\u4e86\u4ec5\u8ba1\u7b97\u5468\u671f\u7684\u65b9\u5f0f\uff0c | | icache \u56e0\u6b64icahce\u548citlb\u662f\u65e0\u6cd5\u5728\u6570\u636e\u6d41\u4e0a\u4f53\u73b0\u7684 |______________| __________________________________________________________|_______________________________________________________ ______ruu_fetch_issue_delay_______________________________|_______________________________________________________ | fetch_tail | inst | get a global inst seq (fetch_num + 1) % ruu_ifq_size V _________________________________________________________________________ fetch: |________|________|________|________|________|________|________|________| fetch_data[ruu_ifq_size] | \\ / | \\___________ fetch_num ________________/ fetch_head | | \u4f7f\u7528 RUU_num LSQ_num \u8fdb\u884c\u63a7\u5236\uff0c\u53cd\u538b\u5230 fetch_num --------------------------------- dispatch: | \u5bf9\u4e8eload/store\u6307\u4ee4\uff0c\u9700\u8981\u62c6\u5206\u4e00\u4e2a\u7528\u4e8e\u5730\u5740\u8ba1\u7b97\u7684op\u5230ALU\u4e2d\uff0c\u6807\u8bb0ea_comp ___________ | \u5e76\u4f9d\u8d56\u8fd9\u4e2aop\u7684\u8ba1\u7b97\u7ed3\u679c ____________ |_________| | |__________| RUU_head-----------|_________| | (LSQ_num + 1) % LSQ_size |__________| LSQ_head | |_________| | |__________|----------------- | |_________| RUU_num | LSQ_tail |__________| | | |_________| |--------------------------> |__________| LSQ_num | | |_________| <----------------| |__________| | | |_________| (RUU_tail + 1) % RUU_size |__________| | | |_________| |__________| | | |_________| LSQ[LSQ_size] struct RUU_station | | |_________| for load/store instsregisters depend | | RUU[RUU_size] struct RUU_station set in_LSQ = TRUE for whether is a ld/st | | for registers depend | | ______________________________ | | ------------------------------------- | created addr op write back | <------| | | operands ready |____________________________| store | |-------------- | ______________________________ | ctrl or longlat inst | | -------------------------------- | no old store with same addr| | push to the queue head | | | operands ready |____________________________| <------| | | | load | | | if operands ready in dispatch stage, push to ready_queue directly. | | | store op push to ready_queue in writeback stage | | | load op push to ready_queue in lsq_refresh __________________________V______V____V__ |_____|_____|_____|_____|_____|_____|_____| ready_queue(struct RS_link) | | point to RUU_station issue: | issue_width | | | __|_________________|_______________________________________________________ __|_issue latency___|_______________________________________________________ | | each fu has a issue_lat to control the busy of the fu | |------------------------------------ | | |------------------------------------ | | | ________________________________________V_________________V_ |_____|_____|______|_____|_____|_____|_____|_____|_____|_____| point to RUU_station event_queue(struct RS_link) writeback: __________________________________________________________________________________________ _____op latency___________________________________________________________________________ each op in event_queue will complete in sim_cycle + op_lat if an op complete, update all op in idep_list, any op operands ready, dispatch to ready_queue commit: free RUU for not ea_comp insts free RUU and send store to memory for store insts \u5bc4\u5b58\u5668\u4f9d\u8d56 \u00b6 \u5bc4\u5b58\u5668\u4f9d\u8d56\u662fsim-outorder\u5b9e\u73b0\u7684\u6838\u5fc3, \u5728\u5b9e\u73b0\u65f6\uff0c\u62bd\u8c61\u4e86register update unit\u6765\u7ba1\u7406\u5bc4\u5b58\u5668\u4f9d\u8d56\uff0c\u6574\u4e2a\u4e71\u5e8f\u7684\u529f\u80fd\u662f\u9760 RUU\u6765\u4fdd\u8bc1\u7684\u3002 RUU\u4e0d\u4ec5\u627f\u62c5\u4e86\u6807\u8bb0\u5bc4\u5b58\u5668\u4f9d\u8d56\u7684\u5de5\u4f5c\uff0c\u8fd8\u627f\u62c5\u4e86ROB\u7684\u5de5\u4f5c\u3002\u5728dispatch\u9636\u6bb5\uff0cfetch_data\u4e2d\u7684\u6307\u4ee4\u6309\u7167\u987a\u5e8f\u7ed1\u5b9aRUU,\u5728commit\u9636\u6bb5\uff0c \u5982\u679cRUU_head\u4e2d\u8bb0\u5f55\u7684\u6307\u4ee4\u6ca1\u6709complete\uff0c\u540e\u9762\u7684\u6307\u4ee4\u90fd\u65e0\u6cd5commit \u540c\u65f6\uff0c\u5bf9\u4e8especulative execution, simplesim\u8fd8\u63d0\u4f9b\u4e86use_spec_cv \u548c spec_create_vector\u6765\u5feb\u901f\u6062\u590d\u5bc4\u5b58\u5668\u4f9d\u8d56\u5230\u9519\u8bef\u7684\u5206\u652f\u4e4b\u524d\u3002 \u4ee54\u4e2aRUU\u4e3e\u4f8b\u8bf4\u660e __________ 0 0 0 0 0 0 1 | | ________________________________________________ add r2, r0, r1 | RUU0 | |__r0__|__r1__|__r2__|__r3__|__r4__|__r5__|__r6__| use_spec_cv |__________| | | sub r3, r2, r1 | RUU1 | |__________| | | RUU0 RUU1 bnez r3, off | RUU2 | ________________________________________________ |__________| |__r0__|__r1__|__r2__|__r3__|__r4__|__r5__|__r6__| creat_vector | | mul r6, r0, r1 | RUU3 | .spec_mode=TRUE |__________| RUU3 ________________________________________________ |__r0__|__r1__|__r2__|__r3__|__r4__|__r5__|__r6__| spec_creat_vector \u5047\u8bbe\u6709\u56db\u6761\u6307\u4ee4\uff0c\u7b2c\u4e09\u6761\u4e3a\u5206\u652f\u6307\u4ee4\uff0c\u5047\u8bbe\u5206\u652f\u9884\u6d4bnotaken, \u6240\u4ee5speculative\u6267\u884c\u6307\u4ee44, \u8fd9\u65f6\u5019\uff0c\u542f\u7528spec_creat_vector\u6765\u8bb0\u5f55\u5bc4\u5b58\u5668\u4f9d\u8d56 \u5e76\u4e14\u5c06\u5bf9\u5e94\u7684use_spec_cv\u4e2d\u7684\u6807\u5fd7\u4f4d\u7f6e1\u3002\u52a0\u5165\u5206\u652f\u9884\u6d4b\u9519\u8bef\uff0c\u8981\u6062\u590d\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u6309\u7167\u6307\u4ee4\u987a\u5e8f\u53bb\u904d\u5386RUU\u3002\u4f46\u5176\u5b9e\u65e0\u6cd5\u5feb\u901f\u7684\u4eceRUU\u83b7\u53d6\u5230 \u5bf9\u5e94\u7684creat_vector,\u6240\u4ee5\u76f4\u63a5\u901a\u8fc7\u6e05\u9664\u6574\u4e2ause_spec_cv\u6765\u8fbe\u5230\u5feb\u901f\u6e05\u9664\u5bc4\u5b58\u5668\u4f9d\u8d56\u7684\u76ee\u7684\u3002 simpleScalar\u56e0\u4e3a\u4ec5\u4ec5\u662f\u65f6\u5e8f\u6a21\u62df\uff0c\u6240\u6709\u6307\u4ee4\u5728dispatch\u9636\u6bb5\u5c31\u6267\u884c\u5b8c\u6210\u4e86\u3002\u56e0\u6b64\u5728dispatch\u9636\u6bb5\u5c31\u77e5\u9053\u5206\u652f\u9884\u6d4b\u662f\u5426\u9519\u8bef\u3002\u5206\u652f\u9884\u6d4b\u9519\u8bef\u7684\u65f6\u5019 \u624d\u4f1a\u5f00\u542fspec_mode, \u5e76\u4e14stall\u6574\u4e2adispatch\u8fc7\u7a0b\u3002 Load\u6307\u4ee4\u7684\u5904\u7406 \u00b6 store\u6307\u4ee4\u7684\u5904\u7406 \u00b6 dispatch: tire to RUU control\u6307\u4ee4\u7684\u5904\u7406 \u00b6","title":"simpleScalar\u89e3\u6790"},{"location":"simulator/simplesim.html#simplescalar","text":"\u5b98\u65b9\u7f51\u7ad9[ http://www.simplescalar.com ] SimpleScalar simultor \u662f\u4e00\u6b3e\u7b80\u7ea6\u7684\u6a21\u62df\u5668\u6846\u67b6,\u7ed9\u4eba\u4e00\u79cd\u9ebb\u96c0\u867d\u5c0f\u4e94\u810f\u4ff1\u5168\u7684\u611f\u89c9\u3002\u6700\u540e\u4e00\u7248\u662f2003\u5e748\u6708\u4efdrelease\u52303V0d\u7248\u672c,\u73b0\u5728\u5e94\u8be5\u5df2\u7ecf\u6ca1\u4eba\u7ee7\u7eed\u7ef4\u62a4\u4e86\u3002simplescalar\u7684\u63cf\u8ff0\u4e2d\u63d0\u5230\u4e86\uff0c\u5b83\u4e0d\u662f\u514d\u8d39\u7684\uff0c\u9700\u8981\u8d2d\u4e70license,\u4f46\u5b9e\u9645\u4e0a\u4ee3\u7801\u662f\u80fd\u5b8c\u6574\u62ff\u5230\u7684\u3002","title":"simpleScalar\u89e3\u6790"},{"location":"simulator/simplesim.html#_1","text":"simplesaclar\u4e2d\u5b9e\u73b0\u4e86\u4e24\u4e2aarch\uff0calpha\u548cpisa\uff0c\u5b9e\u73b0\u4e867\u4e2aCPU,\u603b\u6587\u4ef6\u5927\u5c0f\u53ea\u67093.18MB, \u7528\u4e864600\u884c\u5c31\u5b9e\u73b0\u4e86\u4e00\u4e2aoutorder CPU\u3002\u6240\u4ee5simplescalar\u662f\u4e00\u4e2a\u5f88\u7cbe\u7b80\u7684CPU\u6a21\u62df\u5668\uff0c\u5b83\u5f88\u9002\u5408\u505a\u4e00\u4e9b\u65f6\u95f4\u7d27\uff0c\u4efb\u52a1\u91cd\uff0c\u5fae\u67b6\u6784\u53c8\u4e0d\u6807\u51c6\u7684CPU\u6a21\u62df\u5668\u5f00\u53d1\u3002 -------------------- ------------------ ------------------- | target-alpha | | target-pisa | | target .... | -------------------- ------------------ | custom define | | | ------------------- | | | |----------------------------> | <----------------------------| | each arch must implement these interfaces V ---------------------------- | ecoff.h | define elf file fmt | loader.c | for load elf file | machine.c/.h | about arch | machine.def | insts define | symbol.c | for analyze symbol in elf file | syscall.c | for system call ---------------------------- | ---------------------------------------|----------------------------------------------------------------------------- | | | | | | | V V V V V V V -------------- -------------- ------------- ---------------- ---------------- ---------------- ------------ | sim-bpred | | sim-cache | | sim-eio | | sim-fast | | sim-outorder | | sim-profile | | sim-safe | -------------- -------------- ------------- ---------------- ---------------- ---------------- ------------ ********************************************************************************************************************************** important module ================= ================== =================== ================= ================= | Dlite | | Memory | | option | | statistic | | register | ================= ================== =================== ================= ================= \u4e0a\u9762\u662fSimpleScalar\u7684\u7b80\u8981\u6846\u56fe\uff0c \u5173\u4e8e\u5b83\u7684\u6587\u6863\uff0c\u5728\u4ee3\u7801\u5305\u4e2d\u4e5f\u6709\u300ahack_guide.pdf\u300b\u5bf9\u6574\u4e2a\u4ee3\u7801\u67b6\u6784\u505a\u8be6\u7ec6\u7684\u63cf\u8ff0\u3002 simpleScalar\u51e0\u4e4e\u5177\u5907\u4e86\u4e0a\u9762\u5217\u51fa\u7684\u6240\u6709\u6a21\u62df\u5668\u8981\u70b9\uff0c\u867d\u7136\u5f88\u591a\u8981\u70b9\u5b9e\u73b0\u7684\u6ca1\u6709gem5\u90a3\u4e48\u5b8c\u5584\uff0c\u4f46\u4ee3\u7801\u8db3\u591f\u7b80\u5355\u6613\u61c2\uff0c\u6574\u4e2a\u5f00\u53d1\u5468\u671f\u4e0d\u4f1a\u592a\u957f\u3002 \u5b83\u6ca1\u6709\u5b9e\u73b0\u4e00\u4e2a\u7edf\u4e00\u7684log\u7cfb\u7edf\uff0c\u4f46\u5b9e\u73b0\u4e86\u4e00\u7cfb\u5217\u7684xxx_dump()\u51fd\u6570\u6765\u8f93\u51fa\u5404\u4e2a\u6a21\u5757\u7684\u72b6\u6001log\u3002\u603b\u800c\u8a00\u4e4b\uff0c\u9ebb\u96c0\u867d\u5c0f\uff0c\u4e94\u810f\u4ff1\u5168\u3002","title":"\u6982\u8ff0"},{"location":"simulator/simplesim.html#_2","text":"\u4e00\u6b3e\u6210\u719f\u7684\u6a21\u62df\u5668\u6846\u67b6\uff0c\u5e94\u8be5\u5177\u5907\u5982\u4e0b\u7684\u529f\u80fd\u70b9 \u6307\u4ee4\u96c6\u7ba1\u7406\u7cfb\u7edf(\u89e3\u7801\uff0c\u884c\u4e3a\uff0c\u53cd\u6c47\u7f16\uff0c \u5f02\u5e38) \u5bc4\u5b58\u5668\u7ba1\u7406\u7cfb\u7edf \u591a\u6307\u4ee4\u96c6\u67b6\u6784\u652f\u6301(\u5e94\u8be5\u8981\u4fdd\u6301\u6307\u4ee4\u96c6\u67b6\u6784\u4e0eCPU\u7684\u5206\u79bb) \u591a\u79cdCPU\u5b9e\u73b0 \u591a\u79cd\u5fae\u7ed3\u6784\u5b9e\u73b0(\u6216\u5fae\u7ed3\u6784\u53c2\u6570\u5316) \u5355\u6b65\u548c\u4ea4\u4e92\u8c03\u8bd5\u6a21\u5f0f log\u53catrace\u7cfb\u7edf \u6a21\u62df\u5668\u53c2\u6570\u89e3\u6790\u7ba1\u7406\u7cfb\u7edf \u8ba1\u6570\u5668\u7ba1\u7406\u7cfb\u7edf \u603b\u7ebf\u53ca\u5185\u5b58\u7ba1\u7406\u7cfb\u7edf \u7cfb\u7edf\u8c03\u7528\u652f\u6301","title":"\u6a21\u5757\u89e3\u6790"},{"location":"simulator/simplesim.html#_3","text":"#define LDA_IMPL {SET_GPR(RA, GPR(RB) + SEXT(OFS));} DEFINST ( LDA , 0x08 , \"lda\" , \"a,o(b)\" , IntALU , F_ICOMP , DGPR ( RA ), DNA , DNA , DGPR ( RB ), DNA ) \u5982\u4e0a\u7b80\u5355\u7684\u63cf\u8ff0\u5c31\u5b9a\u4e49\u4e86\u4e00\u6761\u6307\u4ee4\u3002\u5305\u542b\u4e86\u6307\u4ee4\u7684\u884c\u4e3a\uff0cdecode, \u53cd\u6c47\u7f16\uff0c\u8fd0\u7b97\u5355\u5143\u7684\u6307\u5b9a\uff0c\u6307\u4ee4flag\uff0c\u5bc4\u5b58\u5668\u4f9d\u8d56\u3002 \u56de\u60f3\u4e00\u4e0b\uff0cspike\u8981\u6dfb\u52a0\u4e00\u6761\u6307\u4ee4\uff0c\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u6307\u4ee4\u884c\u4e3a\u6587\u4ef6\uff0c\u6dfb\u52a0\u6307\u4ee4\u7f16\u7801\u5230encoding\u6587\u4ef6\uff0c\u6dfb\u52a0\u53cd\u6c47\u7f16\u4fe1\u606f\u5230\u53cd\u6c47\u7f16\u6587\u4ef6\uff0cgem5\u6dfb\u52a0\u4e00\u6761\u6307\u4ee4\uff0c\u8981\u7b26\u5408\u6a21\u677f\uff0c\u5982\u679c\u4e0d\u7b26\u5408\u6a21\u677f\u5de5\u4f5c\u91cf\u4e5f\u4f1a\u6bd4\u8f83\u5927\u3002 \u76f8\u6bd4\u4e4b\u4e0b\uff0csimpleScalar\u8fd9\u79cd\u6307\u4ee4\u7ba1\u7406\u65b9\u5f0f\u6700\u4e3a\u7b80\u5355\u76f4\u63a5\u3002","title":"\u6307\u4ee4\u96c6\u7ba1\u7406"},{"location":"simulator/simplesim.html#_4","text":"simpleScalar\u5728\u5bc4\u5b58\u5668\u7ba1\u7406\u65b9\u9762\u6ca1\u6709\u505a\u592a\u591a\u5de5\u4f5c\uff0c\u5bc4\u5b58\u5668\u7684\u4f7f\u7528\u4e5f\u5f88\u76f4\u63a5\u3002 \u540c\u6837\u4e00\u4e2aGeneral purpose register, \u9700\u8981\u5728\u4e0d\u540c\u7684CPU\u5b9e\u73b0\u91cc\u53bb\u5bf9\u8be5\u5bc4\u5b58\u5668\u7684\u4f7f\u7528\u505a\u4e00\u4e9b\u5c01\u88c5 sim-outorder\u5bf9GPR\u7684\u5c01\u88c5 #define GPR(N) (BITMAP_SET_P(use_spec_R, R_BMAP_SZ, (N)) \\ ? spec_regs_R[N] \\ : regs.regs_R[N]) sim-safe\u5bf9GPR\u7684\u5c01\u88c5 #define GPR(N) (regs.regs_R[N])","title":"\u5bc4\u5b58\u5668\u7ba1\u7406"},{"location":"simulator/simplesim.html#_5","text":"simpleScalar \u652f\u6301alpha\u548cpisa\u67b6\u6784\uff0c\u652f\u6301\u5176\u4ed6\u67b6\u6784\u9700\u8981\u81ea\u5df1\u6dfb\u52a0\u548c\u8c03\u8bd5\uff0c\u8fd9\u6b21\u4f7f\u7528\u65f6\uff0c\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u7684\u6307\u4ee4\u96c6\u67b6\u6784\uff0c\u6574\u4e2a\u8fc7\u7a0b\u8fdb\u5ea6\u5f88\u5feb\u3002 \u5b9e\u73b0\u65f6\u57fa\u672c\u53ea\u9700\u8981\u6dfb\u52a0\u4e09\u4e2a\u90e8\u5206\u5c31\u80fd\u652f\u6301\u4e00\u5957\u65b0\u7684\u6307\u4ee4\u96c6\u67b6\u6784 \u589e\u52a0target-xxxx\u76ee\u5f55\uff0c\u5e76\u5b9e\u73b0\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6 \u5728\u60f3\u8981\u8c03\u8bd5\u7684CPU\u6587\u4ef6\u4e2d\u6dfb\u52a0\u5bc4\u5b58\u5668\u548c\u5185\u5b58\u8bbf\u95ee\u5b8f\u5b9a\u4e49 \u5728makefile\u4e2d\u6dfb\u52a0\u76f8\u5e94\u7684\u7f16\u8bd1\u89c4\u5219","title":"\u591a\u6307\u4ee4\u96c6\u67b6\u6784\u652f\u6301"},{"location":"simulator/simplesim.html#cpu","text":"simpleScalar\u5b9e\u73b0\u4e867\u4e2aCPU\uff0c\u5176\u4e2dsim-safe, sim-fast\u662f\u529f\u80fd\u6a21\u578b\uff0csim-outorder\u662f\u4e71\u5e8f\u591a\u53d1\u5c04CPU\uff0c \u540e\u7eed\u4e5f\u4f1a\u4e3b\u8981\u9488\u5bf9sim-outorder\u8fdb\u884c\u5206\u6790\u3002","title":"\u591a\u79cdCPU\u5b9e\u73b0"},{"location":"simulator/simplesim.html#_6","text":"sim-outorder\u5b9e\u73b0\u4e86\u4e3b\u8981\u5fae\u7ed3\u6784\u7684\u53c2\u6570\u5316\uff0c\u8fd9\u662f\u57fa\u4e8e\u5176config\u5b50\u7cfb\u7edf\u5b9e\u73b0\u7684\u3002\u914d\u7f6e\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u6216\u8005\u914d\u7f6e\u6587\u4ef6\u7684\u5f62\u5f0f\u8f93\u5165\u5230\u6a21\u578b\u4e2d\u3002\u5f97\u76ca\u4e8e\u7edf\u4e00\u7684\u914d\u7f6e\u53c2\u6570 \u6a21\u5757\uff0c\u6240\u6709\u6ce8\u518c\u7684\u53c2\u6570\u90fd\u80fd\u5728\u547d\u4ee4\u884c\u4e0b\u770b\u5230\u3002","title":"\u591a\u79cd\u5fae\u67b6\u6784\u5b9e\u73b0"},{"location":"simulator/simplesim.html#_7","text":"\u5355\u6b65\u548c\u4ea4\u4e92\u8c03\u8bd5\u5bf9\u4e8e\u529f\u80fd\u6a21\u578b\u6765\u8bb2\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u529f\u80fd\uff0c\u5b83\u80fd\u591f\u6709\u6548\u7684\u5e2e\u52a9\u8c03\u8bd5\u6307\u4ee4\u6d41\u3002\u5c31\u50cfspike\u4e5f\u652f\u6301-d\u6a21\u5f0f\u4e00\u6837\u3002","title":"\u5355\u6b65\u548c\u4ea4\u4e92\u8c03\u8bd5"},{"location":"simulator/simplesim.html#logtrace","text":"\u6bd4\u5982sim-outorder\u5b9e\u73b0\u4e86\u4e00\u7cfb\u5217\u7684xxx_dump()\u51fd\u6570\u6765\u8f93\u51fa\u5404\u4e2a\u6a21\u5757\u7684\u72b6\u6001,\u80fd\u591f\u901a\u8fc7pipeview.pl\u6709\u4e00\u4e2a\u6bd4\u8f83\u76f4\u89c2\u7684\u6d41\u6c34\u7ebf\u7b80\u56fe\u3002\u4f46\u76ee\u524d\u6211\u8ba4\u4e3a\uff0c\u901a\u8fc7\u89e3\u6790log\uff0c\u751f\u6210 google trace\u80fd\u591f\u8bc6\u522b\u7684json\u6587\u4ef6\u662f\u4e00\u79cd\u66f4\u52a0\u76f4\u89c2\u7684\u65b9\u5f0f\u3002","title":"log\u53catrace\u7cfb\u7edf"},{"location":"simulator/simplesim.html#_8","text":"\u901a\u8fc7opt_reg_xxx()\u53ef\u4ee5\u6ce8\u518c\u7cfb\u7edf\u53c2\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u90fd\u5728options.c/h \u4e2d","title":"\u6a21\u62df\u5668\u53c2\u6570\u7ba1\u7406\u7cfb\u7edf"},{"location":"simulator/simplesim.html#_9","text":"log\u548c\u8ba1\u6570\u5668\u662f\u6a21\u62df\u5668\u7684\u4e24\u5927\u8f93\u51fa\u70b9\uff0c\u901a\u8fc7log\u53ef\u4ee5\u5206\u6790\u6d41\u6c34\u7ebf\uff0c\u901a\u8fc7\u8ba1\u6570\u5668\u53ef\u4ee5\u83b7\u5f97\u6027\u80fd\u6307\u6807\u3002stats.c/h\u4e2d\u5b9e\u73b0\u4e86\u6ce8\u518c\u8ba1\u6570\u5668\u7684\u51fd\u6570","title":"\u8ba1\u6570\u5668\u7ba1\u7406\u7cfb\u7edf"},{"location":"simulator/simplesim.html#_10","text":"simpleScalar\u4e0d\u652f\u6301\u603b\u7ebf\uff0c\u53ea\u6709\u4e00\u4e2amemory\u7ba1\u7406\uff0c\u5176\u4f7f\u7528\u4e86\u57fa\u4e8e\u4e00\u7ea7\u9875\u8868\u7684memory\u7ba1\u7406\u65b9\u5f0f\u3002\u8fd9\u79cd\u65b9\u6cd5\u4e5f\u633a\u7b80\u6d01\u9ad8\u6548\uff0c\u7f3a\u70b9\u662f\u4e0d\u652f\u6301\u5916\u8bbe\u3002 \u5e76\u5728\u540c\u4e00\u4e2aindex\uff0c\u4e0d\u540ctag\u7684\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u94fe\u8868\u6765\u7ba1\u7406\u540c\u4e00\u4e2aindex\u7684\u9875\uff0c\u5e76\u901a\u8fc7\u6539\u53d8\u94fe\u8868\u987a\u5e8f\u6765\u63d0\u9ad8\u4e00\u4e9b\u6548\u7387\u3002 -------------------------------------------------------------------------- | tag | index | PAGE | -------------------------------------------------------------------------- 63 26 12 0","title":"\u603b\u7ebf\u53ca\u5185\u5b58\u7ba1\u7406"},{"location":"simulator/simplesim.html#outorder-cpu","text":"\u91cd\u70b9\u5206\u6790\u4e00\u4e0b\u4e71\u5e8fCPU\u6a21\u578b \u6574\u4e2asimplescalar\u7684\u4e71\u5e8f\u6a21\u578b\u90fd\u662f\u56f4\u7ed5RUU(Register Update Unit)\u8fdb\u884c\u7684\uff0c\u8fd9\u4e5f\u7b26\u5408\u5b9e\u9645\u7684\u4e71\u5e8fCPU\u8bbe\u8ba1\u6838\u5fc3: \u53ea\u6709\u63a7\u5236\u4f4f\u4e86\u5bc4\u5b58\u5668\u4f9d\u8d56\uff0c\u624d\u80fd\u4fdd\u8bc1\u6700\u7ec8\u7ed3\u679c\u7684\u6b63\u786e\u3002 simpleScalar\u5b9e\u73b0\u7684\u4e71\u5e8fCPU\uff0c\u4ecd\u7136\u662f\u4ee5\u8ba1\u7b97\u8282\u62cd\u4e3a\u4e3b\u8981\u624b\u6bb5\u7684\u6a21\u62df\u5668\u3002\u50cfgem5\u7684O3 CPU, \u53ef\u4ee5\u8ba4\u4e3a\u6267\u884c\u662f\u771f\u7684\u5728FU\u4e2d\u8fdb\u884c\u6267\u884c\u7684\uff0c\u4f46simplescalar\u662f\u5728dispatch\u9636\u6bb5\u5c31\u5b8c\u6210\u4e86\u6307\u4ee4\u7684\u6267\u884c\u3002 simplescalar\u8fd9\u79cd\u505a\u6cd5\u5f88\u663e\u7136\u964d\u4f4e\u4e86\u5b9e\u73b0\u96be\u5ea6\uff0c\u7cbe\u5ea6\u4e5f\u4f1a\u5dee\u4e00\u4e9b\uff0c\u4e5f\u6ca1\u6cd5\u901a\u8fc7\u6307\u4ee4\u6267\u884c\u7ed3\u679c\u6765\u63a8\u65ad\u4e71\u5e8f\u5b9e\u73b0\u7684\u65b9\u6848\u662f\u5426\u53ef\u9760\u3002 ________________ | | \u7531\u4e8e\u91c7\u7528\u4e86\u4ec5\u8ba1\u7b97\u5468\u671f\u7684\u65b9\u5f0f\uff0c | | icache \u56e0\u6b64icahce\u548citlb\u662f\u65e0\u6cd5\u5728\u6570\u636e\u6d41\u4e0a\u4f53\u73b0\u7684 |______________| __________________________________________________________|_______________________________________________________ ______ruu_fetch_issue_delay_______________________________|_______________________________________________________ | fetch_tail | inst | get a global inst seq (fetch_num + 1) % ruu_ifq_size V _________________________________________________________________________ fetch: |________|________|________|________|________|________|________|________| fetch_data[ruu_ifq_size] | \\ / | \\___________ fetch_num ________________/ fetch_head | | \u4f7f\u7528 RUU_num LSQ_num \u8fdb\u884c\u63a7\u5236\uff0c\u53cd\u538b\u5230 fetch_num --------------------------------- dispatch: | \u5bf9\u4e8eload/store\u6307\u4ee4\uff0c\u9700\u8981\u62c6\u5206\u4e00\u4e2a\u7528\u4e8e\u5730\u5740\u8ba1\u7b97\u7684op\u5230ALU\u4e2d\uff0c\u6807\u8bb0ea_comp ___________ | \u5e76\u4f9d\u8d56\u8fd9\u4e2aop\u7684\u8ba1\u7b97\u7ed3\u679c ____________ |_________| | |__________| RUU_head-----------|_________| | (LSQ_num + 1) % LSQ_size |__________| LSQ_head | |_________| | |__________|----------------- | |_________| RUU_num | LSQ_tail |__________| | | |_________| |--------------------------> |__________| LSQ_num | | |_________| <----------------| |__________| | | |_________| (RUU_tail + 1) % RUU_size |__________| | | |_________| |__________| | | |_________| LSQ[LSQ_size] struct RUU_station | | |_________| for load/store instsregisters depend | | RUU[RUU_size] struct RUU_station set in_LSQ = TRUE for whether is a ld/st | | for registers depend | | ______________________________ | | ------------------------------------- | created addr op write back | <------| | | operands ready |____________________________| store | |-------------- | ______________________________ | ctrl or longlat inst | | -------------------------------- | no old store with same addr| | push to the queue head | | | operands ready |____________________________| <------| | | | load | | | if operands ready in dispatch stage, push to ready_queue directly. | | | store op push to ready_queue in writeback stage | | | load op push to ready_queue in lsq_refresh __________________________V______V____V__ |_____|_____|_____|_____|_____|_____|_____| ready_queue(struct RS_link) | | point to RUU_station issue: | issue_width | | | __|_________________|_______________________________________________________ __|_issue latency___|_______________________________________________________ | | each fu has a issue_lat to control the busy of the fu | |------------------------------------ | | |------------------------------------ | | | ________________________________________V_________________V_ |_____|_____|______|_____|_____|_____|_____|_____|_____|_____| point to RUU_station event_queue(struct RS_link) writeback: __________________________________________________________________________________________ _____op latency___________________________________________________________________________ each op in event_queue will complete in sim_cycle + op_lat if an op complete, update all op in idep_list, any op operands ready, dispatch to ready_queue commit: free RUU for not ea_comp insts free RUU and send store to memory for store insts","title":"outorder CPU"},{"location":"simulator/simplesim.html#_11","text":"\u5bc4\u5b58\u5668\u4f9d\u8d56\u662fsim-outorder\u5b9e\u73b0\u7684\u6838\u5fc3, \u5728\u5b9e\u73b0\u65f6\uff0c\u62bd\u8c61\u4e86register update unit\u6765\u7ba1\u7406\u5bc4\u5b58\u5668\u4f9d\u8d56\uff0c\u6574\u4e2a\u4e71\u5e8f\u7684\u529f\u80fd\u662f\u9760 RUU\u6765\u4fdd\u8bc1\u7684\u3002 RUU\u4e0d\u4ec5\u627f\u62c5\u4e86\u6807\u8bb0\u5bc4\u5b58\u5668\u4f9d\u8d56\u7684\u5de5\u4f5c\uff0c\u8fd8\u627f\u62c5\u4e86ROB\u7684\u5de5\u4f5c\u3002\u5728dispatch\u9636\u6bb5\uff0cfetch_data\u4e2d\u7684\u6307\u4ee4\u6309\u7167\u987a\u5e8f\u7ed1\u5b9aRUU,\u5728commit\u9636\u6bb5\uff0c \u5982\u679cRUU_head\u4e2d\u8bb0\u5f55\u7684\u6307\u4ee4\u6ca1\u6709complete\uff0c\u540e\u9762\u7684\u6307\u4ee4\u90fd\u65e0\u6cd5commit \u540c\u65f6\uff0c\u5bf9\u4e8especulative execution, simplesim\u8fd8\u63d0\u4f9b\u4e86use_spec_cv \u548c spec_create_vector\u6765\u5feb\u901f\u6062\u590d\u5bc4\u5b58\u5668\u4f9d\u8d56\u5230\u9519\u8bef\u7684\u5206\u652f\u4e4b\u524d\u3002 \u4ee54\u4e2aRUU\u4e3e\u4f8b\u8bf4\u660e __________ 0 0 0 0 0 0 1 | | ________________________________________________ add r2, r0, r1 | RUU0 | |__r0__|__r1__|__r2__|__r3__|__r4__|__r5__|__r6__| use_spec_cv |__________| | | sub r3, r2, r1 | RUU1 | |__________| | | RUU0 RUU1 bnez r3, off | RUU2 | ________________________________________________ |__________| |__r0__|__r1__|__r2__|__r3__|__r4__|__r5__|__r6__| creat_vector | | mul r6, r0, r1 | RUU3 | .spec_mode=TRUE |__________| RUU3 ________________________________________________ |__r0__|__r1__|__r2__|__r3__|__r4__|__r5__|__r6__| spec_creat_vector \u5047\u8bbe\u6709\u56db\u6761\u6307\u4ee4\uff0c\u7b2c\u4e09\u6761\u4e3a\u5206\u652f\u6307\u4ee4\uff0c\u5047\u8bbe\u5206\u652f\u9884\u6d4bnotaken, \u6240\u4ee5speculative\u6267\u884c\u6307\u4ee44, \u8fd9\u65f6\u5019\uff0c\u542f\u7528spec_creat_vector\u6765\u8bb0\u5f55\u5bc4\u5b58\u5668\u4f9d\u8d56 \u5e76\u4e14\u5c06\u5bf9\u5e94\u7684use_spec_cv\u4e2d\u7684\u6807\u5fd7\u4f4d\u7f6e1\u3002\u52a0\u5165\u5206\u652f\u9884\u6d4b\u9519\u8bef\uff0c\u8981\u6062\u590d\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u6309\u7167\u6307\u4ee4\u987a\u5e8f\u53bb\u904d\u5386RUU\u3002\u4f46\u5176\u5b9e\u65e0\u6cd5\u5feb\u901f\u7684\u4eceRUU\u83b7\u53d6\u5230 \u5bf9\u5e94\u7684creat_vector,\u6240\u4ee5\u76f4\u63a5\u901a\u8fc7\u6e05\u9664\u6574\u4e2ause_spec_cv\u6765\u8fbe\u5230\u5feb\u901f\u6e05\u9664\u5bc4\u5b58\u5668\u4f9d\u8d56\u7684\u76ee\u7684\u3002 simpleScalar\u56e0\u4e3a\u4ec5\u4ec5\u662f\u65f6\u5e8f\u6a21\u62df\uff0c\u6240\u6709\u6307\u4ee4\u5728dispatch\u9636\u6bb5\u5c31\u6267\u884c\u5b8c\u6210\u4e86\u3002\u56e0\u6b64\u5728dispatch\u9636\u6bb5\u5c31\u77e5\u9053\u5206\u652f\u9884\u6d4b\u662f\u5426\u9519\u8bef\u3002\u5206\u652f\u9884\u6d4b\u9519\u8bef\u7684\u65f6\u5019 \u624d\u4f1a\u5f00\u542fspec_mode, \u5e76\u4e14stall\u6574\u4e2adispatch\u8fc7\u7a0b\u3002","title":"\u5bc4\u5b58\u5668\u4f9d\u8d56"},{"location":"simulator/simplesim.html#load","text":"","title":"Load\u6307\u4ee4\u7684\u5904\u7406"},{"location":"simulator/simplesim.html#store","text":"dispatch: tire to RUU","title":"store\u6307\u4ee4\u7684\u5904\u7406"},{"location":"simulator/simplesim.html#control","text":"","title":"control\u6307\u4ee4\u7684\u5904\u7406"},{"location":"simulator/spike.html","text":"\u4ecespike\u5206\u6790\u4e00\u6b3e\u6a21\u62df\u5668\u7684\u8bbe\u8ba1\u4e0e\u5b9e\u73b0 \u00b6 \u524d\u8a00 \u00b6 \u76ee\u524d\u5728\u505aRISCV\u6a21\u62df\u5668\u7684\u5f00\u53d1\uff0c\u5176\u4e2d\u529f\u80fd\uff08\u884c\u4e3a\u7ea7\uff09\u6a21\u62df\u5668\u57fa\u4e8espike\u8fdb\u884c\u4fee\u6539\u3002\u5728\u770bspike\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u6709\u4e9b\u90e8\u5206\u7684\u5b9e\u73b0\u6bd4\u6211\u60f3\u8c61\u7684\u8981\u590d\u6742\uff0c\u5e94\u8be5\u662f\u6211\u5c11\u8003\u8651\u4e86\u5f88\u591a\u60c5\u51b5\u3002\u90a3\u4e48\u7531\u6b64\u6211\u4ea7\u751f\u4e86\u4e00\u4e2a\u7591\u95ee\uff0c\u8981\u505a\u4e00\u6b3e\u529f\u80fd\u578b\u7684SOC\u6a21\u62df\u5668\uff0c\u5230\u5e95\u8981\u8003\u8651\u90a3\u4e9b\u65b9\u9762\uff1f\u6216\u8005\u8bf4\uff0c\u8ba9\u6211\u4ece\u96f6\u5230\u4e00\u53bb\u505a\u4e00\u6b3e\u529f\u80fd\u578b\u6a21\u62df\u5668\uff0c\u5e94\u8be5\u600e\u4e48\u53bb\u505a\uff1f \u51ed\u81ea\u6211\u7684\u611f\u89c9\uff0c\u4ece\u9700\u6c42\u548c\u8bbe\u8ba1\u51fa\u53d1\uff0c\u5927\u81f4\u60f3\u5230\u5982\u4e0b\u51e0\u70b9\uff1a \u5982\u4f55\u7ec4\u7ec7SOC\u5404\u4e2a\u6a21\u5757\u7684\u8fd0\u884c\uff0c\u6700\u7b80\u5355\u76f4\u63a5\u7684\u5e94\u8be5\u5c31\u662f\u5904\u7406\u5668\u6309\u7167\u65f6\u949f\u8fd0\u884c\uff0c\u5176\u4ed6\u7edd\u5927\u591a\u6570\u5355\u5143\u90fd\u88ab\u52a8\u7684\u63a5\u53d7\u5904\u7406\u5668\u7684\u8bbf\u95ee\u5373\u53ef\u3002 \u5982\u4f55\u7ec4\u7ec7\u6307\u4ee4\u96c6\u53ca\u8bd1\u7801\uff0c\u5373\u627e\u5230\u4e00\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684\u4ece\u6307\u4ee4\u7801\u5230\u6307\u4ee4\u5b9e\u73b0\u7684\u7ba1\u7406\u65b9\u5f0f\uff0c\u5e76\u4e14\u6307\u4ee4\u96c6\u7ba1\u7406\u5e94\u8be5\u5177\u6709\u6bd4\u8f83\u597d\u7684\u6269\u5c55\u6027\u3002 \u5982\u4f55\u7ec4\u7ec7\u5bc4\u5b58\u5668 \u5982\u4f55\u7ba1\u7406\u5730\u5740\uff0c\u662f\u5426\u9700\u8981MMU\u53ca\u603b\u7ebf\u7684\u62bd\u8c61\uff0c\u5982\u4f55\u4f7f\u5904\u7406\u5668\u53d1\u51fa\u7684\u865a\u62df\u5730\u5740\u80fd\u591f\u6b63\u786e\u9ad8\u6548\u7684\u8bbf\u95ee\u5230\u76ee\u7684\u8bbe\u5907 \u5e94\u8be5\u6709\u4e00\u5b9a\u7684\u8c03\u8bd5\u529f\u80fd\uff0c\u80fd\u591f\u663e\u793a\u6307\u4ee4\u6d41\uff0c\u751a\u81f3\u5355\u6b65\u8c03\u8bd5\uff0c\u67e5\u770b\u4e00\u4e9b\u5bc4\u5b58\u5668\u72b6\u6001 \u600e\u6837\u5b9e\u73b0printf\u6253\u5370\uff0c\u8fd9\u4f1a\u5bf9\u76ee\u6807\u4ee3\u7801\u7684\u8c03\u8bd5\u975e\u5e38\u6709\u5e2e\u52a9 \u600e\u6837\u8ba9\u6a21\u62df\u5668\u505c\u4e0b\u6765 \u4e0a\u9762\u8fd9\u4e9b\u662f\u5047\u5982\u6211\u53bb\u505a\u4e00\u6b3e\u6a21\u62df\u5668\u6211\u4f1a\u60f3\u5230\u7684\uff0c\u90a3\u4e48spike\u662f\u600e\u6837\u5b9e\u73b0\u7684\u5462\uff1f\u5b83\u7684\u8bbe\u8ba1\u8005\u662f\u5426\u4e5f\u8003\u8651\u8fc7\u6211\u7684\u8fd9\u4e9b\u95ee\u9898\uff0c\u4ed6\u4eec\u53c8\u662f\u5982\u4f55\u5904\u7406\u7684\u5462\uff1f\u4e0b\u9762\u5c31\u9488\u5bf9spike\u4e2d\u7684\u90e8\u5206\u5b9e\u73b0\u7ec6\u8282\u8fdb\u884c\u5206\u6790\uff0c\u5e76\u63a2\u8ba8\u4e0a\u8ff0\u95ee\u9898\u3002\u5728\u5206\u6790\u65f6\uff0c\u4e3b\u8981\u4f1a\u6d89\u53ca\u4e24\u4e2a\u95ee\u9898\uff0c\u4e00\u662f\u7279\u5b9a\u6a21\u5757\u5b58\u5728\u7684\u610f\u4e49\uff0c\u4e8c\u662f\u8be5\u6a21\u5757\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002\u8fd9\u5c31\u662f\u8fd9\u7bc7\u6587\u7ae0\u7684\u76ee\u7684\u3002 spike\u5b9e\u73b0 \u00b6 spike\u7248\u672c\u4e3a1.0.1-dev \u76ee\u5f55\u7ed3\u6784 \u00b6 \u9996\u5148\u4ece\u76ee\u5f55\u7ed3\u6784\u6765\u770bspike\u5927\u81f4\u5b9e\u73b0\u4e86\u54ea\u4e9b\u4e1c\u897f disasm \u4ece\u540d\u79f0\u4e0a\u6765\u770b\u662f\u53cd\u6c47\u7f16\uff0c\u5b9e\u9645\u5185\u5bb9\u662f\u6839\u636e\u6307\u4ee4\u7801\u7ec4\u88c5\u53cd\u6c47\u7f16\u5b57\u7b26\u4e32\uff0c\u5e94\u8be5\u662f\u4e3a\u4e86debug\u548c\u663e\u793a\u6307\u4ee4\u6d41 fdt \u6241\u5e73\u8bbe\u5907\u6811\uff0c\u731c\u6d4b\u8bbe\u5907\u6811\u662f\u5b83\u7528\u6765\u5b9e\u73b0SOC\u914d\u7f6e\u7684\u65b9\u5f0f\uff0c\u6211\u5f88\u8d5e\u540c\u8fd9\u79cd\u65b9\u5f0f\uff0c\u611f\u89c9\u6bd4gem5\u7684python\u65b9\u5f0f\u8981\u66f4\u597d fesvr \u8fd9\u4e2a\u547d\u540d\u4e0d\u592a\u597d\u7406\u89e3\uff0c\u662f\u6e90\u4e8eFrontend Server\u7684\u7f29\u5199\u3002\u5b83\u5305\u542b\u4e00\u4e9b\u4e0eriscv\u65e0\u5173\u7684\u6784\u6210\u6a21\u62df\u5668\u7684\u7ec4\u4ef6\uff0cSOC\u7ec4\u4ef6\u7684\u4e00\u4e9b\u57fa\u7840\u62bd\u8c61\uff0c\u4ee5\u53ca\u6a21\u62df\u5668\u7684\u8fd0\u884c\u7ba1\u7406\u3002\u5b83\u5b9e\u73b0\u4e86\u4e00\u4e2a\u6a21\u62df\u5668\u7684\u5927\u6846\u67b6\u3002\u8fd9\u6837\u6765\u770b\uff0c\u5b83\u7684\u547d\u540d\u4f3c\u4e4e\u8fd8\u633a\u5408\u7406\u3002 riscv \u5176\u4e2d\u7684insns\u76ee\u5f55\u4e2d\u662friscv\u6307\u4ee4\u96c6\u7684\u5b9e\u73b0\uff0c\u5269\u4e0b\u7684\u662fSOC\u7684\u5177\u4f53\u5b9e\u73b0 softfloat \u6d6e\u70b9\u5e93\uff0c\u6765\u81ea\u4e8eIEEE Floating-Point Arithmetic Packag spike-main \u6a21\u62df\u5668\u7a0b\u5e8f\u5165\u53e3 \u4ece\u76ee\u5f55\u7ed3\u6784\u4e0a\u6765\u770b\uff0c\u7ed3\u6784\u6bd4\u8f83\u7b80\u5355\uff0c\u6ca1\u6709\u592a\u591a\u7684\u5206\u5c42\uff0c\u53ef\u4ee5\u770b\u51faspike\u7684\u76ee\u7684\u5e76\u4e0d\u662f\u505a\u4e00\u4e2a\u529f\u80fd\u6027\u6a21\u62df\u5668\u6846\u67b6\uff0c\u800c\u662f\u5b8c\u5168\u9488\u5bf9riscv\u8fdb\u884c\u7684\u8bbe\u8ba1\u3002riscv\u76ee\u5f55\u662f\u5b9e\u73b0\u7684\u6838\u5fc3\uff0cfesvr\u662f\u6a21\u62df\u5668\u57fa\u7840\uff0c\u9664\u6b64\u4e4b\u5916fdt\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u6a21\u5757\u8fdb\u884c\u5206\u6790\u3002\u5b83\u65e2\u7136\u6709fdt,\u90a3\u4e48\u5b83\u5fc5\u7136\u6709\u6a21\u5757\u5316\u7684\u8bbe\u8ba1\uff0c\u8fd9\u4e9b\u8bbe\u8ba1\u5e94\u8be5\u90fd\u662f\u5728riscv\u4e2d\u5b9e\u73b0\u7684\u3002 sim\u6784\u6210 \u00b6 sim\u7684\u6838\u5fc3\u662fprocessor\uff0cprocessor\u4e2d\u5b9e\u73b0\u4e86\u5bf9\u901a\u7528\u5bc4\u5b58\u5668\uff0c\u6307\u4ee4\u96c6\u5bc4\u5b58\u5668\u7684\u7ba1\u7406\uff0c\u540c\u65f6\uff0c\u5c06vector\u5355\u5143\u5355\u72ec\u8fdb\u884c\u4e86\u7ba1\u7406\u3002\u53e6\u5916\uff0c\u4e5f\u5bf9\u6307\u4ee4\u8fdb\u884c\u4e86\u62bd\u8c61\u548c\u7ba1\u7406\uff0c\u5b83\u5305\u542b\u4e86\u6574\u4e2a\u6307\u4ee4\u5904\u7406\u7684\u903b\u8f91\u3002 abstract_device_t \u4e3b\u8981\u7528\u6765\u5b9e\u73b0\u5185\u5b58\u8bbe\u5907\u3002\u800c\u4e14\u8fd9\u4e9b\u5185\u5b58\u8bbe\u5907\u7684\u5b8c\u5168\u662f\u88ab\u52a8\u54cd\u5e94\u7684\uff0c\u9700\u8981cpu\u8bbf\u95ee\u6765\u5e26\u52a8\u3002 bus_t \u7528\u6765\u7ba1\u7406\u8fd9\u4e9b\u5185\u5b58\u8bbe\u5907\u7684\u5730\u5740\u3002 device_t \u7528\u6765\u5b9e\u73b0\u4e00\u4e9b\u7528\u4e8e\u4ea4\u4e92\u7684\u8bbe\u5907\uff0c\u7528\u6765\u5904\u7406\u4e00\u4e9btohost\u547d\u4ee4\u3002 context \u7528\u6765\u5b9e\u73b0CPU\u548chost\u4e24\u4e2a\u7528\u6237\u7ebf\u7a0b\u7684\u5207\u6362 \u5b9e\u73b0\u7ec6\u8282 \u00b6 \u6211\u66fe\u5c1d\u8bd5\u7528\u4e00\u5f20\u56fe\u6765\u6982\u62ecspike\u7684\u5b9e\u73b0\uff0c\u6216\u8005\u8bf4\u6211\u4e60\u60ef\u4e8e\u5927\u800c\u5168\u7684\u601d\u8def\u3002\u5728\u7ed8\u5236\u7684\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u5f88\u96be\u505a\u5230\uff0c\u4e0d\u5bb9\u6613\u7a81\u51fa\u91cd\u70b9\uff0c\u4e5f\u5f88\u96be\u63cf\u8ff0\u7ec6\u81f4\u3002\u8fd9\u5176\u5b9e\u8ba9\u6211\u60f3\u5230\u4e86\u53e6\u4e00\u4e2a\u95ee\u9898\uff1a\u5f53\u6211\u4eec\u9762\u5bf9\u4e00\u4e2a\u4ee3\u7801\u91cf\u6bd4\u8f83\u5927\u7684\u5de5\u7a0b\u7684\u65f6\u5019\uff0c\u5982\u4f55\u66f4\u6709\u6548\u7387\u7684\u7406\u6e05\u5b83\u7684\u5b9e\u73b0\uff0c\u8fd9\u4e2a\u6253\u7b97\u5355\u5f00\u4e00\u7bc7\u6587\u7ae0\u6765\u603b\u7ed3\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u5c06\u6309\u7167\u529f\u80fd\u548c\u6a21\u5757\u5bf9spike\u7684\u5b9e\u73b0\u8fdb\u884c\u5212\u5206\uff0c\u5206\u522b\u9610\u8ff0\u3002 \u603b\u6d41\u7a0b \u00b6 \u5f53\u6211\u4eec\u5b9e\u73b0\u4e86\u6574\u4e2a\u6a21\u62df\u5668\u7684\u6240\u6709\u6a21\u5757\u4e4b\u540e\uff0c\u6211\u4eec\u4ecd\u7136\u9700\u8981\u4e00\u5c0f\u90e8\u5206\u4ee3\u7801\u6765\u89e6\u53d1\u6a21\u62df\u5668\u7684\u521d\u59cb\u5316\uff0c\u5e76\u8ba9\u6a21\u62df\u5668\u6765\u8fd0\u884c\u3002\u5e76\u4e14\u6211\u4eec\u8fd8\u9700\u8981\u505a\u4e00\u4e9b\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u7b49\u4e0e\u6a21\u62df\u5668\u4e1a\u52a1\u903b\u8f91\u65e0\u5173\u4f46\u5fc5\u8981\u7684\u5de5\u4f5c\u3002\u6bd4\u5982gem5\u662f\u57fa\u4e8e\u4e8b\u4ef6\u8fd0\u884c\u7684\uff0c\u90a3\u4e48\u5c31\u8981\u5b9e\u73b0\u4e00\u4e2a\u4e8b\u4ef6\u7ba1\u7406\u4e0e\u8c03\u5ea6\u673a\u5236\u3002 spike\u5c06\u6240\u6709\u7684\u4e1a\u52a1\u903b\u8f91\u5c01\u88c5\u5728sim_t\u4e2d\uff0c\u5e76\u63d0\u4f9b\u4e86run\u63a5\u53e3\uff0c\u5728\u89e3\u6790\u5b8c\u547d\u4ee4\u884c\u53c2\u6570\u548c\u6784\u9020sim_t\u5b9e\u4f8b\u4e4b\u540e\uff0c\u5c31\u4f1a\u8c03\u7528run()\u63a5\u53e3\u8ba9\u6a21\u62df\u5668\u8fd0\u884c\u3002 spike\u81ea\u5df1\u5b9e\u73b0\u4e86\u4e00\u4e2a\u540d\u4e3aoption_parser_t\u7684\u547d\u4ee4\u884c\u89e3\u6790\u5668\uff0c\u5b83\u8981\u6bd4C\u5e93\u4e2d\u7684\u7075\u6d3b\u4e00\u4e9b\uff0c\u8fd9\u91cc\u4e0d\u518d\u5355\u72ec\u5c55\u5f00\u3002 spike\u8fd0\u884c\u7684\u4e3b\u4f53\u662fhost\u4e0etarget\u8fd9\u4e24\u4e2a\u7528\u6237\u7ebf\u7a0b\u3002target\u7ebf\u7a0b\u5305\u542b\u4e86CPU\u7684\u8fd0\u884c\uff0c\u5177\u4f53\u5b9e\u73b0\u5728processor_t\u7684step()\u51fd\u6570\u4e2d\u3002host\u7ebf\u7a0b\u5305\u542b\u4e86\u4e0e\u7528\u6237\u7684\u4ea4\u4e92\u529f\u80fd\uff0c\u4e3b\u8981\u662fdebug\u6a21\u5f0f\u3002 \u5f53CPU\u8fd0\u884c\u4e86INTERLEVEL\u4e2astep\u4e4b\u540e\uff0c\u4fbf\u4f1a\u5207\u6362\u5230host\u7ebf\u7a0b\u6765\u54cd\u5e94tohost\u547d\u4ee4\u3002\u5f53\u6ca1\u6709\u53ef\u6267\u884c\u7684tohost\u547d\u4ee4\u65f6\uff0c\u4fbf\u5207\u6362\u56detarget\u7ebf\u7a0b\uff0c\u7ee7\u7eed\u6267\u884c\u6307\u4ee4\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u8003\u8651\u8fd9\u6837\u5b9e\u73b0\u7684\u610f\u4e49\u3002\u5047\u5982\u8ba9\u6211\u53bb\u5b9e\u73b0\uff0c\u6211\u53ef\u80fd\u4f1a\u5b9e\u73b0\u6210\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5927\u5faa\u73af\uff0c\u6bcf\u4e00\u4e2astep\u90fd\u68c0\u67e5\u4e00\u4e0btohost\u547d\u4ee4\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u5b9e\u73b0\u6700\u7b80\u5355\uff0c\u5de5\u4f5c\u91cf\u6700\u5c0f\u3002spike\u91c7\u7528\u7684\u8fd9\u79cd\u5207\u6362\u7528\u6237\u7ebf\u7a0b\u7684\u65b9\u5f0f\uff0c\u597d\u5904\u662f\u80fd\u591f\u5927\u5927\u51cf\u5c0f\u8f6e\u8be2tohost\u547d\u4ee4\u7684\u6b21\u6570\uff0c\u770b\u8d77\u6765\u4e5f\u66f4\u9ad8\u7ea7\u3002\u6216\u8bb8\u56e0\u4e3a\u91c7\u7528\u4e86\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6a21\u62df\u5668\u8fd0\u884c\u6548\u7387\u4f1a\u63d0\u9ad8\u4e0d\u5c11\uff0c\u4f46\u6211\u4e5f\u6ca1\u6709\u505a\u5177\u4f53\u7684\u5b9e\u9a8c\u6765\u6bd4\u5bf9\u6027\u80fd\u3002 \u603b\u7ed3\u4e00\u4e0b\uff0c\u5982\u679c\u662f\u524d\u671f\u5f00\u53d1\uff0c\u6211\u89c9\u5f97\u4e0d\u5fc5\u8003\u8651\u8fd9\u79cd\u7ec6\u8282\uff0c\u76f4\u63a5\u4e00\u4e2a\u5927\u5faa\u73af\u641e\u5b9a\u597d\u4e86\uff1b\u540e\u671f\u505a\u4f18\uff0c\u8fd9\u662f\u4e00\u79cd\u5f88\u503c\u5f97\u53c2\u8003\u7684\u65b9\u5f0f\u3002 MMU \u00b6 \u5982\u679c\u6211\u53bb\u5b9e\u73b0\u4e00\u4e2a\u529f\u80fd\u6a21\u578b\uff0c\u6211\u4e0d\u4f1a\u7b2c\u4e00\u65f6\u95f4\u8003\u8651\u5230\u5b9e\u73b0MMU\u529f\u80fd\u7684\u91cd\u8981\u6027\u3002\u5c3d\u7ba1\u7b2c\u4e00\u65f6\u95f4\u80fd\u8003\u8651\u5230\u5fc5\u987b\u6709\u4ee3\u7801\u53bb\u5904\u7406\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740(host\u5730\u5740)\u7684\u8f6c\u6362\uff0c\u4f46\u60f3\u8c61\u4e2d\u8fd9\u4e2a\u8f6c\u6362\u53ef\u4ee5\u5b9e\u73b0\u7684\u5f88\u7b80\u5355\u3002\u770b\u4e86spike\u5bf9\u4e8eMMU\u7684\u5b9e\u73b0\u4e4b\u540e\uff0c\u624d\u8ba4\u8bc6\u5230\u5b9e\u9645\u4e0a\u6ca1\u8fd9\u4e48\u7b80\u5355\u3002 MMU\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684\u72b6\u6001\u3001\u6743\u9650\u7684\u5224\u65ad\uff0c\u4e0e\u5f53\u524d\u6a21\u5f0f\uff0cstatus\u5bc4\u5b58\u5668\u7b49\u6709\u7740\u5bc6\u5207\u7684\u5173\u7cfb\u3002\u5f53\u6743\u9650\u4e0d\u591f\u65f6\uff0c\u5e94\u8be5\u8981\u629b\u51fa\u5f02\u5e38\uff0c\u6709\u4e86\u8fd9\u4e9bspike\u624d\u80fd\u7b97\u5b8c\u6574\u3002 \u4e3a\u4ec0\u4e48\u8003\u8651\u7b80\u5355\u4e86\u5462\uff1f\u662f\u51fa\u53d1\u70b9\u7684\u5dee\u5f02\u3002\u5f53\u6211\u5728\u60f3\u7740\u5b9e\u73b0\u4e00\u4e2a\u529f\u80fd\u6a21\u578b\u7684\u65f6\u5019\uff0c\u5fc3\u91cc\u60f3\u7684\u53ea\u662f\u5b9e\u73b0\u6307\u4ee4\u6267\u884c\u7684\u6a21\u62df\uff0c\u4e00\u5207\u7684\u8bbe\u8ba1\u90fd\u56f4\u7ed5\u7740\u6307\u4ee4\u6267\u884c\u53bb\u5c55\u5f00\u3002\u73b0\u5728\u770b\u6765\uff0c\u5e94\u8be5\u628a\u5b9e\u73b0\u4e00\u4e2a\u80fd\u6a21\u62df\u7a0b\u5e8f\u5458\u89c6\u89d2\u7684\u6bcf\u4e00\u4e2a\u82af\u7247\u884c\u4e3a\u7684\u529f\u80fd\u6a21\u578b\u4f5c\u4e3a\u51fa\u53d1\u70b9\u3002 \u4e3a\u4e86\u6478\u6e05MMU\u7684\u884c\u4e3a\uff0c\u5148\u7f57\u5217\u51e0\u4e2a\u7528\u5230\u7684\u67b6\u6784\u77e5\u8bc6\uff1a mstatus.MPRV & MXR & MPP \u00b6 The MPRV (Modify PRiVilege) bit modifies the privilege level at which loads and stores exe\ufffecute. When MPRV=0, loads and stores behave as normal, using the translation and protection mechanisms of the current privilege mode. When MPRV=1, load and store memory addresses are translated and protected, and endianness is applied, as though the current privilege mode were set to MPP. Instruction address-translation and protection are unaffected by the setting of MPRV. MPRV is hardwired to 0 if U-mode is not supported. An MRET or SRET instruction that changes the privilege mode to a mode less privileged than M also sets MPRV=0. The MXR (Make eXecutable Readable) bit modifies the privilege with which loads access virtual memory. When MXR=0, only loads from pages marked readable (R=1 in Figure 4.17) will succeed. When MXR=1, loads from pages marked either readable or executable (R=1 or X=1) will succeed. MXR has no effect when page-based virtual memory is not in effect. MXR is hardwired to 0 if S-mode is not supported. The MPRV and MXR mechanisms were conceived to improve the efficiency of M-mode routines that emulate missing hardware features, e.g., misaligned loads and stores. MPRV obviates the need to perform address translation in software. MXR allows instruction words to be loaded from pages marked execute-only. The current privilege mode and the privilege mode specified by MPP might have different XLEN settings. When MPRV=1, load and store memory addresses are treated as though the current XLEN were set to MPP\u2019s XLEN, following the rules in Section 3.1.6.2. The xPP fields can only hold privilege modes up to x, so MPP is two bits wide and SPP is one bit wide. xPP fields are WARL fields that can hold only privilege mode x and any implemented privilege mode lower than x. If privilege mode x is not implemented, then xPP must be hardwired to 0. M-mode software can determine whether a privilege mode is implemented by writing that mode to MPP then reading it back. If the machine provides only U and M modes, then only a single hardware storage bit is required to represent either 00 or 11 in MPP. \u66f4\u591a\u8d44\u6599\u53ef\u4ee5\u67e5\u770briscv\u6587\u6863 tvm bits \u00b6 The TVM (Trap Virtual Memory) bit supports intercepting supervisor virtual-memory management operations. When TVM=1, attempts to read or write the satp CSR or execute the SFENCE.VMA instruction while executing in S-mode will raise an illegal instruction exception. When TVM=0, these operations are permitted in S-mode. TVM is hard-wired to 0 when S-mode is not supported. The TVM mechanism improves virtualization efficiency by permitting guest operating systems to execute in S-mode, rather than classically virtualizing them in U-mode. This approach obviates the need to trap accesses to most S-mode CSRs. Trapping satp accesses and the SFENCE.VMA instruction provides the hooks necessary to lazily populate shadow page tables. spike\u5728MMU\u7684\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\u8fd8\u501f\u9274\u4e86TLB\u7684\u6982\u5ff5\uff0c\u5b9e\u73b0\u4e86\u57fa\u4e8e\u54c8\u5e0c\u8868\u7684\u7b80\u5355\u7684TLB\uff0c\u4ee5\u6b64\u6765\u52a0\u901f\u5730\u5740\u8f6c\u6362\uff0c\u63d0\u9ad8\u6a21\u62df\u6548\u7387\u3002 32bit\u865a\u62df\u5730\u5740\u8f6c\u6362\u8fc7\u7a0b \u00b6 A virtual address va is translated into a physical address pa as follows: 1. Let a be satp.ppn \u00d7 PAGESIZE, and let i = LEVELS S 1. (For Sv32, PAGESIZE=212 and LEVELS=2.) 2. Let pte be the value of the PTE at address a+va.vpn[i]\u00d7PTESIZE. (For Sv32, PTESIZE=4.) If accessing pte violates a PMA or PMP check, raise an access-fault exception corresponding to the original access type. 3. If pte.v = 0, or if pte.r = 0 and pte.w = 1, stop and raise a page-fault exception corresponding to the original access type. 76 Volume II: RISC-V Privileged Architectures V1.12-draft 4. Otherwise, the PTE is valid. If pte.r = 1 or pte.x = 1, go to step 5. Otherwise, this PTE is a pointer to the next level of the page table. Let i = i \u27e9 1. If i < 0, stop and raise a page-fault exception corresponding to the original access type. Otherwise, let a = pte.ppn \u00d7 PAGESIZE and go to step 2. 5. A leaf PTE has been found. Determine if the requested memory access is allowed by the pte.r, pte.w, pte.x, and pte.u bits, given the current privilege mode and the value of the SUM and MXR fields of the mstatus register. If not, stop and raise a page-fault exception corresponding to the original access type. 6. If i > 0 and pte.ppn[i \u27e9 1 : 0] = 0, this is a misaligned superpage; stop and raise a page-fault exception corresponding to the original access type. 7. If pte.a = 0, or if the memory access is a store and pte.d = 0, either raise a page-fault exception corresponding to the original access type, or: \u2022 Set pte.a to 1 and, if the memory access is a store, also set pte.d to 1. \u2022 If this access violates a PMA or PMP check, raise an access-fault exception corresponding to the original access type. \u2022 This update and the loading of pte in step 2 must be atomic; in particular, no intervening store to the PTE may be perceived to have occurred in-between. 8. The translation is successful. The translated physical address is given as follows: \u2022 pa.pgoff = va.pgoff. \u2022 If i > 0, then this is a superpage translation and pa.ppn[i \u27e9 1 : 0] = va.vpn[i \u27e9 1 : 0]. \u2022 pa.ppn[LEVELS S 1 : i] = pte.ppn[LEVELS S 1 : i] CPU\u8fd0\u884c\u6d41\u7a0b \u00b6 \u63a5\u4e0b\u6765\u5c31\u770b\u4e00\u4e0b\uff0cCPU\u662f\u5982\u4f55\u5177\u4f53\u6267\u884c\u6307\u4ee4\u7684\uff0c\u8fd9\u662f\u4e1a\u52a1\u903b\u8f91\u6838\u5fc3\u3002 \u5185\u5b58\u8bbf\u95ee \u00b6 \u6307\u4ee4\u7ba1\u7406 \u00b6","title":"\u4ecespike\u5206\u6790\u4e00\u6b3e\u6a21\u62df\u5668\u7684\u8bbe\u8ba1\u4e0e\u5b9e\u73b0"},{"location":"simulator/spike.html#spike","text":"","title":"\u4ecespike\u5206\u6790\u4e00\u6b3e\u6a21\u62df\u5668\u7684\u8bbe\u8ba1\u4e0e\u5b9e\u73b0"},{"location":"simulator/spike.html#_1","text":"\u76ee\u524d\u5728\u505aRISCV\u6a21\u62df\u5668\u7684\u5f00\u53d1\uff0c\u5176\u4e2d\u529f\u80fd\uff08\u884c\u4e3a\u7ea7\uff09\u6a21\u62df\u5668\u57fa\u4e8espike\u8fdb\u884c\u4fee\u6539\u3002\u5728\u770bspike\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u6709\u4e9b\u90e8\u5206\u7684\u5b9e\u73b0\u6bd4\u6211\u60f3\u8c61\u7684\u8981\u590d\u6742\uff0c\u5e94\u8be5\u662f\u6211\u5c11\u8003\u8651\u4e86\u5f88\u591a\u60c5\u51b5\u3002\u90a3\u4e48\u7531\u6b64\u6211\u4ea7\u751f\u4e86\u4e00\u4e2a\u7591\u95ee\uff0c\u8981\u505a\u4e00\u6b3e\u529f\u80fd\u578b\u7684SOC\u6a21\u62df\u5668\uff0c\u5230\u5e95\u8981\u8003\u8651\u90a3\u4e9b\u65b9\u9762\uff1f\u6216\u8005\u8bf4\uff0c\u8ba9\u6211\u4ece\u96f6\u5230\u4e00\u53bb\u505a\u4e00\u6b3e\u529f\u80fd\u578b\u6a21\u62df\u5668\uff0c\u5e94\u8be5\u600e\u4e48\u53bb\u505a\uff1f \u51ed\u81ea\u6211\u7684\u611f\u89c9\uff0c\u4ece\u9700\u6c42\u548c\u8bbe\u8ba1\u51fa\u53d1\uff0c\u5927\u81f4\u60f3\u5230\u5982\u4e0b\u51e0\u70b9\uff1a \u5982\u4f55\u7ec4\u7ec7SOC\u5404\u4e2a\u6a21\u5757\u7684\u8fd0\u884c\uff0c\u6700\u7b80\u5355\u76f4\u63a5\u7684\u5e94\u8be5\u5c31\u662f\u5904\u7406\u5668\u6309\u7167\u65f6\u949f\u8fd0\u884c\uff0c\u5176\u4ed6\u7edd\u5927\u591a\u6570\u5355\u5143\u90fd\u88ab\u52a8\u7684\u63a5\u53d7\u5904\u7406\u5668\u7684\u8bbf\u95ee\u5373\u53ef\u3002 \u5982\u4f55\u7ec4\u7ec7\u6307\u4ee4\u96c6\u53ca\u8bd1\u7801\uff0c\u5373\u627e\u5230\u4e00\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684\u4ece\u6307\u4ee4\u7801\u5230\u6307\u4ee4\u5b9e\u73b0\u7684\u7ba1\u7406\u65b9\u5f0f\uff0c\u5e76\u4e14\u6307\u4ee4\u96c6\u7ba1\u7406\u5e94\u8be5\u5177\u6709\u6bd4\u8f83\u597d\u7684\u6269\u5c55\u6027\u3002 \u5982\u4f55\u7ec4\u7ec7\u5bc4\u5b58\u5668 \u5982\u4f55\u7ba1\u7406\u5730\u5740\uff0c\u662f\u5426\u9700\u8981MMU\u53ca\u603b\u7ebf\u7684\u62bd\u8c61\uff0c\u5982\u4f55\u4f7f\u5904\u7406\u5668\u53d1\u51fa\u7684\u865a\u62df\u5730\u5740\u80fd\u591f\u6b63\u786e\u9ad8\u6548\u7684\u8bbf\u95ee\u5230\u76ee\u7684\u8bbe\u5907 \u5e94\u8be5\u6709\u4e00\u5b9a\u7684\u8c03\u8bd5\u529f\u80fd\uff0c\u80fd\u591f\u663e\u793a\u6307\u4ee4\u6d41\uff0c\u751a\u81f3\u5355\u6b65\u8c03\u8bd5\uff0c\u67e5\u770b\u4e00\u4e9b\u5bc4\u5b58\u5668\u72b6\u6001 \u600e\u6837\u5b9e\u73b0printf\u6253\u5370\uff0c\u8fd9\u4f1a\u5bf9\u76ee\u6807\u4ee3\u7801\u7684\u8c03\u8bd5\u975e\u5e38\u6709\u5e2e\u52a9 \u600e\u6837\u8ba9\u6a21\u62df\u5668\u505c\u4e0b\u6765 \u4e0a\u9762\u8fd9\u4e9b\u662f\u5047\u5982\u6211\u53bb\u505a\u4e00\u6b3e\u6a21\u62df\u5668\u6211\u4f1a\u60f3\u5230\u7684\uff0c\u90a3\u4e48spike\u662f\u600e\u6837\u5b9e\u73b0\u7684\u5462\uff1f\u5b83\u7684\u8bbe\u8ba1\u8005\u662f\u5426\u4e5f\u8003\u8651\u8fc7\u6211\u7684\u8fd9\u4e9b\u95ee\u9898\uff0c\u4ed6\u4eec\u53c8\u662f\u5982\u4f55\u5904\u7406\u7684\u5462\uff1f\u4e0b\u9762\u5c31\u9488\u5bf9spike\u4e2d\u7684\u90e8\u5206\u5b9e\u73b0\u7ec6\u8282\u8fdb\u884c\u5206\u6790\uff0c\u5e76\u63a2\u8ba8\u4e0a\u8ff0\u95ee\u9898\u3002\u5728\u5206\u6790\u65f6\uff0c\u4e3b\u8981\u4f1a\u6d89\u53ca\u4e24\u4e2a\u95ee\u9898\uff0c\u4e00\u662f\u7279\u5b9a\u6a21\u5757\u5b58\u5728\u7684\u610f\u4e49\uff0c\u4e8c\u662f\u8be5\u6a21\u5757\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002\u8fd9\u5c31\u662f\u8fd9\u7bc7\u6587\u7ae0\u7684\u76ee\u7684\u3002","title":"\u524d\u8a00"},{"location":"simulator/spike.html#spike_1","text":"spike\u7248\u672c\u4e3a1.0.1-dev","title":"spike\u5b9e\u73b0"},{"location":"simulator/spike.html#_2","text":"\u9996\u5148\u4ece\u76ee\u5f55\u7ed3\u6784\u6765\u770bspike\u5927\u81f4\u5b9e\u73b0\u4e86\u54ea\u4e9b\u4e1c\u897f disasm \u4ece\u540d\u79f0\u4e0a\u6765\u770b\u662f\u53cd\u6c47\u7f16\uff0c\u5b9e\u9645\u5185\u5bb9\u662f\u6839\u636e\u6307\u4ee4\u7801\u7ec4\u88c5\u53cd\u6c47\u7f16\u5b57\u7b26\u4e32\uff0c\u5e94\u8be5\u662f\u4e3a\u4e86debug\u548c\u663e\u793a\u6307\u4ee4\u6d41 fdt \u6241\u5e73\u8bbe\u5907\u6811\uff0c\u731c\u6d4b\u8bbe\u5907\u6811\u662f\u5b83\u7528\u6765\u5b9e\u73b0SOC\u914d\u7f6e\u7684\u65b9\u5f0f\uff0c\u6211\u5f88\u8d5e\u540c\u8fd9\u79cd\u65b9\u5f0f\uff0c\u611f\u89c9\u6bd4gem5\u7684python\u65b9\u5f0f\u8981\u66f4\u597d fesvr \u8fd9\u4e2a\u547d\u540d\u4e0d\u592a\u597d\u7406\u89e3\uff0c\u662f\u6e90\u4e8eFrontend Server\u7684\u7f29\u5199\u3002\u5b83\u5305\u542b\u4e00\u4e9b\u4e0eriscv\u65e0\u5173\u7684\u6784\u6210\u6a21\u62df\u5668\u7684\u7ec4\u4ef6\uff0cSOC\u7ec4\u4ef6\u7684\u4e00\u4e9b\u57fa\u7840\u62bd\u8c61\uff0c\u4ee5\u53ca\u6a21\u62df\u5668\u7684\u8fd0\u884c\u7ba1\u7406\u3002\u5b83\u5b9e\u73b0\u4e86\u4e00\u4e2a\u6a21\u62df\u5668\u7684\u5927\u6846\u67b6\u3002\u8fd9\u6837\u6765\u770b\uff0c\u5b83\u7684\u547d\u540d\u4f3c\u4e4e\u8fd8\u633a\u5408\u7406\u3002 riscv \u5176\u4e2d\u7684insns\u76ee\u5f55\u4e2d\u662friscv\u6307\u4ee4\u96c6\u7684\u5b9e\u73b0\uff0c\u5269\u4e0b\u7684\u662fSOC\u7684\u5177\u4f53\u5b9e\u73b0 softfloat \u6d6e\u70b9\u5e93\uff0c\u6765\u81ea\u4e8eIEEE Floating-Point Arithmetic Packag spike-main \u6a21\u62df\u5668\u7a0b\u5e8f\u5165\u53e3 \u4ece\u76ee\u5f55\u7ed3\u6784\u4e0a\u6765\u770b\uff0c\u7ed3\u6784\u6bd4\u8f83\u7b80\u5355\uff0c\u6ca1\u6709\u592a\u591a\u7684\u5206\u5c42\uff0c\u53ef\u4ee5\u770b\u51faspike\u7684\u76ee\u7684\u5e76\u4e0d\u662f\u505a\u4e00\u4e2a\u529f\u80fd\u6027\u6a21\u62df\u5668\u6846\u67b6\uff0c\u800c\u662f\u5b8c\u5168\u9488\u5bf9riscv\u8fdb\u884c\u7684\u8bbe\u8ba1\u3002riscv\u76ee\u5f55\u662f\u5b9e\u73b0\u7684\u6838\u5fc3\uff0cfesvr\u662f\u6a21\u62df\u5668\u57fa\u7840\uff0c\u9664\u6b64\u4e4b\u5916fdt\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u6a21\u5757\u8fdb\u884c\u5206\u6790\u3002\u5b83\u65e2\u7136\u6709fdt,\u90a3\u4e48\u5b83\u5fc5\u7136\u6709\u6a21\u5757\u5316\u7684\u8bbe\u8ba1\uff0c\u8fd9\u4e9b\u8bbe\u8ba1\u5e94\u8be5\u90fd\u662f\u5728riscv\u4e2d\u5b9e\u73b0\u7684\u3002","title":"\u76ee\u5f55\u7ed3\u6784"},{"location":"simulator/spike.html#sim","text":"sim\u7684\u6838\u5fc3\u662fprocessor\uff0cprocessor\u4e2d\u5b9e\u73b0\u4e86\u5bf9\u901a\u7528\u5bc4\u5b58\u5668\uff0c\u6307\u4ee4\u96c6\u5bc4\u5b58\u5668\u7684\u7ba1\u7406\uff0c\u540c\u65f6\uff0c\u5c06vector\u5355\u5143\u5355\u72ec\u8fdb\u884c\u4e86\u7ba1\u7406\u3002\u53e6\u5916\uff0c\u4e5f\u5bf9\u6307\u4ee4\u8fdb\u884c\u4e86\u62bd\u8c61\u548c\u7ba1\u7406\uff0c\u5b83\u5305\u542b\u4e86\u6574\u4e2a\u6307\u4ee4\u5904\u7406\u7684\u903b\u8f91\u3002 abstract_device_t \u4e3b\u8981\u7528\u6765\u5b9e\u73b0\u5185\u5b58\u8bbe\u5907\u3002\u800c\u4e14\u8fd9\u4e9b\u5185\u5b58\u8bbe\u5907\u7684\u5b8c\u5168\u662f\u88ab\u52a8\u54cd\u5e94\u7684\uff0c\u9700\u8981cpu\u8bbf\u95ee\u6765\u5e26\u52a8\u3002 bus_t \u7528\u6765\u7ba1\u7406\u8fd9\u4e9b\u5185\u5b58\u8bbe\u5907\u7684\u5730\u5740\u3002 device_t \u7528\u6765\u5b9e\u73b0\u4e00\u4e9b\u7528\u4e8e\u4ea4\u4e92\u7684\u8bbe\u5907\uff0c\u7528\u6765\u5904\u7406\u4e00\u4e9btohost\u547d\u4ee4\u3002 context \u7528\u6765\u5b9e\u73b0CPU\u548chost\u4e24\u4e2a\u7528\u6237\u7ebf\u7a0b\u7684\u5207\u6362","title":"sim\u6784\u6210"},{"location":"simulator/spike.html#_3","text":"\u6211\u66fe\u5c1d\u8bd5\u7528\u4e00\u5f20\u56fe\u6765\u6982\u62ecspike\u7684\u5b9e\u73b0\uff0c\u6216\u8005\u8bf4\u6211\u4e60\u60ef\u4e8e\u5927\u800c\u5168\u7684\u601d\u8def\u3002\u5728\u7ed8\u5236\u7684\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u5f88\u96be\u505a\u5230\uff0c\u4e0d\u5bb9\u6613\u7a81\u51fa\u91cd\u70b9\uff0c\u4e5f\u5f88\u96be\u63cf\u8ff0\u7ec6\u81f4\u3002\u8fd9\u5176\u5b9e\u8ba9\u6211\u60f3\u5230\u4e86\u53e6\u4e00\u4e2a\u95ee\u9898\uff1a\u5f53\u6211\u4eec\u9762\u5bf9\u4e00\u4e2a\u4ee3\u7801\u91cf\u6bd4\u8f83\u5927\u7684\u5de5\u7a0b\u7684\u65f6\u5019\uff0c\u5982\u4f55\u66f4\u6709\u6548\u7387\u7684\u7406\u6e05\u5b83\u7684\u5b9e\u73b0\uff0c\u8fd9\u4e2a\u6253\u7b97\u5355\u5f00\u4e00\u7bc7\u6587\u7ae0\u6765\u603b\u7ed3\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u5c06\u6309\u7167\u529f\u80fd\u548c\u6a21\u5757\u5bf9spike\u7684\u5b9e\u73b0\u8fdb\u884c\u5212\u5206\uff0c\u5206\u522b\u9610\u8ff0\u3002","title":"\u5b9e\u73b0\u7ec6\u8282"},{"location":"simulator/spike.html#_4","text":"\u5f53\u6211\u4eec\u5b9e\u73b0\u4e86\u6574\u4e2a\u6a21\u62df\u5668\u7684\u6240\u6709\u6a21\u5757\u4e4b\u540e\uff0c\u6211\u4eec\u4ecd\u7136\u9700\u8981\u4e00\u5c0f\u90e8\u5206\u4ee3\u7801\u6765\u89e6\u53d1\u6a21\u62df\u5668\u7684\u521d\u59cb\u5316\uff0c\u5e76\u8ba9\u6a21\u62df\u5668\u6765\u8fd0\u884c\u3002\u5e76\u4e14\u6211\u4eec\u8fd8\u9700\u8981\u505a\u4e00\u4e9b\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u7b49\u4e0e\u6a21\u62df\u5668\u4e1a\u52a1\u903b\u8f91\u65e0\u5173\u4f46\u5fc5\u8981\u7684\u5de5\u4f5c\u3002\u6bd4\u5982gem5\u662f\u57fa\u4e8e\u4e8b\u4ef6\u8fd0\u884c\u7684\uff0c\u90a3\u4e48\u5c31\u8981\u5b9e\u73b0\u4e00\u4e2a\u4e8b\u4ef6\u7ba1\u7406\u4e0e\u8c03\u5ea6\u673a\u5236\u3002 spike\u5c06\u6240\u6709\u7684\u4e1a\u52a1\u903b\u8f91\u5c01\u88c5\u5728sim_t\u4e2d\uff0c\u5e76\u63d0\u4f9b\u4e86run\u63a5\u53e3\uff0c\u5728\u89e3\u6790\u5b8c\u547d\u4ee4\u884c\u53c2\u6570\u548c\u6784\u9020sim_t\u5b9e\u4f8b\u4e4b\u540e\uff0c\u5c31\u4f1a\u8c03\u7528run()\u63a5\u53e3\u8ba9\u6a21\u62df\u5668\u8fd0\u884c\u3002 spike\u81ea\u5df1\u5b9e\u73b0\u4e86\u4e00\u4e2a\u540d\u4e3aoption_parser_t\u7684\u547d\u4ee4\u884c\u89e3\u6790\u5668\uff0c\u5b83\u8981\u6bd4C\u5e93\u4e2d\u7684\u7075\u6d3b\u4e00\u4e9b\uff0c\u8fd9\u91cc\u4e0d\u518d\u5355\u72ec\u5c55\u5f00\u3002 spike\u8fd0\u884c\u7684\u4e3b\u4f53\u662fhost\u4e0etarget\u8fd9\u4e24\u4e2a\u7528\u6237\u7ebf\u7a0b\u3002target\u7ebf\u7a0b\u5305\u542b\u4e86CPU\u7684\u8fd0\u884c\uff0c\u5177\u4f53\u5b9e\u73b0\u5728processor_t\u7684step()\u51fd\u6570\u4e2d\u3002host\u7ebf\u7a0b\u5305\u542b\u4e86\u4e0e\u7528\u6237\u7684\u4ea4\u4e92\u529f\u80fd\uff0c\u4e3b\u8981\u662fdebug\u6a21\u5f0f\u3002 \u5f53CPU\u8fd0\u884c\u4e86INTERLEVEL\u4e2astep\u4e4b\u540e\uff0c\u4fbf\u4f1a\u5207\u6362\u5230host\u7ebf\u7a0b\u6765\u54cd\u5e94tohost\u547d\u4ee4\u3002\u5f53\u6ca1\u6709\u53ef\u6267\u884c\u7684tohost\u547d\u4ee4\u65f6\uff0c\u4fbf\u5207\u6362\u56detarget\u7ebf\u7a0b\uff0c\u7ee7\u7eed\u6267\u884c\u6307\u4ee4\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u8003\u8651\u8fd9\u6837\u5b9e\u73b0\u7684\u610f\u4e49\u3002\u5047\u5982\u8ba9\u6211\u53bb\u5b9e\u73b0\uff0c\u6211\u53ef\u80fd\u4f1a\u5b9e\u73b0\u6210\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5927\u5faa\u73af\uff0c\u6bcf\u4e00\u4e2astep\u90fd\u68c0\u67e5\u4e00\u4e0btohost\u547d\u4ee4\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u5b9e\u73b0\u6700\u7b80\u5355\uff0c\u5de5\u4f5c\u91cf\u6700\u5c0f\u3002spike\u91c7\u7528\u7684\u8fd9\u79cd\u5207\u6362\u7528\u6237\u7ebf\u7a0b\u7684\u65b9\u5f0f\uff0c\u597d\u5904\u662f\u80fd\u591f\u5927\u5927\u51cf\u5c0f\u8f6e\u8be2tohost\u547d\u4ee4\u7684\u6b21\u6570\uff0c\u770b\u8d77\u6765\u4e5f\u66f4\u9ad8\u7ea7\u3002\u6216\u8bb8\u56e0\u4e3a\u91c7\u7528\u4e86\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6a21\u62df\u5668\u8fd0\u884c\u6548\u7387\u4f1a\u63d0\u9ad8\u4e0d\u5c11\uff0c\u4f46\u6211\u4e5f\u6ca1\u6709\u505a\u5177\u4f53\u7684\u5b9e\u9a8c\u6765\u6bd4\u5bf9\u6027\u80fd\u3002 \u603b\u7ed3\u4e00\u4e0b\uff0c\u5982\u679c\u662f\u524d\u671f\u5f00\u53d1\uff0c\u6211\u89c9\u5f97\u4e0d\u5fc5\u8003\u8651\u8fd9\u79cd\u7ec6\u8282\uff0c\u76f4\u63a5\u4e00\u4e2a\u5927\u5faa\u73af\u641e\u5b9a\u597d\u4e86\uff1b\u540e\u671f\u505a\u4f18\uff0c\u8fd9\u662f\u4e00\u79cd\u5f88\u503c\u5f97\u53c2\u8003\u7684\u65b9\u5f0f\u3002","title":"\u603b\u6d41\u7a0b"},{"location":"simulator/spike.html#mmu","text":"\u5982\u679c\u6211\u53bb\u5b9e\u73b0\u4e00\u4e2a\u529f\u80fd\u6a21\u578b\uff0c\u6211\u4e0d\u4f1a\u7b2c\u4e00\u65f6\u95f4\u8003\u8651\u5230\u5b9e\u73b0MMU\u529f\u80fd\u7684\u91cd\u8981\u6027\u3002\u5c3d\u7ba1\u7b2c\u4e00\u65f6\u95f4\u80fd\u8003\u8651\u5230\u5fc5\u987b\u6709\u4ee3\u7801\u53bb\u5904\u7406\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740(host\u5730\u5740)\u7684\u8f6c\u6362\uff0c\u4f46\u60f3\u8c61\u4e2d\u8fd9\u4e2a\u8f6c\u6362\u53ef\u4ee5\u5b9e\u73b0\u7684\u5f88\u7b80\u5355\u3002\u770b\u4e86spike\u5bf9\u4e8eMMU\u7684\u5b9e\u73b0\u4e4b\u540e\uff0c\u624d\u8ba4\u8bc6\u5230\u5b9e\u9645\u4e0a\u6ca1\u8fd9\u4e48\u7b80\u5355\u3002 MMU\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684\u72b6\u6001\u3001\u6743\u9650\u7684\u5224\u65ad\uff0c\u4e0e\u5f53\u524d\u6a21\u5f0f\uff0cstatus\u5bc4\u5b58\u5668\u7b49\u6709\u7740\u5bc6\u5207\u7684\u5173\u7cfb\u3002\u5f53\u6743\u9650\u4e0d\u591f\u65f6\uff0c\u5e94\u8be5\u8981\u629b\u51fa\u5f02\u5e38\uff0c\u6709\u4e86\u8fd9\u4e9bspike\u624d\u80fd\u7b97\u5b8c\u6574\u3002 \u4e3a\u4ec0\u4e48\u8003\u8651\u7b80\u5355\u4e86\u5462\uff1f\u662f\u51fa\u53d1\u70b9\u7684\u5dee\u5f02\u3002\u5f53\u6211\u5728\u60f3\u7740\u5b9e\u73b0\u4e00\u4e2a\u529f\u80fd\u6a21\u578b\u7684\u65f6\u5019\uff0c\u5fc3\u91cc\u60f3\u7684\u53ea\u662f\u5b9e\u73b0\u6307\u4ee4\u6267\u884c\u7684\u6a21\u62df\uff0c\u4e00\u5207\u7684\u8bbe\u8ba1\u90fd\u56f4\u7ed5\u7740\u6307\u4ee4\u6267\u884c\u53bb\u5c55\u5f00\u3002\u73b0\u5728\u770b\u6765\uff0c\u5e94\u8be5\u628a\u5b9e\u73b0\u4e00\u4e2a\u80fd\u6a21\u62df\u7a0b\u5e8f\u5458\u89c6\u89d2\u7684\u6bcf\u4e00\u4e2a\u82af\u7247\u884c\u4e3a\u7684\u529f\u80fd\u6a21\u578b\u4f5c\u4e3a\u51fa\u53d1\u70b9\u3002 \u4e3a\u4e86\u6478\u6e05MMU\u7684\u884c\u4e3a\uff0c\u5148\u7f57\u5217\u51e0\u4e2a\u7528\u5230\u7684\u67b6\u6784\u77e5\u8bc6\uff1a","title":"MMU"},{"location":"simulator/spike.html#mstatusmprv-mxr-mpp","text":"The MPRV (Modify PRiVilege) bit modifies the privilege level at which loads and stores exe\ufffecute. When MPRV=0, loads and stores behave as normal, using the translation and protection mechanisms of the current privilege mode. When MPRV=1, load and store memory addresses are translated and protected, and endianness is applied, as though the current privilege mode were set to MPP. Instruction address-translation and protection are unaffected by the setting of MPRV. MPRV is hardwired to 0 if U-mode is not supported. An MRET or SRET instruction that changes the privilege mode to a mode less privileged than M also sets MPRV=0. The MXR (Make eXecutable Readable) bit modifies the privilege with which loads access virtual memory. When MXR=0, only loads from pages marked readable (R=1 in Figure 4.17) will succeed. When MXR=1, loads from pages marked either readable or executable (R=1 or X=1) will succeed. MXR has no effect when page-based virtual memory is not in effect. MXR is hardwired to 0 if S-mode is not supported. The MPRV and MXR mechanisms were conceived to improve the efficiency of M-mode routines that emulate missing hardware features, e.g., misaligned loads and stores. MPRV obviates the need to perform address translation in software. MXR allows instruction words to be loaded from pages marked execute-only. The current privilege mode and the privilege mode specified by MPP might have different XLEN settings. When MPRV=1, load and store memory addresses are treated as though the current XLEN were set to MPP\u2019s XLEN, following the rules in Section 3.1.6.2. The xPP fields can only hold privilege modes up to x, so MPP is two bits wide and SPP is one bit wide. xPP fields are WARL fields that can hold only privilege mode x and any implemented privilege mode lower than x. If privilege mode x is not implemented, then xPP must be hardwired to 0. M-mode software can determine whether a privilege mode is implemented by writing that mode to MPP then reading it back. If the machine provides only U and M modes, then only a single hardware storage bit is required to represent either 00 or 11 in MPP. \u66f4\u591a\u8d44\u6599\u53ef\u4ee5\u67e5\u770briscv\u6587\u6863","title":"mstatus.MPRV &amp; MXR &amp; MPP"},{"location":"simulator/spike.html#tvm-bits","text":"The TVM (Trap Virtual Memory) bit supports intercepting supervisor virtual-memory management operations. When TVM=1, attempts to read or write the satp CSR or execute the SFENCE.VMA instruction while executing in S-mode will raise an illegal instruction exception. When TVM=0, these operations are permitted in S-mode. TVM is hard-wired to 0 when S-mode is not supported. The TVM mechanism improves virtualization efficiency by permitting guest operating systems to execute in S-mode, rather than classically virtualizing them in U-mode. This approach obviates the need to trap accesses to most S-mode CSRs. Trapping satp accesses and the SFENCE.VMA instruction provides the hooks necessary to lazily populate shadow page tables. spike\u5728MMU\u7684\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\u8fd8\u501f\u9274\u4e86TLB\u7684\u6982\u5ff5\uff0c\u5b9e\u73b0\u4e86\u57fa\u4e8e\u54c8\u5e0c\u8868\u7684\u7b80\u5355\u7684TLB\uff0c\u4ee5\u6b64\u6765\u52a0\u901f\u5730\u5740\u8f6c\u6362\uff0c\u63d0\u9ad8\u6a21\u62df\u6548\u7387\u3002","title":"tvm bits"},{"location":"simulator/spike.html#32bit","text":"A virtual address va is translated into a physical address pa as follows: 1. Let a be satp.ppn \u00d7 PAGESIZE, and let i = LEVELS S 1. (For Sv32, PAGESIZE=212 and LEVELS=2.) 2. Let pte be the value of the PTE at address a+va.vpn[i]\u00d7PTESIZE. (For Sv32, PTESIZE=4.) If accessing pte violates a PMA or PMP check, raise an access-fault exception corresponding to the original access type. 3. If pte.v = 0, or if pte.r = 0 and pte.w = 1, stop and raise a page-fault exception corresponding to the original access type. 76 Volume II: RISC-V Privileged Architectures V1.12-draft 4. Otherwise, the PTE is valid. If pte.r = 1 or pte.x = 1, go to step 5. Otherwise, this PTE is a pointer to the next level of the page table. Let i = i \u27e9 1. If i < 0, stop and raise a page-fault exception corresponding to the original access type. Otherwise, let a = pte.ppn \u00d7 PAGESIZE and go to step 2. 5. A leaf PTE has been found. Determine if the requested memory access is allowed by the pte.r, pte.w, pte.x, and pte.u bits, given the current privilege mode and the value of the SUM and MXR fields of the mstatus register. If not, stop and raise a page-fault exception corresponding to the original access type. 6. If i > 0 and pte.ppn[i \u27e9 1 : 0] = 0, this is a misaligned superpage; stop and raise a page-fault exception corresponding to the original access type. 7. If pte.a = 0, or if the memory access is a store and pte.d = 0, either raise a page-fault exception corresponding to the original access type, or: \u2022 Set pte.a to 1 and, if the memory access is a store, also set pte.d to 1. \u2022 If this access violates a PMA or PMP check, raise an access-fault exception corresponding to the original access type. \u2022 This update and the loading of pte in step 2 must be atomic; in particular, no intervening store to the PTE may be perceived to have occurred in-between. 8. The translation is successful. The translated physical address is given as follows: \u2022 pa.pgoff = va.pgoff. \u2022 If i > 0, then this is a superpage translation and pa.ppn[i \u27e9 1 : 0] = va.vpn[i \u27e9 1 : 0]. \u2022 pa.ppn[LEVELS S 1 : i] = pte.ppn[LEVELS S 1 : i]","title":"32bit\u865a\u62df\u5730\u5740\u8f6c\u6362\u8fc7\u7a0b"},{"location":"simulator/spike.html#cpu","text":"\u63a5\u4e0b\u6765\u5c31\u770b\u4e00\u4e0b\uff0cCPU\u662f\u5982\u4f55\u5177\u4f53\u6267\u884c\u6307\u4ee4\u7684\uff0c\u8fd9\u662f\u4e1a\u52a1\u903b\u8f91\u6838\u5fc3\u3002","title":"CPU\u8fd0\u884c\u6d41\u7a0b"},{"location":"simulator/spike.html#_5","text":"","title":"\u5185\u5b58\u8bbf\u95ee"},{"location":"simulator/spike.html#_6","text":"","title":"\u6307\u4ee4\u7ba1\u7406"},{"location":"simulator/trace_format.html","text":"\u5229\u7528Trace\u8fdb\u884c\u6027\u80fd\u5206\u6790 \u00b6 \u524d\u9762\u5df2\u7ecf\u603b\u7ed3\u8fc7\u501f\u52a9google\u7684tracing\u6765\u8fdb\u884c\u6027\u80fd\u5206\u6790\u7684\u65b9\u6cd5 \u4f7f\u7528chrome-tracing\u5de5\u5177\u67e5\u770b\u6027\u80fd\u5206\u6790log \u3002\u6700\u8fd1\u9700\u8981\u8ba9\u82af\u7247\u9a8c\u8bc1\u7684\u540c\u4e8b\u63d0\u4f9b\u4e00\u4e9b\u4eff\u771f\u7684trace\uff0c\u4ee5\u4fbf\u8fdb\u884c\u6027\u80fd\u5206\u6790\u3002\u82af\u7247\u9a8c\u8bc1\u540c\u4e8b\u5374\u4e0d\u77e5\u9053\u5e94\u8be5\u63d0\u4f9b\u600e\u6837\u7684trace, \u6211\u4e5f\u6ca1\u6cd5\u6bd4\u8f83\u8be6\u7ec6\u7684\u7ed9\u4ed6\u8fdb\u884c\u63cf\u8ff0\uff0c\u4e00\u662f\u56e0\u4e3atrace\u5fc5\u7136\u8981\u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790\uff0c\u7b3c\u7edf\u7684\u6307\u5bfc\u610f\u89c1\u5f88\u96be\u843d\u5730\u3002\u4e8c\u662f\u6211\u81ea\u5df1\u5bf9\u6b64\u4e5f\u6ca1\u6709\u4e00\u4e2a\u597d\u7684\u603b\u7ed3\u3002\u6240\u4ee5\u628a\u4e4b\u524d\u505a\u7684\u4e00\u4e9btrace\u5728\u8fd9\u91cc\u501f\u673a\u505a\u4e00\u4e9b\u603b\u7ed3\uff0c\u4ee5\u4fbf\u540e\u7eed\u80fd\u591f\u63d0\u4f9b\u4e00\u5957\u76f8\u5bf9\u666e\u9002\u7684\u65b9\u6cd5\u548c\u5de5\u5177\u6765\u505atrace\u7684\u6027\u80fd\u5206\u6790\u3002 \u6838\u5fc3\u601d\u60f3 \u00b6 trace\u91c7\u7528\u4e8b\u4ef6\u7684\u5f62\u5f0f\uff0c\u4ee5\u6307\u4ee4\u4e3a\u5bf9\u8c61\uff0c\u8bb0\u5f55\u6307\u4ee4\u5728\u67d0\u4e2acycle\u89e6\u53d1\u4e86\u600e\u6837\u7684\u4e8b\u4ef6\uff0c\u4ee5\u6b64\u6765\u5206\u6790\u6027\u80fd\u4f18\u5316\u7684\u53ef\u80fd\u6027\u3002 \u6307\u4ee4\u8981\u6709\u5168\u5c40\u552f\u4e00\u7684ID(\u6bd4\u5982\u8bf4PC)\u6765\u8bc6\u522b(\u5728\u6709\u4e9b\u7ed3\u6784\u4e2d\u53ef\u80fd\u4e0d\u4fdd\u5b58\u5168\u5c40\u552f\u4e00ID, \u8fd9\u65f6\u8981\u627e\u5230\u8f6c\u6362\u7684\u4f4d\u7f6e\uff0c\u5efa\u7acb\u5168\u5c40\u552f\u4e00ID\u4e0e\u6a21\u5757ID\u7684\u5173\u7cfb) \u4e8b\u4ef6\u7c7b\u578b\u53c2\u8003google tracing\u63d0\u4f9b\u7684\u4e8b\u4ef6\u683c\u5f0f\u6765\u5236\u5b9a\uff0c\u6bd4\u8f83\u5e38\u7528\u7684\u5c31\u662fcomplete event, instant event \u548c duration event \u5c3d\u53ef\u80fd\u7684\u4fdd\u8bc1\u751f\u6210\u7684json\u6587\u4ef6\u53ea\u9488\u5bf9\u67d0\u4e00\u4e2a\u5177\u4f53\u7684\u95ee\u9898\u3002\u5927\u800c\u5168\u7684json\u6587\u4ef6\u770b\u8d77\u6765\u662f\u5f88\u5934\u75bc\u7684\uff0c\u6211\u4eec\u9700\u8981\u9488\u5bf9\u5177\u4f53\u95ee\u9898\u751f\u6210\u4e0d\u540c\u7684json\u6587\u4ef6\uff0c\u7528\u6765\u5bf9\u67d0\u4e2a\u5177\u4f53\u7684\u6027\u80fd\u95ee\u9898\u505a\u5206\u6790\u3002 \u8be6\u7ec6\u8bbe\u8ba1 \u00b6 _________________________ _________________________________________ | | toolchain | | | instructions code | ------------------------> | instruction.elf or bin or hex | |_________________________| |_________________________________________| | | | | ------------------------------------------| | | | ____________________V___________________ __________V____________ | | | | | simulator | | DUT | |________________________________________| |_______________________| | | | | | | __________V_________ _______V_______ ___________V_____________ | | | | | | | instruction flow | | depend flow | | trace flow | |____________________| |_______________| |_________________________| | | | | | | _________V_________________V___________________________________________V_________ | | | flow to json to html | |_________________________________________________________________________________| | | \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 | | | performance.html | |_________________________| trace flow \u00b6 \u4e8b\u4ef6\u53ef\u4ee5\u91c7\u7528\u5982\u4e0b\u7684\u683c\u5f0f\uff1a [trace event] ts=653.00 mod=fetch ch=2 pc=0x00000008 id=1 ...... instruction flow \u00b6 \u6307\u4ee4\u7684\u4fe1\u606f\u53ef\u4ee5\u6765\u81ea\u4e8e\u5f88\u591a\u5730\u65b9\uff0c\u4f5c\u4e3a\u6a21\u62df\u5668\u5f00\u53d1\u8005\uff0c\u6211\u8ba4\u4e3a\u89e3\u6790\u6a21\u62df\u5668\u7684\u6307\u4ee4\u6267\u884clog\u662f\u4e00\u6761\u6bd4\u8f83\u597d\u7684\u6765\u6e90\uff0c\u56e0\u4e3a\u6a21\u62df\u5668\u7684log\u6211\u4eec\u53ef\u63a7\u6027\u6bd4\u8f83\u9ad8\uff0c\u89e3\u6790\u96be\u5ea6\u5c0f\u3002 \u6bd4\u5982\u4e0b\u9762\u7684log\u5c31\u5f88\u5bb9\u6613\u89e3\u6790 core 0: 0x0000000000000000 imovl r1,r0,123412341 oprands : r0 = 0x3fc4986395a2de5d commit log: r1 = 0x3fc49863075b1f75 core 0: 0x0000000000000008 imovh r3,r2,324512345 oprands : r2 = 0x3fc4986395a2de5d commit log: r3 = 0x1357aa5995a2de5d core 0: 0x0000000000000000 pre f16 oprands : f16 = [0x0000000000000000, 0x0000000000000000] commit log: \u901a\u8fc7\u5bf9\u5e94\u7684pc\u4fe1\u606f\uff0c\u5c31\u80fd\u77e5\u9053\u4e8b\u4ef6\u5bf9\u5e94\u7684\u6307\u4ee4\u4fe1\u606f depend flow \u00b6 \u6307\u4ee4\u4f9d\u8d56\u94fe\u7684\u5206\u6790\uff0c\u5bf9\u4e8eooo CPU\u6765\u8bb2\u8fd8\u662f\u6bd4\u8f83\u91cd\u8981\u7684\uff0c\u5355\u6761\u4f9d\u8d56\u94fe\u7684\u6267\u884c\u901f\u5ea6\u5176\u5b9e\u662f\u76f8\u5bf9\u56fa\u5b9a\u7684\uff0c\u5982\u679cCPU\u80fd\u591f\u540c\u65f6\u5bb9\u7eb3\u591a\u6761\u4f9d\u8d56\u94fe\uff0c\u90a3\u4e48\u6307\u4ee4\u6267\u884c\u7684\u5e76\u884c\u5ea6\u5c31\u6bd4\u8f83\u9ad8\uff0c\u610f\u5473\u7740\u66f4\u5feb\u3002 \u5bf9\u4e8e\u5355\u6761\u4f9d\u8d56\u94fe\uff0c\u6307\u4ee4\u4e4b\u95f4\u7684cycle\u95f4\u9694\u5c31\u8981\u770b\u6d41\u6c34\u7ebf\u7684\u6027\u80fd\uff0c\u5982\u679c\u6709bypass\u7b49\u673a\u5236\uff0c\u90a3\u4e48\u4f9d\u8d56\u94fe\u4e0a\u7684\u6307\u4ee4\u6267\u884c\u5c31\u4f1a\u66f4\u5feb\u3002 \u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u95ee\u9898 \u00b6 \u663e\u793a\u987a\u5e8f\u95ee\u9898 \u00b6 \u5728\u5b9e\u9645\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\uff0c\u9047\u5230\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u627e\u5230\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6cd5\uff1a tracing\u662f\u6309\u7167\u65f6\u95f4\u8fdb\u884c\u89e3\u6790\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u54ea\u4e2apid\u5148\u51fa\u73b0\uff0c\u5148\u663e\u793a\u54ea\u4e2a\u3002\u5f80\u5f80\u6211\u4eec\u5728\u8c03\u8bd5CPU\u65f6\uff0c\u5e0c\u671b\u6309\u7167\u4e00\u5b9a\u7684\u5355\u5143\u987a\u5e8f\u6765\u6392\u5217\u4f1a\u66f4\u597d\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5229\u7528instant event\uff0c\u5728\u7b2c0\u4e2acycle\uff0c\u6309\u7167\u6211\u4eec\u60f3\u8981\u7684\u987a\u5e8f\u6765\u6392\u5217pid. \u8fd9\u6837\u5728\u663e\u793a\u7684\u65f6\u5019\u4f1a\u66f4\u52a0\u53cb\u597d trace\u89e3\u6790\u95ee\u9898 \u00b6 \u5bf9\u4e8e\u5728rtl\u4e2d\u589e\u52a0\u7684trace\u6253\u5370\uff0c\u5f80\u5f80\u4e0d\u4f1a\u662f\u6309\u7167\u4e8b\u4ef6\u6765\u6253\u5370\u7684\uff0c\u53ef\u80fd\u8fdbbuffer\u7684\u8fd9\u4e2a\u52a8\u4f5c\u5728\u597d\u51e0\u4e2acycle\u4e2d\u90fd\u6709\u6253\u5370\uff0c\u6211\u4eec\u9700\u8981\u5728\u89e3\u6790\u65f6\u505a\u4e00\u4e9b\u878d\u5408\u3002","title":"\u5229\u7528Trace\u8fdb\u884c\u6027\u80fd\u5206\u6790"},{"location":"simulator/trace_format.html#trace","text":"\u524d\u9762\u5df2\u7ecf\u603b\u7ed3\u8fc7\u501f\u52a9google\u7684tracing\u6765\u8fdb\u884c\u6027\u80fd\u5206\u6790\u7684\u65b9\u6cd5 \u4f7f\u7528chrome-tracing\u5de5\u5177\u67e5\u770b\u6027\u80fd\u5206\u6790log \u3002\u6700\u8fd1\u9700\u8981\u8ba9\u82af\u7247\u9a8c\u8bc1\u7684\u540c\u4e8b\u63d0\u4f9b\u4e00\u4e9b\u4eff\u771f\u7684trace\uff0c\u4ee5\u4fbf\u8fdb\u884c\u6027\u80fd\u5206\u6790\u3002\u82af\u7247\u9a8c\u8bc1\u540c\u4e8b\u5374\u4e0d\u77e5\u9053\u5e94\u8be5\u63d0\u4f9b\u600e\u6837\u7684trace, \u6211\u4e5f\u6ca1\u6cd5\u6bd4\u8f83\u8be6\u7ec6\u7684\u7ed9\u4ed6\u8fdb\u884c\u63cf\u8ff0\uff0c\u4e00\u662f\u56e0\u4e3atrace\u5fc5\u7136\u8981\u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790\uff0c\u7b3c\u7edf\u7684\u6307\u5bfc\u610f\u89c1\u5f88\u96be\u843d\u5730\u3002\u4e8c\u662f\u6211\u81ea\u5df1\u5bf9\u6b64\u4e5f\u6ca1\u6709\u4e00\u4e2a\u597d\u7684\u603b\u7ed3\u3002\u6240\u4ee5\u628a\u4e4b\u524d\u505a\u7684\u4e00\u4e9btrace\u5728\u8fd9\u91cc\u501f\u673a\u505a\u4e00\u4e9b\u603b\u7ed3\uff0c\u4ee5\u4fbf\u540e\u7eed\u80fd\u591f\u63d0\u4f9b\u4e00\u5957\u76f8\u5bf9\u666e\u9002\u7684\u65b9\u6cd5\u548c\u5de5\u5177\u6765\u505atrace\u7684\u6027\u80fd\u5206\u6790\u3002","title":"\u5229\u7528Trace\u8fdb\u884c\u6027\u80fd\u5206\u6790"},{"location":"simulator/trace_format.html#_1","text":"trace\u91c7\u7528\u4e8b\u4ef6\u7684\u5f62\u5f0f\uff0c\u4ee5\u6307\u4ee4\u4e3a\u5bf9\u8c61\uff0c\u8bb0\u5f55\u6307\u4ee4\u5728\u67d0\u4e2acycle\u89e6\u53d1\u4e86\u600e\u6837\u7684\u4e8b\u4ef6\uff0c\u4ee5\u6b64\u6765\u5206\u6790\u6027\u80fd\u4f18\u5316\u7684\u53ef\u80fd\u6027\u3002 \u6307\u4ee4\u8981\u6709\u5168\u5c40\u552f\u4e00\u7684ID(\u6bd4\u5982\u8bf4PC)\u6765\u8bc6\u522b(\u5728\u6709\u4e9b\u7ed3\u6784\u4e2d\u53ef\u80fd\u4e0d\u4fdd\u5b58\u5168\u5c40\u552f\u4e00ID, \u8fd9\u65f6\u8981\u627e\u5230\u8f6c\u6362\u7684\u4f4d\u7f6e\uff0c\u5efa\u7acb\u5168\u5c40\u552f\u4e00ID\u4e0e\u6a21\u5757ID\u7684\u5173\u7cfb) \u4e8b\u4ef6\u7c7b\u578b\u53c2\u8003google tracing\u63d0\u4f9b\u7684\u4e8b\u4ef6\u683c\u5f0f\u6765\u5236\u5b9a\uff0c\u6bd4\u8f83\u5e38\u7528\u7684\u5c31\u662fcomplete event, instant event \u548c duration event \u5c3d\u53ef\u80fd\u7684\u4fdd\u8bc1\u751f\u6210\u7684json\u6587\u4ef6\u53ea\u9488\u5bf9\u67d0\u4e00\u4e2a\u5177\u4f53\u7684\u95ee\u9898\u3002\u5927\u800c\u5168\u7684json\u6587\u4ef6\u770b\u8d77\u6765\u662f\u5f88\u5934\u75bc\u7684\uff0c\u6211\u4eec\u9700\u8981\u9488\u5bf9\u5177\u4f53\u95ee\u9898\u751f\u6210\u4e0d\u540c\u7684json\u6587\u4ef6\uff0c\u7528\u6765\u5bf9\u67d0\u4e2a\u5177\u4f53\u7684\u6027\u80fd\u95ee\u9898\u505a\u5206\u6790\u3002","title":"\u6838\u5fc3\u601d\u60f3"},{"location":"simulator/trace_format.html#_2","text":"_________________________ _________________________________________ | | toolchain | | | instructions code | ------------------------> | instruction.elf or bin or hex | |_________________________| |_________________________________________| | | | | ------------------------------------------| | | | ____________________V___________________ __________V____________ | | | | | simulator | | DUT | |________________________________________| |_______________________| | | | | | | __________V_________ _______V_______ ___________V_____________ | | | | | | | instruction flow | | depend flow | | trace flow | |____________________| |_______________| |_________________________| | | | | | | _________V_________________V___________________________________________V_________ | | | flow to json to html | |_________________________________________________________________________________| | | \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 | | | performance.html | |_________________________|","title":"\u8be6\u7ec6\u8bbe\u8ba1"},{"location":"simulator/trace_format.html#trace-flow","text":"\u4e8b\u4ef6\u53ef\u4ee5\u91c7\u7528\u5982\u4e0b\u7684\u683c\u5f0f\uff1a [trace event] ts=653.00 mod=fetch ch=2 pc=0x00000008 id=1 ......","title":"trace flow"},{"location":"simulator/trace_format.html#instruction-flow","text":"\u6307\u4ee4\u7684\u4fe1\u606f\u53ef\u4ee5\u6765\u81ea\u4e8e\u5f88\u591a\u5730\u65b9\uff0c\u4f5c\u4e3a\u6a21\u62df\u5668\u5f00\u53d1\u8005\uff0c\u6211\u8ba4\u4e3a\u89e3\u6790\u6a21\u62df\u5668\u7684\u6307\u4ee4\u6267\u884clog\u662f\u4e00\u6761\u6bd4\u8f83\u597d\u7684\u6765\u6e90\uff0c\u56e0\u4e3a\u6a21\u62df\u5668\u7684log\u6211\u4eec\u53ef\u63a7\u6027\u6bd4\u8f83\u9ad8\uff0c\u89e3\u6790\u96be\u5ea6\u5c0f\u3002 \u6bd4\u5982\u4e0b\u9762\u7684log\u5c31\u5f88\u5bb9\u6613\u89e3\u6790 core 0: 0x0000000000000000 imovl r1,r0,123412341 oprands : r0 = 0x3fc4986395a2de5d commit log: r1 = 0x3fc49863075b1f75 core 0: 0x0000000000000008 imovh r3,r2,324512345 oprands : r2 = 0x3fc4986395a2de5d commit log: r3 = 0x1357aa5995a2de5d core 0: 0x0000000000000000 pre f16 oprands : f16 = [0x0000000000000000, 0x0000000000000000] commit log: \u901a\u8fc7\u5bf9\u5e94\u7684pc\u4fe1\u606f\uff0c\u5c31\u80fd\u77e5\u9053\u4e8b\u4ef6\u5bf9\u5e94\u7684\u6307\u4ee4\u4fe1\u606f","title":"instruction flow"},{"location":"simulator/trace_format.html#depend-flow","text":"\u6307\u4ee4\u4f9d\u8d56\u94fe\u7684\u5206\u6790\uff0c\u5bf9\u4e8eooo CPU\u6765\u8bb2\u8fd8\u662f\u6bd4\u8f83\u91cd\u8981\u7684\uff0c\u5355\u6761\u4f9d\u8d56\u94fe\u7684\u6267\u884c\u901f\u5ea6\u5176\u5b9e\u662f\u76f8\u5bf9\u56fa\u5b9a\u7684\uff0c\u5982\u679cCPU\u80fd\u591f\u540c\u65f6\u5bb9\u7eb3\u591a\u6761\u4f9d\u8d56\u94fe\uff0c\u90a3\u4e48\u6307\u4ee4\u6267\u884c\u7684\u5e76\u884c\u5ea6\u5c31\u6bd4\u8f83\u9ad8\uff0c\u610f\u5473\u7740\u66f4\u5feb\u3002 \u5bf9\u4e8e\u5355\u6761\u4f9d\u8d56\u94fe\uff0c\u6307\u4ee4\u4e4b\u95f4\u7684cycle\u95f4\u9694\u5c31\u8981\u770b\u6d41\u6c34\u7ebf\u7684\u6027\u80fd\uff0c\u5982\u679c\u6709bypass\u7b49\u673a\u5236\uff0c\u90a3\u4e48\u4f9d\u8d56\u94fe\u4e0a\u7684\u6307\u4ee4\u6267\u884c\u5c31\u4f1a\u66f4\u5feb\u3002","title":"depend flow"},{"location":"simulator/trace_format.html#_3","text":"","title":"\u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u95ee\u9898"},{"location":"simulator/trace_format.html#_4","text":"\u5728\u5b9e\u9645\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\uff0c\u9047\u5230\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u627e\u5230\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6cd5\uff1a tracing\u662f\u6309\u7167\u65f6\u95f4\u8fdb\u884c\u89e3\u6790\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u54ea\u4e2apid\u5148\u51fa\u73b0\uff0c\u5148\u663e\u793a\u54ea\u4e2a\u3002\u5f80\u5f80\u6211\u4eec\u5728\u8c03\u8bd5CPU\u65f6\uff0c\u5e0c\u671b\u6309\u7167\u4e00\u5b9a\u7684\u5355\u5143\u987a\u5e8f\u6765\u6392\u5217\u4f1a\u66f4\u597d\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5229\u7528instant event\uff0c\u5728\u7b2c0\u4e2acycle\uff0c\u6309\u7167\u6211\u4eec\u60f3\u8981\u7684\u987a\u5e8f\u6765\u6392\u5217pid. \u8fd9\u6837\u5728\u663e\u793a\u7684\u65f6\u5019\u4f1a\u66f4\u52a0\u53cb\u597d","title":"\u663e\u793a\u987a\u5e8f\u95ee\u9898"},{"location":"simulator/trace_format.html#trace_1","text":"\u5bf9\u4e8e\u5728rtl\u4e2d\u589e\u52a0\u7684trace\u6253\u5370\uff0c\u5f80\u5f80\u4e0d\u4f1a\u662f\u6309\u7167\u4e8b\u4ef6\u6765\u6253\u5370\u7684\uff0c\u53ef\u80fd\u8fdbbuffer\u7684\u8fd9\u4e2a\u52a8\u4f5c\u5728\u597d\u51e0\u4e2acycle\u4e2d\u90fd\u6709\u6253\u5370\uff0c\u6211\u4eec\u9700\u8981\u5728\u89e3\u6790\u65f6\u505a\u4e00\u4e9b\u878d\u5408\u3002","title":"trace\u89e3\u6790\u95ee\u9898"},{"location":"smt-pnp/smt-pnp-introduction.html","text":"SMT-PNP \u7b14\u8bb0 \u00b6 \u672c\u6587\u7528\u6765\u8bb0\u5f55\u5728\u4f4e\u7aef\u8d34\u7247\u673a\u9886\u57df\u4ece\u5c0f\u767d\u5230\u7cbe\u901a\u7684\u8fc7\u7a0b\u3002\u901a\u8fc7\u8bb0\u5f55\uff0c\u68b3\u7406\u601d\u8def\uff0c\u8fbe\u5230\u80fd\u591f\u7814\u53d1\u4e00\u6b3e\u4f4e\u7aef\u8d34\u7247\u673a\u7684\u7a0b\u5ea6\u3002 \u7efc\u8ff0 \u00b6 \u8d34\u7247\u673a\u5728\u7ed3\u6784\u4e0a\u4e0e3D\u6253\u5370\u673a\uff0cCNC\u5207\u5272\u673a\u6709\u7740\u5f88\u591a\u5171\u540c\u70b9\uff0c\u6bd4\u5982\u4ed6\u4eec\u5728\u4e00\u4e9b\u4f4e\u7aef\u4ea7\u54c1\u4e2d\uff0c\u8d34\u7247\u673a\u548c3\u6253\u5370\u673a\u4ee5\u53caCNC\u5207\u5272\u673a\u7684\u7ed3\u6784\u6846\u67b6\u90fd\u662f\u5bf9xyz\u4e09\u4e2a\u8f74\u65b9\u5411\u7684\u7cbe\u786e\u63a7\u5236\uff0c\u90fd\u662f\u7535\u673a\u5e26\u52a8\u4f4d\u79fb\u673a\u6784\u5b9e\u73b0\u3002\u5728\u7cfb\u7edf\u7ed3\u6784\u65b9\u9762\uff0c\u90fd\u5206\u4e3a\u4e0a\u4f4d\u673a(\u5de5\u63a7PC\u673a)\u548c\u4e0b\u4f4d\u673a(\u82e5\u5e72\u57fa\u4e8eMCU\u7684\u63a7\u5236\u677f)\uff0c\u73b0\u5728\u666e\u904d\u5448\u73b0\u6a21\u5757\u5316\u7684\u8d8b\u52bf\u3002\u5728\u8f6f\u4ef6\u65b9\u9762\uff0c\u8d34\u7247\u673a\u53c8\u6709\u5b83\u72ec\u7279\u7684\u5730\u65b9\uff0c\u5f53\u7136\u4e5f\u6709\u7740\u5b83\u72ec\u7279\u7684\u4e1a\u52a1\u903b\u8f91\u3002 \u4f46\u603b\u4f53\u6765\u8bb2\uff0c\u5bf9\u4e8e\u5f00\u53d1\u4e00\u6b3e\u4f4e\u7aef\u7684\u8f83\u9ad8\u7cbe\u5ea6\u7684\u8d34\u7247\u673a\uff0c\u5b8c\u5168\u53ef\u4ee5\u501f\u92743D\u6253\u5370\u673a\u4ee5\u53caCNC\u5207\u5272\u673a\u3002\u5f53\u7136\u66f4\u6709\u53c2\u8003\u610f\u4e49\u7684\u662f\u5f53\u524d\u4e00\u4e9b\u6bd4\u8f83\u8457\u540d\u7684\u5f00\u6e90\u8f6f\u786c\u4ef6\u53ca\u7ed3\u6784\u3002\u57fa\u4e8e\u8fd9\u4e9b\u5f00\u6e90\u8d44\u6599\uff0c\u4e5f\u6709\u4e00\u4e9bDIY\u7684\u8d34\u7247\u673a\u51fa\u73b0\uff0c\u4f46\u5bf9\u4e8e\u8fdb\u884c\u5546\u4e1a\u5316\u5f00\u53d1\uff0c\u8fd9\u4e9b\u5f00\u6e90\u9879\u76ee\u53ea\u80fd\u63d0\u4f9b\u501f\u9274\u610f\u4e49\u3002 \u5f00\u6e90\u9879\u76ee \u00b6 open-pnp \u00b6 https://openpnp.org/ \u8f6f\u4ef6\u65b9\u9762\uff0copenpnp\u4f7f\u7528java\u5b9e\u73b0\u4e86\u4e00\u4e2a\u8de8\u5e73\u53f0\u7684\u4e0a\u4f4d\u673a\u8f6f\u4ef6\uff0c\u914d\u7f6e\u4e30\u5bcc\u3002 \u786c\u4ef6\u65b9\u9762\uff0c\u5b83\u5217\u51fa\u4e86\u4e00\u4e9b\u5b83\u652f\u6301\u7684\u673a\u5668\uff0c\u4ee5\u53ca\u96f6\u90e8\u4ef6\u3002\u5f53\u7136\u5176\u4e2dOpenBuilds\u80fd\u751f\u6210\u5b83\u7684\u5f00\u6e90\u786c\u4ef6\u3002\u4f46\u770b\u8d77\u6765\uff0copenpnp\u4ecd\u7136\u4fa7\u91cd\u4e8e\u8f6f\u4ef6\u3002 The Smoothie Project \u00b6 http://smoothieware.org/ Smoothie \u662f\u514d\u8d39\u5f00\u6e90\u9ad8\u6027\u80fd\u7684\u4e0b\u4f4d\u673a\u63a7\u5236\u7cfb\u7edf\uff0c\u4e0e\u4e0a\u4f4d\u673a\u901a\u8fc7G-code\u8fdb\u884c\u901a\u4fe1\u3002\u73b0\u5728\u5df2\u7ecf\u5904\u4e8eV2\u7248\u672c\u3002 \u8fd9\u5c31\u662f\u6240\u8c13\u7684\u51b0\u6c99\u4e3b\u677f\uff0cTB\u6709\u5356\uff0cB\u7ad9\u4e0a\u4e5f\u6709\u7528\u6b64\u505a\u6210\u7b80\u5355\u7684\u8d34\u7247\u673a\u7684\u6848\u4f8b\u3002 PP4 \u00b6","title":"SMT-PNP \u7b14\u8bb0"},{"location":"smt-pnp/smt-pnp-introduction.html#smt-pnp","text":"\u672c\u6587\u7528\u6765\u8bb0\u5f55\u5728\u4f4e\u7aef\u8d34\u7247\u673a\u9886\u57df\u4ece\u5c0f\u767d\u5230\u7cbe\u901a\u7684\u8fc7\u7a0b\u3002\u901a\u8fc7\u8bb0\u5f55\uff0c\u68b3\u7406\u601d\u8def\uff0c\u8fbe\u5230\u80fd\u591f\u7814\u53d1\u4e00\u6b3e\u4f4e\u7aef\u8d34\u7247\u673a\u7684\u7a0b\u5ea6\u3002","title":"SMT-PNP \u7b14\u8bb0"},{"location":"smt-pnp/smt-pnp-introduction.html#_1","text":"\u8d34\u7247\u673a\u5728\u7ed3\u6784\u4e0a\u4e0e3D\u6253\u5370\u673a\uff0cCNC\u5207\u5272\u673a\u6709\u7740\u5f88\u591a\u5171\u540c\u70b9\uff0c\u6bd4\u5982\u4ed6\u4eec\u5728\u4e00\u4e9b\u4f4e\u7aef\u4ea7\u54c1\u4e2d\uff0c\u8d34\u7247\u673a\u548c3\u6253\u5370\u673a\u4ee5\u53caCNC\u5207\u5272\u673a\u7684\u7ed3\u6784\u6846\u67b6\u90fd\u662f\u5bf9xyz\u4e09\u4e2a\u8f74\u65b9\u5411\u7684\u7cbe\u786e\u63a7\u5236\uff0c\u90fd\u662f\u7535\u673a\u5e26\u52a8\u4f4d\u79fb\u673a\u6784\u5b9e\u73b0\u3002\u5728\u7cfb\u7edf\u7ed3\u6784\u65b9\u9762\uff0c\u90fd\u5206\u4e3a\u4e0a\u4f4d\u673a(\u5de5\u63a7PC\u673a)\u548c\u4e0b\u4f4d\u673a(\u82e5\u5e72\u57fa\u4e8eMCU\u7684\u63a7\u5236\u677f)\uff0c\u73b0\u5728\u666e\u904d\u5448\u73b0\u6a21\u5757\u5316\u7684\u8d8b\u52bf\u3002\u5728\u8f6f\u4ef6\u65b9\u9762\uff0c\u8d34\u7247\u673a\u53c8\u6709\u5b83\u72ec\u7279\u7684\u5730\u65b9\uff0c\u5f53\u7136\u4e5f\u6709\u7740\u5b83\u72ec\u7279\u7684\u4e1a\u52a1\u903b\u8f91\u3002 \u4f46\u603b\u4f53\u6765\u8bb2\uff0c\u5bf9\u4e8e\u5f00\u53d1\u4e00\u6b3e\u4f4e\u7aef\u7684\u8f83\u9ad8\u7cbe\u5ea6\u7684\u8d34\u7247\u673a\uff0c\u5b8c\u5168\u53ef\u4ee5\u501f\u92743D\u6253\u5370\u673a\u4ee5\u53caCNC\u5207\u5272\u673a\u3002\u5f53\u7136\u66f4\u6709\u53c2\u8003\u610f\u4e49\u7684\u662f\u5f53\u524d\u4e00\u4e9b\u6bd4\u8f83\u8457\u540d\u7684\u5f00\u6e90\u8f6f\u786c\u4ef6\u53ca\u7ed3\u6784\u3002\u57fa\u4e8e\u8fd9\u4e9b\u5f00\u6e90\u8d44\u6599\uff0c\u4e5f\u6709\u4e00\u4e9bDIY\u7684\u8d34\u7247\u673a\u51fa\u73b0\uff0c\u4f46\u5bf9\u4e8e\u8fdb\u884c\u5546\u4e1a\u5316\u5f00\u53d1\uff0c\u8fd9\u4e9b\u5f00\u6e90\u9879\u76ee\u53ea\u80fd\u63d0\u4f9b\u501f\u9274\u610f\u4e49\u3002","title":"\u7efc\u8ff0"},{"location":"smt-pnp/smt-pnp-introduction.html#_2","text":"","title":"\u5f00\u6e90\u9879\u76ee"},{"location":"smt-pnp/smt-pnp-introduction.html#open-pnp","text":"https://openpnp.org/ \u8f6f\u4ef6\u65b9\u9762\uff0copenpnp\u4f7f\u7528java\u5b9e\u73b0\u4e86\u4e00\u4e2a\u8de8\u5e73\u53f0\u7684\u4e0a\u4f4d\u673a\u8f6f\u4ef6\uff0c\u914d\u7f6e\u4e30\u5bcc\u3002 \u786c\u4ef6\u65b9\u9762\uff0c\u5b83\u5217\u51fa\u4e86\u4e00\u4e9b\u5b83\u652f\u6301\u7684\u673a\u5668\uff0c\u4ee5\u53ca\u96f6\u90e8\u4ef6\u3002\u5f53\u7136\u5176\u4e2dOpenBuilds\u80fd\u751f\u6210\u5b83\u7684\u5f00\u6e90\u786c\u4ef6\u3002\u4f46\u770b\u8d77\u6765\uff0copenpnp\u4ecd\u7136\u4fa7\u91cd\u4e8e\u8f6f\u4ef6\u3002","title":"open-pnp"},{"location":"smt-pnp/smt-pnp-introduction.html#the-smoothie-project","text":"http://smoothieware.org/ Smoothie \u662f\u514d\u8d39\u5f00\u6e90\u9ad8\u6027\u80fd\u7684\u4e0b\u4f4d\u673a\u63a7\u5236\u7cfb\u7edf\uff0c\u4e0e\u4e0a\u4f4d\u673a\u901a\u8fc7G-code\u8fdb\u884c\u901a\u4fe1\u3002\u73b0\u5728\u5df2\u7ecf\u5904\u4e8eV2\u7248\u672c\u3002 \u8fd9\u5c31\u662f\u6240\u8c13\u7684\u51b0\u6c99\u4e3b\u677f\uff0cTB\u6709\u5356\uff0cB\u7ad9\u4e0a\u4e5f\u6709\u7528\u6b64\u505a\u6210\u7b80\u5355\u7684\u8d34\u7247\u673a\u7684\u6848\u4f8b\u3002","title":"The Smoothie Project"},{"location":"smt-pnp/smt-pnp-introduction.html#pp4","text":"","title":"PP4"},{"location":"tools/arm-atp.html","text":"ATP(Adaptive Traffic Profiles) \u00b6","title":"ATP(Adaptive Traffic Profiles)"},{"location":"tools/arm-atp.html#atpadaptive-traffic-profiles","text":"","title":"ATP(Adaptive Traffic Profiles)"},{"location":"tools/cache-size.html","text":"cache\u5927\u5c0f\u6d4b\u8bd5\u5de5\u5177 \u00b6 \u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e2acache\u5927\u5c0f\u6d4b\u8bd5\u5de5\u5177\uff0c\u4f3c\u4e4e\u4e0d\u592a\u53ef\u9760\uff0c\u4f46\u5176\u4e2d\u4f7f\u7528\u5230\u7684C++\u7279\u6027\u548c\u601d\u8def\u53ef\u4ee5\u53c2\u8003 code \u00b6 #include <iostream> #include <string> #include <vector> #include <random> #define KB(x) ((size_t)(x) << 10) int main () { std :: vector < std :: size_t > sizes_kb ; for ( int i = 18 ; i < 28 ; i ++ ) sizes_kb . push_back ( 1 << i ); std :: random_device rd ; std :: mt19937 gen ( rd ()); for ( std :: size_t size : sizes_kb ) { std :: uniform_int_distribution <> dis ( 0 , KB ( size ) - 1 ); std :: vector < uint64_t > memory ( KB ( size )); std :: fill ( memory . begin (), memory . end (), 1 ); int dummy = 0 ; clock_t begin = clock (); for ( int i = 0 ; i < ( 1 << 25 ); i ++ ) dummy += memory [ dis ( gen )]; clock_t end = clock (); double elapsed_secs = double ( end - begin ) / CLOCKS_PER_SEC ; std :: cout << size << \" KB, \" << elapsed_secs << \"secs, dummy:\" << dummy << std :: endl ; } } result \u00b6 ~/workspace$ ./a.out 2 KB, 1.39024secs, dummy:33554432 4 KB, 1.36546secs, dummy:33554432 8 KB, 1.37217secs, dummy:33554432 16 KB, 1.37657secs, dummy:33554432 32 KB, 1.34883secs, dummy:33554432 64 KB, 1.37071secs, dummy:33554432 128 KB, 1.42015secs, dummy:33554432 256 KB, 1.52487secs, dummy:33554432 512 KB, 1.56197secs, dummy:33554432 1024 KB, 1.62009secs, dummy:33554432 2048 KB, 1.74029secs, dummy:33554432 4096 KB, 2.29474secs, dummy:33554432 8192 KB, 3.00552secs, dummy:33554432 16384 KB, 3.54919secs, dummy:33554432 32768 KB, 3.84491secs, dummy:33554432 65536 KB, 4.35051secs, dummy:33554432 131072 KB, 4.32022secs, dummy:33554432 yankexin@sophgo1:~/workspace$ getconf -a | grep CACHE LEVEL1_ICACHE_SIZE 32768 LEVEL1_ICACHE_ASSOC 8 LEVEL1_ICACHE_LINESIZE 64 LEVEL1_DCACHE_SIZE 32768 LEVEL1_DCACHE_ASSOC 8 LEVEL1_DCACHE_LINESIZE 64 LEVEL2_CACHE_SIZE 1048576 LEVEL2_CACHE_ASSOC 16 LEVEL2_CACHE_LINESIZE 64 LEVEL3_CACHE_SIZE 28835840 LEVEL3_CACHE_ASSOC 11 LEVEL3_CACHE_LINESIZE 64 LEVEL4_CACHE_SIZE 0 LEVEL4_CACHE_ASSOC 0 LEVEL4_CACHE_LINESIZE 0 \u603b\u7ed3 \u00b6 \u6ca1\u6709\u660e\u663e\u7684\u7ed3\u8bba","title":"cache\u5927\u5c0f\u6d4b\u8bd5\u5de5\u5177"},{"location":"tools/cache-size.html#cache","text":"\u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e2acache\u5927\u5c0f\u6d4b\u8bd5\u5de5\u5177\uff0c\u4f3c\u4e4e\u4e0d\u592a\u53ef\u9760\uff0c\u4f46\u5176\u4e2d\u4f7f\u7528\u5230\u7684C++\u7279\u6027\u548c\u601d\u8def\u53ef\u4ee5\u53c2\u8003","title":"cache\u5927\u5c0f\u6d4b\u8bd5\u5de5\u5177"},{"location":"tools/cache-size.html#code","text":"#include <iostream> #include <string> #include <vector> #include <random> #define KB(x) ((size_t)(x) << 10) int main () { std :: vector < std :: size_t > sizes_kb ; for ( int i = 18 ; i < 28 ; i ++ ) sizes_kb . push_back ( 1 << i ); std :: random_device rd ; std :: mt19937 gen ( rd ()); for ( std :: size_t size : sizes_kb ) { std :: uniform_int_distribution <> dis ( 0 , KB ( size ) - 1 ); std :: vector < uint64_t > memory ( KB ( size )); std :: fill ( memory . begin (), memory . end (), 1 ); int dummy = 0 ; clock_t begin = clock (); for ( int i = 0 ; i < ( 1 << 25 ); i ++ ) dummy += memory [ dis ( gen )]; clock_t end = clock (); double elapsed_secs = double ( end - begin ) / CLOCKS_PER_SEC ; std :: cout << size << \" KB, \" << elapsed_secs << \"secs, dummy:\" << dummy << std :: endl ; } }","title":"code"},{"location":"tools/cache-size.html#result","text":"~/workspace$ ./a.out 2 KB, 1.39024secs, dummy:33554432 4 KB, 1.36546secs, dummy:33554432 8 KB, 1.37217secs, dummy:33554432 16 KB, 1.37657secs, dummy:33554432 32 KB, 1.34883secs, dummy:33554432 64 KB, 1.37071secs, dummy:33554432 128 KB, 1.42015secs, dummy:33554432 256 KB, 1.52487secs, dummy:33554432 512 KB, 1.56197secs, dummy:33554432 1024 KB, 1.62009secs, dummy:33554432 2048 KB, 1.74029secs, dummy:33554432 4096 KB, 2.29474secs, dummy:33554432 8192 KB, 3.00552secs, dummy:33554432 16384 KB, 3.54919secs, dummy:33554432 32768 KB, 3.84491secs, dummy:33554432 65536 KB, 4.35051secs, dummy:33554432 131072 KB, 4.32022secs, dummy:33554432 yankexin@sophgo1:~/workspace$ getconf -a | grep CACHE LEVEL1_ICACHE_SIZE 32768 LEVEL1_ICACHE_ASSOC 8 LEVEL1_ICACHE_LINESIZE 64 LEVEL1_DCACHE_SIZE 32768 LEVEL1_DCACHE_ASSOC 8 LEVEL1_DCACHE_LINESIZE 64 LEVEL2_CACHE_SIZE 1048576 LEVEL2_CACHE_ASSOC 16 LEVEL2_CACHE_LINESIZE 64 LEVEL3_CACHE_SIZE 28835840 LEVEL3_CACHE_ASSOC 11 LEVEL3_CACHE_LINESIZE 64 LEVEL4_CACHE_SIZE 0 LEVEL4_CACHE_ASSOC 0 LEVEL4_CACHE_LINESIZE 0","title":"result"},{"location":"tools/cache-size.html#_1","text":"\u6ca1\u6709\u660e\u663e\u7684\u7ed3\u8bba","title":"\u603b\u7ed3"},{"location":"tools/chrome-tracing.html","text":"\u4f7f\u7528chrome-tracing\u5de5\u5177\u67e5\u770b\u6027\u80fd\u5206\u6790log \u00b6 \u6700\u8fd1\u63a5\u5230\u9700\u6c42\uff0c\u60f3\u8981\u4ee5\u56fe\u5f62\u5316\u7684\u65b9\u5f0f\u5c55\u73b0\u51fagem5\u7684\u6307\u4ee4\u6d41\uff0c\u8fd9\u65b9\u4fbf\u5206\u6790\u6307\u4ee4\u987a\u5e8f\uff0c\u4ee5\u6307\u5bfc\u5de5\u5177\u94fe\u901a\u8fc7\u5bf9\u6307\u4ee4\u91cd\u6392\u6765\u63d0\u9ad8\u6307\u4ee4\u6267\u884c\u6548\u7387\u3002 google-chrome\u6709trace Event Profiling Too,\u8fd9\u662f\u5206\u6790\u6d4f\u89c8\u5668\u6027\u80fd\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u501f\u7528\u8fd9\u4e2a\u6765\u5206\u6790gem5\u6307\u4ee4\u6027\u80fd\u3002 \u53c2\u8003\u8d44\u6599\u5982\u4e0b: [ https://www.chromium.org/developers/how-tos/trace-event-profiling-tool ] [ https://www.gamasutra.com/view/news/176420/Indepth_Using_Chrometracing_to_view_your_inline_profiling_data.php ] \u5b9e\u9645\u4e0a\uff0c\u5176\u4e2d\u7684tracing\u662f\u5728catapult(Catapult is the home for several performance tools that span from gathering, displaying and analyzing performance data)\u8fd9\u4e2a\u5de5\u5177\u96c6\u5408\u4e2d [ https://chromium.googlesource.com/catapult/+/refs/heads/main/README.md ] [ https://chromium.googlesource.com/catapult ] [ https://github.com/catapult-project/catapult ] \u6211\u7684\u5b9e\u73b0 \u00b6 \u6838\u5fc3\u601d\u60f3\u662f\uff0c\u5728gem5\u4ee3\u7801\u4e2d\u6dfb\u52a0log\u6253\u5370\uff0c\u8fd0\u884c\u5b8cgem5\u540e\uff0c\u901a\u8fc7\u811a\u672c\u89e3\u6790log,\u5c06log\u8f6c\u6362\u6210 trace-event-profiling-tool\u9700\u8981\u7684json\u683c\u5f0f\u3002 \u4f7f\u7528\u5de5\u5177\u6253\u5f00json\u6587\u4ef6\u5373\u53ef\u3002 gem5\u4e2d\u6dfb\u52a0log #define DPRINTF_STC_PERF(eu, name, ev, state) do { \\ DPRINTF(StcPerf, \\ \"[STC Perf Tag] UnitName:%s,InstName:%s,Event:%s,Status:%s\\n\", \\ eu, name, ev, state); \\ } while (0) #define DPRINTF_STC_PERF_INSTS(ncpInst, ev, state) do { \\ const char *eu; \\ if (ncpInst->getFlag(NeuralCPInst::IsVME) || \\ ncpInst->getFlag(NeuralCPInst::IsRVV)) \\ eu = \"vme\"; \\ else if (ncpInst->getFlag(NeuralCPInst::IsMME)) \\ eu = \"mme\"; \\ else \\ eu = \"mte\"; \\ DPRINTF(StcPerf, \\ \"[STC Perf Tag] UnitName:%s,InstName:%s,Event:%s,Status:%s,\" \\ \"InstId:%x-%x\\n\", \\ eu, ncpInst->getName(), ev, state, \\ (uint64_t)ncpInst, ncpInst->inst->machInst); \\ } while (0) log\u89e3\u6790\u6210json #!/usr/bin/env python3 import json import argparse helps = ''' python3 perf-parser.py -f 123.log use a [StcPerf] debug-flags to creat log file ./build/RISCV/gem5.debug --debug-flags=StcPerf ...... > 123.log a file named perf_events.json will be created after run this script ''' parser = argparse . ArgumentParser () parser . add_argument ( '--file' , '-f' , help = 'log file' ) parser . usage = helps args = parser . parse_args () if args . file is None : parser . print_help () exit ( 1 ) # 4906000: system.cpu0.ncp: [STC Perf Tag] UnitName:vme, # InstName:vlh,InstId:5640c40763401205d087,Event:InstInNCP, # Status:start def line2record ( line ): record = {} info0 , info1 = line . strip ( ' \\n ' ) . split ( '[STC Perf Tag]' ) ticks , systeminfo , * others = info0 . strip ( ' ' ) . split ( ':' ) cycles = int ( ticks ) // 1000 record [ 'cycles' ] = cycles idstr , * others = systeminfo [ systeminfo . find ( 'cpu' ):] . split ( '.' ) if idstr [ 3 :] . isdecimal (): cpuid = int ( idstr [ 3 :]) else : cpuid = 0 record [ 'cpuid' ] = cpuid keyvalues = info1 . strip ( ' ' ) . split ( ',' ) keyvalues_splited = [ keyvalue . split ( ':' ) for keyvalue in keyvalues ] for keyvalue in keyvalues_splited : record [ keyvalue [ 0 ]] = keyvalue [ 1 ] return record ''' a event example { \"cat\": \"MY_SUBSYSTEM\", //catagory \"pid\": 4260, //process ID \"tid\": 4776, //thread ID \"ts\": 2168627922668, //time-stamp of this event \"ph\": \"B\", // Begin sample \"name\": \"doSomethingCostly\", //name of this event \"args\": { //arguments associated with this event. } } ''' def record2event ( record ): event = {} event [ 'cat' ] = 'insts' if record [ 'Event' ] == 'SysDMA' : event [ 'pid' ] = 'global' event [ 'tid' ] = \"\u3000sysdma\" else : event [ 'pid' ] = record [ 'cpuid' ] if record [ 'Event' ] == 'Sync' : event [ 'tid' ] = \"\u3000sync\" elif record [ 'Event' ] == 'Issue' : event [ 'tid' ] = \"\u3000mcu\" elif record [ 'UnitName' ] == 'mme' : event [ 'tid' ] = \"\u3000mme\" elif record [ 'UnitName' ] == 'vme' : event [ 'tid' ] = \"\u3000vme\" elif record [ 'UnitName' ] == 'mte' : event [ 'tid' ] = \"\u3000mte\" else : print ( 'unsupported UnitName in record(vme/mme/mte supported only)' ) print ( record ) exit ( 1 ) event [ 'name' ] = record [ 'InstName' ] event [ 'ts' ] = record [ 'cycles' ] if record [ 'Status' ] == 'start' : event [ 'ph' ] = 'B' elif record [ 'Status' ] == 'stop' : event [ 'ph' ] = 'E' else : event [ 'ph' ] = 'i' event [ 'args' ] = record return event events = [] with open ( args . file , 'r' ) as filp : for line in filp : if '[STC Perf Tag]' not in line : continue record = line2record ( line ) event = record2event ( record ) events . append ( event ) with open ( 'perf_events.json' , 'w' ) as filp : json . dump ( events , filp , separators = ( ',' , ':' ), sort_keys = True , indent = 4 ) \u5c06\u751f\u6210\u7684json\u6587\u4ef6\u7528google-tools\u6253\u5f00\u5373\u53ef\uff0c\u5728google\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165\uff1a chrome://tracing/ tracing \u683c\u5f0f\u8be6\u89e3 \u00b6 \u5728\u4f7f\u7528google tracing\u7684\u65f6\u5019\uff0c\u8981\u7262\u8bb0 \u5b83\u662f\u6309\u7167\u7ebf\u7a0b\u7684\u903b\u8f91\u8fdb\u884c\u8bbe\u8ba1\u7684, \u4e00\u4e2a\u7ebf\u7a0b\u5728\u540c\u4e00\u6bb5\u65f6\u95f4\u5185\u80af\u5b9a\u53ea\u80fd\u6267\u884c\u4e00\u4e2a\u4efb\u52a1\u3002\u6240\u4ee5\u6211\u4eec\u5728\u7528\u6765\u8868\u793a\u6307\u4ee4\u65f6\uff0c\u5e94\u8be5\u5c06\u4e0d\u540c\u7684\u6307\u4ee4\u770b\u4f5c\u4e0d\u540c\u7684\u7ebf\u7a0b\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u786c\u4ef6\u8d44\u6e90\u6765\u5212\u5206\u7ebf\u7a0b\uff0c \u6bd4\u5982\u8bf4buffer\u7684\u5bb9\u91cf\u662f8, \u90a3\u4e48\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u67098\u4e2a\u7ebf\u7a0b \u3002\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u7406\u89e3\u4e3a\u4ec0\u4e48\u6709\u4e9b\u65f6\u5019\u5b83\u89e3\u6790\u7684\u548c\u6211\u4eec\u8bbe\u60f3\u7684\u4e0d\u4e00\u6837\u3002 duration event \u00b6 \u5982\u679c\u4e00\u4e2a\u4e8b\u4ef6\u6301\u7eed\u4e00\u6bb5\u65f6\u95f4\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u8fd9\u79cd\u4e8b\u4ef6\u7c7b\u578b\u3002\u6bd4\u5982\u8bf4\u7528\u6765\u8bb0\u5f55\u6307\u4ee4\u7684\u751f\u547d\u5468\u671f\uff0c\u6307\u4ee4fetch\u4e3aB\uff0c \u6307\u4ee4\u88abcommit\u8bb0\u4e3aE\u3002 \u770b\u4e0b\u9762\u7684\u793a\u4f8b\uff0c\u5047\u5982add\u548csub\u6307\u4ee4\u5728cycle=1\u65f6fetch, \u5728cycle=6\u65f6add\u88ab\u63d0\u4ea4\uff0c\u5728cycle=10\u65f6\uff0csub\u6307\u4ee4\u88ab\u63d0\u4ea4\u3002 [ { \"ts\" : 1 , \"pid\" : \"CPU0\" , \"tid\" : 1 , \"ph\" : \"B\" , \"name\" : \"add\" }, { \"ts\" : 1 , \"pid\" : \"CPU0\" , \"tid\" : 2 , \"ph\" : \"B\" , \"name\" : \"sub\" }, { \"ts\" : 6 , \"pid\" : \"CPU0\" , \"tid\" : 1 , \"ph\" : \"E\" , \"name\" : \"add\" }, { \"ts\" : 10 , \"pid\" : \"CPU0\" , \"tid\" : 2 , \"ph\" : \"E\" , \"name\" : \"sub\" } ] complete event \u00b6 complete event\u5b9e\u9645\u4e0a\u5c31\u662fduration event\u7684\u878d\u5408\uff0c\u8fd9\u6837\u80fd\u591f\u7f29\u5c0f\u6574\u4e2ajson\u6587\u4ef6\u7684\u5927\u5c0f\uff0c \u5f53\u7136\u4e5f\u610f\u5473\u7740\u6211\u4eec\u89e3\u6790trace\u7684\u811a\u672c\u9700\u8981\u505a\u66f4\u591a\u3002 complete event \u7684 dur = E->ts - B->ts, \u540c\u65f6 ts\u4ee3\u8868\u4e86\u8d77\u59cb\u65f6\u95f4\u3002 [ { \"ts\" : 1 , \"pid\" : \"CPU0\" , \"tid\" : 1 , \"ph\" : \"X\" , \"dur\" : 6 , \"name\" : \"add\" }, { \"ts\" : 1 , \"pid\" : \"CPU0\" , \"tid\" : 2 , \"ph\" : \"X\" , \"dur\" : 10 , \"name\" : \"sub\" } ] instant event \u00b6 \u53ea\u662f\u7528\u6765\u8bb0\u5f55\u4e8b\u4ef6\u53d1\u751f\u4e86\uff0c\u4f46\u662f\u4e0d\u5360\u7528\u65f6\u95f4\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u6dfb\u52a0\u4e86\u4e09\u79cd\u7c7b\u578b\u7684instant\u4e8b\u4ef6 [ { \"ts\" : 1 , \"pid\" : \"CPU0\" , \"tid\" : 1 , \"ph\" : \"X\" , \"dur\" : 6 , \"name\" : \"add0\" }, { \"ts\" : 1 , \"pid\" : \"CPU0\" , \"tid\" : 2 , \"ph\" : \"X\" , \"dur\" : 10 , \"name\" : \"sub0\" }, { \"ts\" : 1 , \"pid\" : \"CPU1\" , \"tid\" : 1 , \"ph\" : \"X\" , \"dur\" : 6 , \"name\" : \"add1\" }, { \"ts\" : 1 , \"pid\" : \"CPU1\" , \"tid\" : 2 , \"ph\" : \"X\" , \"dur\" : 10 , \"name\" : \"sub1\" }, { \"ts\" : 2 , \"pid\" : \"CPU0\" , \"tid\" : 2 , \"ph\" : \"i\" , \"s\" : \"t\" , \"name\" : \"inst issue\" }, { \"ts\" : 4 , \"pid\" : \"CPU1\" , \"tid\" : 1 , \"ph\" : \"i\" , \"s\" : \"p\" , \"name\" : \"cpu1 halt\" }, { \"ts\" : 5 , \"pid\" : \"CPU0\" , \"tid\" : 2 , \"ph\" : \"i\" , \"s\" : \"g\" , \"name\" : \"stop\" } ] counter event \u00b6 \u7528\u7c7b\u4f3c\u67f1\u72b6\u56fe\u7684\u5f62\u5f0f\u7c97\u7565\u7684\u8868\u793a\u51fa\u5404\u4e2a\u6210\u5458\u6240\u5360\u7684\u6570\u91cf\u548c\u6bd4\u4f8b [ { \"pid\" : 0 , \"name\" : \"ctr\" , \"ph\" : \"C\" , \"ts\" : 0 , \"args\" : { \"cats\" : 0 , \"dogs\" : 7 , \"pig\" : 5 }}, { \"pid\" : 0 , \"name\" : \"ctr\" , \"ph\" : \"C\" , \"ts\" : 10 , \"args\" : { \"cats\" : 10 , \"dogs\" : 14 , \"pig\" : 10 }}, { \"pid\" : 0 , \"name\" : \"ctr\" , \"ph\" : \"C\" , \"ts\" : 20 , \"args\" : { \"cats\" : 20 , \"dogs\" : 21 , \"pig\" : 5 }}, { \"pid\" : 0 , \"name\" : \"ctr\" , \"ph\" : \"C\" , \"ts\" : 30 , \"args\" : { \"cats\" : 30 , \"dogs\" : 28 , \"pig\" : 10 }}, { \"pid\" : 0 , \"name\" : \"ctr\" , \"ph\" : \"C\" , \"ts\" : 40 , \"args\" : { \"cats\" : 40 , \"dogs\" : 35 , \"pig\" : 5 }} ] async event \u00b6 \u5f02\u6b65\u4e8b\u4ef6\uff0c\u591a\u4e86\u4e00\u4e2aid\u7528\u6765\u6807\u8bc6\u540c\u4e00\u7ec4\u4e8b\u4ef6\u3002 \u73af\u5883\u96c6\u6210 \u00b6 \u5173\u4e8e\u5982\u4f55\u4f7f\u7528\u5df2\u7ecf\u603b\u7ed3\u5b8c\u6bd5\u4e86\uff0c\u5bf9\u4e8e\u4e00\u822c\u7684\u5e94\u7528\u573a\u666f\u6765\u8bb2\uff0c\u4e86\u89e3\u4e0a\u9762\u8fd9\u4e9b\u5df2\u7ecf\u8db3\u591f\u4e86\uff0c\u6211\u4eec\u751f\u6210json\u6587\u4ef6\uff0c\u7136\u540e\u5728google\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165chrome://tracing/\uff0c\u518d\u5728\u91cc\u9762\u6253\u5f00\u6211\u4eec\u7684json\u6587\u4ef6\uff0c\u5c31\u80fd\u770b\u5230\u6211\u4eec\u751f\u6210\u7684\u6ce2\u5f62\u4e86\u3002 \u4f46\u5728\u5f88\u591a\u573a\u666f\u4e2d\uff0c\u8fd9\u662f\u65e0\u6cd5\u5b9e\u73b0\u7684\u3002\u56e0\u4e3a\u4e00\u822cIC\u516c\u53f8\u7684\u4fdd\u5bc6\u6027\u5f88\u9ad8\uff0c\u53c8\u5f88\u96be\u4fdd\u8bc1\u5de5\u4f5c\u7684\u673a\u5668\u4e2d\u4e00\u5b9a\u80fd\u591f\u5b89\u88c5google-chrome, \u6240\u4ee5\u6211\u4eec\u8981\u4f7f\u7528\u53e6\u4e00\u79cd\u65b9\u6cd5\u6765\u751f\u6210\u3002 \u65b9\u6cd5\u4e00\uff1a\u76f4\u63a5\u4f7f\u7528repo\u4e2d\u7684\u53ef\u6267\u884c\u6587\u4ef6\u751f\u6210 \u00b6 \u5728catapult\u7684repo\u4e2d\uff0ctracing/bin/\u76ee\u5f55\u4e0b\u6709trace2html\u7684\u5de5\u5177\uff0c\u53ef\u4ee5\u76f4\u63a5\u8f93\u5165json\u6587\u4ef6\uff0c\u8f93\u51fahtml\u3002\u5b9e\u9645\u6d4b\u8bd5\uff0cfirefox, chrome, edge\u90fd\u80fd\u6b63\u5e38\u663e\u793a\u3002 $CATAPULT /tracing/bin/trace2html my_trace.json --output = my_trace.html && open my_trace.html \u65b9\u6cd5\u4e8c\uff1a\u96c6\u6210\u5230python\u811a\u672c\u4e2d \u00b6 \u5728catapult\u7684repo\u4e2d\uff0ctracing/trace_build\u76ee\u5f55\u4e0b\u6709\u5f88\u591apython\u6587\u4ef6\uff0c\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u4f7f\u7528, \u9700\u8981\u8bbe\u7f6epath_to_catapult import sys import os sys . path . append ( os . path . join ( path_to_catapult , 'tracing' )) from tracing_build import trace2html with open ( 'my_trace.html' , 'w' , encoding = 'utf-8' ) as new_file : trace2html . WriteHTMLForTracesToFile ([ './dut_perf_waitbuffer.json' ], new_file )","title":"\u4f7f\u7528chrome-tracing\u5de5\u5177\u67e5\u770b\u6027\u80fd\u5206\u6790log"},{"location":"tools/chrome-tracing.html#chrome-tracinglog","text":"\u6700\u8fd1\u63a5\u5230\u9700\u6c42\uff0c\u60f3\u8981\u4ee5\u56fe\u5f62\u5316\u7684\u65b9\u5f0f\u5c55\u73b0\u51fagem5\u7684\u6307\u4ee4\u6d41\uff0c\u8fd9\u65b9\u4fbf\u5206\u6790\u6307\u4ee4\u987a\u5e8f\uff0c\u4ee5\u6307\u5bfc\u5de5\u5177\u94fe\u901a\u8fc7\u5bf9\u6307\u4ee4\u91cd\u6392\u6765\u63d0\u9ad8\u6307\u4ee4\u6267\u884c\u6548\u7387\u3002 google-chrome\u6709trace Event Profiling Too,\u8fd9\u662f\u5206\u6790\u6d4f\u89c8\u5668\u6027\u80fd\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u501f\u7528\u8fd9\u4e2a\u6765\u5206\u6790gem5\u6307\u4ee4\u6027\u80fd\u3002 \u53c2\u8003\u8d44\u6599\u5982\u4e0b: [ https://www.chromium.org/developers/how-tos/trace-event-profiling-tool ] [ https://www.gamasutra.com/view/news/176420/Indepth_Using_Chrometracing_to_view_your_inline_profiling_data.php ] \u5b9e\u9645\u4e0a\uff0c\u5176\u4e2d\u7684tracing\u662f\u5728catapult(Catapult is the home for several performance tools that span from gathering, displaying and analyzing performance data)\u8fd9\u4e2a\u5de5\u5177\u96c6\u5408\u4e2d [ https://chromium.googlesource.com/catapult/+/refs/heads/main/README.md ] [ https://chromium.googlesource.com/catapult ] [ https://github.com/catapult-project/catapult ]","title":"\u4f7f\u7528chrome-tracing\u5de5\u5177\u67e5\u770b\u6027\u80fd\u5206\u6790log"},{"location":"tools/chrome-tracing.html#_1","text":"\u6838\u5fc3\u601d\u60f3\u662f\uff0c\u5728gem5\u4ee3\u7801\u4e2d\u6dfb\u52a0log\u6253\u5370\uff0c\u8fd0\u884c\u5b8cgem5\u540e\uff0c\u901a\u8fc7\u811a\u672c\u89e3\u6790log,\u5c06log\u8f6c\u6362\u6210 trace-event-profiling-tool\u9700\u8981\u7684json\u683c\u5f0f\u3002 \u4f7f\u7528\u5de5\u5177\u6253\u5f00json\u6587\u4ef6\u5373\u53ef\u3002 gem5\u4e2d\u6dfb\u52a0log #define DPRINTF_STC_PERF(eu, name, ev, state) do { \\ DPRINTF(StcPerf, \\ \"[STC Perf Tag] UnitName:%s,InstName:%s,Event:%s,Status:%s\\n\", \\ eu, name, ev, state); \\ } while (0) #define DPRINTF_STC_PERF_INSTS(ncpInst, ev, state) do { \\ const char *eu; \\ if (ncpInst->getFlag(NeuralCPInst::IsVME) || \\ ncpInst->getFlag(NeuralCPInst::IsRVV)) \\ eu = \"vme\"; \\ else if (ncpInst->getFlag(NeuralCPInst::IsMME)) \\ eu = \"mme\"; \\ else \\ eu = \"mte\"; \\ DPRINTF(StcPerf, \\ \"[STC Perf Tag] UnitName:%s,InstName:%s,Event:%s,Status:%s,\" \\ \"InstId:%x-%x\\n\", \\ eu, ncpInst->getName(), ev, state, \\ (uint64_t)ncpInst, ncpInst->inst->machInst); \\ } while (0) log\u89e3\u6790\u6210json #!/usr/bin/env python3 import json import argparse helps = ''' python3 perf-parser.py -f 123.log use a [StcPerf] debug-flags to creat log file ./build/RISCV/gem5.debug --debug-flags=StcPerf ...... > 123.log a file named perf_events.json will be created after run this script ''' parser = argparse . ArgumentParser () parser . add_argument ( '--file' , '-f' , help = 'log file' ) parser . usage = helps args = parser . parse_args () if args . file is None : parser . print_help () exit ( 1 ) # 4906000: system.cpu0.ncp: [STC Perf Tag] UnitName:vme, # InstName:vlh,InstId:5640c40763401205d087,Event:InstInNCP, # Status:start def line2record ( line ): record = {} info0 , info1 = line . strip ( ' \\n ' ) . split ( '[STC Perf Tag]' ) ticks , systeminfo , * others = info0 . strip ( ' ' ) . split ( ':' ) cycles = int ( ticks ) // 1000 record [ 'cycles' ] = cycles idstr , * others = systeminfo [ systeminfo . find ( 'cpu' ):] . split ( '.' ) if idstr [ 3 :] . isdecimal (): cpuid = int ( idstr [ 3 :]) else : cpuid = 0 record [ 'cpuid' ] = cpuid keyvalues = info1 . strip ( ' ' ) . split ( ',' ) keyvalues_splited = [ keyvalue . split ( ':' ) for keyvalue in keyvalues ] for keyvalue in keyvalues_splited : record [ keyvalue [ 0 ]] = keyvalue [ 1 ] return record ''' a event example { \"cat\": \"MY_SUBSYSTEM\", //catagory \"pid\": 4260, //process ID \"tid\": 4776, //thread ID \"ts\": 2168627922668, //time-stamp of this event \"ph\": \"B\", // Begin sample \"name\": \"doSomethingCostly\", //name of this event \"args\": { //arguments associated with this event. } } ''' def record2event ( record ): event = {} event [ 'cat' ] = 'insts' if record [ 'Event' ] == 'SysDMA' : event [ 'pid' ] = 'global' event [ 'tid' ] = \"\u3000sysdma\" else : event [ 'pid' ] = record [ 'cpuid' ] if record [ 'Event' ] == 'Sync' : event [ 'tid' ] = \"\u3000sync\" elif record [ 'Event' ] == 'Issue' : event [ 'tid' ] = \"\u3000mcu\" elif record [ 'UnitName' ] == 'mme' : event [ 'tid' ] = \"\u3000mme\" elif record [ 'UnitName' ] == 'vme' : event [ 'tid' ] = \"\u3000vme\" elif record [ 'UnitName' ] == 'mte' : event [ 'tid' ] = \"\u3000mte\" else : print ( 'unsupported UnitName in record(vme/mme/mte supported only)' ) print ( record ) exit ( 1 ) event [ 'name' ] = record [ 'InstName' ] event [ 'ts' ] = record [ 'cycles' ] if record [ 'Status' ] == 'start' : event [ 'ph' ] = 'B' elif record [ 'Status' ] == 'stop' : event [ 'ph' ] = 'E' else : event [ 'ph' ] = 'i' event [ 'args' ] = record return event events = [] with open ( args . file , 'r' ) as filp : for line in filp : if '[STC Perf Tag]' not in line : continue record = line2record ( line ) event = record2event ( record ) events . append ( event ) with open ( 'perf_events.json' , 'w' ) as filp : json . dump ( events , filp , separators = ( ',' , ':' ), sort_keys = True , indent = 4 ) \u5c06\u751f\u6210\u7684json\u6587\u4ef6\u7528google-tools\u6253\u5f00\u5373\u53ef\uff0c\u5728google\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165\uff1a chrome://tracing/","title":"\u6211\u7684\u5b9e\u73b0"},{"location":"tools/chrome-tracing.html#tracing","text":"\u5728\u4f7f\u7528google tracing\u7684\u65f6\u5019\uff0c\u8981\u7262\u8bb0 \u5b83\u662f\u6309\u7167\u7ebf\u7a0b\u7684\u903b\u8f91\u8fdb\u884c\u8bbe\u8ba1\u7684, \u4e00\u4e2a\u7ebf\u7a0b\u5728\u540c\u4e00\u6bb5\u65f6\u95f4\u5185\u80af\u5b9a\u53ea\u80fd\u6267\u884c\u4e00\u4e2a\u4efb\u52a1\u3002\u6240\u4ee5\u6211\u4eec\u5728\u7528\u6765\u8868\u793a\u6307\u4ee4\u65f6\uff0c\u5e94\u8be5\u5c06\u4e0d\u540c\u7684\u6307\u4ee4\u770b\u4f5c\u4e0d\u540c\u7684\u7ebf\u7a0b\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u786c\u4ef6\u8d44\u6e90\u6765\u5212\u5206\u7ebf\u7a0b\uff0c \u6bd4\u5982\u8bf4buffer\u7684\u5bb9\u91cf\u662f8, \u90a3\u4e48\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u67098\u4e2a\u7ebf\u7a0b \u3002\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u7406\u89e3\u4e3a\u4ec0\u4e48\u6709\u4e9b\u65f6\u5019\u5b83\u89e3\u6790\u7684\u548c\u6211\u4eec\u8bbe\u60f3\u7684\u4e0d\u4e00\u6837\u3002","title":"tracing \u683c\u5f0f\u8be6\u89e3"},{"location":"tools/chrome-tracing.html#duration-event","text":"\u5982\u679c\u4e00\u4e2a\u4e8b\u4ef6\u6301\u7eed\u4e00\u6bb5\u65f6\u95f4\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u8fd9\u79cd\u4e8b\u4ef6\u7c7b\u578b\u3002\u6bd4\u5982\u8bf4\u7528\u6765\u8bb0\u5f55\u6307\u4ee4\u7684\u751f\u547d\u5468\u671f\uff0c\u6307\u4ee4fetch\u4e3aB\uff0c \u6307\u4ee4\u88abcommit\u8bb0\u4e3aE\u3002 \u770b\u4e0b\u9762\u7684\u793a\u4f8b\uff0c\u5047\u5982add\u548csub\u6307\u4ee4\u5728cycle=1\u65f6fetch, \u5728cycle=6\u65f6add\u88ab\u63d0\u4ea4\uff0c\u5728cycle=10\u65f6\uff0csub\u6307\u4ee4\u88ab\u63d0\u4ea4\u3002 [ { \"ts\" : 1 , \"pid\" : \"CPU0\" , \"tid\" : 1 , \"ph\" : \"B\" , \"name\" : \"add\" }, { \"ts\" : 1 , \"pid\" : \"CPU0\" , \"tid\" : 2 , \"ph\" : \"B\" , \"name\" : \"sub\" }, { \"ts\" : 6 , \"pid\" : \"CPU0\" , \"tid\" : 1 , \"ph\" : \"E\" , \"name\" : \"add\" }, { \"ts\" : 10 , \"pid\" : \"CPU0\" , \"tid\" : 2 , \"ph\" : \"E\" , \"name\" : \"sub\" } ]","title":"duration event"},{"location":"tools/chrome-tracing.html#complete-event","text":"complete event\u5b9e\u9645\u4e0a\u5c31\u662fduration event\u7684\u878d\u5408\uff0c\u8fd9\u6837\u80fd\u591f\u7f29\u5c0f\u6574\u4e2ajson\u6587\u4ef6\u7684\u5927\u5c0f\uff0c \u5f53\u7136\u4e5f\u610f\u5473\u7740\u6211\u4eec\u89e3\u6790trace\u7684\u811a\u672c\u9700\u8981\u505a\u66f4\u591a\u3002 complete event \u7684 dur = E->ts - B->ts, \u540c\u65f6 ts\u4ee3\u8868\u4e86\u8d77\u59cb\u65f6\u95f4\u3002 [ { \"ts\" : 1 , \"pid\" : \"CPU0\" , \"tid\" : 1 , \"ph\" : \"X\" , \"dur\" : 6 , \"name\" : \"add\" }, { \"ts\" : 1 , \"pid\" : \"CPU0\" , \"tid\" : 2 , \"ph\" : \"X\" , \"dur\" : 10 , \"name\" : \"sub\" } ]","title":"complete event"},{"location":"tools/chrome-tracing.html#instant-event","text":"\u53ea\u662f\u7528\u6765\u8bb0\u5f55\u4e8b\u4ef6\u53d1\u751f\u4e86\uff0c\u4f46\u662f\u4e0d\u5360\u7528\u65f6\u95f4\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u6dfb\u52a0\u4e86\u4e09\u79cd\u7c7b\u578b\u7684instant\u4e8b\u4ef6 [ { \"ts\" : 1 , \"pid\" : \"CPU0\" , \"tid\" : 1 , \"ph\" : \"X\" , \"dur\" : 6 , \"name\" : \"add0\" }, { \"ts\" : 1 , \"pid\" : \"CPU0\" , \"tid\" : 2 , \"ph\" : \"X\" , \"dur\" : 10 , \"name\" : \"sub0\" }, { \"ts\" : 1 , \"pid\" : \"CPU1\" , \"tid\" : 1 , \"ph\" : \"X\" , \"dur\" : 6 , \"name\" : \"add1\" }, { \"ts\" : 1 , \"pid\" : \"CPU1\" , \"tid\" : 2 , \"ph\" : \"X\" , \"dur\" : 10 , \"name\" : \"sub1\" }, { \"ts\" : 2 , \"pid\" : \"CPU0\" , \"tid\" : 2 , \"ph\" : \"i\" , \"s\" : \"t\" , \"name\" : \"inst issue\" }, { \"ts\" : 4 , \"pid\" : \"CPU1\" , \"tid\" : 1 , \"ph\" : \"i\" , \"s\" : \"p\" , \"name\" : \"cpu1 halt\" }, { \"ts\" : 5 , \"pid\" : \"CPU0\" , \"tid\" : 2 , \"ph\" : \"i\" , \"s\" : \"g\" , \"name\" : \"stop\" } ]","title":"instant event"},{"location":"tools/chrome-tracing.html#counter-event","text":"\u7528\u7c7b\u4f3c\u67f1\u72b6\u56fe\u7684\u5f62\u5f0f\u7c97\u7565\u7684\u8868\u793a\u51fa\u5404\u4e2a\u6210\u5458\u6240\u5360\u7684\u6570\u91cf\u548c\u6bd4\u4f8b [ { \"pid\" : 0 , \"name\" : \"ctr\" , \"ph\" : \"C\" , \"ts\" : 0 , \"args\" : { \"cats\" : 0 , \"dogs\" : 7 , \"pig\" : 5 }}, { \"pid\" : 0 , \"name\" : \"ctr\" , \"ph\" : \"C\" , \"ts\" : 10 , \"args\" : { \"cats\" : 10 , \"dogs\" : 14 , \"pig\" : 10 }}, { \"pid\" : 0 , \"name\" : \"ctr\" , \"ph\" : \"C\" , \"ts\" : 20 , \"args\" : { \"cats\" : 20 , \"dogs\" : 21 , \"pig\" : 5 }}, { \"pid\" : 0 , \"name\" : \"ctr\" , \"ph\" : \"C\" , \"ts\" : 30 , \"args\" : { \"cats\" : 30 , \"dogs\" : 28 , \"pig\" : 10 }}, { \"pid\" : 0 , \"name\" : \"ctr\" , \"ph\" : \"C\" , \"ts\" : 40 , \"args\" : { \"cats\" : 40 , \"dogs\" : 35 , \"pig\" : 5 }} ]","title":"counter event"},{"location":"tools/chrome-tracing.html#async-event","text":"\u5f02\u6b65\u4e8b\u4ef6\uff0c\u591a\u4e86\u4e00\u4e2aid\u7528\u6765\u6807\u8bc6\u540c\u4e00\u7ec4\u4e8b\u4ef6\u3002","title":"async event"},{"location":"tools/chrome-tracing.html#_2","text":"\u5173\u4e8e\u5982\u4f55\u4f7f\u7528\u5df2\u7ecf\u603b\u7ed3\u5b8c\u6bd5\u4e86\uff0c\u5bf9\u4e8e\u4e00\u822c\u7684\u5e94\u7528\u573a\u666f\u6765\u8bb2\uff0c\u4e86\u89e3\u4e0a\u9762\u8fd9\u4e9b\u5df2\u7ecf\u8db3\u591f\u4e86\uff0c\u6211\u4eec\u751f\u6210json\u6587\u4ef6\uff0c\u7136\u540e\u5728google\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165chrome://tracing/\uff0c\u518d\u5728\u91cc\u9762\u6253\u5f00\u6211\u4eec\u7684json\u6587\u4ef6\uff0c\u5c31\u80fd\u770b\u5230\u6211\u4eec\u751f\u6210\u7684\u6ce2\u5f62\u4e86\u3002 \u4f46\u5728\u5f88\u591a\u573a\u666f\u4e2d\uff0c\u8fd9\u662f\u65e0\u6cd5\u5b9e\u73b0\u7684\u3002\u56e0\u4e3a\u4e00\u822cIC\u516c\u53f8\u7684\u4fdd\u5bc6\u6027\u5f88\u9ad8\uff0c\u53c8\u5f88\u96be\u4fdd\u8bc1\u5de5\u4f5c\u7684\u673a\u5668\u4e2d\u4e00\u5b9a\u80fd\u591f\u5b89\u88c5google-chrome, \u6240\u4ee5\u6211\u4eec\u8981\u4f7f\u7528\u53e6\u4e00\u79cd\u65b9\u6cd5\u6765\u751f\u6210\u3002","title":"\u73af\u5883\u96c6\u6210"},{"location":"tools/chrome-tracing.html#repo","text":"\u5728catapult\u7684repo\u4e2d\uff0ctracing/bin/\u76ee\u5f55\u4e0b\u6709trace2html\u7684\u5de5\u5177\uff0c\u53ef\u4ee5\u76f4\u63a5\u8f93\u5165json\u6587\u4ef6\uff0c\u8f93\u51fahtml\u3002\u5b9e\u9645\u6d4b\u8bd5\uff0cfirefox, chrome, edge\u90fd\u80fd\u6b63\u5e38\u663e\u793a\u3002 $CATAPULT /tracing/bin/trace2html my_trace.json --output = my_trace.html && open my_trace.html","title":"\u65b9\u6cd5\u4e00\uff1a\u76f4\u63a5\u4f7f\u7528repo\u4e2d\u7684\u53ef\u6267\u884c\u6587\u4ef6\u751f\u6210"},{"location":"tools/chrome-tracing.html#python","text":"\u5728catapult\u7684repo\u4e2d\uff0ctracing/trace_build\u76ee\u5f55\u4e0b\u6709\u5f88\u591apython\u6587\u4ef6\uff0c\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u4f7f\u7528, \u9700\u8981\u8bbe\u7f6epath_to_catapult import sys import os sys . path . append ( os . path . join ( path_to_catapult , 'tracing' )) from tracing_build import trace2html with open ( 'my_trace.html' , 'w' , encoding = 'utf-8' ) as new_file : trace2html . WriteHTMLForTracesToFile ([ './dut_perf_waitbuffer.json' ], new_file )","title":"\u65b9\u6cd5\u4e8c\uff1a\u96c6\u6210\u5230python\u811a\u672c\u4e2d"},{"location":"tools/cii-and-crontable.html","text":"\u81ea\u52a8\u5316\u90e8\u7f72\u4e4bgitlab.ci \u548c crontable \u00b6 \u548cgithub\u7684action\u7c7b\u4f3c\uff0cgitlab\u7684CI/CD\u4e5f\u662f\u4e00\u5957\u81ea\u52a8\u5316\u90e8\u7f72\u5de5\u5177\uff0c\u901a\u8fc7\u5728.gitlab-ci.yml\u4e2d\u5199\u5165\u914d\u7f6e\u5c31\u53ef\u4ee5\u5b9e\u73b0\u81ea\u52a8\u5316\u6d4b\u8bd5\u7b49\u529f\u80fd \u8fd9\u91cc\u53ea\u603b\u7ed3\u7b80\u5355\u4f7f\u7528\u65b9\u6cd5\uff0c\u8be6\u7ec6\u53ef\u4ee5\u53c2\u8003https://docs.gitlab.com/ee/ci/ CI\u57fa\u672c\u6982\u5ff5 \u00b6 Job \u5f85\u6267\u884c\u7684\u4efb\u52a1 Pipeline \u6d41\u6c34\u7ebf\u4e2d\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u4efb\u52a1\uff0c\u5728\u8fbe\u5230\u89e6\u53d1\u6761\u4ef6\u540e\uff0c\u4f1a\u6839\u636e.gitlab-ci.yml\u521b\u5efa\u4e00\u6761\u6d41\u6c34\u7ebf Stage \u6d41\u6c34\u7ebf\u9636\u6bb5\uff0c\u4e00\u4e2a\u6d41\u6c34\u7ebf\u4e2d\u53ef\u4ee5\u6709\u591a\u4e2a\u6d41\u6c34\u7ebf\u9636\u6bb5\uff0c\u4e00\u4e2a\u9636\u6bb5\u53ef\u4ee5\u6709\u591a\u4e2a\u4efb\u52a1\uff0c\u9636\u6bb5\u6309\u5e8f\u6267\u884c Environment variables \u6709CI\u5185\u7f6e\u73af\u5883\u53d8\u91cf\uff0c\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u73af\u5883\u53d8\u91cf cache \u5b58\u653e\u4e00\u4e9b\u73af\u5883\u4f9d\u8d56 artifacts \u5728stage\u4e4b\u95f4\u4f20\u9012\u7ed3\u679c CI\u73af\u5883\u642d\u5efa \u00b6 todo...","title":"\u81ea\u52a8\u5316\u90e8\u7f72\u4e4bgitlab.ci \u548c crontable"},{"location":"tools/cii-and-crontable.html#gitlabci-crontable","text":"\u548cgithub\u7684action\u7c7b\u4f3c\uff0cgitlab\u7684CI/CD\u4e5f\u662f\u4e00\u5957\u81ea\u52a8\u5316\u90e8\u7f72\u5de5\u5177\uff0c\u901a\u8fc7\u5728.gitlab-ci.yml\u4e2d\u5199\u5165\u914d\u7f6e\u5c31\u53ef\u4ee5\u5b9e\u73b0\u81ea\u52a8\u5316\u6d4b\u8bd5\u7b49\u529f\u80fd \u8fd9\u91cc\u53ea\u603b\u7ed3\u7b80\u5355\u4f7f\u7528\u65b9\u6cd5\uff0c\u8be6\u7ec6\u53ef\u4ee5\u53c2\u8003https://docs.gitlab.com/ee/ci/","title":"\u81ea\u52a8\u5316\u90e8\u7f72\u4e4bgitlab.ci \u548c crontable"},{"location":"tools/cii-and-crontable.html#ci","text":"Job \u5f85\u6267\u884c\u7684\u4efb\u52a1 Pipeline \u6d41\u6c34\u7ebf\u4e2d\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u4efb\u52a1\uff0c\u5728\u8fbe\u5230\u89e6\u53d1\u6761\u4ef6\u540e\uff0c\u4f1a\u6839\u636e.gitlab-ci.yml\u521b\u5efa\u4e00\u6761\u6d41\u6c34\u7ebf Stage \u6d41\u6c34\u7ebf\u9636\u6bb5\uff0c\u4e00\u4e2a\u6d41\u6c34\u7ebf\u4e2d\u53ef\u4ee5\u6709\u591a\u4e2a\u6d41\u6c34\u7ebf\u9636\u6bb5\uff0c\u4e00\u4e2a\u9636\u6bb5\u53ef\u4ee5\u6709\u591a\u4e2a\u4efb\u52a1\uff0c\u9636\u6bb5\u6309\u5e8f\u6267\u884c Environment variables \u6709CI\u5185\u7f6e\u73af\u5883\u53d8\u91cf\uff0c\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u73af\u5883\u53d8\u91cf cache \u5b58\u653e\u4e00\u4e9b\u73af\u5883\u4f9d\u8d56 artifacts \u5728stage\u4e4b\u95f4\u4f20\u9012\u7ed3\u679c","title":"CI\u57fa\u672c\u6982\u5ff5"},{"location":"tools/cii-and-crontable.html#ci_1","text":"todo...","title":"CI\u73af\u5883\u642d\u5efa"},{"location":"tools/engine.html","text":"engine \u00b6 \u4e00\u4e2a\u77e9\u9635\u5411\u91cf\u8fd0\u7b97\u5e93\uff0cc++\u5b9e\u73b0\uff0c\u4f7f\u7528\u8d77\u6765\u5f88\u65b9\u4fbf\u3002\u5b9e\u73b0\u4e86\u6570\u636e\u7c7b\u578b\u548c\u8ba1\u7b97\u5206\u79bb\uff0c\u652f\u6301\u7684\u6570\u636e\u7c7b\u578b\u5f88\u591a\u3002 \u5b98\u7f51\uff1a http://eigen.tuxfamily.org/index.php?title=Main_Page https://gitlab.com/libeigen/eigen/tree/master https://gitlab.com/libeigen/eigen.git","title":"engine"},{"location":"tools/engine.html#engine","text":"\u4e00\u4e2a\u77e9\u9635\u5411\u91cf\u8fd0\u7b97\u5e93\uff0cc++\u5b9e\u73b0\uff0c\u4f7f\u7528\u8d77\u6765\u5f88\u65b9\u4fbf\u3002\u5b9e\u73b0\u4e86\u6570\u636e\u7c7b\u578b\u548c\u8ba1\u7b97\u5206\u79bb\uff0c\u652f\u6301\u7684\u6570\u636e\u7c7b\u578b\u5f88\u591a\u3002 \u5b98\u7f51\uff1a http://eigen.tuxfamily.org/index.php?title=Main_Page https://gitlab.com/libeigen/eigen/tree/master https://gitlab.com/libeigen/eigen.git","title":"engine"},{"location":"tools/git-hooks.html","text":"git \u94a9\u5b50\u4e0e\u81ea\u52a8\u7f16\u7801\u98ce\u683c\u68c0\u67e5 \u00b6 \u5b9e\u9645\u4e0a\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u7f16\u7801\u98ce\u683c\u7684\u7edf\u4e00\uff0c\u597d\u591a\u5f00\u6e90\u8f6f\u4ef6\u63d0\u4f9b\u4e86\u7f16\u7801\u98ce\u683c\u68c0\u67e5\u811a\u672c\uff0c\u5e76\u4e14\u5728git commit\u7684\u65f6\u5019\u4f1a\u81ea\u52a8\u68c0\u67e5 \u6211\u5f88\u559c\u6b22\u8fd9\u79cd\u8bbe\u8ba1\uff0c\u8fd9\u662f\u4e00\u79cd\u5b88\u7684\u8bbe\u8ba1\uff0c\u4ece\u7ed3\u6784\u4e0a\u9650\u5236\u4e86\u7a0b\u5e8f\u5458\u7684\u884c\u4e3a\u3002\u90a3\u4e48\u8fd9\u4e2a\u529f\u80fd\u662f\u600e\u4e48\u5b9e\u73b0\u7684\u5462\uff0c\u8fd9\u91cc\u505a\u4e00\u4e0b\u7c97\u7565\u603b\u7ed3\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u5f15\u5b50 git\u7684hooks\u673a\u5236 \u00b6 git \u63d0\u4f9b\u4e86\u4e00\u4e9b\u94a9\u5b50\u673a\u5236\uff0c\u7528\u6765\u5728git\u547d\u4ee4\u524d\u540e\u6267\u884c\u4e00\u4e9b\u4f7f\u7528\u8005\u60f3\u8981\u6267\u884c\u7684\u5185\u5bb9\u3002\u8fd9\u4e9b\u94a9\u5b50\u5728 .git/hooks\u76ee\u5f55\u4e0b, \u6bd4\u5982\u6211\u7684\u7535\u8111\u4e2d\u7684\u4e00\u4e2arepo\u4e0b\u9762\u7684hooks\u76ee\u5f55 chsgcxy@chsgcxy-xxxx:~/workspace/xxxx/.git/hooks$ ls applypatch-msg.sample post-update.sample prepare-commit-msg.sample pre-receive.sample commit-msg.sample pre-applypatch.sample pre-push.sample update.sample fsmonitor-watchman.sample pre-commit.sample pre-rebase.sample \u8fd9\u91cc\u9762\u6709\u6240\u6709\u7684\u94a9\u5b50\u7684sample\uff0c\u8fd9\u4e2a\u662f\u6309\u7167\u540d\u79f0\u6765\u7ed1\u5b9a\u7684\uff0c\u6bd4\u5982pre-commit.sample\uff0c \u5982\u679c\u6211\u4eec\u628a.sample\u53bb\u6389\uff0c\u90a3\u4e48pre-commit\u8fd9\u4e2a\u94a9\u5b50\u5c31\u751f\u6548\u4e86\uff0c\u5e76\u4e14\u5b83\u4f1a\u5728\u6572git commit\u7684\u65f6\u5019\u5148\u53bb\u6267\u884c\uff0c\u5982\u679c\u8fd9\u4e2a\u811a\u672c\u8fd4\u56de\u6210\u529f\uff0c\u624d\u80fd\u5b8c\u6210commit\u52a8\u4f5c\uff0c\u5426\u5219commit\u4f1a\u5931\u8d25 \u5f53\u7136git\u4e5f\u6ca1\u6709\u9650\u5236\u8fd9\u4e2a\u94a9\u5b50\u6587\u4ef6\u7684\u7c7b\u578b\uff0c\u5b83\u53ef\u4ee5\u662fshell\uff0cpython\uff0c\u5e94\u7528\uff0c\u7b49\u7b49\u7b49\u7684\uff0c\u53ea\u8981\u5b83\u540d\u5b57\u662f\u90a3\u4e2a\uff0c\u5e76\u4e14\u53ef\u6267\u884c\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u662f\u8f6f\u94fe\u63a5\u55bd \u81ea\u52a8\u7f16\u7801\u98ce\u683c\u68c0\u67e5 \u00b6 \u6bd4\u5982qemu\u4e2d\uff0c\u5728scripts\u76ee\u5f55\u4e0b\u9762\u63d0\u4f9b\u4e86\u4e00\u4e2a\u540d\u4e3acheckpatch.pl\u7684\u811a\u672c\uff0c\u5b83\u53ef\u4ee5\u68c0\u67e5\u4e00\u4e2apatch\u7684\u7f16\u7801\u98ce\u683c\u662f\u5426\u7b26\u5408\u89c4\u8303\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u5982\u4e0b\u7b80\u5355\u811a\u672c\u8c03\u7528\u5b83\uff0c\u5e76\u4e14\u8fd9\u4e2a\u811a\u672c\u547d\u540d\u4e3apre-commit\u5e76\u653e\u5728.git/hooks\u76ee\u5f55\u4e0b\u5373\u53ef git diff --cached > .cur_commit.patch ./scripts/checkpatch.pl --patch --no-signoff .cur_commit.patch res = $? rm .cur_commit.patch if [ $res -ne 0 ] ; then exit 1 else exit 0 fi \u5173\u4e8esign-off \u00b6 \u4e0a\u8ff0\u64cd\u4f5c\u663e\u7136\u65e0\u6cd5\u751f\u6210\u5e26sign-off\u7684patch\uff0c\u56e0\u6b64\u5ffd\u7565signoff\u68c0\u67e5 git commit\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7-s(--signoff)\u53c2\u6570\u6765\u786e\u5b9a\u4f7f\u7528signoff,\u5e76\u4e14-m\u4fe1\u606f\u4e2d\u6700\u540e\u4e00\u884c\u5e94\u8be5\u50cf\u4e0b\u9762\u8fd9\u6837 Signed-off-by: chsgcxy <chsgcxy@outlook.com> \u5173\u4e8e\u90e8\u7f72 \u00b6 \u6709\u4e86\u8fd9\u4e2a\u81ea\u52a8\u68c0\u67e5\uff0c\u90a3\u4e48\u5f88\u663e\u7136\u662f\u60f3\u63a8\u5e7f\uff0c\u4f46\u5f88\u9057\u61be\uff0c\u8fd9\u4ec5\u5bf9\u672c\u5730\u751f\u6548\uff0c\u5728clone\u4ee3\u7801\u65f6\u4e5f\u65e0\u6cd5\u628a\u8fd9\u4e2aclone\u4e0b\u6765\uff0c\u4f3c\u4e4e\u90fd\u6ca1\u6709\u4e0a\u4f20\u7684\u9014\u5f84\u3002\u600e\u4e48\u529e\u5462\uff0c\u4ee3\u7801\u603b\u8981\u7f16\u8bd1\u5427\uff0c\u603b\u6709\u4e00\u4e2a\u4e0b\u8f7d\u4e0b\u6765\u7edd\u5927\u591a\u5c11\u4eba\u90fd\u4f1a\u8fdb\u884c\u7684\u64cd\u4f5c\u5427\uff0c\u4e00\u822c\u53ef\u4ee5\u9009\u62e9\u5728\u7f16\u8bd1\u7684\u65f6\u5019\uff0c\u5728\u7f16\u8bd1\u811a\u672c\u4e2d\u751f\u6548\u94a9\u5b50\u6587\u4ef6\uff0c\u94a9\u5b50\u6587\u4ef6\u53ef\u4ee5\u91c7\u53d6\u8f6f\u94fe\u63a5\u7684\u65b9\u5f0f\uff0c\u8fd9\u6837\u94a9\u5b50\u6587\u4ef6\u4e5f\u53ef\u4ee5\u5728\u9879\u76ee\u4e2d\u5f52\u6863\u3002","title":"git \u94a9\u5b50\u4e0e\u81ea\u52a8\u7f16\u7801\u98ce\u683c\u68c0\u67e5"},{"location":"tools/git-hooks.html#git","text":"\u5b9e\u9645\u4e0a\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u7f16\u7801\u98ce\u683c\u7684\u7edf\u4e00\uff0c\u597d\u591a\u5f00\u6e90\u8f6f\u4ef6\u63d0\u4f9b\u4e86\u7f16\u7801\u98ce\u683c\u68c0\u67e5\u811a\u672c\uff0c\u5e76\u4e14\u5728git commit\u7684\u65f6\u5019\u4f1a\u81ea\u52a8\u68c0\u67e5 \u6211\u5f88\u559c\u6b22\u8fd9\u79cd\u8bbe\u8ba1\uff0c\u8fd9\u662f\u4e00\u79cd\u5b88\u7684\u8bbe\u8ba1\uff0c\u4ece\u7ed3\u6784\u4e0a\u9650\u5236\u4e86\u7a0b\u5e8f\u5458\u7684\u884c\u4e3a\u3002\u90a3\u4e48\u8fd9\u4e2a\u529f\u80fd\u662f\u600e\u4e48\u5b9e\u73b0\u7684\u5462\uff0c\u8fd9\u91cc\u505a\u4e00\u4e0b\u7c97\u7565\u603b\u7ed3\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u5f15\u5b50","title":"git \u94a9\u5b50\u4e0e\u81ea\u52a8\u7f16\u7801\u98ce\u683c\u68c0\u67e5"},{"location":"tools/git-hooks.html#githooks","text":"git \u63d0\u4f9b\u4e86\u4e00\u4e9b\u94a9\u5b50\u673a\u5236\uff0c\u7528\u6765\u5728git\u547d\u4ee4\u524d\u540e\u6267\u884c\u4e00\u4e9b\u4f7f\u7528\u8005\u60f3\u8981\u6267\u884c\u7684\u5185\u5bb9\u3002\u8fd9\u4e9b\u94a9\u5b50\u5728 .git/hooks\u76ee\u5f55\u4e0b, \u6bd4\u5982\u6211\u7684\u7535\u8111\u4e2d\u7684\u4e00\u4e2arepo\u4e0b\u9762\u7684hooks\u76ee\u5f55 chsgcxy@chsgcxy-xxxx:~/workspace/xxxx/.git/hooks$ ls applypatch-msg.sample post-update.sample prepare-commit-msg.sample pre-receive.sample commit-msg.sample pre-applypatch.sample pre-push.sample update.sample fsmonitor-watchman.sample pre-commit.sample pre-rebase.sample \u8fd9\u91cc\u9762\u6709\u6240\u6709\u7684\u94a9\u5b50\u7684sample\uff0c\u8fd9\u4e2a\u662f\u6309\u7167\u540d\u79f0\u6765\u7ed1\u5b9a\u7684\uff0c\u6bd4\u5982pre-commit.sample\uff0c \u5982\u679c\u6211\u4eec\u628a.sample\u53bb\u6389\uff0c\u90a3\u4e48pre-commit\u8fd9\u4e2a\u94a9\u5b50\u5c31\u751f\u6548\u4e86\uff0c\u5e76\u4e14\u5b83\u4f1a\u5728\u6572git commit\u7684\u65f6\u5019\u5148\u53bb\u6267\u884c\uff0c\u5982\u679c\u8fd9\u4e2a\u811a\u672c\u8fd4\u56de\u6210\u529f\uff0c\u624d\u80fd\u5b8c\u6210commit\u52a8\u4f5c\uff0c\u5426\u5219commit\u4f1a\u5931\u8d25 \u5f53\u7136git\u4e5f\u6ca1\u6709\u9650\u5236\u8fd9\u4e2a\u94a9\u5b50\u6587\u4ef6\u7684\u7c7b\u578b\uff0c\u5b83\u53ef\u4ee5\u662fshell\uff0cpython\uff0c\u5e94\u7528\uff0c\u7b49\u7b49\u7b49\u7684\uff0c\u53ea\u8981\u5b83\u540d\u5b57\u662f\u90a3\u4e2a\uff0c\u5e76\u4e14\u53ef\u6267\u884c\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u662f\u8f6f\u94fe\u63a5\u55bd","title":"git\u7684hooks\u673a\u5236"},{"location":"tools/git-hooks.html#_1","text":"\u6bd4\u5982qemu\u4e2d\uff0c\u5728scripts\u76ee\u5f55\u4e0b\u9762\u63d0\u4f9b\u4e86\u4e00\u4e2a\u540d\u4e3acheckpatch.pl\u7684\u811a\u672c\uff0c\u5b83\u53ef\u4ee5\u68c0\u67e5\u4e00\u4e2apatch\u7684\u7f16\u7801\u98ce\u683c\u662f\u5426\u7b26\u5408\u89c4\u8303\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u5982\u4e0b\u7b80\u5355\u811a\u672c\u8c03\u7528\u5b83\uff0c\u5e76\u4e14\u8fd9\u4e2a\u811a\u672c\u547d\u540d\u4e3apre-commit\u5e76\u653e\u5728.git/hooks\u76ee\u5f55\u4e0b\u5373\u53ef git diff --cached > .cur_commit.patch ./scripts/checkpatch.pl --patch --no-signoff .cur_commit.patch res = $? rm .cur_commit.patch if [ $res -ne 0 ] ; then exit 1 else exit 0 fi","title":"\u81ea\u52a8\u7f16\u7801\u98ce\u683c\u68c0\u67e5"},{"location":"tools/git-hooks.html#sign-off","text":"\u4e0a\u8ff0\u64cd\u4f5c\u663e\u7136\u65e0\u6cd5\u751f\u6210\u5e26sign-off\u7684patch\uff0c\u56e0\u6b64\u5ffd\u7565signoff\u68c0\u67e5 git commit\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7-s(--signoff)\u53c2\u6570\u6765\u786e\u5b9a\u4f7f\u7528signoff,\u5e76\u4e14-m\u4fe1\u606f\u4e2d\u6700\u540e\u4e00\u884c\u5e94\u8be5\u50cf\u4e0b\u9762\u8fd9\u6837 Signed-off-by: chsgcxy <chsgcxy@outlook.com>","title":"\u5173\u4e8esign-off"},{"location":"tools/git-hooks.html#_2","text":"\u6709\u4e86\u8fd9\u4e2a\u81ea\u52a8\u68c0\u67e5\uff0c\u90a3\u4e48\u5f88\u663e\u7136\u662f\u60f3\u63a8\u5e7f\uff0c\u4f46\u5f88\u9057\u61be\uff0c\u8fd9\u4ec5\u5bf9\u672c\u5730\u751f\u6548\uff0c\u5728clone\u4ee3\u7801\u65f6\u4e5f\u65e0\u6cd5\u628a\u8fd9\u4e2aclone\u4e0b\u6765\uff0c\u4f3c\u4e4e\u90fd\u6ca1\u6709\u4e0a\u4f20\u7684\u9014\u5f84\u3002\u600e\u4e48\u529e\u5462\uff0c\u4ee3\u7801\u603b\u8981\u7f16\u8bd1\u5427\uff0c\u603b\u6709\u4e00\u4e2a\u4e0b\u8f7d\u4e0b\u6765\u7edd\u5927\u591a\u5c11\u4eba\u90fd\u4f1a\u8fdb\u884c\u7684\u64cd\u4f5c\u5427\uff0c\u4e00\u822c\u53ef\u4ee5\u9009\u62e9\u5728\u7f16\u8bd1\u7684\u65f6\u5019\uff0c\u5728\u7f16\u8bd1\u811a\u672c\u4e2d\u751f\u6548\u94a9\u5b50\u6587\u4ef6\uff0c\u94a9\u5b50\u6587\u4ef6\u53ef\u4ee5\u91c7\u53d6\u8f6f\u94fe\u63a5\u7684\u65b9\u5f0f\uff0c\u8fd9\u6837\u94a9\u5b50\u6587\u4ef6\u4e5f\u53ef\u4ee5\u5728\u9879\u76ee\u4e2d\u5f52\u6863\u3002","title":"\u5173\u4e8e\u90e8\u7f72"},{"location":"tools/git.html","text":"git\u6280\u5de7 \u00b6 \u7edf\u8ba1\u4ee3\u7801 \u00b6 \u7edf\u8ba1\u4ee3\u7801\u884c\u6570 git log --since = 2021 -05-27 --author = \"xxxxx\" --pretty = tformat: --numstat | gawk '{ add += $1 ; subs += $2 ; loc += $1 - $2 } END { printf \"added lines: %s removed lines: %s total lines: %s\\n\",add,subs,loc}' \u7edf\u8ba1\u63d0\u4ea4\u6b21\u6570 git log --author = \"xxxxx\" --oneline | wc -l git clone\u95ee\u9898 \u00b6 \u95ee\u9898 xxx:~/workspace$ git clone xxxxx Cloning into 'xxxxx' ... fatal: unable to access 'xxxxx/' : server certificate verification failed. CAfile: /etc/ssl/certs/ca-certificates.crt CRLfile: none \u89e3\u51b3\u65b9\u6cd5 export GIT_SSL_NO_VERIFY = 1","title":"git\u6280\u5de7"},{"location":"tools/git.html#git","text":"","title":"git\u6280\u5de7"},{"location":"tools/git.html#_1","text":"\u7edf\u8ba1\u4ee3\u7801\u884c\u6570 git log --since = 2021 -05-27 --author = \"xxxxx\" --pretty = tformat: --numstat | gawk '{ add += $1 ; subs += $2 ; loc += $1 - $2 } END { printf \"added lines: %s removed lines: %s total lines: %s\\n\",add,subs,loc}' \u7edf\u8ba1\u63d0\u4ea4\u6b21\u6570 git log --author = \"xxxxx\" --oneline | wc -l","title":"\u7edf\u8ba1\u4ee3\u7801"},{"location":"tools/git.html#git-clone","text":"\u95ee\u9898 xxx:~/workspace$ git clone xxxxx Cloning into 'xxxxx' ... fatal: unable to access 'xxxxx/' : server certificate verification failed. CAfile: /etc/ssl/certs/ca-certificates.crt CRLfile: none \u89e3\u51b3\u65b9\u6cd5 export GIT_SSL_NO_VERIFY = 1","title":"git clone\u95ee\u9898"},{"location":"tools/llvm-symbolizer.html","text":"\u4f7f\u7528llvm-symbolizer\u67e5\u627e\u7b26\u53f7 \u00b6 https://llvm.org/docs/CommandGuide/llvm-symbolizer.html llvm-symbolizer\u53ef\u4ee5\u7528\u6765\u6839\u636ePC\u503c\u67e5\u627e\u5230\u5bf9\u5e94\u7684\u51fd\u6570\u548c\u8be5\u51fd\u6570\u6240\u5728\u6587\u4ef6 \u610f\u4e49 \u00b6 \u8bb0\u5f55\u8fd9\u4e2a\u7684\u610f\u4e49\u5728\u4e8e\uff0c\u5b83\u4ece\u4fa7\u9762\u5370\u8bc1\u4e86\u4e00\u4e2a\u5f88\u4e45\u4ee5\u6765\u7684\u611f\u609f\uff1a \u5584\u4e8e\u4f7f\u7528\u65e2\u6709\u5de5\u5177\u89e3\u51b3\u9047\u5230\u7684\u95ee\u9898\u662f\u4e00\u79cd\u80fd\u529b\u3002\u867d\u7136\u4e4b\u524d\u6ca1\u6709\u50cf\u4f7f\u7528gcc\u4e00\u6837\u53bb\u9891\u7e41\u4f7f\u7528llvm\uff0c \u4f46\u9762\u5bf9\u201c\u9700\u8981\u6839\u636e\u5f53\u524dPC\u503c\u77e5\u9053\u76ee\u524d\u6240\u6267\u884c\u7684\u51fd\u6570\u4fe1\u606f\u201d\u8fd9\u4e2a\u95ee\u9898\u7684\u65f6\u5019\uff0c\u9996\u5148\u60f3\u5230\u7684\u5e94\u8be5\u5c31\u662f \u4ece\u5de5\u5177\u94fe\u4e2d\u5bfb\u627e\u5bf9\u5e94\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u5f53\u7136\uff0c\u4f7f\u7528\u5de5\u5177\u7684\u80fd\u529b\u4e5f\u9700\u8981\u4e00\u5b9a\u7684\u77e5\u8bc6\u50a8\u5907\uff0c\u6bd4\u5982\u6b63\u662f\u56e0\u4e3a\u4e4b\u524d\u7814\u7a76\u8fc7elf\u6587\u4ef6\u683c\u5f0f\uff0c\u7814\u7a76\u8fc7\u5185\u6838\u52a0\u8f7dko\u6a21\u5757\u7684\u8be6\u7ec6\u6d41\u7a0b\uff0c \u9891\u7e41\u7684\u4f7f\u7528\u5de5\u5177\u94fe\u5bf9\u76ee\u6807\u6587\u4ef6\u505a\u4e00\u7cfb\u5217\u8f6c\u6362\uff0c\u624d\u80fd\u6df1\u5165\u7684\u7406\u89e3\u5de5\u5177\u94fe\u4e2d\u7684\u4e00\u4e9b\u5de5\u5177\uff0c\u624d\u80fd\u4e3e\u4e00\u53cd\u4e09\u7684\u60f3\u5230\u53bb\u5de5\u5177\u94fe\u4e2d\u627e\u5230 \u89e3\u51b3\u65b9\u6848\u3002 \u4e3e\u4e00\u53cd\u4e09 \u00b6 \u5f88\u663e\u7136\uff0cgcc\u91cc\u9762\u80af\u5b9a\u4e5f\u6709\u7c7b\u4f3c\u5de5\u5177\uff0c\u901a\u8fc7\u540d\u5b57\u89c2\u5bdfaddr2line\u5f88\u50cf\uff0c \u67e5\u770b\u8bf4\u660e\uff0c\u663e\u7136\u662f\u7c7b\u4f3c\u7684\u5de5\u5177 riscv32-unknown-elf-addr2line -h Usage: riscv32-unknown-elf-addr2line [ option ( s )] [ addr ( s )] Convert addresses into line number/file name pairs. If no addresses are specified on the command line, they will be read from stdin The options are: @<file> Read options from <file> -a --addresses Show addresses -b --target = <bfdname> Set the binary file format -e --exe = <executable> Set the input file name ( default is a.out ) -i --inlines Unwind inlined functions -j --section = <name> Read section-relative offsets instead of addresses -p --pretty-print Make the output easier to read for humans -s --basenames Strip directory names -f --functions Show function names -C --demangle [= style ] Demangle function names -R --recurse-limit Enable a limit on recursion whilst demangling. [ Default ] -r --no-recurse-limit Disable a limit on recursion whilst demangling -h --help Display this information -v --version Display the program ' s version \u5c1d\u8bd5\u5206\u6790\u4e00\u4e0b chsgcxy@chsgcxy-TM1703:~/workspace$ riscv32-unknown-elf-addr2line -e verification/bert.out -f 0x9532 _ZN7stc_dnn7bert_op25embeddings_postproc_slaveILi8ELi8EEEvv /data/workspace/gem5/gem5/verification/stc-dnn/test/bert/../../include/ops/bert/bert_forward.h:6726 \u663e\u7136\u9700\u8981demangling c++\u7684\u7b26\u53f7\uff0c\u518d\u6b21\u5c1d\u8bd5 chsgcxy@chsgcxy-TM1703:~/workspace$ riscv32-unknown-elf-addr2line -e verification/bert.out -f 0x9532 | c++filt void stc_dnn::bert_op::embeddings_postproc_slave< 8 , 8 > () /data/workspace/gem5/gem5/verification/stc-dnn/test/bert/../../include/ops/bert/bert_forward.h:6726 \u6210\u529f\u4e86\uff0c\u5bf9\u6bd4\u4e00\u4e0bllvm\u5de5\u5177\u7684\u8f93\u51fa\u7ed3\u679c chsgcxy@chsgcxy-TM1703:~/workspace$ llvm-symbolizer --obj = verification/bert.out 0x9532 void stc_dnn::bert_op::embeddings_postproc_slave< 8 , 8 > () /data/workspace/gem5/gem5/verification/stc-dnn/test/bert/../../include/ops/bert/bert_forward.h:6726:49","title":"\u4f7f\u7528llvm-symbolizer\u67e5\u627e\u7b26\u53f7"},{"location":"tools/llvm-symbolizer.html#llvm-symbolizer","text":"https://llvm.org/docs/CommandGuide/llvm-symbolizer.html llvm-symbolizer\u53ef\u4ee5\u7528\u6765\u6839\u636ePC\u503c\u67e5\u627e\u5230\u5bf9\u5e94\u7684\u51fd\u6570\u548c\u8be5\u51fd\u6570\u6240\u5728\u6587\u4ef6","title":"\u4f7f\u7528llvm-symbolizer\u67e5\u627e\u7b26\u53f7"},{"location":"tools/llvm-symbolizer.html#_1","text":"\u8bb0\u5f55\u8fd9\u4e2a\u7684\u610f\u4e49\u5728\u4e8e\uff0c\u5b83\u4ece\u4fa7\u9762\u5370\u8bc1\u4e86\u4e00\u4e2a\u5f88\u4e45\u4ee5\u6765\u7684\u611f\u609f\uff1a \u5584\u4e8e\u4f7f\u7528\u65e2\u6709\u5de5\u5177\u89e3\u51b3\u9047\u5230\u7684\u95ee\u9898\u662f\u4e00\u79cd\u80fd\u529b\u3002\u867d\u7136\u4e4b\u524d\u6ca1\u6709\u50cf\u4f7f\u7528gcc\u4e00\u6837\u53bb\u9891\u7e41\u4f7f\u7528llvm\uff0c \u4f46\u9762\u5bf9\u201c\u9700\u8981\u6839\u636e\u5f53\u524dPC\u503c\u77e5\u9053\u76ee\u524d\u6240\u6267\u884c\u7684\u51fd\u6570\u4fe1\u606f\u201d\u8fd9\u4e2a\u95ee\u9898\u7684\u65f6\u5019\uff0c\u9996\u5148\u60f3\u5230\u7684\u5e94\u8be5\u5c31\u662f \u4ece\u5de5\u5177\u94fe\u4e2d\u5bfb\u627e\u5bf9\u5e94\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u5f53\u7136\uff0c\u4f7f\u7528\u5de5\u5177\u7684\u80fd\u529b\u4e5f\u9700\u8981\u4e00\u5b9a\u7684\u77e5\u8bc6\u50a8\u5907\uff0c\u6bd4\u5982\u6b63\u662f\u56e0\u4e3a\u4e4b\u524d\u7814\u7a76\u8fc7elf\u6587\u4ef6\u683c\u5f0f\uff0c\u7814\u7a76\u8fc7\u5185\u6838\u52a0\u8f7dko\u6a21\u5757\u7684\u8be6\u7ec6\u6d41\u7a0b\uff0c \u9891\u7e41\u7684\u4f7f\u7528\u5de5\u5177\u94fe\u5bf9\u76ee\u6807\u6587\u4ef6\u505a\u4e00\u7cfb\u5217\u8f6c\u6362\uff0c\u624d\u80fd\u6df1\u5165\u7684\u7406\u89e3\u5de5\u5177\u94fe\u4e2d\u7684\u4e00\u4e9b\u5de5\u5177\uff0c\u624d\u80fd\u4e3e\u4e00\u53cd\u4e09\u7684\u60f3\u5230\u53bb\u5de5\u5177\u94fe\u4e2d\u627e\u5230 \u89e3\u51b3\u65b9\u6848\u3002","title":"\u610f\u4e49"},{"location":"tools/llvm-symbolizer.html#_2","text":"\u5f88\u663e\u7136\uff0cgcc\u91cc\u9762\u80af\u5b9a\u4e5f\u6709\u7c7b\u4f3c\u5de5\u5177\uff0c\u901a\u8fc7\u540d\u5b57\u89c2\u5bdfaddr2line\u5f88\u50cf\uff0c \u67e5\u770b\u8bf4\u660e\uff0c\u663e\u7136\u662f\u7c7b\u4f3c\u7684\u5de5\u5177 riscv32-unknown-elf-addr2line -h Usage: riscv32-unknown-elf-addr2line [ option ( s )] [ addr ( s )] Convert addresses into line number/file name pairs. If no addresses are specified on the command line, they will be read from stdin The options are: @<file> Read options from <file> -a --addresses Show addresses -b --target = <bfdname> Set the binary file format -e --exe = <executable> Set the input file name ( default is a.out ) -i --inlines Unwind inlined functions -j --section = <name> Read section-relative offsets instead of addresses -p --pretty-print Make the output easier to read for humans -s --basenames Strip directory names -f --functions Show function names -C --demangle [= style ] Demangle function names -R --recurse-limit Enable a limit on recursion whilst demangling. [ Default ] -r --no-recurse-limit Disable a limit on recursion whilst demangling -h --help Display this information -v --version Display the program ' s version \u5c1d\u8bd5\u5206\u6790\u4e00\u4e0b chsgcxy@chsgcxy-TM1703:~/workspace$ riscv32-unknown-elf-addr2line -e verification/bert.out -f 0x9532 _ZN7stc_dnn7bert_op25embeddings_postproc_slaveILi8ELi8EEEvv /data/workspace/gem5/gem5/verification/stc-dnn/test/bert/../../include/ops/bert/bert_forward.h:6726 \u663e\u7136\u9700\u8981demangling c++\u7684\u7b26\u53f7\uff0c\u518d\u6b21\u5c1d\u8bd5 chsgcxy@chsgcxy-TM1703:~/workspace$ riscv32-unknown-elf-addr2line -e verification/bert.out -f 0x9532 | c++filt void stc_dnn::bert_op::embeddings_postproc_slave< 8 , 8 > () /data/workspace/gem5/gem5/verification/stc-dnn/test/bert/../../include/ops/bert/bert_forward.h:6726 \u6210\u529f\u4e86\uff0c\u5bf9\u6bd4\u4e00\u4e0bllvm\u5de5\u5177\u7684\u8f93\u51fa\u7ed3\u679c chsgcxy@chsgcxy-TM1703:~/workspace$ llvm-symbolizer --obj = verification/bert.out 0x9532 void stc_dnn::bert_op::embeddings_postproc_slave< 8 , 8 > () /data/workspace/gem5/gem5/verification/stc-dnn/test/bert/../../include/ops/bert/bert_forward.h:6726:49","title":"\u4e3e\u4e00\u53cd\u4e09"},{"location":"tools/markdown.html","text":"How to use markdown with vscode \u00b6 How to use markdown with vscode auto-creat-topic \u63d2\u5165\u516c\u5f0f auto-creat-topic \u00b6 install 'markdown TOC' right click and select 'Markdown TOC: Insert/Update' if that not auto add newline and creat like this <!-- TOC -->autoauto- [ How to use markdown with vscode ]( #how-to-use-markdown-with-vscode )auto - [ auto-creat-topic ]( #auto-creat-topic )autoauto<!-- /TOC --> you can use ctrl + h to replace 'autoauto' with '/n' and replace 'auto ' with '\\n '; and if you face this problem, you should close function 'auto update when save' \u63d2\u5165\u516c\u5f0f \u00b6 vscode\u8981\u4f7f\u80fd\u63d2\u5165\u516c\u5f0f\u9884\u89c8\u5fc5\u987b\u5b89\u88c5'markdown math'\u63d2\u4ef6 \u540c\u884c\u4f7f\u7528 a+b a+b \u6765\u58f0\u660e \u5355\u72ec\u4e00\u884c\u4f7f\u7528 a+b a+b <span class=\"arithmatex\"><span class=\"MathJax_Preview\">a+b</span><script type=\"math/tex\">a+b \u6765\u58f0\u660e \u4f7f\u7528{}\u6765\u8868\u793a\u4e00\u4e2a\u53d8\u91cf\u8fb9\u754c \u8be6\u7ec6\u4f7f\u7528\u53ef\u4ee5\u53c2\u8003\uff1a Cmd Markdown \u516c\u5f0f\u6307\u5bfc\u624b\u518c Markdown\u6570\u5b66\u516c\u5f0f\u8bed\u6cd5 plantuml \u00b6 vscode \u652f\u6301plantuml\u63d2\u4ef6\uff0c\u4f9d\u8d56\u4e8ejava\u548cGraphviz\uff0c\u800c\u4e14\u5bf9\u6587\u4ef6\u540e\u7f00\u6709\u8981\u6c42\u3002 \u5b9e\u9645\u4e0avscode\u5e76\u4e0d\u80fd\u5b8c\u7f8e\u4f7f\u7528plantuml,\u7406\u60f3\u4e2d\u7684\u65b9\u5f0f\u662f\u76f4\u63a5\u5728markdown\u7684\u9884\u89c8\u4e2d\u80fd\u591f\u770b\u5230plantuml\u7684\u6548\u679c\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u6211\u4eec\u53ea\u80fd\u521b\u5efa\u4e00\u4e2a\u5355\u72ecplantuml\u6587\u4ef6\u6765\u751f\u6210\u56fe\u7247 markdown\u89e3\u6790\u5668\u7684\u7248\u672c\u592a\u591a\u4e86\uff0c\u5bfc\u81f4\u5f88\u96be\u505a\u5230\u517c\u5bb9\uff0c\u6211\u5e0c\u671b\u80fd\u591f\u5728vscode\u4e2d\u548cgithub\u4e2d\u770b\u5230\u540c\u6837\u7684\u6548\u679c\uff0c\u6240\u4ee5\uff0c\u5bf9\u4e8e\u6d41\u7a0b\u56fe\uff0c\u4f7f\u7528\u5d4c\u5165\u56fe\u7247\u5e94\u8be5\u662f\u6700\u597d\u7684\u9009\u62e9\uff1b\u5f53\u7136\u8fd8\u6709\u516c\u5f0f\u7684\u663e\u793a\u4e5f\u662f\u8ba9\u4eba\u5934\u75bc\uff0c\u4e0d\u77e5\u9053\u5176\u4ed6\u4eba\u6709\u6ca1\u6709\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5176\u5b9e\u76ee\u7684\u5c31\u662f\u65e0\u8bba\u5728\u4ec0\u4e48\u5730\u65b9\u90fd\u80fd\u6bd4\u8f83\u8f7b\u677e\u7684\u770b\u5230markdown\u6548\u679c\uff0c\u800c\u4e14\u5728\u672c\u673a\u7684\u79bb\u7ebf\u72b6\u6001\u4e0b\u4e5f\u80fd\u591f\u770b\u5230markdown\u6548\u679c\u3002\u6216\u8bb8\u4e4b\u524d\u4f7f\u7528\u8fc7\u7684github.io\u4f1a\u662f\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\uff1f\uff1f\uff1f \u4f7f\u7528\u65b9\u6cd5\u53c2\u8003 \u4f7f\u7528Emacs\u6572\u51faUML\uff0cPlantUML\u5feb\u901f\u6307\u5357 \u5176\u4e2d class-diagram \u8bed\u6cd5\u683c\u5f0f\u53ef\u4ee5\u53c2\u8003 PlantUML Class Diagram \u7c7b\u56fe","title":"How to use markdown with vscode"},{"location":"tools/markdown.html#how-to-use-markdown-with-vscode","text":"How to use markdown with vscode auto-creat-topic \u63d2\u5165\u516c\u5f0f","title":"How to use markdown with vscode"},{"location":"tools/markdown.html#auto-creat-topic","text":"install 'markdown TOC' right click and select 'Markdown TOC: Insert/Update' if that not auto add newline and creat like this <!-- TOC -->autoauto- [ How to use markdown with vscode ]( #how-to-use-markdown-with-vscode )auto - [ auto-creat-topic ]( #auto-creat-topic )autoauto<!-- /TOC --> you can use ctrl + h to replace 'autoauto' with '/n' and replace 'auto ' with '\\n '; and if you face this problem, you should close function 'auto update when save'","title":"auto-creat-topic"},{"location":"tools/markdown.html#_1","text":"vscode\u8981\u4f7f\u80fd\u63d2\u5165\u516c\u5f0f\u9884\u89c8\u5fc5\u987b\u5b89\u88c5'markdown math'\u63d2\u4ef6 \u540c\u884c\u4f7f\u7528 a+b a+b \u6765\u58f0\u660e \u5355\u72ec\u4e00\u884c\u4f7f\u7528 a+b a+b <span class=\"arithmatex\"><span class=\"MathJax_Preview\">a+b</span><script type=\"math/tex\">a+b \u6765\u58f0\u660e \u4f7f\u7528{}\u6765\u8868\u793a\u4e00\u4e2a\u53d8\u91cf\u8fb9\u754c \u8be6\u7ec6\u4f7f\u7528\u53ef\u4ee5\u53c2\u8003\uff1a Cmd Markdown \u516c\u5f0f\u6307\u5bfc\u624b\u518c Markdown\u6570\u5b66\u516c\u5f0f\u8bed\u6cd5","title":"\u63d2\u5165\u516c\u5f0f"},{"location":"tools/markdown.html#plantuml","text":"vscode \u652f\u6301plantuml\u63d2\u4ef6\uff0c\u4f9d\u8d56\u4e8ejava\u548cGraphviz\uff0c\u800c\u4e14\u5bf9\u6587\u4ef6\u540e\u7f00\u6709\u8981\u6c42\u3002 \u5b9e\u9645\u4e0avscode\u5e76\u4e0d\u80fd\u5b8c\u7f8e\u4f7f\u7528plantuml,\u7406\u60f3\u4e2d\u7684\u65b9\u5f0f\u662f\u76f4\u63a5\u5728markdown\u7684\u9884\u89c8\u4e2d\u80fd\u591f\u770b\u5230plantuml\u7684\u6548\u679c\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u6211\u4eec\u53ea\u80fd\u521b\u5efa\u4e00\u4e2a\u5355\u72ecplantuml\u6587\u4ef6\u6765\u751f\u6210\u56fe\u7247 markdown\u89e3\u6790\u5668\u7684\u7248\u672c\u592a\u591a\u4e86\uff0c\u5bfc\u81f4\u5f88\u96be\u505a\u5230\u517c\u5bb9\uff0c\u6211\u5e0c\u671b\u80fd\u591f\u5728vscode\u4e2d\u548cgithub\u4e2d\u770b\u5230\u540c\u6837\u7684\u6548\u679c\uff0c\u6240\u4ee5\uff0c\u5bf9\u4e8e\u6d41\u7a0b\u56fe\uff0c\u4f7f\u7528\u5d4c\u5165\u56fe\u7247\u5e94\u8be5\u662f\u6700\u597d\u7684\u9009\u62e9\uff1b\u5f53\u7136\u8fd8\u6709\u516c\u5f0f\u7684\u663e\u793a\u4e5f\u662f\u8ba9\u4eba\u5934\u75bc\uff0c\u4e0d\u77e5\u9053\u5176\u4ed6\u4eba\u6709\u6ca1\u6709\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5176\u5b9e\u76ee\u7684\u5c31\u662f\u65e0\u8bba\u5728\u4ec0\u4e48\u5730\u65b9\u90fd\u80fd\u6bd4\u8f83\u8f7b\u677e\u7684\u770b\u5230markdown\u6548\u679c\uff0c\u800c\u4e14\u5728\u672c\u673a\u7684\u79bb\u7ebf\u72b6\u6001\u4e0b\u4e5f\u80fd\u591f\u770b\u5230markdown\u6548\u679c\u3002\u6216\u8bb8\u4e4b\u524d\u4f7f\u7528\u8fc7\u7684github.io\u4f1a\u662f\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\uff1f\uff1f\uff1f \u4f7f\u7528\u65b9\u6cd5\u53c2\u8003 \u4f7f\u7528Emacs\u6572\u51faUML\uff0cPlantUML\u5feb\u901f\u6307\u5357 \u5176\u4e2d class-diagram \u8bed\u6cd5\u683c\u5f0f\u53ef\u4ee5\u53c2\u8003 PlantUML Class Diagram \u7c7b\u56fe","title":"plantuml"},{"location":"tools/ntfs-mount.html","text":"\u79fb\u52a8\u786c\u76d8 Ubuntu\u6302\u8f7d\u95ee\u9898 \u00b6 \u624b\u91cc\u7684\u79fb\u52a8\u786c\u76d8\u5728ubuntu\u4e0b\u610f\u5916\u7684copy\u6587\u4ef6\u65f6\u62d4\u51fa\uff0c\u518d\u63d2\u5165\u540e\u65e0\u6cd5\u81ea\u52a8\u6302\u8f7d\uff0c\u5207\u6362\u5230win10\u7cfb\u7edf\u53ef\u4ee5\u6b63\u5e38\u6302\u8f7d\u3002\u4ee5\u4e0b\u662f\u89e3\u51b3\u8fc7\u7a0b \u624b\u52a8\u6302\u8f7d \u00b6 chsgcxy@chsgcxy-TM1703:/$ sudo fdisk -l Disk /dev/sdb: 1 .8 TiB, 2000398933504 bytes, 3907029167 sectors Units: sectors of 1 * 512 = 512 bytes Sector size ( logical/physical ) : 512 bytes / 4096 bytes I/O size ( minimum/optimal ) : 4096 bytes / 4096 bytes Disklabel type: dos Disk identifier: 0x60a353fe Device Boot Start End Sectors Size Id Type /dev/sdb1 * 64 3907024128 3907024065 1 .8T 7 HPFS/NTFS/exFAT \u67e5\u770b\u5230\u79fb\u52a8\u786c\u76d8\u7684\u8bbe\u5907\u8282\u70b9\uff08\u7a81\u7136\u60f3\u8d77\u505a\u8bbe\u5907\u9a71\u52a8\u7684\u65f6\u5019\u7ecf\u5e38\u9700\u8981\u641eflash\u6302\u8f7d\uff09 \u6839\u636e\u8282\u70b9\u5c1d\u8bd5\u6302\u8f7d\uff0c\u5176\u5b9e\u4e3b\u8981\u60f3\u770b\u4e00\u4e0b\u6302\u8f7d\u8fc7\u7a0b\u4e2d\u662f\u5426\u6709\u5f02\u5e38\u6253\u5370\uff0c\u7136\u540e\u662f\u5426\u80fd\u6839\u636e\u5f02\u5e38\u6253\u5370\u6765\u5b9a\u4f4d\u539f\u56e0\u3002 chsgcxy@chsgcxy-TM1703:/$ cd media/ chsgcxy@chsgcxy-TM1703:/media$ sudo mkdir xijie chsgcxy@chsgcxy-TM1703:/media$ sudo chmod 755 xijie/ chsgcxy@chsgcxy-TM1703:/media$ sudo mount -o rw /dev/sdb1 xijie/ $MFTMirr does not match $MFT ( record 0 ) . Failed to mount '/dev/sdb1' : Input/output error NTFS is either inconsistent, or there is a hardware fault, or it 's a SoftRAID/FakeRAID hardware. In the first case run chkdsk /f on Windows then reboot into Windows twice. The usage of the /f parameter is very important! If the device is a SoftRAID/FakeRAID then first activate it and mount a different device under the /dev/mapper/ directory, (e.g. /dev/mapper/nvidia_eahaabcc1). Please see the ' dmraid ' documentation for more details. \u89e3\u51b3 \u00b6 chsgcxy@chsgcxy-TM1703:/media$ sudo apt-get install ntfs-3g chsgcxy@chsgcxy-TM1703:/media$ sudo ntfsfix /dev/sdb1 Mounting volume... $MFTMirr does not match $MFT ( record 0 ) . FAILED Attempting to correct errors... Processing $MFT and $MFTMirr ... Reading $MFT ... OK Reading $MFTMirr ... OK Comparing $MFTMirr to $MFT ... FAILED Correcting differences in $MFTMirr record 0 ...OK Processing of $MFT and $MFTMirr completed successfully. Setting required flags on partition... OK Going to empty the journal ( $LogFile ) ... OK Checking the alternate boot sector... OK NTFS volume version is 3 .1. NTFS partition /dev/sdb1 was processed successfully. \u91cd\u65b0\u63d2\u62d4\u79fb\u52a8\u786c\u76d8\uff0c\u81ea\u52a8\u6302\u8f7d\u6210\u529f\u3002","title":"\u79fb\u52a8\u786c\u76d8 Ubuntu\u6302\u8f7d\u95ee\u9898"},{"location":"tools/ntfs-mount.html#ubuntu","text":"\u624b\u91cc\u7684\u79fb\u52a8\u786c\u76d8\u5728ubuntu\u4e0b\u610f\u5916\u7684copy\u6587\u4ef6\u65f6\u62d4\u51fa\uff0c\u518d\u63d2\u5165\u540e\u65e0\u6cd5\u81ea\u52a8\u6302\u8f7d\uff0c\u5207\u6362\u5230win10\u7cfb\u7edf\u53ef\u4ee5\u6b63\u5e38\u6302\u8f7d\u3002\u4ee5\u4e0b\u662f\u89e3\u51b3\u8fc7\u7a0b","title":"\u79fb\u52a8\u786c\u76d8 Ubuntu\u6302\u8f7d\u95ee\u9898"},{"location":"tools/ntfs-mount.html#_1","text":"chsgcxy@chsgcxy-TM1703:/$ sudo fdisk -l Disk /dev/sdb: 1 .8 TiB, 2000398933504 bytes, 3907029167 sectors Units: sectors of 1 * 512 = 512 bytes Sector size ( logical/physical ) : 512 bytes / 4096 bytes I/O size ( minimum/optimal ) : 4096 bytes / 4096 bytes Disklabel type: dos Disk identifier: 0x60a353fe Device Boot Start End Sectors Size Id Type /dev/sdb1 * 64 3907024128 3907024065 1 .8T 7 HPFS/NTFS/exFAT \u67e5\u770b\u5230\u79fb\u52a8\u786c\u76d8\u7684\u8bbe\u5907\u8282\u70b9\uff08\u7a81\u7136\u60f3\u8d77\u505a\u8bbe\u5907\u9a71\u52a8\u7684\u65f6\u5019\u7ecf\u5e38\u9700\u8981\u641eflash\u6302\u8f7d\uff09 \u6839\u636e\u8282\u70b9\u5c1d\u8bd5\u6302\u8f7d\uff0c\u5176\u5b9e\u4e3b\u8981\u60f3\u770b\u4e00\u4e0b\u6302\u8f7d\u8fc7\u7a0b\u4e2d\u662f\u5426\u6709\u5f02\u5e38\u6253\u5370\uff0c\u7136\u540e\u662f\u5426\u80fd\u6839\u636e\u5f02\u5e38\u6253\u5370\u6765\u5b9a\u4f4d\u539f\u56e0\u3002 chsgcxy@chsgcxy-TM1703:/$ cd media/ chsgcxy@chsgcxy-TM1703:/media$ sudo mkdir xijie chsgcxy@chsgcxy-TM1703:/media$ sudo chmod 755 xijie/ chsgcxy@chsgcxy-TM1703:/media$ sudo mount -o rw /dev/sdb1 xijie/ $MFTMirr does not match $MFT ( record 0 ) . Failed to mount '/dev/sdb1' : Input/output error NTFS is either inconsistent, or there is a hardware fault, or it 's a SoftRAID/FakeRAID hardware. In the first case run chkdsk /f on Windows then reboot into Windows twice. The usage of the /f parameter is very important! If the device is a SoftRAID/FakeRAID then first activate it and mount a different device under the /dev/mapper/ directory, (e.g. /dev/mapper/nvidia_eahaabcc1). Please see the ' dmraid ' documentation for more details.","title":"\u624b\u52a8\u6302\u8f7d"},{"location":"tools/ntfs-mount.html#_2","text":"chsgcxy@chsgcxy-TM1703:/media$ sudo apt-get install ntfs-3g chsgcxy@chsgcxy-TM1703:/media$ sudo ntfsfix /dev/sdb1 Mounting volume... $MFTMirr does not match $MFT ( record 0 ) . FAILED Attempting to correct errors... Processing $MFT and $MFTMirr ... Reading $MFT ... OK Reading $MFTMirr ... OK Comparing $MFTMirr to $MFT ... FAILED Correcting differences in $MFTMirr record 0 ...OK Processing of $MFT and $MFTMirr completed successfully. Setting required flags on partition... OK Going to empty the journal ( $LogFile ) ... OK Checking the alternate boot sector... OK NTFS volume version is 3 .1. NTFS partition /dev/sdb1 was processed successfully. \u91cd\u65b0\u63d2\u62d4\u79fb\u52a8\u786c\u76d8\uff0c\u81ea\u52a8\u6302\u8f7d\u6210\u529f\u3002","title":"\u89e3\u51b3"},{"location":"tools/perf.html","text":"linux\u6027\u80fd\u7edf\u8ba1\u5de5\u5177\u4f7f\u7528\u603b\u7ed3 \u00b6 \u6700\u8fd1\u5728\u4f18\u5316gem5\u7684\u8fd0\u884c\u901f\u5ea6\uff0c\u7528\u5230\u4e86linux\u7684perf\u5de5\u5177\uff0c\u5e76\u4e14\u751f\u6210\u4e86\u706b\u7130\u56fe\u3002 \u7279\u6b64\u8bb0\u5f55\u4e00\u4e2a\u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u95ee\u9898\uff0c\u65b9\u4fbf\u540e\u7eed\u518d\u9047\u5230\u7c7b\u4f3c\u95ee\u9898\u7684\u89e3\u51b3\u3002 \u6b65\u9aa4 \u00b6 perf\u5b89\u88c5 \u00b6 linux-perf\u6587\u6863 \u4e0a\u9762\u94fe\u63a5\u5305\u542b\u4e86perf\u6240\u6709\u7684\u4ecb\u7ecd\uff0c\u5305\u62ecperf\u7684\u5b89\u88c5\u65b9\u6cd5\uff0c\u8fd9\u91cc\u4f7f\u7528\u6e90\u7801\u5b89\u88c5\u7684\u65b9\u5f0f\u8fdb\u884c\u5b89\u88c5,\u5728building\u7ae0\u8282\u4e2d\u6709\u6e90\u7801\u5b89\u88c5\u7684\u65b9\u5f0f\uff0c \u601d\u8def\u662f\u901a\u8fc7apt\u6765\u4e0b\u8f7d\u5bf9\u5e94\u7cfb\u7edf\u7684\u5185\u6838\u6e90\u7801\uff0c\u5728\u5185\u6838\u6e90\u7801\u7684tools/perf\u76ee\u5f55\u4e0b\u4fdd\u5b58\u4e86perf\u7684\u6e90\u7801\uff0cmake\u5e76\u4e14make install\u5373\u53ef\uff0c\u9700\u8981 \u6ce8\u610f\u7684\u662f\u4e00\u822c\u6e90\u7801\u4f1a\u5b89\u88c5\u5728/usr/src/\u76ee\u5f55\u4e0b\uff0c\u6240\u4ee5\u9700\u8981sudo\u6743\u9650 perf\u751f\u6210record \u00b6 \u4f7f\u7528 perf record\u547d\u4ee4\u6765\u8bb0\u5f55\u4e0b\u7a0b\u5e8f\u7684\u8fd0\u884clog\uff0c\u8fd9\u91cc\u53c2\u8003\u4e86\u5916\u56fd\u53cb\u4eba\u7684\u7b14\u8bb0 \u5916\u56fd\u53cb\u4eba\u7684\u7b14\u8bb0 \u6838\u5fc3\u547d\u4ee4\u4e3a perf record --call-graph dwarf,16384 -e cpu-clock -F 997 target/release/name-of-binary <command-line-arguments> \u5f53\u7136\u6211\u5728\u4f7f\u7528\u7684\u65f6\u5019\u53d1\u73b0perf record -g target/release/name-of-binary \u662f\u53ef\u7528\u7684\uff0c\u5176\u4ed6\u53c2\u6570\u8fd8\u9700\u8981\u9010\u4e2a\u786e\u8ba4 \u6743\u9650\u95ee\u9898 \u00b6 \u56e0\u4e3a\u6211\u7f16\u8bd1\u7684\u65f6\u5019\u4f7f\u7528\u4e86sudo\u6743\u9650\uff0c\u4e5f\u6ca1\u6709\u628aperf\u6743\u9650\u5f00\u653e\u7ed9\u666e\u901a\u7528\u6237\uff0c\u6240\u4ee5\u8fd9\u91cc\u6267\u884c\u7684\u65f6\u5019\u4e5f\u8981sudo\u3002\u76f4\u63a5\u901a\u8fc7apt-get\u5b89\u88c5\u7684perf\u4e0d\u9700\u8981\u52a0sudo \u8def\u5f84\u95ee\u9898 \u00b6 target/release/name-of-binary \u9700\u8981\u5199\u7edd\u5bf9\u8def\u5f84\u6216\u8005\u52a0./\u6765\u89e3\u51b3 perf_event_paranoid\u95ee\u9898 \u00b6 \u5982\u679c\u63d0\u793a\u9700\u8981\u4fee\u6539perf_event_paranoid\uff0c\u53ef\u4ee5\u901a\u8fc7\u63d0\u793a\u7684\u65b9\u5f0f\u8fdb\u884c\u6c38\u4e45\u6027\u4fee\u6539\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u67e5\u770b\u548c\u4fee\u6539 sysctl -n kernel.perf_event_paranoid sudo sysctl -w kernel.perf_event_paranoid = -1 \u89e3\u6790\u6210\u706b\u7130\u56fe \u00b6 \u9996\u5148\u8981\u5b89\u88c5 flamegraph git clone https://github.com/brendangregg/FlameGraph \u9700\u8981\u628aFlameGraph\u4e2d\u7684\u6240\u6709pl\u6587\u4ef6\u52a0\u5165\u5230\u73af\u5883PATH\u4e2d\uff0c\u53ef\u4ee5\u628a\u8fd9\u4e2a\u52a0\u5165\u5230\u7528\u6237\u76ee\u5f55\u7684profile\u4e2d cd FlameGraph echo \"PATH=/path/to/FlameGraph: $PATH \" >> .profile source .profile \u8001\u7248\u672c\u8fd8\u9700\u8981\u52a0\u5165\u4e00\u4e2a\u8f6c\u6362\u5de5\u5177 \u8f6c\u6362\u5de5\u5177 git clone https://github.com/Yamakaky/rust-unmangle.git cd rust-unmangle chmod u+x rust-unmangle echo \"PATH=/path/to/rust-unmangle: $PATH \" >> .profile source .profile \u751f\u6210\u706b\u7130\u56fe perf script | stackcollapse-perf.pl | stackcollapse-recursive.pl | c++filt | rust-unmangle | flamegraph.pl > flame.svg \u5982\u679c\u9047\u5230ERROR\uff1a No stack counts found\u7684\u9519\u8bef \u4fee\u6539\u5f53\u524d\u76ee\u5f55\u4e0b\u751f\u6210\u7684perf.data\u7684\u6743\u9650 sudo chown -R root:root perf.data sudo perf script | stackcollapse-perf.pl | stackcollapse-recursive.pl | c++filt | rust-unmangle | flamegraph.pl > flame.svg \u8fd9\u6837\u5c31\u53ef\u4ee5\u6839\u636e\u706b\u7130\u56fe\u6765\u5206\u6790\u7a0b\u5e8f\u54ea\u91cc\u6bd4\u8f83\u8017\u65f6\u4e86 \u9047\u5230\u7684\u5176\u4ed6\u95ee\u9898 \u00b6 \u5185\u6838\u7b26\u53f7unknow \u00b6 \u5b9e\u9645\u4e0a\u6211\u4eec\u5728\u5206\u6790CPU\u5360\u7528\u578b\u8f6f\u4ef6\u6027\u80fd\u65f6\uff0c\u4e00\u822c\u4e5f\u4e0d\u9700\u8981\u5185\u6838\u7b26\u53f7\uff0c\u4f46\u5982\u679c\u60f3\u8981\u770b\u5230\uff0c\u90a3\u4e48\u9700\u8981\u4fee\u6539kptr_restrict app\u7684\u51fd\u6570\u884c\u4e3a\u65e0\u6cd5\u8bb0\u5f55 \u00b6 \u73b0\u8c61\u4e3a\u6700\u7ec8\u751f\u6210\u7684\u706b\u7130\u56fe\u53ea\u6709\u7a0b\u5e8f\u540d\uff0c\u6ca1\u6709\u7a0b\u5e8f\u4e2d\u7684\u51fd\u6570\u540d\u3002\u901a\u8fc7\u719f\u6089perf record\u7684\u547d\u4ee4\u53c2\u6570\uff0c\u53d1\u73b0-b\u80fd\u591f\u89e3\u51b3\u6b64\u95ee\u9898 \u7b26\u53f7\u88ab\u4fee\u6539 \u00b6 \u73b0\u8c61\u4e3a\u6700\u7ec8\u751f\u6210\u7684\u706b\u7130\u56fe\u7b26\u53f7\u88ab\u4fee\u6539\uff0c\u901a\u8fc7readelf\u67e5\u770b\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u53d1\u73b0\u7b26\u53f7\u672c\u8eab\u5c31\u662f\u88ab\u4fee\u6539\u7684\uff0c\u88ab\u56f0\u6270\u4e86\u534a\u5929\u4e4b\u540e\u624d\u660e\u767d\uff0c\u8fd9\u662fc++\u7684name mangling\u673a\u5236\uff0c\u7528\u6765\u89e3\u51b3\u91cd\u8f7d\u95ee\u9898\u3002 \u5b9e\u9645\u4e0a\u5982\u679c\u5bf9C++\u7406\u89e3\u6bd4\u8f83\u591a\u7684\u4eba\u5e94\u8be5\u90fd\u77e5\u9053\u8fd9\u4e2a\uff0c\u6211\u534a\u8def\u51fa\u5bb6\u8fd8\u771f\u662f\u5934\u4e00\u6b21\u77e5\u9053\u3002\u4e8e\u662f\u53d1\u73b0c++filt\u53ef\u4ee5\u6709\u6548demangling\u8fd9\u4e9b\u7b26\u53f7\uff0c\u5728perf script\u4e2d\u52a0\u5165c++filt\u5373\u53ef\u3002 \u603b\u7ed3 \u00b6 \u8fd9\u7bc7\u8bb0\u5f55\u91cc\u5927\u591a\u6570\u7684\u64cd\u4f5c\u90fd\u662f\u7f51\u4e0a\u67e5\u5230\u7684\uff0c\u6211\u53ea\u662f\u8bb0\u5f55\u4e86\u4e00\u4e0b\u800c\u5df2\u3002\u800c\u4e14perf\u8fd9\u4e2a\u5206\u6790\u65b9\u6cd5\u4e5f\u662f\u540c\u4e8b\u544a\u8bc9\u6211\u7684\uff0c \u5176\u5b9e\u6211\u53ea\u662f\u4e00\u4e2a\u5b9e\u65bd\u8005\uff0c\u4f46\u4ece\u4e2d\u5e94\u8be5\u5b66\u5230\u7684\u662f\u5982\u4f55\u5feb\u901f\u7684\u638c\u63e1\u4e00\u4e2a\u5de5\u5177\u4f7f\u7528\u65b9\u6cd5\u7684\u80fd\u529b\u3002\u5e94\u8be5\u63d0\u9ad8\u7684\u662f\u67e5\u8d44\u6599\u7684\u80fd\u529b\u3002 perf \u7edf\u8ba1cache miss\u60c5\u51b5 \u00b6 perf stat -e L1-dcache-load-misses -e L1-dcache-loads -e LLC-load-misses -e LLC-loads -e LLC-store-misses -e LLC-stores -e dTLB-load-misses -e dTLB-loads -e dTLB-store-misses -e dTLB-stores ./randomstream \u7edf\u8ba1\u7ed3\u679c Performance counter stats for './randomstream': 14,489,916,426 L1-dcache-load-misses # 16.83% of all L1-dcache hits (39.98%) 86,081,655,549 L1-dcache-loads (39.99%) 2,633,551,306 LLC-load-misses # 40.63% of all LL-cache hits (40.01%) 6,482,329,778 LLC-loads (40.02%) 1,730,604,712 LLC-store-misses (20.00%) 3,079,201,774 LLC-stores (20.00%) 244,280,338 dTLB-load-misses # 0.28% of all dTLB cache hits (30.00%) 86,066,948,345 dTLB-loads (40.00%) 1,414,326,484 dTLB-store-misses (39.99%) 45,374,302,611 dTLB-stores (39.98%) 19.019721004 seconds time elapsed 282.336445000 seconds user 818.115020000 seconds sys","title":"linux\u6027\u80fd\u7edf\u8ba1\u5de5\u5177\u4f7f\u7528\u603b\u7ed3"},{"location":"tools/perf.html#linux","text":"\u6700\u8fd1\u5728\u4f18\u5316gem5\u7684\u8fd0\u884c\u901f\u5ea6\uff0c\u7528\u5230\u4e86linux\u7684perf\u5de5\u5177\uff0c\u5e76\u4e14\u751f\u6210\u4e86\u706b\u7130\u56fe\u3002 \u7279\u6b64\u8bb0\u5f55\u4e00\u4e2a\u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u95ee\u9898\uff0c\u65b9\u4fbf\u540e\u7eed\u518d\u9047\u5230\u7c7b\u4f3c\u95ee\u9898\u7684\u89e3\u51b3\u3002","title":"linux\u6027\u80fd\u7edf\u8ba1\u5de5\u5177\u4f7f\u7528\u603b\u7ed3"},{"location":"tools/perf.html#_1","text":"","title":"\u6b65\u9aa4"},{"location":"tools/perf.html#perf","text":"linux-perf\u6587\u6863 \u4e0a\u9762\u94fe\u63a5\u5305\u542b\u4e86perf\u6240\u6709\u7684\u4ecb\u7ecd\uff0c\u5305\u62ecperf\u7684\u5b89\u88c5\u65b9\u6cd5\uff0c\u8fd9\u91cc\u4f7f\u7528\u6e90\u7801\u5b89\u88c5\u7684\u65b9\u5f0f\u8fdb\u884c\u5b89\u88c5,\u5728building\u7ae0\u8282\u4e2d\u6709\u6e90\u7801\u5b89\u88c5\u7684\u65b9\u5f0f\uff0c \u601d\u8def\u662f\u901a\u8fc7apt\u6765\u4e0b\u8f7d\u5bf9\u5e94\u7cfb\u7edf\u7684\u5185\u6838\u6e90\u7801\uff0c\u5728\u5185\u6838\u6e90\u7801\u7684tools/perf\u76ee\u5f55\u4e0b\u4fdd\u5b58\u4e86perf\u7684\u6e90\u7801\uff0cmake\u5e76\u4e14make install\u5373\u53ef\uff0c\u9700\u8981 \u6ce8\u610f\u7684\u662f\u4e00\u822c\u6e90\u7801\u4f1a\u5b89\u88c5\u5728/usr/src/\u76ee\u5f55\u4e0b\uff0c\u6240\u4ee5\u9700\u8981sudo\u6743\u9650","title":"perf\u5b89\u88c5"},{"location":"tools/perf.html#perfrecord","text":"\u4f7f\u7528 perf record\u547d\u4ee4\u6765\u8bb0\u5f55\u4e0b\u7a0b\u5e8f\u7684\u8fd0\u884clog\uff0c\u8fd9\u91cc\u53c2\u8003\u4e86\u5916\u56fd\u53cb\u4eba\u7684\u7b14\u8bb0 \u5916\u56fd\u53cb\u4eba\u7684\u7b14\u8bb0 \u6838\u5fc3\u547d\u4ee4\u4e3a perf record --call-graph dwarf,16384 -e cpu-clock -F 997 target/release/name-of-binary <command-line-arguments> \u5f53\u7136\u6211\u5728\u4f7f\u7528\u7684\u65f6\u5019\u53d1\u73b0perf record -g target/release/name-of-binary \u662f\u53ef\u7528\u7684\uff0c\u5176\u4ed6\u53c2\u6570\u8fd8\u9700\u8981\u9010\u4e2a\u786e\u8ba4","title":"perf\u751f\u6210record"},{"location":"tools/perf.html#_2","text":"\u56e0\u4e3a\u6211\u7f16\u8bd1\u7684\u65f6\u5019\u4f7f\u7528\u4e86sudo\u6743\u9650\uff0c\u4e5f\u6ca1\u6709\u628aperf\u6743\u9650\u5f00\u653e\u7ed9\u666e\u901a\u7528\u6237\uff0c\u6240\u4ee5\u8fd9\u91cc\u6267\u884c\u7684\u65f6\u5019\u4e5f\u8981sudo\u3002\u76f4\u63a5\u901a\u8fc7apt-get\u5b89\u88c5\u7684perf\u4e0d\u9700\u8981\u52a0sudo","title":"\u6743\u9650\u95ee\u9898"},{"location":"tools/perf.html#_3","text":"target/release/name-of-binary \u9700\u8981\u5199\u7edd\u5bf9\u8def\u5f84\u6216\u8005\u52a0./\u6765\u89e3\u51b3","title":"\u8def\u5f84\u95ee\u9898"},{"location":"tools/perf.html#perf_event_paranoid","text":"\u5982\u679c\u63d0\u793a\u9700\u8981\u4fee\u6539perf_event_paranoid\uff0c\u53ef\u4ee5\u901a\u8fc7\u63d0\u793a\u7684\u65b9\u5f0f\u8fdb\u884c\u6c38\u4e45\u6027\u4fee\u6539\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u67e5\u770b\u548c\u4fee\u6539 sysctl -n kernel.perf_event_paranoid sudo sysctl -w kernel.perf_event_paranoid = -1","title":"perf_event_paranoid\u95ee\u9898"},{"location":"tools/perf.html#_4","text":"\u9996\u5148\u8981\u5b89\u88c5 flamegraph git clone https://github.com/brendangregg/FlameGraph \u9700\u8981\u628aFlameGraph\u4e2d\u7684\u6240\u6709pl\u6587\u4ef6\u52a0\u5165\u5230\u73af\u5883PATH\u4e2d\uff0c\u53ef\u4ee5\u628a\u8fd9\u4e2a\u52a0\u5165\u5230\u7528\u6237\u76ee\u5f55\u7684profile\u4e2d cd FlameGraph echo \"PATH=/path/to/FlameGraph: $PATH \" >> .profile source .profile \u8001\u7248\u672c\u8fd8\u9700\u8981\u52a0\u5165\u4e00\u4e2a\u8f6c\u6362\u5de5\u5177 \u8f6c\u6362\u5de5\u5177 git clone https://github.com/Yamakaky/rust-unmangle.git cd rust-unmangle chmod u+x rust-unmangle echo \"PATH=/path/to/rust-unmangle: $PATH \" >> .profile source .profile \u751f\u6210\u706b\u7130\u56fe perf script | stackcollapse-perf.pl | stackcollapse-recursive.pl | c++filt | rust-unmangle | flamegraph.pl > flame.svg \u5982\u679c\u9047\u5230ERROR\uff1a No stack counts found\u7684\u9519\u8bef \u4fee\u6539\u5f53\u524d\u76ee\u5f55\u4e0b\u751f\u6210\u7684perf.data\u7684\u6743\u9650 sudo chown -R root:root perf.data sudo perf script | stackcollapse-perf.pl | stackcollapse-recursive.pl | c++filt | rust-unmangle | flamegraph.pl > flame.svg \u8fd9\u6837\u5c31\u53ef\u4ee5\u6839\u636e\u706b\u7130\u56fe\u6765\u5206\u6790\u7a0b\u5e8f\u54ea\u91cc\u6bd4\u8f83\u8017\u65f6\u4e86","title":"\u89e3\u6790\u6210\u706b\u7130\u56fe"},{"location":"tools/perf.html#_5","text":"","title":"\u9047\u5230\u7684\u5176\u4ed6\u95ee\u9898"},{"location":"tools/perf.html#unknow","text":"\u5b9e\u9645\u4e0a\u6211\u4eec\u5728\u5206\u6790CPU\u5360\u7528\u578b\u8f6f\u4ef6\u6027\u80fd\u65f6\uff0c\u4e00\u822c\u4e5f\u4e0d\u9700\u8981\u5185\u6838\u7b26\u53f7\uff0c\u4f46\u5982\u679c\u60f3\u8981\u770b\u5230\uff0c\u90a3\u4e48\u9700\u8981\u4fee\u6539kptr_restrict","title":"\u5185\u6838\u7b26\u53f7unknow"},{"location":"tools/perf.html#app","text":"\u73b0\u8c61\u4e3a\u6700\u7ec8\u751f\u6210\u7684\u706b\u7130\u56fe\u53ea\u6709\u7a0b\u5e8f\u540d\uff0c\u6ca1\u6709\u7a0b\u5e8f\u4e2d\u7684\u51fd\u6570\u540d\u3002\u901a\u8fc7\u719f\u6089perf record\u7684\u547d\u4ee4\u53c2\u6570\uff0c\u53d1\u73b0-b\u80fd\u591f\u89e3\u51b3\u6b64\u95ee\u9898","title":"app\u7684\u51fd\u6570\u884c\u4e3a\u65e0\u6cd5\u8bb0\u5f55"},{"location":"tools/perf.html#_6","text":"\u73b0\u8c61\u4e3a\u6700\u7ec8\u751f\u6210\u7684\u706b\u7130\u56fe\u7b26\u53f7\u88ab\u4fee\u6539\uff0c\u901a\u8fc7readelf\u67e5\u770b\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u53d1\u73b0\u7b26\u53f7\u672c\u8eab\u5c31\u662f\u88ab\u4fee\u6539\u7684\uff0c\u88ab\u56f0\u6270\u4e86\u534a\u5929\u4e4b\u540e\u624d\u660e\u767d\uff0c\u8fd9\u662fc++\u7684name mangling\u673a\u5236\uff0c\u7528\u6765\u89e3\u51b3\u91cd\u8f7d\u95ee\u9898\u3002 \u5b9e\u9645\u4e0a\u5982\u679c\u5bf9C++\u7406\u89e3\u6bd4\u8f83\u591a\u7684\u4eba\u5e94\u8be5\u90fd\u77e5\u9053\u8fd9\u4e2a\uff0c\u6211\u534a\u8def\u51fa\u5bb6\u8fd8\u771f\u662f\u5934\u4e00\u6b21\u77e5\u9053\u3002\u4e8e\u662f\u53d1\u73b0c++filt\u53ef\u4ee5\u6709\u6548demangling\u8fd9\u4e9b\u7b26\u53f7\uff0c\u5728perf script\u4e2d\u52a0\u5165c++filt\u5373\u53ef\u3002","title":"\u7b26\u53f7\u88ab\u4fee\u6539"},{"location":"tools/perf.html#_7","text":"\u8fd9\u7bc7\u8bb0\u5f55\u91cc\u5927\u591a\u6570\u7684\u64cd\u4f5c\u90fd\u662f\u7f51\u4e0a\u67e5\u5230\u7684\uff0c\u6211\u53ea\u662f\u8bb0\u5f55\u4e86\u4e00\u4e0b\u800c\u5df2\u3002\u800c\u4e14perf\u8fd9\u4e2a\u5206\u6790\u65b9\u6cd5\u4e5f\u662f\u540c\u4e8b\u544a\u8bc9\u6211\u7684\uff0c \u5176\u5b9e\u6211\u53ea\u662f\u4e00\u4e2a\u5b9e\u65bd\u8005\uff0c\u4f46\u4ece\u4e2d\u5e94\u8be5\u5b66\u5230\u7684\u662f\u5982\u4f55\u5feb\u901f\u7684\u638c\u63e1\u4e00\u4e2a\u5de5\u5177\u4f7f\u7528\u65b9\u6cd5\u7684\u80fd\u529b\u3002\u5e94\u8be5\u63d0\u9ad8\u7684\u662f\u67e5\u8d44\u6599\u7684\u80fd\u529b\u3002","title":"\u603b\u7ed3"},{"location":"tools/perf.html#perf-cache-miss","text":"perf stat -e L1-dcache-load-misses -e L1-dcache-loads -e LLC-load-misses -e LLC-loads -e LLC-store-misses -e LLC-stores -e dTLB-load-misses -e dTLB-loads -e dTLB-store-misses -e dTLB-stores ./randomstream \u7edf\u8ba1\u7ed3\u679c Performance counter stats for './randomstream': 14,489,916,426 L1-dcache-load-misses # 16.83% of all L1-dcache hits (39.98%) 86,081,655,549 L1-dcache-loads (39.99%) 2,633,551,306 LLC-load-misses # 40.63% of all LL-cache hits (40.01%) 6,482,329,778 LLC-loads (40.02%) 1,730,604,712 LLC-store-misses (20.00%) 3,079,201,774 LLC-stores (20.00%) 244,280,338 dTLB-load-misses # 0.28% of all dTLB cache hits (30.00%) 86,066,948,345 dTLB-loads (40.00%) 1,414,326,484 dTLB-store-misses (39.99%) 45,374,302,611 dTLB-stores (39.98%) 19.019721004 seconds time elapsed 282.336445000 seconds user 818.115020000 seconds sys","title":"perf \u7edf\u8ba1cache miss\u60c5\u51b5"},{"location":"tools/protobuf.html","text":"protobuf \u00b6 protobuf \u7efc\u8ff0 \u8de8\u5e73\u53f0\u7279\u6027 \u4f7f\u7528\u793a\u4f8b \u4f7f\u7528gzip\u538b\u7f29\u6570\u636e \u7efc\u8ff0 \u00b6 When people who speak different languages get together and talk, they try to use a language that everyone in the group understands.To achieve this, everyone has to translate their thoughts, which are usually in their native language, into the language of the group. This \u201cencoding and decoding\u201d of language, however, leads to a loss of efficiency, speed, and precision. Protocol buffers are Google's language-neutral, platform-neutral, extensible mechanism for serializing structured data \u2013 think XML, but smaller, faster, and simpler. You define how you want your data to be structured once \u2026 https://github.com/protocolbuffers/protobuf.git protobuf\u6709\u5982\u4e0b\u7279\u70b9\uff1a \u8de8\u5e73\u53f0 \u6613\u6269\u5c55 \u6570\u636e\u4f53\u79ef\u5c0f \u8de8\u5e73\u53f0\u7279\u6027 \u00b6 \u5728\u6e90\u7801\u7684example\u76ee\u5f55\u4e0b\u6709\u4f7f\u7528\u793a\u4f8b\uff0c\u6211\u4eec\u4ece\u4e00\u4e9b\u535a\u5ba2\u4e0a\u770b\u5230\u7684address_book\u793a\u4f8b\u5c31\u662f\u51fa\u81ea\u8fd9\u91cc\u3002 protobuf\u5b9e\u73b0\u4e86\u8de8\u5e73\u53f0\uff0c\u6570\u636e\u683c\u5f0f\u901a\u8fc7\u5b9a\u4e49.proto\u6587\u4ef6\u5b9e\u73b0\uff0c\u5b9a\u4e49\u7684\u6587\u4ef6\u53ef\u4ee5\u901a\u8fc7protoc\u7f16\u8bd1\u5668\u8f6c\u6362\u6210\u5404\u4e2a\u5e73\u53f0\u7684\u4ee3\u7801\uff0c\u53ea\u9700\u8981\u6bd4\u8f83\u7b80\u5355\u7684\u5bf9\u751f\u6210\u7684\u4ee3\u7801\u8fdb\u884c\u5c01\u88c5\uff0c\u5c31\u80fd\u5b9e\u73b0\u60f3\u8981\u7684\u529f\u80fd\u3002 \u4f7f\u7528\u793a\u4f8b \u00b6 \u5728python\u63a5\u53e3\u5c42\u9762\uff0c\u4e3b\u8981\u901a\u8fc7SerializeToString\u548cParseFromString\u6765\u8fdb\u884c\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u3002\u9664\u6b64\u4e4b\u5916\u7684\u64cd\u4f5c\u90fd\u662f\u975e\u5e38\u7075\u6d3b\u7684\u3002 \u4f7f\u7528gzip\u538b\u7f29\u6570\u636e \u00b6 \u5982\u4e0b\u793a\u4f8b\u9700\u8981\u5728protobuf\u7684example\u76ee\u5f55\u4e0b\u4f7f\u7528 c++\u7248\u672c\u7684protobuf\u652f\u6301gzip_stream add_person.cc // See README.md for information and build instructions. #include <ctime> #include <fstream> #include <google/protobuf/util/time_util.h> #include <google/protobuf/io/coded_stream.h> #include <google/protobuf/io/gzip_stream.h> #include <google/protobuf/io/zero_copy_stream_impl.h> #include <iostream> #include <string> #include \"addressbook.pb.h\" using namespace std ; using google :: protobuf :: util :: TimeUtil ; using namespace google :: protobuf ; // This function fills in a Person message based on user input. void PromptForAddress ( tutorial :: Person * person ) { cout << \"Enter person ID number: \" ; int id ; cin >> id ; person -> set_id ( id ); cin . ignore ( 256 , '\\n' ); cout << \"Enter name: \" ; getline ( cin , * person -> mutable_name ()); cout << \"Enter email address (blank for none): \" ; string email ; getline ( cin , email ); if ( ! email . empty ()) { person -> set_email ( email ); } while ( true ) { cout << \"Enter a phone number (or leave blank to finish): \" ; string number ; getline ( cin , number ); if ( number . empty ()) { break ; } tutorial :: Person :: PhoneNumber * phone_number = person -> add_phones (); phone_number -> set_number ( number ); cout << \"Is this a mobile, home, or work phone? \" ; string type ; getline ( cin , type ); if ( type == \"mobile\" ) { phone_number -> set_type ( tutorial :: Person :: MOBILE ); } else if ( type == \"home\" ) { phone_number -> set_type ( tutorial :: Person :: HOME ); } else if ( type == \"work\" ) { phone_number -> set_type ( tutorial :: Person :: WORK ); } else { cout << \"Unknown phone type. Using default.\" << endl ; } } * person -> mutable_last_updated () = TimeUtil :: SecondsToTimestamp ( time ( NULL )); } // Main function: Reads the entire address book from a file, // adds one person based on user input, then writes it back out to the same // file. int main ( int argc , char * argv []) { // Verify that the version of the library that we linked against is // compatible with the version of the headers we compiled against. GOOGLE_PROTOBUF_VERIFY_VERSION ; if ( argc != 2 ) { cerr << \"Usage: \" << argv [ 0 ] << \" ADDRESS_BOOK_FILE\" << endl ; return -1 ; } tutorial :: AddressBook address_book ; { io :: IstreamInputStream * wrappedFileStream ; io :: GzipInputStream * gzipStream ; // Read the existing address book. std :: ifstream fileStream ( argv [ 1 ], std :: ios :: in | std :: ios :: binary ); if ( ! fileStream ) cout << argv [ 1 ] << \": File not found. Creating a new file.\" << endl ; else { wrappedFileStream = new io :: IstreamInputStream ( & fileStream ); gzipStream = new io :: GzipInputStream ( wrappedFileStream ); io :: CodedInputStream codedStream ( gzipStream ); address_book . ParseFromCodedStream ( & codedStream ); } delete gzipStream ; delete wrappedFileStream ; fileStream . close (); } // Add an address. PromptForAddress ( address_book . add_people ()); { io :: OstreamOutputStream * wrappedFileStream ; io :: GzipOutputStream * gzipStream ; std :: ofstream fileStream ( argv [ 1 ], std :: ios :: out | std :: ios :: binary | std :: ios :: trunc ); wrappedFileStream = new io :: OstreamOutputStream ( & fileStream ); gzipStream = new io :: GzipOutputStream ( wrappedFileStream ); { io :: CodedOutputStream codedStream ( gzipStream ); address_book . SerializeToCodedStream ( & codedStream ); } delete gzipStream ; delete wrappedFileStream ; fileStream . close (); } // Optional: Delete all global objects allocated by libprotobuf. google :: protobuf :: ShutdownProtobufLibrary (); return 0 ; } \u5728pyhon\u4e2d\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528gzip\u6a21\u5757\u8fdb\u884c\u89e3\u538b\u7f29 list_person.py #! /usr/bin/env python # See README.md for information and build instructions. from __future__ import print_function import addressbook_pb2 import sys import gzip # Iterates though all people in the AddressBook and prints info about them. def ListPeople ( address_book ): for person in address_book . people : print ( \"Person ID:\" , person . id ) print ( \" Name:\" , person . name ) if person . email != \"\" : print ( \" E-mail address:\" , person . email ) for phone_number in person . phones : if phone_number . type == addressbook_pb2 . Person . MOBILE : print ( \" Mobile phone #:\" , end = \" \" ) elif phone_number . type == addressbook_pb2 . Person . HOME : print ( \" Home phone #:\" , end = \" \" ) elif phone_number . type == addressbook_pb2 . Person . WORK : print ( \" Work phone #:\" , end = \" \" ) print ( phone_number . number ) # Main procedure: Reads the entire address book from a file and prints all # the information inside. if len ( sys . argv ) != 2 : print ( \"Usage:\" , sys . argv [ 0 ], \"ADDRESS_BOOK_FILE\" ) sys . exit ( - 1 ) address_book = addressbook_pb2 . AddressBook () # Read the existing address book. with gzip . open ( sys . argv [ 1 ], \"rb\" ) as f : address_book . ParseFromString ( f . read ()) ListPeople ( address_book )","title":"protobuf"},{"location":"tools/protobuf.html#protobuf","text":"protobuf \u7efc\u8ff0 \u8de8\u5e73\u53f0\u7279\u6027 \u4f7f\u7528\u793a\u4f8b \u4f7f\u7528gzip\u538b\u7f29\u6570\u636e","title":"protobuf"},{"location":"tools/protobuf.html#_1","text":"When people who speak different languages get together and talk, they try to use a language that everyone in the group understands.To achieve this, everyone has to translate their thoughts, which are usually in their native language, into the language of the group. This \u201cencoding and decoding\u201d of language, however, leads to a loss of efficiency, speed, and precision. Protocol buffers are Google's language-neutral, platform-neutral, extensible mechanism for serializing structured data \u2013 think XML, but smaller, faster, and simpler. You define how you want your data to be structured once \u2026 https://github.com/protocolbuffers/protobuf.git protobuf\u6709\u5982\u4e0b\u7279\u70b9\uff1a \u8de8\u5e73\u53f0 \u6613\u6269\u5c55 \u6570\u636e\u4f53\u79ef\u5c0f","title":"\u7efc\u8ff0"},{"location":"tools/protobuf.html#_2","text":"\u5728\u6e90\u7801\u7684example\u76ee\u5f55\u4e0b\u6709\u4f7f\u7528\u793a\u4f8b\uff0c\u6211\u4eec\u4ece\u4e00\u4e9b\u535a\u5ba2\u4e0a\u770b\u5230\u7684address_book\u793a\u4f8b\u5c31\u662f\u51fa\u81ea\u8fd9\u91cc\u3002 protobuf\u5b9e\u73b0\u4e86\u8de8\u5e73\u53f0\uff0c\u6570\u636e\u683c\u5f0f\u901a\u8fc7\u5b9a\u4e49.proto\u6587\u4ef6\u5b9e\u73b0\uff0c\u5b9a\u4e49\u7684\u6587\u4ef6\u53ef\u4ee5\u901a\u8fc7protoc\u7f16\u8bd1\u5668\u8f6c\u6362\u6210\u5404\u4e2a\u5e73\u53f0\u7684\u4ee3\u7801\uff0c\u53ea\u9700\u8981\u6bd4\u8f83\u7b80\u5355\u7684\u5bf9\u751f\u6210\u7684\u4ee3\u7801\u8fdb\u884c\u5c01\u88c5\uff0c\u5c31\u80fd\u5b9e\u73b0\u60f3\u8981\u7684\u529f\u80fd\u3002","title":"\u8de8\u5e73\u53f0\u7279\u6027"},{"location":"tools/protobuf.html#_3","text":"\u5728python\u63a5\u53e3\u5c42\u9762\uff0c\u4e3b\u8981\u901a\u8fc7SerializeToString\u548cParseFromString\u6765\u8fdb\u884c\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u3002\u9664\u6b64\u4e4b\u5916\u7684\u64cd\u4f5c\u90fd\u662f\u975e\u5e38\u7075\u6d3b\u7684\u3002","title":"\u4f7f\u7528\u793a\u4f8b"},{"location":"tools/protobuf.html#gzip","text":"\u5982\u4e0b\u793a\u4f8b\u9700\u8981\u5728protobuf\u7684example\u76ee\u5f55\u4e0b\u4f7f\u7528 c++\u7248\u672c\u7684protobuf\u652f\u6301gzip_stream add_person.cc // See README.md for information and build instructions. #include <ctime> #include <fstream> #include <google/protobuf/util/time_util.h> #include <google/protobuf/io/coded_stream.h> #include <google/protobuf/io/gzip_stream.h> #include <google/protobuf/io/zero_copy_stream_impl.h> #include <iostream> #include <string> #include \"addressbook.pb.h\" using namespace std ; using google :: protobuf :: util :: TimeUtil ; using namespace google :: protobuf ; // This function fills in a Person message based on user input. void PromptForAddress ( tutorial :: Person * person ) { cout << \"Enter person ID number: \" ; int id ; cin >> id ; person -> set_id ( id ); cin . ignore ( 256 , '\\n' ); cout << \"Enter name: \" ; getline ( cin , * person -> mutable_name ()); cout << \"Enter email address (blank for none): \" ; string email ; getline ( cin , email ); if ( ! email . empty ()) { person -> set_email ( email ); } while ( true ) { cout << \"Enter a phone number (or leave blank to finish): \" ; string number ; getline ( cin , number ); if ( number . empty ()) { break ; } tutorial :: Person :: PhoneNumber * phone_number = person -> add_phones (); phone_number -> set_number ( number ); cout << \"Is this a mobile, home, or work phone? \" ; string type ; getline ( cin , type ); if ( type == \"mobile\" ) { phone_number -> set_type ( tutorial :: Person :: MOBILE ); } else if ( type == \"home\" ) { phone_number -> set_type ( tutorial :: Person :: HOME ); } else if ( type == \"work\" ) { phone_number -> set_type ( tutorial :: Person :: WORK ); } else { cout << \"Unknown phone type. Using default.\" << endl ; } } * person -> mutable_last_updated () = TimeUtil :: SecondsToTimestamp ( time ( NULL )); } // Main function: Reads the entire address book from a file, // adds one person based on user input, then writes it back out to the same // file. int main ( int argc , char * argv []) { // Verify that the version of the library that we linked against is // compatible with the version of the headers we compiled against. GOOGLE_PROTOBUF_VERIFY_VERSION ; if ( argc != 2 ) { cerr << \"Usage: \" << argv [ 0 ] << \" ADDRESS_BOOK_FILE\" << endl ; return -1 ; } tutorial :: AddressBook address_book ; { io :: IstreamInputStream * wrappedFileStream ; io :: GzipInputStream * gzipStream ; // Read the existing address book. std :: ifstream fileStream ( argv [ 1 ], std :: ios :: in | std :: ios :: binary ); if ( ! fileStream ) cout << argv [ 1 ] << \": File not found. Creating a new file.\" << endl ; else { wrappedFileStream = new io :: IstreamInputStream ( & fileStream ); gzipStream = new io :: GzipInputStream ( wrappedFileStream ); io :: CodedInputStream codedStream ( gzipStream ); address_book . ParseFromCodedStream ( & codedStream ); } delete gzipStream ; delete wrappedFileStream ; fileStream . close (); } // Add an address. PromptForAddress ( address_book . add_people ()); { io :: OstreamOutputStream * wrappedFileStream ; io :: GzipOutputStream * gzipStream ; std :: ofstream fileStream ( argv [ 1 ], std :: ios :: out | std :: ios :: binary | std :: ios :: trunc ); wrappedFileStream = new io :: OstreamOutputStream ( & fileStream ); gzipStream = new io :: GzipOutputStream ( wrappedFileStream ); { io :: CodedOutputStream codedStream ( gzipStream ); address_book . SerializeToCodedStream ( & codedStream ); } delete gzipStream ; delete wrappedFileStream ; fileStream . close (); } // Optional: Delete all global objects allocated by libprotobuf. google :: protobuf :: ShutdownProtobufLibrary (); return 0 ; } \u5728pyhon\u4e2d\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528gzip\u6a21\u5757\u8fdb\u884c\u89e3\u538b\u7f29 list_person.py #! /usr/bin/env python # See README.md for information and build instructions. from __future__ import print_function import addressbook_pb2 import sys import gzip # Iterates though all people in the AddressBook and prints info about them. def ListPeople ( address_book ): for person in address_book . people : print ( \"Person ID:\" , person . id ) print ( \" Name:\" , person . name ) if person . email != \"\" : print ( \" E-mail address:\" , person . email ) for phone_number in person . phones : if phone_number . type == addressbook_pb2 . Person . MOBILE : print ( \" Mobile phone #:\" , end = \" \" ) elif phone_number . type == addressbook_pb2 . Person . HOME : print ( \" Home phone #:\" , end = \" \" ) elif phone_number . type == addressbook_pb2 . Person . WORK : print ( \" Work phone #:\" , end = \" \" ) print ( phone_number . number ) # Main procedure: Reads the entire address book from a file and prints all # the information inside. if len ( sys . argv ) != 2 : print ( \"Usage:\" , sys . argv [ 0 ], \"ADDRESS_BOOK_FILE\" ) sys . exit ( - 1 ) address_book = addressbook_pb2 . AddressBook () # Read the existing address book. with gzip . open ( sys . argv [ 1 ], \"rb\" ) as f : address_book . ParseFromString ( f . read ()) ListPeople ( address_book )","title":"\u4f7f\u7528gzip\u538b\u7f29\u6570\u636e"},{"location":"tools/screen.html","text":"screen \u00b6 \u6211\u4eec\u7ecf\u5e38\u9700\u8981\u901a\u8fc7SSH\u7b49\u767b\u5f55\u5230linux\u670d\u52a1\u5668\u53bb\u6267\u884c\u4e00\u4e9b\u4efb\u52a1\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u5f53\u6211\u4eec\u5173\u95edssh\u5ba2\u6237\u7aef\uff0c\u6267\u884c\u7684\u4efb\u52a1\u4e5f\u88ab\u5173\u95ed\u3002\u6709\u4e9b\u65f6\u5019\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5728\u5173\u95ed\u5ba2\u6237\u7aef\u65f6\uff0c\u4efb\u52a1\u4ecd\u7136\u8fdb\u884c\uff0c\u8fd9\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528screen\u3002 GNU Screen\u53ef\u4ee5\u770b\u4f5c\u662f\u7a97\u53e3\u7ba1\u7406\u5668\u7684\u547d\u4ee4\u884c\u754c\u9762\u7248\u672c\u3002\u5b83\u63d0\u4f9b\u4e86\u7edf\u4e00\u7684\u7ba1\u7406\u591a\u4e2a\u4f1a\u8bdd\u7684\u754c\u9762\u548c\u76f8\u5e94\u7684\u529f\u80fd\u3002 \u521b\u5efascreen\u7ec8\u7aef \u00b6 screen -S test_name or just screen \u67e5\u770b\u7ec8\u7aef \u00b6 screen -ls \u4fdd\u5b58\u5e76\u9000\u51fa\u7ec8\u7aef \u00b6 \u5728screen\u7ec8\u7aef\u5185\u6309Ctrl+a, \u7136\u540e\u6309d \u91cd\u65b0attach\u7ec8\u7aef \u00b6 screen -r","title":"screen"},{"location":"tools/screen.html#screen","text":"\u6211\u4eec\u7ecf\u5e38\u9700\u8981\u901a\u8fc7SSH\u7b49\u767b\u5f55\u5230linux\u670d\u52a1\u5668\u53bb\u6267\u884c\u4e00\u4e9b\u4efb\u52a1\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u5f53\u6211\u4eec\u5173\u95edssh\u5ba2\u6237\u7aef\uff0c\u6267\u884c\u7684\u4efb\u52a1\u4e5f\u88ab\u5173\u95ed\u3002\u6709\u4e9b\u65f6\u5019\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5728\u5173\u95ed\u5ba2\u6237\u7aef\u65f6\uff0c\u4efb\u52a1\u4ecd\u7136\u8fdb\u884c\uff0c\u8fd9\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528screen\u3002 GNU Screen\u53ef\u4ee5\u770b\u4f5c\u662f\u7a97\u53e3\u7ba1\u7406\u5668\u7684\u547d\u4ee4\u884c\u754c\u9762\u7248\u672c\u3002\u5b83\u63d0\u4f9b\u4e86\u7edf\u4e00\u7684\u7ba1\u7406\u591a\u4e2a\u4f1a\u8bdd\u7684\u754c\u9762\u548c\u76f8\u5e94\u7684\u529f\u80fd\u3002","title":"screen"},{"location":"tools/screen.html#screen_1","text":"screen -S test_name or just screen","title":"\u521b\u5efascreen\u7ec8\u7aef"},{"location":"tools/screen.html#_1","text":"screen -ls","title":"\u67e5\u770b\u7ec8\u7aef"},{"location":"tools/screen.html#_2","text":"\u5728screen\u7ec8\u7aef\u5185\u6309Ctrl+a, \u7136\u540e\u6309d","title":"\u4fdd\u5b58\u5e76\u9000\u51fa\u7ec8\u7aef"},{"location":"tools/screen.html#attach","text":"screen -r","title":"\u91cd\u65b0attach\u7ec8\u7aef"},{"location":"tools/stream.html","text":"\u8bc4\u4f30DDR\u901a\u9053\u6570 \u00b6 \u6574\u4f53\u601d\u8def\uff1a\u83b7\u53d6\u5b9e\u9645\u7684\u5cf0\u5cf0\u503c\u603b\u5e26\u5bbdT\uff0c\u6309\u7167DDR\u578b\u53f7\u53ca\u9891\u7387\uff0c\u786e\u8ba4\u5355\u901a\u9053\u5e26\u5bbdt\uff0cchannel\u6570 = T/t \u83b7\u53d6\u5cf0\u5cf0\u503c\u5e26\u5bbd\u4f7f\u7528 jeffhammond/STREAM stream\u5b98\u65b9\u6587\u6863 \u7f51\u53cb\u5bf9\u4e8estream\u7684\u89e3\u8bfb \u83b7\u53d6DDR\u578b\u53f7\u53ca\u9891\u7387\uff0c\u4f7f\u7528 dmidecode --type memory \u547d\u4ee4 \u83b7\u53d6\u5cf0\u5cf0\u503c\u5e26\u5bbd \u00b6 \u786e\u8ba4\u5de5\u5177\u80fd\u591f\u6b63\u5e38\u8fd0\u884c \u00b6 git clone https://github.com/jeffhammond/STREAM.git cd STREAM make stream_c.exe ./stream_c.exe \u83b7\u53d6\u6d4b\u8bd5\u673aL3 Cache\u7684\u5927\u5c0f \u00b6 \u65b9\u6cd5\u4e00\uff1a ~/workspace$ getconf -a | grep CACHE LEVEL1_ICACHE_SIZE 32768 LEVEL1_ICACHE_ASSOC 8 LEVEL1_ICACHE_LINESIZE 64 LEVEL1_DCACHE_SIZE 32768 LEVEL1_DCACHE_ASSOC 8 LEVEL1_DCACHE_LINESIZE 64 LEVEL2_CACHE_SIZE 1048576 LEVEL2_CACHE_ASSOC 16 LEVEL2_CACHE_LINESIZE 64 LEVEL3_CACHE_SIZE 28835840 LEVEL3_CACHE_ASSOC 11 LEVEL3_CACHE_LINESIZE 64 LEVEL4_CACHE_SIZE 0 LEVEL4_CACHE_ASSOC 0 LEVEL4_CACHE_LINESIZE 0 \u65b9\u6cd5\u4e8c\uff1a sudo dmidecode -t cache \u65b9\u6cd5\u4e09\uff1a lscpu \u6839\u636eL3 Cache\u5927\u5c0f\u4fee\u6539STREAM_ARRAY_SIZE \u00b6 \u53ef\u4ee5\u76f4\u63a5\u4fee\u6539stream.c\u4e2d\u7684STREAM_ARRAY_SIZE\uff0c\u4e5f\u53ef\u4ee5\u5728make\u7684\u65f6\u5019 -DSTREAM_ARRAY_SIZE \u6765\u8fdb\u884c\u4fee\u6539 STREAM_ARRAY_SIZE = LEVEL3_CACHE_SIZE * 4 \u56e0\u4e3aL3 Cache\u83b7\u53d6\u5230\u7684\u662f28MB, \u90a3\u4e48STREAM_ARRAY_SIZE\u8bbe\u7f6e\u4e3a120MB\u6bd4\u8f83\u5408\u9002 \u518d\u6b21\u7f16\u8bd1\u8fd0\u884cstream \u00b6 ------------------------------------------------------------- STREAM version $Revision: 5.10 $ ------------------------------------------------------------- This system uses 8 bytes per array element. ------------------------------------------------------------- Array size = 120000000 (elements), Offset = 0 (elements) Memory per array = 915.5 MiB (= 0.9 GiB). Total memory required = 2746.6 MiB (= 2.7 GiB). Each kernel will be executed 10 times. The *best* time for each kernel (excluding the first iteration) will be used to compute the reported bandwidth. ------------------------------------------------------------- Number of Threads requested = 80 Number of Threads counted = 80 ------------------------------------------------------------- Your clock granularity/precision appears to be 1 microseconds. Each test below will take on the order of 31161 microseconds. (= 31161 clock ticks) Increase the size of the arrays if this shows that you are not getting at least 20 clock ticks per test. ------------------------------------------------------------- WARNING -- The above is only a rough guideline. For best results, please be sure you know the precision of your system timer. ------------------------------------------------------------- Function Best Rate MB/s Avg time Min time Max time Copy: 44672.0 0.055925 0.042980 0.101943 Scale: 50632.9 0.046314 0.037920 0.062966 Add: 57618.5 0.056867 0.049984 0.069840 Triad: 57517.2 0.060273 0.050072 0.096959 ------------------------------------------------------------- Solution Validates: avg error less than 1.000000e-13 on all three arrays ------------------------------------------------------------- \u83b7\u53d6DDR\u578b\u53f7\u53ca\u9891\u7387 \u00b6 sudo dmidecode -t memory # dmidecode 3.1 Getting SMBIOS data from sysfs. SMBIOS 3.2 present. # SMBIOS implementations newer than version 3.1.1 are not # fully supported by this version of dmidecode. Handle 0x1000, DMI type 16, 23 bytes Physical Memory Array Location: System Board Or Motherboard Use: System Memory Error Correction Type: Multi-bit ECC Maximum Capacity: 7680 GB Error Information Handle: Not Provided Number Of Devices: 24 Handle 0x1100, DMI type 17, 84 bytes Memory Device Array Handle: 0x1000 Error Information Handle: Not Provided Total Width: 72 bits Data Width: 64 bits Size: 32 GB Form Factor: DIMM Set: 1 Locator: A1 Bank Locator: Not Specified Type: DDR4 Type Detail: Synchronous Registered (Buffered) Speed: 2666 MT/s Manufacturer: 00CE00B300CE Serial Number: 41137A10 Asset Tag: 02184251 Part Number: M393A4K40CB2-CTD Rank: 2 Configured Clock Speed: 2666 MT/s Minimum Voltage: 1.2 V Maximum Voltage: 1.2 V Configured Voltage: 1.2 V DDR\u89c4\u683c\u5bb9\u91cf\u53ca\u4f20\u8f93\u901f\u5ea6\u5bf9\u7167\u8868 DDR\u89c4\u683c \u5bb9\u91cf \u4f20\u8f93\u5e26\u5bbd DDR 266 2.1 GB/s DDR 333 2.6 GB/s DDR 400 3.2 GB/s DDR2 533 4.2 GB/s DDR2 667 5.3 GB/s DDR2 800 6.4 GB/s DDR3 1066 8.5 GB/s DDR3 1333 10.6 GB/s DDR3 1600 12.8 GB/s DDR3 1866 14.9 GB/s DDR4 2133 17 GB/s DDR4 2400 19.2 GB/s DDR4 2666 21.3 GB/s DDR4 3200 25.6 GB/s \u8ba1\u7b97\u901a\u9053\u6570 \u00b6 57 // 21 = 3","title":"\u8bc4\u4f30DDR\u901a\u9053\u6570"},{"location":"tools/stream.html#ddr","text":"\u6574\u4f53\u601d\u8def\uff1a\u83b7\u53d6\u5b9e\u9645\u7684\u5cf0\u5cf0\u503c\u603b\u5e26\u5bbdT\uff0c\u6309\u7167DDR\u578b\u53f7\u53ca\u9891\u7387\uff0c\u786e\u8ba4\u5355\u901a\u9053\u5e26\u5bbdt\uff0cchannel\u6570 = T/t \u83b7\u53d6\u5cf0\u5cf0\u503c\u5e26\u5bbd\u4f7f\u7528 jeffhammond/STREAM stream\u5b98\u65b9\u6587\u6863 \u7f51\u53cb\u5bf9\u4e8estream\u7684\u89e3\u8bfb \u83b7\u53d6DDR\u578b\u53f7\u53ca\u9891\u7387\uff0c\u4f7f\u7528 dmidecode --type memory \u547d\u4ee4","title":"\u8bc4\u4f30DDR\u901a\u9053\u6570"},{"location":"tools/stream.html#_1","text":"","title":"\u83b7\u53d6\u5cf0\u5cf0\u503c\u5e26\u5bbd"},{"location":"tools/stream.html#_2","text":"git clone https://github.com/jeffhammond/STREAM.git cd STREAM make stream_c.exe ./stream_c.exe","title":"\u786e\u8ba4\u5de5\u5177\u80fd\u591f\u6b63\u5e38\u8fd0\u884c"},{"location":"tools/stream.html#l3-cache","text":"\u65b9\u6cd5\u4e00\uff1a ~/workspace$ getconf -a | grep CACHE LEVEL1_ICACHE_SIZE 32768 LEVEL1_ICACHE_ASSOC 8 LEVEL1_ICACHE_LINESIZE 64 LEVEL1_DCACHE_SIZE 32768 LEVEL1_DCACHE_ASSOC 8 LEVEL1_DCACHE_LINESIZE 64 LEVEL2_CACHE_SIZE 1048576 LEVEL2_CACHE_ASSOC 16 LEVEL2_CACHE_LINESIZE 64 LEVEL3_CACHE_SIZE 28835840 LEVEL3_CACHE_ASSOC 11 LEVEL3_CACHE_LINESIZE 64 LEVEL4_CACHE_SIZE 0 LEVEL4_CACHE_ASSOC 0 LEVEL4_CACHE_LINESIZE 0 \u65b9\u6cd5\u4e8c\uff1a sudo dmidecode -t cache \u65b9\u6cd5\u4e09\uff1a lscpu","title":"\u83b7\u53d6\u6d4b\u8bd5\u673aL3 Cache\u7684\u5927\u5c0f"},{"location":"tools/stream.html#l3-cachestream_array_size","text":"\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539stream.c\u4e2d\u7684STREAM_ARRAY_SIZE\uff0c\u4e5f\u53ef\u4ee5\u5728make\u7684\u65f6\u5019 -DSTREAM_ARRAY_SIZE \u6765\u8fdb\u884c\u4fee\u6539 STREAM_ARRAY_SIZE = LEVEL3_CACHE_SIZE * 4 \u56e0\u4e3aL3 Cache\u83b7\u53d6\u5230\u7684\u662f28MB, \u90a3\u4e48STREAM_ARRAY_SIZE\u8bbe\u7f6e\u4e3a120MB\u6bd4\u8f83\u5408\u9002","title":"\u6839\u636eL3 Cache\u5927\u5c0f\u4fee\u6539STREAM_ARRAY_SIZE"},{"location":"tools/stream.html#stream","text":"------------------------------------------------------------- STREAM version $Revision: 5.10 $ ------------------------------------------------------------- This system uses 8 bytes per array element. ------------------------------------------------------------- Array size = 120000000 (elements), Offset = 0 (elements) Memory per array = 915.5 MiB (= 0.9 GiB). Total memory required = 2746.6 MiB (= 2.7 GiB). Each kernel will be executed 10 times. The *best* time for each kernel (excluding the first iteration) will be used to compute the reported bandwidth. ------------------------------------------------------------- Number of Threads requested = 80 Number of Threads counted = 80 ------------------------------------------------------------- Your clock granularity/precision appears to be 1 microseconds. Each test below will take on the order of 31161 microseconds. (= 31161 clock ticks) Increase the size of the arrays if this shows that you are not getting at least 20 clock ticks per test. ------------------------------------------------------------- WARNING -- The above is only a rough guideline. For best results, please be sure you know the precision of your system timer. ------------------------------------------------------------- Function Best Rate MB/s Avg time Min time Max time Copy: 44672.0 0.055925 0.042980 0.101943 Scale: 50632.9 0.046314 0.037920 0.062966 Add: 57618.5 0.056867 0.049984 0.069840 Triad: 57517.2 0.060273 0.050072 0.096959 ------------------------------------------------------------- Solution Validates: avg error less than 1.000000e-13 on all three arrays -------------------------------------------------------------","title":"\u518d\u6b21\u7f16\u8bd1\u8fd0\u884cstream"},{"location":"tools/stream.html#ddr_1","text":"sudo dmidecode -t memory # dmidecode 3.1 Getting SMBIOS data from sysfs. SMBIOS 3.2 present. # SMBIOS implementations newer than version 3.1.1 are not # fully supported by this version of dmidecode. Handle 0x1000, DMI type 16, 23 bytes Physical Memory Array Location: System Board Or Motherboard Use: System Memory Error Correction Type: Multi-bit ECC Maximum Capacity: 7680 GB Error Information Handle: Not Provided Number Of Devices: 24 Handle 0x1100, DMI type 17, 84 bytes Memory Device Array Handle: 0x1000 Error Information Handle: Not Provided Total Width: 72 bits Data Width: 64 bits Size: 32 GB Form Factor: DIMM Set: 1 Locator: A1 Bank Locator: Not Specified Type: DDR4 Type Detail: Synchronous Registered (Buffered) Speed: 2666 MT/s Manufacturer: 00CE00B300CE Serial Number: 41137A10 Asset Tag: 02184251 Part Number: M393A4K40CB2-CTD Rank: 2 Configured Clock Speed: 2666 MT/s Minimum Voltage: 1.2 V Maximum Voltage: 1.2 V Configured Voltage: 1.2 V DDR\u89c4\u683c\u5bb9\u91cf\u53ca\u4f20\u8f93\u901f\u5ea6\u5bf9\u7167\u8868 DDR\u89c4\u683c \u5bb9\u91cf \u4f20\u8f93\u5e26\u5bbd DDR 266 2.1 GB/s DDR 333 2.6 GB/s DDR 400 3.2 GB/s DDR2 533 4.2 GB/s DDR2 667 5.3 GB/s DDR2 800 6.4 GB/s DDR3 1066 8.5 GB/s DDR3 1333 10.6 GB/s DDR3 1600 12.8 GB/s DDR3 1866 14.9 GB/s DDR4 2133 17 GB/s DDR4 2400 19.2 GB/s DDR4 2666 21.3 GB/s DDR4 3200 25.6 GB/s","title":"\u83b7\u53d6DDR\u578b\u53f7\u53ca\u9891\u7387"},{"location":"tools/stream.html#_3","text":"57 // 21 = 3","title":"\u8ba1\u7b97\u901a\u9053\u6570"},{"location":"tools/vscode-remotessh.html","text":"vscode \u00b6 linux\u5f00\u53d1\u8005\u666e\u904d\u559c\u6b22\u4f20\u7edf\u7684vim,\u5229\u7528ctags\u548ccscope\u7b49\u5de5\u5177\uff0c\u4e5f\u80fd\u505a\u5230\u5f88\u65b9\u4fbf\u7684\u8fdb\u884c\u4ee3\u7801\u5f00\u53d1\u3002github\u4e0a\u4e5f\u6709\u5f88\u591a\u5f00\u6e90\u7684vim\u914d\u7f6e\u65b9\u6848\uff0c\u6bd4\u5982\u5e7f\u53d7\u5927\u5bb6\u559c\u6b22\u7684spf13-vim\u7b49\u3002\u4f46\u5982\u679c\u4f60\u5c1d\u8bd5\u4e86\u4f7f\u7528vscode,\u90a3\u4e48\u4f60\u5f88\u6709\u53ef\u80fd\u4f1a\u653e\u5f03\u575a\u6301\u4e86\u591a\u5e74\u7684vim\u3002\u73b0\u4ee3\u7f16\u8f91\u5668\u4e0d\u53ea\u6709vscode\u4e00\u5bb6\uff0catom\u7b49\u4e5f\u6709\u4e00\u4e9b\u7528\u6237\uff0c\u5f53\u7136java\u3001scala\u5f00\u53d1\u8005\u53ef\u80fd\u66f4\u559c\u6b22idea\u4e00\u4e9b\u3002\u4f46\u603b\u4f53\u6765\u8bb2\uff0c\u5c24\u5176\u662fC/C++\u548cpython\u5f00\u53d1\uff0cvscode\u5df2\u7ecf\u6210\u4e3a\u4e86\u4e3b\u6d41 \u4e30\u5bcc\u7684\u63d2\u4ef6\u6269\u5c55 \u00b6 \u6ca1\u6709\u63d2\u4ef6\u7684vscode\u662f\u6ca1\u6709\u7075\u9b42\u7684\uff0c\u8fd9\u91cc\u7f57\u5217\u4e00\u4e9b\u5e38\u7528\u63d2\u4ef6\uff0cvscode\u7684\u5f88\u591a\u63d2\u4ef6\u90fd\u652f\u6301\u914d\u7f6e\uff0c\u5177\u4f53\u7684\u914d\u7f6e\u5728\u63d2\u4ef6\u8bf4\u660e\u4e2d\u80fd\u591f\u5f88\u8f7b\u6613\u7684\u627e\u5230\u3002 c/c++ \u00b6 \u5f00\u53d1C/C++\u5fc5\u5907 highlight-words \u00b6 \u80fd\u591f\u5b9e\u73b0\u9ad8\u4eae\u67d0\u4e2a\u5355\u8bcd\uff0c\u5e76\u4e14\u9ad8\u4eae\u53ef\u4ee5\u8bbe\u7f6e\u6210\u5feb\u6377\u952e\uff0c\u975e\u5e38\u63a8\u8350 \u901a\u8fc7\u5982\u4e0b\u914d\u7f6e\uff0c\u80fd\u591f\u4f7f\u7528\u4e00\u4e2a\u8272\u5757\u6765\u9ad8\u4eae\u67d0\u4e00\u4e2a\u5355\u8bcd\uff0c\u5e76\u4e14\u4e3a\u5168\u5b57\u7b26\u5339\u914d\u6a21\u5f0f \"highlightwords.box\" : { \"light\" : true , \"dark\" : false }, \"highlightwords.defaultMode\" : 1 , \"highlightwords.showSidebar\" : false , \u5feb\u6377\u952e\u76f8\u5173\u5173\u952e\u5b57\u4e3aHighlight Remove All \u548c Highlight Toggle Current,\u53ef\u4ee5\u5728Keyboard shortcut\u4e2d\u8fdb\u884c\u8bbe\u7f6e Markdown Preview Enhanced \u00b6 markdown\u589e\u5f3a\u89e3\u6790\u5668\uff0c\u8fb9\u5199\u8fb9\u770b\u6548\u679c\uff0c\u8fd8\u633a\u4e0d\u9519 Python \u00b6 python \u5fc5\u5907 RISC-V Support \u00b6 \u652f\u6301riscv\u6c47\u7f16\u8bed\u6cd5\u9ad8\u4eae Setting Sync \u00b6 \u53ef\u4ee5\u5c06\u4f60\u7684\u914d\u7f6e\u4f20\u5230github\u4e0a\uff0c\u5f53\u5728\u4e00\u4e2a\u65b0\u73af\u5883\u4e2d\u90e8\u7f72vscode\u65f6\uff0c\u4e0d\u5fc5\u518d\u91cd\u590d\u8fdb\u884c\u7e41\u7410\u7684\u914d\u7f6e\uff0c\u53ef\u4ee5\u76f4\u63a5\u4ecegithub\u62c9\u53d6 \u4e3b\u9898 \u00b6 \u5728\u6269\u5c55\u5546\u5e97\u4e2d\u641c\u7d22theme\uff0c\u53ef\u4ee5\u627e\u5230\u975e\u5e38\u4e30\u5bcc\u7684\u4e3b\u9898\uff0c\u603b\u6709\u4e00\u6b3e\u4f60\u559c\u6b22\u7684\u3002 Remote-SSH \u00b6 \u6211\u4eec\u5728\u5de5\u4f5c\u65f6\uff0c\u516c\u53f8\u5f80\u5f80\u4f1a\u9009\u62e9\u5728\u670d\u52a1\u5668\u4e0a\u505a\u5f00\u53d1\uff0c\u4f1a\u7ed9\u6bcf\u4eba\u5206\u914d\u4e00\u4e2assh ID\u4ee5\u4f9b\u767b\u5f55\u5230ssh server\u3002\u8fd9\u6837\u5728\u5f00\u53d1\u65f6\uff0c\u5c31\u53ea\u80fd\u9009\u62e9vim + ctags + cscope\u8fd9\u79cd\u5f00\u53d1\u73af\u5883\u3002\u5bf9\u4e8e\u4e60\u60ef\u4e8evscode\u7684\u4eba\u6765\u8bb2\uff0c\u8fd9\u662f\u707e\u96be\u6027\u7684\u3002\u4e60\u60ef\u4e86vscode\u7684\u76f4\u63a5\u4e4b\u540e\uff0c\u5c31\u518d\u4e5f\u4e0d\u60f3\u52a8\u624b\u6572\u6765\u6572\u53bb\u3002 vscode\u5f15\u5165\u4e86Remote-SSH\u63d2\u4ef6\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5b83\u80fd\u591f\u8ba9\u6211\u4eec\u7528\u672c\u5730\u7535\u8111\u7684vscode\u901a\u8fc7ssh\u76f4\u63a5\u7f16\u8f91\u8fdc\u7a0b\u7684\u4ee3\u7801\u3002 \u8fd9\u91cc\u4e3b\u8981\u53c2\u8003vscode\u5b98\u65b9\u6587\u6863[ https://code.visualstudio.com/docs/remote/ssh#_getting-started ] \u5728\u8fd9\u91cc\u5927\u81f4\u603b\u7ed3\u4e00\u4e0b\u5b89\u88c5\u8fc7\u7a0b\uff0c\u672c\u5730\u4ee5win10\u4e3a\u4f8b \u8fdc\u7aef\u9700\u8981\u7684\u64cd\u4f5c\u5982\u4e0b \u8fdc\u7aef\u5b89\u88c5ssh server\u5e76\u5f00\u542f \u914d\u7f6e\u4e00\u4e9b\u5b89\u5168\u53ef\u9009\u9879\uff0c\u5177\u4f53\u53c2\u8003\u5b98\u65b9\u6587\u6863 \u672c\u5730\u9700\u8981\u7684\u64cd\u4f5c\u5982\u4e0b \u672c\u5730\u5b89\u88c5vscode\u4ee5\u53caRemote-SSH\u6269\u5c55 \u672c\u5730\u5b89\u88c5ssh\u670d\u52a1 \u672c\u5730\u767b\u5f55\u8fdc\u7aefssh\u670d\u52a1\u5668 \u672c\u5730\u5177\u4f53\u8fc7\u7a0b \u00b6 \u8fd9\u91cc\u4e3b\u8981\u8bb2\u672c\u5730\u5982\u4f55\u64cd\u4f5c\uff0c\u8fdc\u7aef\u4e00\u822c\u5df2\u7ecf\u90e8\u7f72\u5b8c\u6bd5 \u5b89\u88c5vscode\u53caRemote-SSH\u6269\u5c55 \u5b89\u88c5\u5b8c\u6bd5vscode\u4e4b\u540e\uff0c\u5728\u6269\u5c55\u4e2d\u9009\u62e9Remote-SSH\u6269\u5c55\u3002\u5f53\u7136\uff0c\u4f60\u5b8c\u5168\u53ef\u4ee5\u4f7f\u7528Setting Sync\u6269\u5c55\u6765\u540c\u6b65\u4f60\u7684\u914d\u7f6e\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u6bcf\u6b21\u5728\u4e00\u4e2a\u65b0\u7684\u73af\u5883\u4e2d\u8fdb\u884c\u7e41\u7410\u7684\u914d\u7f6e \u5b89\u88c5ssh\u670d\u52a1 \u8fd9\u91cc\u53c2\u8003\u5fae\u8f6f\u5b98\u65b9\u6587\u6863[ https://docs.microsoft.com/zh-cn/windows-server/administration/openssh/openssh_install_firstuse ] \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u4f7f\u7528PowerShell, \u9700\u8981\u4ee5**\u7ba1\u7406\u5458\u6743\u9650**\u8fd0\u884c\uff0c\u5728\u5b89\u88c5\u5b8cssh\u4e4b\u540e\uff0c\u4f7f\u7528ssh\u547d\u4ee4\u6765\u6d4b\u8bd5\u662f\u5426\u5b89\u88c5\u6210\u529f\uff0c\u5e76\u4e14\u987a\u4fbf\u6fc0\u6d3bpath\u3002\u5426\u5219==Set-Service -Name sshd -StartupType 'Automatic'== \u547d\u4ee4\u53ef\u80fd\u4f1a\u627e\u4e0d\u5230sshd","title":"vscode"},{"location":"tools/vscode-remotessh.html#vscode","text":"linux\u5f00\u53d1\u8005\u666e\u904d\u559c\u6b22\u4f20\u7edf\u7684vim,\u5229\u7528ctags\u548ccscope\u7b49\u5de5\u5177\uff0c\u4e5f\u80fd\u505a\u5230\u5f88\u65b9\u4fbf\u7684\u8fdb\u884c\u4ee3\u7801\u5f00\u53d1\u3002github\u4e0a\u4e5f\u6709\u5f88\u591a\u5f00\u6e90\u7684vim\u914d\u7f6e\u65b9\u6848\uff0c\u6bd4\u5982\u5e7f\u53d7\u5927\u5bb6\u559c\u6b22\u7684spf13-vim\u7b49\u3002\u4f46\u5982\u679c\u4f60\u5c1d\u8bd5\u4e86\u4f7f\u7528vscode,\u90a3\u4e48\u4f60\u5f88\u6709\u53ef\u80fd\u4f1a\u653e\u5f03\u575a\u6301\u4e86\u591a\u5e74\u7684vim\u3002\u73b0\u4ee3\u7f16\u8f91\u5668\u4e0d\u53ea\u6709vscode\u4e00\u5bb6\uff0catom\u7b49\u4e5f\u6709\u4e00\u4e9b\u7528\u6237\uff0c\u5f53\u7136java\u3001scala\u5f00\u53d1\u8005\u53ef\u80fd\u66f4\u559c\u6b22idea\u4e00\u4e9b\u3002\u4f46\u603b\u4f53\u6765\u8bb2\uff0c\u5c24\u5176\u662fC/C++\u548cpython\u5f00\u53d1\uff0cvscode\u5df2\u7ecf\u6210\u4e3a\u4e86\u4e3b\u6d41","title":"vscode"},{"location":"tools/vscode-remotessh.html#_1","text":"\u6ca1\u6709\u63d2\u4ef6\u7684vscode\u662f\u6ca1\u6709\u7075\u9b42\u7684\uff0c\u8fd9\u91cc\u7f57\u5217\u4e00\u4e9b\u5e38\u7528\u63d2\u4ef6\uff0cvscode\u7684\u5f88\u591a\u63d2\u4ef6\u90fd\u652f\u6301\u914d\u7f6e\uff0c\u5177\u4f53\u7684\u914d\u7f6e\u5728\u63d2\u4ef6\u8bf4\u660e\u4e2d\u80fd\u591f\u5f88\u8f7b\u6613\u7684\u627e\u5230\u3002","title":"\u4e30\u5bcc\u7684\u63d2\u4ef6\u6269\u5c55"},{"location":"tools/vscode-remotessh.html#cc","text":"\u5f00\u53d1C/C++\u5fc5\u5907","title":"c/c++"},{"location":"tools/vscode-remotessh.html#highlight-words","text":"\u80fd\u591f\u5b9e\u73b0\u9ad8\u4eae\u67d0\u4e2a\u5355\u8bcd\uff0c\u5e76\u4e14\u9ad8\u4eae\u53ef\u4ee5\u8bbe\u7f6e\u6210\u5feb\u6377\u952e\uff0c\u975e\u5e38\u63a8\u8350 \u901a\u8fc7\u5982\u4e0b\u914d\u7f6e\uff0c\u80fd\u591f\u4f7f\u7528\u4e00\u4e2a\u8272\u5757\u6765\u9ad8\u4eae\u67d0\u4e00\u4e2a\u5355\u8bcd\uff0c\u5e76\u4e14\u4e3a\u5168\u5b57\u7b26\u5339\u914d\u6a21\u5f0f \"highlightwords.box\" : { \"light\" : true , \"dark\" : false }, \"highlightwords.defaultMode\" : 1 , \"highlightwords.showSidebar\" : false , \u5feb\u6377\u952e\u76f8\u5173\u5173\u952e\u5b57\u4e3aHighlight Remove All \u548c Highlight Toggle Current,\u53ef\u4ee5\u5728Keyboard shortcut\u4e2d\u8fdb\u884c\u8bbe\u7f6e","title":"highlight-words"},{"location":"tools/vscode-remotessh.html#markdown-preview-enhanced","text":"markdown\u589e\u5f3a\u89e3\u6790\u5668\uff0c\u8fb9\u5199\u8fb9\u770b\u6548\u679c\uff0c\u8fd8\u633a\u4e0d\u9519","title":"Markdown Preview Enhanced"},{"location":"tools/vscode-remotessh.html#python","text":"python \u5fc5\u5907","title":"Python"},{"location":"tools/vscode-remotessh.html#risc-v-support","text":"\u652f\u6301riscv\u6c47\u7f16\u8bed\u6cd5\u9ad8\u4eae","title":"RISC-V Support"},{"location":"tools/vscode-remotessh.html#setting-sync","text":"\u53ef\u4ee5\u5c06\u4f60\u7684\u914d\u7f6e\u4f20\u5230github\u4e0a\uff0c\u5f53\u5728\u4e00\u4e2a\u65b0\u73af\u5883\u4e2d\u90e8\u7f72vscode\u65f6\uff0c\u4e0d\u5fc5\u518d\u91cd\u590d\u8fdb\u884c\u7e41\u7410\u7684\u914d\u7f6e\uff0c\u53ef\u4ee5\u76f4\u63a5\u4ecegithub\u62c9\u53d6","title":"Setting Sync"},{"location":"tools/vscode-remotessh.html#_2","text":"\u5728\u6269\u5c55\u5546\u5e97\u4e2d\u641c\u7d22theme\uff0c\u53ef\u4ee5\u627e\u5230\u975e\u5e38\u4e30\u5bcc\u7684\u4e3b\u9898\uff0c\u603b\u6709\u4e00\u6b3e\u4f60\u559c\u6b22\u7684\u3002","title":"\u4e3b\u9898"},{"location":"tools/vscode-remotessh.html#remote-ssh","text":"\u6211\u4eec\u5728\u5de5\u4f5c\u65f6\uff0c\u516c\u53f8\u5f80\u5f80\u4f1a\u9009\u62e9\u5728\u670d\u52a1\u5668\u4e0a\u505a\u5f00\u53d1\uff0c\u4f1a\u7ed9\u6bcf\u4eba\u5206\u914d\u4e00\u4e2assh ID\u4ee5\u4f9b\u767b\u5f55\u5230ssh server\u3002\u8fd9\u6837\u5728\u5f00\u53d1\u65f6\uff0c\u5c31\u53ea\u80fd\u9009\u62e9vim + ctags + cscope\u8fd9\u79cd\u5f00\u53d1\u73af\u5883\u3002\u5bf9\u4e8e\u4e60\u60ef\u4e8evscode\u7684\u4eba\u6765\u8bb2\uff0c\u8fd9\u662f\u707e\u96be\u6027\u7684\u3002\u4e60\u60ef\u4e86vscode\u7684\u76f4\u63a5\u4e4b\u540e\uff0c\u5c31\u518d\u4e5f\u4e0d\u60f3\u52a8\u624b\u6572\u6765\u6572\u53bb\u3002 vscode\u5f15\u5165\u4e86Remote-SSH\u63d2\u4ef6\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5b83\u80fd\u591f\u8ba9\u6211\u4eec\u7528\u672c\u5730\u7535\u8111\u7684vscode\u901a\u8fc7ssh\u76f4\u63a5\u7f16\u8f91\u8fdc\u7a0b\u7684\u4ee3\u7801\u3002 \u8fd9\u91cc\u4e3b\u8981\u53c2\u8003vscode\u5b98\u65b9\u6587\u6863[ https://code.visualstudio.com/docs/remote/ssh#_getting-started ] \u5728\u8fd9\u91cc\u5927\u81f4\u603b\u7ed3\u4e00\u4e0b\u5b89\u88c5\u8fc7\u7a0b\uff0c\u672c\u5730\u4ee5win10\u4e3a\u4f8b \u8fdc\u7aef\u9700\u8981\u7684\u64cd\u4f5c\u5982\u4e0b \u8fdc\u7aef\u5b89\u88c5ssh server\u5e76\u5f00\u542f \u914d\u7f6e\u4e00\u4e9b\u5b89\u5168\u53ef\u9009\u9879\uff0c\u5177\u4f53\u53c2\u8003\u5b98\u65b9\u6587\u6863 \u672c\u5730\u9700\u8981\u7684\u64cd\u4f5c\u5982\u4e0b \u672c\u5730\u5b89\u88c5vscode\u4ee5\u53caRemote-SSH\u6269\u5c55 \u672c\u5730\u5b89\u88c5ssh\u670d\u52a1 \u672c\u5730\u767b\u5f55\u8fdc\u7aefssh\u670d\u52a1\u5668","title":"Remote-SSH"},{"location":"tools/vscode-remotessh.html#_3","text":"\u8fd9\u91cc\u4e3b\u8981\u8bb2\u672c\u5730\u5982\u4f55\u64cd\u4f5c\uff0c\u8fdc\u7aef\u4e00\u822c\u5df2\u7ecf\u90e8\u7f72\u5b8c\u6bd5 \u5b89\u88c5vscode\u53caRemote-SSH\u6269\u5c55 \u5b89\u88c5\u5b8c\u6bd5vscode\u4e4b\u540e\uff0c\u5728\u6269\u5c55\u4e2d\u9009\u62e9Remote-SSH\u6269\u5c55\u3002\u5f53\u7136\uff0c\u4f60\u5b8c\u5168\u53ef\u4ee5\u4f7f\u7528Setting Sync\u6269\u5c55\u6765\u540c\u6b65\u4f60\u7684\u914d\u7f6e\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u6bcf\u6b21\u5728\u4e00\u4e2a\u65b0\u7684\u73af\u5883\u4e2d\u8fdb\u884c\u7e41\u7410\u7684\u914d\u7f6e \u5b89\u88c5ssh\u670d\u52a1 \u8fd9\u91cc\u53c2\u8003\u5fae\u8f6f\u5b98\u65b9\u6587\u6863[ https://docs.microsoft.com/zh-cn/windows-server/administration/openssh/openssh_install_firstuse ] \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u4f7f\u7528PowerShell, \u9700\u8981\u4ee5**\u7ba1\u7406\u5458\u6743\u9650**\u8fd0\u884c\uff0c\u5728\u5b89\u88c5\u5b8cssh\u4e4b\u540e\uff0c\u4f7f\u7528ssh\u547d\u4ee4\u6765\u6d4b\u8bd5\u662f\u5426\u5b89\u88c5\u6210\u529f\uff0c\u5e76\u4e14\u987a\u4fbf\u6fc0\u6d3bpath\u3002\u5426\u5219==Set-Service -Name sshd -StartupType 'Automatic'== \u547d\u4ee4\u53ef\u80fd\u4f1a\u627e\u4e0d\u5230sshd","title":"\u672c\u5730\u5177\u4f53\u8fc7\u7a0b"},{"location":"tools/wsl.html","text":"WSL \u00b6 \u5728windows\u4e0a\u901a\u8fc7\u5b89\u88c5WSL\uff0c\u80fd\u591f\u5b9e\u73b0\u5feb\u901f\u9ad8\u6548\u7684\u642d\u5efalinux\u5f00\u53d1\u73af\u5883\u3002\u80fd\u591f\u6ee1\u8db3\u4e00\u822c\u7684\u5f00\u53d1\u9700\u6c42\u3002 \u89e3\u51b3\u5360\u7528\u786c\u76d8\u592a\u5927\u7684\u95ee\u9898 \u00b6 WSL\u5360\u7528\u7684\u786c\u76d8\u7a7a\u95f4\u4f3c\u4e4e\u4e0d\u4f1a\u81ea\u52a8\u91ca\u653e\uff0c\u8fd9\u91cc\u9700\u8981\u624b\u52a8\u8fdb\u884c\u4e00\u4e9b\u64cd\u4f5c\u3002\u4e0d\u7136C\u76d8\u4f1a\u7ea2\u5230\u7206\u70b8 \u5728Windows\u6587\u4ef6\u7ba1\u7406\u5668\u4e2d\u641c\u7d22ext4.vhdx, \u627e\u5230\u5bf9\u5e94\u7684WSL\u5206\u53d1\u7248\u672c\u5bf9\u5e94\u7684\u5b58\u50a8\u6587\u4ef6 \u5728powershell\u4e2d\u8f93\u5165\u5982\u4e0b\u547d\u4ee4\uff1a WSL --shutdown diskpart ( \u9700\u8981\u7ba1\u7406\u5458\u6743\u9650 ) select vdisk file = \"xxxxxxxxx\\ext4.vhdx\" compact vdisk detach vdisk","title":"WSL"},{"location":"tools/wsl.html#wsl","text":"\u5728windows\u4e0a\u901a\u8fc7\u5b89\u88c5WSL\uff0c\u80fd\u591f\u5b9e\u73b0\u5feb\u901f\u9ad8\u6548\u7684\u642d\u5efalinux\u5f00\u53d1\u73af\u5883\u3002\u80fd\u591f\u6ee1\u8db3\u4e00\u822c\u7684\u5f00\u53d1\u9700\u6c42\u3002","title":"WSL"},{"location":"tools/wsl.html#_1","text":"WSL\u5360\u7528\u7684\u786c\u76d8\u7a7a\u95f4\u4f3c\u4e4e\u4e0d\u4f1a\u81ea\u52a8\u91ca\u653e\uff0c\u8fd9\u91cc\u9700\u8981\u624b\u52a8\u8fdb\u884c\u4e00\u4e9b\u64cd\u4f5c\u3002\u4e0d\u7136C\u76d8\u4f1a\u7ea2\u5230\u7206\u70b8 \u5728Windows\u6587\u4ef6\u7ba1\u7406\u5668\u4e2d\u641c\u7d22ext4.vhdx, \u627e\u5230\u5bf9\u5e94\u7684WSL\u5206\u53d1\u7248\u672c\u5bf9\u5e94\u7684\u5b58\u50a8\u6587\u4ef6 \u5728powershell\u4e2d\u8f93\u5165\u5982\u4e0b\u547d\u4ee4\uff1a WSL --shutdown diskpart ( \u9700\u8981\u7ba1\u7406\u5458\u6743\u9650 ) select vdisk file = \"xxxxxxxxx\\ext4.vhdx\" compact vdisk detach vdisk","title":"\u89e3\u51b3\u5360\u7528\u786c\u76d8\u592a\u5927\u7684\u95ee\u9898"},{"location":"tvm/codebase-struct.html","text":"directory-structure \u00b6 directory-structure \u4e3b\u76ee\u5f55\u7ed3\u6784 \u8be6\u7ec6\u7ed3\u6784 python src topi \u6240\u6709\u590d\u6742\u4ee3\u7801\u90fd\u5728\uff43++\u4e2d\u5b9e\u73b0\uff0cpython\u662f\u4e3a\u4e86\u7528\u6237\u63a5\u53e3\uff0c\u4f46\u662fc++\u4e5f\u53ef\u4ee5\u8c03\u7528python\u91cc\u9762\u7684\u63a5\u53e3 \u4e3b\u76ee\u5f55\u7ed3\u6784 \u00b6 \u251c\u2500\u2500 3rdparty \u7b2c\u4e09\u65b9\u8f6f\u4ef6\u5e93\uff0c\u5176\u4e2d\u4e00\u4e9b\u4ee5git submodule\u7684\u5f62\u5f0f\u5305\u542b\uff0c \u5305\u62ec HalideIR, rang, dlpack\u7b49\u4e00\u4e9b\u5f00\u6e90\u8f6f\u4ef6 \u251c\u2500\u2500 apps \u5305\u542b\u4e86\u4e00\u4e9b\u57fa\u4e8eTVM\u7684\u6269\u5c55\u9879\u76ee\uff0c\u4e5f\u4f5c\u4e3a\u5982\u4f55\u4f7f\u7528tvm\u7684\u4f8b\u7a0b \u251c\u2500\u2500 cmake tvm\u7f16\u8bd1\u7528\u7684cmake \u251c\u2500\u2500 conda conda\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u8f6f\u4ef6\u5305\u7ba1\u7406\u7cfb\u7edf\u548c\u73af\u5883\u7ba1\u7406\u7cfb\u7edf\uff0c\u7528\u4e8e\u5b89\u88c5\u591a\u4e2a\u7248\u672c\u7684\u8f6f\u4ef6\u5305\u53ca\u5176\u4f9d\u8d56\u5173\u7cfb\uff0c\u5e76\u5728\u5b83\u4eec\u4e4b\u95f4\u8f7b\u677e\u5207\u6362,\u8fd9\u91cc\u5b9e\u73b0\u4e86tvm\u7684\u5b89\u88c5\u7684\u5305\u88c5\uff0c\u4f7f\u5f97tvm\u5b89\u88c5\u66f4\u52a0\u65b9\u4fbf \u251c\u2500\u2500 docker \u57fa\u4e8edocker\u7684tvm\u5feb\u901f\u90e8\u7f72\uff0c\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684dockerfile\u548c\u5b89\u88c5\u811a\u672c\uff0c\u80fd\u591f\u6839\u636edockerfile\u76f4\u63a5\u751f\u6210\u76f8\u5e94\u7684\u955c\u50cf\uff0c\u7701\u53bb\u4e86\u5b89\u88c5\u4f9d\u8d56\u73af\u5883\u7684\u70e6\u607c \u251c\u2500\u2500 docs \u57fa\u4e8erst\u7684\u6587\u6863\uff0c\u548c\u5b98\u7f51\u7684doc\u662f\u4e00\u6837\u7684 \u251c\u2500\u2500 golang tvm runtime\u7684golang\u63a5\u53e3 \u251c\u2500\u2500 include src \u76ee\u5f55\u4e0b\u7684cc\u6587\u4ef6\u5bf9\u5e94\u7684\u5934\u6587\u4ef6 \u251c\u2500\u2500 jvm tvm runtime\u7684java\u63a5\u53e3 \u251c\u2500\u2500 nnvm nnvm\u5b9e\u73b0\uff0c\u6211\u4eec\u4f7f\u7528relay \u251c\u2500\u2500 python \u53ef\u4ee5\u7406\u89e3\u4e3a\u8f6f\u4ef6\u524d\u7aef\uff0cc++\u53ef\u4ee5\u7406\u89e3\u4e3a\u8f6f\u4ef6\u540e\u7aef\uff0cpython\u5b9e\u73b0\u4e86\u5bf9c++\u4ee3\u7801\u7684\u5c01\u88c5\uff0c\u53ef\u4ee5\u63a7\u5236\u7f16\u8bd1\u6d41\u7a0b \u251c\u2500\u2500 rust Rust\u662f\u4e00\u95e8\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\uff0c\u4e13\u6ce8\u4e8e\u5b89\u5168\uff0c\u5c24\u5176\u662f\u5e76\u53d1\u5b89\u5168\uff0c\u652f\u6301\u51fd\u6570\u5f0f\u548c\u547d\u4ee4\u5f0f\u4ee5\u53ca\u6cdb\u578b\u7b49\u7f16\u7a0b\u8303\u5f0f\u7684\u591a\u8303\u5f0f\u8bed\u8a00,\u653e\u5728tvm\u4e2d\u4e0d\u77e5\u9053\u662f\u8981\u505a\u4ec0\u4e48\uff0c\u4f3c\u4e4e\u662f\u4e0d\u5f71\u54cd\u6211\u4eec\u4e86\u89e3tvm\u7684\u7f16\u8bd1\u8fc7\u7a0b \u251c\u2500\u2500 src op\u7f16\u8bd1\u76f8\u5173\u7684c++\u4ee3\u7801\u548cruntime\u90e8\u7f72\u76f8\u5173\u7684c++\u4ee3\u7801 \u251c\u2500\u2500 tests \u5e94\u8be5\u662f\u6d4b\u8bd5\u76f8\u5173\u7684 \u251c\u2500\u2500 topi op\u7684\u5b9e\u73b0\u5728\u8fd9\u91cc\uff0c\u5305\u542b\u7684compute\u548cschedule\u5b9e\u73b0\uff0c\u5b9e\u73b0\u652f\u6301c++\u548cpython \u251c\u2500\u2500 tutorials \u4e00\u4e9bdemo \u251c\u2500\u2500 vta versatile tensor accelerator \u2514\u2500\u2500 web This folder contains TVM WebAssembly and Javascript backend through Emscripten \u8be6\u7ec6\u7ed3\u6784 \u00b6 python \u00b6 \u53ef\u4ee5\u7406\u89e3\u4e3a\u8f6f\u4ef6\u524d\u7aef\uff0cc++\u53ef\u4ee5\u7406\u89e3\u4e3a\u8f6f\u4ef6\u540e\u7aef\uff0cpython\u5b9e\u73b0\u4e86\u5bf9c++\u4ee3\u7801\u7684\u5c01\u88c5\uff0c\u53ef\u4ee5\u63a7\u5236\u7f16\u8bd1\u6d41\u7a0b \u251c\u2500\u2500 python \u2502 \u2514\u2500\u2500 tvm \u2502 \u251c\u2500\u2500 api_internal.py \u2502 \u251c\u2500\u2500 api.py \u751f\u6210tensor \u8f6c\u5230c++\u4e2d\u5b9e\u73b0 \u2502 \u251c\u2500\u2500 arith.py \u2502 \u251c\u2500\u2500 attrs.py \u2502 \u251c\u2500\u2500 autotvm \u2502 \u251c\u2500\u2500 build_module.py \u5305\u542b\u4e86tvm.build(),\u5229\u7528schedule,input tensor, output tensor, target \u6765\u751f\u6210tvm.module\uff0c \u540c\u65f6\u5305\u542b\u4e86tvm.lower(),\u8fd9\u662fbuild\u8fc7\u7a0b\u7684\u7b2c\u4e00\u6b65 \u2502 \u251c\u2500\u2500 codegen.py \u2502 \u251c\u2500\u2500 container.py \u2502 \u251c\u2500\u2500 contrib \u4e00\u4e9b\u975e\u6838\u5fc3\u7279\u6027\u7684API\uff0c\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u5c0f\u5de5\u5177\u5e93\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e9b\u5bf9\u7b2c\u4e09\u65b9\u5de5\u5177\u7684\u5305\u88c5 \u2502 \u251c\u2500\u2500 datatype.py \u2502 \u251c\u2500\u2500 error.py \u2502 \u251c\u2500\u2500 exec \u2502 \u251c\u2500\u2500 expr.py \u2502 \u251c\u2500\u2500 _ffi \u5728\u8fd9\u91cctvm\u5b9e\u73b0\u4e86\u5bf9python\u7684\u5305\u88c5,_LIB\u5b9e\u73b0\u5305\u542b\u5728\u8fd9\u91cc\u9762 \u2502 \u251c\u2500\u2500 generic.py \u2502 \u251c\u2500\u2500 hybrid \u2502 \u251c\u2500\u2500 __init_ .py \u2502 \u251c\u2500\u2500 intrin.py \u2502 \u251c\u2500\u2500 ir_builder.py \u2502 \u251c\u2500\u2500 ir_pass.py \u2502 \u251c\u2500\u2500 make.py \u2502 \u251c\u2500\u2500 module.py \u5b9e\u73b0\u4e86tvm.module\u7684\u5b9a\u4e49\uff0c module\u5305\u542b\u4e86\u4e00\u4e2a\u7f16\u8bd1\u597d\u7684func,\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570\u8c03\u7528\u8bed\u6cd5\u8fdb\u884c\u8c03\u7528 \u2502 \u251c\u2500\u2500 ndarray.py \u5b9e\u73b0\u4e86NDarray\u7c7b\uff0c\u4f46\u5b9e\u9645\u4e0a\u6587\u4ef6\u7684\u5927\u591a\u6570method\u4e0ectx\u6709\u5173\uff0c\u7528\u4e8e\u521b\u5efa\u4e0d\u540c\u7684ctx\u5b9e\u4f8b\uff0c\u4f30\u8ba1\u540e\u7eed\u4f1a\u6709\u547d\u540d\u4f18\u5316 \u2502 \u251c\u2500\u2500 node.py \u2502 \u251c\u2500\u2500 pyversion.py \u2502 \u251c\u2500\u2500 relay \u2502 \u2502 \u251c\u2500\u2500 backend \u2502 \u2502 \u251c\u2500\u2500 _base.py \u2502 \u2502 \u251c\u2500\u2500 base.py \u2502 \u2502 \u251c\u2500\u2500 _build_module.py \u2502 \u2502 \u251c\u2500\u2500 build_module.py relay \u7684build\u5165\u53e3 \u2502 \u2502 \u251c\u2500\u2500 contrib.py \u2502 \u2502 \u251c\u2500\u2500 debug.py \u2502 \u2502 \u251c\u2500\u2500 expr_functor.py \u2502 \u2502 \u251c\u2500\u2500 _expr.py \u2502 \u2502 \u251c\u2500\u2500 expr.py The expression nodes of Relay \u4ee5\u53ca\u5404\u79cd\u5404\u6837\u7684expr \u2502 \u2502 \u251c\u2500\u2500 expr.pyi \u2502 \u2502 \u251c\u2500\u2500 feature.py \u2502 \u2502 \u251c\u2500\u2500 frontend relay\u524d\u7aef\uff0c\u5305\u542btensorflow, caffe, mxnet \u7b49\u7f51\u7edc \u2502 \u2502 \u251c\u2500\u2500 grammar \u2502 \u2502 \u251c\u2500\u2500 image.py \u2502 \u2502 \u251c\u2500\u2500 __init_ .py \u2502 \u2502 \u251c\u2500\u2500 _make.py \u2502 \u2502 \u251c\u2500\u2500 _module.py \u2502 \u2502 \u251c\u2500\u2500 module.py \u2502 \u2502 \u251c\u2500\u2500 _module.pyi \u2502 \u2502 \u251c\u2500\u2500 nn.py \u2502 \u2502 \u251c\u2500\u2500 op \u2502 \u2502 \u251c\u2500\u2500 param_dict.py \u2502 \u2502 \u251c\u2500\u2500 _parser.py \u2502 \u2502 \u251c\u2500\u2500 parser.py \u2502 \u2502 \u251c\u2500\u2500 prelude.py \u2502 \u2502 \u251c\u2500\u2500 prelude.rly \u2502 \u2502 \u251c\u2500\u2500 quantize \u2502 \u2502 \u251c\u2500\u2500 scope_builder.py \u2502 \u2502 \u251c\u2500\u2500 _transform.py \u2502 \u2502 \u251c\u2500\u2500 transform.py \u2502 \u2502 \u251c\u2500\u2500 transform.pyi \u2502 \u2502 \u251c\u2500\u2500 ty.py \u2502 \u2502 \u251c\u2500\u2500 ty.pyi \u2502 \u2502 \u2514\u2500\u2500 vision.py \u2502 \u251c\u2500\u2500 rpc \u2502 \u251c\u2500\u2500 schedule.py \u5305\u542bclass schedule\u7684\u5b9a\u4e49\uff0ccreate_schedule\u901a\u8fc7node\u673a\u5236\u6765\u5b9e\u73b0c++\u7c7b\u578b\u5230python\u7c7b\u578b\u7684\u8f6c\u6362\u5e76\u8fd4\u56de\u4e00\u4e2aschedule\u5bf9\u8c61,c++\u4e2d\u4e5f\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684schedule\u5b9a\u4e49 \u2502 \u251c\u2500\u2500 stmt.py \u2502 \u251c\u2500\u2500 tag.py \u2502 \u251c\u2500\u2500 target.py \u2502 \u251c\u2500\u2500 tensor_intrin.py \u2502 \u251c\u2500\u2500 tensor.py tensor\u7684\u62bd\u8c61\uff0c\u4f8b\u5982A = tvm.placeholder((n,), name='A')\uff0c A\u5c31\u662f\u4e00\u4e2atensor\uff0c \u4e5f\u5305\u542boperation\u7684\u62bd\u8c61 tensor\u5177\u4f53\u5b9e\u73b0\u5728c++\u4e2d \u2502 \u2514\u2500\u2500 testing.py src \u00b6 \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 api c++\u5bf9\u4e0a\u5c42\u7684\u63a5\u53e3\uff0c\u6bcf\u4e2a\u63a5\u53e3\u90fd\u53ef\u4ee5\u5728python\u7aef\u8c03\u7528\uff0c\u5747\u901a\u8fc7TVM_REGISTER_API\u8fdb\u884c\u6ce8\u518c\uff0c \u5728python\u7aef\u901a\u8fc7_api_internal.\u8fdb\u884c\u8c03\u7528 \u2502 \u2502 \u251c\u2500\u2500 api_arith.cc \u2502 \u2502 \u251c\u2500\u2500 api_base.cc \u2502 \u2502 \u251c\u2500\u2500 api_codegen.cc \u2502 \u2502 \u251c\u2500\u2500 api_ir.cc \u2502 \u2502 \u251c\u2500\u2500 api_lang.cc \u5305\u542b\u521b\u5efatensor\u76f8\u5173\u7684api\u63a5\u53e3 \u2502 \u2502 \u251c\u2500\u2500 api_pass.cc \u2502 \u2502 \u251c\u2500\u2500 api_schedule.cc \u2502 \u2502 \u251c\u2500\u2500 api_test.cc \u2502 \u2502 \u2514\u2500\u2500 dsl_api.cc \u2502 \u251c\u2500\u2500 arithmetic \u2502 \u2502 \u251c\u2500\u2500 analyzer.cc \u2502 \u2502 \u251c\u2500\u2500 bound_deducer.cc \u2502 \u2502 \u251c\u2500\u2500 canonical_simplify.cc \u2502 \u2502 \u251c\u2500\u2500 compute_expr.h \u2502 \u2502 \u251c\u2500\u2500 const_fold.h \u2502 \u2502 \u251c\u2500\u2500 const_int_bound.cc \u2502 \u2502 \u251c\u2500\u2500 detect_linear_equation.cc \u2502 \u2502 \u251c\u2500\u2500 domain_touched.cc \u2502 \u2502 \u251c\u2500\u2500 int_op_overflow.h \u2502 \u2502 \u251c\u2500\u2500 int_set.cc \u2502 \u2502 \u251c\u2500\u2500 int_set.h \u2502 \u2502 \u251c\u2500\u2500 modular_set.cc \u2502 \u2502 \u251c\u2500\u2500 pattern_match.h \u2502 \u2502 \u251c\u2500\u2500 rewrite_simplify.cc \u2502 \u2502 \u251c\u2500\u2500 rewrite_simplify.h \u2502 \u2502 \u2514\u2500\u2500 stmt_simplify.cc CDLL \u2502 \u251c\u2500\u2500 autotvm \u2502 \u2502 \u251c\u2500\u2500 feature_visitor.cc \u2502 \u2502 \u251c\u2500\u2500 feature_visitor.h \u2502 \u2502 \u251c\u2500\u2500 touch_extractor.cc \u2502 \u2502 \u2514\u2500\u2500 touch_extractor.h \u2502 \u251c\u2500\u2500 codegen \u2502 \u2502 \u251c\u2500\u2500 build_common.h \u2502 \u2502 \u251c\u2500\u2500 build_module.cc \u2502 \u2502 \u251c\u2500\u2500 codegen_aocl.cc \u2502 \u2502 \u251c\u2500\u2500 codegen.cc \u2502 \u2502 \u251c\u2500\u2500 codegen_c.cc \u2502 \u2502 \u251c\u2500\u2500 codegen_c.h \u2502 \u2502 \u251c\u2500\u2500 codegen_c_host.cc \u2502 \u2502 \u251c\u2500\u2500 codegen_c_host.h \u2502 \u2502 \u251c\u2500\u2500 codegen_cuda.cc \u2502 \u2502 \u251c\u2500\u2500 codegen_cuda.h \u2502 \u2502 \u251c\u2500\u2500 codegen_metal.cc \u2502 \u2502 \u251c\u2500\u2500 codegen_metal.h \u2502 \u2502 \u251c\u2500\u2500 codegen_opencl.cc \u2502 \u2502 \u251c\u2500\u2500 codegen_opencl.h \u2502 \u2502 \u251c\u2500\u2500 codegen_opengl.cc \u2502 \u2502 \u251c\u2500\u2500 codegen_opengl.h \u2502 \u2502 \u251c\u2500\u2500 codegen_source_base.cc \u2502 \u2502 \u251c\u2500\u2500 codegen_source_base.h \u2502 \u2502 \u251c\u2500\u2500 codegen_vhls.cc \u2502 \u2502 \u251c\u2500\u2500 codegen_vhls.h \u2502 \u2502 \u251c\u2500\u2500 datatype \u2502 \u2502 \u2502 \u251c\u2500\u2500 registry.cc \u2502 \u2502 \u2502 \u2514\u2500\u2500 registry.h \u2502 \u2502 \u251c\u2500\u2500 intrin_rule_aocl.cc \u2502 \u2502 \u251c\u2500\u2500 intrin_rule.cc \u2502 \u2502 \u251c\u2500\u2500 intrin_rule_cuda.cc \u2502 \u2502 \u251c\u2500\u2500 intrin_rule.h \u2502 \u2502 \u251c\u2500\u2500 intrin_rule_metal.cc \u2502 \u2502 \u251c\u2500\u2500 intrin_rule_opencl.cc \u2502 \u2502 \u251c\u2500\u2500 intrin_rule_opengl.cc \u2502 \u2502 \u251c\u2500\u2500 intrin_rule_vhls.cc \u2502 \u2502 \u251c\u2500\u2500 llvm \u2502 \u2502 \u2502 \u251c\u2500\u2500 codegen_amdgpu.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 codegen_arm.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 codegen_cpu.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 codegen_cpu.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 codegen_llvm.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 codegen_llvm.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 codegen_nvptx.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 codegen_x86_64.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 intrin_rule_llvm.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 intrin_rule_llvm.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 intrin_rule_nvptx.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 intrin_rule_rocm.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 llvm_common.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 llvm_common.h \u2502 \u2502 \u2502 \u2514\u2500\u2500 llvm_module.cc \u2502 \u2502 \u251c\u2500\u2500 opt \u2502 \u2502 \u2502 \u251c\u2500\u2500 build_aocl_off.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 build_cuda_off.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 build_cuda_on.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 build_metal_off.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 build_opencl_off.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 build_opengl_off.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 build_rocm_off.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 build_sdaccel_off.cc \u2502 \u2502 \u2502 \u2514\u2500\u2500 README \u2502 \u2502 \u251c\u2500\u2500 source_module.cc \u2502 \u2502 \u251c\u2500\u2500 spirv \u2502 \u2502 \u2502 \u251c\u2500\u2500 build_vulkan.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 codegen_spirv.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 codegen_spirv.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 intrin_rule_spirv.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 ir_builder.cc \u2502 \u2502 \u2502 \u2514\u2500\u2500 ir_builder.h \u2502 \u2502 \u2514\u2500\u2500 stackvm \u2502 \u2502 \u251c\u2500\u2500 codegen_stackvm.cc \u2502 \u2502 \u2514\u2500\u2500 codegen_stackvm.h \u2502 \u251c\u2500\u2500 common \u2502 \u2502 \u251c\u2500\u2500 arena.h \u2502 \u2502 \u251c\u2500\u2500 base64.h \u2502 \u2502 \u251c\u2500\u2500 pipe.h \u2502 \u2502 \u251c\u2500\u2500 ring_buffer.h \u2502 \u2502 \u2514\u2500\u2500 socket.h \u2502 \u251c\u2500\u2500 contrib \u2502 \u2502 \u251c\u2500\u2500 cblas \u2502 \u2502 \u2502 \u251c\u2500\u2500 cblas.cc \u2502 \u2502 \u2502 \u2514\u2500\u2500 gemm_common.h \u2502 \u2502 \u251c\u2500\u2500 cublas \u2502 \u2502 \u2502 \u251c\u2500\u2500 cublas.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 cublas_utils.cc \u2502 \u2502 \u2502 \u2514\u2500\u2500 cublas_utils.h \u2502 \u2502 \u251c\u2500\u2500 cudnn \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv_forward.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 cudnn_utils.cc \u2502 \u2502 \u2502 \u2514\u2500\u2500 cudnn_utils.h \u2502 \u2502 \u251c\u2500\u2500 hybrid \u2502 \u2502 \u2502 \u251c\u2500\u2500 codegen_hybrid.cc \u2502 \u2502 \u2502 \u2514\u2500\u2500 codegen_hybrid.h \u2502 \u2502 \u251c\u2500\u2500 miopen \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv_forward.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 miopen_utils.cc \u2502 \u2502 \u2502 \u2514\u2500\u2500 miopen_utils.h \u2502 \u2502 \u251c\u2500\u2500 mps \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv.mm \u2502 \u2502 \u2502 \u251c\u2500\u2500 gemm.mm \u2502 \u2502 \u2502 \u251c\u2500\u2500 mps_utils.h \u2502 \u2502 \u2502 \u2514\u2500\u2500 mps_utils.mm \u2502 \u2502 \u251c\u2500\u2500 nnpack \u2502 \u2502 \u2502 \u251c\u2500\u2500 convolution.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 fully_connected.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 nnpack_utils.cc \u2502 \u2502 \u2502 \u2514\u2500\u2500 nnpack_utils.h \u2502 \u2502 \u251c\u2500\u2500 random \u2502 \u2502 \u2502 \u251c\u2500\u2500 mt_random_engine.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 random.cc \u2502 \u2502 \u2502 \u2514\u2500\u2500 sgx_random_engine.cc \u2502 \u2502 \u251c\u2500\u2500 rocblas \u2502 \u2502 \u2502 \u2514\u2500\u2500 rocblas.cc \u2502 \u2502 \u2514\u2500\u2500 sort \u2502 \u2502 \u2514\u2500\u2500 sort.cc \u2502 \u251c\u2500\u2500 lang \u2502 \u2502 \u251c\u2500\u2500 api_registry.cc \u2502 \u2502 \u251c\u2500\u2500 attr_functor.h \u2502 \u2502 \u251c\u2500\u2500 attrs.cc \u2502 \u2502 \u251c\u2500\u2500 buffer.cc \u2502 \u2502 \u251c\u2500\u2500 channel.cc \u2502 \u2502 \u251c\u2500\u2500 data_layout.cc \u2502 \u2502 \u251c\u2500\u2500 expr.cc \u2502 \u2502 \u251c\u2500\u2500 expr_operator.cc \u2502 \u2502 \u251c\u2500\u2500 ir.cc \u2502 \u2502 \u251c\u2500\u2500 lowered_func.cc \u2502 \u2502 \u251c\u2500\u2500 reflection.cc \u2502 \u2502 \u251c\u2500\u2500 target_info.cc \u2502 \u2502 \u2514\u2500\u2500 tensor.cc tensor\u8868\u8fbe\u7684\u5b9e\u73b0 \u5bf9\u5e94python\u4e2d\u7684tensor | \u5bf9\u5e94\u5934\u6587\u4ef6 \u2502 \u251c\u2500\u2500 op \u2502 \u2502 \u251c\u2500\u2500 compute_op.cc \u2502 \u2502 \u251c\u2500\u2500 compute_op.h \u2502 \u2502 \u251c\u2500\u2500 cross_thread_reduction.cc \u2502 \u2502 \u251c\u2500\u2500 extern_op.cc \u2502 \u2502 \u251c\u2500\u2500 hybrid_op.cc \u2502 \u2502 \u251c\u2500\u2500 hybrid_op.h \u2502 \u2502 \u251c\u2500\u2500 op_util.cc \u2502 \u2502 \u251c\u2500\u2500 op_util.h \u2502 \u2502 \u251c\u2500\u2500 placeholder_op.cc \u2502 \u2502 \u251c\u2500\u2500 scan_op.cc \u2502 \u2502 \u251c\u2500\u2500 tensor_compute_op.cc \u2502 \u2502 \u2514\u2500\u2500 tensorize.cc \u2502 \u251c\u2500\u2500 pass \u2502 \u2502 \u251c\u2500\u2500 arg_binder.cc \u2502 \u2502 \u251c\u2500\u2500 arg_binder.h \u2502 \u2502 \u251c\u2500\u2500 bound_checker.cc \u2502 \u2502 \u251c\u2500\u2500 combine_context_call.cc \u2502 \u2502 \u251c\u2500\u2500 coproc_sync.cc \u2502 \u2502 \u251c\u2500\u2500 detect_device.cc \u2502 \u2502 \u251c\u2500\u2500 inject_copy_intrin.cc \u2502 \u2502 \u251c\u2500\u2500 inject_double_buffer.cc \u2502 \u2502 \u251c\u2500\u2500 inject_prefetch.cc \u2502 \u2502 \u251c\u2500\u2500 inject_virtual_thread.cCDLLc \u2502 \u2502 \u251c\u2500\u2500 inline.cc \u2502 \u2502 \u251c\u2500\u2500 ir_deep_compare.cc \u2502 \u2502 \u251c\u2500\u2500 ir_mutator.cc \u2502 \u2502 \u251c\u2500\u2500 ir_util.cc \u2502 \u2502 \u251c\u2500\u2500 ir_util.h \u2502 \u2502 \u251c\u2500\u2500 ir_visitor.cc \u2502 \u2502 \u251c\u2500\u2500 lift_attr_scope.cc \u2502 \u2502 \u251c\u2500\u2500 loop_partition.cc \u2502 \u2502 \u251c\u2500\u2500 lower_custom_datatypes.cc \u2502 \u2502 \u251c\u2500\u2500 lower_intrin.cc \u2502 \u2502 \u251c\u2500\u2500 lower_thread_allreduce.cc \u2502 \u2502 \u251c\u2500\u2500 lower_tvm_builtin.cc \u2502 \u2502 \u251c\u2500\u2500 lower_warp_memory.cc \u2502 \u2502 \u251c\u2500\u2500 make_api.cc \u2502 \u2502 \u251c\u2500\u2500 narrow_channel_access.cc \u2502 \u2502 \u251c\u2500\u2500 remap_thread_axis.cc \u2502 \u2502 \u251c\u2500\u2500 remove_no_op.cc \u2502 \u2502 \u251c\u2500\u2500 rewrite_unsafe_select.cc \u2502 \u2502 \u251c\u2500\u2500 simple_passes.cc \u2502 \u2502 \u251c\u2500\u2500 split_host_device.cc \u2502 \u2502 \u251c\u2500\u2500 split_pipeline.cc \u2502 \u2502 \u251c\u2500\u2500 ssa.cc \u2502 \u2502 \u251c\u2500\u2500 storage_access.cc \u2502 \u2502 \u251c\u2500\u2500 storage_access.h \u2502 \u2502 \u251c\u2500\u2500 storage_flatten.cc \u2502 \u2502 \u251c\u2500\u2500 storage_rewrite.cc \u2502 \u2502 \u251c\u2500\u2500 storage_sync.cc \u2502 \u2502 \u251c\u2500\u2500 unroll_loop.cc \u2502 \u2502 \u251c\u2500\u2500 vectorize_loop.cc \u2502 \u2502 \u251c\u2500\u2500 verify_gpu_code.cc \u2502 \u2502 \u2514\u2500\u2500 verify_memory.cc \u2502 \u251c\u2500\u2500 relay \u7ba1\u7406\u8ba1\u7b97\u56fe\u7684\u7ec4\u4ef6\uff08\u63d0\u4f9b\u4e00\u79cd\u8ba1\u7b97\u56fe\u7684\u8868\u8fbe\uff0c\u5373IR\uff09\uff0c\u8ba1\u7b97\u56fe\u4e2d\u7684node\u4f7f\u7528src\u76ee\u5f55\u4e0b\u7684\u4e00\u4e9b\u57fa\u7840\u67b6\u6784\u8fdb\u884c\u7f16\u8bd1\u548c\u6267\u884c \u2502 \u2502 \u251c\u2500\u2500 backend \u2502 \u2502 \u2502 \u251c\u2500\u2500 build_module.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 compile_engine.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 compile_engine.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 graph_plan_memory.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 graph_runtime_codegen.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 interpreter.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 param_dict.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 param_dict.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 utils.h \u2502 \u2502 \u2502 \u2514\u2500\u2500 vm \u2502 \u2502 \u2502 \u251c\u2500\u2500 compiler.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 inline_primitives.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 lambda_lift.cc \u2502 \u2502 \u2502 \u2514\u2500\u2500 vm.cc \u2502 \u2502 \u251c\u2500\u2500 ir \u2502 \u2502 \u2502 \u251c\u2500\u2500 adt.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 alpha_equal.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 base.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 doc.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 doc.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 error.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 expr.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 expr_functor.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 hash.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 module.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 op.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 pattern_functor.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 pretty_printer.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 type.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 type_functor.cc \u2502 \u2502 \u2502 \u2514\u2500\u2500 type_functor.h \u2502 \u2502 \u251c\u2500\u2500 op \u2502 \u2502 \u2502 \u251c\u2500\u2500 algorithm \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 argsort.cc \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 topk.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 annotation \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 annotation.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 debug.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 device_copy.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 image \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 resize.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 nn \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 convolution.cc \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 nn.cc \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 pad.cc \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 pooling.cc \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 upsampling.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 op_common.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 tensor \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 binary.cc \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 reduce.cc \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 transform.cc \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 unary.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 type_relations.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 type_relations.h \u2502 \u2502 \u2502 \u2514\u2500\u2500 vision \u2502 \u2502 \u2502 \u251c\u2500\u2500 multibox_op.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 nms.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 rcnn_op.cc \u2502 \u2502 \u2502 \u2514\u2500\u2500 yolo.cc \u2502 \u2502 \u2514\u2500\u2500 pass \u2502 \u2502 \u251c\u2500\u2500 alter_op_layout.cc \u2502 \u2502 \u251c\u2500\u2500 alter_op_layout.h \u2502 \u2502 \u251c\u2500\u2500 canonicalize_cast.cc \u2502 \u2502 \u251c\u2500\u2500 canonicalize_ops.cc \u2502 \u2502 \u251c\u2500\u2500 combine_parallel_conv2d.cc \u2502 \u2502 \u251c\u2500\u2500 dead_code.cc \u2502 \u2502 \u251c\u2500\u2500 de_duplicate.cc \u2502 \u2502 \u251c\u2500\u2500 dependency_graph.cc \u2502 \u2502 \u251c\u2500\u2500 dependency_graph.h \u2502 \u2502 \u251c\u2500\u2500 device_annotation.cc \u2502 \u2502 \u251c\u2500\u2500 eliminate_common_subexpr.cc \u2502 \u2502 \u251c\u2500\u2500 eta_expand.cc \u2502 \u2502 \u251c\u2500\u2500 expr_subst.cc \u2502 \u2502 \u251c\u2500\u2500 expr_subst.h \u2502 \u2502 \u251c\u2500\u2500 feature.cc \u2502 \u2502 \u251c\u2500\u2500 fold_constant.cc \u2502 \u2502 \u251c\u2500\u2500 fold_scale_axis.cc \u2502 \u2502 \u251c\u2500\u2500 forward_rewrite.cc \u2502 \u2502 \u251c\u2500\u2500 fuse_ops.cc \u2502 \u2502 \u251c\u2500\u2500 gradient.cc \u2502 \u2502 \u251c\u2500\u2500 kind_check.cc \u2502 \u2502 \u251c\u2500\u2500 let_list.h \u2502 \u2502 \u251c\u2500\u2500 mac_count.cc \u2502 \u2502 \u251c\u2500\u2500 match_exhaustion.cc \u2502 \u2502 \u251c\u2500\u2500 partial_eval.cc \u2502 \u2502 \u251c\u2500\u2500 pass_manager.cc \u2502 \u2502 \u251c\u2500\u2500 pass_util.h \u2502 \u2502 \u251c\u2500\u2500 pattern_util.h \u2502 \u2502 \u251c\u2500\u2500 quantize.cc \u2502 \u2502 \u251c\u2500\u2500 quantize.h \u2502 \u2502 \u251c\u2500\u2500 simplify_inference.cc \u2502 \u2502 \u251c\u2500\u2500 to_a_normal_form.cc \u2502 \u2502 \u251c\u2500\u2500 to_cps.cc \u2502 \u2502 \u251c\u2500\u2500 to_graph_normal_form.cc \u2502 \u2502 \u251c\u2500\u2500 type_infer.cc \u2502 \u2502 \u251c\u2500\u2500 type_solver.cc \u2502 \u2502 \u251c\u2500\u2500 type_solver.h \u2502 \u2502 \u251c\u2500\u2500 util.cc \u2502 \u2502 \u2514\u2500\u2500 well_formed.cc \u2502 \u251c\u2500\u2500 runtime \u2502 \u2502 \u251c\u2500\u2500 builtin_fp16.cc \u2502 \u2502 \u251c\u2500\u2500 c_dsl_api.cc \u2502 \u2502 \u251c\u2500\u2500 cpu_device_api.cc \u2502 \u2502 \u251c\u2500\u2500 c_runtime_api.cc \u2502 \u2502 \u251c\u2500\u2500 cuda cuda runtime \u63a5\u53e3\u5b9e\u73b0 \u2502 \u2502 \u251c\u2500\u2500 dsl_api.h \u2502 \u2502 \u251c\u2500\u2500 dso_module.cc \u2502 \u2502 \u251c\u2500\u2500 file_util.cc \u2502 \u2502 \u251c\u2500\u2500 file_util.h \u2502 \u2502 \u251c\u2500\u2500 graph \u2502 \u2502 \u251c\u2500\u2500 meta_data.h \u2502 \u2502 \u251c\u2500\u2500 metal \u2502 \u2502 \u251c\u2500\u2500 module.cc \u2502 \u2502 \u251c\u2500\u2500 module_util.cc \u2502 \u2502 \u251c\u2500\u2500 module_util.h \u2502 \u2502 \u251c\u2500\u2500 ndarray.cc \u2502 \u2502 \u251c\u2500\u2500 opencl opencl runtime \u63a5\u53e3\u5b9e\u73b0 \u2502 \u2502 \u251c\u2500\u2500 opengl opengl runtime \u63a5\u53e3\u5b9e\u73b0 \u2502 \u2502 \u251c\u2500\u2500 pack_func.h PackedFunc \u5b9a\u4e49\u4e0e\u5b9e\u73b0 \u2502 \u2502 \u251c\u2500\u2500 registry.cc PackedFunc \u76f8\u5173 \u2502 \u2502 \u251c\u2500\u2500 rocm rocm runtime \u63a5\u53e3\u5b9e\u73b0 \u2502 \u2502 \u251c\u2500\u2500 rpc rpc runtime\u63a5\u53e3\u5b9e\u73b0 \u2502 \u2502 \u251c\u2500\u2500 runtime_base.h \u2502 \u2502 \u251c\u2500\u2500 sgx \u2502 \u2502 \u251c\u2500\u2500 stackvm \u2502 \u2502 \u251c\u2500\u2500 system_lib_module.cc \u2502 \u2502 \u251c\u2500\u2500 threading_backend.cc \u2502 \u2502 \u251c\u2500\u2500 thread_pool.cc \u2502 \u2502 \u251c\u2500\u2500 thread_storage_scope.h \u2502 \u2502 \u251c\u2500\u2500 vm \u2502 \u2502 \u251c\u2500\u2500 vulkan \u2502 \u2502 \u251c\u2500\u2500 workspace_pool.cc \u2502 \u2502 \u2514\u2500\u2500 workspace_pool.h \u2502 \u2514\u2500\u2500 schedule \u2502 \u251c\u2500\u2500 auto_inline_elem_wise.cc \u2502 \u251c\u2500\u2500 bound.cc bound\u5b9e\u73b0\uff0cbound infrence\u662f\u63a8\u65ad\u51fa\u6240\u6709\u5faa\u73af\u8fb9\u754c\u548c\u4e2d\u95f4\u7f13\u51b2\u533a\u5927\u5c0f\u7684\u8fc7\u7a0b \u2502 \u251c\u2500\u2500 graph.cc \u4e0ebound\u6709\u5173 \u2502 \u251c\u2500\u2500 graph.h \u2502 \u251c\u2500\u2500 message_passing.cc \u4e0ebound\u6709\u5173 \u2502 \u251c\u2500\u2500 message_passing.h \u2502 \u251c\u2500\u2500 schedule_dataflow_rewrite.cc \u2502 \u251c\u2500\u2500 schedule_lang.cc \u2502 \u2514\u2500\u2500 schedule_ops.cc \u5b9a\u4e49ScheduleOps(),\u8fd4\u56destmt topi \u00b6 \u251c\u2500\u2500 topi \u2502 \u251c\u2500\u2500 include \u2502 \u2502 \u2514\u2500\u2500 topi \u2502 \u2502 \u251c\u2500\u2500 broadcast.h \u2502 \u2502 \u251c\u2500\u2500 contrib \u2502 \u2502 \u2502 \u251c\u2500\u2500 cublas.h \u2502 \u2502 \u2502 \u2514\u2500\u2500 rocblas.h \u2502 \u2502 \u251c\u2500\u2500 cuda \u2502 \u2502 \u2502 \u251c\u2500\u2500 dense.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 extern.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 injective.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 normalization.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 pooling.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 reduction.h \u2502 \u2502 \u2502 \u2514\u2500\u2500 softmax.h \u2502 \u2502 \u251c\u2500\u2500 detail \u2502 \u2502 \u2502 \u251c\u2500\u2500 array_utils.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 broadcast.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 constant_utils.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 extern.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 fuse.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 pad_utils.h \u2502 \u2502 \u2502 \u2514\u2500\u2500 ravel_unravel.h \u2502 \u2502 \u251c\u2500\u2500 elemwise.h \u2502 \u2502 \u251c\u2500\u2500 generic \u2502 \u2502 \u2502 \u251c\u2500\u2500 default.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 extern.h \u2502 \u2502 \u2502 \u2514\u2500\u2500 injective.h \u2502 \u2502 \u251c\u2500\u2500 image \u2502 \u2502 \u2502 \u2514\u2500\u2500 resize.h \u2502 \u2502 \u251c\u2500\u2500 nn \u2502 \u2502 \u2502 \u251c\u2500\u2500 batch_matmul.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 bias_add.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 bnn.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 dense.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 dilate.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 flatten.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 l2_normalize.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 local_response_norm.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 mapping.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 pooling.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 softmax.h \u2502 \u2502 \u2502 \u2514\u2500\u2500 upsampling.h \u2502 \u2502 \u251c\u2500\u2500 nn.h \u2502 \u2502 \u251c\u2500\u2500 reduction.h \u2502 \u2502 \u251c\u2500\u2500 rocm \u2502 \u2502 \u2502 \u251c\u2500\u2500 dense.h \u2502 \u2502 \u2502 \u2514\u2500\u2500 normalization.h \u2502 \u2502 \u251c\u2500\u2500 tags.h \u2502 \u2502 \u251c\u2500\u2500 transform.h \u2502 \u2502 \u251c\u2500\u2500 vision \u2502 \u2502 \u2502 \u2514\u2500\u2500 reorg.h \u2502 \u2502 \u2514\u2500\u2500 x86 \u2502 \u2502 \u251c\u2500\u2500 bnn.h \u2502 \u2502 \u251c\u2500\u2500 default.h \u2502 \u2502 \u2514\u2500\u2500 injective.h \u2502 \u251c\u2500\u2500 python \u2502 \u2502 \u251c\u2500\u2500 setup.py \u2502 \u2502 \u2514\u2500\u2500 topi \u2502 \u2502 \u251c\u2500\u2500 arm_cpu \u2502 \u2502 \u2502 \u251c\u2500\u2500 bitserial_conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 bitserial_dense.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d_transpose.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 depthwise_conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u2514\u2500\u2500 injective.py \u2502 \u2502 \u251c\u2500\u2500 broadcast.py \u2502 \u2502 \u251c\u2500\u2500 cpp.py \u2502 \u2502 \u251c\u2500\u2500 cuda \u2502 \u2502 \u2502 \u251c\u2500\u2500 batch_matmul.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d_direct.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d_hwcn.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d_int8.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d_transpose_nchw.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d_winograd.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 deformable_conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 dense.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 depthwise_conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 extern.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 group_conv2d_nchw.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u251c\u2500\u2500 injective.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 nms.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 nn.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 pooling.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 rcnn \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 proposal.py \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 pycache \u2502 \u2502 \u2502 \u251c\u2500\u2500 reduction.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 softmax.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 sort.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssd \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 multibox.py \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 pycache \u2502 \u2502 \u2502 \u251c\u2500\u2500 tensor_intrin.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 vision.py \u2502 \u2502 \u251c\u2500\u2500 generic \u2502 \u2502 \u2502 \u251c\u2500\u2500 extern.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u251c\u2500\u2500 injective.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 nn.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 sort.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 vision.py \u2502 \u2502 \u251c\u2500\u2500 generic_op_impl.py \u2502 \u2502 \u251c\u2500\u2500 hls \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u251c\u2500\u2500 injective.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 nn.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 pycache \u2502 \u2502 \u251c\u2500\u2500 image \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u2514\u2500\u2500 resize.py \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u251c\u2500\u2500 intel_graphics \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u2514\u2500\u2500 pycache \u2502 \u2502 \u251c\u2500\u2500 mali \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 dense.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 depthwise_conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u2514\u2500\u2500 pycache \u2502 \u2502 \u251c\u2500\u2500 math.py \u2502 \u2502 \u251c\u2500\u2500 nn \u2502 \u2502 \u2502 \u251c\u2500\u2500 batch_matmul.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 bitserial_conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 bitserial_dense.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 bitserial_util.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 bnn.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d_transpose.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 deformable_conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 dense.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 depthwise_conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 dilate.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 elemwise.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 flatten.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u251c\u2500\u2500 l2_normalize.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 local_response_norm.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 mapping.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 pad.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 pooling.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 softmax.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 upsampling.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 util.py \u2502 \u2502 \u251c\u2500\u2500 opengl \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d_nchw.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 dense.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u251c\u2500\u2500 injective.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 pooling.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 softmax.py \u2502 \u2502 \u251c\u2500\u2500 reduction.py \u2502 \u2502 \u251c\u2500\u2500 rocm \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 dense.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u251c\u2500\u2500 nn.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 pycache \u2502 \u2502 \u251c\u2500\u2500 sort.py \u2502 \u2502 \u251c\u2500\u2500 sparse \u2502 \u2502 \u2502 \u251c\u2500\u2500 csrmm.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 csrmv.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 dense.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u2514\u2500\u2500 pycache \u2502 \u2502 \u251c\u2500\u2500 tag.py \u2502 \u2502 \u251c\u2500\u2500 tensor.py \u2502 \u2502 \u251c\u2500\u2500 testing \u2502 \u2502 \u2502 \u251c\u2500\u2500 batch_matmul.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 bilinear_resize_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d_hwcn_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d_nchw_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d_nhwc_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d_transpose_nchw_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 deformable_conv2d_nchw_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 depthwise_conv2d_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 dilate_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 gather_nd_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u251c\u2500\u2500 l2_normalize_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 lrn_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 reorg_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 roi_align_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 roi_pool_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 sequence_mask_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 slice_axis_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 softmax_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 strided_slice_python.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 upsampling_python.py \u2502 \u2502 \u251c\u2500\u2500 transform.py \u2502 \u2502 \u251c\u2500\u2500 util.py \u2502 \u2502 \u251c\u2500\u2500 vision \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u251c\u2500\u2500 nms.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 rcnn \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 proposal.py \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 roi_align.py \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 roi_pool.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 reorg.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 ssd \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u251c\u2500\u2500 multibox.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 pycache \u2502 \u2502 \u2514\u2500\u2500 x86 \u2502 \u2502 \u251c\u2500\u2500 batch_matmul.py \u2502 \u2502 \u251c\u2500\u2500 binarize_pack.py \u2502 \u2502 \u251c\u2500\u2500 binary_dense.py \u2502 \u2502 \u251c\u2500\u2500 bitserial_conv2d.py \u2502 \u2502 \u251c\u2500\u2500 bitserial_dense.py \u2502 \u2502 \u251c\u2500\u2500 check_targets.py \u2502 \u2502 \u251c\u2500\u2500 conv2d_avx_1x1.py \u2502 \u2502 \u251c\u2500\u2500 conv2d_avx_common.py \u2502 \u2502 \u251c\u2500\u2500 conv2d.py \u2502 \u2502 \u251c\u2500\u2500 dense.py \u2502 \u2502 \u251c\u2500\u2500 depthwise_conv2d.py \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u251c\u2500\u2500 injective.py \u2502 \u2502 \u251c\u2500\u2500 nn.py \u2502 \u2502 \u251c\u2500\u2500 pooling.py \u2502 \u2502 \u251c\u2500\u2500 roi_align.py \u2502 \u2502 \u251c\u2500\u2500 tensor_intrin.py \u2502 \u2502 \u2514\u2500\u2500 util.py \u2502 \u251c\u2500\u2500 recipe \u2502 \u2502 \u251c\u2500\u2500 broadcast \u2502 \u2502 \u2502 \u2514\u2500\u2500 test_broadcast_map.py \u2502 \u2502 \u251c\u2500\u2500 conv \u2502 \u2502 \u2502 \u251c\u2500\u2500 depthwise_conv2d_test.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_conv2d_hwcn_map.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 test_conv_int8_intel.py \u2502 \u2502 \u251c\u2500\u2500 gemm \u2502 \u2502 \u2502 \u251c\u2500\u2500 android_gemm_square.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 cuda_gemm_square.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 gemm_int8.py \u2502 \u2502 \u251c\u2500\u2500 reduce \u2502 \u2502 \u2502 \u2514\u2500\u2500 test_reduce_map.py \u2502 \u2502 \u2514\u2500\u2500 rnn \u2502 \u2502 \u251c\u2500\u2500 lstm.py \u2502 \u2502 \u2514\u2500\u2500 matexp.py \u2502 \u251c\u2500\u2500 src \u2502 \u2502 \u2514\u2500\u2500 topi.cc \u2502 \u2514\u2500\u2500 tests","title":"directory-structure"},{"location":"tvm/codebase-struct.html#directory-structure","text":"directory-structure \u4e3b\u76ee\u5f55\u7ed3\u6784 \u8be6\u7ec6\u7ed3\u6784 python src topi \u6240\u6709\u590d\u6742\u4ee3\u7801\u90fd\u5728\uff43++\u4e2d\u5b9e\u73b0\uff0cpython\u662f\u4e3a\u4e86\u7528\u6237\u63a5\u53e3\uff0c\u4f46\u662fc++\u4e5f\u53ef\u4ee5\u8c03\u7528python\u91cc\u9762\u7684\u63a5\u53e3","title":"directory-structure"},{"location":"tvm/codebase-struct.html#_1","text":"\u251c\u2500\u2500 3rdparty \u7b2c\u4e09\u65b9\u8f6f\u4ef6\u5e93\uff0c\u5176\u4e2d\u4e00\u4e9b\u4ee5git submodule\u7684\u5f62\u5f0f\u5305\u542b\uff0c \u5305\u62ec HalideIR, rang, dlpack\u7b49\u4e00\u4e9b\u5f00\u6e90\u8f6f\u4ef6 \u251c\u2500\u2500 apps \u5305\u542b\u4e86\u4e00\u4e9b\u57fa\u4e8eTVM\u7684\u6269\u5c55\u9879\u76ee\uff0c\u4e5f\u4f5c\u4e3a\u5982\u4f55\u4f7f\u7528tvm\u7684\u4f8b\u7a0b \u251c\u2500\u2500 cmake tvm\u7f16\u8bd1\u7528\u7684cmake \u251c\u2500\u2500 conda conda\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u8f6f\u4ef6\u5305\u7ba1\u7406\u7cfb\u7edf\u548c\u73af\u5883\u7ba1\u7406\u7cfb\u7edf\uff0c\u7528\u4e8e\u5b89\u88c5\u591a\u4e2a\u7248\u672c\u7684\u8f6f\u4ef6\u5305\u53ca\u5176\u4f9d\u8d56\u5173\u7cfb\uff0c\u5e76\u5728\u5b83\u4eec\u4e4b\u95f4\u8f7b\u677e\u5207\u6362,\u8fd9\u91cc\u5b9e\u73b0\u4e86tvm\u7684\u5b89\u88c5\u7684\u5305\u88c5\uff0c\u4f7f\u5f97tvm\u5b89\u88c5\u66f4\u52a0\u65b9\u4fbf \u251c\u2500\u2500 docker \u57fa\u4e8edocker\u7684tvm\u5feb\u901f\u90e8\u7f72\uff0c\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684dockerfile\u548c\u5b89\u88c5\u811a\u672c\uff0c\u80fd\u591f\u6839\u636edockerfile\u76f4\u63a5\u751f\u6210\u76f8\u5e94\u7684\u955c\u50cf\uff0c\u7701\u53bb\u4e86\u5b89\u88c5\u4f9d\u8d56\u73af\u5883\u7684\u70e6\u607c \u251c\u2500\u2500 docs \u57fa\u4e8erst\u7684\u6587\u6863\uff0c\u548c\u5b98\u7f51\u7684doc\u662f\u4e00\u6837\u7684 \u251c\u2500\u2500 golang tvm runtime\u7684golang\u63a5\u53e3 \u251c\u2500\u2500 include src \u76ee\u5f55\u4e0b\u7684cc\u6587\u4ef6\u5bf9\u5e94\u7684\u5934\u6587\u4ef6 \u251c\u2500\u2500 jvm tvm runtime\u7684java\u63a5\u53e3 \u251c\u2500\u2500 nnvm nnvm\u5b9e\u73b0\uff0c\u6211\u4eec\u4f7f\u7528relay \u251c\u2500\u2500 python \u53ef\u4ee5\u7406\u89e3\u4e3a\u8f6f\u4ef6\u524d\u7aef\uff0cc++\u53ef\u4ee5\u7406\u89e3\u4e3a\u8f6f\u4ef6\u540e\u7aef\uff0cpython\u5b9e\u73b0\u4e86\u5bf9c++\u4ee3\u7801\u7684\u5c01\u88c5\uff0c\u53ef\u4ee5\u63a7\u5236\u7f16\u8bd1\u6d41\u7a0b \u251c\u2500\u2500 rust Rust\u662f\u4e00\u95e8\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\uff0c\u4e13\u6ce8\u4e8e\u5b89\u5168\uff0c\u5c24\u5176\u662f\u5e76\u53d1\u5b89\u5168\uff0c\u652f\u6301\u51fd\u6570\u5f0f\u548c\u547d\u4ee4\u5f0f\u4ee5\u53ca\u6cdb\u578b\u7b49\u7f16\u7a0b\u8303\u5f0f\u7684\u591a\u8303\u5f0f\u8bed\u8a00,\u653e\u5728tvm\u4e2d\u4e0d\u77e5\u9053\u662f\u8981\u505a\u4ec0\u4e48\uff0c\u4f3c\u4e4e\u662f\u4e0d\u5f71\u54cd\u6211\u4eec\u4e86\u89e3tvm\u7684\u7f16\u8bd1\u8fc7\u7a0b \u251c\u2500\u2500 src op\u7f16\u8bd1\u76f8\u5173\u7684c++\u4ee3\u7801\u548cruntime\u90e8\u7f72\u76f8\u5173\u7684c++\u4ee3\u7801 \u251c\u2500\u2500 tests \u5e94\u8be5\u662f\u6d4b\u8bd5\u76f8\u5173\u7684 \u251c\u2500\u2500 topi op\u7684\u5b9e\u73b0\u5728\u8fd9\u91cc\uff0c\u5305\u542b\u7684compute\u548cschedule\u5b9e\u73b0\uff0c\u5b9e\u73b0\u652f\u6301c++\u548cpython \u251c\u2500\u2500 tutorials \u4e00\u4e9bdemo \u251c\u2500\u2500 vta versatile tensor accelerator \u2514\u2500\u2500 web This folder contains TVM WebAssembly and Javascript backend through Emscripten","title":"\u4e3b\u76ee\u5f55\u7ed3\u6784"},{"location":"tvm/codebase-struct.html#_2","text":"","title":"\u8be6\u7ec6\u7ed3\u6784"},{"location":"tvm/codebase-struct.html#python","text":"\u53ef\u4ee5\u7406\u89e3\u4e3a\u8f6f\u4ef6\u524d\u7aef\uff0cc++\u53ef\u4ee5\u7406\u89e3\u4e3a\u8f6f\u4ef6\u540e\u7aef\uff0cpython\u5b9e\u73b0\u4e86\u5bf9c++\u4ee3\u7801\u7684\u5c01\u88c5\uff0c\u53ef\u4ee5\u63a7\u5236\u7f16\u8bd1\u6d41\u7a0b \u251c\u2500\u2500 python \u2502 \u2514\u2500\u2500 tvm \u2502 \u251c\u2500\u2500 api_internal.py \u2502 \u251c\u2500\u2500 api.py \u751f\u6210tensor \u8f6c\u5230c++\u4e2d\u5b9e\u73b0 \u2502 \u251c\u2500\u2500 arith.py \u2502 \u251c\u2500\u2500 attrs.py \u2502 \u251c\u2500\u2500 autotvm \u2502 \u251c\u2500\u2500 build_module.py \u5305\u542b\u4e86tvm.build(),\u5229\u7528schedule,input tensor, output tensor, target \u6765\u751f\u6210tvm.module\uff0c \u540c\u65f6\u5305\u542b\u4e86tvm.lower(),\u8fd9\u662fbuild\u8fc7\u7a0b\u7684\u7b2c\u4e00\u6b65 \u2502 \u251c\u2500\u2500 codegen.py \u2502 \u251c\u2500\u2500 container.py \u2502 \u251c\u2500\u2500 contrib \u4e00\u4e9b\u975e\u6838\u5fc3\u7279\u6027\u7684API\uff0c\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u5c0f\u5de5\u5177\u5e93\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e9b\u5bf9\u7b2c\u4e09\u65b9\u5de5\u5177\u7684\u5305\u88c5 \u2502 \u251c\u2500\u2500 datatype.py \u2502 \u251c\u2500\u2500 error.py \u2502 \u251c\u2500\u2500 exec \u2502 \u251c\u2500\u2500 expr.py \u2502 \u251c\u2500\u2500 _ffi \u5728\u8fd9\u91cctvm\u5b9e\u73b0\u4e86\u5bf9python\u7684\u5305\u88c5,_LIB\u5b9e\u73b0\u5305\u542b\u5728\u8fd9\u91cc\u9762 \u2502 \u251c\u2500\u2500 generic.py \u2502 \u251c\u2500\u2500 hybrid \u2502 \u251c\u2500\u2500 __init_ .py \u2502 \u251c\u2500\u2500 intrin.py \u2502 \u251c\u2500\u2500 ir_builder.py \u2502 \u251c\u2500\u2500 ir_pass.py \u2502 \u251c\u2500\u2500 make.py \u2502 \u251c\u2500\u2500 module.py \u5b9e\u73b0\u4e86tvm.module\u7684\u5b9a\u4e49\uff0c module\u5305\u542b\u4e86\u4e00\u4e2a\u7f16\u8bd1\u597d\u7684func,\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570\u8c03\u7528\u8bed\u6cd5\u8fdb\u884c\u8c03\u7528 \u2502 \u251c\u2500\u2500 ndarray.py \u5b9e\u73b0\u4e86NDarray\u7c7b\uff0c\u4f46\u5b9e\u9645\u4e0a\u6587\u4ef6\u7684\u5927\u591a\u6570method\u4e0ectx\u6709\u5173\uff0c\u7528\u4e8e\u521b\u5efa\u4e0d\u540c\u7684ctx\u5b9e\u4f8b\uff0c\u4f30\u8ba1\u540e\u7eed\u4f1a\u6709\u547d\u540d\u4f18\u5316 \u2502 \u251c\u2500\u2500 node.py \u2502 \u251c\u2500\u2500 pyversion.py \u2502 \u251c\u2500\u2500 relay \u2502 \u2502 \u251c\u2500\u2500 backend \u2502 \u2502 \u251c\u2500\u2500 _base.py \u2502 \u2502 \u251c\u2500\u2500 base.py \u2502 \u2502 \u251c\u2500\u2500 _build_module.py \u2502 \u2502 \u251c\u2500\u2500 build_module.py relay \u7684build\u5165\u53e3 \u2502 \u2502 \u251c\u2500\u2500 contrib.py \u2502 \u2502 \u251c\u2500\u2500 debug.py \u2502 \u2502 \u251c\u2500\u2500 expr_functor.py \u2502 \u2502 \u251c\u2500\u2500 _expr.py \u2502 \u2502 \u251c\u2500\u2500 expr.py The expression nodes of Relay \u4ee5\u53ca\u5404\u79cd\u5404\u6837\u7684expr \u2502 \u2502 \u251c\u2500\u2500 expr.pyi \u2502 \u2502 \u251c\u2500\u2500 feature.py \u2502 \u2502 \u251c\u2500\u2500 frontend relay\u524d\u7aef\uff0c\u5305\u542btensorflow, caffe, mxnet \u7b49\u7f51\u7edc \u2502 \u2502 \u251c\u2500\u2500 grammar \u2502 \u2502 \u251c\u2500\u2500 image.py \u2502 \u2502 \u251c\u2500\u2500 __init_ .py \u2502 \u2502 \u251c\u2500\u2500 _make.py \u2502 \u2502 \u251c\u2500\u2500 _module.py \u2502 \u2502 \u251c\u2500\u2500 module.py \u2502 \u2502 \u251c\u2500\u2500 _module.pyi \u2502 \u2502 \u251c\u2500\u2500 nn.py \u2502 \u2502 \u251c\u2500\u2500 op \u2502 \u2502 \u251c\u2500\u2500 param_dict.py \u2502 \u2502 \u251c\u2500\u2500 _parser.py \u2502 \u2502 \u251c\u2500\u2500 parser.py \u2502 \u2502 \u251c\u2500\u2500 prelude.py \u2502 \u2502 \u251c\u2500\u2500 prelude.rly \u2502 \u2502 \u251c\u2500\u2500 quantize \u2502 \u2502 \u251c\u2500\u2500 scope_builder.py \u2502 \u2502 \u251c\u2500\u2500 _transform.py \u2502 \u2502 \u251c\u2500\u2500 transform.py \u2502 \u2502 \u251c\u2500\u2500 transform.pyi \u2502 \u2502 \u251c\u2500\u2500 ty.py \u2502 \u2502 \u251c\u2500\u2500 ty.pyi \u2502 \u2502 \u2514\u2500\u2500 vision.py \u2502 \u251c\u2500\u2500 rpc \u2502 \u251c\u2500\u2500 schedule.py \u5305\u542bclass schedule\u7684\u5b9a\u4e49\uff0ccreate_schedule\u901a\u8fc7node\u673a\u5236\u6765\u5b9e\u73b0c++\u7c7b\u578b\u5230python\u7c7b\u578b\u7684\u8f6c\u6362\u5e76\u8fd4\u56de\u4e00\u4e2aschedule\u5bf9\u8c61,c++\u4e2d\u4e5f\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684schedule\u5b9a\u4e49 \u2502 \u251c\u2500\u2500 stmt.py \u2502 \u251c\u2500\u2500 tag.py \u2502 \u251c\u2500\u2500 target.py \u2502 \u251c\u2500\u2500 tensor_intrin.py \u2502 \u251c\u2500\u2500 tensor.py tensor\u7684\u62bd\u8c61\uff0c\u4f8b\u5982A = tvm.placeholder((n,), name='A')\uff0c A\u5c31\u662f\u4e00\u4e2atensor\uff0c \u4e5f\u5305\u542boperation\u7684\u62bd\u8c61 tensor\u5177\u4f53\u5b9e\u73b0\u5728c++\u4e2d \u2502 \u2514\u2500\u2500 testing.py","title":"python"},{"location":"tvm/codebase-struct.html#src","text":"\u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 api c++\u5bf9\u4e0a\u5c42\u7684\u63a5\u53e3\uff0c\u6bcf\u4e2a\u63a5\u53e3\u90fd\u53ef\u4ee5\u5728python\u7aef\u8c03\u7528\uff0c\u5747\u901a\u8fc7TVM_REGISTER_API\u8fdb\u884c\u6ce8\u518c\uff0c \u5728python\u7aef\u901a\u8fc7_api_internal.\u8fdb\u884c\u8c03\u7528 \u2502 \u2502 \u251c\u2500\u2500 api_arith.cc \u2502 \u2502 \u251c\u2500\u2500 api_base.cc \u2502 \u2502 \u251c\u2500\u2500 api_codegen.cc \u2502 \u2502 \u251c\u2500\u2500 api_ir.cc \u2502 \u2502 \u251c\u2500\u2500 api_lang.cc \u5305\u542b\u521b\u5efatensor\u76f8\u5173\u7684api\u63a5\u53e3 \u2502 \u2502 \u251c\u2500\u2500 api_pass.cc \u2502 \u2502 \u251c\u2500\u2500 api_schedule.cc \u2502 \u2502 \u251c\u2500\u2500 api_test.cc \u2502 \u2502 \u2514\u2500\u2500 dsl_api.cc \u2502 \u251c\u2500\u2500 arithmetic \u2502 \u2502 \u251c\u2500\u2500 analyzer.cc \u2502 \u2502 \u251c\u2500\u2500 bound_deducer.cc \u2502 \u2502 \u251c\u2500\u2500 canonical_simplify.cc \u2502 \u2502 \u251c\u2500\u2500 compute_expr.h \u2502 \u2502 \u251c\u2500\u2500 const_fold.h \u2502 \u2502 \u251c\u2500\u2500 const_int_bound.cc \u2502 \u2502 \u251c\u2500\u2500 detect_linear_equation.cc \u2502 \u2502 \u251c\u2500\u2500 domain_touched.cc \u2502 \u2502 \u251c\u2500\u2500 int_op_overflow.h \u2502 \u2502 \u251c\u2500\u2500 int_set.cc \u2502 \u2502 \u251c\u2500\u2500 int_set.h \u2502 \u2502 \u251c\u2500\u2500 modular_set.cc \u2502 \u2502 \u251c\u2500\u2500 pattern_match.h \u2502 \u2502 \u251c\u2500\u2500 rewrite_simplify.cc \u2502 \u2502 \u251c\u2500\u2500 rewrite_simplify.h \u2502 \u2502 \u2514\u2500\u2500 stmt_simplify.cc CDLL \u2502 \u251c\u2500\u2500 autotvm \u2502 \u2502 \u251c\u2500\u2500 feature_visitor.cc \u2502 \u2502 \u251c\u2500\u2500 feature_visitor.h \u2502 \u2502 \u251c\u2500\u2500 touch_extractor.cc \u2502 \u2502 \u2514\u2500\u2500 touch_extractor.h \u2502 \u251c\u2500\u2500 codegen \u2502 \u2502 \u251c\u2500\u2500 build_common.h \u2502 \u2502 \u251c\u2500\u2500 build_module.cc \u2502 \u2502 \u251c\u2500\u2500 codegen_aocl.cc \u2502 \u2502 \u251c\u2500\u2500 codegen.cc \u2502 \u2502 \u251c\u2500\u2500 codegen_c.cc \u2502 \u2502 \u251c\u2500\u2500 codegen_c.h \u2502 \u2502 \u251c\u2500\u2500 codegen_c_host.cc \u2502 \u2502 \u251c\u2500\u2500 codegen_c_host.h \u2502 \u2502 \u251c\u2500\u2500 codegen_cuda.cc \u2502 \u2502 \u251c\u2500\u2500 codegen_cuda.h \u2502 \u2502 \u251c\u2500\u2500 codegen_metal.cc \u2502 \u2502 \u251c\u2500\u2500 codegen_metal.h \u2502 \u2502 \u251c\u2500\u2500 codegen_opencl.cc \u2502 \u2502 \u251c\u2500\u2500 codegen_opencl.h \u2502 \u2502 \u251c\u2500\u2500 codegen_opengl.cc \u2502 \u2502 \u251c\u2500\u2500 codegen_opengl.h \u2502 \u2502 \u251c\u2500\u2500 codegen_source_base.cc \u2502 \u2502 \u251c\u2500\u2500 codegen_source_base.h \u2502 \u2502 \u251c\u2500\u2500 codegen_vhls.cc \u2502 \u2502 \u251c\u2500\u2500 codegen_vhls.h \u2502 \u2502 \u251c\u2500\u2500 datatype \u2502 \u2502 \u2502 \u251c\u2500\u2500 registry.cc \u2502 \u2502 \u2502 \u2514\u2500\u2500 registry.h \u2502 \u2502 \u251c\u2500\u2500 intrin_rule_aocl.cc \u2502 \u2502 \u251c\u2500\u2500 intrin_rule.cc \u2502 \u2502 \u251c\u2500\u2500 intrin_rule_cuda.cc \u2502 \u2502 \u251c\u2500\u2500 intrin_rule.h \u2502 \u2502 \u251c\u2500\u2500 intrin_rule_metal.cc \u2502 \u2502 \u251c\u2500\u2500 intrin_rule_opencl.cc \u2502 \u2502 \u251c\u2500\u2500 intrin_rule_opengl.cc \u2502 \u2502 \u251c\u2500\u2500 intrin_rule_vhls.cc \u2502 \u2502 \u251c\u2500\u2500 llvm \u2502 \u2502 \u2502 \u251c\u2500\u2500 codegen_amdgpu.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 codegen_arm.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 codegen_cpu.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 codegen_cpu.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 codegen_llvm.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 codegen_llvm.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 codegen_nvptx.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 codegen_x86_64.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 intrin_rule_llvm.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 intrin_rule_llvm.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 intrin_rule_nvptx.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 intrin_rule_rocm.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 llvm_common.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 llvm_common.h \u2502 \u2502 \u2502 \u2514\u2500\u2500 llvm_module.cc \u2502 \u2502 \u251c\u2500\u2500 opt \u2502 \u2502 \u2502 \u251c\u2500\u2500 build_aocl_off.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 build_cuda_off.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 build_cuda_on.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 build_metal_off.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 build_opencl_off.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 build_opengl_off.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 build_rocm_off.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 build_sdaccel_off.cc \u2502 \u2502 \u2502 \u2514\u2500\u2500 README \u2502 \u2502 \u251c\u2500\u2500 source_module.cc \u2502 \u2502 \u251c\u2500\u2500 spirv \u2502 \u2502 \u2502 \u251c\u2500\u2500 build_vulkan.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 codegen_spirv.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 codegen_spirv.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 intrin_rule_spirv.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 ir_builder.cc \u2502 \u2502 \u2502 \u2514\u2500\u2500 ir_builder.h \u2502 \u2502 \u2514\u2500\u2500 stackvm \u2502 \u2502 \u251c\u2500\u2500 codegen_stackvm.cc \u2502 \u2502 \u2514\u2500\u2500 codegen_stackvm.h \u2502 \u251c\u2500\u2500 common \u2502 \u2502 \u251c\u2500\u2500 arena.h \u2502 \u2502 \u251c\u2500\u2500 base64.h \u2502 \u2502 \u251c\u2500\u2500 pipe.h \u2502 \u2502 \u251c\u2500\u2500 ring_buffer.h \u2502 \u2502 \u2514\u2500\u2500 socket.h \u2502 \u251c\u2500\u2500 contrib \u2502 \u2502 \u251c\u2500\u2500 cblas \u2502 \u2502 \u2502 \u251c\u2500\u2500 cblas.cc \u2502 \u2502 \u2502 \u2514\u2500\u2500 gemm_common.h \u2502 \u2502 \u251c\u2500\u2500 cublas \u2502 \u2502 \u2502 \u251c\u2500\u2500 cublas.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 cublas_utils.cc \u2502 \u2502 \u2502 \u2514\u2500\u2500 cublas_utils.h \u2502 \u2502 \u251c\u2500\u2500 cudnn \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv_forward.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 cudnn_utils.cc \u2502 \u2502 \u2502 \u2514\u2500\u2500 cudnn_utils.h \u2502 \u2502 \u251c\u2500\u2500 hybrid \u2502 \u2502 \u2502 \u251c\u2500\u2500 codegen_hybrid.cc \u2502 \u2502 \u2502 \u2514\u2500\u2500 codegen_hybrid.h \u2502 \u2502 \u251c\u2500\u2500 miopen \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv_forward.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 miopen_utils.cc \u2502 \u2502 \u2502 \u2514\u2500\u2500 miopen_utils.h \u2502 \u2502 \u251c\u2500\u2500 mps \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv.mm \u2502 \u2502 \u2502 \u251c\u2500\u2500 gemm.mm \u2502 \u2502 \u2502 \u251c\u2500\u2500 mps_utils.h \u2502 \u2502 \u2502 \u2514\u2500\u2500 mps_utils.mm \u2502 \u2502 \u251c\u2500\u2500 nnpack \u2502 \u2502 \u2502 \u251c\u2500\u2500 convolution.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 fully_connected.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 nnpack_utils.cc \u2502 \u2502 \u2502 \u2514\u2500\u2500 nnpack_utils.h \u2502 \u2502 \u251c\u2500\u2500 random \u2502 \u2502 \u2502 \u251c\u2500\u2500 mt_random_engine.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 random.cc \u2502 \u2502 \u2502 \u2514\u2500\u2500 sgx_random_engine.cc \u2502 \u2502 \u251c\u2500\u2500 rocblas \u2502 \u2502 \u2502 \u2514\u2500\u2500 rocblas.cc \u2502 \u2502 \u2514\u2500\u2500 sort \u2502 \u2502 \u2514\u2500\u2500 sort.cc \u2502 \u251c\u2500\u2500 lang \u2502 \u2502 \u251c\u2500\u2500 api_registry.cc \u2502 \u2502 \u251c\u2500\u2500 attr_functor.h \u2502 \u2502 \u251c\u2500\u2500 attrs.cc \u2502 \u2502 \u251c\u2500\u2500 buffer.cc \u2502 \u2502 \u251c\u2500\u2500 channel.cc \u2502 \u2502 \u251c\u2500\u2500 data_layout.cc \u2502 \u2502 \u251c\u2500\u2500 expr.cc \u2502 \u2502 \u251c\u2500\u2500 expr_operator.cc \u2502 \u2502 \u251c\u2500\u2500 ir.cc \u2502 \u2502 \u251c\u2500\u2500 lowered_func.cc \u2502 \u2502 \u251c\u2500\u2500 reflection.cc \u2502 \u2502 \u251c\u2500\u2500 target_info.cc \u2502 \u2502 \u2514\u2500\u2500 tensor.cc tensor\u8868\u8fbe\u7684\u5b9e\u73b0 \u5bf9\u5e94python\u4e2d\u7684tensor | \u5bf9\u5e94\u5934\u6587\u4ef6 \u2502 \u251c\u2500\u2500 op \u2502 \u2502 \u251c\u2500\u2500 compute_op.cc \u2502 \u2502 \u251c\u2500\u2500 compute_op.h \u2502 \u2502 \u251c\u2500\u2500 cross_thread_reduction.cc \u2502 \u2502 \u251c\u2500\u2500 extern_op.cc \u2502 \u2502 \u251c\u2500\u2500 hybrid_op.cc \u2502 \u2502 \u251c\u2500\u2500 hybrid_op.h \u2502 \u2502 \u251c\u2500\u2500 op_util.cc \u2502 \u2502 \u251c\u2500\u2500 op_util.h \u2502 \u2502 \u251c\u2500\u2500 placeholder_op.cc \u2502 \u2502 \u251c\u2500\u2500 scan_op.cc \u2502 \u2502 \u251c\u2500\u2500 tensor_compute_op.cc \u2502 \u2502 \u2514\u2500\u2500 tensorize.cc \u2502 \u251c\u2500\u2500 pass \u2502 \u2502 \u251c\u2500\u2500 arg_binder.cc \u2502 \u2502 \u251c\u2500\u2500 arg_binder.h \u2502 \u2502 \u251c\u2500\u2500 bound_checker.cc \u2502 \u2502 \u251c\u2500\u2500 combine_context_call.cc \u2502 \u2502 \u251c\u2500\u2500 coproc_sync.cc \u2502 \u2502 \u251c\u2500\u2500 detect_device.cc \u2502 \u2502 \u251c\u2500\u2500 inject_copy_intrin.cc \u2502 \u2502 \u251c\u2500\u2500 inject_double_buffer.cc \u2502 \u2502 \u251c\u2500\u2500 inject_prefetch.cc \u2502 \u2502 \u251c\u2500\u2500 inject_virtual_thread.cCDLLc \u2502 \u2502 \u251c\u2500\u2500 inline.cc \u2502 \u2502 \u251c\u2500\u2500 ir_deep_compare.cc \u2502 \u2502 \u251c\u2500\u2500 ir_mutator.cc \u2502 \u2502 \u251c\u2500\u2500 ir_util.cc \u2502 \u2502 \u251c\u2500\u2500 ir_util.h \u2502 \u2502 \u251c\u2500\u2500 ir_visitor.cc \u2502 \u2502 \u251c\u2500\u2500 lift_attr_scope.cc \u2502 \u2502 \u251c\u2500\u2500 loop_partition.cc \u2502 \u2502 \u251c\u2500\u2500 lower_custom_datatypes.cc \u2502 \u2502 \u251c\u2500\u2500 lower_intrin.cc \u2502 \u2502 \u251c\u2500\u2500 lower_thread_allreduce.cc \u2502 \u2502 \u251c\u2500\u2500 lower_tvm_builtin.cc \u2502 \u2502 \u251c\u2500\u2500 lower_warp_memory.cc \u2502 \u2502 \u251c\u2500\u2500 make_api.cc \u2502 \u2502 \u251c\u2500\u2500 narrow_channel_access.cc \u2502 \u2502 \u251c\u2500\u2500 remap_thread_axis.cc \u2502 \u2502 \u251c\u2500\u2500 remove_no_op.cc \u2502 \u2502 \u251c\u2500\u2500 rewrite_unsafe_select.cc \u2502 \u2502 \u251c\u2500\u2500 simple_passes.cc \u2502 \u2502 \u251c\u2500\u2500 split_host_device.cc \u2502 \u2502 \u251c\u2500\u2500 split_pipeline.cc \u2502 \u2502 \u251c\u2500\u2500 ssa.cc \u2502 \u2502 \u251c\u2500\u2500 storage_access.cc \u2502 \u2502 \u251c\u2500\u2500 storage_access.h \u2502 \u2502 \u251c\u2500\u2500 storage_flatten.cc \u2502 \u2502 \u251c\u2500\u2500 storage_rewrite.cc \u2502 \u2502 \u251c\u2500\u2500 storage_sync.cc \u2502 \u2502 \u251c\u2500\u2500 unroll_loop.cc \u2502 \u2502 \u251c\u2500\u2500 vectorize_loop.cc \u2502 \u2502 \u251c\u2500\u2500 verify_gpu_code.cc \u2502 \u2502 \u2514\u2500\u2500 verify_memory.cc \u2502 \u251c\u2500\u2500 relay \u7ba1\u7406\u8ba1\u7b97\u56fe\u7684\u7ec4\u4ef6\uff08\u63d0\u4f9b\u4e00\u79cd\u8ba1\u7b97\u56fe\u7684\u8868\u8fbe\uff0c\u5373IR\uff09\uff0c\u8ba1\u7b97\u56fe\u4e2d\u7684node\u4f7f\u7528src\u76ee\u5f55\u4e0b\u7684\u4e00\u4e9b\u57fa\u7840\u67b6\u6784\u8fdb\u884c\u7f16\u8bd1\u548c\u6267\u884c \u2502 \u2502 \u251c\u2500\u2500 backend \u2502 \u2502 \u2502 \u251c\u2500\u2500 build_module.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 compile_engine.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 compile_engine.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 graph_plan_memory.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 graph_runtime_codegen.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 interpreter.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 param_dict.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 param_dict.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 utils.h \u2502 \u2502 \u2502 \u2514\u2500\u2500 vm \u2502 \u2502 \u2502 \u251c\u2500\u2500 compiler.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 inline_primitives.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 lambda_lift.cc \u2502 \u2502 \u2502 \u2514\u2500\u2500 vm.cc \u2502 \u2502 \u251c\u2500\u2500 ir \u2502 \u2502 \u2502 \u251c\u2500\u2500 adt.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 alpha_equal.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 base.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 doc.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 doc.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 error.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 expr.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 expr_functor.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 hash.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 module.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 op.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 pattern_functor.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 pretty_printer.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 type.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 type_functor.cc \u2502 \u2502 \u2502 \u2514\u2500\u2500 type_functor.h \u2502 \u2502 \u251c\u2500\u2500 op \u2502 \u2502 \u2502 \u251c\u2500\u2500 algorithm \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 argsort.cc \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 topk.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 annotation \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 annotation.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 debug.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 device_copy.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 image \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 resize.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 nn \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 convolution.cc \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 nn.cc \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 pad.cc \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 pooling.cc \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 upsampling.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 op_common.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 tensor \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 binary.cc \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 reduce.cc \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 transform.cc \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 unary.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 type_relations.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 type_relations.h \u2502 \u2502 \u2502 \u2514\u2500\u2500 vision \u2502 \u2502 \u2502 \u251c\u2500\u2500 multibox_op.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 nms.cc \u2502 \u2502 \u2502 \u251c\u2500\u2500 rcnn_op.cc \u2502 \u2502 \u2502 \u2514\u2500\u2500 yolo.cc \u2502 \u2502 \u2514\u2500\u2500 pass \u2502 \u2502 \u251c\u2500\u2500 alter_op_layout.cc \u2502 \u2502 \u251c\u2500\u2500 alter_op_layout.h \u2502 \u2502 \u251c\u2500\u2500 canonicalize_cast.cc \u2502 \u2502 \u251c\u2500\u2500 canonicalize_ops.cc \u2502 \u2502 \u251c\u2500\u2500 combine_parallel_conv2d.cc \u2502 \u2502 \u251c\u2500\u2500 dead_code.cc \u2502 \u2502 \u251c\u2500\u2500 de_duplicate.cc \u2502 \u2502 \u251c\u2500\u2500 dependency_graph.cc \u2502 \u2502 \u251c\u2500\u2500 dependency_graph.h \u2502 \u2502 \u251c\u2500\u2500 device_annotation.cc \u2502 \u2502 \u251c\u2500\u2500 eliminate_common_subexpr.cc \u2502 \u2502 \u251c\u2500\u2500 eta_expand.cc \u2502 \u2502 \u251c\u2500\u2500 expr_subst.cc \u2502 \u2502 \u251c\u2500\u2500 expr_subst.h \u2502 \u2502 \u251c\u2500\u2500 feature.cc \u2502 \u2502 \u251c\u2500\u2500 fold_constant.cc \u2502 \u2502 \u251c\u2500\u2500 fold_scale_axis.cc \u2502 \u2502 \u251c\u2500\u2500 forward_rewrite.cc \u2502 \u2502 \u251c\u2500\u2500 fuse_ops.cc \u2502 \u2502 \u251c\u2500\u2500 gradient.cc \u2502 \u2502 \u251c\u2500\u2500 kind_check.cc \u2502 \u2502 \u251c\u2500\u2500 let_list.h \u2502 \u2502 \u251c\u2500\u2500 mac_count.cc \u2502 \u2502 \u251c\u2500\u2500 match_exhaustion.cc \u2502 \u2502 \u251c\u2500\u2500 partial_eval.cc \u2502 \u2502 \u251c\u2500\u2500 pass_manager.cc \u2502 \u2502 \u251c\u2500\u2500 pass_util.h \u2502 \u2502 \u251c\u2500\u2500 pattern_util.h \u2502 \u2502 \u251c\u2500\u2500 quantize.cc \u2502 \u2502 \u251c\u2500\u2500 quantize.h \u2502 \u2502 \u251c\u2500\u2500 simplify_inference.cc \u2502 \u2502 \u251c\u2500\u2500 to_a_normal_form.cc \u2502 \u2502 \u251c\u2500\u2500 to_cps.cc \u2502 \u2502 \u251c\u2500\u2500 to_graph_normal_form.cc \u2502 \u2502 \u251c\u2500\u2500 type_infer.cc \u2502 \u2502 \u251c\u2500\u2500 type_solver.cc \u2502 \u2502 \u251c\u2500\u2500 type_solver.h \u2502 \u2502 \u251c\u2500\u2500 util.cc \u2502 \u2502 \u2514\u2500\u2500 well_formed.cc \u2502 \u251c\u2500\u2500 runtime \u2502 \u2502 \u251c\u2500\u2500 builtin_fp16.cc \u2502 \u2502 \u251c\u2500\u2500 c_dsl_api.cc \u2502 \u2502 \u251c\u2500\u2500 cpu_device_api.cc \u2502 \u2502 \u251c\u2500\u2500 c_runtime_api.cc \u2502 \u2502 \u251c\u2500\u2500 cuda cuda runtime \u63a5\u53e3\u5b9e\u73b0 \u2502 \u2502 \u251c\u2500\u2500 dsl_api.h \u2502 \u2502 \u251c\u2500\u2500 dso_module.cc \u2502 \u2502 \u251c\u2500\u2500 file_util.cc \u2502 \u2502 \u251c\u2500\u2500 file_util.h \u2502 \u2502 \u251c\u2500\u2500 graph \u2502 \u2502 \u251c\u2500\u2500 meta_data.h \u2502 \u2502 \u251c\u2500\u2500 metal \u2502 \u2502 \u251c\u2500\u2500 module.cc \u2502 \u2502 \u251c\u2500\u2500 module_util.cc \u2502 \u2502 \u251c\u2500\u2500 module_util.h \u2502 \u2502 \u251c\u2500\u2500 ndarray.cc \u2502 \u2502 \u251c\u2500\u2500 opencl opencl runtime \u63a5\u53e3\u5b9e\u73b0 \u2502 \u2502 \u251c\u2500\u2500 opengl opengl runtime \u63a5\u53e3\u5b9e\u73b0 \u2502 \u2502 \u251c\u2500\u2500 pack_func.h PackedFunc \u5b9a\u4e49\u4e0e\u5b9e\u73b0 \u2502 \u2502 \u251c\u2500\u2500 registry.cc PackedFunc \u76f8\u5173 \u2502 \u2502 \u251c\u2500\u2500 rocm rocm runtime \u63a5\u53e3\u5b9e\u73b0 \u2502 \u2502 \u251c\u2500\u2500 rpc rpc runtime\u63a5\u53e3\u5b9e\u73b0 \u2502 \u2502 \u251c\u2500\u2500 runtime_base.h \u2502 \u2502 \u251c\u2500\u2500 sgx \u2502 \u2502 \u251c\u2500\u2500 stackvm \u2502 \u2502 \u251c\u2500\u2500 system_lib_module.cc \u2502 \u2502 \u251c\u2500\u2500 threading_backend.cc \u2502 \u2502 \u251c\u2500\u2500 thread_pool.cc \u2502 \u2502 \u251c\u2500\u2500 thread_storage_scope.h \u2502 \u2502 \u251c\u2500\u2500 vm \u2502 \u2502 \u251c\u2500\u2500 vulkan \u2502 \u2502 \u251c\u2500\u2500 workspace_pool.cc \u2502 \u2502 \u2514\u2500\u2500 workspace_pool.h \u2502 \u2514\u2500\u2500 schedule \u2502 \u251c\u2500\u2500 auto_inline_elem_wise.cc \u2502 \u251c\u2500\u2500 bound.cc bound\u5b9e\u73b0\uff0cbound infrence\u662f\u63a8\u65ad\u51fa\u6240\u6709\u5faa\u73af\u8fb9\u754c\u548c\u4e2d\u95f4\u7f13\u51b2\u533a\u5927\u5c0f\u7684\u8fc7\u7a0b \u2502 \u251c\u2500\u2500 graph.cc \u4e0ebound\u6709\u5173 \u2502 \u251c\u2500\u2500 graph.h \u2502 \u251c\u2500\u2500 message_passing.cc \u4e0ebound\u6709\u5173 \u2502 \u251c\u2500\u2500 message_passing.h \u2502 \u251c\u2500\u2500 schedule_dataflow_rewrite.cc \u2502 \u251c\u2500\u2500 schedule_lang.cc \u2502 \u2514\u2500\u2500 schedule_ops.cc \u5b9a\u4e49ScheduleOps(),\u8fd4\u56destmt","title":"src"},{"location":"tvm/codebase-struct.html#topi","text":"\u251c\u2500\u2500 topi \u2502 \u251c\u2500\u2500 include \u2502 \u2502 \u2514\u2500\u2500 topi \u2502 \u2502 \u251c\u2500\u2500 broadcast.h \u2502 \u2502 \u251c\u2500\u2500 contrib \u2502 \u2502 \u2502 \u251c\u2500\u2500 cublas.h \u2502 \u2502 \u2502 \u2514\u2500\u2500 rocblas.h \u2502 \u2502 \u251c\u2500\u2500 cuda \u2502 \u2502 \u2502 \u251c\u2500\u2500 dense.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 extern.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 injective.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 normalization.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 pooling.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 reduction.h \u2502 \u2502 \u2502 \u2514\u2500\u2500 softmax.h \u2502 \u2502 \u251c\u2500\u2500 detail \u2502 \u2502 \u2502 \u251c\u2500\u2500 array_utils.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 broadcast.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 constant_utils.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 extern.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 fuse.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 pad_utils.h \u2502 \u2502 \u2502 \u2514\u2500\u2500 ravel_unravel.h \u2502 \u2502 \u251c\u2500\u2500 elemwise.h \u2502 \u2502 \u251c\u2500\u2500 generic \u2502 \u2502 \u2502 \u251c\u2500\u2500 default.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 extern.h \u2502 \u2502 \u2502 \u2514\u2500\u2500 injective.h \u2502 \u2502 \u251c\u2500\u2500 image \u2502 \u2502 \u2502 \u2514\u2500\u2500 resize.h \u2502 \u2502 \u251c\u2500\u2500 nn \u2502 \u2502 \u2502 \u251c\u2500\u2500 batch_matmul.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 bias_add.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 bnn.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 dense.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 dilate.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 flatten.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 l2_normalize.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 local_response_norm.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 mapping.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 pooling.h \u2502 \u2502 \u2502 \u251c\u2500\u2500 softmax.h \u2502 \u2502 \u2502 \u2514\u2500\u2500 upsampling.h \u2502 \u2502 \u251c\u2500\u2500 nn.h \u2502 \u2502 \u251c\u2500\u2500 reduction.h \u2502 \u2502 \u251c\u2500\u2500 rocm \u2502 \u2502 \u2502 \u251c\u2500\u2500 dense.h \u2502 \u2502 \u2502 \u2514\u2500\u2500 normalization.h \u2502 \u2502 \u251c\u2500\u2500 tags.h \u2502 \u2502 \u251c\u2500\u2500 transform.h \u2502 \u2502 \u251c\u2500\u2500 vision \u2502 \u2502 \u2502 \u2514\u2500\u2500 reorg.h \u2502 \u2502 \u2514\u2500\u2500 x86 \u2502 \u2502 \u251c\u2500\u2500 bnn.h \u2502 \u2502 \u251c\u2500\u2500 default.h \u2502 \u2502 \u2514\u2500\u2500 injective.h \u2502 \u251c\u2500\u2500 python \u2502 \u2502 \u251c\u2500\u2500 setup.py \u2502 \u2502 \u2514\u2500\u2500 topi \u2502 \u2502 \u251c\u2500\u2500 arm_cpu \u2502 \u2502 \u2502 \u251c\u2500\u2500 bitserial_conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 bitserial_dense.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d_transpose.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 depthwise_conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u2514\u2500\u2500 injective.py \u2502 \u2502 \u251c\u2500\u2500 broadcast.py \u2502 \u2502 \u251c\u2500\u2500 cpp.py \u2502 \u2502 \u251c\u2500\u2500 cuda \u2502 \u2502 \u2502 \u251c\u2500\u2500 batch_matmul.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d_direct.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d_hwcn.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d_int8.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d_transpose_nchw.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d_winograd.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 deformable_conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 dense.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 depthwise_conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 extern.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 group_conv2d_nchw.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u251c\u2500\u2500 injective.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 nms.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 nn.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 pooling.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 rcnn \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 proposal.py \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 pycache \u2502 \u2502 \u2502 \u251c\u2500\u2500 reduction.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 softmax.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 sort.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssd \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 multibox.py \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 pycache \u2502 \u2502 \u2502 \u251c\u2500\u2500 tensor_intrin.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 vision.py \u2502 \u2502 \u251c\u2500\u2500 generic \u2502 \u2502 \u2502 \u251c\u2500\u2500 extern.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u251c\u2500\u2500 injective.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 nn.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 sort.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 vision.py \u2502 \u2502 \u251c\u2500\u2500 generic_op_impl.py \u2502 \u2502 \u251c\u2500\u2500 hls \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u251c\u2500\u2500 injective.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 nn.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 pycache \u2502 \u2502 \u251c\u2500\u2500 image \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u2514\u2500\u2500 resize.py \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u251c\u2500\u2500 intel_graphics \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u2514\u2500\u2500 pycache \u2502 \u2502 \u251c\u2500\u2500 mali \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 dense.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 depthwise_conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u2514\u2500\u2500 pycache \u2502 \u2502 \u251c\u2500\u2500 math.py \u2502 \u2502 \u251c\u2500\u2500 nn \u2502 \u2502 \u2502 \u251c\u2500\u2500 batch_matmul.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 bitserial_conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 bitserial_dense.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 bitserial_util.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 bnn.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d_transpose.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 deformable_conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 dense.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 depthwise_conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 dilate.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 elemwise.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 flatten.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u251c\u2500\u2500 l2_normalize.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 local_response_norm.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 mapping.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 pad.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 pooling.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 softmax.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 upsampling.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 util.py \u2502 \u2502 \u251c\u2500\u2500 opengl \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d_nchw.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 dense.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u251c\u2500\u2500 injective.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 pooling.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 softmax.py \u2502 \u2502 \u251c\u2500\u2500 reduction.py \u2502 \u2502 \u251c\u2500\u2500 rocm \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 dense.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u251c\u2500\u2500 nn.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 pycache \u2502 \u2502 \u251c\u2500\u2500 sort.py \u2502 \u2502 \u251c\u2500\u2500 sparse \u2502 \u2502 \u2502 \u251c\u2500\u2500 csrmm.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 csrmv.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 dense.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u2514\u2500\u2500 pycache \u2502 \u2502 \u251c\u2500\u2500 tag.py \u2502 \u2502 \u251c\u2500\u2500 tensor.py \u2502 \u2502 \u251c\u2500\u2500 testing \u2502 \u2502 \u2502 \u251c\u2500\u2500 batch_matmul.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 bilinear_resize_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d_hwcn_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d_nchw_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d_nhwc_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 conv2d_transpose_nchw_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 deformable_conv2d_nchw_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 depthwise_conv2d_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 dilate_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 gather_nd_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u251c\u2500\u2500 l2_normalize_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 lrn_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 reorg_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 roi_align_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 roi_pool_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 sequence_mask_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 slice_axis_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 softmax_python.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 strided_slice_python.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 upsampling_python.py \u2502 \u2502 \u251c\u2500\u2500 transform.py \u2502 \u2502 \u251c\u2500\u2500 util.py \u2502 \u2502 \u251c\u2500\u2500 vision \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u251c\u2500\u2500 nms.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 rcnn \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 proposal.py \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 roi_align.py \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 roi_pool.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 reorg.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 ssd \u2502 \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u2502 \u251c\u2500\u2500 multibox.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 pycache \u2502 \u2502 \u2514\u2500\u2500 x86 \u2502 \u2502 \u251c\u2500\u2500 batch_matmul.py \u2502 \u2502 \u251c\u2500\u2500 binarize_pack.py \u2502 \u2502 \u251c\u2500\u2500 binary_dense.py \u2502 \u2502 \u251c\u2500\u2500 bitserial_conv2d.py \u2502 \u2502 \u251c\u2500\u2500 bitserial_dense.py \u2502 \u2502 \u251c\u2500\u2500 check_targets.py \u2502 \u2502 \u251c\u2500\u2500 conv2d_avx_1x1.py \u2502 \u2502 \u251c\u2500\u2500 conv2d_avx_common.py \u2502 \u2502 \u251c\u2500\u2500 conv2d.py \u2502 \u2502 \u251c\u2500\u2500 dense.py \u2502 \u2502 \u251c\u2500\u2500 depthwise_conv2d.py \u2502 \u2502 \u251c\u2500\u2500 init .py \u2502 \u2502 \u251c\u2500\u2500 injective.py \u2502 \u2502 \u251c\u2500\u2500 nn.py \u2502 \u2502 \u251c\u2500\u2500 pooling.py \u2502 \u2502 \u251c\u2500\u2500 roi_align.py \u2502 \u2502 \u251c\u2500\u2500 tensor_intrin.py \u2502 \u2502 \u2514\u2500\u2500 util.py \u2502 \u251c\u2500\u2500 recipe \u2502 \u2502 \u251c\u2500\u2500 broadcast \u2502 \u2502 \u2502 \u2514\u2500\u2500 test_broadcast_map.py \u2502 \u2502 \u251c\u2500\u2500 conv \u2502 \u2502 \u2502 \u251c\u2500\u2500 depthwise_conv2d_test.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_conv2d_hwcn_map.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 test_conv_int8_intel.py \u2502 \u2502 \u251c\u2500\u2500 gemm \u2502 \u2502 \u2502 \u251c\u2500\u2500 android_gemm_square.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 cuda_gemm_square.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 gemm_int8.py \u2502 \u2502 \u251c\u2500\u2500 reduce \u2502 \u2502 \u2502 \u2514\u2500\u2500 test_reduce_map.py \u2502 \u2502 \u2514\u2500\u2500 rnn \u2502 \u2502 \u251c\u2500\u2500 lstm.py \u2502 \u2502 \u2514\u2500\u2500 matexp.py \u2502 \u251c\u2500\u2500 src \u2502 \u2502 \u2514\u2500\u2500 topi.cc \u2502 \u2514\u2500\u2500 tests","title":"topi"},{"location":"tvm/node.html","text":"Node-SubSystem \u00b6 Node-SubSystem Class-Diagram \u7f16\u8bd1\u6808\u91cc\u9762\u4efb\u4f55\u4e00\u4e2a\u8bed\u8a00\u5bf9\u8c61\u90fd\u662fNode\u7684\u5b50\u7c7b We faced a constant changing of the compiler API for the need of research. We need a new language object or IR node whenever we want to test out new primitives. However, we don\u2019t want to change our API from time to time. Besides that, we also want to be able to serialize any language object and IRs be able to explore, print, and manipulate the IR objects in front-end language to do quick prototyping. Node \u548c NodeRef \u81f3\u5173\u91cd\u8981\uff0c \u8fd9\u4e24\u4e2abase\u6709\u5f88\u591asubclass\uff0c\u6bcf\u4e00\u4e2aNode\u7684subclass\u90fd\u5bf9\u5e94\u4e00\u4e2aNodeRef\u7684subclass\uff0c\u7528\u6765\u8fd4\u56de\u5bf9\u5e94\u7684Node Class-Diagram \u00b6 class AttrVisitor { {method} +virtual void Visit(const char* key, double* value) = 0; {method} +virtual void Visit(const char* key, int64_t* value) = 0; {method} +virtual void Visit(const char* key, uint64_t* value) = 0; {method} +virtual void Visit(const char* key, int* value) = 0; {method} +virtual void Visit(const char* key, bool* value) = 0; {method} +virtual void Visit(const char* key, std::string* value) = 0; {method} +virtual void Visit(const char* key, void** value) = 0; {method} +virtual void Visit(const char* key, Type* value) = 0; {method} +virtual void Visit(const char* key, NodeRef* value) = 0; {method} +virtual void Visit(const char* key, runtime::NDArray* value) = 0; {method} +virtual void Visit(const char* key, runtime::Object* value) = 0; } class NodeIndexer { {method} +void Visit(const char* key, double* value); {method} +void Visit(const char* key, int64_t* value); {method} +void Visit(const char* key, uint64_t* value); {method} +void Visit(const char* key, int* value); {method} +void Visit(const char* key, bool* value); {method} +void Visit(const char* key, std::string* value); {method} +void Visit(const char* key, void** value); {method} +void Visit(const char* key, Type* value); {method} +void Visit(const char* key, NodeRef* value) final {MakeIndex(value->node_.get());}; {method} +void Visit(const char* key, runtime::NDArray* value); {method} +void Visit(const char* key, runtime::Object* value); {method} +void MakeIndex(Node* node); } class NodeAttrSetter { {method} +void Visit(const char* key, double* value); {method} +void Visit(const char* key, int64_t* value); {method} +void Visit(const char* key, uint64_t* value); {method} +void Visit(const char* key, int* value); {method} +void Visit(const char* key, bool* value); {method} +void Visit(const char* key, std::string* value); {method} +void Visit(const char* key, void** value); {method} +void Visit(const char* key, Type* value); {method} +void Visit(const char* key, NodeRef* value); {method} +void Visit(const char* key, runtime::NDArray* value); {method} +void Visit(const char* key, runtime::Object* value); } class JSONAttrGetter { {method} +void Visit(const char* key, double* value); {method} +void Visit(const char* key, int64_t* value); {method} +void Visit(const char* key, uint64_t* value); {method} +void Visit(const char* key, int* value); {method} +void Visit(const char* key, bool* value); {method} +void Visit(const char* key, std::string* value); {method} +void Visit(const char* key, void** value); {method} +void Visit(const char* key, Type* value); {method} +void Visit(const char* key, NodeRef* value); {method} +void Visit(const char* key, runtime::NDArray* value); {method} +void Visit(const char* key, runtime::Object* value); {method} +void Get(Node* node); } class JSONAttrSetter { {method} +void Visit(const char* key, double* value); {method} +void Visit(const char* key, int64_t* value); {method} +void Visit(const char* key, uint64_t* value); {method} +void Visit(const char* key, int* value); {method} +void Visit(const char* key, bool* value); {method} +void Visit(const char* key, std::string* value); {method} +void Visit(const char* key, void** value); {method} +void Visit(const char* key, Type* value); {method} +void Visit(const char* key, NodeRef* value); {method} +void Visit(const char* key, runtime::NDArray* value); {method} +void Visit(const char* key, runtime::Object* value); {method} +void Set(Node* node); } NodeIndexer --|> AttrVisitor NodeAttrSetter --|> AttrVisitor JSONAttrGetter --|> AttrVisitor JSONAttrSetter --|> AttrVisitor class Node { {field} +static constexpr const char* _type_key = \"Node\"; {method} +virtual void VisitAttrs(AttrVisitor* visitor) {} {method} +inline NodePtr<Node> GetNodePtr() const; {method} +template<typename T> inline bool is_type() const; } class TensorNode { {field} +static constexpr const char* _type_key = \"Tensor\"; {method} +void VisitAttrs(AttrVisitor* v); {method} +TVM_DLL static Tensor make(Array<Expr> shape, Type dtype, Operation op, int value_index); } class IterVarNode { {field} +static constexpr const char* _type_key = \"IterVar\"; {method} +void VisitAttrs(AttrVisitor* v); {method} +TVM_DLL static IterVar make(Range dom, Var var, IterVarType iter_type, std::string thread_tag = \"\"); } class CommReducerNode { {field} +static constexpr const char* _type_key = \"CommReducer\"; {method} +void VisitAttrs(AttrVisitor* v); } class BufferNode { {field} +static constexpr const char* _type_key = \"Buffer\"; {method} +void VisitAttrs(AttrVisitor* v); {method} +TVM_DLL static Buffer make(...); } BufferNode -up-|> Node CommReducerNode -up-|> Node IterVarNode -up-|> Node TensorNode -up-|> Node class NodeRef { {field} +NodePtr<Node> node_; {method} +inline size_t hash() const; {method} +inline const Node* operator->() const; {method} +template<typename T> inline const T *as() const; } class \"template<typename Y> NodePtr\" as NodePtr{ {field} -NodeBase* data_{nullptr}; {method} +T* get() const {return static_cast<T*>(data_);} {method} +NodePtr(const NodePtr<T>& other); } class NodeBase { {field} -std::atomic<int> ref_counter_{0}; {method} +NodeBase(const NodeBase& other); } Node -right-|> NodeBase NodeRef -up- AttrVisitor NodePtr --> NodeBase NodeRef --> NodePtr","title":"Node-SubSystem"},{"location":"tvm/node.html#node-subsystem","text":"Node-SubSystem Class-Diagram \u7f16\u8bd1\u6808\u91cc\u9762\u4efb\u4f55\u4e00\u4e2a\u8bed\u8a00\u5bf9\u8c61\u90fd\u662fNode\u7684\u5b50\u7c7b We faced a constant changing of the compiler API for the need of research. We need a new language object or IR node whenever we want to test out new primitives. However, we don\u2019t want to change our API from time to time. Besides that, we also want to be able to serialize any language object and IRs be able to explore, print, and manipulate the IR objects in front-end language to do quick prototyping. Node \u548c NodeRef \u81f3\u5173\u91cd\u8981\uff0c \u8fd9\u4e24\u4e2abase\u6709\u5f88\u591asubclass\uff0c\u6bcf\u4e00\u4e2aNode\u7684subclass\u90fd\u5bf9\u5e94\u4e00\u4e2aNodeRef\u7684subclass\uff0c\u7528\u6765\u8fd4\u56de\u5bf9\u5e94\u7684Node","title":"Node-SubSystem"},{"location":"tvm/node.html#class-diagram","text":"class AttrVisitor { {method} +virtual void Visit(const char* key, double* value) = 0; {method} +virtual void Visit(const char* key, int64_t* value) = 0; {method} +virtual void Visit(const char* key, uint64_t* value) = 0; {method} +virtual void Visit(const char* key, int* value) = 0; {method} +virtual void Visit(const char* key, bool* value) = 0; {method} +virtual void Visit(const char* key, std::string* value) = 0; {method} +virtual void Visit(const char* key, void** value) = 0; {method} +virtual void Visit(const char* key, Type* value) = 0; {method} +virtual void Visit(const char* key, NodeRef* value) = 0; {method} +virtual void Visit(const char* key, runtime::NDArray* value) = 0; {method} +virtual void Visit(const char* key, runtime::Object* value) = 0; } class NodeIndexer { {method} +void Visit(const char* key, double* value); {method} +void Visit(const char* key, int64_t* value); {method} +void Visit(const char* key, uint64_t* value); {method} +void Visit(const char* key, int* value); {method} +void Visit(const char* key, bool* value); {method} +void Visit(const char* key, std::string* value); {method} +void Visit(const char* key, void** value); {method} +void Visit(const char* key, Type* value); {method} +void Visit(const char* key, NodeRef* value) final {MakeIndex(value->node_.get());}; {method} +void Visit(const char* key, runtime::NDArray* value); {method} +void Visit(const char* key, runtime::Object* value); {method} +void MakeIndex(Node* node); } class NodeAttrSetter { {method} +void Visit(const char* key, double* value); {method} +void Visit(const char* key, int64_t* value); {method} +void Visit(const char* key, uint64_t* value); {method} +void Visit(const char* key, int* value); {method} +void Visit(const char* key, bool* value); {method} +void Visit(const char* key, std::string* value); {method} +void Visit(const char* key, void** value); {method} +void Visit(const char* key, Type* value); {method} +void Visit(const char* key, NodeRef* value); {method} +void Visit(const char* key, runtime::NDArray* value); {method} +void Visit(const char* key, runtime::Object* value); } class JSONAttrGetter { {method} +void Visit(const char* key, double* value); {method} +void Visit(const char* key, int64_t* value); {method} +void Visit(const char* key, uint64_t* value); {method} +void Visit(const char* key, int* value); {method} +void Visit(const char* key, bool* value); {method} +void Visit(const char* key, std::string* value); {method} +void Visit(const char* key, void** value); {method} +void Visit(const char* key, Type* value); {method} +void Visit(const char* key, NodeRef* value); {method} +void Visit(const char* key, runtime::NDArray* value); {method} +void Visit(const char* key, runtime::Object* value); {method} +void Get(Node* node); } class JSONAttrSetter { {method} +void Visit(const char* key, double* value); {method} +void Visit(const char* key, int64_t* value); {method} +void Visit(const char* key, uint64_t* value); {method} +void Visit(const char* key, int* value); {method} +void Visit(const char* key, bool* value); {method} +void Visit(const char* key, std::string* value); {method} +void Visit(const char* key, void** value); {method} +void Visit(const char* key, Type* value); {method} +void Visit(const char* key, NodeRef* value); {method} +void Visit(const char* key, runtime::NDArray* value); {method} +void Visit(const char* key, runtime::Object* value); {method} +void Set(Node* node); } NodeIndexer --|> AttrVisitor NodeAttrSetter --|> AttrVisitor JSONAttrGetter --|> AttrVisitor JSONAttrSetter --|> AttrVisitor class Node { {field} +static constexpr const char* _type_key = \"Node\"; {method} +virtual void VisitAttrs(AttrVisitor* visitor) {} {method} +inline NodePtr<Node> GetNodePtr() const; {method} +template<typename T> inline bool is_type() const; } class TensorNode { {field} +static constexpr const char* _type_key = \"Tensor\"; {method} +void VisitAttrs(AttrVisitor* v); {method} +TVM_DLL static Tensor make(Array<Expr> shape, Type dtype, Operation op, int value_index); } class IterVarNode { {field} +static constexpr const char* _type_key = \"IterVar\"; {method} +void VisitAttrs(AttrVisitor* v); {method} +TVM_DLL static IterVar make(Range dom, Var var, IterVarType iter_type, std::string thread_tag = \"\"); } class CommReducerNode { {field} +static constexpr const char* _type_key = \"CommReducer\"; {method} +void VisitAttrs(AttrVisitor* v); } class BufferNode { {field} +static constexpr const char* _type_key = \"Buffer\"; {method} +void VisitAttrs(AttrVisitor* v); {method} +TVM_DLL static Buffer make(...); } BufferNode -up-|> Node CommReducerNode -up-|> Node IterVarNode -up-|> Node TensorNode -up-|> Node class NodeRef { {field} +NodePtr<Node> node_; {method} +inline size_t hash() const; {method} +inline const Node* operator->() const; {method} +template<typename T> inline const T *as() const; } class \"template<typename Y> NodePtr\" as NodePtr{ {field} -NodeBase* data_{nullptr}; {method} +T* get() const {return static_cast<T*>(data_);} {method} +NodePtr(const NodePtr<T>& other); } class NodeBase { {field} -std::atomic<int> ref_counter_{0}; {method} +NodeBase(const NodeBase& other); } Node -right-|> NodeBase NodeRef -up- AttrVisitor NodePtr --> NodeBase NodeRef --> NodePtr","title":"Class-Diagram"},{"location":"tvm/runtime.html","text":"runtime \u00b6 runtime runtime-flow code-flow Module graph param deviceAPI SetDevice GetAttr AllocDataSpace FreeDataSpace CopyDataFromTo CreateStream AllocWorkspace runtime\u4e2d\u7684\u4ee3\u7801\u4e3b\u8981\u5e72\u4e86\u4e09\u4ef6\u4e8b\u60c5 \u521d\u59cb\u5316\u8fc7\u7a0b\uff0c\u89e3\u6790graph\uff0c\u8f6c\u6362\u4e3a\u5185\u90e8\u6570\u636e\u7ed3\u6784\uff0c\u8c03\u7528DeviceAPI\uff0c\u5728device\u4e0a\u5206\u914d\u5185\u5b58\u7a7a\u95f4 \u53c2\u6570\u8bbe\u7f6e\u8fc7\u7a0b\uff0c\u5c06\u53c2\u6570copy\u5230\u5206\u914d\u597d\u7684device\u5185\u5b58\u7a7a\u95f4\u4e0a \u8fd0\u884c\u8fc7\u7a0b\uff0c\u904d\u5386\u6267\u884c\u89e3\u6790\u5b8c\u7684graph\u4e2d\u7684function runtime-flow \u00b6 example tvm:build with target cuda and target host llvm (split_dev_host_funcs) -> (fdevice) (split_dev_host_funcs) -> (fhost) (lowered_funcs) -> (split_dev_host_funcs) : tvm::build (fdevice) --> (codegen.build_cuda) rectangle \"device code\" { (CUDAModuleNode : runtime::ModuleNode) as CUDAModuleNode (codegen.build_cuda) --> CUDAModuleNode } (fhost) --> (codegen.build_llvm) rectangle \"host code\" { (LLVMModuleNode : runtime::ModuleNode) as LLVMModuleNode (codegen.build_llvm) --> LLVMModuleNode LLVMModuleNode --> (TVMBackendGetFuncFromEnv) (TVMBackendGetFuncFromEnv) -> (TVMFuncCall) } CUDAModuleNode .left.> LLVMModuleNode: LLVMModuleNode.Import(CUDAModuleNode) (TVMBackendGetFuncFromEnv) .up.> CUDAModuleNode: CUDAModuleNode.GetFunction (TVMFuncCall) .> CUDAModuleNode: PackedFunc(CUDAWrappedFunc) runtime work flow rectangle greaph_runtime.creat { (\u6839\u636epython\u4f20\u5165\u7684ctx, \u6784\u5efac++\u5185\u90e8\u5b9a\u4e49\u7684TVMContext vector) as creat_step1 note left \u4ecepython/tvm/contrib/graph_runtime.py \u8fdb\u5165src/runtime/graph/graph_runtime.cc endnote (\u5b9e\u4f8b\u5316\u7b2c\u4e09\u65b9\u8f6f\u4ef6dmlc\u7684JSONReader) as creat_step2 note right dmlc(Distributed Machine Learning Common Codebase) \u5206\u5e03\u5f0f\u673a\u5668\u5b66\u4e60\u901a\u7528\u4ee3\u7801\u5e93, \u63d0\u4f9b\u4e86\u6784\u5efa\u9ad8\u6548\u4e14\u53ef\u6269\u5c55\u7684\u5206\u5e03\u5f0f\u673a\u5668\u5b66\u4e60\u5e93\u7684\u80fd\u529b GraphRuntime \u4f9d\u8d56\u4e8e JSONReader endnote (\u5229\u7528JSONReader\u5c06graph.json\u8f6c\u5316\u4e3a\u5185\u90e8\u6570\u636e\u7ed3\u6784, \u5b8c\u6210load\u8fc7\u7a0b) as creat_step3 (\u5c06graph\u7684attrs_.dltype\u8f6c\u6362\u4e3aTVMType) as creat_step4 note left \"attrs\": { \"dltype\": [ \"list_str\", [ \"float32\", \"float32\", ] ], endnote (\u6784\u5efa\u6c60\u8282\u70b9pool_entry) as creat_step5 note left bytes = dltype[i] * shape[i] \u4ece\u6240\u6709\u8282\u70b9\u4e2d\u7ed9\u51fa\u6bcf\u4e2astorage_id\u5bf9\u5e94\u7684\u8282\u70b9\u7684bytes\u6700\u5927\u503c endnote (\u6bcf\u4e2astorage_id\u5bf9\u5e94\u7684storage_pool_\u4f7f\u7528DeviceAPI AllocDataSpace) as creat_step6 note right \u6240\u6709\u7684target\u7684\u5b9e\u73b0\u90fd\u7ee7\u627f\u4e8eDeviceAPI\u63a5\u53e3 DeviceAPI \u53d7 DeviceAPIManager \u7ba1\u7406 \u901a\u8fc7 \"device_api.\" + target \u7684\u65b9\u5f0f\u53ef\u4ee5\u627e\u5230\u5177\u4f53 DeviceAPI \u5177\u4f53 DeviceAPI \u901a\u8fc7 TVM_REGISTER_GLOBAL \u8fdb\u884c\u6ce8\u518c \u5177\u4f53 DeviceAPI \u5206\u5e03\u5728 src/runtime \u4e3b\u76ee\u5f55\u53ca\u5404\u4e2a\u5b50\u76ee\u5f55\u4e0b endnote (\u6839\u636estorage_pool_ \u6784\u5efa data_entry_, \u5b8c\u6210SetupStorage\u8fc7\u7a0b) as creat_step7 (\u904d\u5386graph\u4e2d\u6240\u6709\u975e\u2018null\u2019\u8282\u70b9\uff0c\\n \\ \u6784\u5efaDLTensor\u5411\u91cf\uff0c \\n \\ \u5e76\u4e14\u83b7\u53d6\u6bcf\u4e00\u4e2anode\u7684func\u7ec4\u6210op_execs_\u5411\u91cf) as creat_step8 creat_step1 -right-> creat_step2 creat_step2 -down-> creat_step3 creat_step3 -left-> creat_step4 creat_step4 -down-> creat_step5 creat_step5 -right-> creat_step6 creat_step6 -down-> creat_step7 creat_step7 -left-> creat_step8 (creat end) as ce creat_step8 --> ce } rectangle \"tvm build result\"{ (Graph) note left a string of dict, similar to str({}) \"{ \"nodes\": [ { \"op\": \"null\", \"name\": \"x\", \"inputs\": [] }, { \"op\": \"tvm_op\", \"name\": \"relu0\", \"attrs\": { \"flatten_data\": \"0\", \"func_name\": \"fuse_l2_normalize_relu\", \"num_inputs\": \"1\", \"num_outputs\": \"1\" }, \"inputs\": [[0, 0, 0]] } ], \"arg_nodes\": [0], \"node_row_ptr\": [0, 1, 2], \"heads\": [[1, 0, 0]], ...... }\" endnote (Graph) ..> creat_step1 (Lib) note left a Module object, contain lib.so endnote (Lib) ..> creat_step1 (params) note left a dict contains node params ... {'p22': <tvm.NDArray shape=(8, 16, 3, 3, 8, 32), cpu(0)> array([[[[[[-2.49230769e-02, 2.73413258e-03, ..., 7.61547452e-03, -6.19848166e-03, -2.52313819e-02], [ 2.66786274e-02, 4.06193052e-04, 5.14294626e-03, ..., -3.45390639e-03, 4.50841105e-03, 5.40218735e-03], ...... } endnote } (ctx) note left a object class TVMContext or a list of TVMContext tvm.cpu(0) tvm.gpu(0) tvm.opencl(0) endnote (ctx) ..> creat_step1 (GraphModule) note right a wrapper of class GraphRuntime in c++ \u672c\u8d28\u4e0a\u662f\u4e00\u4e2aModule\u5b9e\u4f8b\uff0c\u8fd9\u4e2a\u5b9e\u4f8b\u4f5c\u4e3acontainer\u5305\u542b\u4e86GraphRuntime\u5b9e\u4f8b endnote ce --> (GraphModule): return a object of GraphModule (picture image data) as input_data (\u8c03\u7528set_input\u5b8c\u6210\u53c2\u6570\u8f93\u5165) as set_input note right call by PackedFunc GraphRuntime::GetFunction from python to c++ \u5c06\u8f93\u5165\u6570\u636ecopy\u5230data_entry_\u5bf9\u5e94\u7684node\u91cc\u9762 \u5982\u679c\u8f93\u5165\u53c2\u6570\u662fparam\uff0c\u5faa\u73af\u662f\u5728python\u4fa7\u5b8c\u6210\u7684 c++ \u63a5\u53e3\u6bcf\u6b21\u53ea\u63a5\u53d7\u4e00\u4e2anode\u7684\u6570\u636e endnote params ..> set_input input_data ..> set_input (GraphModule) --> set_input (GraphModule.run) as run note right so easy............. void GraphRuntime::Run() { // setup the array and requirements. for (size_t i = 0; i < op_execs_.size(); ++i) { if (op_execs_[i]) op_execs_[i](); } } endnote set_input --> run (GraphModule.get_output) as get_output note right \u4ecedata_entry_\u4e2d\u83b7\u53d6\u8f93\u51fa\u8282\u70b9\u6570\u636e graph \u4e2dheads\u5b57\u6bb5\u4fdd\u5b58\u4e86\u8f93\u51fanote\u4fe1\u606f heads is a list of entries as the output of the graph. \u5728Init\u9636\u6bb5\u4fbf\u89e3\u6790\u5230\u4e86GraphRuntime\u7684outputs_\u5b57\u6bb5\u4e2d endnote run --> get_output code-flow \u00b6 python/tvm/contrib/graph_runtime.py \u4e2d\u5b9e\u73b0\u4e86runtime creat\u7684python\u63a5\u53e3 def create ( graph_json_str , libmod , ctx ): fcreate = get_global_func ( \"tvm.graph_runtime.create\" ) return GraphModule ( fcreate ( graph_json_str , libmod , * device_type_id )) python/tvm/contrib/debugger/debug_runtime.py \u4e2d\u5b9e\u73b0\u4e86\u6db5\u76d6debug\u529f\u80fd\u7684runtime creat python\u63a5\u53e3 def create ( graph_json_str , libmod , ctx , dump_root = None ): fcreate = get_global_func ( \"tvm.graph_runtime_debug.create\" ) func_obj = fcreate ( graph_json_str , libmod , * device_type_id ) return GraphModuleDebug ( func_obj , ctx , graph_json_str , dump_root ) fcreate \u8fd4\u56de\u5305\u542bc++\u4ee3\u7801\u4e2dcreat\u65b9\u6cd5\u7684handle\u7684Function, \u8c03\u7528fcreate\u5219\u9677\u5165\u5230c++\u4e2d\u6267\u884c\uff0c c++\u7684\u4ee3\u7801\u4e3b\u8981\u96c6\u4e2d\u5728**src/runtime/graph/graph_runtime.cc\u4e2d** Module \u00b6 (host module\\nclass tvm::runtime::Module) as hm (device module\\nclass tvm::runtime::Module) as dm (param \\n\u4ee5graph\u4e2d\u7684node\u7684name\u4e3akey\u7684\u53c2\u6570\u5b57\u5178) as param (graph \\n\u5305\u542b\u6240\u6709node\u7684json\u8868\u8fbe) as graph [device.so] --> dm hm --> (runtime Init): input dm <-- hm : call (param) --> (runtime Init): input (graph) --> (runtime Init): input \u5bf9\u4e8eruntime\u8f93\u5165Module\u6765\u8bb2\uff0c\u5b83\u6709\u5f88\u591a\u5b50\u7c7b\uff0c\u5bf9\u5e94\u6bcf\u4e00\u79cdtarget,\u9664\u6b64\u4e4b\u5916RelayBuildModule\u548cGraphRuntimeCodeGenModule\u4e5f\u662fmodule\u5b50\u7c7b\uff0c\u5176\u4e2dRelayBuildModule\u662f\u5728relay\u524d\u7aef\u4e4b\u540e\u521b\u5efa\u7684\uff0c\u5b9e\u73b0\u5728**relay.build_module._BuildModule**\u4e2d,\u8d1f\u8d23\u8fdb\u884crelay\u5c42build\u3002 GraphRuntimeCodeGenModule\u8fd9\u4e2a\u5b50\u7c7b\u7684\u4f5c\u7528\u540e\u7eed\u8865\u5145 graph \u00b6 \u5b98\u65b9\u6587\u6863\u6709\u6bd4\u8f83\u660e\u786e\u7684\u4ecb\u7ecd\uff0c\u5176\u4e2dattr\u4e2d\u7684storage_id\u662f\u5728\u7f16\u8bd1\u65f6\u521b\u5efa\u7684\u5b58\u50a8ID\uff0c\u4e00\u4e2astorage_id\u5bf9\u5e94\u4e00\u5757\u5185\u5b58\uff0cstorage_id\u4e0eTensor\u662f\u4e00\u5bf9\u591a\u7684\u5173\u7cfb\u3002 param \u00b6 a dict deviceAPI \u00b6 deviceAPI\u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u6bcf\u79cdtarget\u90fd\u5bf9\u5e94\u5b9e\u73b0\u4e86\u8be5\u63a5\u53e3\uff0cdeviceAPI \u66f4\u591a\u7684\u662f\u9488\u5bf9\u5185\u5b58\u7ba1\u7406\uff0c\u90e8\u5206API\u5c01\u88c5\u5728**c_runtime_api.cc**\u4e2d\u4f9b\u4e0a\u5c42\u8c03\u7528\uff0c\u5728python\u7aef\u53ef\u4ee5\u901a\u8fc7_LIB.xxxx\u7684\u65b9\u5f0f\u8fdb\u884c\u8c03\u7528 CPUDeviceAPI CUDADeviceAPI OpenCLWorkspace OpenGLWorkspace ROCMDeviceAPI RPCDeviceAPI VTADeviceAPI class TVM_DLL DeviceAPI { public : virtual ~ DeviceAPI () {} virtual void SetDevice ( TVMContext ctx ) = 0 ; virtual void GetAttr ( TVMContext ctx , DeviceAttrKind kind , TVMRetValue * rv ) = 0 ; virtual void * AllocDataSpace ( TVMContext ctx , size_t nbytes , size_t alignment , TVMType type_hint ) = 0 ; virtual void FreeDataSpace ( TVMContext ctx , void * ptr ) = 0 ; virtual void CopyDataFromTo ( const void * from , size_t from_offset , void * to , size_t to_offset , size_t num_bytes , TVMContext ctx_from , TVMContext ctx_to , TVMType type_hint , TVMStreamHandle stream ) = 0 ; virtual TVMStreamHandle CreateStream ( TVMContext ctx ); virtual void FreeStream ( TVMContext ctx , TVMStreamHandle stream ); virtual void StreamSync ( TVMContext ctx , TVMStreamHandle stream ) = 0 ; virtual void SetStream ( TVMContext ctx , TVMStreamHandle stream ) {} virtual void SyncStreamFromTo ( TVMContext ctx , TVMStreamHandle event_src , TVMStreamHandle event_dst ); virtual void * AllocWorkspace ( TVMContext ctx , size_t nbytes , TVMType type_hint = {}); virtual void FreeWorkspace ( TVMContext ctx , void * ptr ); static DeviceAPI * Get ( TVMContext ctx , bool allow_missing = false ); }; SetDevice \u00b6 \u4e3b\u8981\u662f\u5904\u7406device id\uff0c \u5bf9\u4e8ecuda\u6765\u8bb2\uff0c\u5e94\u8be5\u5c31\u662f\u7b2c\u51e0\u4e2a\u677f\u5361\uff1b\u5bf9\u4e8ecpu\uff0c\u8fd9\u4e2a\u63a5\u53e3\u5e76\u6ca1\u6709\u610f\u4e49\u3002 \u8fd9\u4e2a\u63a5\u53e3\u5728\u6574\u4e2aruntime\u8fc7\u7a0b\u4e2d\u6ca1\u6709\u5730\u65b9\u8fdb\u884c\u4e3b\u52a8\u8c03\u7528\uff0c\u5728cuda\u7684\u5b9e\u73b0\u4e2d\uff0c\u5bf9\u4e8edeviceAPI\u7684\u6bcf\u4e2a\u63a5\u53e3\uff0c\u91cc\u9762\u90fd\u4f1a\u8c03\u7528\u81ea\u5df1\u7684cudaSetDevice\u63a5\u53e3\u3002 GetAttr \u00b6 \u6839\u636e\u4f20\u5165\u7684\u4e0d\u540c\u7684DeviceAttrKind\uff0c\u8fd4\u56de\u4e0d\u540c\u7684\u8bbe\u5907\u5c5e\u6027\uff0ccuda\u6bcf\u4e00\u4e2a\u5e93\u51fd\u6570\u90fd\u8981\u6c42\u4f20\u5165device_id\uff0c\u8fd9\u4e2a\u63a5\u53e3\u5728\u8bbe\u8ba1\u65f6\u611f\u89c9\u50cf\u57fa\u4e8ecuda\u5e93\u8fdb\u884c\u7684\u5c01\u88c5\uff0c\u547d\u540d\u4e0a\u8ddfcuda\u5f88\u50cf\u3002 \u5728python class TVMContext(python/tvm/_ffi/runtime_ctypes.py)\u4e2d\u5c01\u88c5\u4e86GetAttr\u7684\u4e0a\u5c42\u8c03\u7528,\u5728\u56fe\u7f16\u8bd1\u548c\u6267\u884c\u7684\u6d41\u7a0b\u4e2d\u4e0d\u4f1a\u88ab\u8c03\u7528 AllocDataSpace \u00b6 \u5728device\u4e0a\u7533\u8bf7\u5185\u5b58\u7a7a\u95f4 \u5728runtime Init\u7684\u65f6\u5019\uff0c\u4f1a\u8c03\u7528\u8be5\u63a5\u53e3\uff0c\u5728devie\u4e0a\u4e3atensor\u5206\u914d\u7a7a\u95f4 FreeDataSpace \u00b6 \u5728c++ \u7c7bclass NDArray \u7684\u6790\u6784\u51fd\u6570\u91cc\u9762\u4f1a\u8fdb\u884c\u8c03\u7528\uff0c NDArray\u91cc\u9762\u5305\u542b\u4e86DLTensor CopyDataFromTo \u00b6 \u5b9e\u73b0\u4e86\u6570\u636ecopy\uff0c\u652f\u6301host\u4e4b\u95f4\uff0cdevice\u4e4b\u95f4\u548chost-device\u76f4\u63a5\u7684\u6570\u636ecopy CreateStream \u00b6 \u53ea\u6709cuda\u652f\u6301\uff0c\u5b9e\u9645\u4e0a\u4e5f\u6ca1\u6709\u627e\u5230\u5728\u4ec0\u4e48\u5730\u65b9\u6709\u8c03\u7528 AllocWorkspace \u00b6 \u5206\u914d\u5de5\u4f5c\u7a7a\u95f4\uff0c\u5185\u90e8\u5b9e\u9645\u4e0a\u8fd8\u662f\u8c03\u7528AllocDataSpace \u4ec0\u4e48\u60c5\u51b5\u4e0b\u4f7f\u7528\uff1f","title":"runtime"},{"location":"tvm/runtime.html#runtime","text":"runtime runtime-flow code-flow Module graph param deviceAPI SetDevice GetAttr AllocDataSpace FreeDataSpace CopyDataFromTo CreateStream AllocWorkspace runtime\u4e2d\u7684\u4ee3\u7801\u4e3b\u8981\u5e72\u4e86\u4e09\u4ef6\u4e8b\u60c5 \u521d\u59cb\u5316\u8fc7\u7a0b\uff0c\u89e3\u6790graph\uff0c\u8f6c\u6362\u4e3a\u5185\u90e8\u6570\u636e\u7ed3\u6784\uff0c\u8c03\u7528DeviceAPI\uff0c\u5728device\u4e0a\u5206\u914d\u5185\u5b58\u7a7a\u95f4 \u53c2\u6570\u8bbe\u7f6e\u8fc7\u7a0b\uff0c\u5c06\u53c2\u6570copy\u5230\u5206\u914d\u597d\u7684device\u5185\u5b58\u7a7a\u95f4\u4e0a \u8fd0\u884c\u8fc7\u7a0b\uff0c\u904d\u5386\u6267\u884c\u89e3\u6790\u5b8c\u7684graph\u4e2d\u7684function","title":"runtime"},{"location":"tvm/runtime.html#runtime-flow","text":"example tvm:build with target cuda and target host llvm (split_dev_host_funcs) -> (fdevice) (split_dev_host_funcs) -> (fhost) (lowered_funcs) -> (split_dev_host_funcs) : tvm::build (fdevice) --> (codegen.build_cuda) rectangle \"device code\" { (CUDAModuleNode : runtime::ModuleNode) as CUDAModuleNode (codegen.build_cuda) --> CUDAModuleNode } (fhost) --> (codegen.build_llvm) rectangle \"host code\" { (LLVMModuleNode : runtime::ModuleNode) as LLVMModuleNode (codegen.build_llvm) --> LLVMModuleNode LLVMModuleNode --> (TVMBackendGetFuncFromEnv) (TVMBackendGetFuncFromEnv) -> (TVMFuncCall) } CUDAModuleNode .left.> LLVMModuleNode: LLVMModuleNode.Import(CUDAModuleNode) (TVMBackendGetFuncFromEnv) .up.> CUDAModuleNode: CUDAModuleNode.GetFunction (TVMFuncCall) .> CUDAModuleNode: PackedFunc(CUDAWrappedFunc) runtime work flow rectangle greaph_runtime.creat { (\u6839\u636epython\u4f20\u5165\u7684ctx, \u6784\u5efac++\u5185\u90e8\u5b9a\u4e49\u7684TVMContext vector) as creat_step1 note left \u4ecepython/tvm/contrib/graph_runtime.py \u8fdb\u5165src/runtime/graph/graph_runtime.cc endnote (\u5b9e\u4f8b\u5316\u7b2c\u4e09\u65b9\u8f6f\u4ef6dmlc\u7684JSONReader) as creat_step2 note right dmlc(Distributed Machine Learning Common Codebase) \u5206\u5e03\u5f0f\u673a\u5668\u5b66\u4e60\u901a\u7528\u4ee3\u7801\u5e93, \u63d0\u4f9b\u4e86\u6784\u5efa\u9ad8\u6548\u4e14\u53ef\u6269\u5c55\u7684\u5206\u5e03\u5f0f\u673a\u5668\u5b66\u4e60\u5e93\u7684\u80fd\u529b GraphRuntime \u4f9d\u8d56\u4e8e JSONReader endnote (\u5229\u7528JSONReader\u5c06graph.json\u8f6c\u5316\u4e3a\u5185\u90e8\u6570\u636e\u7ed3\u6784, \u5b8c\u6210load\u8fc7\u7a0b) as creat_step3 (\u5c06graph\u7684attrs_.dltype\u8f6c\u6362\u4e3aTVMType) as creat_step4 note left \"attrs\": { \"dltype\": [ \"list_str\", [ \"float32\", \"float32\", ] ], endnote (\u6784\u5efa\u6c60\u8282\u70b9pool_entry) as creat_step5 note left bytes = dltype[i] * shape[i] \u4ece\u6240\u6709\u8282\u70b9\u4e2d\u7ed9\u51fa\u6bcf\u4e2astorage_id\u5bf9\u5e94\u7684\u8282\u70b9\u7684bytes\u6700\u5927\u503c endnote (\u6bcf\u4e2astorage_id\u5bf9\u5e94\u7684storage_pool_\u4f7f\u7528DeviceAPI AllocDataSpace) as creat_step6 note right \u6240\u6709\u7684target\u7684\u5b9e\u73b0\u90fd\u7ee7\u627f\u4e8eDeviceAPI\u63a5\u53e3 DeviceAPI \u53d7 DeviceAPIManager \u7ba1\u7406 \u901a\u8fc7 \"device_api.\" + target \u7684\u65b9\u5f0f\u53ef\u4ee5\u627e\u5230\u5177\u4f53 DeviceAPI \u5177\u4f53 DeviceAPI \u901a\u8fc7 TVM_REGISTER_GLOBAL \u8fdb\u884c\u6ce8\u518c \u5177\u4f53 DeviceAPI \u5206\u5e03\u5728 src/runtime \u4e3b\u76ee\u5f55\u53ca\u5404\u4e2a\u5b50\u76ee\u5f55\u4e0b endnote (\u6839\u636estorage_pool_ \u6784\u5efa data_entry_, \u5b8c\u6210SetupStorage\u8fc7\u7a0b) as creat_step7 (\u904d\u5386graph\u4e2d\u6240\u6709\u975e\u2018null\u2019\u8282\u70b9\uff0c\\n \\ \u6784\u5efaDLTensor\u5411\u91cf\uff0c \\n \\ \u5e76\u4e14\u83b7\u53d6\u6bcf\u4e00\u4e2anode\u7684func\u7ec4\u6210op_execs_\u5411\u91cf) as creat_step8 creat_step1 -right-> creat_step2 creat_step2 -down-> creat_step3 creat_step3 -left-> creat_step4 creat_step4 -down-> creat_step5 creat_step5 -right-> creat_step6 creat_step6 -down-> creat_step7 creat_step7 -left-> creat_step8 (creat end) as ce creat_step8 --> ce } rectangle \"tvm build result\"{ (Graph) note left a string of dict, similar to str({}) \"{ \"nodes\": [ { \"op\": \"null\", \"name\": \"x\", \"inputs\": [] }, { \"op\": \"tvm_op\", \"name\": \"relu0\", \"attrs\": { \"flatten_data\": \"0\", \"func_name\": \"fuse_l2_normalize_relu\", \"num_inputs\": \"1\", \"num_outputs\": \"1\" }, \"inputs\": [[0, 0, 0]] } ], \"arg_nodes\": [0], \"node_row_ptr\": [0, 1, 2], \"heads\": [[1, 0, 0]], ...... }\" endnote (Graph) ..> creat_step1 (Lib) note left a Module object, contain lib.so endnote (Lib) ..> creat_step1 (params) note left a dict contains node params ... {'p22': <tvm.NDArray shape=(8, 16, 3, 3, 8, 32), cpu(0)> array([[[[[[-2.49230769e-02, 2.73413258e-03, ..., 7.61547452e-03, -6.19848166e-03, -2.52313819e-02], [ 2.66786274e-02, 4.06193052e-04, 5.14294626e-03, ..., -3.45390639e-03, 4.50841105e-03, 5.40218735e-03], ...... } endnote } (ctx) note left a object class TVMContext or a list of TVMContext tvm.cpu(0) tvm.gpu(0) tvm.opencl(0) endnote (ctx) ..> creat_step1 (GraphModule) note right a wrapper of class GraphRuntime in c++ \u672c\u8d28\u4e0a\u662f\u4e00\u4e2aModule\u5b9e\u4f8b\uff0c\u8fd9\u4e2a\u5b9e\u4f8b\u4f5c\u4e3acontainer\u5305\u542b\u4e86GraphRuntime\u5b9e\u4f8b endnote ce --> (GraphModule): return a object of GraphModule (picture image data) as input_data (\u8c03\u7528set_input\u5b8c\u6210\u53c2\u6570\u8f93\u5165) as set_input note right call by PackedFunc GraphRuntime::GetFunction from python to c++ \u5c06\u8f93\u5165\u6570\u636ecopy\u5230data_entry_\u5bf9\u5e94\u7684node\u91cc\u9762 \u5982\u679c\u8f93\u5165\u53c2\u6570\u662fparam\uff0c\u5faa\u73af\u662f\u5728python\u4fa7\u5b8c\u6210\u7684 c++ \u63a5\u53e3\u6bcf\u6b21\u53ea\u63a5\u53d7\u4e00\u4e2anode\u7684\u6570\u636e endnote params ..> set_input input_data ..> set_input (GraphModule) --> set_input (GraphModule.run) as run note right so easy............. void GraphRuntime::Run() { // setup the array and requirements. for (size_t i = 0; i < op_execs_.size(); ++i) { if (op_execs_[i]) op_execs_[i](); } } endnote set_input --> run (GraphModule.get_output) as get_output note right \u4ecedata_entry_\u4e2d\u83b7\u53d6\u8f93\u51fa\u8282\u70b9\u6570\u636e graph \u4e2dheads\u5b57\u6bb5\u4fdd\u5b58\u4e86\u8f93\u51fanote\u4fe1\u606f heads is a list of entries as the output of the graph. \u5728Init\u9636\u6bb5\u4fbf\u89e3\u6790\u5230\u4e86GraphRuntime\u7684outputs_\u5b57\u6bb5\u4e2d endnote run --> get_output","title":"runtime-flow"},{"location":"tvm/runtime.html#code-flow","text":"python/tvm/contrib/graph_runtime.py \u4e2d\u5b9e\u73b0\u4e86runtime creat\u7684python\u63a5\u53e3 def create ( graph_json_str , libmod , ctx ): fcreate = get_global_func ( \"tvm.graph_runtime.create\" ) return GraphModule ( fcreate ( graph_json_str , libmod , * device_type_id )) python/tvm/contrib/debugger/debug_runtime.py \u4e2d\u5b9e\u73b0\u4e86\u6db5\u76d6debug\u529f\u80fd\u7684runtime creat python\u63a5\u53e3 def create ( graph_json_str , libmod , ctx , dump_root = None ): fcreate = get_global_func ( \"tvm.graph_runtime_debug.create\" ) func_obj = fcreate ( graph_json_str , libmod , * device_type_id ) return GraphModuleDebug ( func_obj , ctx , graph_json_str , dump_root ) fcreate \u8fd4\u56de\u5305\u542bc++\u4ee3\u7801\u4e2dcreat\u65b9\u6cd5\u7684handle\u7684Function, \u8c03\u7528fcreate\u5219\u9677\u5165\u5230c++\u4e2d\u6267\u884c\uff0c c++\u7684\u4ee3\u7801\u4e3b\u8981\u96c6\u4e2d\u5728**src/runtime/graph/graph_runtime.cc\u4e2d**","title":"code-flow"},{"location":"tvm/runtime.html#module","text":"(host module\\nclass tvm::runtime::Module) as hm (device module\\nclass tvm::runtime::Module) as dm (param \\n\u4ee5graph\u4e2d\u7684node\u7684name\u4e3akey\u7684\u53c2\u6570\u5b57\u5178) as param (graph \\n\u5305\u542b\u6240\u6709node\u7684json\u8868\u8fbe) as graph [device.so] --> dm hm --> (runtime Init): input dm <-- hm : call (param) --> (runtime Init): input (graph) --> (runtime Init): input \u5bf9\u4e8eruntime\u8f93\u5165Module\u6765\u8bb2\uff0c\u5b83\u6709\u5f88\u591a\u5b50\u7c7b\uff0c\u5bf9\u5e94\u6bcf\u4e00\u79cdtarget,\u9664\u6b64\u4e4b\u5916RelayBuildModule\u548cGraphRuntimeCodeGenModule\u4e5f\u662fmodule\u5b50\u7c7b\uff0c\u5176\u4e2dRelayBuildModule\u662f\u5728relay\u524d\u7aef\u4e4b\u540e\u521b\u5efa\u7684\uff0c\u5b9e\u73b0\u5728**relay.build_module._BuildModule**\u4e2d,\u8d1f\u8d23\u8fdb\u884crelay\u5c42build\u3002 GraphRuntimeCodeGenModule\u8fd9\u4e2a\u5b50\u7c7b\u7684\u4f5c\u7528\u540e\u7eed\u8865\u5145","title":"Module"},{"location":"tvm/runtime.html#graph","text":"\u5b98\u65b9\u6587\u6863\u6709\u6bd4\u8f83\u660e\u786e\u7684\u4ecb\u7ecd\uff0c\u5176\u4e2dattr\u4e2d\u7684storage_id\u662f\u5728\u7f16\u8bd1\u65f6\u521b\u5efa\u7684\u5b58\u50a8ID\uff0c\u4e00\u4e2astorage_id\u5bf9\u5e94\u4e00\u5757\u5185\u5b58\uff0cstorage_id\u4e0eTensor\u662f\u4e00\u5bf9\u591a\u7684\u5173\u7cfb\u3002","title":"graph"},{"location":"tvm/runtime.html#param","text":"a dict","title":"param"},{"location":"tvm/runtime.html#deviceapi","text":"deviceAPI\u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u6bcf\u79cdtarget\u90fd\u5bf9\u5e94\u5b9e\u73b0\u4e86\u8be5\u63a5\u53e3\uff0cdeviceAPI \u66f4\u591a\u7684\u662f\u9488\u5bf9\u5185\u5b58\u7ba1\u7406\uff0c\u90e8\u5206API\u5c01\u88c5\u5728**c_runtime_api.cc**\u4e2d\u4f9b\u4e0a\u5c42\u8c03\u7528\uff0c\u5728python\u7aef\u53ef\u4ee5\u901a\u8fc7_LIB.xxxx\u7684\u65b9\u5f0f\u8fdb\u884c\u8c03\u7528 CPUDeviceAPI CUDADeviceAPI OpenCLWorkspace OpenGLWorkspace ROCMDeviceAPI RPCDeviceAPI VTADeviceAPI class TVM_DLL DeviceAPI { public : virtual ~ DeviceAPI () {} virtual void SetDevice ( TVMContext ctx ) = 0 ; virtual void GetAttr ( TVMContext ctx , DeviceAttrKind kind , TVMRetValue * rv ) = 0 ; virtual void * AllocDataSpace ( TVMContext ctx , size_t nbytes , size_t alignment , TVMType type_hint ) = 0 ; virtual void FreeDataSpace ( TVMContext ctx , void * ptr ) = 0 ; virtual void CopyDataFromTo ( const void * from , size_t from_offset , void * to , size_t to_offset , size_t num_bytes , TVMContext ctx_from , TVMContext ctx_to , TVMType type_hint , TVMStreamHandle stream ) = 0 ; virtual TVMStreamHandle CreateStream ( TVMContext ctx ); virtual void FreeStream ( TVMContext ctx , TVMStreamHandle stream ); virtual void StreamSync ( TVMContext ctx , TVMStreamHandle stream ) = 0 ; virtual void SetStream ( TVMContext ctx , TVMStreamHandle stream ) {} virtual void SyncStreamFromTo ( TVMContext ctx , TVMStreamHandle event_src , TVMStreamHandle event_dst ); virtual void * AllocWorkspace ( TVMContext ctx , size_t nbytes , TVMType type_hint = {}); virtual void FreeWorkspace ( TVMContext ctx , void * ptr ); static DeviceAPI * Get ( TVMContext ctx , bool allow_missing = false ); };","title":"deviceAPI"},{"location":"tvm/runtime.html#setdevice","text":"\u4e3b\u8981\u662f\u5904\u7406device id\uff0c \u5bf9\u4e8ecuda\u6765\u8bb2\uff0c\u5e94\u8be5\u5c31\u662f\u7b2c\u51e0\u4e2a\u677f\u5361\uff1b\u5bf9\u4e8ecpu\uff0c\u8fd9\u4e2a\u63a5\u53e3\u5e76\u6ca1\u6709\u610f\u4e49\u3002 \u8fd9\u4e2a\u63a5\u53e3\u5728\u6574\u4e2aruntime\u8fc7\u7a0b\u4e2d\u6ca1\u6709\u5730\u65b9\u8fdb\u884c\u4e3b\u52a8\u8c03\u7528\uff0c\u5728cuda\u7684\u5b9e\u73b0\u4e2d\uff0c\u5bf9\u4e8edeviceAPI\u7684\u6bcf\u4e2a\u63a5\u53e3\uff0c\u91cc\u9762\u90fd\u4f1a\u8c03\u7528\u81ea\u5df1\u7684cudaSetDevice\u63a5\u53e3\u3002","title":"SetDevice"},{"location":"tvm/runtime.html#getattr","text":"\u6839\u636e\u4f20\u5165\u7684\u4e0d\u540c\u7684DeviceAttrKind\uff0c\u8fd4\u56de\u4e0d\u540c\u7684\u8bbe\u5907\u5c5e\u6027\uff0ccuda\u6bcf\u4e00\u4e2a\u5e93\u51fd\u6570\u90fd\u8981\u6c42\u4f20\u5165device_id\uff0c\u8fd9\u4e2a\u63a5\u53e3\u5728\u8bbe\u8ba1\u65f6\u611f\u89c9\u50cf\u57fa\u4e8ecuda\u5e93\u8fdb\u884c\u7684\u5c01\u88c5\uff0c\u547d\u540d\u4e0a\u8ddfcuda\u5f88\u50cf\u3002 \u5728python class TVMContext(python/tvm/_ffi/runtime_ctypes.py)\u4e2d\u5c01\u88c5\u4e86GetAttr\u7684\u4e0a\u5c42\u8c03\u7528,\u5728\u56fe\u7f16\u8bd1\u548c\u6267\u884c\u7684\u6d41\u7a0b\u4e2d\u4e0d\u4f1a\u88ab\u8c03\u7528","title":"GetAttr"},{"location":"tvm/runtime.html#allocdataspace","text":"\u5728device\u4e0a\u7533\u8bf7\u5185\u5b58\u7a7a\u95f4 \u5728runtime Init\u7684\u65f6\u5019\uff0c\u4f1a\u8c03\u7528\u8be5\u63a5\u53e3\uff0c\u5728devie\u4e0a\u4e3atensor\u5206\u914d\u7a7a\u95f4","title":"AllocDataSpace"},{"location":"tvm/runtime.html#freedataspace","text":"\u5728c++ \u7c7bclass NDArray \u7684\u6790\u6784\u51fd\u6570\u91cc\u9762\u4f1a\u8fdb\u884c\u8c03\u7528\uff0c NDArray\u91cc\u9762\u5305\u542b\u4e86DLTensor","title":"FreeDataSpace"},{"location":"tvm/runtime.html#copydatafromto","text":"\u5b9e\u73b0\u4e86\u6570\u636ecopy\uff0c\u652f\u6301host\u4e4b\u95f4\uff0cdevice\u4e4b\u95f4\u548chost-device\u76f4\u63a5\u7684\u6570\u636ecopy","title":"CopyDataFromTo"},{"location":"tvm/runtime.html#createstream","text":"\u53ea\u6709cuda\u652f\u6301\uff0c\u5b9e\u9645\u4e0a\u4e5f\u6ca1\u6709\u627e\u5230\u5728\u4ec0\u4e48\u5730\u65b9\u6709\u8c03\u7528","title":"CreateStream"},{"location":"tvm/runtime.html#allocworkspace","text":"\u5206\u914d\u5de5\u4f5c\u7a7a\u95f4\uff0c\u5185\u90e8\u5b9e\u9645\u4e0a\u8fd8\u662f\u8c03\u7528AllocDataSpace \u4ec0\u4e48\u60c5\u51b5\u4e0b\u4f7f\u7528\uff1f","title":"AllocWorkspace"},{"location":"tvm/tvm-start.html","text":"tvm \u00b6 tvm Concept Module Pass Op Tensor Func PackedFunc Node relay relay.build_module.build \u6d41\u7a0b build\u8fc7\u7a0b relay\u524d\u7aef \u8f6c\u6362\u539f\u59cbgraph\u4e3aexper Relay\u5c42Build codebase-structure-overview Concept \u00b6 Module \u00b6 \u4e00\u4e2a\u7f16\u8bd1\u597d\u7684\u5bf9\u8c61\u3002\u53ef\u4ee5\u901a\u8fc7Module\u4ee5PackedFunc\u7684\u5f62\u5f0f\u6765\u83b7\u53d6\u7f16\u8bd1\u540e\u7684Func\u3002runtime\u53ef\u4ee5\u52a8\u6001\u83b7\u53d6Func Pass \u00b6 Op \u00b6 Tensor \u00b6 Func \u00b6 PackedFunc \u00b6 tvm\u4f7f\u7528c++\u5b9e\u73b0\u4e86\u4e00\u5806\u63a5\u53e3\uff0c\u8fd9\u4e9b\u63a5\u53e3\u901a\u8fc7PackedFunc\u5c01\u88c5\uff0c\u4f7f\u5f97python\u8c03\u7528c++\u975e\u5e38easy. class Registry { {field} -std::string name_; {field} -PackedFunc func_; {field} +struct Manager; {method} +TVM_DLL Registry& set_body(PackedFunc f); {method} +Registry& set_body(PackedFunc::FType f); {method} +TVM_DLL static Registry& Register(const std::string& name, bool override = false); {method} +TVM_DLL static const PackedFunc* Get(const std::string& name); } class PackedFunc { {field} -FType body_; +using FType = std::function<void (TVMArgs args, TVMRetValue* rv)>; {method} +explicit PackedFunc(FType body) : body_(body) {} {method} +template<typename... Args> inline TVMRetValue operator()(Args&& ...args) const; {method} +inline void CallPacked(TVMArgs args, TVMRetValue* rv) const; } class manager { {field} +std::unordered_map<std::string, Registry*> fmap; {method} +static Manager* Global(); } Registry --> PackedFunc Registry --> manager c++\u4e2d\u5b9e\u73b0\u4e86\u5bf9c++\u51fd\u6570\u7684\u7ba1\u7406 python\u4e2d\uff0c get_global_func \u8c03\u7528_LIB.TVMFuncGetGlobal\u6765\u83b7\u53d6PackedFunc\u6307\u9488\uff0c\u7136\u540e\u5c06\u5176\u4f5c\u4e3ahandle\u5b9e\u4f8b\u5316Function class Function ( _FunctionBase ): class FunctionBase ( object ): def __init__ ( self , handle , is_global ): self . handle = handle self . is_global = is_global def __call__ ( self , * args ): temp_args = [] values , tcodes , num_args = _make_tvm_args ( args , temp_args ) ret_val = TVMValue () ret_tcode = ctypes . c_int () if _LIB . TVMFuncCall ( self . handle , values , tcodes , ctypes . c_int ( num_args ), ctypes . byref ( ret_val ), ctypes . byref ( ret_tcode )) != 0 : raise get_last_ffi_error () _ = temp_args _ = args return RETURN_SWITCH [ ret_tcode . value ]( ret_val ) \u5728python\u7aef\u8c03\u7528Function\u7684\u8fc7\u7a0b\u4e5f\u5c31\u662f\u8c03\u7528\u5176__call__\u65b9\u6cd5\uff0c\u5176\u4e2d\u53c8\u8c03\u7528\u4e86_LIB.TVMFuncCall\u6765\u5b9e\u73b0\u5bf9PackedFunc\u7684\u5b9e\u9645\u8c03\u7528 \u8c03\u7528\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u662f\u8c03\u7528\u4e86PackedFunc\u7684**CallPacked**\u65b9\u6cd5 inline void PackedFunc::CallPacked ( TVMArgs args , TVMRetValue * rv ) const { body_ ( args , rv ); } **_LIB**\u662f\u76f4\u63a5\u4ee5CDLL\u7684\u65b9\u5f0f\u52a0\u8f7d\u4e86libtvm.so\u52a8\u6001\u94fe\u63a5\u5e93 python/tvm/_ffi/base.py def _load_lib (): \"\"\"Load libary by searching possible path.\"\"\" lib_path = libinfo . find_lib_path () lib = ctypes . CDLL ( lib_path [ 0 ], ctypes . RTLD_GLOBAL ) # DMatrix functions lib . TVMGetLastError . restype = ctypes . c_char_p return lib , os . path . basename ( lib_path [ 0 ]) # version number __version__ = libinfo . __version__ # library instance of nnvm _LIB , _LIB_NAME = _load_lib () \u7f16\u8bd1\u548c\u90e8\u7f72\u90fd\u7528\u5230\u4e86PackedFunc All TVM\u2019s compiler pass functions are exposed to frontend as PackedFunc, see here The compiled module also returns the compiled function as PackedFunc Node \u00b6 \u8df3\u8f6c\u5230Node\u5b50\u7cfb\u7edf\u4ecb\u7ecd relay \u00b6 relay.build_module.build \u00b6 relay.build_module.build returns three components: the execution graph in json format the TVM module library of compiled functions specifically for this graph on the target hardware the parameter blobs of the model about optimization During the compilation, Relay does the graph-level optimization while TVM does the tensor-level optimization, resulting in an optimized runtime module for model serving. about tvm schedule TVM asks the user to provide a description of the computation called a schedule. A schedule is a set of transformation of computation that transforms the loop of computations in the program \u6d41\u7a0b \u00b6 (relay python frontend) as rpf note right @\u76ee\u5f55 python/tvm/relay/frontend/ end note rectangle model-formats { (MXNet) -down-> rpf: relay.frontend.from_mxnet (TensorFlow) -down->rpf: relay.frontend.from_tensorflow (CoreML) -down->rpf: relay.frontend.from_coreml (ONNX) -down->rpf: relay.frontend.from_onnx (***) -down->rpf: relay.frontend.from_*** } rpf -down-> (mod): output note left @\u5305\u542b\u4e86funcs\u7684\u5168\u5c40\u7684relay module @\u76ee\u5f55 python/tvm/relay/module.py @\u662f\u5bf9src/relay/\u76ee\u5f55\u4e0b\u7684\u4e00\u4e9b\u63a5\u53e3\u7684\u5c01\u88c5 @module \u672c\u8d28\u4e0a\u4e5f\u662f\u4e00\u4e2anode @\u6bcf\u4e00\u4e2aglobal func \u90fd\u901a\u8fc7\u4e00\u4e2a\u552f\u4e00\u7684 tvm.relay.GlobalVar\u6765\u533a\u522b end note rpf -down-> (params): output note left @dict of str to NDArray Input parameters to the graph that do not change during inference time. @Used for constant folding. end note (mod) -down-> (func): mod[mod.entry_func] note left @A function declaration expression @python/tvm/relay/expr.py @\u7ee7\u627f\u4e8eExpr, Expr \u662fRelayNode\u7684\u5b50\u7c7b end note (relay.build) as rb (target) as target note right {\"aocl\", \"aocl_sw_emu\", \"c\", \"cuda\", \"ext_dev\", \"hybrid\", \"llvm\", \"metal\", \"nvptx\", \"opencl\", \"opengl\", \"rocm\", \"sdaccel\", \"stackvm\", \"vulkan\"} end note target -left-> rb: input (target_host) as th note left: can be:cuda th -> rb: input (func) -down-> rb: input (params) -down-> rb: input rb -down-> (graph): output rb -down-> (lib): output rb -down-> (-params): output (graph_runtime.create) as grc (graph) -down-> grc: input (lib) -down-> grc: input (ctx: tvm.cpu0) -> grc: input grc -down-> (runtime): output (runtime.setinput) as rs (-params) -down-> rs: input (image data) -down-> rs: input (runtime) -down-> rs: runtime method (runtime.run) as rr (runtime.getoutput) as rg rs -> rr: runtime method rr -> rg: runtime method (python/tvm/relay/build_module.py\\n\\n build) as ptrbb rectangle input { entity func entity target entity target_host entity params } func .down-> ptrbb: input target .down-> ptrbb: input target_host .down-> ptrbb: input params .down-> ptrbb: input (python/tvm/relay/build_module.py\\n\\n BuildModule.build) as bmb (src/relay/backend/build_module.cc\\n\\n RelayBuildModule.SetParam) as rbmsp (src/relay/backend/build_module.cc\\n\\n RelayBuildModule.Build) as rbmb (src/relay/backend/build_module.cc\\n\\n RelayBuildModule.BuildRelay) as rbmbr ptrbb -right-> bmb: func, target, target_host, params bmb -right-> rbmsp: params rbmsp -down-> rbmb: func, target, target_host rbmb -left-> rbmbr: in RelayBuildModule (src/relay/backend/build_module.cc\\n\\n RelayBuildModule.BindParamsByName) as rbmbpbn (src/relay/backend/build_module.cc\\n\\n RelayBuildModule.Optimize) as rbmo (relay::ModuleNode::FromExpr creat a relay::module) as rmfe rbmbr -left-> rbmbpbn: func, params rbmbpbn -down-> rmfe: func rmfe -right-> rbmo: \"relay::Module, target, params\" (src/relay/backend/build_module.cc\\n\\n new a GraphCodegen) as nag rbmo -right-> nag (src/relay/backend/graph_runtime_codegen.cc\\n\\n GraphRuntimeCodegenModule.init) as grcmi (src/relay/backend/graph_runtime_codegen.cc\\n\\n GraphRuntimeCodegenModule.codegen) as grcmc nag -down-> grcmi: target grcmi -left-> grcmc: func (src/codegen/build_module.cc\\n\\n tvm::build) as tb rectangle output { entity \"graph\" as graph entity \"new params\" as np entity \"mod\" as mod } grcmc .down-> graph: output grcmc .down-> np: output grcmc -left-> tb: LowerFunc, target_host tb .down-> mod: output build\u8fc7\u7a0b \u00b6 relay\u524d\u7aef \u00b6 # tvm/tutorials/frontend/from_mxnet.py def from_mxnet ( symbol , shape = None , dtype = \"float32\" , arg_params = None , aux_params = None ): mod = _module . Module () func = _from_mxnet_impl ( symbol , shape , dtype , mod ) mod [ \"main\" ] = func return mod , params Module\u662f\u4e00\u4e2apython\u7c7b\uff0c\u901a\u8fc7register_relay_node\u6ce8\u518c\u5230\u4e86\u4e00\u4e2apython\u5168\u5c40\u7684node\u5b57\u5178\u4e2d\u3002 # python/tvm/relay/module.py @register_relay_node class Module ( RelayNode ): def __init__ ( self , functions = None , type_definitions = None ): self . __init_handle_by_constructor__ ( _make . Module , functions , type_definitions ) _make.Module\u662f\u83b7\u53d6\u4e86c++\u5b9e\u73b0\u7684\u4e00\u4e2aModule\u6784\u5efa\u65b9\u6cd5\u3002_init_api\u5c06c++\u4e2d\u7684global_func\u6309\u7167\u6a21\u5757\u52a8\u6001\u7ec4\u6210\u4e86python\u4e2d\u5404\u4e2a\u6a21\u5757\u7684\u65b9\u6cd5\u3002_init_api \u4e3b\u8981\u8c03\u7528\u4e86_init_api_prefix\u6765\u5b9e\u73b0\u529f\u80fd\uff0c\u5176\u4e2dget_global_func\u8fd4\u56de\u4e86\u4e00\u4e2aFunction\u5b9e\u4f8b\uff0c Function\u7ee7\u627f\u4e8eFunctionBase\uff0c\u5176\u4e2d\u5b9e\u73b0\u4e86__call__\u65b9\u6cd5\uff0c\u6240\u4ee5Python\u4e2dmodule\u7c7b\u7684\u65b9\u6cd5\u4e2d\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c_module.Module_ContainGlobalVar(self, var)\u7684\u64cd\u4f5c\u6765\u5b9e\u73b0\u5bf9c++\u7684\u8c03\u7528 # python/tvm/relay/_make.py _init_api ( \"relay._make\" , __name__ ) # python/tvm/_ffi/function.py def _init_api_prefix ( module_name , prefix ): for name in list_global_func_names (): f = get_global_func ( name ) ff = _get_api ( f ) ff . __name__ = fname setattr ( target_module , ff . __name__ , ff ) def get_global_func ( name , allow_missing = False ): handle = FunctionHandle () check_call ( _LIB . TVMFuncGetGlobal ( c_str ( name ), ctypes . byref ( handle ))) if handle . value : return Function ( handle , False ) class Function ( _FunctionBase ): class FunctionBase ( object ): def __call__ ( self , * args ): if _LIB . TVMFuncCall ( self . handle , values , tcodes , ctypes . c_int ( num_args ), ctypes . byref ( ret_val ), ctypes . byref ( ret_tcode )) != 0 : raise get_last_ffi_error () return RETURN_SWITCH [ ret_tcode . value ]( ret_val ) c++\u4e2d\u7684\u63a5\u53e3\u901a\u8fc7TVM_REGISTER_API\u8fdb\u884c\u6ce8\u518c,\u5176\u4e2dModuleNode::make\u8fd4\u56de\u4e86Module\u5b9e\u4f8b // src/relay/ir/module.cc TVM_REGISTER_API ( \"relay._make.Module\" ) . set_body_typed ( ModuleNode :: make ); Module ModuleNode :: make ( tvm :: Map < GlobalVar , Function > global_funcs , tvm :: Map < GlobalTypeVar , TypeData > global_type_defs ) self.__init_handle_by_constructor__\u6700\u7ec8\u901a\u8fc7_LIB.TVMFuncCall\u5b8c\u6210\u771f\u6b63\u7684c++\u51fd\u6570\u6267\u884c\uff0c\u8fd9\u4e2a\u8c03\u7528\u662f\u4e0d\u662f\u5f88\u719f\u6089\uff1f\u5bf9\u7684\uff0c\u5728FunctionBase\u7684__call__\u65b9\u6cd5\u4e2d\u4e5f\u662f\u8fd9\u6837\u5b9e\u73b0\u7684PackedFunc\u7684\u7531Python\u5230c++\u7684\u8c03\u7528 \u5176\u4e2dRETURN_SWITCH\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5b9e\u73b0\u4e86c++\u53d8\u91cf\u7c7b\u578b\u5230python\u53d8\u91cf\u7c7b\u578b\u7684\u8f6c\u6362 # python/tvm/_ffi/_ctypes/function.py def __init_handle_by_constructor__ ( fconstructor , args ): if _LIB . TVMFuncCall ( fconstructor . handle , values , tcodes , ctypes . c_int ( num_args ), ctypes . byref ( ret_val ), ctypes . byref ( ret_tcode )) != 0 : return RETURN_SWITCH [ ret_tcode . value ]( ret_val ) RETURN_SWITCH [ TypeCode . FUNC_HANDLE ] = _handle_return_func RETURN_SWITCH [ TypeCode . MODULE_HANDLE ] = _return_module # python/tvm/_ffi/_ctypes/types.py RETURN_SWITCH = { TypeCode . INT : lambda x : x . v_int64 , TypeCode . FLOAT : lambda x : x . v_float64 , TypeCode . HANDLE : _return_handle , TypeCode . NULL : lambda x : None , TypeCode . STR : lambda x : py_str ( x . v_str ), TypeCode . BYTES : _return_bytes , TypeCode . TVM_CONTEXT : _return_context } \u8f6c\u6362\u539f\u59cbgraph\u4e3aexper \u00b6 \u521b\u5efa\u5b8c\u6210modudle\u5b9e\u4f8b\u4e4b\u540e\uff0c_from_mxnet_impl \u904d\u5386\u4e86\u539f\u59cbgraph\u7684node, \u6839\u636eop\u540d\u79f0\u7684\u4e0d\u540c\uff0c\u586b\u5145\u4e0d\u540c\u7684expr\u5b9e\u4f8b\u5230node_map \u5e76\u4e14\u628a\u6700\u7ec8\u8f93\u51fa\u8282\u70b9\u5bf9\u5e94\u7684Function\u5b9e\u4f8b\u8fd4\u56de\uff0cmodule\u5b9e\u4f8b\u7684'main'\u8282\u70b9\u5b89\u88c5\u4e3a\u8be5func # python/tvm/relay/frontend/mxnet.py def _from_mxnet_impl ( symbol , shape_dict , dtype_info , mod = None ): jgraph = json . loads ( symbol . tojson ()) jnodes = jgraph [ \"nodes\" ] node_map = {} for nid , node in enumerate ( jnodes ): if op_name == \"null\" : node_map [ nid ] = [ _expr . var ( node_name , shape = shape , dtype = dtype )] elif op_name in _convert_map : res = _convert_map [ op_name ]( children , attrs ) outputs = [ node_map [ e [ 0 ]][ e [ 1 ]] for e in jgraph [ \"heads\" ]] func = _expr . Function ( analysis . free_vars ( outputs ), outputs ) return func \u5176\u4e2d_convert_map\u662frelay \u7684 mxnet\u524d\u7aef\u51c6\u5907\u597d\u7684\u4e00\u4e2a\u5b57\u5178\uff0c\u8bb0\u5f55\u7740\u6bcf\u4e2aop\u5bf9\u5e94\u7684relay\u7684\u8868\u8fbe\u3002null node\u4ee3\u8868\u5360\u4f4d/\u53d8\u91cf\u6216\u8005\u8f93\u5165\u8282\u70b9\uff0c\u88ab\u5b9e\u4f8b\u5316\u4e3aVar(A local variable in Relay) # python/tvm/relay/expr.py @register_relay_node class Var ( Expr ): def __init__ ( self , name_hint , type_annotation = None ): self . __init_handle_by_constructor__ ( _make . Var , name_hint , type_annotation ) class Expr ( RelayNode ): def __call__ ( self , * args ): return Call ( self , args ) @register_relay_node class Call ( Expr ): def __init__ ( self , op , args , attrs = None , type_args = None ): if not type_args : type_args = [] self . __init_handle_by_constructor__ ( _make . Call , op , args , attrs , type_args ) Relay\u5c42Build \u00b6 \u901a\u8fc7\u8c03\u7528 relay.build_module._BuildModule \u521b\u5efaRelayBuildModule\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2ac++\u7684Module\u7c7b\u5b9e\u4f8b\uff0c \u5728python\u7aef\u8f6c\u6362\u8be5\u5b9e\u4f8b\u4e3aPthon Module\u7c7b\u5b9e\u4f8b\uff08_init_api()\u63a5\u53e3\u4e2d\u4f1a\u8fdb\u884c\u5904\u7406\uff09 // src/relay/backend/build_module.cc runtime :: Module RelayBuildCreate () { std :: shared_ptr < RelayBuildModule > exec = std :: make_shared < RelayBuildModule > (); return runtime :: Module ( exec ); } # python/tvm/module.py _init_api ( \"tvm.module\" ) _set_class_module ( Module ) python\u4e2d class Module\u5bf9\u5e94\u4e8ec++\u4e2d\u7684class Module, ModuleBase \u63d0\u4f9b\u4e86__getitem__\u65b9\u6cd5\uff0c\u53ef\u4ee5\u4f7f\u5f97 module[func_string] \u80fd\u591f\u8c03\u7528\u5230c++\u4e2d\u7684ModuleNode\u5bf9\u5e94\u7684function. # python/tvm/module.py class Module ( ModuleBase ): # python/tvm/_ffi/function.py class ModuleBase ( object ): def get_function ( self , name , query_imports = False ): ret_handle = FunctionHandle () check_call ( _LIB . TVMModGetFunction ( self . handle , c_str ( name ), ctypes . c_int ( query_imports ), ctypes . byref ( ret_handle ))) return Function ( ret_handle , False ) def __getitem__ ( self , name ): if not isinstance ( name , string_types ): raise ValueError ( \"Can only take string as function name\" ) return self . get_function ( name ) \u5728c++\u4e2d\uff0cmodule\u7684GetFunction\u5b9e\u9645\u4e0a\u4f1a\u8c03\u7528ModuleNode\u7684GetFunction // src/runtime/c_runtime_api.cc int TVMModGetFunction ( TVMModuleHandle mod , const char * func_name , int query_imports , TVMFunctionHandle * func ) { PackedFunc pf = static_cast < Module *> ( mod ) -> GetFunction ( func_name , query_imports != 0 ); * func = new PackedFunc ( pf ); } // include/tvm/runtime/packed_func.h inline PackedFunc Module::GetFunction ( const std :: string & name , bool query_imports ) { PackedFunc pf = node_ -> GetFunction ( name , node_ ); return pf ; } \u53ef\u4ee5\u53c2\u8003\u5982\u4e0b\u7c7b\u56fe (host module\\nclass tvm::runtime::Module) as hm (device module\\nclass tvm::runtime::Module) as dm (param \\n\u4ee5graph\u4e2d\u7684node\u7684name\u4e3akey\u7684\u53c2\u6570\u5b57\u5178) as param (graph \\n\u5305\u542b\u6240\u6709node\u7684json\u8868\u8fbe) as graph [device.so] --> dm hm --> (runtime Init): input dm <-- hm : call (param) --> (runtime Init): input (graph) --> (runtime Init): input \u8fd9\u6837\uff0c\u5728python\u4e2d\u8c03\u7528self.mod[\"build\"]\uff0c\u5219\u771f\u6b63\u6267\u884c\u4e86c++\u4e2d\u7684RelayBuildModule\u7684build\u529f\u80fd # python/tvm/relay/build_module.py class BuildModule ( object ): def __init__ ( self ): self . mod = _build_module . _BuildModule () self . _build = self . mod [ \"build\" ] def build ( self , func , target = None , target_host = None , params = None ): self . _build ( func , target , target_host ) RelayBuildModule \u7684 build, \u5fc5\u987b\u8981\u6ce8\u610f\u7684\u662f\uff0c Module \u548c ModuleNode \u5b58\u5728\u4e8e\u591a\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\uff0c\u8981\u6ce8\u610f\u533a\u5206\uff0c\u8fd9\u91cc\u8fd4\u56de\u7684\u662f\u5305\u542b runtime::ModuleNode \u7684 runtime::Module class RelayBuildModule : public runtime :: ModuleNode { PackedFunc GetFunction ( const std :: string & name , const std :: shared_ptr < ModuleNode >& sptr_to_self ) final { if ( name == \"build\" ) { return PackedFunc ([ sptr_to_self , this ]( TVMArgs args , TVMRetValue * rv ) { this -> Build ( args [ 0 ], args [ 1 ], args [ 2 ]); }); } } } codebase-structure-overview \u00b6 \u8df3\u8f6c\u5230\u8f6f\u4ef6\u76ee\u5f55\u7ed3\u6784","title":"tvm"},{"location":"tvm/tvm-start.html#tvm","text":"tvm Concept Module Pass Op Tensor Func PackedFunc Node relay relay.build_module.build \u6d41\u7a0b build\u8fc7\u7a0b relay\u524d\u7aef \u8f6c\u6362\u539f\u59cbgraph\u4e3aexper Relay\u5c42Build codebase-structure-overview","title":"tvm"},{"location":"tvm/tvm-start.html#concept","text":"","title":"Concept"},{"location":"tvm/tvm-start.html#module","text":"\u4e00\u4e2a\u7f16\u8bd1\u597d\u7684\u5bf9\u8c61\u3002\u53ef\u4ee5\u901a\u8fc7Module\u4ee5PackedFunc\u7684\u5f62\u5f0f\u6765\u83b7\u53d6\u7f16\u8bd1\u540e\u7684Func\u3002runtime\u53ef\u4ee5\u52a8\u6001\u83b7\u53d6Func","title":"Module"},{"location":"tvm/tvm-start.html#pass","text":"","title":"Pass"},{"location":"tvm/tvm-start.html#op","text":"","title":"Op"},{"location":"tvm/tvm-start.html#tensor","text":"","title":"Tensor"},{"location":"tvm/tvm-start.html#func","text":"","title":"Func"},{"location":"tvm/tvm-start.html#packedfunc","text":"tvm\u4f7f\u7528c++\u5b9e\u73b0\u4e86\u4e00\u5806\u63a5\u53e3\uff0c\u8fd9\u4e9b\u63a5\u53e3\u901a\u8fc7PackedFunc\u5c01\u88c5\uff0c\u4f7f\u5f97python\u8c03\u7528c++\u975e\u5e38easy. class Registry { {field} -std::string name_; {field} -PackedFunc func_; {field} +struct Manager; {method} +TVM_DLL Registry& set_body(PackedFunc f); {method} +Registry& set_body(PackedFunc::FType f); {method} +TVM_DLL static Registry& Register(const std::string& name, bool override = false); {method} +TVM_DLL static const PackedFunc* Get(const std::string& name); } class PackedFunc { {field} -FType body_; +using FType = std::function<void (TVMArgs args, TVMRetValue* rv)>; {method} +explicit PackedFunc(FType body) : body_(body) {} {method} +template<typename... Args> inline TVMRetValue operator()(Args&& ...args) const; {method} +inline void CallPacked(TVMArgs args, TVMRetValue* rv) const; } class manager { {field} +std::unordered_map<std::string, Registry*> fmap; {method} +static Manager* Global(); } Registry --> PackedFunc Registry --> manager c++\u4e2d\u5b9e\u73b0\u4e86\u5bf9c++\u51fd\u6570\u7684\u7ba1\u7406 python\u4e2d\uff0c get_global_func \u8c03\u7528_LIB.TVMFuncGetGlobal\u6765\u83b7\u53d6PackedFunc\u6307\u9488\uff0c\u7136\u540e\u5c06\u5176\u4f5c\u4e3ahandle\u5b9e\u4f8b\u5316Function class Function ( _FunctionBase ): class FunctionBase ( object ): def __init__ ( self , handle , is_global ): self . handle = handle self . is_global = is_global def __call__ ( self , * args ): temp_args = [] values , tcodes , num_args = _make_tvm_args ( args , temp_args ) ret_val = TVMValue () ret_tcode = ctypes . c_int () if _LIB . TVMFuncCall ( self . handle , values , tcodes , ctypes . c_int ( num_args ), ctypes . byref ( ret_val ), ctypes . byref ( ret_tcode )) != 0 : raise get_last_ffi_error () _ = temp_args _ = args return RETURN_SWITCH [ ret_tcode . value ]( ret_val ) \u5728python\u7aef\u8c03\u7528Function\u7684\u8fc7\u7a0b\u4e5f\u5c31\u662f\u8c03\u7528\u5176__call__\u65b9\u6cd5\uff0c\u5176\u4e2d\u53c8\u8c03\u7528\u4e86_LIB.TVMFuncCall\u6765\u5b9e\u73b0\u5bf9PackedFunc\u7684\u5b9e\u9645\u8c03\u7528 \u8c03\u7528\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u662f\u8c03\u7528\u4e86PackedFunc\u7684**CallPacked**\u65b9\u6cd5 inline void PackedFunc::CallPacked ( TVMArgs args , TVMRetValue * rv ) const { body_ ( args , rv ); } **_LIB**\u662f\u76f4\u63a5\u4ee5CDLL\u7684\u65b9\u5f0f\u52a0\u8f7d\u4e86libtvm.so\u52a8\u6001\u94fe\u63a5\u5e93 python/tvm/_ffi/base.py def _load_lib (): \"\"\"Load libary by searching possible path.\"\"\" lib_path = libinfo . find_lib_path () lib = ctypes . CDLL ( lib_path [ 0 ], ctypes . RTLD_GLOBAL ) # DMatrix functions lib . TVMGetLastError . restype = ctypes . c_char_p return lib , os . path . basename ( lib_path [ 0 ]) # version number __version__ = libinfo . __version__ # library instance of nnvm _LIB , _LIB_NAME = _load_lib () \u7f16\u8bd1\u548c\u90e8\u7f72\u90fd\u7528\u5230\u4e86PackedFunc All TVM\u2019s compiler pass functions are exposed to frontend as PackedFunc, see here The compiled module also returns the compiled function as PackedFunc","title":"PackedFunc"},{"location":"tvm/tvm-start.html#node","text":"\u8df3\u8f6c\u5230Node\u5b50\u7cfb\u7edf\u4ecb\u7ecd","title":"Node"},{"location":"tvm/tvm-start.html#relay","text":"","title":"relay"},{"location":"tvm/tvm-start.html#relaybuild_modulebuild","text":"relay.build_module.build returns three components: the execution graph in json format the TVM module library of compiled functions specifically for this graph on the target hardware the parameter blobs of the model about optimization During the compilation, Relay does the graph-level optimization while TVM does the tensor-level optimization, resulting in an optimized runtime module for model serving. about tvm schedule TVM asks the user to provide a description of the computation called a schedule. A schedule is a set of transformation of computation that transforms the loop of computations in the program","title":"relay.build_module.build"},{"location":"tvm/tvm-start.html#_1","text":"(relay python frontend) as rpf note right @\u76ee\u5f55 python/tvm/relay/frontend/ end note rectangle model-formats { (MXNet) -down-> rpf: relay.frontend.from_mxnet (TensorFlow) -down->rpf: relay.frontend.from_tensorflow (CoreML) -down->rpf: relay.frontend.from_coreml (ONNX) -down->rpf: relay.frontend.from_onnx (***) -down->rpf: relay.frontend.from_*** } rpf -down-> (mod): output note left @\u5305\u542b\u4e86funcs\u7684\u5168\u5c40\u7684relay module @\u76ee\u5f55 python/tvm/relay/module.py @\u662f\u5bf9src/relay/\u76ee\u5f55\u4e0b\u7684\u4e00\u4e9b\u63a5\u53e3\u7684\u5c01\u88c5 @module \u672c\u8d28\u4e0a\u4e5f\u662f\u4e00\u4e2anode @\u6bcf\u4e00\u4e2aglobal func \u90fd\u901a\u8fc7\u4e00\u4e2a\u552f\u4e00\u7684 tvm.relay.GlobalVar\u6765\u533a\u522b end note rpf -down-> (params): output note left @dict of str to NDArray Input parameters to the graph that do not change during inference time. @Used for constant folding. end note (mod) -down-> (func): mod[mod.entry_func] note left @A function declaration expression @python/tvm/relay/expr.py @\u7ee7\u627f\u4e8eExpr, Expr \u662fRelayNode\u7684\u5b50\u7c7b end note (relay.build) as rb (target) as target note right {\"aocl\", \"aocl_sw_emu\", \"c\", \"cuda\", \"ext_dev\", \"hybrid\", \"llvm\", \"metal\", \"nvptx\", \"opencl\", \"opengl\", \"rocm\", \"sdaccel\", \"stackvm\", \"vulkan\"} end note target -left-> rb: input (target_host) as th note left: can be:cuda th -> rb: input (func) -down-> rb: input (params) -down-> rb: input rb -down-> (graph): output rb -down-> (lib): output rb -down-> (-params): output (graph_runtime.create) as grc (graph) -down-> grc: input (lib) -down-> grc: input (ctx: tvm.cpu0) -> grc: input grc -down-> (runtime): output (runtime.setinput) as rs (-params) -down-> rs: input (image data) -down-> rs: input (runtime) -down-> rs: runtime method (runtime.run) as rr (runtime.getoutput) as rg rs -> rr: runtime method rr -> rg: runtime method (python/tvm/relay/build_module.py\\n\\n build) as ptrbb rectangle input { entity func entity target entity target_host entity params } func .down-> ptrbb: input target .down-> ptrbb: input target_host .down-> ptrbb: input params .down-> ptrbb: input (python/tvm/relay/build_module.py\\n\\n BuildModule.build) as bmb (src/relay/backend/build_module.cc\\n\\n RelayBuildModule.SetParam) as rbmsp (src/relay/backend/build_module.cc\\n\\n RelayBuildModule.Build) as rbmb (src/relay/backend/build_module.cc\\n\\n RelayBuildModule.BuildRelay) as rbmbr ptrbb -right-> bmb: func, target, target_host, params bmb -right-> rbmsp: params rbmsp -down-> rbmb: func, target, target_host rbmb -left-> rbmbr: in RelayBuildModule (src/relay/backend/build_module.cc\\n\\n RelayBuildModule.BindParamsByName) as rbmbpbn (src/relay/backend/build_module.cc\\n\\n RelayBuildModule.Optimize) as rbmo (relay::ModuleNode::FromExpr creat a relay::module) as rmfe rbmbr -left-> rbmbpbn: func, params rbmbpbn -down-> rmfe: func rmfe -right-> rbmo: \"relay::Module, target, params\" (src/relay/backend/build_module.cc\\n\\n new a GraphCodegen) as nag rbmo -right-> nag (src/relay/backend/graph_runtime_codegen.cc\\n\\n GraphRuntimeCodegenModule.init) as grcmi (src/relay/backend/graph_runtime_codegen.cc\\n\\n GraphRuntimeCodegenModule.codegen) as grcmc nag -down-> grcmi: target grcmi -left-> grcmc: func (src/codegen/build_module.cc\\n\\n tvm::build) as tb rectangle output { entity \"graph\" as graph entity \"new params\" as np entity \"mod\" as mod } grcmc .down-> graph: output grcmc .down-> np: output grcmc -left-> tb: LowerFunc, target_host tb .down-> mod: output","title":"\u6d41\u7a0b"},{"location":"tvm/tvm-start.html#build","text":"","title":"build\u8fc7\u7a0b"},{"location":"tvm/tvm-start.html#relay_1","text":"# tvm/tutorials/frontend/from_mxnet.py def from_mxnet ( symbol , shape = None , dtype = \"float32\" , arg_params = None , aux_params = None ): mod = _module . Module () func = _from_mxnet_impl ( symbol , shape , dtype , mod ) mod [ \"main\" ] = func return mod , params Module\u662f\u4e00\u4e2apython\u7c7b\uff0c\u901a\u8fc7register_relay_node\u6ce8\u518c\u5230\u4e86\u4e00\u4e2apython\u5168\u5c40\u7684node\u5b57\u5178\u4e2d\u3002 # python/tvm/relay/module.py @register_relay_node class Module ( RelayNode ): def __init__ ( self , functions = None , type_definitions = None ): self . __init_handle_by_constructor__ ( _make . Module , functions , type_definitions ) _make.Module\u662f\u83b7\u53d6\u4e86c++\u5b9e\u73b0\u7684\u4e00\u4e2aModule\u6784\u5efa\u65b9\u6cd5\u3002_init_api\u5c06c++\u4e2d\u7684global_func\u6309\u7167\u6a21\u5757\u52a8\u6001\u7ec4\u6210\u4e86python\u4e2d\u5404\u4e2a\u6a21\u5757\u7684\u65b9\u6cd5\u3002_init_api \u4e3b\u8981\u8c03\u7528\u4e86_init_api_prefix\u6765\u5b9e\u73b0\u529f\u80fd\uff0c\u5176\u4e2dget_global_func\u8fd4\u56de\u4e86\u4e00\u4e2aFunction\u5b9e\u4f8b\uff0c Function\u7ee7\u627f\u4e8eFunctionBase\uff0c\u5176\u4e2d\u5b9e\u73b0\u4e86__call__\u65b9\u6cd5\uff0c\u6240\u4ee5Python\u4e2dmodule\u7c7b\u7684\u65b9\u6cd5\u4e2d\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c_module.Module_ContainGlobalVar(self, var)\u7684\u64cd\u4f5c\u6765\u5b9e\u73b0\u5bf9c++\u7684\u8c03\u7528 # python/tvm/relay/_make.py _init_api ( \"relay._make\" , __name__ ) # python/tvm/_ffi/function.py def _init_api_prefix ( module_name , prefix ): for name in list_global_func_names (): f = get_global_func ( name ) ff = _get_api ( f ) ff . __name__ = fname setattr ( target_module , ff . __name__ , ff ) def get_global_func ( name , allow_missing = False ): handle = FunctionHandle () check_call ( _LIB . TVMFuncGetGlobal ( c_str ( name ), ctypes . byref ( handle ))) if handle . value : return Function ( handle , False ) class Function ( _FunctionBase ): class FunctionBase ( object ): def __call__ ( self , * args ): if _LIB . TVMFuncCall ( self . handle , values , tcodes , ctypes . c_int ( num_args ), ctypes . byref ( ret_val ), ctypes . byref ( ret_tcode )) != 0 : raise get_last_ffi_error () return RETURN_SWITCH [ ret_tcode . value ]( ret_val ) c++\u4e2d\u7684\u63a5\u53e3\u901a\u8fc7TVM_REGISTER_API\u8fdb\u884c\u6ce8\u518c,\u5176\u4e2dModuleNode::make\u8fd4\u56de\u4e86Module\u5b9e\u4f8b // src/relay/ir/module.cc TVM_REGISTER_API ( \"relay._make.Module\" ) . set_body_typed ( ModuleNode :: make ); Module ModuleNode :: make ( tvm :: Map < GlobalVar , Function > global_funcs , tvm :: Map < GlobalTypeVar , TypeData > global_type_defs ) self.__init_handle_by_constructor__\u6700\u7ec8\u901a\u8fc7_LIB.TVMFuncCall\u5b8c\u6210\u771f\u6b63\u7684c++\u51fd\u6570\u6267\u884c\uff0c\u8fd9\u4e2a\u8c03\u7528\u662f\u4e0d\u662f\u5f88\u719f\u6089\uff1f\u5bf9\u7684\uff0c\u5728FunctionBase\u7684__call__\u65b9\u6cd5\u4e2d\u4e5f\u662f\u8fd9\u6837\u5b9e\u73b0\u7684PackedFunc\u7684\u7531Python\u5230c++\u7684\u8c03\u7528 \u5176\u4e2dRETURN_SWITCH\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5b9e\u73b0\u4e86c++\u53d8\u91cf\u7c7b\u578b\u5230python\u53d8\u91cf\u7c7b\u578b\u7684\u8f6c\u6362 # python/tvm/_ffi/_ctypes/function.py def __init_handle_by_constructor__ ( fconstructor , args ): if _LIB . TVMFuncCall ( fconstructor . handle , values , tcodes , ctypes . c_int ( num_args ), ctypes . byref ( ret_val ), ctypes . byref ( ret_tcode )) != 0 : return RETURN_SWITCH [ ret_tcode . value ]( ret_val ) RETURN_SWITCH [ TypeCode . FUNC_HANDLE ] = _handle_return_func RETURN_SWITCH [ TypeCode . MODULE_HANDLE ] = _return_module # python/tvm/_ffi/_ctypes/types.py RETURN_SWITCH = { TypeCode . INT : lambda x : x . v_int64 , TypeCode . FLOAT : lambda x : x . v_float64 , TypeCode . HANDLE : _return_handle , TypeCode . NULL : lambda x : None , TypeCode . STR : lambda x : py_str ( x . v_str ), TypeCode . BYTES : _return_bytes , TypeCode . TVM_CONTEXT : _return_context }","title":"relay\u524d\u7aef"},{"location":"tvm/tvm-start.html#graphexper","text":"\u521b\u5efa\u5b8c\u6210modudle\u5b9e\u4f8b\u4e4b\u540e\uff0c_from_mxnet_impl \u904d\u5386\u4e86\u539f\u59cbgraph\u7684node, \u6839\u636eop\u540d\u79f0\u7684\u4e0d\u540c\uff0c\u586b\u5145\u4e0d\u540c\u7684expr\u5b9e\u4f8b\u5230node_map \u5e76\u4e14\u628a\u6700\u7ec8\u8f93\u51fa\u8282\u70b9\u5bf9\u5e94\u7684Function\u5b9e\u4f8b\u8fd4\u56de\uff0cmodule\u5b9e\u4f8b\u7684'main'\u8282\u70b9\u5b89\u88c5\u4e3a\u8be5func # python/tvm/relay/frontend/mxnet.py def _from_mxnet_impl ( symbol , shape_dict , dtype_info , mod = None ): jgraph = json . loads ( symbol . tojson ()) jnodes = jgraph [ \"nodes\" ] node_map = {} for nid , node in enumerate ( jnodes ): if op_name == \"null\" : node_map [ nid ] = [ _expr . var ( node_name , shape = shape , dtype = dtype )] elif op_name in _convert_map : res = _convert_map [ op_name ]( children , attrs ) outputs = [ node_map [ e [ 0 ]][ e [ 1 ]] for e in jgraph [ \"heads\" ]] func = _expr . Function ( analysis . free_vars ( outputs ), outputs ) return func \u5176\u4e2d_convert_map\u662frelay \u7684 mxnet\u524d\u7aef\u51c6\u5907\u597d\u7684\u4e00\u4e2a\u5b57\u5178\uff0c\u8bb0\u5f55\u7740\u6bcf\u4e2aop\u5bf9\u5e94\u7684relay\u7684\u8868\u8fbe\u3002null node\u4ee3\u8868\u5360\u4f4d/\u53d8\u91cf\u6216\u8005\u8f93\u5165\u8282\u70b9\uff0c\u88ab\u5b9e\u4f8b\u5316\u4e3aVar(A local variable in Relay) # python/tvm/relay/expr.py @register_relay_node class Var ( Expr ): def __init__ ( self , name_hint , type_annotation = None ): self . __init_handle_by_constructor__ ( _make . Var , name_hint , type_annotation ) class Expr ( RelayNode ): def __call__ ( self , * args ): return Call ( self , args ) @register_relay_node class Call ( Expr ): def __init__ ( self , op , args , attrs = None , type_args = None ): if not type_args : type_args = [] self . __init_handle_by_constructor__ ( _make . Call , op , args , attrs , type_args )","title":"\u8f6c\u6362\u539f\u59cbgraph\u4e3aexper"},{"location":"tvm/tvm-start.html#relaybuild","text":"\u901a\u8fc7\u8c03\u7528 relay.build_module._BuildModule \u521b\u5efaRelayBuildModule\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2ac++\u7684Module\u7c7b\u5b9e\u4f8b\uff0c \u5728python\u7aef\u8f6c\u6362\u8be5\u5b9e\u4f8b\u4e3aPthon Module\u7c7b\u5b9e\u4f8b\uff08_init_api()\u63a5\u53e3\u4e2d\u4f1a\u8fdb\u884c\u5904\u7406\uff09 // src/relay/backend/build_module.cc runtime :: Module RelayBuildCreate () { std :: shared_ptr < RelayBuildModule > exec = std :: make_shared < RelayBuildModule > (); return runtime :: Module ( exec ); } # python/tvm/module.py _init_api ( \"tvm.module\" ) _set_class_module ( Module ) python\u4e2d class Module\u5bf9\u5e94\u4e8ec++\u4e2d\u7684class Module, ModuleBase \u63d0\u4f9b\u4e86__getitem__\u65b9\u6cd5\uff0c\u53ef\u4ee5\u4f7f\u5f97 module[func_string] \u80fd\u591f\u8c03\u7528\u5230c++\u4e2d\u7684ModuleNode\u5bf9\u5e94\u7684function. # python/tvm/module.py class Module ( ModuleBase ): # python/tvm/_ffi/function.py class ModuleBase ( object ): def get_function ( self , name , query_imports = False ): ret_handle = FunctionHandle () check_call ( _LIB . TVMModGetFunction ( self . handle , c_str ( name ), ctypes . c_int ( query_imports ), ctypes . byref ( ret_handle ))) return Function ( ret_handle , False ) def __getitem__ ( self , name ): if not isinstance ( name , string_types ): raise ValueError ( \"Can only take string as function name\" ) return self . get_function ( name ) \u5728c++\u4e2d\uff0cmodule\u7684GetFunction\u5b9e\u9645\u4e0a\u4f1a\u8c03\u7528ModuleNode\u7684GetFunction // src/runtime/c_runtime_api.cc int TVMModGetFunction ( TVMModuleHandle mod , const char * func_name , int query_imports , TVMFunctionHandle * func ) { PackedFunc pf = static_cast < Module *> ( mod ) -> GetFunction ( func_name , query_imports != 0 ); * func = new PackedFunc ( pf ); } // include/tvm/runtime/packed_func.h inline PackedFunc Module::GetFunction ( const std :: string & name , bool query_imports ) { PackedFunc pf = node_ -> GetFunction ( name , node_ ); return pf ; } \u53ef\u4ee5\u53c2\u8003\u5982\u4e0b\u7c7b\u56fe (host module\\nclass tvm::runtime::Module) as hm (device module\\nclass tvm::runtime::Module) as dm (param \\n\u4ee5graph\u4e2d\u7684node\u7684name\u4e3akey\u7684\u53c2\u6570\u5b57\u5178) as param (graph \\n\u5305\u542b\u6240\u6709node\u7684json\u8868\u8fbe) as graph [device.so] --> dm hm --> (runtime Init): input dm <-- hm : call (param) --> (runtime Init): input (graph) --> (runtime Init): input \u8fd9\u6837\uff0c\u5728python\u4e2d\u8c03\u7528self.mod[\"build\"]\uff0c\u5219\u771f\u6b63\u6267\u884c\u4e86c++\u4e2d\u7684RelayBuildModule\u7684build\u529f\u80fd # python/tvm/relay/build_module.py class BuildModule ( object ): def __init__ ( self ): self . mod = _build_module . _BuildModule () self . _build = self . mod [ \"build\" ] def build ( self , func , target = None , target_host = None , params = None ): self . _build ( func , target , target_host ) RelayBuildModule \u7684 build, \u5fc5\u987b\u8981\u6ce8\u610f\u7684\u662f\uff0c Module \u548c ModuleNode \u5b58\u5728\u4e8e\u591a\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\uff0c\u8981\u6ce8\u610f\u533a\u5206\uff0c\u8fd9\u91cc\u8fd4\u56de\u7684\u662f\u5305\u542b runtime::ModuleNode \u7684 runtime::Module class RelayBuildModule : public runtime :: ModuleNode { PackedFunc GetFunction ( const std :: string & name , const std :: shared_ptr < ModuleNode >& sptr_to_self ) final { if ( name == \"build\" ) { return PackedFunc ([ sptr_to_self , this ]( TVMArgs args , TVMRetValue * rv ) { this -> Build ( args [ 0 ], args [ 1 ], args [ 2 ]); }); } } }","title":"Relay\u5c42Build"},{"location":"tvm/tvm-start.html#codebase-structure-overview","text":"\u8df3\u8f6c\u5230\u8f6f\u4ef6\u76ee\u5f55\u7ed3\u6784","title":"codebase-structure-overview"},{"location":"verilog/round_robin_algo.html","text":"\u4e00\u79cdround_robin\u7b97\u6cd5\u5b9e\u73b0 \u00b6 module roundrobin #( parameter RB_WIDTH = 4 ) ( input wire clk , input wire rst_n , input wire [ RB_WIDTH - 1 : 0 ] request , output wire [ RB_WIDTH - 1 : 0 ] gnt , ) reg [ RB_WIDTH - 1 : 0 ] state ; wire [ 2 * RB_WIDTH - 1 : 0 ] d_req = { req , req }; wire [ 2 * RB_WIDTH - 1 : 0 ] d_gnt ; assign d_gnt = d_req & ~ ( d_req - state ); assign gnt = d_gnt [ RB_WIDTH - 1 : 0 ] | d_gnt [ 2 * RB_WIDTH - 1 : RB_WIDTH ]; always @( posedge clk or negedge rst_n ) begin if ( ! rst_n ) begin state <= 1 ; end else if ( | req ) begin if ( state [ RB_WIDTH - 1 ]) begin state <= 1 ; end state <= state << 1 ; end end endmodule","title":"\u4e00\u79cdround_robin\u7b97\u6cd5\u5b9e\u73b0"},{"location":"verilog/round_robin_algo.html#round_robin","text":"module roundrobin #( parameter RB_WIDTH = 4 ) ( input wire clk , input wire rst_n , input wire [ RB_WIDTH - 1 : 0 ] request , output wire [ RB_WIDTH - 1 : 0 ] gnt , ) reg [ RB_WIDTH - 1 : 0 ] state ; wire [ 2 * RB_WIDTH - 1 : 0 ] d_req = { req , req }; wire [ 2 * RB_WIDTH - 1 : 0 ] d_gnt ; assign d_gnt = d_req & ~ ( d_req - state ); assign gnt = d_gnt [ RB_WIDTH - 1 : 0 ] | d_gnt [ 2 * RB_WIDTH - 1 : RB_WIDTH ]; always @( posedge clk or negedge rst_n ) begin if ( ! rst_n ) begin state <= 1 ; end else if ( | req ) begin if ( state [ RB_WIDTH - 1 ]) begin state <= 1 ; end state <= state << 1 ; end end endmodule","title":"\u4e00\u79cdround_robin\u7b97\u6cd5\u5b9e\u73b0"},{"location":"verilog/verilog1.html","text":"verilog\u7b2c\u4e00\u7bc7 \u00b6 \u5165\u95e8verilog\u7684\u7b2c\u4e00\u7bc7\uff0c\u6253\u7b97\u4ee5\u591a\u7bc7\u7ae0\u7684\u5f62\u5f0f\u8bb0\u5f55\u4e00\u4e0b\u5b66\u4e60\u8fc7\u7a0b \u5f00\u53d1\u73af\u5883\u7684\u9009\u62e9 \u00b6 \u6211\u89c9\u5f97\u8fd9\u662f\u9996\u8981\u7684\uff0c\u5148\u4e86\u89e3\u4e00\u4e0bverilog\u5f00\u53d1\u7684\u5957\u8def\u3002\u4ee3\u7801\u7f16\u8f91\u9996\u5148\u8003\u8651vscode\uff0c\u53d1\u73b0\u91cc\u9762\u4e5f\u6709\u652f\u6301verilog\u7684\u63d2\u4ef6\uff0c\u5177\u4f53\u4f53\u9a8c\u5982\u4f55\u73b0\u5728\u4e0d\u597d\u8bc4\u4ef7\uff0c\u6682\u5b9a\u8fd9\u4e2a\u3002 \u6309\u7167\u901a\u5e38\u7406\u89e3\uff0c\u5199\u597d\u7684verilog\u4ee3\u7801\u60f3\u8981\u770b\u5230\u6548\u679c\u5e94\u8be5\u9700\u8981\u4e00\u4e2a\u8fd0\u884c\u73af\u5883\u3002 \u5728C\u8bed\u8a00\u5f00\u53d1\u4e2d\uff0c\u6211\u4eec\u5199\u597d\u4e00\u4e2aC\u7684\u5e94\u7528\uff0c\u9700\u8981\u7ecf\u8fc7\u7f16\u8bd1\u5668\u7f16\u8bd1\u94fe\u63a5\u6210\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u7136\u540e\u9700\u8981\u4e00\u4e2a\u8fd0\u884c\u73af\u5883\u6765\u6267\u884c\u3002\u4e0d\u540c\u5e73\u53f0\u7684\u7f16\u8bd1\u5668\u80fd\u7f16\u8bd1\u51fa\u4e0d\u540c\u5e73\u53f0\u7684\u76ee\u6807\u53ef\u6267\u884c \u6587\u4ef6\uff0c\u7136\u540e\u4e0d\u9700\u8981\u4e0d\u540c\u5e73\u53f0\u7684\u8fd0\u884c\u73af\u5883\u6765\u6267\u884c\u3002verilog\u53ef\u4ee5\u7c7b\u6bd4C\u8bed\u8a00\uff0cvivado(xilinx\u516c\u53f8)\uff0cquartus2(altera\u516c\u53f8),vcs(synopsys\u516c\u53f8)\u53ef\u4ee5\u8ba4\u4e3a\u662f\u5de5\u5177\u94fe(\u5b9e\u9645\u4e0a \u4e0d\u4ec5\u4ec5\u662f\u5de5\u5177\u94fe\uff0c\u7f16\u8bd1\u53ea\u662f\u5176\u529f\u80fd\u7684\u4e00\u5c0f\u90e8\u5206\uff0c\u8fd9\u4e9b\u53ef\u4ee5\u7406\u89e3\u6210Keil\u8fd9\u79cdIDE)\u3002\u5f53\u7136\uff0c\u5176\u5b9e\u6ca1\u6709\u4e00\u4e2agcc\u8fd9\u6837\u7684\u6846\u67b6\u4e0e\u4e4b\u5bf9\u5e94\uff0c\u4f3c\u4e4e\u5404\u5927\u516c\u53f8\u90fd\u662f\u5404\u5199\u5404\u7684\uff0c\u53ea\u5728\u8bed\u8a00\u5c42\u9762\u4e0a\u8fdb\u884c\u7edf\u4e00\uff0c \u800c\u4e0d\u4f1a\u60f3gcc\u6216\u8005clang\u8fd9\u6837\u505a\u6210\u4e00\u4e2a\u5de5\u5177\u94fe\u5e73\u53f0\u3002 verilog\u7f16\u8bd1\u540e\u751f\u6210\u7684\u662fbitfile\uff0cC\u5f53\u7136\u662felf\uff08exe\uff09\u3002\u90a3\u4e48\u9700\u8981\u4e00\u4e2a\u8fd0\u884c\u73af\u5883\uff0c\u6bd4\u5982\u7f16x86\u4ee3\u7801\u53ef\u4ee5\u76f4\u63a5\u5728pc\u4e0a\u8fd0\u884c\uff0c\u7f16riscv\u4ee3\u7801\u5c31\u9700\u8981riscv\u6a21\u62df\u5668\u6216\u8005\u771f\u5b9e\u786c\u4ef6\u3002\u5bf9\u4e8ebitfile\uff0c \u5f53\u7136\u5982\u679c\u6709\u5404\u4e2a\u5382\u5bb6\u5bf9\u5e94\u7684\u771f\u5b9e\u786c\u4ef6\uff0c\u90a3\u4e48\u53ef\u4ee5\u5728\u771f\u5b9e\u786c\u4ef6\u4e0a\u8fd0\u884c\uff0c\u9664\u6b64\u4e4b\u5916\u53ef\u4ee5\u5728Modelsim\u8fd9\u79cd\u901a\u7528\u4eff\u771f\u5e73\u53f0\u4e0a\u8fdb\u884c\u3002\u90a3\u4e48modelsim\u5c31\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u652f\u6301\u591a\u5382\u5bb6bitfile\u7684\u6a21\u62df\u5668\uff0c\u800c\u4e14 \u80fd\u591f\u63d0\u4f9b\u4e00\u4e9b\u8c03\u8bd5\u624b\u6bb5\u3002 \u7efc\u5408\u770b\u4e0b\u6765\uff0c\u6574\u4e2aIC\u7684\u5f00\u53d1\u548c\u8f6f\u4ef6\u5f00\u53d1\u7684\u5957\u8def\u7c7b\u4f3c\uff0c\u4f46\u76ee\u524d\u611f\u89c9\u5e73\u53f0\u6027\u4e0d\u5982\u8f6f\u4ef6 \u6240\u4ee5\u76ee\u524d\u770b\u4e0b\u6765\uff0c\u5927\u5bb6\u7528\u7684\u6bd4\u8f83\u591a\u7684\uff0c\u6bd4\u5982quartus2 + modelsim\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u5f53\u7136\u9700\u8981windows\u5e73\u53f0\u3002 \u4f5c\u4e3a\u4e00\u4e2alinux\u5f00\u53d1\u8005\uff0c\u663e\u7136\u66f4\u559c\u6b22linux\u7684\u5f00\u53d1\u73af\u5883\uff0cwindows\u4f7f\u7528\u8d77\u6765\u8fd8\u662f\u6709\u4e9b\u9ebb\u70e6\uff0c\u6240\u4ee5\u53d1\u73b0\u5927\u5bb6\u57fa\u4e8elinux\u7684\u7cfb\u7edf\u5f00\u53d1\u73af\u5883\u666e\u904d\u662fiverilog\u548cgtkwave\u3002\u521d\u6b65\u4e86\u89e3\uff0civerilog(Icarus Verilog)\u53f7\u79f0\u201c\u5168\u7403\u7b2c\u56db\u5927\u201d\u6570\u5b57\u82af\u7247\u4eff\u771f\u5668\u3002\u56e0\u4e3a\u5f00\u6e90\uff0c\u5e7f\u53d7\u6b22\u8fce\u3002GTKWave\u662f\u6ce2\u5f62\u6587\u4ef6\u5bdf\u770b\u5de5\u5177\uff0c\u4e5f\u662f\u5f00\u6e90\u3002 \u597d\u5427\uff0c\u5de5\u5177\u4e4b\u4e89\u5c31\u544a\u4e00\u6bb5\u843d\uff0c\u672c\u7740\u62e5\u62b1\u5f00\u6e90\u7684\u601d\u8def\uff0civerilog+gtkwave\u641e\u8d77\u3002 \u670b\u53cb\u63a8\u8350\u4e86\u590f\u5b87\u95fb\u8001\u5e08\u7684verilog\u76f8\u5173\u4e66\u7c4d\uff0c\u7279\u6b64\u8bb0\u5f55\u3002 \u73af\u5883\u642d\u5efa \u00b6 iverilog\u5b98\u7f51\u7684\u6e90\u7801\u5b89\u88c5\u6307\u5bfc \u91c7\u7528\u6e90\u7801\u5b89\u88c5\u7684\u65b9\u5f0f\uff08\u5c3d\u7ba1\u8981\u6e90\u7801\u76ee\u524d\u4e5f\u4e0d\u4f1a\u53bb\u7814\u7a76\uff09,\u4ecegithub\u4e0a\u83b7\u53d6\u6e90\u7801 iverilog git clone https://github.com/steveicarus/iverilog.git \u9009\u62e9\u6700\u65b0\u7a33\u5b9a\u5206\u652f chsgcxy@chsgcxy-TM1703:~/workspace/iverilog$ git branch -a remotes/origin/v0_9-branch remotes/origin/v10-branch remotes/origin/v11-branch chsgcxy@chsgcxy-TM1703:~/workspace/iverilog$ git checkout -b br11 origin/v11-branch \u5b89\u88c5\u4f9d\u8d56\uff0c \u8fd9\u4e9b\u4f9d\u8d56\u6211\u90fd\u5b89\u88c5\u8fc7\u4e86( g++ and gcc\u4e5f\u9700\u8981) chsgcxy@chsgcxy-TM1703:~/workspace/iverilog$ sudo apt-get install bison flex autoconf gperf \u751f\u6210makefile chsgcxy@chsgcxy-TM1703:~/workspace/iverilog$ chmod +x autoconf.sh chsgcxy@chsgcxy-TM1703:~/workspace/iverilog$ ./autoconf.sh chsgcxy@chsgcxy-TM1703:~/workspace/iverilog$ ./configure --prefix = /home/chsgcxy/opt/iverilog/ chsgcxy@chsgcxy-TM1703:~/workspace/iverilog$ make -j4 chsgcxy@chsgcxy-TM1703:~/workspace/iverilog$ make install \u6700\u540e\u522b\u5fd8\u4e86\u628a\u5b89\u88c5\u8def\u5f84\u52a0\u5165\u5230PATH\u4e2d\uff0c\u7528iverilog -h\u8bd5\u4e00\u4e0b\u662f\u4e0d\u662f\u5b89\u88c5\u6210\u529f \u76f4\u63a5\u4f7f\u7528apt\u6765\u6309\u7167gtkwave chsgcxy@chsgcxy-TM1703:~/workspace/iverilog$ sudo apt-get install gtkwave \u8fd9\u91cc\u7ed9\u51fagtkwave\u7684\u8d44\u6599 https://iverilog.fandom.com/wiki/GTKWave http://gtkwave.sourceforge.net/ \u5c1d\u8bd5\u8fd0\u884c\u73b0\u6709demo \u00b6 \u8fd8\u662f\u90a3\u4e2a\u539f\u5219\uff0c\u6709\u67a3\u6ca1\u67a3\u5148\u6253\u4e09\u6746\uff0c\u867d\u7136\u8fd8\u4e0d\u719f\u6089verilog\uff0c\u4f46\u5148\u8fd0\u884c\u4e00\u4e2ademo\u770b\u770b\uff0c\u628a\u8fd0\u884c\u6d41\u7a0b\u548c\u8c03\u8bd5\u65b9\u6cd5\u719f\u6089\u8d77\u6765\u3002 \u6284\u7684\u4e00\u4e2a\u52a0\u6cd5\u5668\u7684\u5b9e\u73b0\uff08\u770b\u8d77\u6765\u5199\u4e00\u4e2aa+b\u4e5f\u5c31\u662f\u5199\u4e00\u4e2aa+b\uff09 module adder ( clk , rst_n , a , b , c ); input [ 3 : 0 ] a ; input [ 3 : 0 ] b ; output [ 7 : 0 ] c ; input clk , rst_n ; wire [ 3 : 0 ] a ; wire [ 3 : 0 ] b ; reg [ 7 : 0 ] c ; always @( posedge clk or negedge rst_n ) begin if ( rst_n == 1 'b0 ) c <= 8 'b0 ; else c <= a + b ; end endmodule \u6284\u7684\u4e00\u4e2a\u6d4b\u8bd5case `timescale 1 ns / 1 ns module adder_tb (); reg [ 3 : 0 ] a ; reg [ 3 : 0 ] b ; wire [ 7 : 0 ] c ; reg clk , rst_n ; adder DUT ( . clk ( clk ), . rst_n ( rst_n ), . a ( a ), . b ( b ), . c ( c ) ); always begin # 10 clk = 0 ; # 10 clk = 1 ; end initial begin rst_n = 1 ; test ( 4 'b1111 , 4 'b1111 , 5 'b11110 ); $finish ; end task test ; input [ 3 : 0 ] in ; input [ 3 : 0 ] in2 ; input [ 7 : 0 ] e ; begin a = in ; b = in2 ; @( posedge clk ); @( negedge clk ); if ( c == e ) begin $display ( \"It works\" ); end else begin $display ( \"opps %d + %d ~= %d, expect %d\" , in , in2 , c , e ); end end endtask initial begin $dumpfile ( \"wave.vcd\" ); // \u6307\u5b9a\u7528\u4f5cdumpfile\u7684\u6587\u4ef6 $dumpvars ; // dump all vars end endmodule \u50cfC\u4e00\u6837\u4e5f\u8fdb\u884c\u7f16\u8bd1\uff0civerilog\u7f16\u8bd1\u540e\u751f\u6210\u7684\u662f\u4e00\u4e2avpp\u683c\u5f0f\u7684\u4e2d\u95f4\u6587\u4ef6\uff0c\u9ed8\u8ba4\u4e5f\u662fa.out chsgcxy@chsgcxy-TM1703:~/workspace/misc$ iverilog test.v tb.v chsgcxy@chsgcxy-TM1703:~/workspace/misc$ file a.out a.out: a /home/chsgcxy/opt/iverilog/bin/vvp script, ASCII text executable \u4f7f\u7528gtkwave\u67e5\u770b\u6ce2\u5f62 $dumpfile(\"wave.vcd\"); $dumpvars; \u5b8c\u6210\u4e86dump\u6ce2\u5f62\u6587\u4ef6\u7684\u52a8\u4f5c chsgcxy@chsgcxy-TM1703:~/workspace/misc$ gtkwave wave.vcd \u5f00\u7bc7\u5c31\u662f\u8fd9\u6837\uff0c\u6709\u4e86\u4e00\u4e2a\u5927\u81f4\u7684\u4e86\u89e3\u3002\u63a5\u4e0b\u6765\u5c31\u8be5\u5c1d\u8bd5\u6839\u636e\u522b\u4eba\u7684\u66f4\u9ad8\u7ea7\u4e00\u4e9b\u7684\u4ee3\u7801\u8fdb\u4e00\u6b65\u719f\u6089\u8fd9\u5957\u8bed\u8a00\u548c\u73af\u5883\u4e86\u3002 \u540e\u8bb0 \u00b6 iverilog\u7684\u8bbe\u8ba1\u601d\u60f3\u8ddf\u8f6f\u4ef6\u7684\u5de5\u5177\u94fe\u5f88\u50cf\uff0c\u5b83\u4f7f\u7528vpp\u8fd9\u79cdIR\u6765\u5b9e\u73b0\u5b83\u7684\u529f\u80fd\uff0c\u901a\u8fc7\u4e00\u4e2a\u4e2d\u95f4\u8bed\u8a00\u6765\u5b9e\u73b0\u4e00\u4e9b\u529f\u80fd\u7684\u601d\u7ef4 \u5176\u5b9e\u5728\u5f88\u591a\u5730\u65b9\u90fd\u80fd\u770b\u5230\uff0c\u6bd4\u5982\u4f20\u7edf\u7f16\u8bd1\u5668\uff0ctvm, java\u7b49\u7b49\uff0c\u5927\u5bb6\u90fd\u662f\u8fd9\u79cd\u601d\u8def\uff0c\u503c\u5f97\u5b66\u4e60\u3002 gtkwave\u662f\u4e00\u4e2a\u6ce2\u5f62\u6587\u4ef6\u67e5\u770b\u5de5\u5177\uff0c\u4ed6\u652f\u6301\u7684\u6587\u4ef6\u683c\u5f0f\u6709VCD\u548cEVCD\u3002\u90a3\u4e48\u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u505a\u66f4\u591a\uff0c\u6bd4\u5982\u8bf4\u8ba9 gem5\u6765\u652f\u6301\u5c06\u6307\u4ee4\u6d41\u4fe1\u606f\u8f6c\u6362\u6210VCD\u6587\u4ef6\uff0c\u90a3\u4e48\u6307\u4ee4\u6d41\u5c31\u53ef\u4ee5\u901a\u8fc7gtkwave\u6765\u67e5\u770b\u4e86\u3002\u8fd9\u5bf9\u4e8e\u6027\u80fd\u5206\u6790\u6709\u5f88\u5927\u5e2e\u52a9\u3002 \u5f53\u7136\uff0c\u7c7b\u4f3c\u7684\u8f6f\u4ef6\u5e94\u8be5\u8fd8\u6709\u5f88\u591a\uff0c\u4e5f\u6709\u53ef\u80fd\u6709\u66f4\u7b80\u5355\u65b9\u4fbf\u7684\u5de5\u5177\u80fd\u5b8c\u6210\u8fd9\u4e2a\u529f\u80fd\u3002","title":"verilog\u7b2c\u4e00\u7bc7"},{"location":"verilog/verilog1.html#verilog","text":"\u5165\u95e8verilog\u7684\u7b2c\u4e00\u7bc7\uff0c\u6253\u7b97\u4ee5\u591a\u7bc7\u7ae0\u7684\u5f62\u5f0f\u8bb0\u5f55\u4e00\u4e0b\u5b66\u4e60\u8fc7\u7a0b","title":"verilog\u7b2c\u4e00\u7bc7"},{"location":"verilog/verilog1.html#_1","text":"\u6211\u89c9\u5f97\u8fd9\u662f\u9996\u8981\u7684\uff0c\u5148\u4e86\u89e3\u4e00\u4e0bverilog\u5f00\u53d1\u7684\u5957\u8def\u3002\u4ee3\u7801\u7f16\u8f91\u9996\u5148\u8003\u8651vscode\uff0c\u53d1\u73b0\u91cc\u9762\u4e5f\u6709\u652f\u6301verilog\u7684\u63d2\u4ef6\uff0c\u5177\u4f53\u4f53\u9a8c\u5982\u4f55\u73b0\u5728\u4e0d\u597d\u8bc4\u4ef7\uff0c\u6682\u5b9a\u8fd9\u4e2a\u3002 \u6309\u7167\u901a\u5e38\u7406\u89e3\uff0c\u5199\u597d\u7684verilog\u4ee3\u7801\u60f3\u8981\u770b\u5230\u6548\u679c\u5e94\u8be5\u9700\u8981\u4e00\u4e2a\u8fd0\u884c\u73af\u5883\u3002 \u5728C\u8bed\u8a00\u5f00\u53d1\u4e2d\uff0c\u6211\u4eec\u5199\u597d\u4e00\u4e2aC\u7684\u5e94\u7528\uff0c\u9700\u8981\u7ecf\u8fc7\u7f16\u8bd1\u5668\u7f16\u8bd1\u94fe\u63a5\u6210\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u7136\u540e\u9700\u8981\u4e00\u4e2a\u8fd0\u884c\u73af\u5883\u6765\u6267\u884c\u3002\u4e0d\u540c\u5e73\u53f0\u7684\u7f16\u8bd1\u5668\u80fd\u7f16\u8bd1\u51fa\u4e0d\u540c\u5e73\u53f0\u7684\u76ee\u6807\u53ef\u6267\u884c \u6587\u4ef6\uff0c\u7136\u540e\u4e0d\u9700\u8981\u4e0d\u540c\u5e73\u53f0\u7684\u8fd0\u884c\u73af\u5883\u6765\u6267\u884c\u3002verilog\u53ef\u4ee5\u7c7b\u6bd4C\u8bed\u8a00\uff0cvivado(xilinx\u516c\u53f8)\uff0cquartus2(altera\u516c\u53f8),vcs(synopsys\u516c\u53f8)\u53ef\u4ee5\u8ba4\u4e3a\u662f\u5de5\u5177\u94fe(\u5b9e\u9645\u4e0a \u4e0d\u4ec5\u4ec5\u662f\u5de5\u5177\u94fe\uff0c\u7f16\u8bd1\u53ea\u662f\u5176\u529f\u80fd\u7684\u4e00\u5c0f\u90e8\u5206\uff0c\u8fd9\u4e9b\u53ef\u4ee5\u7406\u89e3\u6210Keil\u8fd9\u79cdIDE)\u3002\u5f53\u7136\uff0c\u5176\u5b9e\u6ca1\u6709\u4e00\u4e2agcc\u8fd9\u6837\u7684\u6846\u67b6\u4e0e\u4e4b\u5bf9\u5e94\uff0c\u4f3c\u4e4e\u5404\u5927\u516c\u53f8\u90fd\u662f\u5404\u5199\u5404\u7684\uff0c\u53ea\u5728\u8bed\u8a00\u5c42\u9762\u4e0a\u8fdb\u884c\u7edf\u4e00\uff0c \u800c\u4e0d\u4f1a\u60f3gcc\u6216\u8005clang\u8fd9\u6837\u505a\u6210\u4e00\u4e2a\u5de5\u5177\u94fe\u5e73\u53f0\u3002 verilog\u7f16\u8bd1\u540e\u751f\u6210\u7684\u662fbitfile\uff0cC\u5f53\u7136\u662felf\uff08exe\uff09\u3002\u90a3\u4e48\u9700\u8981\u4e00\u4e2a\u8fd0\u884c\u73af\u5883\uff0c\u6bd4\u5982\u7f16x86\u4ee3\u7801\u53ef\u4ee5\u76f4\u63a5\u5728pc\u4e0a\u8fd0\u884c\uff0c\u7f16riscv\u4ee3\u7801\u5c31\u9700\u8981riscv\u6a21\u62df\u5668\u6216\u8005\u771f\u5b9e\u786c\u4ef6\u3002\u5bf9\u4e8ebitfile\uff0c \u5f53\u7136\u5982\u679c\u6709\u5404\u4e2a\u5382\u5bb6\u5bf9\u5e94\u7684\u771f\u5b9e\u786c\u4ef6\uff0c\u90a3\u4e48\u53ef\u4ee5\u5728\u771f\u5b9e\u786c\u4ef6\u4e0a\u8fd0\u884c\uff0c\u9664\u6b64\u4e4b\u5916\u53ef\u4ee5\u5728Modelsim\u8fd9\u79cd\u901a\u7528\u4eff\u771f\u5e73\u53f0\u4e0a\u8fdb\u884c\u3002\u90a3\u4e48modelsim\u5c31\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u652f\u6301\u591a\u5382\u5bb6bitfile\u7684\u6a21\u62df\u5668\uff0c\u800c\u4e14 \u80fd\u591f\u63d0\u4f9b\u4e00\u4e9b\u8c03\u8bd5\u624b\u6bb5\u3002 \u7efc\u5408\u770b\u4e0b\u6765\uff0c\u6574\u4e2aIC\u7684\u5f00\u53d1\u548c\u8f6f\u4ef6\u5f00\u53d1\u7684\u5957\u8def\u7c7b\u4f3c\uff0c\u4f46\u76ee\u524d\u611f\u89c9\u5e73\u53f0\u6027\u4e0d\u5982\u8f6f\u4ef6 \u6240\u4ee5\u76ee\u524d\u770b\u4e0b\u6765\uff0c\u5927\u5bb6\u7528\u7684\u6bd4\u8f83\u591a\u7684\uff0c\u6bd4\u5982quartus2 + modelsim\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u5f53\u7136\u9700\u8981windows\u5e73\u53f0\u3002 \u4f5c\u4e3a\u4e00\u4e2alinux\u5f00\u53d1\u8005\uff0c\u663e\u7136\u66f4\u559c\u6b22linux\u7684\u5f00\u53d1\u73af\u5883\uff0cwindows\u4f7f\u7528\u8d77\u6765\u8fd8\u662f\u6709\u4e9b\u9ebb\u70e6\uff0c\u6240\u4ee5\u53d1\u73b0\u5927\u5bb6\u57fa\u4e8elinux\u7684\u7cfb\u7edf\u5f00\u53d1\u73af\u5883\u666e\u904d\u662fiverilog\u548cgtkwave\u3002\u521d\u6b65\u4e86\u89e3\uff0civerilog(Icarus Verilog)\u53f7\u79f0\u201c\u5168\u7403\u7b2c\u56db\u5927\u201d\u6570\u5b57\u82af\u7247\u4eff\u771f\u5668\u3002\u56e0\u4e3a\u5f00\u6e90\uff0c\u5e7f\u53d7\u6b22\u8fce\u3002GTKWave\u662f\u6ce2\u5f62\u6587\u4ef6\u5bdf\u770b\u5de5\u5177\uff0c\u4e5f\u662f\u5f00\u6e90\u3002 \u597d\u5427\uff0c\u5de5\u5177\u4e4b\u4e89\u5c31\u544a\u4e00\u6bb5\u843d\uff0c\u672c\u7740\u62e5\u62b1\u5f00\u6e90\u7684\u601d\u8def\uff0civerilog+gtkwave\u641e\u8d77\u3002 \u670b\u53cb\u63a8\u8350\u4e86\u590f\u5b87\u95fb\u8001\u5e08\u7684verilog\u76f8\u5173\u4e66\u7c4d\uff0c\u7279\u6b64\u8bb0\u5f55\u3002","title":"\u5f00\u53d1\u73af\u5883\u7684\u9009\u62e9"},{"location":"verilog/verilog1.html#_2","text":"iverilog\u5b98\u7f51\u7684\u6e90\u7801\u5b89\u88c5\u6307\u5bfc \u91c7\u7528\u6e90\u7801\u5b89\u88c5\u7684\u65b9\u5f0f\uff08\u5c3d\u7ba1\u8981\u6e90\u7801\u76ee\u524d\u4e5f\u4e0d\u4f1a\u53bb\u7814\u7a76\uff09,\u4ecegithub\u4e0a\u83b7\u53d6\u6e90\u7801 iverilog git clone https://github.com/steveicarus/iverilog.git \u9009\u62e9\u6700\u65b0\u7a33\u5b9a\u5206\u652f chsgcxy@chsgcxy-TM1703:~/workspace/iverilog$ git branch -a remotes/origin/v0_9-branch remotes/origin/v10-branch remotes/origin/v11-branch chsgcxy@chsgcxy-TM1703:~/workspace/iverilog$ git checkout -b br11 origin/v11-branch \u5b89\u88c5\u4f9d\u8d56\uff0c \u8fd9\u4e9b\u4f9d\u8d56\u6211\u90fd\u5b89\u88c5\u8fc7\u4e86( g++ and gcc\u4e5f\u9700\u8981) chsgcxy@chsgcxy-TM1703:~/workspace/iverilog$ sudo apt-get install bison flex autoconf gperf \u751f\u6210makefile chsgcxy@chsgcxy-TM1703:~/workspace/iverilog$ chmod +x autoconf.sh chsgcxy@chsgcxy-TM1703:~/workspace/iverilog$ ./autoconf.sh chsgcxy@chsgcxy-TM1703:~/workspace/iverilog$ ./configure --prefix = /home/chsgcxy/opt/iverilog/ chsgcxy@chsgcxy-TM1703:~/workspace/iverilog$ make -j4 chsgcxy@chsgcxy-TM1703:~/workspace/iverilog$ make install \u6700\u540e\u522b\u5fd8\u4e86\u628a\u5b89\u88c5\u8def\u5f84\u52a0\u5165\u5230PATH\u4e2d\uff0c\u7528iverilog -h\u8bd5\u4e00\u4e0b\u662f\u4e0d\u662f\u5b89\u88c5\u6210\u529f \u76f4\u63a5\u4f7f\u7528apt\u6765\u6309\u7167gtkwave chsgcxy@chsgcxy-TM1703:~/workspace/iverilog$ sudo apt-get install gtkwave \u8fd9\u91cc\u7ed9\u51fagtkwave\u7684\u8d44\u6599 https://iverilog.fandom.com/wiki/GTKWave http://gtkwave.sourceforge.net/","title":"\u73af\u5883\u642d\u5efa"},{"location":"verilog/verilog1.html#demo","text":"\u8fd8\u662f\u90a3\u4e2a\u539f\u5219\uff0c\u6709\u67a3\u6ca1\u67a3\u5148\u6253\u4e09\u6746\uff0c\u867d\u7136\u8fd8\u4e0d\u719f\u6089verilog\uff0c\u4f46\u5148\u8fd0\u884c\u4e00\u4e2ademo\u770b\u770b\uff0c\u628a\u8fd0\u884c\u6d41\u7a0b\u548c\u8c03\u8bd5\u65b9\u6cd5\u719f\u6089\u8d77\u6765\u3002 \u6284\u7684\u4e00\u4e2a\u52a0\u6cd5\u5668\u7684\u5b9e\u73b0\uff08\u770b\u8d77\u6765\u5199\u4e00\u4e2aa+b\u4e5f\u5c31\u662f\u5199\u4e00\u4e2aa+b\uff09 module adder ( clk , rst_n , a , b , c ); input [ 3 : 0 ] a ; input [ 3 : 0 ] b ; output [ 7 : 0 ] c ; input clk , rst_n ; wire [ 3 : 0 ] a ; wire [ 3 : 0 ] b ; reg [ 7 : 0 ] c ; always @( posedge clk or negedge rst_n ) begin if ( rst_n == 1 'b0 ) c <= 8 'b0 ; else c <= a + b ; end endmodule \u6284\u7684\u4e00\u4e2a\u6d4b\u8bd5case `timescale 1 ns / 1 ns module adder_tb (); reg [ 3 : 0 ] a ; reg [ 3 : 0 ] b ; wire [ 7 : 0 ] c ; reg clk , rst_n ; adder DUT ( . clk ( clk ), . rst_n ( rst_n ), . a ( a ), . b ( b ), . c ( c ) ); always begin # 10 clk = 0 ; # 10 clk = 1 ; end initial begin rst_n = 1 ; test ( 4 'b1111 , 4 'b1111 , 5 'b11110 ); $finish ; end task test ; input [ 3 : 0 ] in ; input [ 3 : 0 ] in2 ; input [ 7 : 0 ] e ; begin a = in ; b = in2 ; @( posedge clk ); @( negedge clk ); if ( c == e ) begin $display ( \"It works\" ); end else begin $display ( \"opps %d + %d ~= %d, expect %d\" , in , in2 , c , e ); end end endtask initial begin $dumpfile ( \"wave.vcd\" ); // \u6307\u5b9a\u7528\u4f5cdumpfile\u7684\u6587\u4ef6 $dumpvars ; // dump all vars end endmodule \u50cfC\u4e00\u6837\u4e5f\u8fdb\u884c\u7f16\u8bd1\uff0civerilog\u7f16\u8bd1\u540e\u751f\u6210\u7684\u662f\u4e00\u4e2avpp\u683c\u5f0f\u7684\u4e2d\u95f4\u6587\u4ef6\uff0c\u9ed8\u8ba4\u4e5f\u662fa.out chsgcxy@chsgcxy-TM1703:~/workspace/misc$ iverilog test.v tb.v chsgcxy@chsgcxy-TM1703:~/workspace/misc$ file a.out a.out: a /home/chsgcxy/opt/iverilog/bin/vvp script, ASCII text executable \u4f7f\u7528gtkwave\u67e5\u770b\u6ce2\u5f62 $dumpfile(\"wave.vcd\"); $dumpvars; \u5b8c\u6210\u4e86dump\u6ce2\u5f62\u6587\u4ef6\u7684\u52a8\u4f5c chsgcxy@chsgcxy-TM1703:~/workspace/misc$ gtkwave wave.vcd \u5f00\u7bc7\u5c31\u662f\u8fd9\u6837\uff0c\u6709\u4e86\u4e00\u4e2a\u5927\u81f4\u7684\u4e86\u89e3\u3002\u63a5\u4e0b\u6765\u5c31\u8be5\u5c1d\u8bd5\u6839\u636e\u522b\u4eba\u7684\u66f4\u9ad8\u7ea7\u4e00\u4e9b\u7684\u4ee3\u7801\u8fdb\u4e00\u6b65\u719f\u6089\u8fd9\u5957\u8bed\u8a00\u548c\u73af\u5883\u4e86\u3002","title":"\u5c1d\u8bd5\u8fd0\u884c\u73b0\u6709demo"},{"location":"verilog/verilog1.html#_3","text":"iverilog\u7684\u8bbe\u8ba1\u601d\u60f3\u8ddf\u8f6f\u4ef6\u7684\u5de5\u5177\u94fe\u5f88\u50cf\uff0c\u5b83\u4f7f\u7528vpp\u8fd9\u79cdIR\u6765\u5b9e\u73b0\u5b83\u7684\u529f\u80fd\uff0c\u901a\u8fc7\u4e00\u4e2a\u4e2d\u95f4\u8bed\u8a00\u6765\u5b9e\u73b0\u4e00\u4e9b\u529f\u80fd\u7684\u601d\u7ef4 \u5176\u5b9e\u5728\u5f88\u591a\u5730\u65b9\u90fd\u80fd\u770b\u5230\uff0c\u6bd4\u5982\u4f20\u7edf\u7f16\u8bd1\u5668\uff0ctvm, java\u7b49\u7b49\uff0c\u5927\u5bb6\u90fd\u662f\u8fd9\u79cd\u601d\u8def\uff0c\u503c\u5f97\u5b66\u4e60\u3002 gtkwave\u662f\u4e00\u4e2a\u6ce2\u5f62\u6587\u4ef6\u67e5\u770b\u5de5\u5177\uff0c\u4ed6\u652f\u6301\u7684\u6587\u4ef6\u683c\u5f0f\u6709VCD\u548cEVCD\u3002\u90a3\u4e48\u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u505a\u66f4\u591a\uff0c\u6bd4\u5982\u8bf4\u8ba9 gem5\u6765\u652f\u6301\u5c06\u6307\u4ee4\u6d41\u4fe1\u606f\u8f6c\u6362\u6210VCD\u6587\u4ef6\uff0c\u90a3\u4e48\u6307\u4ee4\u6d41\u5c31\u53ef\u4ee5\u901a\u8fc7gtkwave\u6765\u67e5\u770b\u4e86\u3002\u8fd9\u5bf9\u4e8e\u6027\u80fd\u5206\u6790\u6709\u5f88\u5927\u5e2e\u52a9\u3002 \u5f53\u7136\uff0c\u7c7b\u4f3c\u7684\u8f6f\u4ef6\u5e94\u8be5\u8fd8\u6709\u5f88\u591a\uff0c\u4e5f\u6709\u53ef\u80fd\u6709\u66f4\u7b80\u5355\u65b9\u4fbf\u7684\u5de5\u5177\u80fd\u5b8c\u6210\u8fd9\u4e2a\u529f\u80fd\u3002","title":"\u540e\u8bb0"},{"location":"verilog/verilog2.html","text":"verilog\u7b2c\u4e8c\u7bc7 \u00b6","title":"verilog\u7b2c\u4e8c\u7bc7"},{"location":"verilog/verilog2.html#verilog","text":"","title":"verilog\u7b2c\u4e8c\u7bc7"},{"location":"verilog/verilog3.html","text":"verilog \u7b2c\u4e09\u7bc7 \u00b6 Verilog Prodecure Interface(VPI) todo...","title":"verilog \u7b2c\u4e09\u7bc7"},{"location":"verilog/verilog3.html#verilog","text":"Verilog Prodecure Interface(VPI) todo...","title":"verilog \u7b2c\u4e09\u7bc7"}]}